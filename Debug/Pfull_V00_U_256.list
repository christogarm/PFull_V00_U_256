
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801e7f0  0801e7f0  0001d7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00026800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .text         0001b220  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .rodata       000002ec  0801b2e0  0801b2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ARM.extab    00000000  0801b5cc  0801b5cc  00026814  2**0
                  CONTENTS
  9 .ARM          00000008  0801b5cc  0801b5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .preinit_array 00000000  0801b5d4  0801b5d4  00026814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .init_array   00000004  0801b5d4  0801b5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .fini_array   00000004  0801b5d8  0801b5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         00000358  20000000  0801b5dc  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
 14 .bss          00000f98  20000358  0801b934  0001d358  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  200012f0  0801b934  0001e2f0  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  00026814  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002f484  00000000  00000000  0002683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006302  00000000  00000000  00055cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001fc8  00000000  00000000  0005bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001941  00000000  00000000  0005df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00021bd2  00000000  00000000  0005f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0000d84d  00000000  00000000  000814a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  0008ecf0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000770c  00000000  00000000  0008ed34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000084  00000000  00000000  00096440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000358 	.word	0x20000358
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b2b4 	.word	0x0801b2b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000035c 	.word	0x2000035c
 8000104:	0801b2b4 	.word	0x0801b2b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f891 	bl	800153c <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ffd1 	bl	80013cc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f883 	bl	800153c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f879 	bl	800153c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fffb 	bl	8001454 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fff1 	bl	8001454 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ff0b 	bl	800232c <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fb46 	bl	8001bb0 <__aeabi_dsub>
 8000524:	f001 ff02 	bl	800232c <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f001 ff48 	bl	80023ec <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f001 ff43 	bl	80023ec <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4657      	mov	r7, sl
 80006d4:	464e      	mov	r6, r9
 80006d6:	4645      	mov	r5, r8
 80006d8:	46de      	mov	lr, fp
 80006da:	b5e0      	push	{r5, r6, r7, lr}
 80006dc:	b083      	sub	sp, #12
 80006de:	9000      	str	r0, [sp, #0]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	030c      	lsls	r4, r1, #12
 80006e4:	004f      	lsls	r7, r1, #1
 80006e6:	0fce      	lsrs	r6, r1, #31
 80006e8:	0a61      	lsrs	r1, r4, #9
 80006ea:	9c00      	ldr	r4, [sp, #0]
 80006ec:	031d      	lsls	r5, r3, #12
 80006ee:	0f64      	lsrs	r4, r4, #29
 80006f0:	430c      	orrs	r4, r1
 80006f2:	9900      	ldr	r1, [sp, #0]
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	00c8      	lsls	r0, r1, #3
 80006fa:	0059      	lsls	r1, r3, #1
 80006fc:	0d4b      	lsrs	r3, r1, #21
 80006fe:	4699      	mov	r9, r3
 8000700:	9a00      	ldr	r2, [sp, #0]
 8000702:	9b01      	ldr	r3, [sp, #4]
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	0fd9      	lsrs	r1, r3, #31
 8000708:	0f53      	lsrs	r3, r2, #29
 800070a:	432b      	orrs	r3, r5
 800070c:	469a      	mov	sl, r3
 800070e:	9b00      	ldr	r3, [sp, #0]
 8000710:	0d7f      	lsrs	r7, r7, #21
 8000712:	00da      	lsls	r2, r3, #3
 8000714:	4694      	mov	ip, r2
 8000716:	464a      	mov	r2, r9
 8000718:	46b0      	mov	r8, r6
 800071a:	1aba      	subs	r2, r7, r2
 800071c:	428e      	cmp	r6, r1
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x52>
 8000720:	e0b0      	b.n	8000884 <__aeabi_dadd+0x1b4>
 8000722:	2a00      	cmp	r2, #0
 8000724:	dc00      	bgt.n	8000728 <__aeabi_dadd+0x58>
 8000726:	e078      	b.n	800081a <__aeabi_dadd+0x14a>
 8000728:	4649      	mov	r1, r9
 800072a:	2900      	cmp	r1, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x60>
 800072e:	e0e9      	b.n	8000904 <__aeabi_dadd+0x234>
 8000730:	49c9      	ldr	r1, [pc, #804]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000732:	428f      	cmp	r7, r1
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x68>
 8000736:	e195      	b.n	8000a64 <__aeabi_dadd+0x394>
 8000738:	2501      	movs	r5, #1
 800073a:	2a38      	cmp	r2, #56	@ 0x38
 800073c:	dc16      	bgt.n	800076c <__aeabi_dadd+0x9c>
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4653      	mov	r3, sl
 8000742:	0409      	lsls	r1, r1, #16
 8000744:	430b      	orrs	r3, r1
 8000746:	469a      	mov	sl, r3
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x7e>
 800074c:	e1e7      	b.n	8000b1e <__aeabi_dadd+0x44e>
 800074e:	2120      	movs	r1, #32
 8000750:	4655      	mov	r5, sl
 8000752:	1a8b      	subs	r3, r1, r2
 8000754:	4661      	mov	r1, ip
 8000756:	409d      	lsls	r5, r3
 8000758:	40d1      	lsrs	r1, r2
 800075a:	430d      	orrs	r5, r1
 800075c:	4661      	mov	r1, ip
 800075e:	4099      	lsls	r1, r3
 8000760:	1e4b      	subs	r3, r1, #1
 8000762:	4199      	sbcs	r1, r3
 8000764:	4653      	mov	r3, sl
 8000766:	40d3      	lsrs	r3, r2
 8000768:	430d      	orrs	r5, r1
 800076a:	1ae4      	subs	r4, r4, r3
 800076c:	1b45      	subs	r5, r0, r5
 800076e:	42a8      	cmp	r0, r5
 8000770:	4180      	sbcs	r0, r0
 8000772:	4240      	negs	r0, r0
 8000774:	1a24      	subs	r4, r4, r0
 8000776:	0223      	lsls	r3, r4, #8
 8000778:	d400      	bmi.n	800077c <__aeabi_dadd+0xac>
 800077a:	e10f      	b.n	800099c <__aeabi_dadd+0x2cc>
 800077c:	0264      	lsls	r4, r4, #9
 800077e:	0a64      	lsrs	r4, r4, #9
 8000780:	2c00      	cmp	r4, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0xb6>
 8000784:	e139      	b.n	80009fa <__aeabi_dadd+0x32a>
 8000786:	0020      	movs	r0, r4
 8000788:	f7ff fe7a 	bl	8000480 <__clzsi2>
 800078c:	0003      	movs	r3, r0
 800078e:	3b08      	subs	r3, #8
 8000790:	2120      	movs	r1, #32
 8000792:	0028      	movs	r0, r5
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	40d0      	lsrs	r0, r2
 8000798:	409c      	lsls	r4, r3
 800079a:	0002      	movs	r2, r0
 800079c:	409d      	lsls	r5, r3
 800079e:	4322      	orrs	r2, r4
 80007a0:	429f      	cmp	r7, r3
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0xd6>
 80007a4:	e173      	b.n	8000a8e <__aeabi_dadd+0x3be>
 80007a6:	1bd8      	subs	r0, r3, r7
 80007a8:	3001      	adds	r0, #1
 80007aa:	1a09      	subs	r1, r1, r0
 80007ac:	002c      	movs	r4, r5
 80007ae:	408d      	lsls	r5, r1
 80007b0:	40c4      	lsrs	r4, r0
 80007b2:	1e6b      	subs	r3, r5, #1
 80007b4:	419d      	sbcs	r5, r3
 80007b6:	0013      	movs	r3, r2
 80007b8:	40c2      	lsrs	r2, r0
 80007ba:	408b      	lsls	r3, r1
 80007bc:	4325      	orrs	r5, r4
 80007be:	2700      	movs	r7, #0
 80007c0:	0014      	movs	r4, r2
 80007c2:	431d      	orrs	r5, r3
 80007c4:	076b      	lsls	r3, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007c8:	230f      	movs	r3, #15
 80007ca:	402b      	ands	r3, r5
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007d0:	1d2b      	adds	r3, r5, #4
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	41ad      	sbcs	r5, r5
 80007d6:	426d      	negs	r5, r5
 80007d8:	1964      	adds	r4, r4, r5
 80007da:	001d      	movs	r5, r3
 80007dc:	0223      	lsls	r3, r4, #8
 80007de:	d400      	bmi.n	80007e2 <__aeabi_dadd+0x112>
 80007e0:	e12d      	b.n	8000a3e <__aeabi_dadd+0x36e>
 80007e2:	4a9d      	ldr	r2, [pc, #628]	@ (8000a58 <__aeabi_dadd+0x388>)
 80007e4:	3701      	adds	r7, #1
 80007e6:	4297      	cmp	r7, r2
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x11c>
 80007ea:	e0d3      	b.n	8000994 <__aeabi_dadd+0x2c4>
 80007ec:	4646      	mov	r6, r8
 80007ee:	499b      	ldr	r1, [pc, #620]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007f0:	08ed      	lsrs	r5, r5, #3
 80007f2:	4021      	ands	r1, r4
 80007f4:	074a      	lsls	r2, r1, #29
 80007f6:	432a      	orrs	r2, r5
 80007f8:	057c      	lsls	r4, r7, #21
 80007fa:	024d      	lsls	r5, r1, #9
 80007fc:	0b2d      	lsrs	r5, r5, #12
 80007fe:	0d64      	lsrs	r4, r4, #21
 8000800:	0524      	lsls	r4, r4, #20
 8000802:	432c      	orrs	r4, r5
 8000804:	07f6      	lsls	r6, r6, #31
 8000806:	4334      	orrs	r4, r6
 8000808:	0010      	movs	r0, r2
 800080a:	0021      	movs	r1, r4
 800080c:	b003      	add	sp, #12
 800080e:	bcf0      	pop	{r4, r5, r6, r7}
 8000810:	46bb      	mov	fp, r7
 8000812:	46b2      	mov	sl, r6
 8000814:	46a9      	mov	r9, r5
 8000816:	46a0      	mov	r8, r4
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x150>
 800081e:	e084      	b.n	800092a <__aeabi_dadd+0x25a>
 8000820:	464a      	mov	r2, r9
 8000822:	1bd2      	subs	r2, r2, r7
 8000824:	2f00      	cmp	r7, #0
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e16d      	b.n	8000b06 <__aeabi_dadd+0x436>
 800082a:	0025      	movs	r5, r4
 800082c:	4305      	orrs	r5, r0
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e127      	b.n	8000a82 <__aeabi_dadd+0x3b2>
 8000832:	1e56      	subs	r6, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x16a>
 8000838:	e23b      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 800083a:	4d87      	ldr	r5, [pc, #540]	@ (8000a58 <__aeabi_dadd+0x388>)
 800083c:	42aa      	cmp	r2, r5
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x172>
 8000840:	e26a      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000842:	2501      	movs	r5, #1
 8000844:	2e38      	cmp	r6, #56	@ 0x38
 8000846:	dc12      	bgt.n	800086e <__aeabi_dadd+0x19e>
 8000848:	0032      	movs	r2, r6
 800084a:	2a1f      	cmp	r2, #31
 800084c:	dd00      	ble.n	8000850 <__aeabi_dadd+0x180>
 800084e:	e1f8      	b.n	8000c42 <__aeabi_dadd+0x572>
 8000850:	2620      	movs	r6, #32
 8000852:	0025      	movs	r5, r4
 8000854:	1ab6      	subs	r6, r6, r2
 8000856:	0007      	movs	r7, r0
 8000858:	4653      	mov	r3, sl
 800085a:	40b0      	lsls	r0, r6
 800085c:	40d4      	lsrs	r4, r2
 800085e:	40b5      	lsls	r5, r6
 8000860:	40d7      	lsrs	r7, r2
 8000862:	1e46      	subs	r6, r0, #1
 8000864:	41b0      	sbcs	r0, r6
 8000866:	1b1b      	subs	r3, r3, r4
 8000868:	469a      	mov	sl, r3
 800086a:	433d      	orrs	r5, r7
 800086c:	4305      	orrs	r5, r0
 800086e:	4662      	mov	r2, ip
 8000870:	1b55      	subs	r5, r2, r5
 8000872:	45ac      	cmp	ip, r5
 8000874:	4192      	sbcs	r2, r2
 8000876:	4653      	mov	r3, sl
 8000878:	4252      	negs	r2, r2
 800087a:	000e      	movs	r6, r1
 800087c:	464f      	mov	r7, r9
 800087e:	4688      	mov	r8, r1
 8000880:	1a9c      	subs	r4, r3, r2
 8000882:	e778      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000884:	2a00      	cmp	r2, #0
 8000886:	dc00      	bgt.n	800088a <__aeabi_dadd+0x1ba>
 8000888:	e08e      	b.n	80009a8 <__aeabi_dadd+0x2d8>
 800088a:	4649      	mov	r1, r9
 800088c:	2900      	cmp	r1, #0
 800088e:	d175      	bne.n	800097c <__aeabi_dadd+0x2ac>
 8000890:	4661      	mov	r1, ip
 8000892:	4653      	mov	r3, sl
 8000894:	4319      	orrs	r1, r3
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1ca>
 8000898:	e0f6      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 800089a:	1e51      	subs	r1, r2, #1
 800089c:	2a01      	cmp	r2, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x1d2>
 80008a0:	e191      	b.n	8000bc6 <__aeabi_dadd+0x4f6>
 80008a2:	4d6d      	ldr	r5, [pc, #436]	@ (8000a58 <__aeabi_dadd+0x388>)
 80008a4:	42aa      	cmp	r2, r5
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x1da>
 80008a8:	e0dc      	b.n	8000a64 <__aeabi_dadd+0x394>
 80008aa:	2501      	movs	r5, #1
 80008ac:	2938      	cmp	r1, #56	@ 0x38
 80008ae:	dc14      	bgt.n	80008da <__aeabi_dadd+0x20a>
 80008b0:	000a      	movs	r2, r1
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dadd+0x1e8>
 80008b6:	e1a2      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008b8:	2120      	movs	r1, #32
 80008ba:	4653      	mov	r3, sl
 80008bc:	1a89      	subs	r1, r1, r2
 80008be:	408b      	lsls	r3, r1
 80008c0:	001d      	movs	r5, r3
 80008c2:	4663      	mov	r3, ip
 80008c4:	40d3      	lsrs	r3, r2
 80008c6:	431d      	orrs	r5, r3
 80008c8:	4663      	mov	r3, ip
 80008ca:	408b      	lsls	r3, r1
 80008cc:	0019      	movs	r1, r3
 80008ce:	1e4b      	subs	r3, r1, #1
 80008d0:	4199      	sbcs	r1, r3
 80008d2:	4653      	mov	r3, sl
 80008d4:	40d3      	lsrs	r3, r2
 80008d6:	430d      	orrs	r5, r1
 80008d8:	18e4      	adds	r4, r4, r3
 80008da:	182d      	adds	r5, r5, r0
 80008dc:	4285      	cmp	r5, r0
 80008de:	4180      	sbcs	r0, r0
 80008e0:	4240      	negs	r0, r0
 80008e2:	1824      	adds	r4, r4, r0
 80008e4:	0223      	lsls	r3, r4, #8
 80008e6:	d559      	bpl.n	800099c <__aeabi_dadd+0x2cc>
 80008e8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a58 <__aeabi_dadd+0x388>)
 80008ea:	3701      	adds	r7, #1
 80008ec:	429f      	cmp	r7, r3
 80008ee:	d051      	beq.n	8000994 <__aeabi_dadd+0x2c4>
 80008f0:	2101      	movs	r1, #1
 80008f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008f4:	086a      	lsrs	r2, r5, #1
 80008f6:	401c      	ands	r4, r3
 80008f8:	4029      	ands	r1, r5
 80008fa:	430a      	orrs	r2, r1
 80008fc:	07e5      	lsls	r5, r4, #31
 80008fe:	4315      	orrs	r5, r2
 8000900:	0864      	lsrs	r4, r4, #1
 8000902:	e75f      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000904:	4661      	mov	r1, ip
 8000906:	4653      	mov	r3, sl
 8000908:	4319      	orrs	r1, r3
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x23e>
 800090c:	e0bc      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 800090e:	1e51      	subs	r1, r2, #1
 8000910:	2a01      	cmp	r2, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e164      	b.n	8000be0 <__aeabi_dadd+0x510>
 8000916:	4d50      	ldr	r5, [pc, #320]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000918:	42aa      	cmp	r2, r5
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x24e>
 800091c:	e16a      	b.n	8000bf4 <__aeabi_dadd+0x524>
 800091e:	2501      	movs	r5, #1
 8000920:	2938      	cmp	r1, #56	@ 0x38
 8000922:	dd00      	ble.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e722      	b.n	800076c <__aeabi_dadd+0x9c>
 8000926:	000a      	movs	r2, r1
 8000928:	e70e      	b.n	8000748 <__aeabi_dadd+0x78>
 800092a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a60 <__aeabi_dadd+0x390>)
 800092c:	1c7d      	adds	r5, r7, #1
 800092e:	4215      	tst	r5, r2
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x264>
 8000932:	e0d0      	b.n	8000ad6 <__aeabi_dadd+0x406>
 8000934:	0025      	movs	r5, r4
 8000936:	4662      	mov	r2, ip
 8000938:	4653      	mov	r3, sl
 800093a:	4305      	orrs	r5, r0
 800093c:	431a      	orrs	r2, r3
 800093e:	2f00      	cmp	r7, #0
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x274>
 8000942:	e137      	b.n	8000bb4 <__aeabi_dadd+0x4e4>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x27a>
 8000948:	e1a8      	b.n	8000c9c <__aeabi_dadd+0x5cc>
 800094a:	2a00      	cmp	r2, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e16a      	b.n	8000c26 <__aeabi_dadd+0x556>
 8000950:	4663      	mov	r3, ip
 8000952:	1ac5      	subs	r5, r0, r3
 8000954:	4653      	mov	r3, sl
 8000956:	1ae2      	subs	r2, r4, r3
 8000958:	42a8      	cmp	r0, r5
 800095a:	419b      	sbcs	r3, r3
 800095c:	425b      	negs	r3, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	021a      	lsls	r2, r3, #8
 8000962:	d400      	bmi.n	8000966 <__aeabi_dadd+0x296>
 8000964:	e203      	b.n	8000d6e <__aeabi_dadd+0x69e>
 8000966:	4663      	mov	r3, ip
 8000968:	1a1d      	subs	r5, r3, r0
 800096a:	45ac      	cmp	ip, r5
 800096c:	4192      	sbcs	r2, r2
 800096e:	4653      	mov	r3, sl
 8000970:	4252      	negs	r2, r2
 8000972:	1b1c      	subs	r4, r3, r4
 8000974:	000e      	movs	r6, r1
 8000976:	4688      	mov	r8, r1
 8000978:	1aa4      	subs	r4, r4, r2
 800097a:	e723      	b.n	80007c4 <__aeabi_dadd+0xf4>
 800097c:	4936      	ldr	r1, [pc, #216]	@ (8000a58 <__aeabi_dadd+0x388>)
 800097e:	428f      	cmp	r7, r1
 8000980:	d070      	beq.n	8000a64 <__aeabi_dadd+0x394>
 8000982:	2501      	movs	r5, #1
 8000984:	2a38      	cmp	r2, #56	@ 0x38
 8000986:	dca8      	bgt.n	80008da <__aeabi_dadd+0x20a>
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	4653      	mov	r3, sl
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	430b      	orrs	r3, r1
 8000990:	469a      	mov	sl, r3
 8000992:	e78e      	b.n	80008b2 <__aeabi_dadd+0x1e2>
 8000994:	003c      	movs	r4, r7
 8000996:	2500      	movs	r5, #0
 8000998:	2200      	movs	r2, #0
 800099a:	e731      	b.n	8000800 <__aeabi_dadd+0x130>
 800099c:	2307      	movs	r3, #7
 800099e:	402b      	ands	r3, r5
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x2d6>
 80009a4:	e710      	b.n	80007c8 <__aeabi_dadd+0xf8>
 80009a6:	e093      	b.n	8000ad0 <__aeabi_dadd+0x400>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d074      	beq.n	8000a96 <__aeabi_dadd+0x3c6>
 80009ac:	464a      	mov	r2, r9
 80009ae:	1bd2      	subs	r2, r2, r7
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x2e6>
 80009b4:	e0c7      	b.n	8000b46 <__aeabi_dadd+0x476>
 80009b6:	4928      	ldr	r1, [pc, #160]	@ (8000a58 <__aeabi_dadd+0x388>)
 80009b8:	4589      	cmp	r9, r1
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x2ee>
 80009bc:	e185      	b.n	8000cca <__aeabi_dadd+0x5fa>
 80009be:	2501      	movs	r5, #1
 80009c0:	2a38      	cmp	r2, #56	@ 0x38
 80009c2:	dc12      	bgt.n	80009ea <__aeabi_dadd+0x31a>
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0409      	lsls	r1, r1, #16
 80009c8:	430c      	orrs	r4, r1
 80009ca:	2a1f      	cmp	r2, #31
 80009cc:	dd00      	ble.n	80009d0 <__aeabi_dadd+0x300>
 80009ce:	e1ab      	b.n	8000d28 <__aeabi_dadd+0x658>
 80009d0:	2120      	movs	r1, #32
 80009d2:	0025      	movs	r5, r4
 80009d4:	1a89      	subs	r1, r1, r2
 80009d6:	0007      	movs	r7, r0
 80009d8:	4088      	lsls	r0, r1
 80009da:	408d      	lsls	r5, r1
 80009dc:	40d7      	lsrs	r7, r2
 80009de:	1e41      	subs	r1, r0, #1
 80009e0:	4188      	sbcs	r0, r1
 80009e2:	40d4      	lsrs	r4, r2
 80009e4:	433d      	orrs	r5, r7
 80009e6:	4305      	orrs	r5, r0
 80009e8:	44a2      	add	sl, r4
 80009ea:	4465      	add	r5, ip
 80009ec:	4565      	cmp	r5, ip
 80009ee:	4192      	sbcs	r2, r2
 80009f0:	4252      	negs	r2, r2
 80009f2:	4452      	add	r2, sl
 80009f4:	0014      	movs	r4, r2
 80009f6:	464f      	mov	r7, r9
 80009f8:	e774      	b.n	80008e4 <__aeabi_dadd+0x214>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f7ff fd40 	bl	8000480 <__clzsi2>
 8000a00:	0003      	movs	r3, r0
 8000a02:	3318      	adds	r3, #24
 8000a04:	2b1f      	cmp	r3, #31
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x33a>
 8000a08:	e6c2      	b.n	8000790 <__aeabi_dadd+0xc0>
 8000a0a:	002a      	movs	r2, r5
 8000a0c:	3808      	subs	r0, #8
 8000a0e:	4082      	lsls	r2, r0
 8000a10:	429f      	cmp	r7, r3
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x346>
 8000a14:	e0a9      	b.n	8000b6a <__aeabi_dadd+0x49a>
 8000a16:	1bdb      	subs	r3, r3, r7
 8000a18:	1c58      	adds	r0, r3, #1
 8000a1a:	281f      	cmp	r0, #31
 8000a1c:	dc00      	bgt.n	8000a20 <__aeabi_dadd+0x350>
 8000a1e:	e1ac      	b.n	8000d7a <__aeabi_dadd+0x6aa>
 8000a20:	0015      	movs	r5, r2
 8000a22:	3b1f      	subs	r3, #31
 8000a24:	40dd      	lsrs	r5, r3
 8000a26:	2820      	cmp	r0, #32
 8000a28:	d005      	beq.n	8000a36 <__aeabi_dadd+0x366>
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	1a1b      	subs	r3, r3, r0
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	1e53      	subs	r3, r2, #1
 8000a32:	419a      	sbcs	r2, r3
 8000a34:	4315      	orrs	r5, r2
 8000a36:	2307      	movs	r3, #7
 8000a38:	2700      	movs	r7, #0
 8000a3a:	402b      	ands	r3, r5
 8000a3c:	e7b0      	b.n	80009a0 <__aeabi_dadd+0x2d0>
 8000a3e:	08ed      	lsrs	r5, r5, #3
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000a42:	0762      	lsls	r2, r4, #29
 8000a44:	432a      	orrs	r2, r5
 8000a46:	08e4      	lsrs	r4, r4, #3
 8000a48:	429f      	cmp	r7, r3
 8000a4a:	d00f      	beq.n	8000a6c <__aeabi_dadd+0x39c>
 8000a4c:	0324      	lsls	r4, r4, #12
 8000a4e:	0b25      	lsrs	r5, r4, #12
 8000a50:	057c      	lsls	r4, r7, #21
 8000a52:	0d64      	lsrs	r4, r4, #21
 8000a54:	e6d4      	b.n	8000800 <__aeabi_dadd+0x130>
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	000007ff 	.word	0x000007ff
 8000a5c:	ff7fffff 	.word	0xff7fffff
 8000a60:	000007fe 	.word	0x000007fe
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	0762      	lsls	r2, r4, #29
 8000a68:	4302      	orrs	r2, r0
 8000a6a:	08e4      	lsrs	r4, r4, #3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	4323      	orrs	r3, r4
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x3a4>
 8000a72:	e186      	b.n	8000d82 <__aeabi_dadd+0x6b2>
 8000a74:	2580      	movs	r5, #128	@ 0x80
 8000a76:	032d      	lsls	r5, r5, #12
 8000a78:	4325      	orrs	r5, r4
 8000a7a:	032d      	lsls	r5, r5, #12
 8000a7c:	4cc3      	ldr	r4, [pc, #780]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000a7e:	0b2d      	lsrs	r5, r5, #12
 8000a80:	e6be      	b.n	8000800 <__aeabi_dadd+0x130>
 8000a82:	4660      	mov	r0, ip
 8000a84:	4654      	mov	r4, sl
 8000a86:	000e      	movs	r6, r1
 8000a88:	0017      	movs	r7, r2
 8000a8a:	08c5      	lsrs	r5, r0, #3
 8000a8c:	e7d8      	b.n	8000a40 <__aeabi_dadd+0x370>
 8000a8e:	4cc0      	ldr	r4, [pc, #768]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000a90:	1aff      	subs	r7, r7, r3
 8000a92:	4014      	ands	r4, r2
 8000a94:	e696      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000a96:	4abf      	ldr	r2, [pc, #764]	@ (8000d94 <__aeabi_dadd+0x6c4>)
 8000a98:	1c79      	adds	r1, r7, #1
 8000a9a:	4211      	tst	r1, r2
 8000a9c:	d16b      	bne.n	8000b76 <__aeabi_dadd+0x4a6>
 8000a9e:	0022      	movs	r2, r4
 8000aa0:	4302      	orrs	r2, r0
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_dadd+0x3d8>
 8000aa6:	e0db      	b.n	8000c60 <__aeabi_dadd+0x590>
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x3de>
 8000aac:	e12d      	b.n	8000d0a <__aeabi_dadd+0x63a>
 8000aae:	4662      	mov	r2, ip
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000ab6:	e0b6      	b.n	8000c26 <__aeabi_dadd+0x556>
 8000ab8:	4663      	mov	r3, ip
 8000aba:	18c5      	adds	r5, r0, r3
 8000abc:	4285      	cmp	r5, r0
 8000abe:	4180      	sbcs	r0, r0
 8000ac0:	4454      	add	r4, sl
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	1824      	adds	r4, r4, r0
 8000ac6:	0223      	lsls	r3, r4, #8
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_dadd+0x400>
 8000aca:	000f      	movs	r7, r1
 8000acc:	4bb0      	ldr	r3, [pc, #704]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000ace:	401c      	ands	r4, r3
 8000ad0:	003a      	movs	r2, r7
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	e7d8      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	1a85      	subs	r5, r0, r2
 8000ada:	42a8      	cmp	r0, r5
 8000adc:	4192      	sbcs	r2, r2
 8000ade:	4653      	mov	r3, sl
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	4691      	mov	r9, r2
 8000ae4:	1ae3      	subs	r3, r4, r3
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	464b      	mov	r3, r9
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	4691      	mov	r9, r2
 8000af0:	021a      	lsls	r2, r3, #8
 8000af2:	d454      	bmi.n	8000b9e <__aeabi_dadd+0x4ce>
 8000af4:	464a      	mov	r2, r9
 8000af6:	464c      	mov	r4, r9
 8000af8:	432a      	orrs	r2, r5
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e640      	b.n	8000780 <__aeabi_dadd+0xb0>
 8000afe:	2600      	movs	r6, #0
 8000b00:	2400      	movs	r4, #0
 8000b02:	2500      	movs	r5, #0
 8000b04:	e67c      	b.n	8000800 <__aeabi_dadd+0x130>
 8000b06:	4da1      	ldr	r5, [pc, #644]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b08:	45a9      	cmp	r9, r5
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x43e>
 8000b0c:	e090      	b.n	8000c30 <__aeabi_dadd+0x560>
 8000b0e:	2501      	movs	r5, #1
 8000b10:	2a38      	cmp	r2, #56	@ 0x38
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_dadd+0x446>
 8000b14:	e6ab      	b.n	800086e <__aeabi_dadd+0x19e>
 8000b16:	2580      	movs	r5, #128	@ 0x80
 8000b18:	042d      	lsls	r5, r5, #16
 8000b1a:	432c      	orrs	r4, r5
 8000b1c:	e695      	b.n	800084a <__aeabi_dadd+0x17a>
 8000b1e:	0011      	movs	r1, r2
 8000b20:	4655      	mov	r5, sl
 8000b22:	3920      	subs	r1, #32
 8000b24:	40cd      	lsrs	r5, r1
 8000b26:	46a9      	mov	r9, r5
 8000b28:	2a20      	cmp	r2, #32
 8000b2a:	d006      	beq.n	8000b3a <__aeabi_dadd+0x46a>
 8000b2c:	2140      	movs	r1, #64	@ 0x40
 8000b2e:	4653      	mov	r3, sl
 8000b30:	1a8a      	subs	r2, r1, r2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	4662      	mov	r2, ip
 8000b36:	431a      	orrs	r2, r3
 8000b38:	4694      	mov	ip, r2
 8000b3a:	4665      	mov	r5, ip
 8000b3c:	1e6b      	subs	r3, r5, #1
 8000b3e:	419d      	sbcs	r5, r3
 8000b40:	464b      	mov	r3, r9
 8000b42:	431d      	orrs	r5, r3
 8000b44:	e612      	b.n	800076c <__aeabi_dadd+0x9c>
 8000b46:	0021      	movs	r1, r4
 8000b48:	4301      	orrs	r1, r0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x47e>
 8000b4c:	e0c4      	b.n	8000cd8 <__aeabi_dadd+0x608>
 8000b4e:	1e51      	subs	r1, r2, #1
 8000b50:	2a01      	cmp	r2, #1
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x486>
 8000b54:	e0fb      	b.n	8000d4e <__aeabi_dadd+0x67e>
 8000b56:	4d8d      	ldr	r5, [pc, #564]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b58:	42aa      	cmp	r2, r5
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x48e>
 8000b5c:	e0b5      	b.n	8000cca <__aeabi_dadd+0x5fa>
 8000b5e:	2501      	movs	r5, #1
 8000b60:	2938      	cmp	r1, #56	@ 0x38
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_dadd+0x496>
 8000b64:	e741      	b.n	80009ea <__aeabi_dadd+0x31a>
 8000b66:	000a      	movs	r2, r1
 8000b68:	e72f      	b.n	80009ca <__aeabi_dadd+0x2fa>
 8000b6a:	4c89      	ldr	r4, [pc, #548]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000b6c:	1aff      	subs	r7, r7, r3
 8000b6e:	4014      	ands	r4, r2
 8000b70:	0762      	lsls	r2, r4, #29
 8000b72:	08e4      	lsrs	r4, r4, #3
 8000b74:	e76a      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000b76:	4a85      	ldr	r2, [pc, #532]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b78:	4291      	cmp	r1, r2
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x4ae>
 8000b7c:	e0e3      	b.n	8000d46 <__aeabi_dadd+0x676>
 8000b7e:	4663      	mov	r3, ip
 8000b80:	18c2      	adds	r2, r0, r3
 8000b82:	4282      	cmp	r2, r0
 8000b84:	4180      	sbcs	r0, r0
 8000b86:	0023      	movs	r3, r4
 8000b88:	4240      	negs	r0, r0
 8000b8a:	4453      	add	r3, sl
 8000b8c:	181b      	adds	r3, r3, r0
 8000b8e:	07dd      	lsls	r5, r3, #31
 8000b90:	085c      	lsrs	r4, r3, #1
 8000b92:	2307      	movs	r3, #7
 8000b94:	0852      	lsrs	r2, r2, #1
 8000b96:	4315      	orrs	r5, r2
 8000b98:	000f      	movs	r7, r1
 8000b9a:	402b      	ands	r3, r5
 8000b9c:	e700      	b.n	80009a0 <__aeabi_dadd+0x2d0>
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	1a1d      	subs	r5, r3, r0
 8000ba2:	45ac      	cmp	ip, r5
 8000ba4:	4192      	sbcs	r2, r2
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	4252      	negs	r2, r2
 8000baa:	1b1c      	subs	r4, r3, r4
 8000bac:	000e      	movs	r6, r1
 8000bae:	4688      	mov	r8, r1
 8000bb0:	1aa4      	subs	r4, r4, r2
 8000bb2:	e5e5      	b.n	8000780 <__aeabi_dadd+0xb0>
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dadd+0x4ea>
 8000bb8:	e091      	b.n	8000cde <__aeabi_dadd+0x60e>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d138      	bne.n	8000c30 <__aeabi_dadd+0x560>
 8000bbe:	2480      	movs	r4, #128	@ 0x80
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	0324      	lsls	r4, r4, #12
 8000bc4:	e756      	b.n	8000a74 <__aeabi_dadd+0x3a4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	18c5      	adds	r5, r0, r3
 8000bca:	4285      	cmp	r5, r0
 8000bcc:	4180      	sbcs	r0, r0
 8000bce:	4454      	add	r4, sl
 8000bd0:	4240      	negs	r0, r0
 8000bd2:	1824      	adds	r4, r4, r0
 8000bd4:	2701      	movs	r7, #1
 8000bd6:	0223      	lsls	r3, r4, #8
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_dadd+0x50c>
 8000bda:	e6df      	b.n	800099c <__aeabi_dadd+0x2cc>
 8000bdc:	2702      	movs	r7, #2
 8000bde:	e687      	b.n	80008f0 <__aeabi_dadd+0x220>
 8000be0:	4663      	mov	r3, ip
 8000be2:	1ac5      	subs	r5, r0, r3
 8000be4:	42a8      	cmp	r0, r5
 8000be6:	4180      	sbcs	r0, r0
 8000be8:	4653      	mov	r3, sl
 8000bea:	4240      	negs	r0, r0
 8000bec:	1ae4      	subs	r4, r4, r3
 8000bee:	2701      	movs	r7, #1
 8000bf0:	1a24      	subs	r4, r4, r0
 8000bf2:	e5c0      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000bf4:	0762      	lsls	r2, r4, #29
 8000bf6:	08c0      	lsrs	r0, r0, #3
 8000bf8:	4302      	orrs	r2, r0
 8000bfa:	08e4      	lsrs	r4, r4, #3
 8000bfc:	e736      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000bfe:	0011      	movs	r1, r2
 8000c00:	4653      	mov	r3, sl
 8000c02:	3920      	subs	r1, #32
 8000c04:	40cb      	lsrs	r3, r1
 8000c06:	4699      	mov	r9, r3
 8000c08:	2a20      	cmp	r2, #32
 8000c0a:	d006      	beq.n	8000c1a <__aeabi_dadd+0x54a>
 8000c0c:	2140      	movs	r1, #64	@ 0x40
 8000c0e:	4653      	mov	r3, sl
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	4093      	lsls	r3, r2
 8000c14:	4662      	mov	r2, ip
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4694      	mov	ip, r2
 8000c1a:	4665      	mov	r5, ip
 8000c1c:	1e6b      	subs	r3, r5, #1
 8000c1e:	419d      	sbcs	r5, r3
 8000c20:	464b      	mov	r3, r9
 8000c22:	431d      	orrs	r5, r3
 8000c24:	e659      	b.n	80008da <__aeabi_dadd+0x20a>
 8000c26:	0762      	lsls	r2, r4, #29
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	08e4      	lsrs	r4, r4, #3
 8000c2e:	e70d      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000c30:	4653      	mov	r3, sl
 8000c32:	075a      	lsls	r2, r3, #29
 8000c34:	4663      	mov	r3, ip
 8000c36:	08d8      	lsrs	r0, r3, #3
 8000c38:	4653      	mov	r3, sl
 8000c3a:	000e      	movs	r6, r1
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	08dc      	lsrs	r4, r3, #3
 8000c40:	e714      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000c42:	0015      	movs	r5, r2
 8000c44:	0026      	movs	r6, r4
 8000c46:	3d20      	subs	r5, #32
 8000c48:	40ee      	lsrs	r6, r5
 8000c4a:	2a20      	cmp	r2, #32
 8000c4c:	d003      	beq.n	8000c56 <__aeabi_dadd+0x586>
 8000c4e:	2540      	movs	r5, #64	@ 0x40
 8000c50:	1aaa      	subs	r2, r5, r2
 8000c52:	4094      	lsls	r4, r2
 8000c54:	4320      	orrs	r0, r4
 8000c56:	1e42      	subs	r2, r0, #1
 8000c58:	4190      	sbcs	r0, r2
 8000c5a:	0005      	movs	r5, r0
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	e606      	b.n	800086e <__aeabi_dadd+0x19e>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d07c      	beq.n	8000d5e <__aeabi_dadd+0x68e>
 8000c64:	4662      	mov	r2, ip
 8000c66:	4653      	mov	r3, sl
 8000c68:	08c0      	lsrs	r0, r0, #3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c6e:	e6fa      	b.n	8000a66 <__aeabi_dadd+0x396>
 8000c70:	0762      	lsls	r2, r4, #29
 8000c72:	4310      	orrs	r0, r2
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	08e4      	lsrs	r4, r4, #3
 8000c78:	0312      	lsls	r2, r2, #12
 8000c7a:	4214      	tst	r4, r2
 8000c7c:	d008      	beq.n	8000c90 <__aeabi_dadd+0x5c0>
 8000c7e:	08d9      	lsrs	r1, r3, #3
 8000c80:	4211      	tst	r1, r2
 8000c82:	d105      	bne.n	8000c90 <__aeabi_dadd+0x5c0>
 8000c84:	4663      	mov	r3, ip
 8000c86:	08d8      	lsrs	r0, r3, #3
 8000c88:	4653      	mov	r3, sl
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	075b      	lsls	r3, r3, #29
 8000c8e:	4318      	orrs	r0, r3
 8000c90:	0f42      	lsrs	r2, r0, #29
 8000c92:	00c0      	lsls	r0, r0, #3
 8000c94:	08c0      	lsrs	r0, r0, #3
 8000c96:	0752      	lsls	r2, r2, #29
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	e6e7      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x5d2>
 8000ca0:	e72d      	b.n	8000afe <__aeabi_dadd+0x42e>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	08d8      	lsrs	r0, r3, #3
 8000ca6:	4653      	mov	r3, sl
 8000ca8:	075a      	lsls	r2, r3, #29
 8000caa:	000e      	movs	r6, r1
 8000cac:	4302      	orrs	r2, r0
 8000cae:	08dc      	lsrs	r4, r3, #3
 8000cb0:	e6cc      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	1a1d      	subs	r5, r3, r0
 8000cb6:	45ac      	cmp	ip, r5
 8000cb8:	4192      	sbcs	r2, r2
 8000cba:	4653      	mov	r3, sl
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	1b1c      	subs	r4, r3, r4
 8000cc0:	000e      	movs	r6, r1
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	1aa4      	subs	r4, r4, r2
 8000cc6:	3701      	adds	r7, #1
 8000cc8:	e555      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d9      	lsrs	r1, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	08dc      	lsrs	r4, r3, #3
 8000cd6:	e6c9      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	4654      	mov	r4, sl
 8000cdc:	e6d4      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 8000cde:	08c0      	lsrs	r0, r0, #3
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x616>
 8000ce4:	e6bf      	b.n	8000a66 <__aeabi_dadd+0x396>
 8000ce6:	0762      	lsls	r2, r4, #29
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	08e4      	lsrs	r4, r4, #3
 8000cee:	0312      	lsls	r2, r2, #12
 8000cf0:	4214      	tst	r4, r2
 8000cf2:	d0cd      	beq.n	8000c90 <__aeabi_dadd+0x5c0>
 8000cf4:	08dd      	lsrs	r5, r3, #3
 8000cf6:	4215      	tst	r5, r2
 8000cf8:	d1ca      	bne.n	8000c90 <__aeabi_dadd+0x5c0>
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	08d8      	lsrs	r0, r3, #3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	075b      	lsls	r3, r3, #29
 8000d02:	000e      	movs	r6, r1
 8000d04:	002c      	movs	r4, r5
 8000d06:	4318      	orrs	r0, r3
 8000d08:	e7c2      	b.n	8000c90 <__aeabi_dadd+0x5c0>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	08d9      	lsrs	r1, r3, #3
 8000d0e:	4653      	mov	r3, sl
 8000d10:	075a      	lsls	r2, r3, #29
 8000d12:	430a      	orrs	r2, r1
 8000d14:	08dc      	lsrs	r4, r3, #3
 8000d16:	e699      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	075a      	lsls	r2, r3, #29
 8000d20:	000e      	movs	r6, r1
 8000d22:	4302      	orrs	r2, r0
 8000d24:	08dc      	lsrs	r4, r3, #3
 8000d26:	e6a1      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0027      	movs	r7, r4
 8000d2c:	3920      	subs	r1, #32
 8000d2e:	40cf      	lsrs	r7, r1
 8000d30:	2a20      	cmp	r2, #32
 8000d32:	d003      	beq.n	8000d3c <__aeabi_dadd+0x66c>
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	1a8a      	subs	r2, r1, r2
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	4320      	orrs	r0, r4
 8000d3c:	1e42      	subs	r2, r0, #1
 8000d3e:	4190      	sbcs	r0, r2
 8000d40:	0005      	movs	r5, r0
 8000d42:	433d      	orrs	r5, r7
 8000d44:	e651      	b.n	80009ea <__aeabi_dadd+0x31a>
 8000d46:	000c      	movs	r4, r1
 8000d48:	2500      	movs	r5, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e558      	b.n	8000800 <__aeabi_dadd+0x130>
 8000d4e:	4460      	add	r0, ip
 8000d50:	4560      	cmp	r0, ip
 8000d52:	4192      	sbcs	r2, r2
 8000d54:	4454      	add	r4, sl
 8000d56:	4252      	negs	r2, r2
 8000d58:	0005      	movs	r5, r0
 8000d5a:	18a4      	adds	r4, r4, r2
 8000d5c:	e73a      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d5e:	4653      	mov	r3, sl
 8000d60:	075a      	lsls	r2, r3, #29
 8000d62:	4663      	mov	r3, ip
 8000d64:	08d9      	lsrs	r1, r3, #3
 8000d66:	4653      	mov	r3, sl
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	08dc      	lsrs	r4, r3, #3
 8000d6c:	e67e      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000d6e:	001a      	movs	r2, r3
 8000d70:	001c      	movs	r4, r3
 8000d72:	432a      	orrs	r2, r5
 8000d74:	d000      	beq.n	8000d78 <__aeabi_dadd+0x6a8>
 8000d76:	e6ab      	b.n	8000ad0 <__aeabi_dadd+0x400>
 8000d78:	e6c1      	b.n	8000afe <__aeabi_dadd+0x42e>
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	1a09      	subs	r1, r1, r0
 8000d80:	e519      	b.n	80007b6 <__aeabi_dadd+0xe6>
 8000d82:	2200      	movs	r2, #0
 8000d84:	2500      	movs	r5, #0
 8000d86:	4c01      	ldr	r4, [pc, #4]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000d88:	e53a      	b.n	8000800 <__aeabi_dadd+0x130>
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	000007ff 	.word	0x000007ff
 8000d90:	ff7fffff 	.word	0xff7fffff
 8000d94:	000007fe 	.word	0x000007fe

08000d98 <__aeabi_ddiv>:
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	46de      	mov	lr, fp
 8000d9c:	4645      	mov	r5, r8
 8000d9e:	4657      	mov	r7, sl
 8000da0:	464e      	mov	r6, r9
 8000da2:	b5e0      	push	{r5, r6, r7, lr}
 8000da4:	b087      	sub	sp, #28
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	030b      	lsls	r3, r1, #12
 8000dac:	0b1b      	lsrs	r3, r3, #12
 8000dae:	469b      	mov	fp, r3
 8000db0:	0fca      	lsrs	r2, r1, #31
 8000db2:	004b      	lsls	r3, r1, #1
 8000db4:	0004      	movs	r4, r0
 8000db6:	4680      	mov	r8, r0
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	9202      	str	r2, [sp, #8]
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x28>
 8000dbe:	e16a      	b.n	8001096 <__aeabi_ddiv+0x2fe>
 8000dc0:	4ad4      	ldr	r2, [pc, #848]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x30>
 8000dc6:	e18c      	b.n	80010e2 <__aeabi_ddiv+0x34a>
 8000dc8:	4659      	mov	r1, fp
 8000dca:	0f42      	lsrs	r2, r0, #29
 8000dcc:	00c9      	lsls	r1, r1, #3
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	2180      	movs	r1, #128	@ 0x80
 8000dd2:	0409      	lsls	r1, r1, #16
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	00c2      	lsls	r2, r0, #3
 8000dd8:	4690      	mov	r8, r2
 8000dda:	4acf      	ldr	r2, [pc, #828]	@ (8001118 <__aeabi_ddiv+0x380>)
 8000ddc:	4689      	mov	r9, r1
 8000dde:	4692      	mov	sl, r2
 8000de0:	449a      	add	sl, r3
 8000de2:	2300      	movs	r3, #0
 8000de4:	2400      	movs	r4, #0
 8000de6:	9303      	str	r3, [sp, #12]
 8000de8:	9e00      	ldr	r6, [sp, #0]
 8000dea:	9f01      	ldr	r7, [sp, #4]
 8000dec:	033b      	lsls	r3, r7, #12
 8000dee:	0b1b      	lsrs	r3, r3, #12
 8000df0:	469b      	mov	fp, r3
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	0030      	movs	r0, r6
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	0ffd      	lsrs	r5, r7, #31
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x68>
 8000dfe:	e128      	b.n	8001052 <__aeabi_ddiv+0x2ba>
 8000e00:	4ac4      	ldr	r2, [pc, #784]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x70>
 8000e06:	e177      	b.n	80010f8 <__aeabi_ddiv+0x360>
 8000e08:	4659      	mov	r1, fp
 8000e0a:	0f72      	lsrs	r2, r6, #29
 8000e0c:	00c9      	lsls	r1, r1, #3
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0409      	lsls	r1, r1, #16
 8000e14:	4311      	orrs	r1, r2
 8000e16:	468b      	mov	fp, r1
 8000e18:	49bf      	ldr	r1, [pc, #764]	@ (8001118 <__aeabi_ddiv+0x380>)
 8000e1a:	00f2      	lsls	r2, r6, #3
 8000e1c:	468c      	mov	ip, r1
 8000e1e:	4651      	mov	r1, sl
 8000e20:	4463      	add	r3, ip
 8000e22:	1acb      	subs	r3, r1, r3
 8000e24:	469a      	mov	sl, r3
 8000e26:	2300      	movs	r3, #0
 8000e28:	9e02      	ldr	r6, [sp, #8]
 8000e2a:	406e      	eors	r6, r5
 8000e2c:	2c0f      	cmp	r4, #15
 8000e2e:	d827      	bhi.n	8000e80 <__aeabi_ddiv+0xe8>
 8000e30:	49ba      	ldr	r1, [pc, #744]	@ (800111c <__aeabi_ddiv+0x384>)
 8000e32:	00a4      	lsls	r4, r4, #2
 8000e34:	5909      	ldr	r1, [r1, r4]
 8000e36:	468f      	mov	pc, r1
 8000e38:	46cb      	mov	fp, r9
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	9e02      	ldr	r6, [sp, #8]
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d016      	beq.n	8000e72 <__aeabi_ddiv+0xda>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0xb2>
 8000e48:	e2a6      	b.n	8001398 <__aeabi_ddiv+0x600>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_ddiv+0xb8>
 8000e4e:	e0df      	b.n	8001010 <__aeabi_ddiv+0x278>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2300      	movs	r3, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	4690      	mov	r8, r2
 8000e58:	051b      	lsls	r3, r3, #20
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	07f6      	lsls	r6, r6, #31
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4640      	mov	r0, r8
 8000e62:	0019      	movs	r1, r3
 8000e64:	b007      	add	sp, #28
 8000e66:	bcf0      	pop	{r4, r5, r6, r7}
 8000e68:	46bb      	mov	fp, r7
 8000e6a:	46b2      	mov	sl, r6
 8000e6c:	46a9      	mov	r9, r5
 8000e6e:	46a0      	mov	r8, r4
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	2200      	movs	r2, #0
 8000e74:	2400      	movs	r4, #0
 8000e76:	4690      	mov	r8, r2
 8000e78:	4ba6      	ldr	r3, [pc, #664]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000e7a:	e7ed      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8000e7c:	002e      	movs	r6, r5
 8000e7e:	e7df      	b.n	8000e40 <__aeabi_ddiv+0xa8>
 8000e80:	45cb      	cmp	fp, r9
 8000e82:	d200      	bcs.n	8000e86 <__aeabi_ddiv+0xee>
 8000e84:	e1d4      	b.n	8001230 <__aeabi_ddiv+0x498>
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0xf2>
 8000e88:	e1cf      	b.n	800122a <__aeabi_ddiv+0x492>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	469c      	mov	ip, r3
 8000e90:	4644      	mov	r4, r8
 8000e92:	4648      	mov	r0, r9
 8000e94:	2700      	movs	r7, #0
 8000e96:	44e2      	add	sl, ip
 8000e98:	465b      	mov	r3, fp
 8000e9a:	0e15      	lsrs	r5, r2, #24
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	431d      	orrs	r5, r3
 8000ea0:	0c19      	lsrs	r1, r3, #16
 8000ea2:	042b      	lsls	r3, r5, #16
 8000ea4:	0212      	lsls	r2, r2, #8
 8000ea6:	9500      	str	r5, [sp, #0]
 8000ea8:	0c1d      	lsrs	r5, r3, #16
 8000eaa:	4691      	mov	r9, r2
 8000eac:	9102      	str	r1, [sp, #8]
 8000eae:	9503      	str	r5, [sp, #12]
 8000eb0:	f7ff f9b8 	bl	8000224 <__aeabi_uidivmod>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	436a      	muls	r2, r5
 8000eb8:	040b      	lsls	r3, r1, #16
 8000eba:	0c21      	lsrs	r1, r4, #16
 8000ebc:	4680      	mov	r8, r0
 8000ebe:	4319      	orrs	r1, r3
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	d909      	bls.n	8000ed8 <__aeabi_ddiv+0x140>
 8000ec4:	9d00      	ldr	r5, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	46ac      	mov	ip, r5
 8000eca:	425b      	negs	r3, r3
 8000ecc:	4461      	add	r1, ip
 8000ece:	469c      	mov	ip, r3
 8000ed0:	44e0      	add	r8, ip
 8000ed2:	428d      	cmp	r5, r1
 8000ed4:	d800      	bhi.n	8000ed8 <__aeabi_ddiv+0x140>
 8000ed6:	e1fb      	b.n	80012d0 <__aeabi_ddiv+0x538>
 8000ed8:	1a88      	subs	r0, r1, r2
 8000eda:	9902      	ldr	r1, [sp, #8]
 8000edc:	f7ff f9a2 	bl	8000224 <__aeabi_uidivmod>
 8000ee0:	9a03      	ldr	r2, [sp, #12]
 8000ee2:	0424      	lsls	r4, r4, #16
 8000ee4:	4342      	muls	r2, r0
 8000ee6:	0409      	lsls	r1, r1, #16
 8000ee8:	0c24      	lsrs	r4, r4, #16
 8000eea:	0003      	movs	r3, r0
 8000eec:	430c      	orrs	r4, r1
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d906      	bls.n	8000f00 <__aeabi_ddiv+0x168>
 8000ef2:	9900      	ldr	r1, [sp, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	468c      	mov	ip, r1
 8000ef8:	4464      	add	r4, ip
 8000efa:	42a1      	cmp	r1, r4
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x168>
 8000efe:	e1e1      	b.n	80012c4 <__aeabi_ddiv+0x52c>
 8000f00:	1aa0      	subs	r0, r4, r2
 8000f02:	4642      	mov	r2, r8
 8000f04:	0412      	lsls	r2, r2, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	4693      	mov	fp, r2
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	4659      	mov	r1, fp
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	001d      	movs	r5, r3
 8000f12:	9304      	str	r3, [sp, #16]
 8000f14:	040b      	lsls	r3, r1, #16
 8000f16:	4649      	mov	r1, r9
 8000f18:	0409      	lsls	r1, r1, #16
 8000f1a:	0c09      	lsrs	r1, r1, #16
 8000f1c:	000c      	movs	r4, r1
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	435c      	muls	r4, r3
 8000f22:	0c12      	lsrs	r2, r2, #16
 8000f24:	436b      	muls	r3, r5
 8000f26:	4688      	mov	r8, r1
 8000f28:	4351      	muls	r1, r2
 8000f2a:	436a      	muls	r2, r5
 8000f2c:	0c25      	lsrs	r5, r4, #16
 8000f2e:	46ac      	mov	ip, r5
 8000f30:	185b      	adds	r3, r3, r1
 8000f32:	4463      	add	r3, ip
 8000f34:	4299      	cmp	r1, r3
 8000f36:	d903      	bls.n	8000f40 <__aeabi_ddiv+0x1a8>
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	0249      	lsls	r1, r1, #9
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	4462      	add	r2, ip
 8000f40:	0c19      	lsrs	r1, r3, #16
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c24      	lsrs	r4, r4, #16
 8000f48:	188a      	adds	r2, r1, r2
 8000f4a:	191c      	adds	r4, r3, r4
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	d302      	bcc.n	8000f56 <__aeabi_ddiv+0x1be>
 8000f50:	d116      	bne.n	8000f80 <__aeabi_ddiv+0x1e8>
 8000f52:	42a7      	cmp	r7, r4
 8000f54:	d214      	bcs.n	8000f80 <__aeabi_ddiv+0x1e8>
 8000f56:	465b      	mov	r3, fp
 8000f58:	9d00      	ldr	r5, [sp, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	444f      	add	r7, r9
 8000f5e:	9305      	str	r3, [sp, #20]
 8000f60:	454f      	cmp	r7, r9
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	46ac      	mov	ip, r5
 8000f66:	425b      	negs	r3, r3
 8000f68:	4463      	add	r3, ip
 8000f6a:	18c0      	adds	r0, r0, r3
 8000f6c:	4285      	cmp	r5, r0
 8000f6e:	d300      	bcc.n	8000f72 <__aeabi_ddiv+0x1da>
 8000f70:	e1a1      	b.n	80012b6 <__aeabi_ddiv+0x51e>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	d900      	bls.n	8000f78 <__aeabi_ddiv+0x1e0>
 8000f76:	e1f6      	b.n	8001366 <__aeabi_ddiv+0x5ce>
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x1e4>
 8000f7a:	e1f1      	b.n	8001360 <__aeabi_ddiv+0x5c8>
 8000f7c:	9b05      	ldr	r3, [sp, #20]
 8000f7e:	469b      	mov	fp, r3
 8000f80:	1b3c      	subs	r4, r7, r4
 8000f82:	42a7      	cmp	r7, r4
 8000f84:	41bf      	sbcs	r7, r7
 8000f86:	9d00      	ldr	r5, [sp, #0]
 8000f88:	1a80      	subs	r0, r0, r2
 8000f8a:	427f      	negs	r7, r7
 8000f8c:	1bc0      	subs	r0, r0, r7
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x1fc>
 8000f92:	e1d0      	b.n	8001336 <__aeabi_ddiv+0x59e>
 8000f94:	9902      	ldr	r1, [sp, #8]
 8000f96:	f7ff f945 	bl	8000224 <__aeabi_uidivmod>
 8000f9a:	9a03      	ldr	r2, [sp, #12]
 8000f9c:	040b      	lsls	r3, r1, #16
 8000f9e:	4342      	muls	r2, r0
 8000fa0:	0c21      	lsrs	r1, r4, #16
 8000fa2:	0007      	movs	r7, r0
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	428a      	cmp	r2, r1
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x214>
 8000faa:	e178      	b.n	800129e <__aeabi_ddiv+0x506>
 8000fac:	1a88      	subs	r0, r1, r2
 8000fae:	9902      	ldr	r1, [sp, #8]
 8000fb0:	f7ff f938 	bl	8000224 <__aeabi_uidivmod>
 8000fb4:	9a03      	ldr	r2, [sp, #12]
 8000fb6:	0424      	lsls	r4, r4, #16
 8000fb8:	4342      	muls	r2, r0
 8000fba:	0409      	lsls	r1, r1, #16
 8000fbc:	0c24      	lsrs	r4, r4, #16
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	430c      	orrs	r4, r1
 8000fc2:	42a2      	cmp	r2, r4
 8000fc4:	d900      	bls.n	8000fc8 <__aeabi_ddiv+0x230>
 8000fc6:	e15d      	b.n	8001284 <__aeabi_ddiv+0x4ec>
 8000fc8:	4641      	mov	r1, r8
 8000fca:	1aa4      	subs	r4, r4, r2
 8000fcc:	043a      	lsls	r2, r7, #16
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	9d04      	ldr	r5, [sp, #16]
 8000fd2:	0413      	lsls	r3, r2, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	4359      	muls	r1, r3
 8000fd8:	4647      	mov	r7, r8
 8000fda:	436b      	muls	r3, r5
 8000fdc:	469c      	mov	ip, r3
 8000fde:	0c10      	lsrs	r0, r2, #16
 8000fe0:	4347      	muls	r7, r0
 8000fe2:	0c0b      	lsrs	r3, r1, #16
 8000fe4:	44bc      	add	ip, r7
 8000fe6:	4463      	add	r3, ip
 8000fe8:	4368      	muls	r0, r5
 8000fea:	429f      	cmp	r7, r3
 8000fec:	d903      	bls.n	8000ff6 <__aeabi_ddiv+0x25e>
 8000fee:	2580      	movs	r5, #128	@ 0x80
 8000ff0:	026d      	lsls	r5, r5, #9
 8000ff2:	46ac      	mov	ip, r5
 8000ff4:	4460      	add	r0, ip
 8000ff6:	0c1f      	lsrs	r7, r3, #16
 8000ff8:	0409      	lsls	r1, r1, #16
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	0c09      	lsrs	r1, r1, #16
 8000ffe:	183f      	adds	r7, r7, r0
 8001000:	185b      	adds	r3, r3, r1
 8001002:	42bc      	cmp	r4, r7
 8001004:	d200      	bcs.n	8001008 <__aeabi_ddiv+0x270>
 8001006:	e102      	b.n	800120e <__aeabi_ddiv+0x476>
 8001008:	d100      	bne.n	800100c <__aeabi_ddiv+0x274>
 800100a:	e0fd      	b.n	8001208 <__aeabi_ddiv+0x470>
 800100c:	2301      	movs	r3, #1
 800100e:	431a      	orrs	r2, r3
 8001010:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <__aeabi_ddiv+0x388>)
 8001012:	4453      	add	r3, sl
 8001014:	2b00      	cmp	r3, #0
 8001016:	dc00      	bgt.n	800101a <__aeabi_ddiv+0x282>
 8001018:	e0ae      	b.n	8001178 <__aeabi_ddiv+0x3e0>
 800101a:	0751      	lsls	r1, r2, #29
 800101c:	d000      	beq.n	8001020 <__aeabi_ddiv+0x288>
 800101e:	e198      	b.n	8001352 <__aeabi_ddiv+0x5ba>
 8001020:	4659      	mov	r1, fp
 8001022:	01c9      	lsls	r1, r1, #7
 8001024:	d506      	bpl.n	8001034 <__aeabi_ddiv+0x29c>
 8001026:	4659      	mov	r1, fp
 8001028:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <__aeabi_ddiv+0x38c>)
 800102a:	4019      	ands	r1, r3
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	468b      	mov	fp, r1
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4453      	add	r3, sl
 8001034:	493c      	ldr	r1, [pc, #240]	@ (8001128 <__aeabi_ddiv+0x390>)
 8001036:	428b      	cmp	r3, r1
 8001038:	dd00      	ble.n	800103c <__aeabi_ddiv+0x2a4>
 800103a:	e71a      	b.n	8000e72 <__aeabi_ddiv+0xda>
 800103c:	4659      	mov	r1, fp
 800103e:	08d2      	lsrs	r2, r2, #3
 8001040:	0749      	lsls	r1, r1, #29
 8001042:	4311      	orrs	r1, r2
 8001044:	465a      	mov	r2, fp
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	0254      	lsls	r4, r2, #9
 800104a:	4688      	mov	r8, r1
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	0d5b      	lsrs	r3, r3, #21
 8001050:	e702      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001052:	465a      	mov	r2, fp
 8001054:	9b00      	ldr	r3, [sp, #0]
 8001056:	431a      	orrs	r2, r3
 8001058:	d100      	bne.n	800105c <__aeabi_ddiv+0x2c4>
 800105a:	e07e      	b.n	800115a <__aeabi_ddiv+0x3c2>
 800105c:	465b      	mov	r3, fp
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_ddiv+0x2cc>
 8001062:	e100      	b.n	8001266 <__aeabi_ddiv+0x4ce>
 8001064:	4658      	mov	r0, fp
 8001066:	f7ff fa0b 	bl	8000480 <__clzsi2>
 800106a:	0002      	movs	r2, r0
 800106c:	0003      	movs	r3, r0
 800106e:	3a0b      	subs	r2, #11
 8001070:	271d      	movs	r7, #29
 8001072:	9e00      	ldr	r6, [sp, #0]
 8001074:	1aba      	subs	r2, r7, r2
 8001076:	0019      	movs	r1, r3
 8001078:	4658      	mov	r0, fp
 800107a:	40d6      	lsrs	r6, r2
 800107c:	3908      	subs	r1, #8
 800107e:	4088      	lsls	r0, r1
 8001080:	0032      	movs	r2, r6
 8001082:	4302      	orrs	r2, r0
 8001084:	4693      	mov	fp, r2
 8001086:	9a00      	ldr	r2, [sp, #0]
 8001088:	408a      	lsls	r2, r1
 800108a:	4928      	ldr	r1, [pc, #160]	@ (800112c <__aeabi_ddiv+0x394>)
 800108c:	4453      	add	r3, sl
 800108e:	468a      	mov	sl, r1
 8001090:	449a      	add	sl, r3
 8001092:	2300      	movs	r3, #0
 8001094:	e6c8      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001096:	465b      	mov	r3, fp
 8001098:	4303      	orrs	r3, r0
 800109a:	4699      	mov	r9, r3
 800109c:	d056      	beq.n	800114c <__aeabi_ddiv+0x3b4>
 800109e:	465b      	mov	r3, fp
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x30e>
 80010a4:	e0cd      	b.n	8001242 <__aeabi_ddiv+0x4aa>
 80010a6:	4658      	mov	r0, fp
 80010a8:	f7ff f9ea 	bl	8000480 <__clzsi2>
 80010ac:	230b      	movs	r3, #11
 80010ae:	425b      	negs	r3, r3
 80010b0:	469c      	mov	ip, r3
 80010b2:	0002      	movs	r2, r0
 80010b4:	4484      	add	ip, r0
 80010b6:	4666      	mov	r6, ip
 80010b8:	231d      	movs	r3, #29
 80010ba:	1b9b      	subs	r3, r3, r6
 80010bc:	0026      	movs	r6, r4
 80010be:	0011      	movs	r1, r2
 80010c0:	4658      	mov	r0, fp
 80010c2:	40de      	lsrs	r6, r3
 80010c4:	3908      	subs	r1, #8
 80010c6:	4088      	lsls	r0, r1
 80010c8:	0033      	movs	r3, r6
 80010ca:	4303      	orrs	r3, r0
 80010cc:	4699      	mov	r9, r3
 80010ce:	0023      	movs	r3, r4
 80010d0:	408b      	lsls	r3, r1
 80010d2:	4698      	mov	r8, r3
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <__aeabi_ddiv+0x398>)
 80010d6:	2400      	movs	r4, #0
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	469a      	mov	sl, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	e682      	b.n	8000de8 <__aeabi_ddiv+0x50>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4302      	orrs	r2, r0
 80010e6:	4691      	mov	r9, r2
 80010e8:	d12a      	bne.n	8001140 <__aeabi_ddiv+0x3a8>
 80010ea:	2200      	movs	r2, #0
 80010ec:	469a      	mov	sl, r3
 80010ee:	2302      	movs	r3, #2
 80010f0:	4690      	mov	r8, r2
 80010f2:	2408      	movs	r4, #8
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	e677      	b.n	8000de8 <__aeabi_ddiv+0x50>
 80010f8:	465a      	mov	r2, fp
 80010fa:	9b00      	ldr	r3, [sp, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <__aeabi_ddiv+0x39c>)
 8001100:	469c      	mov	ip, r3
 8001102:	44e2      	add	sl, ip
 8001104:	2a00      	cmp	r2, #0
 8001106:	d117      	bne.n	8001138 <__aeabi_ddiv+0x3a0>
 8001108:	2302      	movs	r3, #2
 800110a:	431c      	orrs	r4, r3
 800110c:	2300      	movs	r3, #0
 800110e:	469b      	mov	fp, r3
 8001110:	3302      	adds	r3, #2
 8001112:	e689      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001114:	000007ff 	.word	0x000007ff
 8001118:	fffffc01 	.word	0xfffffc01
 800111c:	0801b398 	.word	0x0801b398
 8001120:	000003ff 	.word	0x000003ff
 8001124:	feffffff 	.word	0xfeffffff
 8001128:	000007fe 	.word	0x000007fe
 800112c:	000003f3 	.word	0x000003f3
 8001130:	fffffc0d 	.word	0xfffffc0d
 8001134:	fffff801 	.word	0xfffff801
 8001138:	2303      	movs	r3, #3
 800113a:	0032      	movs	r2, r6
 800113c:	431c      	orrs	r4, r3
 800113e:	e673      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001140:	469a      	mov	sl, r3
 8001142:	2303      	movs	r3, #3
 8001144:	46d9      	mov	r9, fp
 8001146:	240c      	movs	r4, #12
 8001148:	9303      	str	r3, [sp, #12]
 800114a:	e64d      	b.n	8000de8 <__aeabi_ddiv+0x50>
 800114c:	2300      	movs	r3, #0
 800114e:	4698      	mov	r8, r3
 8001150:	469a      	mov	sl, r3
 8001152:	3301      	adds	r3, #1
 8001154:	2404      	movs	r4, #4
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	e646      	b.n	8000de8 <__aeabi_ddiv+0x50>
 800115a:	2301      	movs	r3, #1
 800115c:	431c      	orrs	r4, r3
 800115e:	2300      	movs	r3, #0
 8001160:	469b      	mov	fp, r3
 8001162:	3301      	adds	r3, #1
 8001164:	e660      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001166:	2300      	movs	r3, #0
 8001168:	2480      	movs	r4, #128	@ 0x80
 800116a:	4698      	mov	r8, r3
 800116c:	2600      	movs	r6, #0
 800116e:	4b92      	ldr	r3, [pc, #584]	@ (80013b8 <__aeabi_ddiv+0x620>)
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	e671      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001174:	2201      	movs	r2, #1
 8001176:	4252      	negs	r2, r2
 8001178:	2101      	movs	r1, #1
 800117a:	1ac9      	subs	r1, r1, r3
 800117c:	2938      	cmp	r1, #56	@ 0x38
 800117e:	dd00      	ble.n	8001182 <__aeabi_ddiv+0x3ea>
 8001180:	e666      	b.n	8000e50 <__aeabi_ddiv+0xb8>
 8001182:	291f      	cmp	r1, #31
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x3f0>
 8001186:	e0ab      	b.n	80012e0 <__aeabi_ddiv+0x548>
 8001188:	201f      	movs	r0, #31
 800118a:	4240      	negs	r0, r0
 800118c:	1ac3      	subs	r3, r0, r3
 800118e:	4658      	mov	r0, fp
 8001190:	40d8      	lsrs	r0, r3
 8001192:	0003      	movs	r3, r0
 8001194:	2920      	cmp	r1, #32
 8001196:	d004      	beq.n	80011a2 <__aeabi_ddiv+0x40a>
 8001198:	4658      	mov	r0, fp
 800119a:	4988      	ldr	r1, [pc, #544]	@ (80013bc <__aeabi_ddiv+0x624>)
 800119c:	4451      	add	r1, sl
 800119e:	4088      	lsls	r0, r1
 80011a0:	4302      	orrs	r2, r0
 80011a2:	1e51      	subs	r1, r2, #1
 80011a4:	418a      	sbcs	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	2307      	movs	r3, #7
 80011aa:	0019      	movs	r1, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	4011      	ands	r1, r2
 80011b0:	4213      	tst	r3, r2
 80011b2:	d00c      	beq.n	80011ce <__aeabi_ddiv+0x436>
 80011b4:	230f      	movs	r3, #15
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x426>
 80011bc:	e0f9      	b.n	80013b2 <__aeabi_ddiv+0x61a>
 80011be:	1d11      	adds	r1, r2, #4
 80011c0:	4291      	cmp	r1, r2
 80011c2:	419b      	sbcs	r3, r3
 80011c4:	000a      	movs	r2, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	0759      	lsls	r1, r3, #29
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	0b1c      	lsrs	r4, r3, #12
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	4690      	mov	r8, r2
 80011d4:	2300      	movs	r3, #0
 80011d6:	e63f      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80011d8:	2480      	movs	r4, #128	@ 0x80
 80011da:	464b      	mov	r3, r9
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4223      	tst	r3, r4
 80011e0:	d009      	beq.n	80011f6 <__aeabi_ddiv+0x45e>
 80011e2:	465b      	mov	r3, fp
 80011e4:	4223      	tst	r3, r4
 80011e6:	d106      	bne.n	80011f6 <__aeabi_ddiv+0x45e>
 80011e8:	431c      	orrs	r4, r3
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	002e      	movs	r6, r5
 80011ee:	4690      	mov	r8, r2
 80011f0:	4b71      	ldr	r3, [pc, #452]	@ (80013b8 <__aeabi_ddiv+0x620>)
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	e630      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80011f6:	2480      	movs	r4, #128	@ 0x80
 80011f8:	464b      	mov	r3, r9
 80011fa:	0324      	lsls	r4, r4, #12
 80011fc:	431c      	orrs	r4, r3
 80011fe:	0324      	lsls	r4, r4, #12
 8001200:	9e02      	ldr	r6, [sp, #8]
 8001202:	4b6d      	ldr	r3, [pc, #436]	@ (80013b8 <__aeabi_ddiv+0x620>)
 8001204:	0b24      	lsrs	r4, r4, #12
 8001206:	e627      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x476>
 800120c:	e700      	b.n	8001010 <__aeabi_ddiv+0x278>
 800120e:	9800      	ldr	r0, [sp, #0]
 8001210:	1e51      	subs	r1, r2, #1
 8001212:	4684      	mov	ip, r0
 8001214:	4464      	add	r4, ip
 8001216:	4284      	cmp	r4, r0
 8001218:	d200      	bcs.n	800121c <__aeabi_ddiv+0x484>
 800121a:	e084      	b.n	8001326 <__aeabi_ddiv+0x58e>
 800121c:	42bc      	cmp	r4, r7
 800121e:	d200      	bcs.n	8001222 <__aeabi_ddiv+0x48a>
 8001220:	e0ae      	b.n	8001380 <__aeabi_ddiv+0x5e8>
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x48e>
 8001224:	e0c1      	b.n	80013aa <__aeabi_ddiv+0x612>
 8001226:	000a      	movs	r2, r1
 8001228:	e6f0      	b.n	800100c <__aeabi_ddiv+0x274>
 800122a:	4542      	cmp	r2, r8
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x498>
 800122e:	e62c      	b.n	8000e8a <__aeabi_ddiv+0xf2>
 8001230:	464b      	mov	r3, r9
 8001232:	07dc      	lsls	r4, r3, #31
 8001234:	0858      	lsrs	r0, r3, #1
 8001236:	4643      	mov	r3, r8
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	431c      	orrs	r4, r3
 800123c:	4643      	mov	r3, r8
 800123e:	07df      	lsls	r7, r3, #31
 8001240:	e62a      	b.n	8000e98 <__aeabi_ddiv+0x100>
 8001242:	f7ff f91d 	bl	8000480 <__clzsi2>
 8001246:	2315      	movs	r3, #21
 8001248:	469c      	mov	ip, r3
 800124a:	4484      	add	ip, r0
 800124c:	0002      	movs	r2, r0
 800124e:	4663      	mov	r3, ip
 8001250:	3220      	adds	r2, #32
 8001252:	2b1c      	cmp	r3, #28
 8001254:	dc00      	bgt.n	8001258 <__aeabi_ddiv+0x4c0>
 8001256:	e72e      	b.n	80010b6 <__aeabi_ddiv+0x31e>
 8001258:	0023      	movs	r3, r4
 800125a:	3808      	subs	r0, #8
 800125c:	4083      	lsls	r3, r0
 800125e:	4699      	mov	r9, r3
 8001260:	2300      	movs	r3, #0
 8001262:	4698      	mov	r8, r3
 8001264:	e736      	b.n	80010d4 <__aeabi_ddiv+0x33c>
 8001266:	f7ff f90b 	bl	8000480 <__clzsi2>
 800126a:	0002      	movs	r2, r0
 800126c:	0003      	movs	r3, r0
 800126e:	3215      	adds	r2, #21
 8001270:	3320      	adds	r3, #32
 8001272:	2a1c      	cmp	r2, #28
 8001274:	dc00      	bgt.n	8001278 <__aeabi_ddiv+0x4e0>
 8001276:	e6fb      	b.n	8001070 <__aeabi_ddiv+0x2d8>
 8001278:	9900      	ldr	r1, [sp, #0]
 800127a:	3808      	subs	r0, #8
 800127c:	4081      	lsls	r1, r0
 800127e:	2200      	movs	r2, #0
 8001280:	468b      	mov	fp, r1
 8001282:	e702      	b.n	800108a <__aeabi_ddiv+0x2f2>
 8001284:	9900      	ldr	r1, [sp, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	468c      	mov	ip, r1
 800128a:	4464      	add	r4, ip
 800128c:	42a1      	cmp	r1, r4
 800128e:	d900      	bls.n	8001292 <__aeabi_ddiv+0x4fa>
 8001290:	e69a      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x500>
 8001296:	e697      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4464      	add	r4, ip
 800129c:	e694      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 800129e:	46ac      	mov	ip, r5
 80012a0:	4461      	add	r1, ip
 80012a2:	3f01      	subs	r7, #1
 80012a4:	428d      	cmp	r5, r1
 80012a6:	d900      	bls.n	80012aa <__aeabi_ddiv+0x512>
 80012a8:	e680      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012aa:	428a      	cmp	r2, r1
 80012ac:	d800      	bhi.n	80012b0 <__aeabi_ddiv+0x518>
 80012ae:	e67d      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012b0:	1e87      	subs	r7, r0, #2
 80012b2:	4461      	add	r1, ip
 80012b4:	e67a      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012b6:	4285      	cmp	r5, r0
 80012b8:	d000      	beq.n	80012bc <__aeabi_ddiv+0x524>
 80012ba:	e65f      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 80012bc:	45b9      	cmp	r9, r7
 80012be:	d900      	bls.n	80012c2 <__aeabi_ddiv+0x52a>
 80012c0:	e65c      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 80012c2:	e656      	b.n	8000f72 <__aeabi_ddiv+0x1da>
 80012c4:	42a2      	cmp	r2, r4
 80012c6:	d800      	bhi.n	80012ca <__aeabi_ddiv+0x532>
 80012c8:	e61a      	b.n	8000f00 <__aeabi_ddiv+0x168>
 80012ca:	1e83      	subs	r3, r0, #2
 80012cc:	4464      	add	r4, ip
 80012ce:	e617      	b.n	8000f00 <__aeabi_ddiv+0x168>
 80012d0:	428a      	cmp	r2, r1
 80012d2:	d800      	bhi.n	80012d6 <__aeabi_ddiv+0x53e>
 80012d4:	e600      	b.n	8000ed8 <__aeabi_ddiv+0x140>
 80012d6:	46ac      	mov	ip, r5
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	4698      	mov	r8, r3
 80012dc:	4461      	add	r1, ip
 80012de:	e5fb      	b.n	8000ed8 <__aeabi_ddiv+0x140>
 80012e0:	4837      	ldr	r0, [pc, #220]	@ (80013c0 <__aeabi_ddiv+0x628>)
 80012e2:	0014      	movs	r4, r2
 80012e4:	4450      	add	r0, sl
 80012e6:	4082      	lsls	r2, r0
 80012e8:	465b      	mov	r3, fp
 80012ea:	0017      	movs	r7, r2
 80012ec:	4083      	lsls	r3, r0
 80012ee:	40cc      	lsrs	r4, r1
 80012f0:	1e7a      	subs	r2, r7, #1
 80012f2:	4197      	sbcs	r7, r2
 80012f4:	4323      	orrs	r3, r4
 80012f6:	433b      	orrs	r3, r7
 80012f8:	001a      	movs	r2, r3
 80012fa:	465b      	mov	r3, fp
 80012fc:	40cb      	lsrs	r3, r1
 80012fe:	0751      	lsls	r1, r2, #29
 8001300:	d009      	beq.n	8001316 <__aeabi_ddiv+0x57e>
 8001302:	210f      	movs	r1, #15
 8001304:	4011      	ands	r1, r2
 8001306:	2904      	cmp	r1, #4
 8001308:	d005      	beq.n	8001316 <__aeabi_ddiv+0x57e>
 800130a:	1d11      	adds	r1, r2, #4
 800130c:	4291      	cmp	r1, r2
 800130e:	4192      	sbcs	r2, r2
 8001310:	4252      	negs	r2, r2
 8001312:	189b      	adds	r3, r3, r2
 8001314:	000a      	movs	r2, r1
 8001316:	0219      	lsls	r1, r3, #8
 8001318:	d400      	bmi.n	800131c <__aeabi_ddiv+0x584>
 800131a:	e755      	b.n	80011c8 <__aeabi_ddiv+0x430>
 800131c:	2200      	movs	r2, #0
 800131e:	2301      	movs	r3, #1
 8001320:	2400      	movs	r4, #0
 8001322:	4690      	mov	r8, r2
 8001324:	e598      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001326:	000a      	movs	r2, r1
 8001328:	42bc      	cmp	r4, r7
 800132a:	d000      	beq.n	800132e <__aeabi_ddiv+0x596>
 800132c:	e66e      	b.n	800100c <__aeabi_ddiv+0x274>
 800132e:	454b      	cmp	r3, r9
 8001330:	d000      	beq.n	8001334 <__aeabi_ddiv+0x59c>
 8001332:	e66b      	b.n	800100c <__aeabi_ddiv+0x274>
 8001334:	e66c      	b.n	8001010 <__aeabi_ddiv+0x278>
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <__aeabi_ddiv+0x62c>)
 8001338:	4a23      	ldr	r2, [pc, #140]	@ (80013c8 <__aeabi_ddiv+0x630>)
 800133a:	4453      	add	r3, sl
 800133c:	4592      	cmp	sl, r2
 800133e:	da00      	bge.n	8001342 <__aeabi_ddiv+0x5aa>
 8001340:	e718      	b.n	8001174 <__aeabi_ddiv+0x3dc>
 8001342:	2101      	movs	r1, #1
 8001344:	4249      	negs	r1, r1
 8001346:	1d0a      	adds	r2, r1, #4
 8001348:	428a      	cmp	r2, r1
 800134a:	4189      	sbcs	r1, r1
 800134c:	4249      	negs	r1, r1
 800134e:	448b      	add	fp, r1
 8001350:	e666      	b.n	8001020 <__aeabi_ddiv+0x288>
 8001352:	210f      	movs	r1, #15
 8001354:	4011      	ands	r1, r2
 8001356:	2904      	cmp	r1, #4
 8001358:	d100      	bne.n	800135c <__aeabi_ddiv+0x5c4>
 800135a:	e661      	b.n	8001020 <__aeabi_ddiv+0x288>
 800135c:	0011      	movs	r1, r2
 800135e:	e7f2      	b.n	8001346 <__aeabi_ddiv+0x5ae>
 8001360:	42bc      	cmp	r4, r7
 8001362:	d800      	bhi.n	8001366 <__aeabi_ddiv+0x5ce>
 8001364:	e60a      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 8001366:	2302      	movs	r3, #2
 8001368:	425b      	negs	r3, r3
 800136a:	469c      	mov	ip, r3
 800136c:	9900      	ldr	r1, [sp, #0]
 800136e:	444f      	add	r7, r9
 8001370:	454f      	cmp	r7, r9
 8001372:	419b      	sbcs	r3, r3
 8001374:	44e3      	add	fp, ip
 8001376:	468c      	mov	ip, r1
 8001378:	425b      	negs	r3, r3
 800137a:	4463      	add	r3, ip
 800137c:	18c0      	adds	r0, r0, r3
 800137e:	e5ff      	b.n	8000f80 <__aeabi_ddiv+0x1e8>
 8001380:	4649      	mov	r1, r9
 8001382:	9d00      	ldr	r5, [sp, #0]
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	4548      	cmp	r0, r9
 8001388:	4189      	sbcs	r1, r1
 800138a:	46ac      	mov	ip, r5
 800138c:	4249      	negs	r1, r1
 800138e:	4461      	add	r1, ip
 8001390:	4681      	mov	r9, r0
 8001392:	3a02      	subs	r2, #2
 8001394:	1864      	adds	r4, r4, r1
 8001396:	e7c7      	b.n	8001328 <__aeabi_ddiv+0x590>
 8001398:	2480      	movs	r4, #128	@ 0x80
 800139a:	465b      	mov	r3, fp
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	431c      	orrs	r4, r3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	4690      	mov	r8, r2
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__aeabi_ddiv+0x620>)
 80013a6:	0b24      	lsrs	r4, r4, #12
 80013a8:	e556      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80013aa:	4599      	cmp	r9, r3
 80013ac:	d3e8      	bcc.n	8001380 <__aeabi_ddiv+0x5e8>
 80013ae:	000a      	movs	r2, r1
 80013b0:	e7bd      	b.n	800132e <__aeabi_ddiv+0x596>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e708      	b.n	80011c8 <__aeabi_ddiv+0x430>
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	000007ff 	.word	0x000007ff
 80013bc:	0000043e 	.word	0x0000043e
 80013c0:	0000041e 	.word	0x0000041e
 80013c4:	000003ff 	.word	0x000003ff
 80013c8:	fffffc02 	.word	0xfffffc02

080013cc <__eqdf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	46de      	mov	lr, fp
 80013d2:	464e      	mov	r6, r9
 80013d4:	4645      	mov	r5, r8
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	0004      	movs	r4, r0
 80013dc:	0fe8      	lsrs	r0, r5, #31
 80013de:	4683      	mov	fp, r0
 80013e0:	0309      	lsls	r1, r1, #12
 80013e2:	0fd8      	lsrs	r0, r3, #31
 80013e4:	0b09      	lsrs	r1, r1, #12
 80013e6:	4682      	mov	sl, r0
 80013e8:	4819      	ldr	r0, [pc, #100]	@ (8001450 <__eqdf2+0x84>)
 80013ea:	468c      	mov	ip, r1
 80013ec:	031f      	lsls	r7, r3, #12
 80013ee:	0069      	lsls	r1, r5, #1
 80013f0:	005e      	lsls	r6, r3, #1
 80013f2:	0d49      	lsrs	r1, r1, #21
 80013f4:	0b3f      	lsrs	r7, r7, #12
 80013f6:	0d76      	lsrs	r6, r6, #21
 80013f8:	4281      	cmp	r1, r0
 80013fa:	d018      	beq.n	800142e <__eqdf2+0x62>
 80013fc:	4286      	cmp	r6, r0
 80013fe:	d00f      	beq.n	8001420 <__eqdf2+0x54>
 8001400:	2001      	movs	r0, #1
 8001402:	42b1      	cmp	r1, r6
 8001404:	d10d      	bne.n	8001422 <__eqdf2+0x56>
 8001406:	45bc      	cmp	ip, r7
 8001408:	d10b      	bne.n	8001422 <__eqdf2+0x56>
 800140a:	4294      	cmp	r4, r2
 800140c:	d109      	bne.n	8001422 <__eqdf2+0x56>
 800140e:	45d3      	cmp	fp, sl
 8001410:	d01c      	beq.n	800144c <__eqdf2+0x80>
 8001412:	2900      	cmp	r1, #0
 8001414:	d105      	bne.n	8001422 <__eqdf2+0x56>
 8001416:	4660      	mov	r0, ip
 8001418:	4320      	orrs	r0, r4
 800141a:	1e43      	subs	r3, r0, #1
 800141c:	4198      	sbcs	r0, r3
 800141e:	e000      	b.n	8001422 <__eqdf2+0x56>
 8001420:	2001      	movs	r0, #1
 8001422:	bcf0      	pop	{r4, r5, r6, r7}
 8001424:	46bb      	mov	fp, r7
 8001426:	46b2      	mov	sl, r6
 8001428:	46a9      	mov	r9, r5
 800142a:	46a0      	mov	r8, r4
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142e:	2001      	movs	r0, #1
 8001430:	428e      	cmp	r6, r1
 8001432:	d1f6      	bne.n	8001422 <__eqdf2+0x56>
 8001434:	4661      	mov	r1, ip
 8001436:	4339      	orrs	r1, r7
 8001438:	000f      	movs	r7, r1
 800143a:	4317      	orrs	r7, r2
 800143c:	4327      	orrs	r7, r4
 800143e:	d1f0      	bne.n	8001422 <__eqdf2+0x56>
 8001440:	465b      	mov	r3, fp
 8001442:	4652      	mov	r2, sl
 8001444:	1a98      	subs	r0, r3, r2
 8001446:	1e43      	subs	r3, r0, #1
 8001448:	4198      	sbcs	r0, r3
 800144a:	e7ea      	b.n	8001422 <__eqdf2+0x56>
 800144c:	2000      	movs	r0, #0
 800144e:	e7e8      	b.n	8001422 <__eqdf2+0x56>
 8001450:	000007ff 	.word	0x000007ff

08001454 <__gedf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4657      	mov	r7, sl
 8001458:	464e      	mov	r6, r9
 800145a:	4645      	mov	r5, r8
 800145c:	46de      	mov	lr, fp
 800145e:	b5e0      	push	{r5, r6, r7, lr}
 8001460:	000d      	movs	r5, r1
 8001462:	030f      	lsls	r7, r1, #12
 8001464:	0b39      	lsrs	r1, r7, #12
 8001466:	b083      	sub	sp, #12
 8001468:	0004      	movs	r4, r0
 800146a:	4680      	mov	r8, r0
 800146c:	9101      	str	r1, [sp, #4]
 800146e:	0058      	lsls	r0, r3, #1
 8001470:	0fe9      	lsrs	r1, r5, #31
 8001472:	4f31      	ldr	r7, [pc, #196]	@ (8001538 <__gedf2+0xe4>)
 8001474:	0d40      	lsrs	r0, r0, #21
 8001476:	468c      	mov	ip, r1
 8001478:	006e      	lsls	r6, r5, #1
 800147a:	0319      	lsls	r1, r3, #12
 800147c:	4682      	mov	sl, r0
 800147e:	4691      	mov	r9, r2
 8001480:	0d76      	lsrs	r6, r6, #21
 8001482:	0b09      	lsrs	r1, r1, #12
 8001484:	0fd8      	lsrs	r0, r3, #31
 8001486:	42be      	cmp	r6, r7
 8001488:	d01f      	beq.n	80014ca <__gedf2+0x76>
 800148a:	45ba      	cmp	sl, r7
 800148c:	d00f      	beq.n	80014ae <__gedf2+0x5a>
 800148e:	2e00      	cmp	r6, #0
 8001490:	d12f      	bne.n	80014f2 <__gedf2+0x9e>
 8001492:	4655      	mov	r5, sl
 8001494:	9e01      	ldr	r6, [sp, #4]
 8001496:	4334      	orrs	r4, r6
 8001498:	2d00      	cmp	r5, #0
 800149a:	d127      	bne.n	80014ec <__gedf2+0x98>
 800149c:	430a      	orrs	r2, r1
 800149e:	d03a      	beq.n	8001516 <__gedf2+0xc2>
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d145      	bne.n	8001530 <__gedf2+0xdc>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d11a      	bne.n	80014de <__gedf2+0x8a>
 80014a8:	2001      	movs	r0, #1
 80014aa:	4240      	negs	r0, r0
 80014ac:	e017      	b.n	80014de <__gedf2+0x8a>
 80014ae:	4311      	orrs	r1, r2
 80014b0:	d13b      	bne.n	800152a <__gedf2+0xd6>
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d102      	bne.n	80014bc <__gedf2+0x68>
 80014b6:	9f01      	ldr	r7, [sp, #4]
 80014b8:	4327      	orrs	r7, r4
 80014ba:	d0f3      	beq.n	80014a4 <__gedf2+0x50>
 80014bc:	4584      	cmp	ip, r0
 80014be:	d109      	bne.n	80014d4 <__gedf2+0x80>
 80014c0:	4663      	mov	r3, ip
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <__gedf2+0x54>
 80014c6:	4660      	mov	r0, ip
 80014c8:	e009      	b.n	80014de <__gedf2+0x8a>
 80014ca:	9f01      	ldr	r7, [sp, #4]
 80014cc:	4327      	orrs	r7, r4
 80014ce:	d12c      	bne.n	800152a <__gedf2+0xd6>
 80014d0:	45b2      	cmp	sl, r6
 80014d2:	d024      	beq.n	800151e <__gedf2+0xca>
 80014d4:	4663      	mov	r3, ip
 80014d6:	2002      	movs	r0, #2
 80014d8:	3b01      	subs	r3, #1
 80014da:	4018      	ands	r0, r3
 80014dc:	3801      	subs	r0, #1
 80014de:	b003      	add	sp, #12
 80014e0:	bcf0      	pop	{r4, r5, r6, r7}
 80014e2:	46bb      	mov	fp, r7
 80014e4:	46b2      	mov	sl, r6
 80014e6:	46a9      	mov	r9, r5
 80014e8:	46a0      	mov	r8, r4
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d0d9      	beq.n	80014a4 <__gedf2+0x50>
 80014f0:	e7e4      	b.n	80014bc <__gedf2+0x68>
 80014f2:	4654      	mov	r4, sl
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	d0ed      	beq.n	80014d4 <__gedf2+0x80>
 80014f8:	4584      	cmp	ip, r0
 80014fa:	d1eb      	bne.n	80014d4 <__gedf2+0x80>
 80014fc:	4556      	cmp	r6, sl
 80014fe:	dce9      	bgt.n	80014d4 <__gedf2+0x80>
 8001500:	dbde      	blt.n	80014c0 <__gedf2+0x6c>
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	428b      	cmp	r3, r1
 8001506:	d8e5      	bhi.n	80014d4 <__gedf2+0x80>
 8001508:	d1da      	bne.n	80014c0 <__gedf2+0x6c>
 800150a:	45c8      	cmp	r8, r9
 800150c:	d8e2      	bhi.n	80014d4 <__gedf2+0x80>
 800150e:	2000      	movs	r0, #0
 8001510:	45c8      	cmp	r8, r9
 8001512:	d2e4      	bcs.n	80014de <__gedf2+0x8a>
 8001514:	e7d4      	b.n	80014c0 <__gedf2+0x6c>
 8001516:	2000      	movs	r0, #0
 8001518:	2c00      	cmp	r4, #0
 800151a:	d0e0      	beq.n	80014de <__gedf2+0x8a>
 800151c:	e7da      	b.n	80014d4 <__gedf2+0x80>
 800151e:	4311      	orrs	r1, r2
 8001520:	d103      	bne.n	800152a <__gedf2+0xd6>
 8001522:	4584      	cmp	ip, r0
 8001524:	d1d6      	bne.n	80014d4 <__gedf2+0x80>
 8001526:	2000      	movs	r0, #0
 8001528:	e7d9      	b.n	80014de <__gedf2+0x8a>
 800152a:	2002      	movs	r0, #2
 800152c:	4240      	negs	r0, r0
 800152e:	e7d6      	b.n	80014de <__gedf2+0x8a>
 8001530:	4584      	cmp	ip, r0
 8001532:	d0e6      	beq.n	8001502 <__gedf2+0xae>
 8001534:	e7ce      	b.n	80014d4 <__gedf2+0x80>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	000007ff 	.word	0x000007ff

0800153c <__ledf2>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4657      	mov	r7, sl
 8001540:	464e      	mov	r6, r9
 8001542:	4645      	mov	r5, r8
 8001544:	46de      	mov	lr, fp
 8001546:	b5e0      	push	{r5, r6, r7, lr}
 8001548:	000d      	movs	r5, r1
 800154a:	030f      	lsls	r7, r1, #12
 800154c:	0004      	movs	r4, r0
 800154e:	4680      	mov	r8, r0
 8001550:	0fe8      	lsrs	r0, r5, #31
 8001552:	0b39      	lsrs	r1, r7, #12
 8001554:	4684      	mov	ip, r0
 8001556:	b083      	sub	sp, #12
 8001558:	0058      	lsls	r0, r3, #1
 800155a:	4f30      	ldr	r7, [pc, #192]	@ (800161c <__ledf2+0xe0>)
 800155c:	0d40      	lsrs	r0, r0, #21
 800155e:	9101      	str	r1, [sp, #4]
 8001560:	031e      	lsls	r6, r3, #12
 8001562:	0069      	lsls	r1, r5, #1
 8001564:	4682      	mov	sl, r0
 8001566:	4691      	mov	r9, r2
 8001568:	0d49      	lsrs	r1, r1, #21
 800156a:	0b36      	lsrs	r6, r6, #12
 800156c:	0fd8      	lsrs	r0, r3, #31
 800156e:	42b9      	cmp	r1, r7
 8001570:	d020      	beq.n	80015b4 <__ledf2+0x78>
 8001572:	45ba      	cmp	sl, r7
 8001574:	d00f      	beq.n	8001596 <__ledf2+0x5a>
 8001576:	2900      	cmp	r1, #0
 8001578:	d12b      	bne.n	80015d2 <__ledf2+0x96>
 800157a:	9901      	ldr	r1, [sp, #4]
 800157c:	430c      	orrs	r4, r1
 800157e:	4651      	mov	r1, sl
 8001580:	2900      	cmp	r1, #0
 8001582:	d137      	bne.n	80015f4 <__ledf2+0xb8>
 8001584:	4332      	orrs	r2, r6
 8001586:	d038      	beq.n	80015fa <__ledf2+0xbe>
 8001588:	2c00      	cmp	r4, #0
 800158a:	d144      	bne.n	8001616 <__ledf2+0xda>
 800158c:	2800      	cmp	r0, #0
 800158e:	d119      	bne.n	80015c4 <__ledf2+0x88>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e016      	b.n	80015c4 <__ledf2+0x88>
 8001596:	4316      	orrs	r6, r2
 8001598:	d113      	bne.n	80015c2 <__ledf2+0x86>
 800159a:	2900      	cmp	r1, #0
 800159c:	d102      	bne.n	80015a4 <__ledf2+0x68>
 800159e:	9f01      	ldr	r7, [sp, #4]
 80015a0:	4327      	orrs	r7, r4
 80015a2:	d0f3      	beq.n	800158c <__ledf2+0x50>
 80015a4:	4584      	cmp	ip, r0
 80015a6:	d020      	beq.n	80015ea <__ledf2+0xae>
 80015a8:	4663      	mov	r3, ip
 80015aa:	2002      	movs	r0, #2
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4018      	ands	r0, r3
 80015b0:	3801      	subs	r0, #1
 80015b2:	e007      	b.n	80015c4 <__ledf2+0x88>
 80015b4:	9f01      	ldr	r7, [sp, #4]
 80015b6:	4327      	orrs	r7, r4
 80015b8:	d103      	bne.n	80015c2 <__ledf2+0x86>
 80015ba:	458a      	cmp	sl, r1
 80015bc:	d1f4      	bne.n	80015a8 <__ledf2+0x6c>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d01f      	beq.n	8001602 <__ledf2+0xc6>
 80015c2:	2002      	movs	r0, #2
 80015c4:	b003      	add	sp, #12
 80015c6:	bcf0      	pop	{r4, r5, r6, r7}
 80015c8:	46bb      	mov	fp, r7
 80015ca:	46b2      	mov	sl, r6
 80015cc:	46a9      	mov	r9, r5
 80015ce:	46a0      	mov	r8, r4
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	4654      	mov	r4, sl
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d0e7      	beq.n	80015a8 <__ledf2+0x6c>
 80015d8:	4584      	cmp	ip, r0
 80015da:	d1e5      	bne.n	80015a8 <__ledf2+0x6c>
 80015dc:	4551      	cmp	r1, sl
 80015de:	dce3      	bgt.n	80015a8 <__ledf2+0x6c>
 80015e0:	db03      	blt.n	80015ea <__ledf2+0xae>
 80015e2:	9b01      	ldr	r3, [sp, #4]
 80015e4:	42b3      	cmp	r3, r6
 80015e6:	d8df      	bhi.n	80015a8 <__ledf2+0x6c>
 80015e8:	d00f      	beq.n	800160a <__ledf2+0xce>
 80015ea:	4663      	mov	r3, ip
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0cf      	beq.n	8001590 <__ledf2+0x54>
 80015f0:	4660      	mov	r0, ip
 80015f2:	e7e7      	b.n	80015c4 <__ledf2+0x88>
 80015f4:	2c00      	cmp	r4, #0
 80015f6:	d0c9      	beq.n	800158c <__ledf2+0x50>
 80015f8:	e7d4      	b.n	80015a4 <__ledf2+0x68>
 80015fa:	2000      	movs	r0, #0
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e1      	beq.n	80015c4 <__ledf2+0x88>
 8001600:	e7d2      	b.n	80015a8 <__ledf2+0x6c>
 8001602:	4584      	cmp	ip, r0
 8001604:	d1d0      	bne.n	80015a8 <__ledf2+0x6c>
 8001606:	2000      	movs	r0, #0
 8001608:	e7dc      	b.n	80015c4 <__ledf2+0x88>
 800160a:	45c8      	cmp	r8, r9
 800160c:	d8cc      	bhi.n	80015a8 <__ledf2+0x6c>
 800160e:	2000      	movs	r0, #0
 8001610:	45c8      	cmp	r8, r9
 8001612:	d2d7      	bcs.n	80015c4 <__ledf2+0x88>
 8001614:	e7e9      	b.n	80015ea <__ledf2+0xae>
 8001616:	4584      	cmp	ip, r0
 8001618:	d0e3      	beq.n	80015e2 <__ledf2+0xa6>
 800161a:	e7c5      	b.n	80015a8 <__ledf2+0x6c>
 800161c:	000007ff 	.word	0x000007ff

08001620 <__aeabi_dmul>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	001f      	movs	r7, r3
 800162e:	030b      	lsls	r3, r1, #12
 8001630:	0b1b      	lsrs	r3, r3, #12
 8001632:	0016      	movs	r6, r2
 8001634:	469a      	mov	sl, r3
 8001636:	0fca      	lsrs	r2, r1, #31
 8001638:	004b      	lsls	r3, r1, #1
 800163a:	0004      	movs	r4, r0
 800163c:	4693      	mov	fp, r2
 800163e:	b087      	sub	sp, #28
 8001640:	0d5b      	lsrs	r3, r3, #21
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0x26>
 8001644:	e0d5      	b.n	80017f2 <__aeabi_dmul+0x1d2>
 8001646:	4abb      	ldr	r2, [pc, #748]	@ (8001934 <__aeabi_dmul+0x314>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x2e>
 800164c:	e0f8      	b.n	8001840 <__aeabi_dmul+0x220>
 800164e:	4651      	mov	r1, sl
 8001650:	0f42      	lsrs	r2, r0, #29
 8001652:	00c9      	lsls	r1, r1, #3
 8001654:	430a      	orrs	r2, r1
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	0409      	lsls	r1, r1, #16
 800165a:	4311      	orrs	r1, r2
 800165c:	00c2      	lsls	r2, r0, #3
 800165e:	4691      	mov	r9, r2
 8001660:	4ab5      	ldr	r2, [pc, #724]	@ (8001938 <__aeabi_dmul+0x318>)
 8001662:	468a      	mov	sl, r1
 8001664:	189d      	adds	r5, r3, r2
 8001666:	2300      	movs	r3, #0
 8001668:	4698      	mov	r8, r3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	033c      	lsls	r4, r7, #12
 800166e:	007b      	lsls	r3, r7, #1
 8001670:	0ffa      	lsrs	r2, r7, #31
 8001672:	0030      	movs	r0, r6
 8001674:	0b24      	lsrs	r4, r4, #12
 8001676:	0d5b      	lsrs	r3, r3, #21
 8001678:	9200      	str	r2, [sp, #0]
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x5e>
 800167c:	e096      	b.n	80017ac <__aeabi_dmul+0x18c>
 800167e:	4aad      	ldr	r2, [pc, #692]	@ (8001934 <__aeabi_dmul+0x314>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d031      	beq.n	80016e8 <__aeabi_dmul+0xc8>
 8001684:	0f72      	lsrs	r2, r6, #29
 8001686:	00e4      	lsls	r4, r4, #3
 8001688:	4322      	orrs	r2, r4
 800168a:	2480      	movs	r4, #128	@ 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	4314      	orrs	r4, r2
 8001690:	4aa9      	ldr	r2, [pc, #676]	@ (8001938 <__aeabi_dmul+0x318>)
 8001692:	00f0      	lsls	r0, r6, #3
 8001694:	4694      	mov	ip, r2
 8001696:	4463      	add	r3, ip
 8001698:	195b      	adds	r3, r3, r5
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	4642      	mov	r2, r8
 80016a0:	2600      	movs	r6, #0
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc42      	bgt.n	800172c <__aeabi_dmul+0x10c>
 80016a6:	465a      	mov	r2, fp
 80016a8:	9900      	ldr	r1, [sp, #0]
 80016aa:	404a      	eors	r2, r1
 80016ac:	4693      	mov	fp, r2
 80016ae:	4642      	mov	r2, r8
 80016b0:	2a02      	cmp	r2, #2
 80016b2:	dc32      	bgt.n	800171a <__aeabi_dmul+0xfa>
 80016b4:	3a01      	subs	r2, #1
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d900      	bls.n	80016bc <__aeabi_dmul+0x9c>
 80016ba:	e149      	b.n	8001950 <__aeabi_dmul+0x330>
 80016bc:	2e02      	cmp	r6, #2
 80016be:	d100      	bne.n	80016c2 <__aeabi_dmul+0xa2>
 80016c0:	e0ca      	b.n	8001858 <__aeabi_dmul+0x238>
 80016c2:	2e01      	cmp	r6, #1
 80016c4:	d13d      	bne.n	8001742 <__aeabi_dmul+0x122>
 80016c6:	2300      	movs	r3, #0
 80016c8:	2400      	movs	r4, #0
 80016ca:	2200      	movs	r2, #0
 80016cc:	0010      	movs	r0, r2
 80016ce:	465a      	mov	r2, fp
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	4323      	orrs	r3, r4
 80016d4:	07d2      	lsls	r2, r2, #31
 80016d6:	4313      	orrs	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	b007      	add	sp, #28
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	46bb      	mov	fp, r7
 80016e0:	46b2      	mov	sl, r6
 80016e2:	46a9      	mov	r9, r5
 80016e4:	46a0      	mov	r8, r4
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	4b92      	ldr	r3, [pc, #584]	@ (8001934 <__aeabi_dmul+0x314>)
 80016ea:	4326      	orrs	r6, r4
 80016ec:	18eb      	adds	r3, r5, r3
 80016ee:	2e00      	cmp	r6, #0
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dmul+0xd4>
 80016f2:	e0bb      	b.n	800186c <__aeabi_dmul+0x24c>
 80016f4:	2203      	movs	r2, #3
 80016f6:	4641      	mov	r1, r8
 80016f8:	4311      	orrs	r1, r2
 80016fa:	465a      	mov	r2, fp
 80016fc:	4688      	mov	r8, r1
 80016fe:	9900      	ldr	r1, [sp, #0]
 8001700:	404a      	eors	r2, r1
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	0109      	lsls	r1, r1, #4
 8001706:	468c      	mov	ip, r1
 8001708:	0029      	movs	r1, r5
 800170a:	4461      	add	r1, ip
 800170c:	9101      	str	r1, [sp, #4]
 800170e:	4641      	mov	r1, r8
 8001710:	290a      	cmp	r1, #10
 8001712:	dd00      	ble.n	8001716 <__aeabi_dmul+0xf6>
 8001714:	e233      	b.n	8001b7e <__aeabi_dmul+0x55e>
 8001716:	4693      	mov	fp, r2
 8001718:	2603      	movs	r6, #3
 800171a:	4642      	mov	r2, r8
 800171c:	2701      	movs	r7, #1
 800171e:	4097      	lsls	r7, r2
 8001720:	21a6      	movs	r1, #166	@ 0xa6
 8001722:	003a      	movs	r2, r7
 8001724:	00c9      	lsls	r1, r1, #3
 8001726:	400a      	ands	r2, r1
 8001728:	420f      	tst	r7, r1
 800172a:	d031      	beq.n	8001790 <__aeabi_dmul+0x170>
 800172c:	9e02      	ldr	r6, [sp, #8]
 800172e:	2e02      	cmp	r6, #2
 8001730:	d100      	bne.n	8001734 <__aeabi_dmul+0x114>
 8001732:	e235      	b.n	8001ba0 <__aeabi_dmul+0x580>
 8001734:	2e03      	cmp	r6, #3
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0x11a>
 8001738:	e1d2      	b.n	8001ae0 <__aeabi_dmul+0x4c0>
 800173a:	4654      	mov	r4, sl
 800173c:	4648      	mov	r0, r9
 800173e:	2e01      	cmp	r6, #1
 8001740:	d0c1      	beq.n	80016c6 <__aeabi_dmul+0xa6>
 8001742:	9a01      	ldr	r2, [sp, #4]
 8001744:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <__aeabi_dmul+0x31c>)
 8001746:	4694      	mov	ip, r2
 8001748:	4463      	add	r3, ip
 800174a:	2b00      	cmp	r3, #0
 800174c:	dc00      	bgt.n	8001750 <__aeabi_dmul+0x130>
 800174e:	e0c0      	b.n	80018d2 <__aeabi_dmul+0x2b2>
 8001750:	0742      	lsls	r2, r0, #29
 8001752:	d009      	beq.n	8001768 <__aeabi_dmul+0x148>
 8001754:	220f      	movs	r2, #15
 8001756:	4002      	ands	r2, r0
 8001758:	2a04      	cmp	r2, #4
 800175a:	d005      	beq.n	8001768 <__aeabi_dmul+0x148>
 800175c:	1d02      	adds	r2, r0, #4
 800175e:	4282      	cmp	r2, r0
 8001760:	4180      	sbcs	r0, r0
 8001762:	4240      	negs	r0, r0
 8001764:	1824      	adds	r4, r4, r0
 8001766:	0010      	movs	r0, r2
 8001768:	01e2      	lsls	r2, r4, #7
 800176a:	d506      	bpl.n	800177a <__aeabi_dmul+0x15a>
 800176c:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <__aeabi_dmul+0x320>)
 800176e:	9a01      	ldr	r2, [sp, #4]
 8001770:	401c      	ands	r4, r3
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	4694      	mov	ip, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4463      	add	r3, ip
 800177a:	4a72      	ldr	r2, [pc, #456]	@ (8001944 <__aeabi_dmul+0x324>)
 800177c:	4293      	cmp	r3, r2
 800177e:	dc6b      	bgt.n	8001858 <__aeabi_dmul+0x238>
 8001780:	0762      	lsls	r2, r4, #29
 8001782:	08c0      	lsrs	r0, r0, #3
 8001784:	0264      	lsls	r4, r4, #9
 8001786:	055b      	lsls	r3, r3, #21
 8001788:	4302      	orrs	r2, r0
 800178a:	0b24      	lsrs	r4, r4, #12
 800178c:	0d5b      	lsrs	r3, r3, #21
 800178e:	e79d      	b.n	80016cc <__aeabi_dmul+0xac>
 8001790:	2190      	movs	r1, #144	@ 0x90
 8001792:	0089      	lsls	r1, r1, #2
 8001794:	420f      	tst	r7, r1
 8001796:	d163      	bne.n	8001860 <__aeabi_dmul+0x240>
 8001798:	2288      	movs	r2, #136	@ 0x88
 800179a:	423a      	tst	r2, r7
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x180>
 800179e:	e0d7      	b.n	8001950 <__aeabi_dmul+0x330>
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	46a2      	mov	sl, r4
 80017a4:	469b      	mov	fp, r3
 80017a6:	4681      	mov	r9, r0
 80017a8:	9602      	str	r6, [sp, #8]
 80017aa:	e7bf      	b.n	800172c <__aeabi_dmul+0x10c>
 80017ac:	0023      	movs	r3, r4
 80017ae:	4333      	orrs	r3, r6
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dmul+0x194>
 80017b2:	e07f      	b.n	80018b4 <__aeabi_dmul+0x294>
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dmul+0x19a>
 80017b8:	e1ad      	b.n	8001b16 <__aeabi_dmul+0x4f6>
 80017ba:	0020      	movs	r0, r4
 80017bc:	f7fe fe60 	bl	8000480 <__clzsi2>
 80017c0:	0002      	movs	r2, r0
 80017c2:	0003      	movs	r3, r0
 80017c4:	3a0b      	subs	r2, #11
 80017c6:	201d      	movs	r0, #29
 80017c8:	0019      	movs	r1, r3
 80017ca:	1a82      	subs	r2, r0, r2
 80017cc:	0030      	movs	r0, r6
 80017ce:	3908      	subs	r1, #8
 80017d0:	40d0      	lsrs	r0, r2
 80017d2:	408c      	lsls	r4, r1
 80017d4:	4304      	orrs	r4, r0
 80017d6:	0030      	movs	r0, r6
 80017d8:	4088      	lsls	r0, r1
 80017da:	4a5b      	ldr	r2, [pc, #364]	@ (8001948 <__aeabi_dmul+0x328>)
 80017dc:	1aeb      	subs	r3, r5, r3
 80017de:	4694      	mov	ip, r2
 80017e0:	4463      	add	r3, ip
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	4642      	mov	r2, r8
 80017e8:	2600      	movs	r6, #0
 80017ea:	2a0a      	cmp	r2, #10
 80017ec:	dc00      	bgt.n	80017f0 <__aeabi_dmul+0x1d0>
 80017ee:	e75a      	b.n	80016a6 <__aeabi_dmul+0x86>
 80017f0:	e79c      	b.n	800172c <__aeabi_dmul+0x10c>
 80017f2:	4653      	mov	r3, sl
 80017f4:	4303      	orrs	r3, r0
 80017f6:	4699      	mov	r9, r3
 80017f8:	d054      	beq.n	80018a4 <__aeabi_dmul+0x284>
 80017fa:	4653      	mov	r3, sl
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d100      	bne.n	8001802 <__aeabi_dmul+0x1e2>
 8001800:	e177      	b.n	8001af2 <__aeabi_dmul+0x4d2>
 8001802:	4650      	mov	r0, sl
 8001804:	f7fe fe3c 	bl	8000480 <__clzsi2>
 8001808:	230b      	movs	r3, #11
 800180a:	425b      	negs	r3, r3
 800180c:	469c      	mov	ip, r3
 800180e:	0002      	movs	r2, r0
 8001810:	4484      	add	ip, r0
 8001812:	0011      	movs	r1, r2
 8001814:	4650      	mov	r0, sl
 8001816:	3908      	subs	r1, #8
 8001818:	4088      	lsls	r0, r1
 800181a:	231d      	movs	r3, #29
 800181c:	4680      	mov	r8, r0
 800181e:	4660      	mov	r0, ip
 8001820:	1a1b      	subs	r3, r3, r0
 8001822:	0020      	movs	r0, r4
 8001824:	40d8      	lsrs	r0, r3
 8001826:	0003      	movs	r3, r0
 8001828:	4640      	mov	r0, r8
 800182a:	4303      	orrs	r3, r0
 800182c:	469a      	mov	sl, r3
 800182e:	0023      	movs	r3, r4
 8001830:	408b      	lsls	r3, r1
 8001832:	4699      	mov	r9, r3
 8001834:	2300      	movs	r3, #0
 8001836:	4d44      	ldr	r5, [pc, #272]	@ (8001948 <__aeabi_dmul+0x328>)
 8001838:	4698      	mov	r8, r3
 800183a:	1aad      	subs	r5, r5, r2
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	e715      	b.n	800166c <__aeabi_dmul+0x4c>
 8001840:	4652      	mov	r2, sl
 8001842:	4302      	orrs	r2, r0
 8001844:	4691      	mov	r9, r2
 8001846:	d126      	bne.n	8001896 <__aeabi_dmul+0x276>
 8001848:	2200      	movs	r2, #0
 800184a:	001d      	movs	r5, r3
 800184c:	2302      	movs	r3, #2
 800184e:	4692      	mov	sl, r2
 8001850:	3208      	adds	r2, #8
 8001852:	4690      	mov	r8, r2
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	e709      	b.n	800166c <__aeabi_dmul+0x4c>
 8001858:	2400      	movs	r4, #0
 800185a:	2200      	movs	r2, #0
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <__aeabi_dmul+0x314>)
 800185e:	e735      	b.n	80016cc <__aeabi_dmul+0xac>
 8001860:	2300      	movs	r3, #0
 8001862:	2480      	movs	r4, #128	@ 0x80
 8001864:	469b      	mov	fp, r3
 8001866:	0324      	lsls	r4, r4, #12
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <__aeabi_dmul+0x314>)
 800186a:	e72f      	b.n	80016cc <__aeabi_dmul+0xac>
 800186c:	2202      	movs	r2, #2
 800186e:	4641      	mov	r1, r8
 8001870:	4311      	orrs	r1, r2
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	4694      	mov	ip, r2
 8001878:	002a      	movs	r2, r5
 800187a:	4462      	add	r2, ip
 800187c:	4688      	mov	r8, r1
 800187e:	9201      	str	r2, [sp, #4]
 8001880:	290a      	cmp	r1, #10
 8001882:	dd00      	ble.n	8001886 <__aeabi_dmul+0x266>
 8001884:	e752      	b.n	800172c <__aeabi_dmul+0x10c>
 8001886:	465a      	mov	r2, fp
 8001888:	2000      	movs	r0, #0
 800188a:	9900      	ldr	r1, [sp, #0]
 800188c:	0004      	movs	r4, r0
 800188e:	404a      	eors	r2, r1
 8001890:	4693      	mov	fp, r2
 8001892:	2602      	movs	r6, #2
 8001894:	e70b      	b.n	80016ae <__aeabi_dmul+0x8e>
 8001896:	220c      	movs	r2, #12
 8001898:	001d      	movs	r5, r3
 800189a:	2303      	movs	r3, #3
 800189c:	4681      	mov	r9, r0
 800189e:	4690      	mov	r8, r2
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	e6e3      	b.n	800166c <__aeabi_dmul+0x4c>
 80018a4:	2300      	movs	r3, #0
 80018a6:	469a      	mov	sl, r3
 80018a8:	3304      	adds	r3, #4
 80018aa:	4698      	mov	r8, r3
 80018ac:	3b03      	subs	r3, #3
 80018ae:	2500      	movs	r5, #0
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	e6db      	b.n	800166c <__aeabi_dmul+0x4c>
 80018b4:	4642      	mov	r2, r8
 80018b6:	3301      	adds	r3, #1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	002b      	movs	r3, r5
 80018bc:	4690      	mov	r8, r2
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	4642      	mov	r2, r8
 80018c4:	2400      	movs	r4, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	2601      	movs	r6, #1
 80018ca:	2a0a      	cmp	r2, #10
 80018cc:	dc00      	bgt.n	80018d0 <__aeabi_dmul+0x2b0>
 80018ce:	e6ea      	b.n	80016a6 <__aeabi_dmul+0x86>
 80018d0:	e72c      	b.n	800172c <__aeabi_dmul+0x10c>
 80018d2:	2201      	movs	r2, #1
 80018d4:	1ad2      	subs	r2, r2, r3
 80018d6:	2a38      	cmp	r2, #56	@ 0x38
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dmul+0x2bc>
 80018da:	e6f4      	b.n	80016c6 <__aeabi_dmul+0xa6>
 80018dc:	2a1f      	cmp	r2, #31
 80018de:	dc00      	bgt.n	80018e2 <__aeabi_dmul+0x2c2>
 80018e0:	e12a      	b.n	8001b38 <__aeabi_dmul+0x518>
 80018e2:	211f      	movs	r1, #31
 80018e4:	4249      	negs	r1, r1
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	0021      	movs	r1, r4
 80018ea:	40d9      	lsrs	r1, r3
 80018ec:	000b      	movs	r3, r1
 80018ee:	2a20      	cmp	r2, #32
 80018f0:	d005      	beq.n	80018fe <__aeabi_dmul+0x2de>
 80018f2:	4a16      	ldr	r2, [pc, #88]	@ (800194c <__aeabi_dmul+0x32c>)
 80018f4:	9d01      	ldr	r5, [sp, #4]
 80018f6:	4694      	mov	ip, r2
 80018f8:	4465      	add	r5, ip
 80018fa:	40ac      	lsls	r4, r5
 80018fc:	4320      	orrs	r0, r4
 80018fe:	1e42      	subs	r2, r0, #1
 8001900:	4190      	sbcs	r0, r2
 8001902:	4318      	orrs	r0, r3
 8001904:	2307      	movs	r3, #7
 8001906:	0019      	movs	r1, r3
 8001908:	2400      	movs	r4, #0
 800190a:	4001      	ands	r1, r0
 800190c:	4203      	tst	r3, r0
 800190e:	d00c      	beq.n	800192a <__aeabi_dmul+0x30a>
 8001910:	230f      	movs	r3, #15
 8001912:	4003      	ands	r3, r0
 8001914:	2b04      	cmp	r3, #4
 8001916:	d100      	bne.n	800191a <__aeabi_dmul+0x2fa>
 8001918:	e140      	b.n	8001b9c <__aeabi_dmul+0x57c>
 800191a:	1d03      	adds	r3, r0, #4
 800191c:	4283      	cmp	r3, r0
 800191e:	41a4      	sbcs	r4, r4
 8001920:	0018      	movs	r0, r3
 8001922:	4264      	negs	r4, r4
 8001924:	0761      	lsls	r1, r4, #29
 8001926:	0264      	lsls	r4, r4, #9
 8001928:	0b24      	lsrs	r4, r4, #12
 800192a:	08c2      	lsrs	r2, r0, #3
 800192c:	2300      	movs	r3, #0
 800192e:	430a      	orrs	r2, r1
 8001930:	e6cc      	b.n	80016cc <__aeabi_dmul+0xac>
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	fffffc01 	.word	0xfffffc01
 800193c:	000003ff 	.word	0x000003ff
 8001940:	feffffff 	.word	0xfeffffff
 8001944:	000007fe 	.word	0x000007fe
 8001948:	fffffc0d 	.word	0xfffffc0d
 800194c:	0000043e 	.word	0x0000043e
 8001950:	4649      	mov	r1, r9
 8001952:	464a      	mov	r2, r9
 8001954:	0409      	lsls	r1, r1, #16
 8001956:	0c09      	lsrs	r1, r1, #16
 8001958:	000d      	movs	r5, r1
 800195a:	0c16      	lsrs	r6, r2, #16
 800195c:	0c02      	lsrs	r2, r0, #16
 800195e:	0400      	lsls	r0, r0, #16
 8001960:	0c00      	lsrs	r0, r0, #16
 8001962:	4345      	muls	r5, r0
 8001964:	46ac      	mov	ip, r5
 8001966:	0005      	movs	r5, r0
 8001968:	4375      	muls	r5, r6
 800196a:	46a8      	mov	r8, r5
 800196c:	0015      	movs	r5, r2
 800196e:	000f      	movs	r7, r1
 8001970:	4375      	muls	r5, r6
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	9502      	str	r5, [sp, #8]
 8001976:	002a      	movs	r2, r5
 8001978:	9d00      	ldr	r5, [sp, #0]
 800197a:	436f      	muls	r7, r5
 800197c:	4665      	mov	r5, ip
 800197e:	0c2d      	lsrs	r5, r5, #16
 8001980:	46a9      	mov	r9, r5
 8001982:	4447      	add	r7, r8
 8001984:	444f      	add	r7, r9
 8001986:	45b8      	cmp	r8, r7
 8001988:	d905      	bls.n	8001996 <__aeabi_dmul+0x376>
 800198a:	0015      	movs	r5, r2
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	0252      	lsls	r2, r2, #9
 8001990:	4690      	mov	r8, r2
 8001992:	4445      	add	r5, r8
 8001994:	9502      	str	r5, [sp, #8]
 8001996:	0c3d      	lsrs	r5, r7, #16
 8001998:	9503      	str	r5, [sp, #12]
 800199a:	4665      	mov	r5, ip
 800199c:	042d      	lsls	r5, r5, #16
 800199e:	043f      	lsls	r7, r7, #16
 80019a0:	0c2d      	lsrs	r5, r5, #16
 80019a2:	46ac      	mov	ip, r5
 80019a4:	003d      	movs	r5, r7
 80019a6:	4465      	add	r5, ip
 80019a8:	9504      	str	r5, [sp, #16]
 80019aa:	0c25      	lsrs	r5, r4, #16
 80019ac:	0424      	lsls	r4, r4, #16
 80019ae:	0c24      	lsrs	r4, r4, #16
 80019b0:	46ac      	mov	ip, r5
 80019b2:	0025      	movs	r5, r4
 80019b4:	4375      	muls	r5, r6
 80019b6:	46a8      	mov	r8, r5
 80019b8:	4665      	mov	r5, ip
 80019ba:	000f      	movs	r7, r1
 80019bc:	4369      	muls	r1, r5
 80019be:	4441      	add	r1, r8
 80019c0:	4689      	mov	r9, r1
 80019c2:	4367      	muls	r7, r4
 80019c4:	0c39      	lsrs	r1, r7, #16
 80019c6:	4449      	add	r1, r9
 80019c8:	436e      	muls	r6, r5
 80019ca:	4588      	cmp	r8, r1
 80019cc:	d903      	bls.n	80019d6 <__aeabi_dmul+0x3b6>
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	0252      	lsls	r2, r2, #9
 80019d2:	4690      	mov	r8, r2
 80019d4:	4446      	add	r6, r8
 80019d6:	0c0d      	lsrs	r5, r1, #16
 80019d8:	46a8      	mov	r8, r5
 80019da:	0035      	movs	r5, r6
 80019dc:	4445      	add	r5, r8
 80019de:	9505      	str	r5, [sp, #20]
 80019e0:	9d03      	ldr	r5, [sp, #12]
 80019e2:	043f      	lsls	r7, r7, #16
 80019e4:	46a8      	mov	r8, r5
 80019e6:	0c3f      	lsrs	r7, r7, #16
 80019e8:	0409      	lsls	r1, r1, #16
 80019ea:	19c9      	adds	r1, r1, r7
 80019ec:	4488      	add	r8, r1
 80019ee:	4645      	mov	r5, r8
 80019f0:	9503      	str	r5, [sp, #12]
 80019f2:	4655      	mov	r5, sl
 80019f4:	042e      	lsls	r6, r5, #16
 80019f6:	0c36      	lsrs	r6, r6, #16
 80019f8:	0c2f      	lsrs	r7, r5, #16
 80019fa:	0035      	movs	r5, r6
 80019fc:	4345      	muls	r5, r0
 80019fe:	4378      	muls	r0, r7
 8001a00:	4681      	mov	r9, r0
 8001a02:	0038      	movs	r0, r7
 8001a04:	46a8      	mov	r8, r5
 8001a06:	0c2d      	lsrs	r5, r5, #16
 8001a08:	46aa      	mov	sl, r5
 8001a0a:	9a00      	ldr	r2, [sp, #0]
 8001a0c:	4350      	muls	r0, r2
 8001a0e:	4372      	muls	r2, r6
 8001a10:	444a      	add	r2, r9
 8001a12:	4452      	add	r2, sl
 8001a14:	4591      	cmp	r9, r2
 8001a16:	d903      	bls.n	8001a20 <__aeabi_dmul+0x400>
 8001a18:	2580      	movs	r5, #128	@ 0x80
 8001a1a:	026d      	lsls	r5, r5, #9
 8001a1c:	46a9      	mov	r9, r5
 8001a1e:	4448      	add	r0, r9
 8001a20:	0c15      	lsrs	r5, r2, #16
 8001a22:	46a9      	mov	r9, r5
 8001a24:	4645      	mov	r5, r8
 8001a26:	042d      	lsls	r5, r5, #16
 8001a28:	0c2d      	lsrs	r5, r5, #16
 8001a2a:	46a8      	mov	r8, r5
 8001a2c:	4665      	mov	r5, ip
 8001a2e:	437d      	muls	r5, r7
 8001a30:	0412      	lsls	r2, r2, #16
 8001a32:	4448      	add	r0, r9
 8001a34:	4490      	add	r8, r2
 8001a36:	46a9      	mov	r9, r5
 8001a38:	0032      	movs	r2, r6
 8001a3a:	4665      	mov	r5, ip
 8001a3c:	4362      	muls	r2, r4
 8001a3e:	436e      	muls	r6, r5
 8001a40:	437c      	muls	r4, r7
 8001a42:	0c17      	lsrs	r7, r2, #16
 8001a44:	1936      	adds	r6, r6, r4
 8001a46:	19bf      	adds	r7, r7, r6
 8001a48:	42bc      	cmp	r4, r7
 8001a4a:	d903      	bls.n	8001a54 <__aeabi_dmul+0x434>
 8001a4c:	2480      	movs	r4, #128	@ 0x80
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	46a4      	mov	ip, r4
 8001a52:	44e1      	add	r9, ip
 8001a54:	9c02      	ldr	r4, [sp, #8]
 8001a56:	9e03      	ldr	r6, [sp, #12]
 8001a58:	46a4      	mov	ip, r4
 8001a5a:	9d05      	ldr	r5, [sp, #20]
 8001a5c:	4466      	add	r6, ip
 8001a5e:	428e      	cmp	r6, r1
 8001a60:	4189      	sbcs	r1, r1
 8001a62:	46ac      	mov	ip, r5
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	043c      	lsls	r4, r7, #16
 8001a68:	0c12      	lsrs	r2, r2, #16
 8001a6a:	18a2      	adds	r2, r4, r2
 8001a6c:	4462      	add	r2, ip
 8001a6e:	4249      	negs	r1, r1
 8001a70:	1854      	adds	r4, r2, r1
 8001a72:	4446      	add	r6, r8
 8001a74:	46a4      	mov	ip, r4
 8001a76:	4546      	cmp	r6, r8
 8001a78:	41a4      	sbcs	r4, r4
 8001a7a:	4682      	mov	sl, r0
 8001a7c:	4264      	negs	r4, r4
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	42aa      	cmp	r2, r5
 8001a82:	4192      	sbcs	r2, r2
 8001a84:	458c      	cmp	ip, r1
 8001a86:	4189      	sbcs	r1, r1
 8001a88:	44e2      	add	sl, ip
 8001a8a:	44d0      	add	r8, sl
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	4252      	negs	r2, r2
 8001a90:	430a      	orrs	r2, r1
 8001a92:	45a0      	cmp	r8, r4
 8001a94:	41a4      	sbcs	r4, r4
 8001a96:	4582      	cmp	sl, r0
 8001a98:	4189      	sbcs	r1, r1
 8001a9a:	4264      	negs	r4, r4
 8001a9c:	4249      	negs	r1, r1
 8001a9e:	430c      	orrs	r4, r1
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	0c3f      	lsrs	r7, r7, #16
 8001aa4:	19d2      	adds	r2, r2, r7
 8001aa6:	1912      	adds	r2, r2, r4
 8001aa8:	0dcc      	lsrs	r4, r1, #23
 8001aaa:	9904      	ldr	r1, [sp, #16]
 8001aac:	0270      	lsls	r0, r6, #9
 8001aae:	4308      	orrs	r0, r1
 8001ab0:	1e41      	subs	r1, r0, #1
 8001ab2:	4188      	sbcs	r0, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	444a      	add	r2, r9
 8001ab8:	0df6      	lsrs	r6, r6, #23
 8001aba:	0252      	lsls	r2, r2, #9
 8001abc:	4330      	orrs	r0, r6
 8001abe:	0249      	lsls	r1, r1, #9
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	4308      	orrs	r0, r1
 8001ac4:	01d2      	lsls	r2, r2, #7
 8001ac6:	d535      	bpl.n	8001b34 <__aeabi_dmul+0x514>
 8001ac8:	2201      	movs	r2, #1
 8001aca:	0843      	lsrs	r3, r0, #1
 8001acc:	4002      	ands	r2, r0
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	07e0      	lsls	r0, r4, #31
 8001ad2:	4318      	orrs	r0, r3
 8001ad4:	0864      	lsrs	r4, r4, #1
 8001ad6:	e634      	b.n	8001742 <__aeabi_dmul+0x122>
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	46a2      	mov	sl, r4
 8001adc:	469b      	mov	fp, r3
 8001ade:	4681      	mov	r9, r0
 8001ae0:	2480      	movs	r4, #128	@ 0x80
 8001ae2:	4653      	mov	r3, sl
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	431c      	orrs	r4, r3
 8001ae8:	0324      	lsls	r4, r4, #12
 8001aea:	464a      	mov	r2, r9
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001aee:	0b24      	lsrs	r4, r4, #12
 8001af0:	e5ec      	b.n	80016cc <__aeabi_dmul+0xac>
 8001af2:	f7fe fcc5 	bl	8000480 <__clzsi2>
 8001af6:	2315      	movs	r3, #21
 8001af8:	469c      	mov	ip, r3
 8001afa:	4484      	add	ip, r0
 8001afc:	0002      	movs	r2, r0
 8001afe:	4663      	mov	r3, ip
 8001b00:	3220      	adds	r2, #32
 8001b02:	2b1c      	cmp	r3, #28
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_dmul+0x4e8>
 8001b06:	e684      	b.n	8001812 <__aeabi_dmul+0x1f2>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	0023      	movs	r3, r4
 8001b0e:	3808      	subs	r0, #8
 8001b10:	4083      	lsls	r3, r0
 8001b12:	469a      	mov	sl, r3
 8001b14:	e68e      	b.n	8001834 <__aeabi_dmul+0x214>
 8001b16:	f7fe fcb3 	bl	8000480 <__clzsi2>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	3215      	adds	r2, #21
 8001b20:	3320      	adds	r3, #32
 8001b22:	2a1c      	cmp	r2, #28
 8001b24:	dc00      	bgt.n	8001b28 <__aeabi_dmul+0x508>
 8001b26:	e64e      	b.n	80017c6 <__aeabi_dmul+0x1a6>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	0034      	movs	r4, r6
 8001b2c:	3a08      	subs	r2, #8
 8001b2e:	2000      	movs	r0, #0
 8001b30:	4094      	lsls	r4, r2
 8001b32:	e652      	b.n	80017da <__aeabi_dmul+0x1ba>
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	e604      	b.n	8001742 <__aeabi_dmul+0x122>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <__aeabi_dmul+0x58c>)
 8001b3a:	0021      	movs	r1, r4
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	0003      	movs	r3, r0
 8001b40:	9d01      	ldr	r5, [sp, #4]
 8001b42:	40d3      	lsrs	r3, r2
 8001b44:	4465      	add	r5, ip
 8001b46:	40a9      	lsls	r1, r5
 8001b48:	4319      	orrs	r1, r3
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	40ab      	lsls	r3, r5
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	4183      	sbcs	r3, r0
 8001b52:	4319      	orrs	r1, r3
 8001b54:	0008      	movs	r0, r1
 8001b56:	40d4      	lsrs	r4, r2
 8001b58:	074b      	lsls	r3, r1, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dmul+0x550>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	400b      	ands	r3, r1
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dmul+0x550>
 8001b64:	1d0b      	adds	r3, r1, #4
 8001b66:	428b      	cmp	r3, r1
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	1824      	adds	r4, r4, r0
 8001b6e:	0018      	movs	r0, r3
 8001b70:	0223      	lsls	r3, r4, #8
 8001b72:	d400      	bmi.n	8001b76 <__aeabi_dmul+0x556>
 8001b74:	e6d6      	b.n	8001924 <__aeabi_dmul+0x304>
 8001b76:	2301      	movs	r3, #1
 8001b78:	2400      	movs	r4, #0
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	e5a6      	b.n	80016cc <__aeabi_dmul+0xac>
 8001b7e:	290f      	cmp	r1, #15
 8001b80:	d1aa      	bne.n	8001ad8 <__aeabi_dmul+0x4b8>
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	4652      	mov	r2, sl
 8001b86:	031b      	lsls	r3, r3, #12
 8001b88:	421a      	tst	r2, r3
 8001b8a:	d0a9      	beq.n	8001ae0 <__aeabi_dmul+0x4c0>
 8001b8c:	421c      	tst	r4, r3
 8001b8e:	d1a7      	bne.n	8001ae0 <__aeabi_dmul+0x4c0>
 8001b90:	431c      	orrs	r4, r3
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	0002      	movs	r2, r0
 8001b96:	469b      	mov	fp, r3
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001b9a:	e597      	b.n	80016cc <__aeabi_dmul+0xac>
 8001b9c:	2400      	movs	r4, #0
 8001b9e:	e6c1      	b.n	8001924 <__aeabi_dmul+0x304>
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	4b01      	ldr	r3, [pc, #4]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001ba4:	0022      	movs	r2, r4
 8001ba6:	e591      	b.n	80016cc <__aeabi_dmul+0xac>
 8001ba8:	000007ff 	.word	0x000007ff
 8001bac:	0000041e 	.word	0x0000041e

08001bb0 <__aeabi_dsub>:
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	464e      	mov	r6, r9
 8001bb4:	4645      	mov	r5, r8
 8001bb6:	46de      	mov	lr, fp
 8001bb8:	4657      	mov	r7, sl
 8001bba:	b5e0      	push	{r5, r6, r7, lr}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	9000      	str	r0, [sp, #0]
 8001bc0:	9101      	str	r1, [sp, #4]
 8001bc2:	030c      	lsls	r4, r1, #12
 8001bc4:	004f      	lsls	r7, r1, #1
 8001bc6:	0fce      	lsrs	r6, r1, #31
 8001bc8:	0a61      	lsrs	r1, r4, #9
 8001bca:	9c00      	ldr	r4, [sp, #0]
 8001bcc:	46b0      	mov	r8, r6
 8001bce:	0f64      	lsrs	r4, r4, #29
 8001bd0:	430c      	orrs	r4, r1
 8001bd2:	9900      	ldr	r1, [sp, #0]
 8001bd4:	0d7f      	lsrs	r7, r7, #21
 8001bd6:	00c8      	lsls	r0, r1, #3
 8001bd8:	0011      	movs	r1, r2
 8001bda:	001a      	movs	r2, r3
 8001bdc:	031b      	lsls	r3, r3, #12
 8001bde:	469c      	mov	ip, r3
 8001be0:	9100      	str	r1, [sp, #0]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	0051      	lsls	r1, r2, #1
 8001be6:	0d4b      	lsrs	r3, r1, #21
 8001be8:	4699      	mov	r9, r3
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	9d00      	ldr	r5, [sp, #0]
 8001bee:	0fd9      	lsrs	r1, r3, #31
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	0f6a      	lsrs	r2, r5, #29
 8001bf4:	0a5b      	lsrs	r3, r3, #9
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	00ea      	lsls	r2, r5, #3
 8001bfa:	4694      	mov	ip, r2
 8001bfc:	4693      	mov	fp, r2
 8001bfe:	4ac1      	ldr	r2, [pc, #772]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001c00:	9003      	str	r0, [sp, #12]
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	4591      	cmp	r9, r2
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x5a>
 8001c08:	e0cd      	b.n	8001da6 <__aeabi_dsub+0x1f6>
 8001c0a:	2501      	movs	r5, #1
 8001c0c:	4069      	eors	r1, r5
 8001c0e:	464d      	mov	r5, r9
 8001c10:	1b7d      	subs	r5, r7, r5
 8001c12:	46aa      	mov	sl, r5
 8001c14:	428e      	cmp	r6, r1
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0x6a>
 8001c18:	e080      	b.n	8001d1c <__aeabi_dsub+0x16c>
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	dc00      	bgt.n	8001c20 <__aeabi_dsub+0x70>
 8001c1e:	e335      	b.n	800228c <__aeabi_dsub+0x6dc>
 8001c20:	4649      	mov	r1, r9
 8001c22:	2900      	cmp	r1, #0
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x78>
 8001c26:	e0df      	b.n	8001de8 <__aeabi_dsub+0x238>
 8001c28:	4297      	cmp	r7, r2
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x7e>
 8001c2c:	e194      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001c2e:	4652      	mov	r2, sl
 8001c30:	2501      	movs	r5, #1
 8001c32:	2a38      	cmp	r2, #56	@ 0x38
 8001c34:	dc19      	bgt.n	8001c6a <__aeabi_dsub+0xba>
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	9b02      	ldr	r3, [sp, #8]
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	4652      	mov	r2, sl
 8001c42:	2a1f      	cmp	r2, #31
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dsub+0x98>
 8001c46:	e1e3      	b.n	8002010 <__aeabi_dsub+0x460>
 8001c48:	4653      	mov	r3, sl
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	9d02      	ldr	r5, [sp, #8]
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	4095      	lsls	r5, r2
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	430d      	orrs	r5, r1
 8001c58:	4661      	mov	r1, ip
 8001c5a:	4091      	lsls	r1, r2
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	1e51      	subs	r1, r2, #1
 8001c60:	418a      	sbcs	r2, r1
 8001c62:	4315      	orrs	r5, r2
 8001c64:	9a02      	ldr	r2, [sp, #8]
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	1aa4      	subs	r4, r4, r2
 8001c6a:	1b45      	subs	r5, r0, r5
 8001c6c:	42a8      	cmp	r0, r5
 8001c6e:	4180      	sbcs	r0, r0
 8001c70:	4240      	negs	r0, r0
 8001c72:	1a24      	subs	r4, r4, r0
 8001c74:	0223      	lsls	r3, r4, #8
 8001c76:	d400      	bmi.n	8001c7a <__aeabi_dsub+0xca>
 8001c78:	e13d      	b.n	8001ef6 <__aeabi_dsub+0x346>
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0a64      	lsrs	r4, r4, #9
 8001c7e:	2c00      	cmp	r4, #0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0xd4>
 8001c82:	e147      	b.n	8001f14 <__aeabi_dsub+0x364>
 8001c84:	0020      	movs	r0, r4
 8001c86:	f7fe fbfb 	bl	8000480 <__clzsi2>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	2120      	movs	r1, #32
 8001c90:	0028      	movs	r0, r5
 8001c92:	1aca      	subs	r2, r1, r3
 8001c94:	40d0      	lsrs	r0, r2
 8001c96:	409c      	lsls	r4, r3
 8001c98:	0002      	movs	r2, r0
 8001c9a:	409d      	lsls	r5, r3
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	dd00      	ble.n	8001ca4 <__aeabi_dsub+0xf4>
 8001ca2:	e177      	b.n	8001f94 <__aeabi_dsub+0x3e4>
 8001ca4:	1bd8      	subs	r0, r3, r7
 8001ca6:	3001      	adds	r0, #1
 8001ca8:	1a09      	subs	r1, r1, r0
 8001caa:	002c      	movs	r4, r5
 8001cac:	408d      	lsls	r5, r1
 8001cae:	40c4      	lsrs	r4, r0
 8001cb0:	1e6b      	subs	r3, r5, #1
 8001cb2:	419d      	sbcs	r5, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	40c2      	lsrs	r2, r0
 8001cb8:	408b      	lsls	r3, r1
 8001cba:	4325      	orrs	r5, r4
 8001cbc:	2700      	movs	r7, #0
 8001cbe:	0014      	movs	r4, r2
 8001cc0:	431d      	orrs	r5, r3
 8001cc2:	076b      	lsls	r3, r5, #29
 8001cc4:	d009      	beq.n	8001cda <__aeabi_dsub+0x12a>
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	402b      	ands	r3, r5
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d005      	beq.n	8001cda <__aeabi_dsub+0x12a>
 8001cce:	1d2b      	adds	r3, r5, #4
 8001cd0:	42ab      	cmp	r3, r5
 8001cd2:	41ad      	sbcs	r5, r5
 8001cd4:	426d      	negs	r5, r5
 8001cd6:	1964      	adds	r4, r4, r5
 8001cd8:	001d      	movs	r5, r3
 8001cda:	0223      	lsls	r3, r4, #8
 8001cdc:	d400      	bmi.n	8001ce0 <__aeabi_dsub+0x130>
 8001cde:	e140      	b.n	8001f62 <__aeabi_dsub+0x3b2>
 8001ce0:	4a88      	ldr	r2, [pc, #544]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	4297      	cmp	r7, r2
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x13a>
 8001ce8:	e101      	b.n	8001eee <__aeabi_dsub+0x33e>
 8001cea:	2601      	movs	r6, #1
 8001cec:	4643      	mov	r3, r8
 8001cee:	4986      	ldr	r1, [pc, #536]	@ (8001f08 <__aeabi_dsub+0x358>)
 8001cf0:	08ed      	lsrs	r5, r5, #3
 8001cf2:	4021      	ands	r1, r4
 8001cf4:	074a      	lsls	r2, r1, #29
 8001cf6:	432a      	orrs	r2, r5
 8001cf8:	057c      	lsls	r4, r7, #21
 8001cfa:	024d      	lsls	r5, r1, #9
 8001cfc:	0b2d      	lsrs	r5, r5, #12
 8001cfe:	0d64      	lsrs	r4, r4, #21
 8001d00:	401e      	ands	r6, r3
 8001d02:	0524      	lsls	r4, r4, #20
 8001d04:	432c      	orrs	r4, r5
 8001d06:	07f6      	lsls	r6, r6, #31
 8001d08:	4334      	orrs	r4, r6
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	0021      	movs	r1, r4
 8001d0e:	b005      	add	sp, #20
 8001d10:	bcf0      	pop	{r4, r5, r6, r7}
 8001d12:	46bb      	mov	fp, r7
 8001d14:	46b2      	mov	sl, r6
 8001d16:	46a9      	mov	r9, r5
 8001d18:	46a0      	mov	r8, r4
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	2d00      	cmp	r5, #0
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x172>
 8001d20:	e2d0      	b.n	80022c4 <__aeabi_dsub+0x714>
 8001d22:	4649      	mov	r1, r9
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x17a>
 8001d28:	e0d4      	b.n	8001ed4 <__aeabi_dsub+0x324>
 8001d2a:	4661      	mov	r1, ip
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	4319      	orrs	r1, r3
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x184>
 8001d32:	e12b      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001d34:	1e69      	subs	r1, r5, #1
 8001d36:	2d01      	cmp	r5, #1
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x18c>
 8001d3a:	e1d9      	b.n	80020f0 <__aeabi_dsub+0x540>
 8001d3c:	4295      	cmp	r5, r2
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x192>
 8001d40:	e10a      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001d42:	2501      	movs	r5, #1
 8001d44:	2938      	cmp	r1, #56	@ 0x38
 8001d46:	dc17      	bgt.n	8001d78 <__aeabi_dsub+0x1c8>
 8001d48:	468a      	mov	sl, r1
 8001d4a:	4653      	mov	r3, sl
 8001d4c:	2b1f      	cmp	r3, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x1a2>
 8001d50:	e1e7      	b.n	8002122 <__aeabi_dsub+0x572>
 8001d52:	2220      	movs	r2, #32
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	9b02      	ldr	r3, [sp, #8]
 8001d58:	4661      	mov	r1, ip
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	001d      	movs	r5, r3
 8001d5e:	4653      	mov	r3, sl
 8001d60:	40d9      	lsrs	r1, r3
 8001d62:	4663      	mov	r3, ip
 8001d64:	4093      	lsls	r3, r2
 8001d66:	001a      	movs	r2, r3
 8001d68:	430d      	orrs	r5, r1
 8001d6a:	1e51      	subs	r1, r2, #1
 8001d6c:	418a      	sbcs	r2, r1
 8001d6e:	4653      	mov	r3, sl
 8001d70:	4315      	orrs	r5, r2
 8001d72:	9a02      	ldr	r2, [sp, #8]
 8001d74:	40da      	lsrs	r2, r3
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	182d      	adds	r5, r5, r0
 8001d7a:	4285      	cmp	r5, r0
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4240      	negs	r0, r0
 8001d80:	1824      	adds	r4, r4, r0
 8001d82:	0223      	lsls	r3, r4, #8
 8001d84:	d400      	bmi.n	8001d88 <__aeabi_dsub+0x1d8>
 8001d86:	e0b6      	b.n	8001ef6 <__aeabi_dsub+0x346>
 8001d88:	4b5e      	ldr	r3, [pc, #376]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001d8a:	3701      	adds	r7, #1
 8001d8c:	429f      	cmp	r7, r3
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x1e2>
 8001d90:	e0ad      	b.n	8001eee <__aeabi_dsub+0x33e>
 8001d92:	2101      	movs	r1, #1
 8001d94:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <__aeabi_dsub+0x358>)
 8001d96:	086a      	lsrs	r2, r5, #1
 8001d98:	401c      	ands	r4, r3
 8001d9a:	4029      	ands	r1, r5
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	07e5      	lsls	r5, r4, #31
 8001da0:	4315      	orrs	r5, r2
 8001da2:	0864      	lsrs	r4, r4, #1
 8001da4:	e78d      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001da6:	4a59      	ldr	r2, [pc, #356]	@ (8001f0c <__aeabi_dsub+0x35c>)
 8001da8:	9b02      	ldr	r3, [sp, #8]
 8001daa:	4692      	mov	sl, r2
 8001dac:	4662      	mov	r2, ip
 8001dae:	44ba      	add	sl, r7
 8001db0:	431a      	orrs	r2, r3
 8001db2:	d02c      	beq.n	8001e0e <__aeabi_dsub+0x25e>
 8001db4:	428e      	cmp	r6, r1
 8001db6:	d02e      	beq.n	8001e16 <__aeabi_dsub+0x266>
 8001db8:	4652      	mov	r2, sl
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d060      	beq.n	8001e80 <__aeabi_dsub+0x2d0>
 8001dbe:	2f00      	cmp	r7, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x214>
 8001dc2:	e0db      	b.n	8001f7c <__aeabi_dsub+0x3cc>
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	000e      	movs	r6, r1
 8001dc8:	9c02      	ldr	r4, [sp, #8]
 8001dca:	08d8      	lsrs	r0, r3, #3
 8001dcc:	0762      	lsls	r2, r4, #29
 8001dce:	4302      	orrs	r2, r0
 8001dd0:	08e4      	lsrs	r4, r4, #3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	4323      	orrs	r3, r4
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x22a>
 8001dd8:	e254      	b.n	8002284 <__aeabi_dsub+0x6d4>
 8001dda:	2580      	movs	r5, #128	@ 0x80
 8001ddc:	032d      	lsls	r5, r5, #12
 8001dde:	4325      	orrs	r5, r4
 8001de0:	032d      	lsls	r5, r5, #12
 8001de2:	4c48      	ldr	r4, [pc, #288]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001de4:	0b2d      	lsrs	r5, r5, #12
 8001de6:	e78c      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001de8:	4661      	mov	r1, ip
 8001dea:	9b02      	ldr	r3, [sp, #8]
 8001dec:	4319      	orrs	r1, r3
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x242>
 8001df0:	e0cc      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001df2:	0029      	movs	r1, r5
 8001df4:	3901      	subs	r1, #1
 8001df6:	2d01      	cmp	r5, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x24c>
 8001dfa:	e188      	b.n	800210e <__aeabi_dsub+0x55e>
 8001dfc:	4295      	cmp	r5, r2
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x252>
 8001e00:	e0aa      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001e02:	2501      	movs	r5, #1
 8001e04:	2938      	cmp	r1, #56	@ 0x38
 8001e06:	dd00      	ble.n	8001e0a <__aeabi_dsub+0x25a>
 8001e08:	e72f      	b.n	8001c6a <__aeabi_dsub+0xba>
 8001e0a:	468a      	mov	sl, r1
 8001e0c:	e718      	b.n	8001c40 <__aeabi_dsub+0x90>
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4051      	eors	r1, r2
 8001e12:	428e      	cmp	r6, r1
 8001e14:	d1d0      	bne.n	8001db8 <__aeabi_dsub+0x208>
 8001e16:	4653      	mov	r3, sl
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x26e>
 8001e1c:	e0be      	b.n	8001f9c <__aeabi_dsub+0x3ec>
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d000      	beq.n	8001e24 <__aeabi_dsub+0x274>
 8001e22:	e138      	b.n	8002096 <__aeabi_dsub+0x4e6>
 8001e24:	46ca      	mov	sl, r9
 8001e26:	0022      	movs	r2, r4
 8001e28:	4302      	orrs	r2, r0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x27e>
 8001e2c:	e1e2      	b.n	80021f4 <__aeabi_dsub+0x644>
 8001e2e:	4653      	mov	r3, sl
 8001e30:	1e59      	subs	r1, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x288>
 8001e36:	e20d      	b.n	8002254 <__aeabi_dsub+0x6a4>
 8001e38:	4a32      	ldr	r2, [pc, #200]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001e3a:	4592      	cmp	sl, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x290>
 8001e3e:	e1d2      	b.n	80021e6 <__aeabi_dsub+0x636>
 8001e40:	2701      	movs	r7, #1
 8001e42:	2938      	cmp	r1, #56	@ 0x38
 8001e44:	dc13      	bgt.n	8001e6e <__aeabi_dsub+0x2be>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x29c>
 8001e4a:	e1ee      	b.n	800222a <__aeabi_dsub+0x67a>
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	9b02      	ldr	r3, [sp, #8]
 8001e50:	1a52      	subs	r2, r2, r1
 8001e52:	0025      	movs	r5, r4
 8001e54:	0007      	movs	r7, r0
 8001e56:	469a      	mov	sl, r3
 8001e58:	40cc      	lsrs	r4, r1
 8001e5a:	4090      	lsls	r0, r2
 8001e5c:	4095      	lsls	r5, r2
 8001e5e:	40cf      	lsrs	r7, r1
 8001e60:	44a2      	add	sl, r4
 8001e62:	1e42      	subs	r2, r0, #1
 8001e64:	4190      	sbcs	r0, r2
 8001e66:	4653      	mov	r3, sl
 8001e68:	432f      	orrs	r7, r5
 8001e6a:	4307      	orrs	r7, r0
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	003d      	movs	r5, r7
 8001e70:	4465      	add	r5, ip
 8001e72:	4565      	cmp	r5, ip
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	4252      	negs	r2, r2
 8001e7a:	464f      	mov	r7, r9
 8001e7c:	18d4      	adds	r4, r2, r3
 8001e7e:	e780      	b.n	8001d82 <__aeabi_dsub+0x1d2>
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <__aeabi_dsub+0x360>)
 8001e82:	1c7d      	adds	r5, r7, #1
 8001e84:	4215      	tst	r5, r2
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x2da>
 8001e88:	e0aa      	b.n	8001fe0 <__aeabi_dsub+0x430>
 8001e8a:	4662      	mov	r2, ip
 8001e8c:	0025      	movs	r5, r4
 8001e8e:	9b02      	ldr	r3, [sp, #8]
 8001e90:	4305      	orrs	r5, r0
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2f00      	cmp	r7, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2ea>
 8001e98:	e0f5      	b.n	8002086 <__aeabi_dsub+0x4d6>
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2f0>
 8001e9e:	e16b      	b.n	8002178 <__aeabi_dsub+0x5c8>
 8001ea0:	2a00      	cmp	r2, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x2f6>
 8001ea4:	e152      	b.n	800214c <__aeabi_dsub+0x59c>
 8001ea6:	4663      	mov	r3, ip
 8001ea8:	1ac5      	subs	r5, r0, r3
 8001eaa:	9b02      	ldr	r3, [sp, #8]
 8001eac:	1ae2      	subs	r2, r4, r3
 8001eae:	42a8      	cmp	r0, r5
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	d400      	bmi.n	8001ebc <__aeabi_dsub+0x30c>
 8001eba:	e1d5      	b.n	8002268 <__aeabi_dsub+0x6b8>
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	1a1d      	subs	r5, r3, r0
 8001ec0:	45ac      	cmp	ip, r5
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	2601      	movs	r6, #1
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	4252      	negs	r2, r2
 8001eca:	1b1c      	subs	r4, r3, r4
 8001ecc:	4688      	mov	r8, r1
 8001ece:	1aa4      	subs	r4, r4, r2
 8001ed0:	400e      	ands	r6, r1
 8001ed2:	e6f6      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001ed4:	4297      	cmp	r7, r2
 8001ed6:	d03f      	beq.n	8001f58 <__aeabi_dsub+0x3a8>
 8001ed8:	4652      	mov	r2, sl
 8001eda:	2501      	movs	r5, #1
 8001edc:	2a38      	cmp	r2, #56	@ 0x38
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x332>
 8001ee0:	e74a      	b.n	8001d78 <__aeabi_dsub+0x1c8>
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	9b02      	ldr	r3, [sp, #8]
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	e72d      	b.n	8001d4a <__aeabi_dsub+0x19a>
 8001eee:	003c      	movs	r4, r7
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	e705      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	402b      	ands	r3, r5
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dsub+0x350>
 8001efe:	e6e2      	b.n	8001cc6 <__aeabi_dsub+0x116>
 8001f00:	e06b      	b.n	8001fda <__aeabi_dsub+0x42a>
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	ff7fffff 	.word	0xff7fffff
 8001f0c:	fffff801 	.word	0xfffff801
 8001f10:	000007fe 	.word	0x000007fe
 8001f14:	0028      	movs	r0, r5
 8001f16:	f7fe fab3 	bl	8000480 <__clzsi2>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	3318      	adds	r3, #24
 8001f1e:	2b1f      	cmp	r3, #31
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_dsub+0x374>
 8001f22:	e6b4      	b.n	8001c8e <__aeabi_dsub+0xde>
 8001f24:	002a      	movs	r2, r5
 8001f26:	3808      	subs	r0, #8
 8001f28:	4082      	lsls	r2, r0
 8001f2a:	429f      	cmp	r7, r3
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x380>
 8001f2e:	e0b9      	b.n	80020a4 <__aeabi_dsub+0x4f4>
 8001f30:	1bdb      	subs	r3, r3, r7
 8001f32:	1c58      	adds	r0, r3, #1
 8001f34:	281f      	cmp	r0, #31
 8001f36:	dc00      	bgt.n	8001f3a <__aeabi_dsub+0x38a>
 8001f38:	e1a0      	b.n	800227c <__aeabi_dsub+0x6cc>
 8001f3a:	0015      	movs	r5, r2
 8001f3c:	3b1f      	subs	r3, #31
 8001f3e:	40dd      	lsrs	r5, r3
 8001f40:	2820      	cmp	r0, #32
 8001f42:	d005      	beq.n	8001f50 <__aeabi_dsub+0x3a0>
 8001f44:	2340      	movs	r3, #64	@ 0x40
 8001f46:	1a1b      	subs	r3, r3, r0
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	1e53      	subs	r3, r2, #1
 8001f4c:	419a      	sbcs	r2, r3
 8001f4e:	4315      	orrs	r5, r2
 8001f50:	2307      	movs	r3, #7
 8001f52:	2700      	movs	r7, #0
 8001f54:	402b      	ands	r3, r5
 8001f56:	e7d0      	b.n	8001efa <__aeabi_dsub+0x34a>
 8001f58:	08c0      	lsrs	r0, r0, #3
 8001f5a:	0762      	lsls	r2, r4, #29
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	08e4      	lsrs	r4, r4, #3
 8001f60:	e737      	b.n	8001dd2 <__aeabi_dsub+0x222>
 8001f62:	08ea      	lsrs	r2, r5, #3
 8001f64:	0763      	lsls	r3, r4, #29
 8001f66:	431a      	orrs	r2, r3
 8001f68:	4bd3      	ldr	r3, [pc, #844]	@ (80022b8 <__aeabi_dsub+0x708>)
 8001f6a:	08e4      	lsrs	r4, r4, #3
 8001f6c:	429f      	cmp	r7, r3
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x3c2>
 8001f70:	e72f      	b.n	8001dd2 <__aeabi_dsub+0x222>
 8001f72:	0324      	lsls	r4, r4, #12
 8001f74:	0b25      	lsrs	r5, r4, #12
 8001f76:	057c      	lsls	r4, r7, #21
 8001f78:	0d64      	lsrs	r4, r4, #21
 8001f7a:	e6c2      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001f7c:	46ca      	mov	sl, r9
 8001f7e:	0022      	movs	r2, r4
 8001f80:	4302      	orrs	r2, r0
 8001f82:	d158      	bne.n	8002036 <__aeabi_dsub+0x486>
 8001f84:	4663      	mov	r3, ip
 8001f86:	000e      	movs	r6, r1
 8001f88:	9c02      	ldr	r4, [sp, #8]
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	9b03      	ldr	r3, [sp, #12]
 8001f8e:	4657      	mov	r7, sl
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	e7e7      	b.n	8001f64 <__aeabi_dsub+0x3b4>
 8001f94:	4cc9      	ldr	r4, [pc, #804]	@ (80022bc <__aeabi_dsub+0x70c>)
 8001f96:	1aff      	subs	r7, r7, r3
 8001f98:	4014      	ands	r4, r2
 8001f9a:	e692      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001f9c:	4dc8      	ldr	r5, [pc, #800]	@ (80022c0 <__aeabi_dsub+0x710>)
 8001f9e:	1c7a      	adds	r2, r7, #1
 8001fa0:	422a      	tst	r2, r5
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x3f6>
 8001fa4:	e084      	b.n	80020b0 <__aeabi_dsub+0x500>
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x400>
 8001fae:	e0ef      	b.n	8002190 <__aeabi_dsub+0x5e0>
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x406>
 8001fb4:	e0e5      	b.n	8002182 <__aeabi_dsub+0x5d2>
 8001fb6:	4662      	mov	r2, ip
 8001fb8:	9902      	ldr	r1, [sp, #8]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x410>
 8001fbe:	e0c5      	b.n	800214c <__aeabi_dsub+0x59c>
 8001fc0:	4663      	mov	r3, ip
 8001fc2:	18c5      	adds	r5, r0, r3
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	4285      	cmp	r5, r0
 8001fc8:	4180      	sbcs	r0, r0
 8001fca:	4464      	add	r4, ip
 8001fcc:	4240      	negs	r0, r0
 8001fce:	1824      	adds	r4, r4, r0
 8001fd0:	0223      	lsls	r3, r4, #8
 8001fd2:	d502      	bpl.n	8001fda <__aeabi_dsub+0x42a>
 8001fd4:	4bb9      	ldr	r3, [pc, #740]	@ (80022bc <__aeabi_dsub+0x70c>)
 8001fd6:	3701      	adds	r7, #1
 8001fd8:	401c      	ands	r4, r3
 8001fda:	46ba      	mov	sl, r7
 8001fdc:	9503      	str	r5, [sp, #12]
 8001fde:	e7d5      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001fe0:	4662      	mov	r2, ip
 8001fe2:	1a85      	subs	r5, r0, r2
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	4192      	sbcs	r2, r2
 8001fe8:	4252      	negs	r2, r2
 8001fea:	4691      	mov	r9, r2
 8001fec:	9b02      	ldr	r3, [sp, #8]
 8001fee:	1ae3      	subs	r3, r4, r3
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	d46c      	bmi.n	80020d8 <__aeabi_dsub+0x528>
 8001ffe:	464a      	mov	r2, r9
 8002000:	464c      	mov	r4, r9
 8002002:	432a      	orrs	r2, r5
 8002004:	d000      	beq.n	8002008 <__aeabi_dsub+0x458>
 8002006:	e63a      	b.n	8001c7e <__aeabi_dsub+0xce>
 8002008:	2600      	movs	r6, #0
 800200a:	2400      	movs	r4, #0
 800200c:	2500      	movs	r5, #0
 800200e:	e678      	b.n	8001d02 <__aeabi_dsub+0x152>
 8002010:	9902      	ldr	r1, [sp, #8]
 8002012:	4653      	mov	r3, sl
 8002014:	000d      	movs	r5, r1
 8002016:	3a20      	subs	r2, #32
 8002018:	40d5      	lsrs	r5, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d006      	beq.n	800202c <__aeabi_dsub+0x47c>
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	000b      	movs	r3, r1
 8002024:	4093      	lsls	r3, r2
 8002026:	4662      	mov	r2, ip
 8002028:	431a      	orrs	r2, r3
 800202a:	4693      	mov	fp, r2
 800202c:	465b      	mov	r3, fp
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	4193      	sbcs	r3, r2
 8002032:	431d      	orrs	r5, r3
 8002034:	e619      	b.n	8001c6a <__aeabi_dsub+0xba>
 8002036:	4653      	mov	r3, sl
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x490>
 800203e:	e0c6      	b.n	80021ce <__aeabi_dsub+0x61e>
 8002040:	4e9d      	ldr	r6, [pc, #628]	@ (80022b8 <__aeabi_dsub+0x708>)
 8002042:	45b2      	cmp	sl, r6
 8002044:	d100      	bne.n	8002048 <__aeabi_dsub+0x498>
 8002046:	e6bd      	b.n	8001dc4 <__aeabi_dsub+0x214>
 8002048:	4688      	mov	r8, r1
 800204a:	000e      	movs	r6, r1
 800204c:	2501      	movs	r5, #1
 800204e:	2a38      	cmp	r2, #56	@ 0x38
 8002050:	dc10      	bgt.n	8002074 <__aeabi_dsub+0x4c4>
 8002052:	2a1f      	cmp	r2, #31
 8002054:	dc7f      	bgt.n	8002156 <__aeabi_dsub+0x5a6>
 8002056:	2120      	movs	r1, #32
 8002058:	0025      	movs	r5, r4
 800205a:	1a89      	subs	r1, r1, r2
 800205c:	0007      	movs	r7, r0
 800205e:	4088      	lsls	r0, r1
 8002060:	408d      	lsls	r5, r1
 8002062:	40d7      	lsrs	r7, r2
 8002064:	40d4      	lsrs	r4, r2
 8002066:	1e41      	subs	r1, r0, #1
 8002068:	4188      	sbcs	r0, r1
 800206a:	9b02      	ldr	r3, [sp, #8]
 800206c:	433d      	orrs	r5, r7
 800206e:	1b1b      	subs	r3, r3, r4
 8002070:	4305      	orrs	r5, r0
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	4662      	mov	r2, ip
 8002076:	1b55      	subs	r5, r2, r5
 8002078:	45ac      	cmp	ip, r5
 800207a:	4192      	sbcs	r2, r2
 800207c:	9b02      	ldr	r3, [sp, #8]
 800207e:	4252      	negs	r2, r2
 8002080:	464f      	mov	r7, r9
 8002082:	1a9c      	subs	r4, r3, r2
 8002084:	e5f6      	b.n	8001c74 <__aeabi_dsub+0xc4>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d000      	beq.n	800208c <__aeabi_dsub+0x4dc>
 800208a:	e0b7      	b.n	80021fc <__aeabi_dsub+0x64c>
 800208c:	2a00      	cmp	r2, #0
 800208e:	d100      	bne.n	8002092 <__aeabi_dsub+0x4e2>
 8002090:	e0f0      	b.n	8002274 <__aeabi_dsub+0x6c4>
 8002092:	2601      	movs	r6, #1
 8002094:	400e      	ands	r6, r1
 8002096:	4663      	mov	r3, ip
 8002098:	9802      	ldr	r0, [sp, #8]
 800209a:	08d9      	lsrs	r1, r3, #3
 800209c:	0742      	lsls	r2, r0, #29
 800209e:	430a      	orrs	r2, r1
 80020a0:	08c4      	lsrs	r4, r0, #3
 80020a2:	e696      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80020a4:	4c85      	ldr	r4, [pc, #532]	@ (80022bc <__aeabi_dsub+0x70c>)
 80020a6:	1aff      	subs	r7, r7, r3
 80020a8:	4014      	ands	r4, r2
 80020aa:	0762      	lsls	r2, r4, #29
 80020ac:	08e4      	lsrs	r4, r4, #3
 80020ae:	e760      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 80020b0:	4981      	ldr	r1, [pc, #516]	@ (80022b8 <__aeabi_dsub+0x708>)
 80020b2:	428a      	cmp	r2, r1
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x508>
 80020b6:	e0c9      	b.n	800224c <__aeabi_dsub+0x69c>
 80020b8:	4663      	mov	r3, ip
 80020ba:	18c1      	adds	r1, r0, r3
 80020bc:	4281      	cmp	r1, r0
 80020be:	4180      	sbcs	r0, r0
 80020c0:	9b02      	ldr	r3, [sp, #8]
 80020c2:	4240      	negs	r0, r0
 80020c4:	18e3      	adds	r3, r4, r3
 80020c6:	181b      	adds	r3, r3, r0
 80020c8:	07dd      	lsls	r5, r3, #31
 80020ca:	085c      	lsrs	r4, r3, #1
 80020cc:	2307      	movs	r3, #7
 80020ce:	0849      	lsrs	r1, r1, #1
 80020d0:	430d      	orrs	r5, r1
 80020d2:	0017      	movs	r7, r2
 80020d4:	402b      	ands	r3, r5
 80020d6:	e710      	b.n	8001efa <__aeabi_dsub+0x34a>
 80020d8:	4663      	mov	r3, ip
 80020da:	1a1d      	subs	r5, r3, r0
 80020dc:	45ac      	cmp	ip, r5
 80020de:	4192      	sbcs	r2, r2
 80020e0:	2601      	movs	r6, #1
 80020e2:	9b02      	ldr	r3, [sp, #8]
 80020e4:	4252      	negs	r2, r2
 80020e6:	1b1c      	subs	r4, r3, r4
 80020e8:	4688      	mov	r8, r1
 80020ea:	1aa4      	subs	r4, r4, r2
 80020ec:	400e      	ands	r6, r1
 80020ee:	e5c6      	b.n	8001c7e <__aeabi_dsub+0xce>
 80020f0:	4663      	mov	r3, ip
 80020f2:	18c5      	adds	r5, r0, r3
 80020f4:	9b02      	ldr	r3, [sp, #8]
 80020f6:	4285      	cmp	r5, r0
 80020f8:	4180      	sbcs	r0, r0
 80020fa:	469c      	mov	ip, r3
 80020fc:	4240      	negs	r0, r0
 80020fe:	4464      	add	r4, ip
 8002100:	1824      	adds	r4, r4, r0
 8002102:	2701      	movs	r7, #1
 8002104:	0223      	lsls	r3, r4, #8
 8002106:	d400      	bmi.n	800210a <__aeabi_dsub+0x55a>
 8002108:	e6f5      	b.n	8001ef6 <__aeabi_dsub+0x346>
 800210a:	2702      	movs	r7, #2
 800210c:	e641      	b.n	8001d92 <__aeabi_dsub+0x1e2>
 800210e:	4663      	mov	r3, ip
 8002110:	1ac5      	subs	r5, r0, r3
 8002112:	42a8      	cmp	r0, r5
 8002114:	4180      	sbcs	r0, r0
 8002116:	9b02      	ldr	r3, [sp, #8]
 8002118:	4240      	negs	r0, r0
 800211a:	1ae4      	subs	r4, r4, r3
 800211c:	2701      	movs	r7, #1
 800211e:	1a24      	subs	r4, r4, r0
 8002120:	e5a8      	b.n	8001c74 <__aeabi_dsub+0xc4>
 8002122:	9d02      	ldr	r5, [sp, #8]
 8002124:	4652      	mov	r2, sl
 8002126:	002b      	movs	r3, r5
 8002128:	3a20      	subs	r2, #32
 800212a:	40d3      	lsrs	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	4653      	mov	r3, sl
 8002130:	2b20      	cmp	r3, #32
 8002132:	d006      	beq.n	8002142 <__aeabi_dsub+0x592>
 8002134:	2240      	movs	r2, #64	@ 0x40
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	002b      	movs	r3, r5
 800213a:	4093      	lsls	r3, r2
 800213c:	4662      	mov	r2, ip
 800213e:	431a      	orrs	r2, r3
 8002140:	4693      	mov	fp, r2
 8002142:	465d      	mov	r5, fp
 8002144:	1e6b      	subs	r3, r5, #1
 8002146:	419d      	sbcs	r5, r3
 8002148:	430d      	orrs	r5, r1
 800214a:	e615      	b.n	8001d78 <__aeabi_dsub+0x1c8>
 800214c:	0762      	lsls	r2, r4, #29
 800214e:	08c0      	lsrs	r0, r0, #3
 8002150:	4302      	orrs	r2, r0
 8002152:	08e4      	lsrs	r4, r4, #3
 8002154:	e70d      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 8002156:	0011      	movs	r1, r2
 8002158:	0027      	movs	r7, r4
 800215a:	3920      	subs	r1, #32
 800215c:	40cf      	lsrs	r7, r1
 800215e:	2a20      	cmp	r2, #32
 8002160:	d005      	beq.n	800216e <__aeabi_dsub+0x5be>
 8002162:	2140      	movs	r1, #64	@ 0x40
 8002164:	1a8a      	subs	r2, r1, r2
 8002166:	4094      	lsls	r4, r2
 8002168:	0025      	movs	r5, r4
 800216a:	4305      	orrs	r5, r0
 800216c:	9503      	str	r5, [sp, #12]
 800216e:	9d03      	ldr	r5, [sp, #12]
 8002170:	1e6a      	subs	r2, r5, #1
 8002172:	4195      	sbcs	r5, r2
 8002174:	433d      	orrs	r5, r7
 8002176:	e77d      	b.n	8002074 <__aeabi_dsub+0x4c4>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x5ce>
 800217c:	e744      	b.n	8002008 <__aeabi_dsub+0x458>
 800217e:	2601      	movs	r6, #1
 8002180:	400e      	ands	r6, r1
 8002182:	4663      	mov	r3, ip
 8002184:	08d9      	lsrs	r1, r3, #3
 8002186:	9b02      	ldr	r3, [sp, #8]
 8002188:	075a      	lsls	r2, r3, #29
 800218a:	430a      	orrs	r2, r1
 800218c:	08dc      	lsrs	r4, r3, #3
 800218e:	e6f0      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 8002190:	2a00      	cmp	r2, #0
 8002192:	d028      	beq.n	80021e6 <__aeabi_dsub+0x636>
 8002194:	4662      	mov	r2, ip
 8002196:	9f02      	ldr	r7, [sp, #8]
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	433a      	orrs	r2, r7
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x5f0>
 800219e:	e6dc      	b.n	8001f5a <__aeabi_dsub+0x3aa>
 80021a0:	0762      	lsls	r2, r4, #29
 80021a2:	4310      	orrs	r0, r2
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	08e4      	lsrs	r4, r4, #3
 80021a8:	0312      	lsls	r2, r2, #12
 80021aa:	4214      	tst	r4, r2
 80021ac:	d009      	beq.n	80021c2 <__aeabi_dsub+0x612>
 80021ae:	08fd      	lsrs	r5, r7, #3
 80021b0:	4215      	tst	r5, r2
 80021b2:	d106      	bne.n	80021c2 <__aeabi_dsub+0x612>
 80021b4:	4663      	mov	r3, ip
 80021b6:	2601      	movs	r6, #1
 80021b8:	002c      	movs	r4, r5
 80021ba:	08d8      	lsrs	r0, r3, #3
 80021bc:	077b      	lsls	r3, r7, #29
 80021be:	4318      	orrs	r0, r3
 80021c0:	400e      	ands	r6, r1
 80021c2:	0f42      	lsrs	r2, r0, #29
 80021c4:	00c0      	lsls	r0, r0, #3
 80021c6:	08c0      	lsrs	r0, r0, #3
 80021c8:	0752      	lsls	r2, r2, #29
 80021ca:	4302      	orrs	r2, r0
 80021cc:	e601      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80021ce:	4663      	mov	r3, ip
 80021d0:	1a1d      	subs	r5, r3, r0
 80021d2:	45ac      	cmp	ip, r5
 80021d4:	4192      	sbcs	r2, r2
 80021d6:	9b02      	ldr	r3, [sp, #8]
 80021d8:	4252      	negs	r2, r2
 80021da:	1b1c      	subs	r4, r3, r4
 80021dc:	000e      	movs	r6, r1
 80021de:	4688      	mov	r8, r1
 80021e0:	2701      	movs	r7, #1
 80021e2:	1aa4      	subs	r4, r4, r2
 80021e4:	e546      	b.n	8001c74 <__aeabi_dsub+0xc4>
 80021e6:	4663      	mov	r3, ip
 80021e8:	08d9      	lsrs	r1, r3, #3
 80021ea:	9b02      	ldr	r3, [sp, #8]
 80021ec:	075a      	lsls	r2, r3, #29
 80021ee:	430a      	orrs	r2, r1
 80021f0:	08dc      	lsrs	r4, r3, #3
 80021f2:	e5ee      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80021f4:	4663      	mov	r3, ip
 80021f6:	9c02      	ldr	r4, [sp, #8]
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	e6c7      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 80021fc:	08c0      	lsrs	r0, r0, #3
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x654>
 8002202:	e6aa      	b.n	8001f5a <__aeabi_dsub+0x3aa>
 8002204:	0762      	lsls	r2, r4, #29
 8002206:	4310      	orrs	r0, r2
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	08e4      	lsrs	r4, r4, #3
 800220c:	0312      	lsls	r2, r2, #12
 800220e:	4214      	tst	r4, r2
 8002210:	d0d7      	beq.n	80021c2 <__aeabi_dsub+0x612>
 8002212:	9f02      	ldr	r7, [sp, #8]
 8002214:	08fd      	lsrs	r5, r7, #3
 8002216:	4215      	tst	r5, r2
 8002218:	d1d3      	bne.n	80021c2 <__aeabi_dsub+0x612>
 800221a:	4663      	mov	r3, ip
 800221c:	2601      	movs	r6, #1
 800221e:	08d8      	lsrs	r0, r3, #3
 8002220:	077b      	lsls	r3, r7, #29
 8002222:	002c      	movs	r4, r5
 8002224:	4318      	orrs	r0, r3
 8002226:	400e      	ands	r6, r1
 8002228:	e7cb      	b.n	80021c2 <__aeabi_dsub+0x612>
 800222a:	000a      	movs	r2, r1
 800222c:	0027      	movs	r7, r4
 800222e:	3a20      	subs	r2, #32
 8002230:	40d7      	lsrs	r7, r2
 8002232:	2920      	cmp	r1, #32
 8002234:	d005      	beq.n	8002242 <__aeabi_dsub+0x692>
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	1a52      	subs	r2, r2, r1
 800223a:	4094      	lsls	r4, r2
 800223c:	0025      	movs	r5, r4
 800223e:	4305      	orrs	r5, r0
 8002240:	9503      	str	r5, [sp, #12]
 8002242:	9d03      	ldr	r5, [sp, #12]
 8002244:	1e6a      	subs	r2, r5, #1
 8002246:	4195      	sbcs	r5, r2
 8002248:	432f      	orrs	r7, r5
 800224a:	e610      	b.n	8001e6e <__aeabi_dsub+0x2be>
 800224c:	0014      	movs	r4, r2
 800224e:	2500      	movs	r5, #0
 8002250:	2200      	movs	r2, #0
 8002252:	e556      	b.n	8001d02 <__aeabi_dsub+0x152>
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4460      	add	r0, ip
 8002258:	4699      	mov	r9, r3
 800225a:	4560      	cmp	r0, ip
 800225c:	4192      	sbcs	r2, r2
 800225e:	444c      	add	r4, r9
 8002260:	4252      	negs	r2, r2
 8002262:	0005      	movs	r5, r0
 8002264:	18a4      	adds	r4, r4, r2
 8002266:	e74c      	b.n	8002102 <__aeabi_dsub+0x552>
 8002268:	001a      	movs	r2, r3
 800226a:	001c      	movs	r4, r3
 800226c:	432a      	orrs	r2, r5
 800226e:	d000      	beq.n	8002272 <__aeabi_dsub+0x6c2>
 8002270:	e6b3      	b.n	8001fda <__aeabi_dsub+0x42a>
 8002272:	e6c9      	b.n	8002008 <__aeabi_dsub+0x458>
 8002274:	2480      	movs	r4, #128	@ 0x80
 8002276:	2600      	movs	r6, #0
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	e5ae      	b.n	8001dda <__aeabi_dsub+0x22a>
 800227c:	2120      	movs	r1, #32
 800227e:	2500      	movs	r5, #0
 8002280:	1a09      	subs	r1, r1, r0
 8002282:	e517      	b.n	8001cb4 <__aeabi_dsub+0x104>
 8002284:	2200      	movs	r2, #0
 8002286:	2500      	movs	r5, #0
 8002288:	4c0b      	ldr	r4, [pc, #44]	@ (80022b8 <__aeabi_dsub+0x708>)
 800228a:	e53a      	b.n	8001d02 <__aeabi_dsub+0x152>
 800228c:	2d00      	cmp	r5, #0
 800228e:	d100      	bne.n	8002292 <__aeabi_dsub+0x6e2>
 8002290:	e5f6      	b.n	8001e80 <__aeabi_dsub+0x2d0>
 8002292:	464b      	mov	r3, r9
 8002294:	1bda      	subs	r2, r3, r7
 8002296:	4692      	mov	sl, r2
 8002298:	2f00      	cmp	r7, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x6ee>
 800229c:	e66f      	b.n	8001f7e <__aeabi_dsub+0x3ce>
 800229e:	2a38      	cmp	r2, #56	@ 0x38
 80022a0:	dc05      	bgt.n	80022ae <__aeabi_dsub+0x6fe>
 80022a2:	2680      	movs	r6, #128	@ 0x80
 80022a4:	0436      	lsls	r6, r6, #16
 80022a6:	4334      	orrs	r4, r6
 80022a8:	4688      	mov	r8, r1
 80022aa:	000e      	movs	r6, r1
 80022ac:	e6d1      	b.n	8002052 <__aeabi_dsub+0x4a2>
 80022ae:	4688      	mov	r8, r1
 80022b0:	000e      	movs	r6, r1
 80022b2:	2501      	movs	r5, #1
 80022b4:	e6de      	b.n	8002074 <__aeabi_dsub+0x4c4>
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	ff7fffff 	.word	0xff7fffff
 80022c0:	000007fe 	.word	0x000007fe
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x71a>
 80022c8:	e668      	b.n	8001f9c <__aeabi_dsub+0x3ec>
 80022ca:	464b      	mov	r3, r9
 80022cc:	1bd9      	subs	r1, r3, r7
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d101      	bne.n	80022d6 <__aeabi_dsub+0x726>
 80022d2:	468a      	mov	sl, r1
 80022d4:	e5a7      	b.n	8001e26 <__aeabi_dsub+0x276>
 80022d6:	2701      	movs	r7, #1
 80022d8:	2938      	cmp	r1, #56	@ 0x38
 80022da:	dd00      	ble.n	80022de <__aeabi_dsub+0x72e>
 80022dc:	e5c7      	b.n	8001e6e <__aeabi_dsub+0x2be>
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	0412      	lsls	r2, r2, #16
 80022e2:	4314      	orrs	r4, r2
 80022e4:	e5af      	b.n	8001e46 <__aeabi_dsub+0x296>
 80022e6:	46c0      	nop			@ (mov r8, r8)

080022e8 <__aeabi_dcmpun>:
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	46c6      	mov	lr, r8
 80022ec:	031e      	lsls	r6, r3, #12
 80022ee:	0b36      	lsrs	r6, r6, #12
 80022f0:	46b0      	mov	r8, r6
 80022f2:	4e0d      	ldr	r6, [pc, #52]	@ (8002328 <__aeabi_dcmpun+0x40>)
 80022f4:	030c      	lsls	r4, r1, #12
 80022f6:	004d      	lsls	r5, r1, #1
 80022f8:	005f      	lsls	r7, r3, #1
 80022fa:	b500      	push	{lr}
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d6d      	lsrs	r5, r5, #21
 8002300:	0d7f      	lsrs	r7, r7, #21
 8002302:	42b5      	cmp	r5, r6
 8002304:	d00b      	beq.n	800231e <__aeabi_dcmpun+0x36>
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <__aeabi_dcmpun+0x40>)
 8002308:	2000      	movs	r0, #0
 800230a:	428f      	cmp	r7, r1
 800230c:	d104      	bne.n	8002318 <__aeabi_dcmpun+0x30>
 800230e:	4646      	mov	r6, r8
 8002310:	4316      	orrs	r6, r2
 8002312:	0030      	movs	r0, r6
 8002314:	1e43      	subs	r3, r0, #1
 8002316:	4198      	sbcs	r0, r3
 8002318:	bc80      	pop	{r7}
 800231a:	46b8      	mov	r8, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	4304      	orrs	r4, r0
 8002320:	2001      	movs	r0, #1
 8002322:	2c00      	cmp	r4, #0
 8002324:	d1f8      	bne.n	8002318 <__aeabi_dcmpun+0x30>
 8002326:	e7ee      	b.n	8002306 <__aeabi_dcmpun+0x1e>
 8002328:	000007ff 	.word	0x000007ff

0800232c <__aeabi_d2iz>:
 800232c:	000b      	movs	r3, r1
 800232e:	0002      	movs	r2, r0
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4d16      	ldr	r5, [pc, #88]	@ (800238c <__aeabi_d2iz+0x60>)
 8002334:	030c      	lsls	r4, r1, #12
 8002336:	b082      	sub	sp, #8
 8002338:	0049      	lsls	r1, r1, #1
 800233a:	2000      	movs	r0, #0
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	0b24      	lsrs	r4, r4, #12
 8002342:	0d49      	lsrs	r1, r1, #21
 8002344:	0fde      	lsrs	r6, r3, #31
 8002346:	42a9      	cmp	r1, r5
 8002348:	dd04      	ble.n	8002354 <__aeabi_d2iz+0x28>
 800234a:	4811      	ldr	r0, [pc, #68]	@ (8002390 <__aeabi_d2iz+0x64>)
 800234c:	4281      	cmp	r1, r0
 800234e:	dd03      	ble.n	8002358 <__aeabi_d2iz+0x2c>
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <__aeabi_d2iz+0x68>)
 8002352:	18f0      	adds	r0, r6, r3
 8002354:	b002      	add	sp, #8
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	2080      	movs	r0, #128	@ 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4320      	orrs	r0, r4
 800235e:	4c0e      	ldr	r4, [pc, #56]	@ (8002398 <__aeabi_d2iz+0x6c>)
 8002360:	1a64      	subs	r4, r4, r1
 8002362:	2c1f      	cmp	r4, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x4c>
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <__aeabi_d2iz+0x70>)
 8002368:	1a5b      	subs	r3, r3, r1
 800236a:	40d8      	lsrs	r0, r3
 800236c:	0003      	movs	r3, r0
 800236e:	4258      	negs	r0, r3
 8002370:	2e00      	cmp	r6, #0
 8002372:	d1ef      	bne.n	8002354 <__aeabi_d2iz+0x28>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ed      	b.n	8002354 <__aeabi_d2iz+0x28>
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <__aeabi_d2iz+0x74>)
 800237a:	9a00      	ldr	r2, [sp, #0]
 800237c:	469c      	mov	ip, r3
 800237e:	0003      	movs	r3, r0
 8002380:	4461      	add	r1, ip
 8002382:	408b      	lsls	r3, r1
 8002384:	40e2      	lsrs	r2, r4
 8002386:	4313      	orrs	r3, r2
 8002388:	e7f1      	b.n	800236e <__aeabi_d2iz+0x42>
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	000003fe 	.word	0x000003fe
 8002390:	0000041d 	.word	0x0000041d
 8002394:	7fffffff 	.word	0x7fffffff
 8002398:	00000433 	.word	0x00000433
 800239c:	00000413 	.word	0x00000413
 80023a0:	fffffbed 	.word	0xfffffbed

080023a4 <__aeabi_ui2d>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	1e04      	subs	r4, r0, #0
 80023a8:	d010      	beq.n	80023cc <__aeabi_ui2d+0x28>
 80023aa:	f7fe f869 	bl	8000480 <__clzsi2>
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <__aeabi_ui2d+0x44>)
 80023b0:	1a1b      	subs	r3, r3, r0
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	280a      	cmp	r0, #10
 80023b8:	dc0f      	bgt.n	80023da <__aeabi_ui2d+0x36>
 80023ba:	220b      	movs	r2, #11
 80023bc:	0021      	movs	r1, r4
 80023be:	1a12      	subs	r2, r2, r0
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	3015      	adds	r0, #21
 80023c4:	030a      	lsls	r2, r1, #12
 80023c6:	4084      	lsls	r4, r0
 80023c8:	0b12      	lsrs	r2, r2, #12
 80023ca:	e001      	b.n	80023d0 <__aeabi_ui2d+0x2c>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	051b      	lsls	r3, r3, #20
 80023d2:	4313      	orrs	r3, r2
 80023d4:	0020      	movs	r0, r4
 80023d6:	0019      	movs	r1, r3
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	0022      	movs	r2, r4
 80023dc:	380b      	subs	r0, #11
 80023de:	4082      	lsls	r2, r0
 80023e0:	0312      	lsls	r2, r2, #12
 80023e2:	2400      	movs	r4, #0
 80023e4:	0b12      	lsrs	r2, r2, #12
 80023e6:	e7f3      	b.n	80023d0 <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__clzdi2>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	2900      	cmp	r1, #0
 80023f0:	d103      	bne.n	80023fa <__clzdi2+0xe>
 80023f2:	f7fe f845 	bl	8000480 <__clzsi2>
 80023f6:	3020      	adds	r0, #32
 80023f8:	e002      	b.n	8002400 <__clzdi2+0x14>
 80023fa:	0008      	movs	r0, r1
 80023fc:	f7fe f840 	bl	8000480 <__clzsi2>
 8002400:	bd10      	pop	{r4, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)

08002404 <getAddressPage>:
/**
  * @brief  Get Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	000a      	movs	r2, r1
 8002410:	2100      	movs	r1, #0
 8002412:	000b      	movs	r3, r1
 8002414:	0ad1      	lsrs	r1, r2, #11
 8002416:	02cc      	lsls	r4, r1, #11
 8002418:	2100      	movs	r1, #0
 800241a:	400b      	ands	r3, r1
 800241c:	001d      	movs	r5, r3
 800241e:	0022      	movs	r2, r4
 8002420:	002b      	movs	r3, r5
}
 8002422:	0010      	movs	r0, r2
 8002424:	0019      	movs	r1, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bdb0      	pop	{r4, r5, r7, pc}

0800242c <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	f010 fe65 	bl	8013104 <HAL_FLASH_Unlock>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d1fb      	bne.n	8002436 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800243e:	2410      	movs	r4, #16
 8002440:	193b      	adds	r3, r7, r4
 8002442:	0018      	movs	r0, r3
 8002444:	2310      	movs	r3, #16
 8002446:	001a      	movs	r2, r3
 8002448:	2100      	movs	r1, #0
 800244a:	f018 fd67 	bl	801af1c <memset>
	pEraseInit.NbPages = 1;
 800244e:	0021      	movs	r1, r4
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2201      	movs	r2, #1
 8002454:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002456:	187b      	adds	r3, r7, r1
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002466:	230c      	movs	r3, #12
 8002468:	18fa      	adds	r2, r7, r3
 800246a:	187b      	adds	r3, r7, r1
 800246c:	0011      	movs	r1, r2
 800246e:	0018      	movs	r0, r3
 8002470:	f010 fef6 	bl	8013260 <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	f010 fe69 	bl	801314c <HAL_FLASH_Lock>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d1fb      	bne.n	8002476 <erasePage+0x4a>
}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b009      	add	sp, #36	@ 0x24
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	f010 fe34 	bl	8013104 <HAL_FLASH_Unlock>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d1fb      	bne.n	8002498 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e013      	b.n	80024d2 <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	2417      	movs	r4, #23
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2001      	movs	r0, #1
 80024be:	f010 fdd3 	bl	8013068 <HAL_FLASH_Program>
		Address_++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3308      	adds	r3, #8
 80024c6:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	3201      	adds	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	2317      	movs	r3, #23
 80024d4:	18fa      	adds	r2, r7, r3
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3e4      	bcc.n	80024aa <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	f010 fe33 	bl	801314c <HAL_FLASH_Lock>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d1fb      	bne.n	80024e2 <writeFLASH+0x5a>
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b007      	add	sp, #28
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	46c6      	mov	lr, r8
 80024f8:	b500      	push	{lr}
 80024fa:	4cea      	ldr	r4, [pc, #936]	@ (80028a4 <initEEPROMEmulated+0x3b0>)
 80024fc:	44a5      	add	sp, r4
 80024fe:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 8002500:	4be9      	ldr	r3, [pc, #932]	@ (80028a8 <initEEPROMEmulated+0x3b4>)
 8002502:	4aea      	ldr	r2, [pc, #936]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 8002504:	2430      	movs	r4, #48	@ 0x30
 8002506:	1912      	adds	r2, r2, r4
 8002508:	2108      	movs	r1, #8
 800250a:	468c      	mov	ip, r1
 800250c:	44bc      	add	ip, r7
 800250e:	4462      	add	r2, ip
 8002510:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 8002512:	4be7      	ldr	r3, [pc, #924]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 8002514:	191b      	adds	r3, r3, r4
 8002516:	2208      	movs	r2, #8
 8002518:	18ba      	adds	r2, r7, r2
 800251a:	189a      	adds	r2, r3, r2
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 8002520:	49e4      	ldr	r1, [pc, #912]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 8002522:	190b      	adds	r3, r1, r4
 8002524:	2208      	movs	r2, #8
 8002526:	18ba      	adds	r2, r7, r2
 8002528:	189a      	adds	r2, r3, r2
 800252a:	2301      	movs	r3, #1
 800252c:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800252e:	4be2      	ldr	r3, [pc, #904]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 8002530:	191b      	adds	r3, r3, r4
 8002532:	2208      	movs	r2, #8
 8002534:	18ba      	adds	r2, r7, r2
 8002536:	189a      	adds	r2, r3, r2
 8002538:	237e      	movs	r3, #126	@ 0x7e
 800253a:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 800253c:	4bdf      	ldr	r3, [pc, #892]	@ (80028bc <initEEPROMEmulated+0x3c8>)
 800253e:	4ae0      	ldr	r2, [pc, #896]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 8002540:	1910      	adds	r0, r2, r4
 8002542:	2508      	movs	r5, #8
 8002544:	46ac      	mov	ip, r5
 8002546:	44bc      	add	ip, r7
 8002548:	4460      	add	r0, ip
 800254a:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 800254c:	1913      	adds	r3, r2, r4
 800254e:	2208      	movs	r2, #8
 8002550:	4694      	mov	ip, r2
 8002552:	44bc      	add	ip, r7
 8002554:	4463      	add	r3, ip
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4bd3      	ldr	r3, [pc, #844]	@ (80028a8 <initEEPROMEmulated+0x3b4>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d025      	beq.n	80025ac <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 8002560:	190b      	adds	r3, r1, r4
 8002562:	2208      	movs	r2, #8
 8002564:	18ba      	adds	r2, r7, r2
 8002566:	189a      	adds	r2, r3, r2
 8002568:	2300      	movs	r3, #0
 800256a:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 800256c:	4bd5      	ldr	r3, [pc, #852]	@ (80028c4 <initEEPROMEmulated+0x3d0>)
 800256e:	2295      	movs	r2, #149	@ 0x95
 8002570:	00d2      	lsls	r2, r2, #3
 8002572:	189b      	adds	r3, r3, r2
 8002574:	2230      	movs	r2, #48	@ 0x30
 8002576:	4694      	mov	ip, r2
 8002578:	2208      	movs	r2, #8
 800257a:	4690      	mov	r8, r2
 800257c:	44b8      	add	r8, r7
 800257e:	44c4      	add	ip, r8
 8002580:	4463      	add	r3, ip
 8002582:	0018      	movs	r0, r3
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f018 fcc6 	bl	801af1c <memset>
	pointArray_ = arrayDataP_;
 8002590:	2390      	movs	r3, #144	@ 0x90
 8002592:	191b      	adds	r3, r3, r4
 8002594:	2208      	movs	r2, #8
 8002596:	4694      	mov	ip, r2
 8002598:	44bc      	add	ip, r7
 800259a:	4463      	add	r3, ip
 800259c:	4aca      	ldr	r2, [pc, #808]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800259e:	1912      	adds	r2, r2, r4
 80025a0:	2108      	movs	r1, #8
 80025a2:	468c      	mov	ip, r1
 80025a4:	44bc      	add	ip, r7
 80025a6:	4462      	add	r2, ip
 80025a8:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 80025aa:	e045      	b.n	8002638 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 80025ac:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 80025ae:	4bc7      	ldr	r3, [pc, #796]	@ (80028cc <initEEPROMEmulated+0x3d8>)
 80025b0:	4ac3      	ldr	r2, [pc, #780]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 80025b2:	2430      	movs	r4, #48	@ 0x30
 80025b4:	1911      	adds	r1, r2, r4
 80025b6:	2008      	movs	r0, #8
 80025b8:	4684      	mov	ip, r0
 80025ba:	44bc      	add	ip, r7
 80025bc:	4461      	add	r1, ip
 80025be:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80025c0:	1913      	adds	r3, r2, r4
 80025c2:	2208      	movs	r2, #8
 80025c4:	4694      	mov	ip, r2
 80025c6:	44bc      	add	ip, r7
 80025c8:	4463      	add	r3, ip
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4bc0      	ldr	r3, [pc, #768]	@ (80028d0 <initEEPROMEmulated+0x3dc>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d100      	bne.n	80025d6 <initEEPROMEmulated+0xe2>
 80025d4:	e15d      	b.n	8002892 <initEEPROMEmulated+0x39e>
		return;
	}
	varInit = (uint8_t *) Page_127;
 80025d6:	4bbe      	ldr	r3, [pc, #760]	@ (80028d0 <initEEPROMEmulated+0x3dc>)
 80025d8:	4ab4      	ldr	r2, [pc, #720]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 80025da:	1912      	adds	r2, r2, r4
 80025dc:	2108      	movs	r1, #8
 80025de:	468c      	mov	ip, r1
 80025e0:	44bc      	add	ip, r7
 80025e2:	4462      	add	r2, ip
 80025e4:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80025e6:	4bbb      	ldr	r3, [pc, #748]	@ (80028d4 <initEEPROMEmulated+0x3e0>)
 80025e8:	2295      	movs	r2, #149	@ 0x95
 80025ea:	00d2      	lsls	r2, r2, #3
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	2230      	movs	r2, #48	@ 0x30
 80025f0:	4694      	mov	ip, r2
 80025f2:	2208      	movs	r2, #8
 80025f4:	4690      	mov	r8, r2
 80025f6:	44b8      	add	r8, r7
 80025f8:	44c4      	add	ip, r8
 80025fa:	4463      	add	r3, ip
 80025fc:	0018      	movs	r0, r3
 80025fe:	2390      	movs	r3, #144	@ 0x90
 8002600:	001a      	movs	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	f018 fc8a 	bl	801af1c <memset>
	size_ = sizeEEPROM_V;
 8002608:	4ba9      	ldr	r3, [pc, #676]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 800260a:	191b      	adds	r3, r3, r4
 800260c:	2208      	movs	r2, #8
 800260e:	18ba      	adds	r2, r7, r2
 8002610:	189a      	adds	r2, r3, r2
 8002612:	2312      	movs	r3, #18
 8002614:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002616:	2308      	movs	r3, #8
 8002618:	18e3      	adds	r3, r4, r3
 800261a:	19db      	adds	r3, r3, r7
 800261c:	4aaa      	ldr	r2, [pc, #680]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800261e:	1912      	adds	r2, r2, r4
 8002620:	2108      	movs	r1, #8
 8002622:	468c      	mov	ip, r1
 8002624:	44bc      	add	ip, r7
 8002626:	4462      	add	r2, ip
 8002628:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 800262a:	4ba3      	ldr	r3, [pc, #652]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 800262c:	191b      	adds	r3, r3, r4
 800262e:	2208      	movs	r2, #8
 8002630:	18ba      	adds	r2, r7, r2
 8002632:	189a      	adds	r2, r3, r2
 8002634:	237f      	movs	r3, #127	@ 0x7f
 8002636:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002638:	4ba7      	ldr	r3, [pc, #668]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800263a:	2230      	movs	r2, #48	@ 0x30
 800263c:	189b      	adds	r3, r3, r2
 800263e:	2208      	movs	r2, #8
 8002640:	18ba      	adds	r2, r7, r2
 8002642:	189a      	adds	r2, r3, r2
 8002644:	2300      	movs	r3, #0
 8002646:	7013      	strb	r3, [r2, #0]
 8002648:	e0d9      	b.n	80027fe <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 800264a:	4e98      	ldr	r6, [pc, #608]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 800264c:	2230      	movs	r2, #48	@ 0x30
 800264e:	18b3      	adds	r3, r6, r2
 8002650:	2108      	movs	r1, #8
 8002652:	468c      	mov	ip, r1
 8002654:	44bc      	add	ip, r7
 8002656:	4463      	add	r3, ip
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	7819      	ldrb	r1, [r3, #0]
 800265c:	489e      	ldr	r0, [pc, #632]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800265e:	0014      	movs	r4, r2
 8002660:	1883      	adds	r3, r0, r2
 8002662:	2208      	movs	r2, #8
 8002664:	4694      	mov	ip, r2
 8002666:	44bc      	add	ip, r7
 8002668:	4463      	add	r3, ip
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	00da      	lsls	r2, r3, #3
 800266e:	4b96      	ldr	r3, [pc, #600]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 8002670:	191b      	adds	r3, r3, r4
 8002672:	2508      	movs	r5, #8
 8002674:	46ac      	mov	ip, r5
 8002676:	44bc      	add	ip, r7
 8002678:	4463      	add	r3, ip
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	189b      	adds	r3, r3, r2
 800267e:	6239      	str	r1, [r7, #32]
 8002680:	2200      	movs	r2, #0
 8002682:	627a      	str	r2, [r7, #36]	@ 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 800268c:	1903      	adds	r3, r0, r4
 800268e:	2208      	movs	r2, #8
 8002690:	4694      	mov	ip, r2
 8002692:	44bc      	add	ip, r7
 8002694:	4463      	add	r3, ip
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	498b      	ldr	r1, [pc, #556]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800269c:	190b      	adds	r3, r1, r4
 800269e:	2108      	movs	r1, #8
 80026a0:	1879      	adds	r1, r7, r1
 80026a2:	1859      	adds	r1, r3, r1
 80026a4:	680b      	ldr	r3, [r1, #0]
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	1933      	adds	r3, r6, r4
 80026ae:	2208      	movs	r2, #8
 80026b0:	18ba      	adds	r2, r7, r2
 80026b2:	189a      	adds	r2, r3, r2
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	17db      	asrs	r3, r3, #31
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	0012      	movs	r2, r2
 80026c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c6:	4b84      	ldr	r3, [pc, #528]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 80026c8:	191b      	adds	r3, r3, r4
 80026ca:	2208      	movs	r2, #8
 80026cc:	4694      	mov	ip, r2
 80026ce:	44bc      	add	ip, r7
 80026d0:	4463      	add	r3, ip
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	4b7c      	ldr	r3, [pc, #496]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 80026d8:	191b      	adds	r3, r3, r4
 80026da:	2508      	movs	r5, #8
 80026dc:	46ac      	mov	ip, r5
 80026de:	44bc      	add	ip, r7
 80026e0:	4463      	add	r3, ip
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026e8:	4302      	orrs	r2, r0
 80026ea:	613a      	str	r2, [r7, #16]
 80026ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ee:	430a      	orrs	r2, r1
 80026f0:	617a      	str	r2, [r7, #20]
 80026f2:	6939      	ldr	r1, [r7, #16]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6019      	str	r1, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80026fa:	0021      	movs	r1, r4
 80026fc:	1873      	adds	r3, r6, r1
 80026fe:	2208      	movs	r2, #8
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	189a      	adds	r2, r3, r2
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4b75      	ldr	r3, [pc, #468]	@ (80028dc <initEEPROMEmulated+0x3e8>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d35b      	bcc.n	80027c4 <initEEPROMEmulated+0x2d0>
 800270c:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 800270e:	1853      	adds	r3, r2, r1
 8002710:	2208      	movs	r2, #8
 8002712:	4694      	mov	ip, r2
 8002714:	44bc      	add	ip, r7
 8002716:	4463      	add	r3, ip
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <initEEPROMEmulated+0x2d0>
			varInit++;
 800271e:	1873      	adds	r3, r6, r1
 8002720:	2208      	movs	r2, #8
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	189a      	adds	r2, r3, r2
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	1872      	adds	r2, r6, r1
 800272c:	2008      	movs	r0, #8
 800272e:	4684      	mov	ip, r0
 8002730:	44bc      	add	ip, r7
 8002732:	4462      	add	r2, ip
 8002734:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002736:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 8002738:	0008      	movs	r0, r1
 800273a:	185b      	adds	r3, r3, r1
 800273c:	2208      	movs	r2, #8
 800273e:	4694      	mov	ip, r2
 8002740:	44bc      	add	ip, r7
 8002742:	4463      	add	r3, ip
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	495f      	ldr	r1, [pc, #380]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800274a:	0004      	movs	r4, r0
 800274c:	1809      	adds	r1, r1, r0
 800274e:	2308      	movs	r3, #8
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	18c8      	adds	r0, r1, r3
 8002754:	6803      	ldr	r3, [r0, #0]
 8002756:	189b      	adds	r3, r3, r2
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	0023      	movs	r3, r4
 800275e:	001c      	movs	r4, r3
 8002760:	18f2      	adds	r2, r6, r3
 8002762:	2308      	movs	r3, #8
 8002764:	469c      	mov	ip, r3
 8002766:	44bc      	add	ip, r7
 8002768:	4462      	add	r2, ip
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
 8002774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002776:	0e13      	lsrs	r3, r2, #24
 8002778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800277a:	0212      	lsls	r2, r2, #8
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002786:	0213      	lsls	r3, r2, #8
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800278c:	0026      	movs	r6, r4
 800278e:	199b      	adds	r3, r3, r6
 8002790:	2208      	movs	r2, #8
 8002792:	4694      	mov	ip, r2
 8002794:	44bc      	add	ip, r7
 8002796:	4463      	add	r3, ip
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00da      	lsls	r2, r3, #3
 800279c:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800279e:	199b      	adds	r3, r3, r6
 80027a0:	2408      	movs	r4, #8
 80027a2:	46a4      	mov	ip, r4
 80027a4:	44bc      	add	ip, r7
 80027a6:	4463      	add	r3, ip
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	0002      	movs	r2, r0
 80027ae:	683c      	ldr	r4, [r7, #0]
 80027b0:	4322      	orrs	r2, r4
 80027b2:	60ba      	str	r2, [r7, #8]
 80027b4:	000a      	movs	r2, r1
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6019      	str	r1, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80027c4:	4a39      	ldr	r2, [pc, #228]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 80027c6:	2130      	movs	r1, #48	@ 0x30
 80027c8:	1853      	adds	r3, r2, r1
 80027ca:	2008      	movs	r0, #8
 80027cc:	4684      	mov	ip, r0
 80027ce:	44bc      	add	ip, r7
 80027d0:	4463      	add	r3, ip
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	1852      	adds	r2, r2, r1
 80027d8:	2008      	movs	r0, #8
 80027da:	4684      	mov	ip, r0
 80027dc:	44bc      	add	ip, r7
 80027de:	4462      	add	r2, ip
 80027e0:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80027e2:	4a3d      	ldr	r2, [pc, #244]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 80027e4:	1853      	adds	r3, r2, r1
 80027e6:	2008      	movs	r0, #8
 80027e8:	4684      	mov	ip, r0
 80027ea:	44bc      	add	ip, r7
 80027ec:	4463      	add	r3, ip
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	1852      	adds	r2, r2, r1
 80027f2:	2108      	movs	r1, #8
 80027f4:	468c      	mov	ip, r1
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	3301      	adds	r3, #1
 80027fc:	7013      	strb	r3, [r2, #0]
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 8002800:	2130      	movs	r1, #48	@ 0x30
 8002802:	185b      	adds	r3, r3, r1
 8002804:	2208      	movs	r2, #8
 8002806:	18ba      	adds	r2, r7, r2
 8002808:	189a      	adds	r2, r3, r2
 800280a:	4e29      	ldr	r6, [pc, #164]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 800280c:	1873      	adds	r3, r6, r1
 800280e:	2008      	movs	r0, #8
 8002810:	4684      	mov	ip, r0
 8002812:	44bc      	add	ip, r7
 8002814:	4463      	add	r3, ip
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d200      	bcs.n	8002820 <initEEPROMEmulated+0x32c>
 800281e:	e714      	b.n	800264a <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 8002822:	000c      	movs	r4, r1
 8002824:	185b      	adds	r3, r3, r1
 8002826:	2208      	movs	r2, #8
 8002828:	4694      	mov	ip, r2
 800282a:	44bc      	add	ip, r7
 800282c:	4463      	add	r3, ip
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	0018      	movs	r0, r3
 8002832:	f7ff fdfb 	bl	800242c <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002836:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 8002838:	0022      	movs	r2, r4
 800283a:	189b      	adds	r3, r3, r2
 800283c:	2108      	movs	r1, #8
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1f18      	subs	r0, r3, #4
 8002848:	0014      	movs	r4, r2
 800284a:	1933      	adds	r3, r6, r4
 800284c:	2208      	movs	r2, #8
 800284e:	4694      	mov	ip, r2
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 8002858:	191b      	adds	r3, r3, r4
 800285a:	2108      	movs	r1, #8
 800285c:	468c      	mov	ip, r1
 800285e:	44bc      	add	ip, r7
 8002860:	4463      	add	r3, ip
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0019      	movs	r1, r3
 8002866:	f7ff fe0f 	bl	8002488 <writeFLASH>
	if(!flagVar_){
 800286a:	4912      	ldr	r1, [pc, #72]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 800286c:	0020      	movs	r0, r4
 800286e:	180b      	adds	r3, r1, r0
 8002870:	2208      	movs	r2, #8
 8002872:	4694      	mov	ip, r2
 8002874:	44bc      	add	ip, r7
 8002876:	4463      	add	r3, ip
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	4053      	eors	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <initEEPROMEmulated+0x3a0>
		flagVar_ = 1;
 8002884:	180b      	adds	r3, r1, r0
 8002886:	2208      	movs	r2, #8
 8002888:	18ba      	adds	r2, r7, r2
 800288a:	189a      	adds	r2, r3, r2
 800288c:	2301      	movs	r3, #1
 800288e:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002890:	e68d      	b.n	80025ae <initEEPROMEmulated+0xba>
		return;
 8002892:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002894:	46bd      	mov	sp, r7
 8002896:	239c      	movs	r3, #156	@ 0x9c
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	449d      	add	sp, r3
 800289c:	bc80      	pop	{r7}
 800289e:	46b8      	mov	r8, r7
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	fffffb20 	.word	0xfffffb20
 80028a8:	0803f000 	.word	0x0803f000
 80028ac:	000004a4 	.word	0x000004a4
 80028b0:	000004a3 	.word	0x000004a3
 80028b4:	0000049b 	.word	0x0000049b
 80028b8:	0000049a 	.word	0x0000049a
 80028bc:	0803f004 	.word	0x0803f004
 80028c0:	00000494 	.word	0x00000494
 80028c4:	fffffbe8 	.word	0xfffffbe8
 80028c8:	0000049c 	.word	0x0000049c
 80028cc:	0803f804 	.word	0x0803f804
 80028d0:	0803f800 	.word	0x0803f800
 80028d4:	fffffb58 	.word	0xfffffb58
 80028d8:	00000493 	.word	0x00000493
 80028dc:	0803f810 	.word	0x0803f810

080028e0 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	4cc2      	ldr	r4, [pc, #776]	@ (8002bec <restartFlashMemory+0x30c>)
 80028e4:	44a5      	add	sp, r4
 80028e6:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 80028e8:	4bc1      	ldr	r3, [pc, #772]	@ (8002bf0 <restartFlashMemory+0x310>)
 80028ea:	2693      	movs	r6, #147	@ 0x93
 80028ec:	00f6      	lsls	r6, r6, #3
 80028ee:	199b      	adds	r3, r3, r6
 80028f0:	2258      	movs	r2, #88	@ 0x58
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	0018      	movs	r0, r3
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	001a      	movs	r2, r3
 8002900:	2100      	movs	r1, #0
 8002902:	f018 fb0b 	bl	801af1c <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002906:	4bbb      	ldr	r3, [pc, #748]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002908:	199b      	adds	r3, r3, r6
 800290a:	2258      	movs	r2, #88	@ 0x58
 800290c:	4694      	mov	ip, r2
 800290e:	44bc      	add	ip, r7
 8002910:	4463      	add	r3, ip
 8002912:	0018      	movs	r0, r3
 8002914:	2390      	movs	r3, #144	@ 0x90
 8002916:	001a      	movs	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f018 faff 	bl	801af1c <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 800291e:	4bb6      	ldr	r3, [pc, #728]	@ (8002bf8 <restartFlashMemory+0x318>)
 8002920:	4ab6      	ldr	r2, [pc, #728]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002922:	2158      	movs	r1, #88	@ 0x58
 8002924:	1852      	adds	r2, r2, r1
 8002926:	19d2      	adds	r2, r2, r7
 8002928:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 800292a:	4bb5      	ldr	r3, [pc, #724]	@ (8002c00 <restartFlashMemory+0x320>)
 800292c:	2258      	movs	r2, #88	@ 0x58
 800292e:	189b      	adds	r3, r3, r2
 8002930:	19da      	adds	r2, r3, r7
 8002932:	2300      	movs	r3, #0
 8002934:	7013      	strb	r3, [r2, #0]
 8002936:	e030      	b.n	800299a <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002938:	48b0      	ldr	r0, [pc, #704]	@ (8002bfc <restartFlashMemory+0x31c>)
 800293a:	2358      	movs	r3, #88	@ 0x58
 800293c:	18c3      	adds	r3, r0, r3
 800293e:	19db      	adds	r3, r3, r7
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	653b      	str	r3, [r7, #80]	@ 0x50
 8002944:	17db      	asrs	r3, r3, #31
 8002946:	657b      	str	r3, [r7, #84]	@ 0x54
 8002948:	4ead      	ldr	r6, [pc, #692]	@ (8002c00 <restartFlashMemory+0x320>)
 800294a:	2358      	movs	r3, #88	@ 0x58
 800294c:	18f3      	adds	r3, r6, r3
 800294e:	19db      	adds	r3, r3, r7
 8002950:	7819      	ldrb	r1, [r3, #0]
 8002952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002954:	001b      	movs	r3, r3
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	2300      	movs	r3, #0
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800295c:	4ba4      	ldr	r3, [pc, #656]	@ (8002bf0 <restartFlashMemory+0x310>)
 800295e:	2293      	movs	r2, #147	@ 0x93
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	189b      	adds	r3, r3, r2
 8002964:	2258      	movs	r2, #88	@ 0x58
 8002966:	18ba      	adds	r2, r7, r2
 8002968:	189a      	adds	r2, r3, r2
 800296a:	00cb      	lsls	r3, r1, #3
 800296c:	18d3      	adds	r3, r2, r3
 800296e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002972:	6019      	str	r1, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002976:	2358      	movs	r3, #88	@ 0x58
 8002978:	18c3      	adds	r3, r0, r3
 800297a:	19db      	adds	r3, r3, r7
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	2258      	movs	r2, #88	@ 0x58
 8002982:	1882      	adds	r2, r0, r2
 8002984:	19d2      	adds	r2, r2, r7
 8002986:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002988:	2358      	movs	r3, #88	@ 0x58
 800298a:	18f3      	adds	r3, r6, r3
 800298c:	19db      	adds	r3, r3, r7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2258      	movs	r2, #88	@ 0x58
 8002992:	18b2      	adds	r2, r6, r2
 8002994:	19d2      	adds	r2, r2, r7
 8002996:	3301      	adds	r3, #1
 8002998:	7013      	strb	r3, [r2, #0]
 800299a:	4b99      	ldr	r3, [pc, #612]	@ (8002c00 <restartFlashMemory+0x320>)
 800299c:	2258      	movs	r2, #88	@ 0x58
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	19db      	adds	r3, r3, r7
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	dac6      	bge.n	8002938 <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 80029aa:	4b91      	ldr	r3, [pc, #580]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029ac:	2093      	movs	r0, #147	@ 0x93
 80029ae:	00c0      	lsls	r0, r0, #3
 80029b0:	181b      	adds	r3, r3, r0
 80029b2:	2258      	movs	r2, #88	@ 0x58
 80029b4:	4694      	mov	ip, r2
 80029b6:	44bc      	add	ip, r7
 80029b8:	4463      	add	r3, ip
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	21aa      	movs	r1, #170	@ 0xaa
 80029c0:	4311      	orrs	r1, r2
 80029c2:	000c      	movs	r4, r1
 80029c4:	2100      	movs	r1, #0
 80029c6:	4319      	orrs	r1, r3
 80029c8:	000d      	movs	r5, r1
 80029ca:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029cc:	181b      	adds	r3, r3, r0
 80029ce:	2258      	movs	r2, #88	@ 0x58
 80029d0:	4694      	mov	ip, r2
 80029d2:	44bc      	add	ip, r7
 80029d4:	4463      	add	r3, ip
 80029d6:	601c      	str	r4, [r3, #0]
 80029d8:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 80029da:	4b85      	ldr	r3, [pc, #532]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029dc:	0005      	movs	r5, r0
 80029de:	181b      	adds	r3, r3, r0
 80029e0:	2258      	movs	r2, #88	@ 0x58
 80029e2:	18ba      	adds	r2, r7, r2
 80029e4:	189a      	adds	r2, r3, r2
 80029e6:	2382      	movs	r3, #130	@ 0x82
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	18d3      	adds	r3, r2, r3
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2166      	movs	r1, #102	@ 0x66
 80029f2:	4311      	orrs	r1, r2
 80029f4:	6439      	str	r1, [r7, #64]	@ 0x40
 80029f6:	2100      	movs	r1, #0
 80029f8:	4319      	orrs	r1, r3
 80029fa:	6479      	str	r1, [r7, #68]	@ 0x44
 80029fc:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029fe:	195b      	adds	r3, r3, r5
 8002a00:	2258      	movs	r2, #88	@ 0x58
 8002a02:	18ba      	adds	r2, r7, r2
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	2382      	movs	r3, #130	@ 0x82
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18d3      	adds	r3, r2, r3
 8002a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a10:	6019      	str	r1, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002a14:	4b76      	ldr	r3, [pc, #472]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a16:	195b      	adds	r3, r3, r5
 8002a18:	2258      	movs	r2, #88	@ 0x58
 8002a1a:	18ba      	adds	r2, r7, r2
 8002a1c:	189a      	adds	r2, r3, r2
 8002a1e:	23fe      	movs	r3, #254	@ 0xfe
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	21cc      	movs	r1, #204	@ 0xcc
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4319      	orrs	r1, r3
 8002a32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002a34:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a36:	195b      	adds	r3, r3, r5
 8002a38:	2258      	movs	r2, #88	@ 0x58
 8002a3a:	18ba      	adds	r2, r7, r2
 8002a3c:	189a      	adds	r2, r3, r2
 8002a3e:	23fe      	movs	r3, #254	@ 0xfe
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002a4c:	4b68      	ldr	r3, [pc, #416]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a4e:	195b      	adds	r3, r3, r5
 8002a50:	2258      	movs	r2, #88	@ 0x58
 8002a52:	18ba      	adds	r2, r7, r2
 8002a54:	189a      	adds	r2, r3, r2
 8002a56:	23f6      	movs	r3, #246	@ 0xf6
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <restartFlashMemory+0x324>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002a6e:	001a      	movs	r2, r3
 8002a70:	4302      	orrs	r2, r0
 8002a72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a74:	0023      	movs	r3, r4
 8002a76:	430b      	orrs	r3, r1
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a7c:	002c      	movs	r4, r5
 8002a7e:	191b      	adds	r3, r3, r4
 8002a80:	2258      	movs	r2, #88	@ 0x58
 8002a82:	18ba      	adds	r2, r7, r2
 8002a84:	189a      	adds	r2, r3, r2
 8002a86:	23f6      	movs	r3, #246	@ 0xf6
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	18d3      	adds	r3, r2, r3
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a90:	6019      	str	r1, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002a94:	4b56      	ldr	r3, [pc, #344]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a96:	191b      	adds	r3, r3, r4
 8002a98:	2258      	movs	r2, #88	@ 0x58
 8002a9a:	18ba      	adds	r2, r7, r2
 8002a9c:	189a      	adds	r2, r3, r2
 8002a9e:	23f8      	movs	r3, #248	@ 0xf8
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4957      	ldr	r1, [pc, #348]	@ (8002c08 <restartFlashMemory+0x328>)
 8002aaa:	7809      	ldrb	r1, [r1, #0]
 8002aac:	6239      	str	r1, [r7, #32]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ab2:	6a38      	ldr	r0, [r7, #32]
 8002ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab6:	0005      	movs	r5, r0
 8002ab8:	4315      	orrs	r5, r2
 8002aba:	61bd      	str	r5, [r7, #24]
 8002abc:	4319      	orrs	r1, r3
 8002abe:	61f9      	str	r1, [r7, #28]
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002ac2:	191b      	adds	r3, r3, r4
 8002ac4:	2258      	movs	r2, #88	@ 0x58
 8002ac6:	18ba      	adds	r2, r7, r2
 8002ac8:	189a      	adds	r2, r3, r2
 8002aca:	23f8      	movs	r3, #248	@ 0xf8
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	18d3      	adds	r3, r2, r3
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c0c <restartFlashMemory+0x32c>)
 8002ada:	4a48      	ldr	r2, [pc, #288]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002adc:	2158      	movs	r1, #88	@ 0x58
 8002ade:	1852      	adds	r2, r2, r1
 8002ae0:	19d2      	adds	r2, r2, r7
 8002ae2:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <restartFlashMemory+0x330>)
 8002ae6:	2258      	movs	r2, #88	@ 0x58
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e05a      	b.n	8002ba8 <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002af2:	4c47      	ldr	r4, [pc, #284]	@ (8002c10 <restartFlashMemory+0x330>)
 8002af4:	2358      	movs	r3, #88	@ 0x58
 8002af6:	18e3      	adds	r3, r4, r3
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002afe:	2693      	movs	r6, #147	@ 0x93
 8002b00:	00f6      	lsls	r6, r6, #3
 8002b02:	1992      	adds	r2, r2, r6
 8002b04:	2158      	movs	r1, #88	@ 0x58
 8002b06:	468c      	mov	ip, r1
 8002b08:	44bc      	add	ip, r7
 8002b0a:	4462      	add	r2, ip
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4839      	ldr	r0, [pc, #228]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002b16:	2158      	movs	r1, #88	@ 0x58
 8002b18:	1841      	adds	r1, r0, r1
 8002b1a:	19c9      	adds	r1, r1, r7
 8002b1c:	6809      	ldr	r1, [r1, #0]
 8002b1e:	6139      	str	r1, [r7, #16]
 8002b20:	17c9      	asrs	r1, r1, #31
 8002b22:	6179      	str	r1, [r7, #20]
 8002b24:	6939      	ldr	r1, [r7, #16]
 8002b26:	0009      	movs	r1, r1
 8002b28:	60f9      	str	r1, [r7, #12]
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	2158      	movs	r1, #88	@ 0x58
 8002b30:	1861      	adds	r1, r4, r1
 8002b32:	19c9      	adds	r1, r1, r7
 8002b34:	7809      	ldrb	r1, [r1, #0]
 8002b36:	468c      	mov	ip, r1
 8002b38:	68bc      	ldr	r4, [r7, #8]
 8002b3a:	68fd      	ldr	r5, [r7, #12]
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	0029      	movs	r1, r5
 8002b44:	4319      	orrs	r1, r3
 8002b46:	6079      	str	r1, [r7, #4]
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002b4a:	199b      	adds	r3, r3, r6
 8002b4c:	2258      	movs	r2, #88	@ 0x58
 8002b4e:	18ba      	adds	r2, r7, r2
 8002b50:	189a      	adds	r2, r3, r2
 8002b52:	4663      	mov	r3, ip
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6019      	str	r1, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002b60:	2358      	movs	r3, #88	@ 0x58
 8002b62:	18c3      	adds	r3, r0, r3
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <restartFlashMemory+0x334>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d308      	bcc.n	8002b80 <restartFlashMemory+0x2a0>
			varInit++;
 8002b6e:	2358      	movs	r3, #88	@ 0x58
 8002b70:	18c3      	adds	r3, r0, r3
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	2258      	movs	r2, #88	@ 0x58
 8002b7a:	1882      	adds	r2, r0, r2
 8002b7c:	19d2      	adds	r2, r2, r7
 8002b7e:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002b80:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002b82:	2358      	movs	r3, #88	@ 0x58
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	19db      	adds	r3, r3, r7
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	2158      	movs	r1, #88	@ 0x58
 8002b8e:	1852      	adds	r2, r2, r1
 8002b90:	19d2      	adds	r2, r2, r7
 8002b92:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002b94:	491e      	ldr	r1, [pc, #120]	@ (8002c10 <restartFlashMemory+0x330>)
 8002b96:	2358      	movs	r3, #88	@ 0x58
 8002b98:	18cb      	adds	r3, r1, r3
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	2358      	movs	r3, #88	@ 0x58
 8002ba0:	18cb      	adds	r3, r1, r3
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	3201      	adds	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <restartFlashMemory+0x330>)
 8002baa:	2258      	movs	r2, #88	@ 0x58
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	19db      	adds	r3, r3, r7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d99d      	bls.n	8002af2 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002bb6:	207e      	movs	r0, #126	@ 0x7e
 8002bb8:	f7ff fc38 	bl	800242c <erasePage>
	erasePage(127);
 8002bbc:	207f      	movs	r0, #127	@ 0x7f
 8002bbe:	f7ff fc35 	bl	800242c <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002bc2:	2390      	movs	r3, #144	@ 0x90
 8002bc4:	2258      	movs	r2, #88	@ 0x58
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	19db      	adds	r3, r3, r7
 8002bca:	480b      	ldr	r0, [pc, #44]	@ (8002bf8 <restartFlashMemory+0x318>)
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	0019      	movs	r1, r3
 8002bd0:	f7ff fc5a 	bl	8002488 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8002bd4:	2358      	movs	r3, #88	@ 0x58
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	480c      	ldr	r0, [pc, #48]	@ (8002c0c <restartFlashMemory+0x32c>)
 8002bda:	2212      	movs	r2, #18
 8002bdc:	0019      	movs	r1, r3
 8002bde:	f7ff fc53 	bl	8002488 <writeFLASH>
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <restartFlashMemory+0x338>)
 8002be8:	449d      	add	sp, r3
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bec:	fffffb0c 	.word	0xfffffb0c
 8002bf0:	fffffbf8 	.word	0xfffffbf8
 8002bf4:	fffffb68 	.word	0xfffffb68
 8002bf8:	0803f000 	.word	0x0803f000
 8002bfc:	00000494 	.word	0x00000494
 8002c00:	00000493 	.word	0x00000493
 8002c04:	0801e7f0 	.word	0x0801e7f0
 8002c08:	0801e7f1 	.word	0x0801e7f1
 8002c0c:	0803f800 	.word	0x0803f800
 8002c10:	00000492 	.word	0x00000492
 8002c14:	0803f810 	.word	0x0803f810
 8002c18:	000004f4 	.word	0x000004f4

08002c1c <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fbec 	bl	8002404 <getAddressPage>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	000b      	movs	r3, r1
 8002c30:	0013      	movs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <findLastValue+0x68>)
 8002c38:	4694      	mov	ip, r2
 8002c3a:	4463      	add	r3, ip
 8002c3c:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a11      	ldr	r2, [pc, #68]	@ (8002c88 <findLastValue+0x6c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d903      	bls.n	8002c4e <findLastValue+0x32>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <findLastValue+0x70>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d90e      	bls.n	8002c6c <findLastValue+0x50>
		return 0xFFFFFFFF;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	425b      	negs	r3, r3
 8002c52:	e013      	b.n	8002c7c <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b08      	subs	r3, #8
 8002c58:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d204      	bcs.n	8002c6c <findLastValue+0x50>
			restartFlashMemory();
 8002c62:	f7ff fe3d 	bl	80028e0 <restartFlashMemory>
			return 0xFFFFFFFF;
 8002c66:	2301      	movs	r3, #1
 8002c68:	425b      	negs	r3, r3
 8002c6a:	e007      	b.n	8002c7c <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d1ee      	bne.n	8002c54 <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	000007fc 	.word	0x000007fc
 8002c88:	0803efff 	.word	0x0803efff
 8002c8c:	0803ffff 	.word	0x0803ffff

08002c90 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	b08d      	sub	sp, #52	@ 0x34
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c98:	6239      	str	r1, [r7, #32]
 8002c9a:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	001b      	movs	r3, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	0006      	movs	r6, r0
 8002cd0:	4316      	orrs	r6, r2
 8002cd2:	0034      	movs	r4, r6
 8002cd4:	4319      	orrs	r1, r3
 8002cd6:	000d      	movs	r5, r1
 8002cd8:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002cda:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8002cdc:	2310      	movs	r3, #16
 8002cde:	2218      	movs	r2, #24
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19d9      	adds	r1, r3, r7
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff fbcd 	bl	8002488 <writeFLASH>
}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b00d      	add	sp, #52	@ 0x34
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 8002cf6:	b5b0      	push	{r4, r5, r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	00d2      	lsls	r2, r2, #3
 8002d04:	4694      	mov	ip, r2
 8002d06:	4463      	add	r3, ip
 8002d08:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8002d0a:	e002      	b.n	8002d12 <currentlyPoint+0x1c>
		Pointx --;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b08      	subs	r3, #8
 8002d10:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	1c51      	adds	r1, r2, #1
 8002d1a:	d101      	bne.n	8002d20 <currentlyPoint+0x2a>
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	d0f5      	beq.n	8002d0c <currentlyPoint+0x16>
	}
	Pointx++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3308      	adds	r3, #8
 8002d24:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	001c      	movs	r4, r3
 8002d2a:	17db      	asrs	r3, r3, #31
 8002d2c:	001d      	movs	r5, r3
 8002d2e:	0022      	movs	r2, r4
 8002d30:	002b      	movs	r3, r5
}
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}

08002d3c <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b08c      	sub	sp, #48	@ 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 8002d46:	242f      	movs	r4, #47	@ 0x2f
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8002d4e:	252e      	movs	r5, #46	@ 0x2e
 8002d50:	197b      	adds	r3, r7, r5
 8002d52:	2212      	movs	r2, #18
 8002d54:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fb53 	bl	8002404 <getAddressPage>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	000b      	movs	r3, r1
 8002d62:	0013      	movs	r3, r2
 8002d64:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4a55      	ldr	r2, [pc, #340]	@ (8002ec0 <FlashManager+0x184>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d105      	bne.n	8002d7a <FlashManager+0x3e>
		flag_Page127 = 0;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ffb8 	bl	8002cf6 <currentlyPoint>
 8002d86:	0002      	movs	r2, r0
 8002d88:	000b      	movs	r3, r1
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	22ff      	movs	r2, #255	@ 0xff
 8002d92:	00d2      	lsls	r2, r2, #3
 8002d94:	4694      	mov	ip, r2
 8002d96:	4463      	add	r3, ip
 8002d98:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	3b08      	subs	r3, #8
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d000      	beq.n	8002da6 <FlashManager+0x6a>
 8002da4:	e082      	b.n	8002eac <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 8002da6:	232e      	movs	r3, #46	@ 0x2e
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f017 ffe1 	bl	801ad74 <malloc>
 8002db2:	0003      	movs	r3, r0
 8002db4:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8002dba:	2323      	movs	r3, #35	@ 0x23
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e023      	b.n	8002e0c <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 8002dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc6:	2323      	movs	r3, #35	@ 0x23
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	18d4      	adds	r4, r2, r3
 8002dd2:	0008      	movs	r0, r1
 8002dd4:	f7ff ff22 	bl	8002c1c <findLastValue>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	6023      	str	r3, [r4, #0]
			varInit++;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	3301      	adds	r3, #1
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	4a37      	ldr	r2, [pc, #220]	@ (8002ec4 <FlashManager+0x188>)
 8002de6:	429a      	cmp	r2, r3
 8002de8:	419b      	sbcs	r3, r3
 8002dea:	425b      	negs	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	001a      	movs	r2, r3
 8002df0:	232f      	movs	r3, #47	@ 0x2f
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4013      	ands	r3, r2
 8002df8:	d002      	beq.n	8002e00 <FlashManager+0xc4>
				varInit++;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8002e00:	2123      	movs	r1, #35	@ 0x23
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	3201      	adds	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	2323      	movs	r3, #35	@ 0x23
 8002e0e:	18fa      	adds	r2, r7, r3
 8002e10:	232e      	movs	r3, #46	@ 0x2e
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3d3      	bcc.n	8002dc4 <FlashManager+0x88>
			}
		}
		// Erase the Page
		uint32_t VarAux_= (((uint32_t) AddressPage_) - 0x8000000);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	22f8      	movs	r2, #248	@ 0xf8
 8002e20:	0612      	lsls	r2, r2, #24
 8002e22:	4694      	mov	ip, r2
 8002e24:	4463      	add	r3, ip
 8002e26:	60fb      	str	r3, [r7, #12]
		uint32_t numberPage = VarAux_/2048; 		// Number the Page
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	60bb      	str	r3, [r7, #8]

		erasePage(numberPage);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fafb 	bl	800242c <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8002e3e:	2322      	movs	r3, #34	@ 0x22
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e01e      	b.n	8002e86 <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8002e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4a:	2322      	movs	r3, #34	@ 0x22
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff18 	bl	8002c90 <pushAddressData>
			varInit++;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <FlashManager+0x188>)
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d902      	bls.n	8002e74 <FlashManager+0x138>
				varInit++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	3308      	adds	r3, #8
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 8002e7a:	2122      	movs	r1, #34	@ 0x22
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	3201      	adds	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	2322      	movs	r3, #34	@ 0x22
 8002e88:	18fa      	adds	r2, r7, r3
 8002e8a:	232e      	movs	r3, #46	@ 0x2e
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3d8      	bcc.n	8002e48 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fef7 	bl	8002c90 <pushAddressData>
		free(arrayTemp);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f017 ff6f 	bl	801ad88 <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 8002eaa:	e005      	b.n	8002eb8 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff feec 	bl	8002c90 <pushAddressData>
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b00c      	add	sp, #48	@ 0x30
 8002ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec0:	0803f000 	.word	0x0803f000
 8002ec4:	0803f810 	.word	0x0803f810

08002ec8 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 8002ece:	1cfb      	adds	r3, r7, #3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 8002ed4:	1cbb      	adds	r3, r7, #2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8002eda:	003b      	movs	r3, r7
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e0d8      	b.n	8003098 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	4a70      	ldr	r2, [pc, #448]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	2b30      	cmp	r3, #48	@ 0x30
 8002ef0:	d102      	bne.n	8002ef8 <MacStringtoHex+0x30>
			tempregister = 0x00;
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3302      	adds	r3, #2
 8002efc:	4a6b      	ldr	r2, [pc, #428]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	2b31      	cmp	r3, #49	@ 0x31
 8002f02:	d102      	bne.n	8002f0a <MacStringtoHex+0x42>
			tempregister = 0x01;
 8002f04:	1cfb      	adds	r3, r7, #3
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	2b32      	cmp	r3, #50	@ 0x32
 8002f14:	d102      	bne.n	8002f1c <MacStringtoHex+0x54>
			tempregister = 0x02;
 8002f16:	1cfb      	adds	r3, r7, #3
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3302      	adds	r3, #2
 8002f20:	4a62      	ldr	r2, [pc, #392]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	2b33      	cmp	r3, #51	@ 0x33
 8002f26:	d102      	bne.n	8002f2e <MacStringtoHex+0x66>
			tempregister = 0x03;
 8002f28:	1cfb      	adds	r3, r7, #3
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3302      	adds	r3, #2
 8002f32:	4a5e      	ldr	r2, [pc, #376]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	2b34      	cmp	r3, #52	@ 0x34
 8002f38:	d102      	bne.n	8002f40 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8002f3a:	1cfb      	adds	r3, r7, #3
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3302      	adds	r3, #2
 8002f44:	4a59      	ldr	r2, [pc, #356]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	2b35      	cmp	r3, #53	@ 0x35
 8002f4a:	d102      	bne.n	8002f52 <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8002f4c:	1cfb      	adds	r3, r7, #3
 8002f4e:	2205      	movs	r2, #5
 8002f50:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3302      	adds	r3, #2
 8002f56:	4a55      	ldr	r2, [pc, #340]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	2b36      	cmp	r3, #54	@ 0x36
 8002f5c:	d102      	bne.n	8002f64 <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8002f5e:	1cfb      	adds	r3, r7, #3
 8002f60:	2206      	movs	r2, #6
 8002f62:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3302      	adds	r3, #2
 8002f68:	4a50      	ldr	r2, [pc, #320]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	2b37      	cmp	r3, #55	@ 0x37
 8002f6e:	d102      	bne.n	8002f76 <MacStringtoHex+0xae>
			tempregister = 0x07;
 8002f70:	1cfb      	adds	r3, r7, #3
 8002f72:	2207      	movs	r2, #7
 8002f74:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	2b38      	cmp	r3, #56	@ 0x38
 8002f80:	d102      	bne.n	8002f88 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 8002f82:	1cfb      	adds	r3, r7, #3
 8002f84:	2208      	movs	r2, #8
 8002f86:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	4a47      	ldr	r2, [pc, #284]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	2b39      	cmp	r3, #57	@ 0x39
 8002f92:	d102      	bne.n	8002f9a <MacStringtoHex+0xd2>
			tempregister = 0x09;
 8002f94:	1cfb      	adds	r3, r7, #3
 8002f96:	2209      	movs	r2, #9
 8002f98:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	4a43      	ldr	r2, [pc, #268]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	2b41      	cmp	r3, #65	@ 0x41
 8002fa4:	d102      	bne.n	8002fac <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 8002fa6:	1cfb      	adds	r3, r7, #3
 8002fa8:	220a      	movs	r2, #10
 8002faa:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	2b42      	cmp	r3, #66	@ 0x42
 8002fb6:	d102      	bne.n	8002fbe <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 8002fb8:	1cfb      	adds	r3, r7, #3
 8002fba:	220b      	movs	r2, #11
 8002fbc:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	2b43      	cmp	r3, #67	@ 0x43
 8002fc8:	d102      	bne.n	8002fd0 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 8002fca:	1cfb      	adds	r3, r7, #3
 8002fcc:	220c      	movs	r2, #12
 8002fce:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	4a35      	ldr	r2, [pc, #212]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	2b44      	cmp	r3, #68	@ 0x44
 8002fda:	d102      	bne.n	8002fe2 <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8002fdc:	1cfb      	adds	r3, r7, #3
 8002fde:	220d      	movs	r2, #13
 8002fe0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	2b45      	cmp	r3, #69	@ 0x45
 8002fec:	d102      	bne.n	8002ff4 <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8002fee:	1cfb      	adds	r3, r7, #3
 8002ff0:	220e      	movs	r2, #14
 8002ff2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2b46      	cmp	r3, #70	@ 0x46
 8002ffe:	d102      	bne.n	8003006 <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003000:	1cfb      	adds	r3, r7, #3
 8003002:	220f      	movs	r2, #15
 8003004:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d105      	bne.n	800301a <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 800300e:	1cbb      	adds	r3, r7, #2
 8003010:	1cfa      	adds	r2, r7, #3
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e03b      	b.n	8003092 <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 800301a:	1cbb      	adds	r3, r7, #2
 800301c:	1cb9      	adds	r1, r7, #2
 800301e:	1cfa      	adds	r2, r7, #3
 8003020:	7809      	ldrb	r1, [r1, #0]
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <MacStringtoHex+0x172>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d002      	beq.n	800303a <MacStringtoHex+0x172>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d105      	bne.n	8003046 <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	003b      	movs	r3, r7
 8003042:	0212      	lsls	r2, r2, #8
 8003044:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d005      	beq.n	8003058 <MacStringtoHex+0x190>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b07      	cmp	r3, #7
 8003050:	d002      	beq.n	8003058 <MacStringtoHex+0x190>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0b      	cmp	r3, #11
 8003056:	d107      	bne.n	8003068 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003058:	1cbb      	adds	r3, r7, #2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b299      	uxth	r1, r3
 800305e:	003b      	movs	r3, r7
 8003060:	003a      	movs	r2, r7
 8003062:	8812      	ldrh	r2, [r2, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d103      	bne.n	8003076 <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <MacStringtoHex+0x1e8>)
 8003070:	003a      	movs	r2, r7
 8003072:	8812      	ldrh	r2, [r2, #0]
 8003074:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b07      	cmp	r3, #7
 800307a:	d103      	bne.n	8003084 <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <MacStringtoHex+0x1e8>)
 800307e:	003a      	movs	r2, r7
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b0b      	cmp	r3, #11
 8003088:	d103      	bne.n	8003092 <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <MacStringtoHex+0x1e8>)
 800308c:	003a      	movs	r2, r7
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3301      	adds	r3, #1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b0b      	cmp	r3, #11
 800309c:	dc00      	bgt.n	80030a0 <MacStringtoHex+0x1d8>
 800309e:	e722      	b.n	8002ee6 <MacStringtoHex+0x1e>
		}
	}
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	20000df0 	.word	0x20000df0
 80030b0:	20000088 	.word	0x20000088

080030b4 <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	603a      	str	r2, [r7, #0]
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	1c0a      	adds	r2, r1, #0
 80030c6:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 80030c8:	210d      	movs	r1, #13
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 80030d0:	200f      	movs	r0, #15
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	1dba      	adds	r2, r7, #6
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d84b      	bhi.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
 80030e4:	4b29      	ldr	r3, [pc, #164]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	1d3a      	adds	r2, r7, #4
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d345      	bcc.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b23      	ldr	r3, [pc, #140]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	187b      	adds	r3, r7, r1
 8003108:	3201      	adds	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 800310c:	187b      	adds	r3, r7, r1
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <ReadHoldingRegistersFunctionRev+0xdc>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d32d      	bcc.n	8003176 <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 800311a:	210e      	movs	r1, #14
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e017      	b.n	800315a <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 800312a:	240e      	movs	r4, #14
 800312c:	193b      	adds	r3, r7, r4
 800312e:	7818      	ldrb	r0, [r3, #0]
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	1dbb      	adds	r3, r7, #6
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	193b      	adds	r3, r7, r4
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	0019      	movs	r1, r3
 800314c:	f001 f878 	bl	8004240 <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003150:	193b      	adds	r3, r7, r4
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	193b      	adds	r3, r7, r4
 8003156:	3201      	adds	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	230e      	movs	r3, #14
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <ReadHoldingRegistersFunctionRev+0xdc>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d3df      	bcc.n	800312a <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <ReadHoldingRegistersFunctionRev+0xe0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0018      	movs	r0, r3
 8003170:	f001 f884 	bl	800427c <ModbusSlaveTransaction>
 8003174:	e002      	b.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003176:	2003      	movs	r0, #3
 8003178:	f001 f9a8 	bl	80044cc <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b005      	add	sp, #20
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	20000376 	.word	0x20000376
 8003190:	20000378 	.word	0x20000378
 8003194:	200003c4 	.word	0x200003c4

08003198 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80031a4:	4b78      	ldr	r3, [pc, #480]	@ (8003388 <ModbusMap+0x1f0>)
 80031a6:	78da      	ldrb	r2, [r3, #3]
 80031a8:	4b78      	ldr	r3, [pc, #480]	@ (800338c <ModbusMap+0x1f4>)
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b76      	ldr	r3, [pc, #472]	@ (800338c <ModbusMap+0x1f4>)
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	4053      	eors	r3, r2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80031c2:	4b73      	ldr	r3, [pc, #460]	@ (8003390 <ModbusMap+0x1f8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e016      	b.n	80031f8 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 80031ca:	4b70      	ldr	r3, [pc, #448]	@ (800338c <ModbusMap+0x1f4>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 80031d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003390 <ModbusMap+0x1f8>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	e00e      	b.n	80031f8 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 80031da:	4b6c      	ldr	r3, [pc, #432]	@ (800338c <ModbusMap+0x1f4>)
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 80031e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003390 <ModbusMap+0x1f8>)
 80031e4:	2202      	movs	r2, #2
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	e006      	b.n	80031f8 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 80031ea:	4b67      	ldr	r3, [pc, #412]	@ (8003388 <ModbusMap+0x1f0>)
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 80031f2:	4b67      	ldr	r3, [pc, #412]	@ (8003390 <ModbusMap+0x1f8>)
 80031f4:	2206      	movs	r2, #6
 80031f6:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <ModbusMap+0x1fc>)
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	001a      	movs	r2, r3
 80031fe:	4b64      	ldr	r3, [pc, #400]	@ (8003390 <ModbusMap+0x1f8>)
 8003200:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 8003202:	4b65      	ldr	r3, [pc, #404]	@ (8003398 <ModbusMap+0x200>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	001a      	movs	r2, r3
 8003208:	4b61      	ldr	r3, [pc, #388]	@ (8003390 <ModbusMap+0x1f8>)
 800320a:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 800320c:	4b61      	ldr	r3, [pc, #388]	@ (8003394 <ModbusMap+0x1fc>)
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	001a      	movs	r2, r3
 8003212:	4b5f      	ldr	r3, [pc, #380]	@ (8003390 <ModbusMap+0x1f8>)
 8003214:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <ModbusMap+0x1fc>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001a      	movs	r2, r3
 800321c:	4b5c      	ldr	r3, [pc, #368]	@ (8003390 <ModbusMap+0x1f8>)
 800321e:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <ModbusMap+0x1f4>)
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	001a      	movs	r2, r3
 8003226:	4b5a      	ldr	r3, [pc, #360]	@ (8003390 <ModbusMap+0x1f8>)
 8003228:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 800322a:	4b59      	ldr	r3, [pc, #356]	@ (8003390 <ModbusMap+0x1f8>)
 800322c:	2200      	movs	r2, #0
 800322e:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003230:	4b57      	ldr	r3, [pc, #348]	@ (8003390 <ModbusMap+0x1f8>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003238:	4b55      	ldr	r3, [pc, #340]	@ (8003390 <ModbusMap+0x1f8>)
 800323a:	2201      	movs	r2, #1
 800323c:	81da      	strh	r2, [r3, #14]
 800323e:	e002      	b.n	8003246 <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003240:	4b53      	ldr	r3, [pc, #332]	@ (8003390 <ModbusMap+0x1f8>)
 8003242:	2200      	movs	r2, #0
 8003244:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 8003246:	4b51      	ldr	r3, [pc, #324]	@ (800338c <ModbusMap+0x1f4>)
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	001a      	movs	r2, r3
 800324c:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <ModbusMap+0x1f8>)
 800324e:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003250:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <ModbusMap+0x1f4>)
 8003252:	789b      	ldrb	r3, [r3, #2]
 8003254:	001a      	movs	r2, r3
 8003256:	4b4e      	ldr	r3, [pc, #312]	@ (8003390 <ModbusMap+0x1f8>)
 8003258:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 800325a:	4b4d      	ldr	r3, [pc, #308]	@ (8003390 <ModbusMap+0x1f8>)
 800325c:	2200      	movs	r2, #0
 800325e:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003260:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <ModbusMap+0x1f8>)
 8003262:	2200      	movs	r2, #0
 8003264:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 8003266:	4b48      	ldr	r3, [pc, #288]	@ (8003388 <ModbusMap+0x1f0>)
 8003268:	78db      	ldrb	r3, [r3, #3]
 800326a:	001a      	movs	r2, r3
 800326c:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <ModbusMap+0x1f8>)
 800326e:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 8003270:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <ModbusMap+0x1f8>)
 8003272:	2200      	movs	r2, #0
 8003274:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 8003276:	4b49      	ldr	r3, [pc, #292]	@ (800339c <ModbusMap+0x204>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	4a48      	ldr	r2, [pc, #288]	@ (80033a0 <ModbusMap+0x208>)
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <ModbusMap+0x20c>)
 8003288:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <ModbusMap+0x210>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	4a46      	ldr	r2, [pc, #280]	@ (80033ac <ModbusMap+0x214>)
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	189b      	adds	r3, r3, r2
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b42      	ldr	r3, [pc, #264]	@ (80033a4 <ModbusMap+0x20c>)
 800329c:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 800329e:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <ModbusMap+0x218>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	1c1a      	adds	r2, r3, #0
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	18db      	adds	r3, r3, r3
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <ModbusMap+0x20c>)
 80032ae:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80032b0:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <ModbusMap+0x20c>)
 80032b2:	22dc      	movs	r2, #220	@ 0xdc
 80032b4:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80032b6:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <ModbusMap+0x21c>)
 80032b8:	79db      	ldrb	r3, [r3, #7]
 80032ba:	001a      	movs	r2, r3
 80032bc:	4b3e      	ldr	r3, [pc, #248]	@ (80033b8 <ModbusMap+0x220>)
 80032be:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80032c0:	4b3c      	ldr	r3, [pc, #240]	@ (80033b4 <ModbusMap+0x21c>)
 80032c2:	799b      	ldrb	r3, [r3, #6]
 80032c4:	001a      	movs	r2, r3
 80032c6:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <ModbusMap+0x220>)
 80032c8:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 80032ca:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <ModbusMap+0x21c>)
 80032cc:	791b      	ldrb	r3, [r3, #4]
 80032ce:	001a      	movs	r2, r3
 80032d0:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <ModbusMap+0x220>)
 80032d2:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <ModbusMap+0x21c>)
 80032d6:	789a      	ldrb	r2, [r3, #2]
 80032d8:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <ModbusMap+0x21c>)
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	001a      	movs	r2, r3
 80032e2:	4b35      	ldr	r3, [pc, #212]	@ (80033b8 <ModbusMap+0x220>)
 80032e4:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 80032e6:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <ModbusMap+0x220>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <ModbusMap+0x21c>)
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <ModbusMap+0x21c>)
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	001a      	movs	r2, r3
 80032fa:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <ModbusMap+0x220>)
 80032fc:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <ModbusMap+0x224>)
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	001a      	movs	r2, r3
 8003304:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <ModbusMap+0x220>)
 8003306:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003308:	4b2c      	ldr	r3, [pc, #176]	@ (80033bc <ModbusMap+0x224>)
 800330a:	799b      	ldrb	r3, [r3, #6]
 800330c:	001a      	movs	r2, r3
 800330e:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <ModbusMap+0x220>)
 8003310:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 8003312:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <ModbusMap+0x21c>)
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <ModbusMap+0x21c>)
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	4313      	orrs	r3, r2
 800331c:	b2db      	uxtb	r3, r3
 800331e:	001a      	movs	r2, r3
 8003320:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <ModbusMap+0x220>)
 8003322:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <ModbusMap+0x228>)
 8003326:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <ModbusMap+0x22c>)
 8003328:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 800332a:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <ModbusMap+0x228>)
 800332c:	4a26      	ldr	r2, [pc, #152]	@ (80033c8 <ModbusMap+0x230>)
 800332e:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <ModbusMap+0x228>)
 8003332:	22ff      	movs	r2, #255	@ 0xff
 8003334:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 8003336:	f7ff fdc7 	bl	8002ec8 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = findLastValue((uint32_t) &eePlantilla[eeversion1])*256 + findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800333a:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <ModbusMap+0x234>)
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff fc6d 	bl	8002c1c <findLastValue>
 8003342:	0003      	movs	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b29c      	uxth	r4, r3
 800334a:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <ModbusMap+0x238>)
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fc65 	bl	8002c1c <findLastValue>
 8003352:	0003      	movs	r3, r0
 8003354:	b29b      	uxth	r3, r3
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <ModbusMap+0x23c>)
 800335c:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800335e:	f001 f969 	bl	8004634 <ModbusSlavePool>
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <ModbusMap+0x1dc>
 8003370:	f000 fe75 	bl	800405e <ModbusMap+0xec6>
	    asm ("nop");
 8003374:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8003376:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <ModbusMap+0x240>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d02e      	beq.n	80033dc <ModbusMap+0x244>
 800337e:	2b06      	cmp	r3, #6
 8003380:	d100      	bne.n	8003384 <ModbusMap+0x1ec>
 8003382:	e195      	b.n	80036b0 <ModbusMap+0x518>
 8003384:	f000 fe2e 	bl	8003fe4 <ModbusMap+0xe4c>
 8003388:	20000b88 	.word	0x20000b88
 800338c:	20000c4c 	.word	0x20000c4c
 8003390:	20000050 	.word	0x20000050
 8003394:	20000bb4 	.word	0x20000bb4
 8003398:	20000bf0 	.word	0x20000bf0
 800339c:	20000bc0 	.word	0x20000bc0
 80033a0:	20000bc1 	.word	0x20000bc1
 80033a4:	2000006c 	.word	0x2000006c
 80033a8:	20000bc2 	.word	0x20000bc2
 80033ac:	20000bc3 	.word	0x20000bc3
 80033b0:	20000bde 	.word	0x20000bde
 80033b4:	20000b98 	.word	0x20000b98
 80033b8:	20000074 	.word	0x20000074
 80033bc:	20000b90 	.word	0x20000b90
 80033c0:	20000088 	.word	0x20000088
 80033c4:	ffffb4a2 	.word	0xffffb4a2
 80033c8:	ffffeb4f 	.word	0xffffeb4f
 80033cc:	0803f07b 	.word	0x0803f07b
 80033d0:	0803f07c 	.word	0x0803f07c
 80033d4:	20000090 	.word	0x20000090
 80033d8:	200003c4 	.word	0x200003c4
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 80033dc:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 80033de:	4bd6      	ldr	r3, [pc, #856]	@ (8003738 <ModbusMap+0x5a0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(findLastValue((uint32_t) &eePlantilla[eeescala]) == 32)
 80033e4:	4bd5      	ldr	r3, [pc, #852]	@ (800373c <ModbusMap+0x5a4>)
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff fc18 	bl	8002c1c <findLastValue>
 80033ec:	0003      	movs	r3, r0
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d102      	bne.n	80033f8 <ModbusMap+0x260>
					PNU_0x3002 = 1;
 80033f2:	4bd1      	ldr	r3, [pc, #836]	@ (8003738 <ModbusMap+0x5a0>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 80033f8:	4bd1      	ldr	r3, [pc, #836]	@ (8003740 <ModbusMap+0x5a8>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fc0e 	bl	8002c1c <findLastValue>
 8003400:	0003      	movs	r3, r0
 8003402:	b29b      	uxth	r3, r3
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b29c      	uxth	r4, r3
 8003408:	4bce      	ldr	r3, [pc, #824]	@ (8003744 <ModbusMap+0x5ac>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fc06 	bl	8002c1c <findLastValue>
 8003410:	0003      	movs	r3, r0
 8003412:	b29b      	uxth	r3, r3
 8003414:	18e3      	adds	r3, r4, r3
 8003416:	b29a      	uxth	r2, r3
 8003418:	4bcb      	ldr	r3, [pc, #812]	@ (8003748 <ModbusMap+0x5b0>)
 800341a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = findLastValue((uint32_t) &eePlantilla[eedifdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eedifdiur_L]);
 800341c:	4bcb      	ldr	r3, [pc, #812]	@ (800374c <ModbusMap+0x5b4>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fbfc 	bl	8002c1c <findLastValue>
 8003424:	0003      	movs	r3, r0
 8003426:	b29b      	uxth	r3, r3
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	b29c      	uxth	r4, r3
 800342c:	4bc8      	ldr	r3, [pc, #800]	@ (8003750 <ModbusMap+0x5b8>)
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff fbf4 	bl	8002c1c <findLastValue>
 8003434:	0003      	movs	r3, r0
 8003436:	b29b      	uxth	r3, r3
 8003438:	18e3      	adds	r3, r4, r3
 800343a:	b29a      	uxth	r2, r3
 800343c:	4bc5      	ldr	r3, [pc, #788]	@ (8003754 <ModbusMap+0x5bc>)
 800343e:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = (uint16_t) findLastValue((uint32_t) &eePlantilla[eeAddModBus]);
 8003440:	4bc5      	ldr	r3, [pc, #788]	@ (8003758 <ModbusMap+0x5c0>)
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff fbea 	bl	8002c1c <findLastValue>
 8003448:	0003      	movs	r3, r0
 800344a:	b29a      	uxth	r2, r3
 800344c:	4bc3      	ldr	r3, [pc, #780]	@ (800375c <ModbusMap+0x5c4>)
 800344e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = (uint16_t) findLastValue((uint32_t) &eePlantilla[eetimepa]);
 8003450:	4bc3      	ldr	r3, [pc, #780]	@ (8003760 <ModbusMap+0x5c8>)
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fbe2 	bl	8002c1c <findLastValue>
 8003458:	0003      	movs	r3, r0
 800345a:	b29a      	uxth	r2, r3
 800345c:	4bc1      	ldr	r3, [pc, #772]	@ (8003764 <ModbusMap+0x5cc>)
 800345e:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 8003460:	4ac1      	ldr	r2, [pc, #772]	@ (8003768 <ModbusMap+0x5d0>)
 8003462:	230e      	movs	r3, #14
 8003464:	33ff      	adds	r3, #255	@ 0xff
 8003466:	0019      	movs	r1, r3
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fe21 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003472:	1e03      	subs	r3, r0, #0
 8003474:	d001      	beq.n	800347a <ModbusMap+0x2e2>
 8003476:	f000 fdb9 	bl	8003fec <ModbusMap+0xe54>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 800347a:	4abc      	ldr	r2, [pc, #752]	@ (800376c <ModbusMap+0x5d4>)
 800347c:	49bc      	ldr	r1, [pc, #752]	@ (8003770 <ModbusMap+0x5d8>)
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff fe16 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <ModbusMap+0x2f8>
 800348c:	f000 fdb0 	bl	8003ff0 <ModbusMap+0xe58>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 8003490:	4ab8      	ldr	r2, [pc, #736]	@ (8003774 <ModbusMap+0x5dc>)
 8003492:	2382      	movs	r3, #130	@ 0x82
 8003494:	0099      	lsls	r1, r3, #2
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff fe0a 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <ModbusMap+0x310>
 80034a4:	f000 fda6 	bl	8003ff4 <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80034a8:	4ab3      	ldr	r2, [pc, #716]	@ (8003778 <ModbusMap+0x5e0>)
 80034aa:	49b4      	ldr	r1, [pc, #720]	@ (800377c <ModbusMap+0x5e4>)
 80034ac:	23c0      	movs	r3, #192	@ 0xc0
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fdff 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <ModbusMap+0x326>
 80034ba:	f000 fd9d 	bl	8003ff8 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80034be:	4ab0      	ldr	r2, [pc, #704]	@ (8003780 <ModbusMap+0x5e8>)
 80034c0:	23c4      	movs	r3, #196	@ 0xc4
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	23c4      	movs	r3, #196	@ 0xc4
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fdf3 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <ModbusMap+0x33e>
 80034d2:	f000 fd93 	bl	8003ffc <ModbusMap+0xe64>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80034d6:	4bab      	ldr	r3, [pc, #684]	@ (8003784 <ModbusMap+0x5ec>)
 80034d8:	001a      	movs	r2, r3
 80034da:	2110      	movs	r1, #16
 80034dc:	2010      	movs	r0, #16
 80034de:	f7ff fde9 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <ModbusMap+0x352>
 80034e6:	f000 fd8b 	bl	8004000 <ModbusMap+0xe68>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80034ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003788 <ModbusMap+0x5f0>)
 80034ec:	23c0      	movs	r3, #192	@ 0xc0
 80034ee:	0199      	lsls	r1, r3, #6
 80034f0:	23c0      	movs	r3, #192	@ 0xc0
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff fddd 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <ModbusMap+0x36a>
 80034fe:	f000 fd81 	bl	8004004 <ModbusMap+0xe6c>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 8003502:	4b8d      	ldr	r3, [pc, #564]	@ (8003738 <ModbusMap+0x5a0>)
 8003504:	49a1      	ldr	r1, [pc, #644]	@ (800378c <ModbusMap+0x5f4>)
 8003506:	48a1      	ldr	r0, [pc, #644]	@ (800378c <ModbusMap+0x5f4>)
 8003508:	001a      	movs	r2, r3
 800350a:	f7ff fdd3 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <ModbusMap+0x37e>
 8003512:	f000 fd79 	bl	8004008 <ModbusMap+0xe70>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003516:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <ModbusMap+0x5b0>)
 8003518:	499d      	ldr	r1, [pc, #628]	@ (8003790 <ModbusMap+0x5f8>)
 800351a:	489d      	ldr	r0, [pc, #628]	@ (8003790 <ModbusMap+0x5f8>)
 800351c:	001a      	movs	r2, r3
 800351e:	f7ff fdc9 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <ModbusMap+0x392>
 8003526:	f000 fd71 	bl	800400c <ModbusMap+0xe74>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 800352a:	4b8a      	ldr	r3, [pc, #552]	@ (8003754 <ModbusMap+0x5bc>)
 800352c:	4999      	ldr	r1, [pc, #612]	@ (8003794 <ModbusMap+0x5fc>)
 800352e:	4899      	ldr	r0, [pc, #612]	@ (8003794 <ModbusMap+0x5fc>)
 8003530:	001a      	movs	r2, r3
 8003532:	f7ff fdbf 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <ModbusMap+0x3a6>
 800353a:	f000 fd69 	bl	8004010 <ModbusMap+0xe78>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800353e:	4b96      	ldr	r3, [pc, #600]	@ (8003798 <ModbusMap+0x600>)
 8003540:	4996      	ldr	r1, [pc, #600]	@ (800379c <ModbusMap+0x604>)
 8003542:	4896      	ldr	r0, [pc, #600]	@ (800379c <ModbusMap+0x604>)
 8003544:	001a      	movs	r2, r3
 8003546:	f7ff fdb5 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <ModbusMap+0x3ba>
 800354e:	f000 fd61 	bl	8004014 <ModbusMap+0xe7c>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 8003552:	4b93      	ldr	r3, [pc, #588]	@ (80037a0 <ModbusMap+0x608>)
 8003554:	4993      	ldr	r1, [pc, #588]	@ (80037a4 <ModbusMap+0x60c>)
 8003556:	4893      	ldr	r0, [pc, #588]	@ (80037a4 <ModbusMap+0x60c>)
 8003558:	001a      	movs	r2, r3
 800355a:	f7ff fdab 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <ModbusMap+0x3ce>
 8003562:	f000 fd59 	bl	8004018 <ModbusMap+0xe80>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003566:	4b90      	ldr	r3, [pc, #576]	@ (80037a8 <ModbusMap+0x610>)
 8003568:	4990      	ldr	r1, [pc, #576]	@ (80037ac <ModbusMap+0x614>)
 800356a:	4890      	ldr	r0, [pc, #576]	@ (80037ac <ModbusMap+0x614>)
 800356c:	001a      	movs	r2, r3
 800356e:	f7ff fda1 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <ModbusMap+0x3e2>
 8003576:	f000 fd51 	bl	800401c <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 800357a:	4b8d      	ldr	r3, [pc, #564]	@ (80037b0 <ModbusMap+0x618>)
 800357c:	498d      	ldr	r1, [pc, #564]	@ (80037b4 <ModbusMap+0x61c>)
 800357e:	488d      	ldr	r0, [pc, #564]	@ (80037b4 <ModbusMap+0x61c>)
 8003580:	001a      	movs	r2, r3
 8003582:	f7ff fd97 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d001      	beq.n	800358e <ModbusMap+0x3f6>
 800358a:	f000 fd49 	bl	8004020 <ModbusMap+0xe88>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800358e:	4b8a      	ldr	r3, [pc, #552]	@ (80037b8 <ModbusMap+0x620>)
 8003590:	498a      	ldr	r1, [pc, #552]	@ (80037bc <ModbusMap+0x624>)
 8003592:	488a      	ldr	r0, [pc, #552]	@ (80037bc <ModbusMap+0x624>)
 8003594:	001a      	movs	r2, r3
 8003596:	f7ff fd8d 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d001      	beq.n	80035a2 <ModbusMap+0x40a>
 800359e:	f000 fd41 	bl	8004024 <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 80035a2:	4b87      	ldr	r3, [pc, #540]	@ (80037c0 <ModbusMap+0x628>)
 80035a4:	4987      	ldr	r1, [pc, #540]	@ (80037c4 <ModbusMap+0x62c>)
 80035a6:	4887      	ldr	r0, [pc, #540]	@ (80037c4 <ModbusMap+0x62c>)
 80035a8:	001a      	movs	r2, r3
 80035aa:	f7ff fd83 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <ModbusMap+0x41e>
 80035b2:	f000 fd39 	bl	8004028 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80035b6:	4b84      	ldr	r3, [pc, #528]	@ (80037c8 <ModbusMap+0x630>)
 80035b8:	4984      	ldr	r1, [pc, #528]	@ (80037cc <ModbusMap+0x634>)
 80035ba:	4884      	ldr	r0, [pc, #528]	@ (80037cc <ModbusMap+0x634>)
 80035bc:	001a      	movs	r2, r3
 80035be:	f7ff fd79 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <ModbusMap+0x432>
 80035c6:	f000 fd31 	bl	800402c <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80035ca:	4b81      	ldr	r3, [pc, #516]	@ (80037d0 <ModbusMap+0x638>)
 80035cc:	4981      	ldr	r1, [pc, #516]	@ (80037d4 <ModbusMap+0x63c>)
 80035ce:	4881      	ldr	r0, [pc, #516]	@ (80037d4 <ModbusMap+0x63c>)
 80035d0:	001a      	movs	r2, r3
 80035d2:	f7ff fd6f 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <ModbusMap+0x446>
 80035da:	f000 fd29 	bl	8004030 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80035de:	4b7e      	ldr	r3, [pc, #504]	@ (80037d8 <ModbusMap+0x640>)
 80035e0:	497e      	ldr	r1, [pc, #504]	@ (80037dc <ModbusMap+0x644>)
 80035e2:	487e      	ldr	r0, [pc, #504]	@ (80037dc <ModbusMap+0x644>)
 80035e4:	001a      	movs	r2, r3
 80035e6:	f7ff fd65 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <ModbusMap+0x45a>
 80035ee:	f000 fd21 	bl	8004034 <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80035f2:	4b7b      	ldr	r3, [pc, #492]	@ (80037e0 <ModbusMap+0x648>)
 80035f4:	497b      	ldr	r1, [pc, #492]	@ (80037e4 <ModbusMap+0x64c>)
 80035f6:	487b      	ldr	r0, [pc, #492]	@ (80037e4 <ModbusMap+0x64c>)
 80035f8:	001a      	movs	r2, r3
 80035fa:	f7ff fd5b 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d001      	beq.n	8003606 <ModbusMap+0x46e>
 8003602:	f000 fd19 	bl	8004038 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003606:	4b78      	ldr	r3, [pc, #480]	@ (80037e8 <ModbusMap+0x650>)
 8003608:	4978      	ldr	r1, [pc, #480]	@ (80037ec <ModbusMap+0x654>)
 800360a:	4878      	ldr	r0, [pc, #480]	@ (80037ec <ModbusMap+0x654>)
 800360c:	001a      	movs	r2, r3
 800360e:	f7ff fd51 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <ModbusMap+0x482>
 8003616:	f000 fd11 	bl	800403c <ModbusMap+0xea4>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 800361a:	4b50      	ldr	r3, [pc, #320]	@ (800375c <ModbusMap+0x5c4>)
 800361c:	4974      	ldr	r1, [pc, #464]	@ (80037f0 <ModbusMap+0x658>)
 800361e:	4874      	ldr	r0, [pc, #464]	@ (80037f0 <ModbusMap+0x658>)
 8003620:	001a      	movs	r2, r3
 8003622:	f7ff fd47 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <ModbusMap+0x496>
 800362a:	f000 fd09 	bl	8004040 <ModbusMap+0xea8>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 800362e:	4b4d      	ldr	r3, [pc, #308]	@ (8003764 <ModbusMap+0x5cc>)
 8003630:	4970      	ldr	r1, [pc, #448]	@ (80037f4 <ModbusMap+0x65c>)
 8003632:	4870      	ldr	r0, [pc, #448]	@ (80037f4 <ModbusMap+0x65c>)
 8003634:	001a      	movs	r2, r3
 8003636:	f7ff fd3d 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d001      	beq.n	8003642 <ModbusMap+0x4aa>
 800363e:	f000 fd01 	bl	8004044 <ModbusMap+0xeac>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003642:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <ModbusMap+0x660>)
 8003644:	496d      	ldr	r1, [pc, #436]	@ (80037fc <ModbusMap+0x664>)
 8003646:	486d      	ldr	r0, [pc, #436]	@ (80037fc <ModbusMap+0x664>)
 8003648:	001a      	movs	r2, r3
 800364a:	f7ff fd33 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800364e:	1e03      	subs	r3, r0, #0
 8003650:	d001      	beq.n	8003656 <ModbusMap+0x4be>
 8003652:	f000 fcf9 	bl	8004048 <ModbusMap+0xeb0>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003656:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <ModbusMap+0x668>)
 8003658:	496a      	ldr	r1, [pc, #424]	@ (8003804 <ModbusMap+0x66c>)
 800365a:	486a      	ldr	r0, [pc, #424]	@ (8003804 <ModbusMap+0x66c>)
 800365c:	001a      	movs	r2, r3
 800365e:	f7ff fd29 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d001      	beq.n	800366a <ModbusMap+0x4d2>
 8003666:	f000 fcf1 	bl	800404c <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 800366a:	4b67      	ldr	r3, [pc, #412]	@ (8003808 <ModbusMap+0x670>)
 800366c:	4967      	ldr	r1, [pc, #412]	@ (800380c <ModbusMap+0x674>)
 800366e:	4867      	ldr	r0, [pc, #412]	@ (800380c <ModbusMap+0x674>)
 8003670:	001a      	movs	r2, r3
 8003672:	f7ff fd1f 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d001      	beq.n	800367e <ModbusMap+0x4e6>
 800367a:	f000 fce9 	bl	8004050 <ModbusMap+0xeb8>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 800367e:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <ModbusMap+0x678>)
 8003680:	4964      	ldr	r1, [pc, #400]	@ (8003814 <ModbusMap+0x67c>)
 8003682:	4864      	ldr	r0, [pc, #400]	@ (8003814 <ModbusMap+0x67c>)
 8003684:	001a      	movs	r2, r3
 8003686:	f7ff fd15 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d001      	beq.n	8003692 <ModbusMap+0x4fa>
 800368e:	f000 fce1 	bl	8004054 <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003692:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <ModbusMap+0x680>)
 8003694:	4961      	ldr	r1, [pc, #388]	@ (800381c <ModbusMap+0x684>)
 8003696:	4861      	ldr	r0, [pc, #388]	@ (800381c <ModbusMap+0x684>)
 8003698:	001a      	movs	r2, r3
 800369a:	f7ff fd0b 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <ModbusMap+0x50e>
 80036a2:	f000 fcd9 	bl	8004058 <ModbusMap+0xec0>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 80036a6:	2002      	movs	r0, #2
 80036a8:	f000 ff10 	bl	80044cc <ModbusSlaveExceptionTransaction>
				}
				break;
 80036ac:	f000 fcd7 	bl	800405e <ModbusMap+0xec6>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 80036b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003820 <ModbusMap+0x688>)
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	23c0      	movs	r3, #192	@ 0xc0
 80036b6:	019b      	lsls	r3, r3, #6
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d310      	bcc.n	80036de <ModbusMap+0x546>
 80036bc:	4b58      	ldr	r3, [pc, #352]	@ (8003820 <ModbusMap+0x688>)
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	23c0      	movs	r3, #192	@ 0xc0
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d80a      	bhi.n	80036de <ModbusMap+0x546>
					PNU_0x3000 = lowByte(_u16WriteVal);
 80036c8:	4b56      	ldr	r3, [pc, #344]	@ (8003824 <ModbusMap+0x68c>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	001a      	movs	r2, r3
 80036d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <ModbusMap+0x5f0>)
 80036d2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80036d4:	4b54      	ldr	r3, [pc, #336]	@ (8003828 <ModbusMap+0x690>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fdcf 	bl	800427c <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 80036de:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <ModbusMap+0x688>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4a52      	ldr	r2, [pc, #328]	@ (800382c <ModbusMap+0x694>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d800      	bhi.n	80036ea <ModbusMap+0x552>
 80036e8:	e0c8      	b.n	800387c <ModbusMap+0x6e4>
 80036ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003820 <ModbusMap+0x688>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <ModbusMap+0x5f4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d900      	bls.n	80036f6 <ModbusMap+0x55e>
 80036f4:	e0c2      	b.n	800387c <ModbusMap+0x6e4>
					PNU_0x3002 = lowByte(_u16WriteVal);
 80036f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <ModbusMap+0x68c>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	001a      	movs	r2, r3
 80036fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <ModbusMap+0x5a0>)
 8003700:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <ModbusMap+0x5a0>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d000      	beq.n	800370c <ModbusMap+0x574>
 800370a:	e093      	b.n	8003834 <ModbusMap+0x69c>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t) &eePlantilla[eeescala]) == 32){
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <ModbusMap+0x5a4>)
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff fa84 	bl	8002c1c <findLastValue>
 8003714:	0003      	movs	r3, r0
 8003716:	2b20      	cmp	r3, #32
 8003718:	d101      	bne.n	800371e <ModbusMap+0x586>
							asm ("nop");
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	e08a      	b.n	8003834 <ModbusMap+0x69c>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 800371e:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <ModbusMap+0x698>)
 8003720:	2220      	movs	r2, #32
 8003722:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003724:	4b42      	ldr	r3, [pc, #264]	@ (8003830 <ModbusMap+0x698>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	001a      	movs	r2, r3
 800372a:	4b04      	ldr	r3, [pc, #16]	@ (800373c <ModbusMap+0x5a4>)
 800372c:	0019      	movs	r1, r3
 800372e:	0010      	movs	r0, r2
 8003730:	f003 fd22 	bl	8007178 <wreeprom>
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	e7fd      	b.n	8003734 <ModbusMap+0x59c>
 8003738:	20000b14 	.word	0x20000b14
 800373c:	0803f052 	.word	0x0803f052
 8003740:	0803f001 	.word	0x0803f001
 8003744:	0803f002 	.word	0x0803f002
 8003748:	20000094 	.word	0x20000094
 800374c:	0803f003 	.word	0x0803f003
 8003750:	0803f004 	.word	0x0803f004
 8003754:	20000096 	.word	0x20000096
 8003758:	0803f072 	.word	0x0803f072
 800375c:	200000aa 	.word	0x200000aa
 8003760:	0803f049 	.word	0x0803f049
 8003764:	200000ac 	.word	0x200000ac
 8003768:	20000050 	.word	0x20000050
 800376c:	2000006c 	.word	0x2000006c
 8003770:	00002003 	.word	0x00002003
 8003774:	20000074 	.word	0x20000074
 8003778:	20000088 	.word	0x20000088
 800377c:	00000302 	.word	0x00000302
 8003780:	20000090 	.word	0x20000090
 8003784:	20000b12 	.word	0x20000b12
 8003788:	20000092 	.word	0x20000092
 800378c:	00003002 	.word	0x00003002
 8003790:	00003004 	.word	0x00003004
 8003794:	00003006 	.word	0x00003006
 8003798:	20000098 	.word	0x20000098
 800379c:	00003008 	.word	0x00003008
 80037a0:	20000b16 	.word	0x20000b16
 80037a4:	0000300a 	.word	0x0000300a
 80037a8:	2000009a 	.word	0x2000009a
 80037ac:	0000300c 	.word	0x0000300c
 80037b0:	20000b18 	.word	0x20000b18
 80037b4:	0000300e 	.word	0x0000300e
 80037b8:	2000009c 	.word	0x2000009c
 80037bc:	00003010 	.word	0x00003010
 80037c0:	2000009e 	.word	0x2000009e
 80037c4:	00003012 	.word	0x00003012
 80037c8:	200000a0 	.word	0x200000a0
 80037cc:	00003014 	.word	0x00003014
 80037d0:	200000a2 	.word	0x200000a2
 80037d4:	00003016 	.word	0x00003016
 80037d8:	200000a4 	.word	0x200000a4
 80037dc:	00003018 	.word	0x00003018
 80037e0:	200000a6 	.word	0x200000a6
 80037e4:	0000301a 	.word	0x0000301a
 80037e8:	200000a8 	.word	0x200000a8
 80037ec:	0000301c 	.word	0x0000301c
 80037f0:	0000301e 	.word	0x0000301e
 80037f4:	00003104 	.word	0x00003104
 80037f8:	200000ae 	.word	0x200000ae
 80037fc:	00003106 	.word	0x00003106
 8003800:	200000b0 	.word	0x200000b0
 8003804:	00003108 	.word	0x00003108
 8003808:	200000b2 	.word	0x200000b2
 800380c:	0000310a 	.word	0x0000310a
 8003810:	200000b4 	.word	0x200000b4
 8003814:	0000310c 	.word	0x0000310c
 8003818:	200000b6 	.word	0x200000b6
 800381c:	0000310e 	.word	0x0000310e
 8003820:	2000037a 	.word	0x2000037a
 8003824:	2000037c 	.word	0x2000037c
 8003828:	200003c4 	.word	0x200003c4
 800382c:	00003001 	.word	0x00003001
 8003830:	20000b64 	.word	0x20000b64
						}
					}
					if (PNU_0x3002 == 0){
 8003834:	4bc1      	ldr	r3, [pc, #772]	@ (8003b3c <ModbusMap+0x9a4>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11a      	bne.n	8003872 <ModbusMap+0x6da>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t) &eePlantilla[eeescala]== 32)){
 800383c:	2301      	movs	r3, #1
 800383e:	1c1a      	adds	r2, r3, #0
 8003840:	4bbf      	ldr	r3, [pc, #764]	@ (8003b40 <ModbusMap+0x9a8>)
 8003842:	2b20      	cmp	r3, #32
 8003844:	d001      	beq.n	800384a <ModbusMap+0x6b2>
 8003846:	2300      	movs	r3, #0
 8003848:	1c1a      	adds	r2, r3, #0
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff f9e5 	bl	8002c1c <findLastValue>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d00c      	beq.n	8003870 <ModbusMap+0x6d8>
							waux = 0;//mov			waux,#0;	/ Carga
 8003856:	4bbb      	ldr	r3, [pc, #748]	@ (8003b44 <ModbusMap+0x9ac>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 800385c:	4bb9      	ldr	r3, [pc, #740]	@ (8003b44 <ModbusMap+0x9ac>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	001a      	movs	r2, r3
 8003862:	4bb7      	ldr	r3, [pc, #732]	@ (8003b40 <ModbusMap+0x9a8>)
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f003 fc86 	bl	8007178 <wreeprom>
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	e7fd      	b.n	800386c <ModbusMap+0x6d4>
						}
						else{
							asm ("nop");
 8003870:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003872:	4bb5      	ldr	r3, [pc, #724]	@ (8003b48 <ModbusMap+0x9b0>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fd00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 800387c:	4bb3      	ldr	r3, [pc, #716]	@ (8003b4c <ModbusMap+0x9b4>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	4ab3      	ldr	r2, [pc, #716]	@ (8003b50 <ModbusMap+0x9b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d926      	bls.n	80038d4 <ModbusMap+0x73c>
 8003886:	4bb1      	ldr	r3, [pc, #708]	@ (8003b4c <ModbusMap+0x9b4>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	4ab2      	ldr	r2, [pc, #712]	@ (8003b54 <ModbusMap+0x9bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d821      	bhi.n	80038d4 <ModbusMap+0x73c>
					PNU_0x3004 = _u16WriteVal;
 8003890:	4bb1      	ldr	r3, [pc, #708]	@ (8003b58 <ModbusMap+0x9c0>)
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4bb1      	ldr	r3, [pc, #708]	@ (8003b5c <ModbusMap+0x9c4>)
 8003896:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003898:	4bb0      	ldr	r3, [pc, #704]	@ (8003b5c <ModbusMap+0x9c4>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4ba8      	ldr	r3, [pc, #672]	@ (8003b44 <ModbusMap+0x9ac>)
 80038a4:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 80038a6:	4bad      	ldr	r3, [pc, #692]	@ (8003b5c <ModbusMap+0x9c4>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4bac      	ldr	r3, [pc, #688]	@ (8003b60 <ModbusMap+0x9c8>)
 80038ae:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 80038b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003b44 <ModbusMap+0x9ac>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	4bab      	ldr	r3, [pc, #684]	@ (8003b64 <ModbusMap+0x9cc>)
 80038b8:	0019      	movs	r1, r3
 80038ba:	0010      	movs	r0, r2
 80038bc:	f003 fc5c 	bl	8007178 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 80038c0:	4ba7      	ldr	r3, [pc, #668]	@ (8003b60 <ModbusMap+0x9c8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	001a      	movs	r2, r3
 80038c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003b68 <ModbusMap+0x9d0>)
 80038c8:	0019      	movs	r1, r3
 80038ca:	0010      	movs	r0, r2
 80038cc:	f003 fc54 	bl	8007178 <wreeprom>

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	e7fd      	b.n	80038d0 <ModbusMap+0x738>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 80038d4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b4c <ModbusMap+0x9b4>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4aa4      	ldr	r2, [pc, #656]	@ (8003b6c <ModbusMap+0x9d4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d926      	bls.n	800392c <ModbusMap+0x794>
 80038de:	4b9b      	ldr	r3, [pc, #620]	@ (8003b4c <ModbusMap+0x9b4>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	4aa3      	ldr	r2, [pc, #652]	@ (8003b70 <ModbusMap+0x9d8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d821      	bhi.n	800392c <ModbusMap+0x794>
					PNU_0x3006 = _u16WriteVal;
 80038e8:	4b9b      	ldr	r3, [pc, #620]	@ (8003b58 <ModbusMap+0x9c0>)
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	4ba1      	ldr	r3, [pc, #644]	@ (8003b74 <ModbusMap+0x9dc>)
 80038ee:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 80038f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003b74 <ModbusMap+0x9dc>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b92      	ldr	r3, [pc, #584]	@ (8003b44 <ModbusMap+0x9ac>)
 80038fc:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 80038fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <ModbusMap+0x9dc>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b96      	ldr	r3, [pc, #600]	@ (8003b60 <ModbusMap+0x9c8>)
 8003906:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003908:	4b8e      	ldr	r3, [pc, #568]	@ (8003b44 <ModbusMap+0x9ac>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	4b9a      	ldr	r3, [pc, #616]	@ (8003b78 <ModbusMap+0x9e0>)
 8003910:	0019      	movs	r1, r3
 8003912:	0010      	movs	r0, r2
 8003914:	f003 fc30 	bl	8007178 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003918:	4b91      	ldr	r3, [pc, #580]	@ (8003b60 <ModbusMap+0x9c8>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	001a      	movs	r2, r3
 800391e:	4b97      	ldr	r3, [pc, #604]	@ (8003b7c <ModbusMap+0x9e4>)
 8003920:	0019      	movs	r1, r3
 8003922:	0010      	movs	r0, r2
 8003924:	f003 fc28 	bl	8007178 <wreeprom>
			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	e7fd      	b.n	8003928 <ModbusMap+0x790>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 800392c:	4b87      	ldr	r3, [pc, #540]	@ (8003b4c <ModbusMap+0x9b4>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	4a93      	ldr	r2, [pc, #588]	@ (8003b80 <ModbusMap+0x9e8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d90f      	bls.n	8003956 <ModbusMap+0x7be>
 8003936:	4b85      	ldr	r3, [pc, #532]	@ (8003b4c <ModbusMap+0x9b4>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	4a92      	ldr	r2, [pc, #584]	@ (8003b84 <ModbusMap+0x9ec>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d80a      	bhi.n	8003956 <ModbusMap+0x7be>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003940:	4b85      	ldr	r3, [pc, #532]	@ (8003b58 <ModbusMap+0x9c0>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	001a      	movs	r2, r3
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <ModbusMap+0x9f0>)
 800394a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800394c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <ModbusMap+0x9b0>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fc93 	bl	800427c <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003956:	4b7d      	ldr	r3, [pc, #500]	@ (8003b4c <ModbusMap+0x9b4>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	4a8c      	ldr	r2, [pc, #560]	@ (8003b8c <ModbusMap+0x9f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d90f      	bls.n	8003980 <ModbusMap+0x7e8>
 8003960:	4b7a      	ldr	r3, [pc, #488]	@ (8003b4c <ModbusMap+0x9b4>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	4a8a      	ldr	r2, [pc, #552]	@ (8003b90 <ModbusMap+0x9f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d80a      	bhi.n	8003980 <ModbusMap+0x7e8>
					PNU_0x300A = lowByte(_u16WriteVal);
 800396a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b58 <ModbusMap+0x9c0>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	001a      	movs	r2, r3
 8003972:	4b88      	ldr	r3, [pc, #544]	@ (8003b94 <ModbusMap+0x9fc>)
 8003974:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003976:	4b74      	ldr	r3, [pc, #464]	@ (8003b48 <ModbusMap+0x9b0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fc7e 	bl	800427c <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003980:	4b72      	ldr	r3, [pc, #456]	@ (8003b4c <ModbusMap+0x9b4>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	4a84      	ldr	r2, [pc, #528]	@ (8003b98 <ModbusMap+0xa00>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d90f      	bls.n	80039aa <ModbusMap+0x812>
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <ModbusMap+0x9b4>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <ModbusMap+0xa04>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d80a      	bhi.n	80039aa <ModbusMap+0x812>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003994:	4b70      	ldr	r3, [pc, #448]	@ (8003b58 <ModbusMap+0x9c0>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	001a      	movs	r2, r3
 800399c:	4b80      	ldr	r3, [pc, #512]	@ (8003ba0 <ModbusMap+0xa08>)
 800399e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039a0:	4b69      	ldr	r3, [pc, #420]	@ (8003b48 <ModbusMap+0x9b0>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fc69 	bl	800427c <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 80039aa:	4b68      	ldr	r3, [pc, #416]	@ (8003b4c <ModbusMap+0x9b4>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <ModbusMap+0xa0c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d90f      	bls.n	80039d4 <ModbusMap+0x83c>
 80039b4:	4b65      	ldr	r3, [pc, #404]	@ (8003b4c <ModbusMap+0x9b4>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba8 <ModbusMap+0xa10>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d80a      	bhi.n	80039d4 <ModbusMap+0x83c>
					PNU_0x300E = lowByte(_u16WriteVal);
 80039be:	4b66      	ldr	r3, [pc, #408]	@ (8003b58 <ModbusMap+0x9c0>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	001a      	movs	r2, r3
 80039c6:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <ModbusMap+0xa14>)
 80039c8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003b48 <ModbusMap+0x9b0>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fc54 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 80039d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <ModbusMap+0x9b4>)
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	4a75      	ldr	r2, [pc, #468]	@ (8003bb0 <ModbusMap+0xa18>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90f      	bls.n	80039fe <ModbusMap+0x866>
 80039de:	4b5b      	ldr	r3, [pc, #364]	@ (8003b4c <ModbusMap+0x9b4>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4a74      	ldr	r2, [pc, #464]	@ (8003bb4 <ModbusMap+0xa1c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d80a      	bhi.n	80039fe <ModbusMap+0x866>
					PNU_0x3010 = lowByte(_u16WriteVal);
 80039e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003b58 <ModbusMap+0x9c0>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	4b71      	ldr	r3, [pc, #452]	@ (8003bb8 <ModbusMap+0xa20>)
 80039f2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039f4:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <ModbusMap+0x9b0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fc3f 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 80039fe:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <ModbusMap+0xa24>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d90f      	bls.n	8003a28 <ModbusMap+0x890>
 8003a08:	4b50      	ldr	r3, [pc, #320]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc0 <ModbusMap+0xa28>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d80a      	bhi.n	8003a28 <ModbusMap+0x890>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003a12:	4b51      	ldr	r3, [pc, #324]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	001a      	movs	r2, r3
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc4 <ModbusMap+0xa2c>)
 8003a1c:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fc2a 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003a28:	4b48      	ldr	r3, [pc, #288]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	4a66      	ldr	r2, [pc, #408]	@ (8003bc8 <ModbusMap+0xa30>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d90f      	bls.n	8003a52 <ModbusMap+0x8ba>
 8003a32:	4b46      	ldr	r3, [pc, #280]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <ModbusMap+0xa34>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d80a      	bhi.n	8003a52 <ModbusMap+0x8ba>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003a3c:	4b46      	ldr	r3, [pc, #280]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	001a      	movs	r2, r3
 8003a44:	4b62      	ldr	r3, [pc, #392]	@ (8003bd0 <ModbusMap+0xa38>)
 8003a46:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a48:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 fc15 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003a52:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd4 <ModbusMap+0xa3c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d90f      	bls.n	8003a7c <ModbusMap+0x8e4>
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd8 <ModbusMap+0xa40>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d80a      	bhi.n	8003a7c <ModbusMap+0x8e4>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003a66:	4b3c      	ldr	r3, [pc, #240]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <ModbusMap+0xa44>)
 8003a70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a72:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fc00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003a7c:	4b33      	ldr	r3, [pc, #204]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <ModbusMap+0xa48>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d90f      	bls.n	8003aa6 <ModbusMap+0x90e>
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	4a56      	ldr	r2, [pc, #344]	@ (8003be4 <ModbusMap+0xa4c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d80a      	bhi.n	8003aa6 <ModbusMap+0x90e>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003a90:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	001a      	movs	r2, r3
 8003a98:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <ModbusMap+0xa50>)
 8003a9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 fbeb 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003aa6:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <ModbusMap+0x9b4>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	@ (8003bec <ModbusMap+0xa54>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d90f      	bls.n	8003ad0 <ModbusMap+0x938>
 8003ab0:	4b26      	ldr	r3, [pc, #152]	@ (8003b4c <ModbusMap+0x9b4>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf0 <ModbusMap+0xa58>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d80a      	bhi.n	8003ad0 <ModbusMap+0x938>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003aba:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <ModbusMap+0x9c0>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf4 <ModbusMap+0xa5c>)
 8003ac4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <ModbusMap+0x9b0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fbd6 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <ModbusMap+0x9b4>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	4a48      	ldr	r2, [pc, #288]	@ (8003bf8 <ModbusMap+0xa60>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d90f      	bls.n	8003afa <ModbusMap+0x962>
 8003ada:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <ModbusMap+0x9b4>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a47      	ldr	r2, [pc, #284]	@ (8003bfc <ModbusMap+0xa64>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d80a      	bhi.n	8003afa <ModbusMap+0x962>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <ModbusMap+0x9c0>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	001a      	movs	r2, r3
 8003aec:	4b44      	ldr	r3, [pc, #272]	@ (8003c00 <ModbusMap+0xa68>)
 8003aee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <ModbusMap+0x9b0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fbc1 	bl	800427c <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <ModbusMap+0x9b4>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	4a41      	ldr	r2, [pc, #260]	@ (8003c04 <ModbusMap+0xa6c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d800      	bhi.n	8003b06 <ModbusMap+0x96e>
 8003b04:	e086      	b.n	8003c14 <ModbusMap+0xa7c>
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <ModbusMap+0x9b4>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c08 <ModbusMap+0xa70>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d900      	bls.n	8003b12 <ModbusMap+0x97a>
 8003b10:	e080      	b.n	8003c14 <ModbusMap+0xa7c>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <ModbusMap+0x9c0>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	001a      	movs	r2, r3
 8003b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c0c <ModbusMap+0xa74>)
 8003b1c:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <ModbusMap+0xa74>)
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <ModbusMap+0x9ac>)
 8003b26:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <ModbusMap+0x9ac>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <ModbusMap+0xa78>)
 8003b30:	0019      	movs	r1, r3
 8003b32:	0010      	movs	r0, r2
 8003b34:	f003 fb20 	bl	8007178 <wreeprom>

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	e7fd      	b.n	8003b38 <ModbusMap+0x9a0>
 8003b3c:	20000b14 	.word	0x20000b14
 8003b40:	0803f052 	.word	0x0803f052
 8003b44:	20000b64 	.word	0x20000b64
 8003b48:	200003c4 	.word	0x200003c4
 8003b4c:	2000037a 	.word	0x2000037a
 8003b50:	00003003 	.word	0x00003003
 8003b54:	00003004 	.word	0x00003004
 8003b58:	2000037c 	.word	0x2000037c
 8003b5c:	20000094 	.word	0x20000094
 8003b60:	20000b65 	.word	0x20000b65
 8003b64:	0803f001 	.word	0x0803f001
 8003b68:	0803f002 	.word	0x0803f002
 8003b6c:	00003005 	.word	0x00003005
 8003b70:	00003006 	.word	0x00003006
 8003b74:	20000096 	.word	0x20000096
 8003b78:	0803f003 	.word	0x0803f003
 8003b7c:	0803f004 	.word	0x0803f004
 8003b80:	00003007 	.word	0x00003007
 8003b84:	00003008 	.word	0x00003008
 8003b88:	20000098 	.word	0x20000098
 8003b8c:	00003009 	.word	0x00003009
 8003b90:	0000300a 	.word	0x0000300a
 8003b94:	20000b16 	.word	0x20000b16
 8003b98:	0000300b 	.word	0x0000300b
 8003b9c:	0000300c 	.word	0x0000300c
 8003ba0:	2000009a 	.word	0x2000009a
 8003ba4:	0000300d 	.word	0x0000300d
 8003ba8:	0000300e 	.word	0x0000300e
 8003bac:	20000b18 	.word	0x20000b18
 8003bb0:	0000300f 	.word	0x0000300f
 8003bb4:	00003010 	.word	0x00003010
 8003bb8:	2000009c 	.word	0x2000009c
 8003bbc:	00003011 	.word	0x00003011
 8003bc0:	00003012 	.word	0x00003012
 8003bc4:	2000009e 	.word	0x2000009e
 8003bc8:	00003013 	.word	0x00003013
 8003bcc:	00003014 	.word	0x00003014
 8003bd0:	200000a0 	.word	0x200000a0
 8003bd4:	00003015 	.word	0x00003015
 8003bd8:	00003016 	.word	0x00003016
 8003bdc:	200000a2 	.word	0x200000a2
 8003be0:	00003017 	.word	0x00003017
 8003be4:	00003018 	.word	0x00003018
 8003be8:	200000a4 	.word	0x200000a4
 8003bec:	00003019 	.word	0x00003019
 8003bf0:	0000301a 	.word	0x0000301a
 8003bf4:	200000a6 	.word	0x200000a6
 8003bf8:	0000301b 	.word	0x0000301b
 8003bfc:	0000301c 	.word	0x0000301c
 8003c00:	200000a8 	.word	0x200000a8
 8003c04:	0000301d 	.word	0x0000301d
 8003c08:	0000301e 	.word	0x0000301e
 8003c0c:	200000aa 	.word	0x200000aa
 8003c10:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8003c14:	4ba7      	ldr	r3, [pc, #668]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	4aa7      	ldr	r2, [pc, #668]	@ (8003eb8 <ModbusMap+0xd20>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d919      	bls.n	8003c52 <ModbusMap+0xaba>
 8003c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	4aa6      	ldr	r2, [pc, #664]	@ (8003ebc <ModbusMap+0xd24>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d814      	bhi.n	8003c52 <ModbusMap+0xaba>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8003c28:	4ba5      	ldr	r3, [pc, #660]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	001a      	movs	r2, r3
 8003c30:	4ba4      	ldr	r3, [pc, #656]	@ (8003ec4 <ModbusMap+0xd2c>)
 8003c32:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8003c34:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec4 <ModbusMap+0xd2c>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec8 <ModbusMap+0xd30>)
 8003c3c:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 8003c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ec8 <ModbusMap+0xd30>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	001a      	movs	r2, r3
 8003c44:	4ba1      	ldr	r3, [pc, #644]	@ (8003ecc <ModbusMap+0xd34>)
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f003 fa95 	bl	8007178 <wreeprom>

			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	e7fd      	b.n	8003c4e <ModbusMap+0xab6>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8003c52:	4b98      	ldr	r3, [pc, #608]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	4a9e      	ldr	r2, [pc, #632]	@ (8003ed0 <ModbusMap+0xd38>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d90f      	bls.n	8003c7c <ModbusMap+0xae4>
 8003c5c:	4b95      	ldr	r3, [pc, #596]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	4a9c      	ldr	r2, [pc, #624]	@ (8003ed4 <ModbusMap+0xd3c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d80a      	bhi.n	8003c7c <ModbusMap+0xae4>
					PNU_0x3106 = lowByte(_u16WriteVal);
 8003c66:	4b96      	ldr	r3, [pc, #600]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	4b9a      	ldr	r3, [pc, #616]	@ (8003ed8 <ModbusMap+0xd40>)
 8003c70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c72:	4b9a      	ldr	r3, [pc, #616]	@ (8003edc <ModbusMap+0xd44>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fb00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 8003c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	4a97      	ldr	r2, [pc, #604]	@ (8003ee0 <ModbusMap+0xd48>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d90f      	bls.n	8003ca6 <ModbusMap+0xb0e>
 8003c86:	4b8b      	ldr	r3, [pc, #556]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4a96      	ldr	r2, [pc, #600]	@ (8003ee4 <ModbusMap+0xd4c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d80a      	bhi.n	8003ca6 <ModbusMap+0xb0e>
					PNU_0x3108 = lowByte(_u16WriteVal);
 8003c90:	4b8b      	ldr	r3, [pc, #556]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	001a      	movs	r2, r3
 8003c98:	4b93      	ldr	r3, [pc, #588]	@ (8003ee8 <ModbusMap+0xd50>)
 8003c9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <ModbusMap+0xd44>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 faeb 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 8003ca6:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	4a90      	ldr	r2, [pc, #576]	@ (8003eec <ModbusMap+0xd54>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d90f      	bls.n	8003cd0 <ModbusMap+0xb38>
 8003cb0:	4b80      	ldr	r3, [pc, #512]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef0 <ModbusMap+0xd58>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d80a      	bhi.n	8003cd0 <ModbusMap+0xb38>
					PNU_0x310A = lowByte(_u16WriteVal);
 8003cba:	4b81      	ldr	r3, [pc, #516]	@ (8003ec0 <ModbusMap+0xd28>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef4 <ModbusMap+0xd5c>)
 8003cc4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <ModbusMap+0xd44>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 fad6 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 8003cd0:	4b78      	ldr	r3, [pc, #480]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	4a88      	ldr	r2, [pc, #544]	@ (8003ef8 <ModbusMap+0xd60>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d90f      	bls.n	8003cfa <ModbusMap+0xb62>
 8003cda:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	4a87      	ldr	r2, [pc, #540]	@ (8003efc <ModbusMap+0xd64>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d80a      	bhi.n	8003cfa <ModbusMap+0xb62>
					PNU_0x310C = lowByte(_u16WriteVal);
 8003ce4:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <ModbusMap+0xd28>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	001a      	movs	r2, r3
 8003cec:	4b84      	ldr	r3, [pc, #528]	@ (8003f00 <ModbusMap+0xd68>)
 8003cee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8003edc <ModbusMap+0xd44>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fac1 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4a81      	ldr	r2, [pc, #516]	@ (8003f04 <ModbusMap+0xd6c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d90f      	bls.n	8003d24 <ModbusMap+0xb8c>
 8003d04:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	4a7f      	ldr	r2, [pc, #508]	@ (8003f08 <ModbusMap+0xd70>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d80a      	bhi.n	8003d24 <ModbusMap+0xb8c>
					PNU_0x310E = lowByte(_u16WriteVal);
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	001a      	movs	r2, r3
 8003d16:	4b7d      	ldr	r3, [pc, #500]	@ (8003f0c <ModbusMap+0xd74>)
 8003d18:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <ModbusMap+0xd44>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 faac 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 8003d24:	4b63      	ldr	r3, [pc, #396]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	23c8      	movs	r3, #200	@ 0xc8
 8003d2a:	019b      	lsls	r3, r3, #6
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d310      	bcc.n	8003d52 <ModbusMap+0xbba>
 8003d30:	4b60      	ldr	r3, [pc, #384]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	23c8      	movs	r3, #200	@ 0xc8
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d80a      	bhi.n	8003d52 <ModbusMap+0xbba>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8003d3c:	4b60      	ldr	r3, [pc, #384]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	001a      	movs	r2, r3
 8003d44:	4b72      	ldr	r3, [pc, #456]	@ (8003f10 <ModbusMap+0xd78>)
 8003d46:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d48:	4b64      	ldr	r3, [pc, #400]	@ (8003edc <ModbusMap+0xd44>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fa95 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8003d52:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	4a6f      	ldr	r2, [pc, #444]	@ (8003f14 <ModbusMap+0xd7c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d90f      	bls.n	8003d7c <ModbusMap+0xbe4>
 8003d5c:	4b55      	ldr	r3, [pc, #340]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4a6d      	ldr	r2, [pc, #436]	@ (8003f18 <ModbusMap+0xd80>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d80a      	bhi.n	8003d7c <ModbusMap+0xbe4>
					PNU_0x3202 = lowByte(_u16WriteVal);
 8003d66:	4b56      	ldr	r3, [pc, #344]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003f1c <ModbusMap+0xd84>)
 8003d70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d72:	4b5a      	ldr	r3, [pc, #360]	@ (8003edc <ModbusMap+0xd44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fa80 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <ModbusMap+0xd88>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90f      	bls.n	8003da6 <ModbusMap+0xc0e>
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <ModbusMap+0xd8c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d80a      	bhi.n	8003da6 <ModbusMap+0xc0e>
					PNU_0x3204 = lowByte(_u16WriteVal);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	001a      	movs	r2, r3
 8003d98:	4b63      	ldr	r3, [pc, #396]	@ (8003f28 <ModbusMap+0xd90>)
 8003d9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003edc <ModbusMap+0xd44>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fa6b 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 8003da6:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	4a60      	ldr	r2, [pc, #384]	@ (8003f2c <ModbusMap+0xd94>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d90f      	bls.n	8003dd0 <ModbusMap+0xc38>
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <ModbusMap+0xd98>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d80a      	bhi.n	8003dd0 <ModbusMap+0xc38>
					PNU_0x3206 = lowByte(_u16WriteVal);
 8003dba:	4b41      	ldr	r3, [pc, #260]	@ (8003ec0 <ModbusMap+0xd28>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <ModbusMap+0xd9c>)
 8003dc4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dc6:	4b45      	ldr	r3, [pc, #276]	@ (8003edc <ModbusMap+0xd44>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 fa56 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 8003dd0:	4b38      	ldr	r3, [pc, #224]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	@ (8003f38 <ModbusMap+0xda0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d90f      	bls.n	8003dfa <ModbusMap+0xc62>
 8003dda:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	4a57      	ldr	r2, [pc, #348]	@ (8003f3c <ModbusMap+0xda4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d80a      	bhi.n	8003dfa <ModbusMap+0xc62>
					PNU_0x3208 = lowByte(_u16WriteVal);
 8003de4:	4b36      	ldr	r3, [pc, #216]	@ (8003ec0 <ModbusMap+0xd28>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	001a      	movs	r2, r3
 8003dec:	4b54      	ldr	r3, [pc, #336]	@ (8003f40 <ModbusMap+0xda8>)
 8003dee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003df0:	4b3a      	ldr	r3, [pc, #232]	@ (8003edc <ModbusMap+0xd44>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 fa41 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	4a51      	ldr	r2, [pc, #324]	@ (8003f44 <ModbusMap+0xdac>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d90f      	bls.n	8003e24 <ModbusMap+0xc8c>
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	@ (8003f48 <ModbusMap+0xdb0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d80a      	bhi.n	8003e24 <ModbusMap+0xc8c>
					PNU_0x320A = lowByte(_u16WriteVal);
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	001a      	movs	r2, r3
 8003e16:	4b4d      	ldr	r3, [pc, #308]	@ (8003f4c <ModbusMap+0xdb4>)
 8003e18:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e1a:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <ModbusMap+0xd44>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 fa2c 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4a49      	ldr	r2, [pc, #292]	@ (8003f50 <ModbusMap+0xdb8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d90f      	bls.n	8003e4e <ModbusMap+0xcb6>
 8003e2e:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <ModbusMap+0xdbc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d80a      	bhi.n	8003e4e <ModbusMap+0xcb6>
					PNU_0x320C = lowByte(_u16WriteVal);
 8003e38:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	001a      	movs	r2, r3
 8003e40:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <ModbusMap+0xdc0>)
 8003e42:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <ModbusMap+0xd44>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fa17 	bl	800427c <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8003e4e:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	2b2f      	cmp	r3, #47	@ 0x2f
 8003e54:	d91a      	bls.n	8003e8c <ModbusMap+0xcf4>
 8003e56:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	2b30      	cmp	r3, #48	@ 0x30
 8003e5c:	d816      	bhi.n	8003e8c <ModbusMap+0xcf4>

					if (_u16WriteVal == 1){
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d104      	bne.n	8003e70 <ModbusMap+0xcd8>
						if(flagsa[3]){
 8003e66:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <ModbusMap+0xdc4>)
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d000      	beq.n	8003e70 <ModbusMap+0xcd8>
							asm ("nop");
 8003e6e:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <ModbusMap+0xcea>
						if(flagsa[3]){
 8003e78:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <ModbusMap+0xdc4>)
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d100      	bne.n	8003e82 <ModbusMap+0xcea>

						}
						else{
							asm ("nop");
 8003e80:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e82:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <ModbusMap+0xd44>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f9f8 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d800      	bhi.n	8003e96 <ModbusMap+0xcfe>
 8003e94:	e07b      	b.n	8003f8e <ModbusMap+0xdf6>
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2b31      	cmp	r3, #49	@ 0x31
 8003e9c:	d900      	bls.n	8003ea0 <ModbusMap+0xd08>
 8003e9e:	e076      	b.n	8003f8e <ModbusMap+0xdf6>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <ModbusMap+0xd28>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d164      	bne.n	8003f72 <ModbusMap+0xdda>
						if(GPIOR0[1]){
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <ModbusMap+0xdc8>)
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d059      	beq.n	8003f64 <ModbusMap+0xdcc>
							asm ("nop");
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	e05e      	b.n	8003f72 <ModbusMap+0xdda>
 8003eb4:	2000037a 	.word	0x2000037a
 8003eb8:	00003103 	.word	0x00003103
 8003ebc:	00003104 	.word	0x00003104
 8003ec0:	2000037c 	.word	0x2000037c
 8003ec4:	200000ac 	.word	0x200000ac
 8003ec8:	20000b64 	.word	0x20000b64
 8003ecc:	0803f049 	.word	0x0803f049
 8003ed0:	00003105 	.word	0x00003105
 8003ed4:	00003106 	.word	0x00003106
 8003ed8:	200000ae 	.word	0x200000ae
 8003edc:	200003c4 	.word	0x200003c4
 8003ee0:	00003107 	.word	0x00003107
 8003ee4:	00003108 	.word	0x00003108
 8003ee8:	200000b0 	.word	0x200000b0
 8003eec:	00003109 	.word	0x00003109
 8003ef0:	0000310a 	.word	0x0000310a
 8003ef4:	200000b2 	.word	0x200000b2
 8003ef8:	0000310b 	.word	0x0000310b
 8003efc:	0000310c 	.word	0x0000310c
 8003f00:	200000b4 	.word	0x200000b4
 8003f04:	0000310d 	.word	0x0000310d
 8003f08:	0000310e 	.word	0x0000310e
 8003f0c:	200000b6 	.word	0x200000b6
 8003f10:	20000b1a 	.word	0x20000b1a
 8003f14:	00003201 	.word	0x00003201
 8003f18:	00003202 	.word	0x00003202
 8003f1c:	20000b1c 	.word	0x20000b1c
 8003f20:	00003203 	.word	0x00003203
 8003f24:	00003204 	.word	0x00003204
 8003f28:	20000b1e 	.word	0x20000b1e
 8003f2c:	00003205 	.word	0x00003205
 8003f30:	00003206 	.word	0x00003206
 8003f34:	20000b20 	.word	0x20000b20
 8003f38:	00003207 	.word	0x00003207
 8003f3c:	00003208 	.word	0x00003208
 8003f40:	20000b22 	.word	0x20000b22
 8003f44:	00003209 	.word	0x00003209
 8003f48:	0000320a 	.word	0x0000320a
 8003f4c:	20000b24 	.word	0x20000b24
 8003f50:	0000320b 	.word	0x0000320b
 8003f54:	0000320c 	.word	0x0000320c
 8003f58:	20000b26 	.word	0x20000b26
 8003f5c:	20000b88 	.word	0x20000b88
 8003f60:	20000bb4 	.word	0x20000bb4
						}
						else{
							flags_accMenu |=0x01;
 8003f64:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <ModbusMap+0xed0>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <ModbusMap+0xed0>)
 8003f70:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8003f72:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <ModbusMap+0xed4>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <ModbusMap+0xdec>
						if(GPIOR0[1]){
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004070 <ModbusMap+0xed8>)
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d100      	bne.n	8003f84 <ModbusMap+0xdec>
						}
						else{
							asm ("nop");
 8003f82:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f84:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <ModbusMap+0xedc>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 f977 	bl	800427c <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <ModbusMap+0xee0>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b31      	cmp	r3, #49	@ 0x31
 8003f94:	d800      	bhi.n	8003f98 <ModbusMap+0xe00>
 8003f96:	e061      	b.n	800405c <ModbusMap+0xec4>
 8003f98:	4b37      	ldr	r3, [pc, #220]	@ (8004078 <ModbusMap+0xee0>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b32      	cmp	r3, #50	@ 0x32
 8003f9e:	d900      	bls.n	8003fa2 <ModbusMap+0xe0a>
 8003fa0:	e05c      	b.n	800405c <ModbusMap+0xec4>

					if (_u16WriteVal == 1){
 8003fa2:	4b32      	ldr	r3, [pc, #200]	@ (800406c <ModbusMap+0xed4>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <ModbusMap+0xe24>
						if(GPIOR0[2]){
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <ModbusMap+0xed8>)
 8003fac:	789b      	ldrb	r3, [r3, #2]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <ModbusMap+0xe1e>
							asm ("nop");
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	e002      	b.n	8003fbc <ModbusMap+0xe24>
						}
						else{
							flagsb[0] = 1;
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <ModbusMap+0xee4>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <ModbusMap+0xed4>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <ModbusMap+0xe40>
						if(GPIOR0[2]){
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004070 <ModbusMap+0xed8>)
 8003fc6:	789b      	ldrb	r3, [r3, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <ModbusMap+0xe3e>
							asm ("nop");
 8003fcc:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 8003fce:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <ModbusMap+0xee4>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e000      	b.n	8003fd8 <ModbusMap+0xe40>

						}
						else{
							asm ("nop");
 8003fd6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <ModbusMap+0xedc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f94d 	bl	800427c <ModbusSlaveTransaction>
				}
			break;
 8003fe2:	e03b      	b.n	800405c <ModbusMap+0xec4>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f000 fa71 	bl	80044cc <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8003fea:	e038      	b.n	800405e <ModbusMap+0xec6>
				  break;
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	e036      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	e034      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	e032      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	e030      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	e02e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	e02c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	e02a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	e028      	b.n	800405e <ModbusMap+0xec6>
					break;
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	e026      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	e024      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	e022      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	e020      	b.n	800405e <ModbusMap+0xec6>
					break;
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	e01e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	e01c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	e01a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	e018      	b.n	800405e <ModbusMap+0xec6>
					break;
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	e016      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	e014      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e012      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	e010      	b.n	800405e <ModbusMap+0xec6>
					break;
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	e00e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	e00c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	e00a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	e008      	b.n	800405e <ModbusMap+0xec6>
					break;
 800404c:	46c0      	nop			@ (mov r8, r8)
 800404e:	e006      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	e004      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	e002      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	e000      	b.n	800405e <ModbusMap+0xec6>
			break;
 800405c:	46c0      	nop			@ (mov r8, r8)
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b003      	add	sp, #12
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	20000c60 	.word	0x20000c60
 800406c:	2000037c 	.word	0x2000037c
 8004070:	20000bb4 	.word	0x20000bb4
 8004074:	200003c4 	.word	0x200003c4
 8004078:	2000037a 	.word	0x2000037a
 800407c:	20000bf8 	.word	0x20000bf8

08004080 <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	221e      	movs	r2, #30
 8004090:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	4929      	ldr	r1, [pc, #164]	@ (800413c <serialEvent_RS485+0xbc>)
 8004098:	4b29      	ldr	r3, [pc, #164]	@ (8004140 <serialEvent_RS485+0xc0>)
 800409a:	0018      	movs	r0, r3
 800409c:	f015 fa1a 	bl	80194d4 <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80040a0:	4b28      	ldr	r3, [pc, #160]	@ (8004144 <serialEvent_RS485+0xc4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	1cbb      	adds	r3, r7, #2
 80040a8:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80040aa:	1cba      	adds	r2, r7, #2
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d23c      	bcs.n	8004130 <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80040b6:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <serialEvent_RS485+0xc8>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2210      	movs	r2, #16
 80040bc:	4013      	ands	r3, r2
 80040be:	d037      	beq.n	8004130 <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80040c0:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <serialEvent_RS485+0xc0>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f015 fa71 	bl	80195ac <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80040ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004148 <serialEvent_RS485+0xc8>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2210      	movs	r2, #16
 80040d0:	4013      	ands	r3, r2
 80040d2:	d003      	beq.n	80040dc <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <serialEvent_RS485+0xc0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80040dc:	1dbb      	adds	r3, r7, #6
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e00c      	b.n	80040fe <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4913      	ldr	r1, [pc, #76]	@ (800413c <serialEvent_RS485+0xbc>)
 80040ee:	5c89      	ldrb	r1, [r1, r2]
 80040f0:	4a16      	ldr	r2, [pc, #88]	@ (800414c <serialEvent_RS485+0xcc>)
 80040f2:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	3201      	adds	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	1dbb      	adds	r3, r7, #6
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	1cbb      	adds	r3, r7, #2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	211e      	movs	r1, #30
 8004108:	1acb      	subs	r3, r1, r3
 800410a:	429a      	cmp	r2, r3
 800410c:	d3ea      	bcc.n	80040e4 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800410e:	1dbb      	adds	r3, r7, #6
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	@ (800414c <serialEvent_RS485+0xcc>)
 8004114:	2100      	movs	r1, #0
 8004116:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	1cbb      	adds	r3, r7, #2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	1a8a      	subs	r2, r1, r2
 8004128:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <serialEvent_RS485+0xd0>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781b      	ldrb	r3, [r3, #0]
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000ad4 	.word	0x20000ad4
 8004140:	200006cc 	.word	0x200006cc
 8004144:	20000820 	.word	0x20000820
 8004148:	40004c00 	.word	0x40004c00
 800414c:	20000af4 	.word	0x20000af4
 8004150:	20000374 	.word	0x20000374

08004154 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	000a      	movs	r2, r1
 800415e:	1cfb      	adds	r3, r7, #3
 8004160:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 8004162:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8004164:	1cfb      	adds	r3, r7, #3
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4b08      	ldr	r3, [pc, #32]	@ (800418c <SerializeDMAArray_RS485+0x38>)
 800416c:	0018      	movs	r0, r3
 800416e:	f016 ff3f 	bl	801aff0 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 8004172:	1cfb      	adds	r3, r7, #3
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	4904      	ldr	r1, [pc, #16]	@ (800418c <SerializeDMAArray_RS485+0x38>)
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <SerializeDMAArray_RS485+0x3c>)
 800417c:	0018      	movs	r0, r3
 800417e:	f015 f917 	bl	80193b0 <HAL_UART_Transmit_DMA>

}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	20000ab4 	.word	0x20000ab4
 8004190:	200006cc 	.word	0x200006cc

08004194 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	1dbb      	adds	r3, r7, #6
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	1d7b      	adds	r3, r7, #5
 80041a2:	1c0a      	adds	r2, r1, #0
 80041a4:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80041a6:	1d7b      	adds	r3, r7, #5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b299      	uxth	r1, r3
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	1dba      	adds	r2, r7, #6
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	404a      	eors	r2, r1
 80041b4:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e015      	b.n	80041e8 <crc16_update+0x54>
{
if (crc & 1)
 80041bc:	1dbb      	adds	r3, r7, #6
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d008      	beq.n	80041d8 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	1dbb      	adds	r3, r7, #6
 80041d0:	490a      	ldr	r1, [pc, #40]	@ (80041fc <crc16_update+0x68>)
 80041d2:	404a      	eors	r2, r1
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e004      	b.n	80041e2 <crc16_update+0x4e>
else
  crc = (crc >> 1);
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	1dba      	adds	r2, r7, #6
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	dde6      	ble.n	80041bc <crc16_update+0x28>
}

return crc;
 80041ee:	1dbb      	adds	r3, r7, #6
 80041f0:	881b      	ldrh	r3, [r3, #0]
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	ffffa001 	.word	0xffffa001

08004200 <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	0002      	movs	r2, r0
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <ModbusMaster_begin+0x28>)
 800421a:	1dfa      	adds	r2, r7, #7
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 8004220:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <ModbusMaster_begin+0x2c>)
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <ModbusMaster_begin+0x30>)
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000375 	.word	0x20000375
 8004238:	200003c0 	.word	0x200003c0
 800423c:	200003c2 	.word	0x200003c2

08004240 <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	0002      	movs	r2, r0
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	1c0a      	adds	r2, r1, #0
 8004250:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b1f      	cmp	r3, #31
 8004258:	d808      	bhi.n	800426c <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <ModbusSlave_setTransmitBuffer+0x38>)
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	1d39      	adds	r1, r7, #4
 8004264:	8809      	ldrh	r1, [r1, #0]
 8004266:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	20000380 	.word	0x20000380

0800427c <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b0c5      	sub	sp, #276	@ 0x114
 8004280:	af00      	add	r7, sp, #0
 8004282:	0002      	movs	r2, r0
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <ModbusSlaveTransaction+0x22c>)
 8004286:	2588      	movs	r5, #136	@ 0x88
 8004288:	006d      	lsls	r5, r5, #1
 800428a:	195b      	adds	r3, r3, r5
 800428c:	19db      	adds	r3, r3, r7
 800428e:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004290:	2410      	movs	r4, #16
 8004292:	34ff      	adds	r4, #255	@ 0xff
 8004294:	193b      	adds	r3, r7, r4
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 800429a:	4b84      	ldr	r3, [pc, #528]	@ (80044ac <ModbusSlaveTransaction+0x230>)
 800429c:	2201      	movs	r2, #1
 800429e:	2104      	movs	r1, #4
 80042a0:	0018      	movs	r0, r3
 80042a2:	f00f fae8 	bl	8013876 <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80042a6:	0020      	movs	r0, r4
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	183a      	adds	r2, r7, r0
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	7011      	strb	r1, [r2, #0]
 80042b2:	001a      	movs	r2, r3
 80042b4:	4b7e      	ldr	r3, [pc, #504]	@ (80044b0 <ModbusSlaveTransaction+0x234>)
 80042b6:	7819      	ldrb	r1, [r3, #0]
 80042b8:	4b7e      	ldr	r3, [pc, #504]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80042ba:	195b      	adds	r3, r3, r5
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80042c0:	183b      	adds	r3, r7, r0
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	183a      	adds	r2, r7, r0
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	7011      	strb	r1, [r2, #0]
 80042ca:	001a      	movs	r2, r3
 80042cc:	4b7a      	ldr	r3, [pc, #488]	@ (80044b8 <ModbusSlaveTransaction+0x23c>)
 80042ce:	7819      	ldrb	r1, [r3, #0]
 80042d0:	4b78      	ldr	r3, [pc, #480]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80042d2:	195b      	adds	r3, r3, r5
 80042d4:	19db      	adds	r3, r3, r7
 80042d6:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 80042d8:	4b73      	ldr	r3, [pc, #460]	@ (80044a8 <ModbusSlaveTransaction+0x22c>)
 80042da:	195b      	adds	r3, r3, r5
 80042dc:	19db      	adds	r3, r3, r7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	dc02      	bgt.n	80042ea <ModbusSlaveTransaction+0x6e>
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	da03      	bge.n	80042f0 <ModbusSlaveTransaction+0x74>
 80042e8:	e077      	b.n	80043da <ModbusSlaveTransaction+0x15e>
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d04f      	beq.n	800438e <ModbusSlaveTransaction+0x112>
 80042ee:	e074      	b.n	80043da <ModbusSlaveTransaction+0x15e>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 80042f0:	4b72      	ldr	r3, [pc, #456]	@ (80044bc <ModbusSlaveTransaction+0x240>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	0059      	lsls	r1, r3, #1
 80042f6:	2210      	movs	r2, #16
 80042f8:	32ff      	adds	r2, #255	@ 0xff
 80042fa:	18bb      	adds	r3, r7, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	18ba      	adds	r2, r7, r2
 8004300:	1c58      	adds	r0, r3, #1
 8004302:	7010      	strb	r0, [r2, #0]
 8004304:	001a      	movs	r2, r3
 8004306:	b2c9      	uxtb	r1, r1
 8004308:	4b6a      	ldr	r3, [pc, #424]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 800430a:	2088      	movs	r0, #136	@ 0x88
 800430c:	0040      	lsls	r0, r0, #1
 800430e:	181b      	adds	r3, r3, r0
 8004310:	19db      	adds	r3, r3, r7
 8004312:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004314:	2387      	movs	r3, #135	@ 0x87
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e02c      	b.n	800437a <ModbusSlaveTransaction+0xfe>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004320:	2487      	movs	r4, #135	@ 0x87
 8004322:	0064      	lsls	r4, r4, #1
 8004324:	193b      	adds	r3, r7, r4
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <ModbusSlaveTransaction+0x244>)
 800432a:	0052      	lsls	r2, r2, #1
 800432c:	5ad3      	ldrh	r3, [r2, r3]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b299      	uxth	r1, r3
 8004332:	2510      	movs	r5, #16
 8004334:	35ff      	adds	r5, #255	@ 0xff
 8004336:	197b      	adds	r3, r7, r5
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	197a      	adds	r2, r7, r5
 800433c:	1c58      	adds	r0, r3, #1
 800433e:	7010      	strb	r0, [r2, #0]
 8004340:	001a      	movs	r2, r3
 8004342:	b2c9      	uxtb	r1, r1
 8004344:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004346:	2688      	movs	r6, #136	@ 0x88
 8004348:	0076      	lsls	r6, r6, #1
 800434a:	199b      	adds	r3, r3, r6
 800434c:	19db      	adds	r3, r3, r7
 800434e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004350:	193b      	adds	r3, r7, r4
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	4b5a      	ldr	r3, [pc, #360]	@ (80044c0 <ModbusSlaveTransaction+0x244>)
 8004356:	0052      	lsls	r2, r2, #1
 8004358:	5ad1      	ldrh	r1, [r2, r3]
 800435a:	197b      	adds	r3, r7, r5
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	197a      	adds	r2, r7, r5
 8004360:	1c58      	adds	r0, r3, #1
 8004362:	7010      	strb	r0, [r2, #0]
 8004364:	001a      	movs	r2, r3
 8004366:	b2c9      	uxtb	r1, r1
 8004368:	4b52      	ldr	r3, [pc, #328]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 800436a:	199b      	adds	r3, r3, r6
 800436c:	19db      	adds	r3, r3, r7
 800436e:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004370:	193b      	adds	r3, r7, r4
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	193b      	adds	r3, r7, r4
 8004376:	3201      	adds	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <ModbusSlaveTransaction+0x240>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2287      	movs	r2, #135	@ 0x87
 8004382:	0052      	lsls	r2, r2, #1
 8004384:	18ba      	adds	r2, r7, r2
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d3c9      	bcc.n	8004320 <ModbusSlaveTransaction+0xa4>
      }
		break;
 800438c:	e025      	b.n	80043da <ModbusSlaveTransaction+0x15e>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 800438e:	2387      	movs	r3, #135	@ 0x87
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2202      	movs	r2, #2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e018      	b.n	80043cc <ModbusSlaveTransaction+0x150>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 800439a:	2487      	movs	r4, #135	@ 0x87
 800439c:	0064      	lsls	r4, r4, #1
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	2110      	movs	r1, #16
 80043a4:	31ff      	adds	r1, #255	@ 0xff
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	1879      	adds	r1, r7, r1
 80043ac:	1c58      	adds	r0, r3, #1
 80043ae:	7008      	strb	r0, [r1, #0]
 80043b0:	0019      	movs	r1, r3
 80043b2:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <ModbusSlaveTransaction+0x248>)
 80043b4:	5c9a      	ldrb	r2, [r3, r2]
 80043b6:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80043b8:	2088      	movs	r0, #136	@ 0x88
 80043ba:	0040      	lsls	r0, r0, #1
 80043bc:	181b      	adds	r3, r3, r0
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	3201      	adds	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	2387      	movs	r3, #135	@ 0x87
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d9e0      	bls.n	800439a <ModbusSlaveTransaction+0x11e>
			}
		break;
 80043d8:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 80043da:	2386      	movs	r3, #134	@ 0x86
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	4252      	negs	r2, r2
 80043e4:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80043e6:	2387      	movs	r3, #135	@ 0x87
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e019      	b.n	8004426 <ModbusSlaveTransaction+0x1aa>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 80043f2:	2587      	movs	r5, #135	@ 0x87
 80043f4:	006d      	lsls	r5, r5, #1
 80043f6:	197b      	adds	r3, r7, r5
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4a2e      	ldr	r2, [pc, #184]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80043fc:	2188      	movs	r1, #136	@ 0x88
 80043fe:	0049      	lsls	r1, r1, #1
 8004400:	1852      	adds	r2, r2, r1
 8004402:	19d2      	adds	r2, r2, r7
 8004404:	5cd2      	ldrb	r2, [r2, r3]
 8004406:	2386      	movs	r3, #134	@ 0x86
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	18fc      	adds	r4, r7, r3
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff febe 	bl	8004194 <crc16_update>
 8004418:	0003      	movs	r3, r0
 800441a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800441c:	197b      	adds	r3, r7, r5
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	197b      	adds	r3, r7, r5
 8004422:	3201      	adds	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	2387      	movs	r3, #135	@ 0x87
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	18fa      	adds	r2, r7, r3
 800442c:	2010      	movs	r0, #16
 800442e:	30ff      	adds	r0, #255	@ 0xff
 8004430:	183b      	adds	r3, r7, r0
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3db      	bcc.n	80043f2 <ModbusSlaveTransaction+0x176>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800443a:	183b      	adds	r3, r7, r0
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	183a      	adds	r2, r7, r0
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	7011      	strb	r1, [r2, #0]
 8004444:	001a      	movs	r2, r3
 8004446:	2486      	movs	r4, #134	@ 0x86
 8004448:	0064      	lsls	r4, r4, #1
 800444a:	193b      	adds	r3, r7, r4
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2d9      	uxtb	r1, r3
 8004450:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004452:	2588      	movs	r5, #136	@ 0x88
 8004454:	006d      	lsls	r5, r5, #1
 8004456:	195b      	adds	r3, r3, r5
 8004458:	19db      	adds	r3, r3, r7
 800445a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800445c:	193b      	adds	r3, r7, r4
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	b299      	uxth	r1, r3
 8004464:	183b      	adds	r3, r7, r0
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	0004      	movs	r4, r0
 800446a:	183a      	adds	r2, r7, r0
 800446c:	1c58      	adds	r0, r3, #1
 800446e:	7010      	strb	r0, [r2, #0]
 8004470:	001a      	movs	r2, r3
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004476:	195b      	adds	r3, r3, r5
 8004478:	19db      	adds	r3, r3, r7
 800447a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 800447c:	193b      	adds	r3, r7, r4
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004482:	1952      	adds	r2, r2, r5
 8004484:	19d2      	adds	r2, r2, r7
 8004486:	2100      	movs	r1, #0
 8004488:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 800448a:	193b      	adds	r3, r7, r4
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	230c      	movs	r3, #12
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fe5d 	bl	8004154 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <ModbusSlaveTransaction+0x24c>)
 800449c:	2246      	movs	r2, #70	@ 0x46
 800449e:	801a      	strh	r2, [r3, #0]


}
 80044a0:	46c0      	nop			@ (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b045      	add	sp, #276	@ 0x114
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a8:	fffffef7 	.word	0xfffffef7
 80044ac:	50000800 	.word	0x50000800
 80044b0:	20000375 	.word	0x20000375
 80044b4:	fffffefc 	.word	0xfffffefc
 80044b8:	200003c4 	.word	0x200003c4
 80044bc:	20000378 	.word	0x20000378
 80044c0:	20000380 	.word	0x20000380
 80044c4:	20000af4 	.word	0x20000af4
 80044c8:	200010c2 	.word	0x200010c2

080044cc <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b0c4      	sub	sp, #272	@ 0x110
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	0002      	movs	r2, r0
 80044d4:	4b51      	ldr	r3, [pc, #324]	@ (800461c <ModbusSlaveExceptionTransaction+0x150>)
 80044d6:	2588      	movs	r5, #136	@ 0x88
 80044d8:	006d      	lsls	r5, r5, #1
 80044da:	195b      	adds	r3, r3, r5
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80044e0:	240c      	movs	r4, #12
 80044e2:	34ff      	adds	r4, #255	@ 0xff
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 80044ea:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 80044ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004620 <ModbusSlaveExceptionTransaction+0x154>)
 80044ee:	2214      	movs	r2, #20
 80044f0:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80044f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004624 <ModbusSlaveExceptionTransaction+0x158>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	2104      	movs	r1, #4
 80044f8:	0018      	movs	r0, r3
 80044fa:	f00f f9bc 	bl	8013876 <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	193a      	adds	r2, r7, r4
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	7011      	strb	r1, [r2, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <ModbusSlaveExceptionTransaction+0x15c>)
 800450c:	7819      	ldrb	r1, [r3, #0]
 800450e:	4b47      	ldr	r3, [pc, #284]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004510:	195b      	adds	r3, r3, r5
 8004512:	19db      	adds	r3, r3, r7
 8004514:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004516:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <ModbusSlaveExceptionTransaction+0x164>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	193b      	adds	r3, r7, r4
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	1939      	adds	r1, r7, r4
 8004520:	1c58      	adds	r0, r3, #1
 8004522:	7008      	strb	r0, [r1, #0]
 8004524:	0019      	movs	r1, r3
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	425b      	negs	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004530:	195b      	adds	r3, r3, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004536:	193b      	adds	r3, r7, r4
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	193a      	adds	r2, r7, r4
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	7011      	strb	r1, [r2, #0]
 8004540:	0019      	movs	r1, r3
 8004542:	4b3a      	ldr	r3, [pc, #232]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004544:	195b      	adds	r3, r3, r5
 8004546:	19db      	adds	r3, r3, r7
 8004548:	4a34      	ldr	r2, [pc, #208]	@ (800461c <ModbusSlaveExceptionTransaction+0x150>)
 800454a:	1952      	adds	r2, r2, r5
 800454c:	19d2      	adds	r2, r2, r7
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004552:	2386      	movs	r3, #134	@ 0x86
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	4252      	negs	r2, r2
 800455c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800455e:	2310      	movs	r3, #16
 8004560:	33ff      	adds	r3, #255	@ 0xff
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e019      	b.n	800459e <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 800456a:	2510      	movs	r5, #16
 800456c:	35ff      	adds	r5, #255	@ 0xff
 800456e:	197b      	adds	r3, r7, r5
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004574:	2188      	movs	r1, #136	@ 0x88
 8004576:	0049      	lsls	r1, r1, #1
 8004578:	1852      	adds	r2, r2, r1
 800457a:	19d2      	adds	r2, r2, r7
 800457c:	5cd2      	ldrb	r2, [r2, r3]
 800457e:	2386      	movs	r3, #134	@ 0x86
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	18fc      	adds	r4, r7, r3
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	0011      	movs	r1, r2
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff fe02 	bl	8004194 <crc16_update>
 8004590:	0003      	movs	r3, r0
 8004592:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004594:	197b      	adds	r3, r7, r5
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	197b      	adds	r3, r7, r5
 800459a:	3201      	adds	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	2310      	movs	r3, #16
 80045a0:	33ff      	adds	r3, #255	@ 0xff
 80045a2:	18fa      	adds	r2, r7, r3
 80045a4:	200c      	movs	r0, #12
 80045a6:	30ff      	adds	r0, #255	@ 0xff
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3db      	bcc.n	800456a <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	183a      	adds	r2, r7, r0
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	7011      	strb	r1, [r2, #0]
 80045bc:	001a      	movs	r2, r3
 80045be:	2486      	movs	r4, #134	@ 0x86
 80045c0:	0064      	lsls	r4, r4, #1
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	4b18      	ldr	r3, [pc, #96]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045ca:	2588      	movs	r5, #136	@ 0x88
 80045cc:	006d      	lsls	r5, r5, #1
 80045ce:	195b      	adds	r3, r3, r5
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 80045d4:	193b      	adds	r3, r7, r4
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	b299      	uxth	r1, r3
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	0004      	movs	r4, r0
 80045e2:	183a      	adds	r2, r7, r0
 80045e4:	1c58      	adds	r0, r3, #1
 80045e6:	7010      	strb	r0, [r2, #0]
 80045e8:	001a      	movs	r2, r3
 80045ea:	b2c9      	uxtb	r1, r1
 80045ec:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045ee:	195b      	adds	r3, r3, r5
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4a0c      	ldr	r2, [pc, #48]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045fa:	1952      	adds	r2, r2, r5
 80045fc:	19d2      	adds	r2, r2, r7
 80045fe:	2100      	movs	r1, #0
 8004600:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004602:	193b      	adds	r3, r7, r4
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	2308      	movs	r3, #8
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff fda1 	bl	8004154 <SerializeDMAArray_RS485>

}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b044      	add	sp, #272	@ 0x110
 8004618:	bdb0      	pop	{r4, r5, r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	fffffef7 	.word	0xfffffef7
 8004620:	200010c4 	.word	0x200010c4
 8004624:	50000800 	.word	0x50000800
 8004628:	20000375 	.word	0x20000375
 800462c:	fffffef8 	.word	0xfffffef8
 8004630:	200003c4 	.word	0x200003c4

08004634 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b0c2      	sub	sp, #264	@ 0x108
 8004638:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 800463a:	1cfb      	adds	r3, r7, #3
 800463c:	33ff      	adds	r3, #255	@ 0xff
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	33ff      	adds	r3, #255	@ 0xff
 8004646:	22ff      	movs	r2, #255	@ 0xff
 8004648:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 800464a:	1cfc      	adds	r4, r7, #3
 800464c:	34ff      	adds	r4, #255	@ 0xff
 800464e:	f7ff fd17 	bl	8004080 <serialEvent_RS485>
 8004652:	0003      	movs	r3, r0
 8004654:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004656:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004658:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 800465a:	4b5a      	ldr	r3, [pc, #360]	@ (80047c4 <ModbusSlavePool+0x190>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <ModbusSlavePool+0x30>
 8004662:	e0a8      	b.n	80047b6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004664:	4b57      	ldr	r3, [pc, #348]	@ (80047c4 <ModbusSlavePool+0x190>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	33ff      	adds	r3, #255	@ 0xff
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004672:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <ModbusSlavePool+0x198>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d000      	beq.n	8004680 <ModbusSlavePool+0x4c>
 800467e:	e091      	b.n	80047a4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004680:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004682:	785a      	ldrb	r2, [r3, #1]
 8004684:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004686:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004688:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <ModbusSlavePool+0x194>)
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	001a      	movs	r2, r3
 800468e:	237f      	movs	r3, #127	@ 0x7f
 8004690:	4013      	ands	r3, r2
 8004692:	4a4f      	ldr	r2, [pc, #316]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	33ff      	adds	r3, #255	@ 0xff
 800469e:	22e1      	movs	r2, #225	@ 0xe1
 80046a0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 80046a2:	1d7b      	adds	r3, r7, #5
 80046a4:	33ff      	adds	r3, #255	@ 0xff
 80046a6:	2201      	movs	r2, #1
 80046a8:	4252      	negs	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 80046ac:	2308      	movs	r3, #8
 80046ae:	33ff      	adds	r3, #255	@ 0xff
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e015      	b.n	80046e4 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 80046b8:	2508      	movs	r5, #8
 80046ba:	35ff      	adds	r5, #255	@ 0xff
 80046bc:	197b      	adds	r3, r7, r5
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	4a41      	ldr	r2, [pc, #260]	@ (80047c8 <ModbusSlavePool+0x194>)
 80046c2:	5cd2      	ldrb	r2, [r2, r3]
 80046c4:	1d7c      	adds	r4, r7, #5
 80046c6:	34ff      	adds	r4, #255	@ 0xff
 80046c8:	1d7b      	adds	r3, r7, #5
 80046ca:	33ff      	adds	r3, #255	@ 0xff
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fd5f 	bl	8004194 <crc16_update>
 80046d6:	0003      	movs	r3, r0
 80046d8:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 80046da:	197b      	adds	r3, r7, r5
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	3201      	adds	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	2308      	movs	r3, #8
 80046e6:	33ff      	adds	r3, #255	@ 0xff
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	1cfb      	adds	r3, r7, #3
 80046ee:	33ff      	adds	r3, #255	@ 0xff
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	3b02      	subs	r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	dbdf      	blt.n	80046b8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	33ff      	adds	r3, #255	@ 0xff
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <ModbusSlavePool+0x10a>
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	1cfb      	adds	r3, r7, #3
 800470c:	33ff      	adds	r3, #255	@ 0xff
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	3b02      	subs	r3, #2
 8004712:	492d      	ldr	r1, [pc, #180]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	429a      	cmp	r2, r3
 8004718:	d10d      	bne.n	8004736 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 800471a:	1d7b      	adds	r3, r7, #5
 800471c:	33ff      	adds	r3, #255	@ 0xff
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	b29b      	uxth	r3, r3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	1cfb      	adds	r3, r7, #3
 8004728:	33ff      	adds	r3, #255	@ 0xff
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4926      	ldr	r1, [pc, #152]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004730:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d003      	beq.n	800473e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	33ff      	adds	r3, #255	@ 0xff
 800473a:	22e3      	movs	r2, #227	@ 0xe3
 800473c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d019      	beq.n	800477a <ModbusSlavePool+0x146>
 8004746:	dc36      	bgt.n	80047b6 <ModbusSlavePool+0x182>
 8004748:	2b04      	cmp	r3, #4
 800474a:	dc34      	bgt.n	80047b6 <ModbusSlavePool+0x182>
 800474c:	2b03      	cmp	r3, #3
 800474e:	db31      	blt.n	80047b4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	b29b      	uxth	r3, r3
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <ModbusSlavePool+0x194>)
 800475a:	78d2      	ldrb	r2, [r2, #3]
 800475c:	189b      	adds	r3, r3, r2
 800475e:	b29a      	uxth	r2, r3
 8004760:	4b1c      	ldr	r3, [pc, #112]	@ (80047d4 <ModbusSlavePool+0x1a0>)
 8004762:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004764:	4b18      	ldr	r3, [pc, #96]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004766:	791b      	ldrb	r3, [r3, #4]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <ModbusSlavePool+0x194>)
 800476e:	7952      	ldrb	r2, [r2, #5]
 8004770:	189b      	adds	r3, r3, r2
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b18      	ldr	r3, [pc, #96]	@ (80047d8 <ModbusSlavePool+0x1a4>)
 8004776:	801a      	strh	r2, [r3, #0]
				break;
 8004778:	e01d      	b.n	80047b6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 800477a:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <ModbusSlavePool+0x194>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	b29b      	uxth	r3, r3
 8004782:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004784:	78d2      	ldrb	r2, [r2, #3]
 8004786:	189b      	adds	r3, r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <ModbusSlavePool+0x1a8>)
 800478c:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	b29b      	uxth	r3, r3
 8004796:	4a0c      	ldr	r2, [pc, #48]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004798:	7952      	ldrb	r2, [r2, #5]
 800479a:	189b      	adds	r3, r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <ModbusSlavePool+0x1ac>)
 80047a0:	801a      	strh	r2, [r3, #0]
				break;
 80047a2:	e008      	b.n	80047b6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	33ff      	adds	r3, #255	@ 0xff
 80047a8:	22e0      	movs	r2, #224	@ 0xe0
 80047aa:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <ModbusSlavePool+0x1b0>)
 80047ae:	2214      	movs	r2, #20
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e000      	b.n	80047b6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 80047b4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	33ff      	adds	r3, #255	@ 0xff
 80047ba:	781b      	ldrb	r3, [r3, #0]
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b042      	add	sp, #264	@ 0x108
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}
 80047c4:	20000374 	.word	0x20000374
 80047c8:	20000af4 	.word	0x20000af4
 80047cc:	20000375 	.word	0x20000375
 80047d0:	200003c4 	.word	0x200003c4
 80047d4:	20000376 	.word	0x20000376
 80047d8:	20000378 	.word	0x20000378
 80047dc:	2000037a 	.word	0x2000037a
 80047e0:	2000037c 	.word	0x2000037c
 80047e4:	200010c4 	.word	0x200010c4

080047e8 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <AtParsing_Ble+0x3c>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <AtParsing_Ble+0x3c>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <AtParsing_Ble+0x40>)
 800480a:	0011      	movs	r1, r2
 800480c:	0018      	movs	r0, r3
 800480e:	f016 fb9b 	bl	801af48 <strstr>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d001      	beq.n	800481a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b006      	add	sp, #24
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200003c6 	.word	0x200003c6
 8004828:	20000a24 	.word	0x20000a24

0800482c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004834:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc65 	bl	8000108 <strlen>
 800483e:	0002      	movs	r2, r0
 8004840:	240e      	movs	r4, #14
 8004842:	193b      	adds	r3, r7, r4
 8004844:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004846:	193b      	adds	r3, r7, r4
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4b07      	ldr	r3, [pc, #28]	@ (800486c <SerializeString_Ble+0x40>)
 800484e:	0018      	movs	r0, r3
 8004850:	f016 fbce 	bl	801aff0 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004854:	193b      	adds	r3, r7, r4
 8004856:	881a      	ldrh	r2, [r3, #0]
 8004858:	4904      	ldr	r1, [pc, #16]	@ (800486c <SerializeString_Ble+0x40>)
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SerializeString_Ble+0x44>)
 800485c:	0018      	movs	r0, r3
 800485e:	f014 fda7 	bl	80193b0 <HAL_UART_Transmit_DMA>
}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b005      	add	sp, #20
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	20000904 	.word	0x20000904
 8004870:	20000638 	.word	0x20000638

08004874 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	000a      	movs	r2, r1
 800487e:	1cfb      	adds	r3, r7, #3
 8004880:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004882:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004884:	210e      	movs	r1, #14
 8004886:	187b      	adds	r3, r7, r1
 8004888:	1cfa      	adds	r2, r7, #3
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 800488e:	000c      	movs	r4, r1
 8004890:	187b      	adds	r3, r7, r1
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <SerializeString2+0x40>)
 8004898:	0018      	movs	r0, r3
 800489a:	f016 fba9 	bl	801aff0 <memcpy>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <SerializeString2+0x40>)
 80048a4:	4b04      	ldr	r3, [pc, #16]	@ (80048b8 <SerializeString2+0x44>)
 80048a6:	0018      	movs	r0, r3
 80048a8:	f014 fd82 	bl	80193b0 <HAL_UART_Transmit_DMA>
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b005      	add	sp, #20
 80048b2:	bd90      	pop	{r4, r7, pc}
 80048b4:	20000904 	.word	0x20000904
 80048b8:	20000638 	.word	0x20000638

080048bc <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	2290      	movs	r2, #144	@ 0x90
 80048c6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	4929      	ldr	r1, [pc, #164]	@ (8004974 <serialEvent_Ble+0xb8>)
 80048ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004978 <serialEvent_Ble+0xbc>)
 80048d0:	0018      	movs	r0, r3
 80048d2:	f014 fdff 	bl	80194d4 <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 80048d6:	4b29      	ldr	r3, [pc, #164]	@ (800497c <serialEvent_Ble+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	1cbb      	adds	r3, r7, #2
 80048de:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80048e0:	1cba      	adds	r2, r7, #2
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d23f      	bcs.n	800496c <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 80048ec:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <serialEvent_Ble+0xc4>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	2210      	movs	r2, #16
 80048f2:	4013      	ands	r3, r2
 80048f4:	d03a      	beq.n	800496c <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80048f6:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <serialEvent_Ble+0xc0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	1cbb      	adds	r3, r7, #2
 8004900:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004902:	003b      	movs	r3, r7
 8004904:	1d39      	adds	r1, r7, #4
 8004906:	1cba      	adds	r2, r7, #2
 8004908:	8809      	ldrh	r1, [r1, #0]
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	1a8a      	subs	r2, r1, r2
 800490e:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <serialEvent_Ble+0xbc>)
 8004912:	0018      	movs	r0, r3
 8004914:	f014 fe4a 	bl	80195ac <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004918:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <serialEvent_Ble+0xc4>)
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2210      	movs	r2, #16
 800491e:	4013      	ands	r3, r2
 8004920:	d003      	beq.n	800492a <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <serialEvent_Ble+0xbc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2210      	movs	r2, #16
 8004928:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	e00c      	b.n	800494c <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	490e      	ldr	r1, [pc, #56]	@ (8004974 <serialEvent_Ble+0xb8>)
 800493c:	5c89      	ldrb	r1, [r1, r2]
 800493e:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <serialEvent_Ble+0xc8>)
 8004940:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	3201      	adds	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	2190      	movs	r1, #144	@ 0x90
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	429a      	cmp	r2, r3
 800495a:	d3ea      	bcc.n	8004932 <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 800495c:	1dfb      	adds	r3, r7, #7
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4a08      	ldr	r2, [pc, #32]	@ (8004984 <serialEvent_Ble+0xc8>)
 8004962:	2100      	movs	r1, #0
 8004964:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004966:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <serialEvent_Ble+0xcc>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
			}

		}
}
 800496c:	46c0      	nop			@ (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000994 	.word	0x20000994
 8004978:	20000638 	.word	0x20000638
 800497c:	20000760 	.word	0x20000760
 8004980:	40004400 	.word	0x40004400
 8004984:	20000a24 	.word	0x20000a24
 8004988:	200003c6 	.word	0x200003c6

0800498c <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	@ 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 800499e:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4053      	eors	r3, r2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 80049ac:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 80049b2:	f004 fce7 	bl	8009384 <millis>
 80049b6:	0003      	movs	r3, r0
 80049b8:	001a      	movs	r2, r3
 80049ba:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <SendATreply_Ble+0x78>)
 80049bc:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff ff33 	bl	800482c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 80049c6:	f7ff ff79 	bl	80048bc <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff ff09 	bl	80047e8 <AtParsing_Ble>
 80049d6:	0003      	movs	r3, r0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 80049da:	f004 fcd3 	bl	8009384 <millis>
 80049de:	0003      	movs	r3, r0
 80049e0:	001a      	movs	r2, r3
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <SendATreply_Ble+0x78>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d802      	bhi.n	80049f4 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 80049ee:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b00a      	add	sp, #40	@ 0x28
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	200003c5 	.word	0x200003c5
 8004a04:	200003c8 	.word	0x200003c8

08004a08 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004a0c:	f000 f810 	bl	8004a30 <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			BluetoothState = 2;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <SetUpBluetooth_Ble+0x20>)
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004a16:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <SetUpBluetooth_Ble+0x24>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	@ 0x40
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f00e ff2a 	bl	8013876 <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2000004c 	.word	0x2000004c
 8004a2c:	50000800 	.word	0x50000800

08004a30 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004a36:	4b23      	ldr	r3, [pc, #140]	@ (8004ac4 <ConfigBLE_Ble+0x94>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004a3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ac8 <ConfigBLE_Ble+0x98>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	0018      	movs	r0, r3
 8004a46:	f00e ff16 	bl	8013876 <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004a4a:	4b20      	ldr	r3, [pc, #128]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d002      	beq.n	8004a58 <ConfigBLE_Ble+0x28>
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d014      	beq.n	8004a80 <ConfigBLE_Ble+0x50>
 8004a56:	e027      	b.n	8004aa8 <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004a58:	4b1c      	ldr	r3, [pc, #112]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	491c      	ldr	r1, [pc, #112]	@ (8004ad0 <ConfigBLE_Ble+0xa0>)
 8004a60:	481c      	ldr	r0, [pc, #112]	@ (8004ad4 <ConfigBLE_Ble+0xa4>)
 8004a62:	23fa      	movs	r3, #250	@ 0xfa
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f7ff ff8f 	bl	800498c <SendATreply_Ble>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d11f      	bne.n	8004ab8 <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004a78:	2005      	movs	r0, #5
 8004a7a:	f000 fb2d 	bl	80050d8 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004a7e:	e01b      	b.n	8004ab8 <ConfigBLE_Ble+0x88>
				ParamItem = 1;
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004a80:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	001a      	movs	r2, r3
 8004a86:	4912      	ldr	r1, [pc, #72]	@ (8004ad0 <ConfigBLE_Ble+0xa0>)
 8004a88:	4813      	ldr	r0, [pc, #76]	@ (8004ad8 <ConfigBLE_Ble+0xa8>)
 8004a8a:	23fa      	movs	r3, #250	@ 0xfa
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	f7ff ff7b 	bl	800498c <SendATreply_Ble>
 8004a96:	0002      	movs	r2, r0
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d10d      	bne.n	8004abc <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004aa0:	2006      	movs	r0, #6
 8004aa2:	f000 fb19 	bl	80050d8 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004aa6:	e009      	b.n	8004abc <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <ConfigBLE_Ble+0xac>)
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f000 fb12 	bl	80050d8 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ab4:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004ab6:	e002      	b.n	8004abe <ConfigBLE_Ble+0x8e>
			break;
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	e000      	b.n	8004abe <ConfigBLE_Ble+0x8e>
			break;
 8004abc:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200008e7 	.word	0x200008e7
 8004ac8:	50000800 	.word	0x50000800
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	0801b2e0 	.word	0x0801b2e0
 8004ad4:	0801b2ec 	.word	0x0801b2ec
 8004ad8:	0801b2f8 	.word	0x0801b2f8
 8004adc:	2000004c 	.word	0x2000004c

08004ae0 <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <GetParamBluetooth_Ble+0xa4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	2140      	movs	r1, #64	@ 0x40
 8004af2:	0018      	movs	r0, r3
 8004af4:	f00e febf 	bl	8013876 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004af8:	4b23      	ldr	r3, [pc, #140]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <GetParamBluetooth_Ble+0x26>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d033      	beq.n	8004b6c <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004b04:	e03a      	b.n	8004b7c <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	491f      	ldr	r1, [pc, #124]	@ (8004b8c <GetParamBluetooth_Ble+0xac>)
 8004b0e:	4820      	ldr	r0, [pc, #128]	@ (8004b90 <GetParamBluetooth_Ble+0xb0>)
 8004b10:	23fa      	movs	r3, #250	@ 0xfa
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	f7ff ff38 	bl	800498c <SendATreply_Ble>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d129      	bne.n	8004b7a <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <GetParamBluetooth_Ble+0xb4>)
 8004b28:	213d      	movs	r1, #61	@ 0x3d
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f016 f9fe 	bl	801af2c <strchr>
 8004b30:	0003      	movs	r3, r0
 8004b32:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e00f      	b.n	8004b5c <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	18d2      	adds	r2, r2, r3
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	7811      	ldrb	r1, [r2, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <GetParamBluetooth_Ble+0xb8>)
 8004b50:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004b52:	1dfb      	adds	r3, r7, #7
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	1dfb      	adds	r3, r7, #7
 8004b58:	3201      	adds	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	1dfb      	adds	r3, r7, #7
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b0b      	cmp	r3, #11
 8004b62:	d9eb      	bls.n	8004b3c <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b66:	2202      	movs	r2, #2
 8004b68:	601a      	str	r2, [r3, #0]
		 break;
 8004b6a:	e006      	b.n	8004b7a <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <GetParamBluetooth_Ble+0xbc>)
 8004b6e:	2203      	movs	r2, #3
 8004b70:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
	 break;
 8004b78:	e000      	b.n	8004b7c <GetParamBluetooth_Ble+0x9c>
		 break;
 8004b7a:	46c0      	nop			@ (mov r8, r8)
}
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	50000800 	.word	0x50000800
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	0801b314 	.word	0x0801b314
 8004b90:	0801b320 	.word	0x0801b320
 8004b94:	20000a24 	.word	0x20000a24
 8004b98:	20000df0 	.word	0x20000df0
 8004b9c:	2000004c 	.word	0x2000004c

08004ba0 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
    asm ("nop");
 8004ba6:	46c0      	nop			@ (mov r8, r8)

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d18 <TransmitReceive_Ble+0x178>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	2140      	movs	r1, #64	@ 0x40
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f00e fe61 	bl	8013876 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004bb4:	f7ff fe82 	bl	80048bc <serialEvent_Ble>
	if (receivecomplete_Ble){
 8004bb8:	4b58      	ldr	r3, [pc, #352]	@ (8004d1c <TransmitReceive_Ble+0x17c>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d100      	bne.n	8004bc2 <TransmitReceive_Ble+0x22>
 8004bc0:	e1db      	b.n	8004f7a <TransmitReceive_Ble+0x3da>
		 receivecomplete_Ble = 0;
 8004bc2:	4b56      	ldr	r3, [pc, #344]	@ (8004d1c <TransmitReceive_Ble+0x17c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8004bc8:	4b55      	ldr	r3, [pc, #340]	@ (8004d20 <TransmitReceive_Ble+0x180>)
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <TransmitReceive_Ble+0x36>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 8004bd0:	4b53      	ldr	r3, [pc, #332]	@ (8004d20 <TransmitReceive_Ble+0x180>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8004bd6:	4953      	ldr	r1, [pc, #332]	@ (8004d24 <TransmitReceive_Ble+0x184>)
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004bda:	2202      	movs	r2, #2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f016 f98f 	bl	801af00 <memcmp>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d102      	bne.n	8004bec <TransmitReceive_Ble+0x4c>
			 codeTX = 0x21;
 8004be6:	4b51      	ldr	r3, [pc, #324]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8004bec:	4950      	ldr	r1, [pc, #320]	@ (8004d30 <TransmitReceive_Ble+0x190>)
 8004bee:	4b4e      	ldr	r3, [pc, #312]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f016 f984 	bl	801af00 <memcmp>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d102      	bne.n	8004c02 <TransmitReceive_Ble+0x62>
			 codeTX = 0x5C;
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004bfe:	225c      	movs	r2, #92	@ 0x5c
 8004c00:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 8004c02:	494c      	ldr	r1, [pc, #304]	@ (8004d34 <TransmitReceive_Ble+0x194>)
 8004c04:	4b48      	ldr	r3, [pc, #288]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c06:	2202      	movs	r2, #2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f016 f979 	bl	801af00 <memcmp>
 8004c0e:	1e03      	subs	r3, r0, #0
 8004c10:	d102      	bne.n	8004c18 <TransmitReceive_Ble+0x78>
			 codeTX = 0x80;
 8004c12:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 8004c18:	4947      	ldr	r1, [pc, #284]	@ (8004d38 <TransmitReceive_Ble+0x198>)
 8004c1a:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f016 f96e 	bl	801af00 <memcmp>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d102      	bne.n	8004c2e <TransmitReceive_Ble+0x8e>
			 codeTX = 0x81;
 8004c28:	4b40      	ldr	r3, [pc, #256]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c2a:	2281      	movs	r2, #129	@ 0x81
 8004c2c:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8004c2e:	4943      	ldr	r1, [pc, #268]	@ (8004d3c <TransmitReceive_Ble+0x19c>)
 8004c30:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c32:	2202      	movs	r2, #2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f016 f963 	bl	801af00 <memcmp>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d102      	bne.n	8004c44 <TransmitReceive_Ble+0xa4>
			 codeTX = 0x3D;
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c40:	223d      	movs	r2, #61	@ 0x3d
 8004c42:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 8004c44:	493e      	ldr	r1, [pc, #248]	@ (8004d40 <TransmitReceive_Ble+0x1a0>)
 8004c46:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c48:	2202      	movs	r2, #2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f016 f958 	bl	801af00 <memcmp>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d106      	bne.n	8004c62 <TransmitReceive_Ble+0xc2>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 8004c54:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <TransmitReceive_Ble+0x1a4>)
 8004c56:	2272      	movs	r2, #114	@ 0x72
 8004c58:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8004c5a:	f000 fa53 	bl	8005104 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 8004c5e:	f000 fa5f 	bl	8005120 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 8004c62:	4939      	ldr	r1, [pc, #228]	@ (8004d48 <TransmitReceive_Ble+0x1a8>)
 8004c64:	4b30      	ldr	r3, [pc, #192]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c66:	2202      	movs	r2, #2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f016 f949 	bl	801af00 <memcmp>
 8004c6e:	1e03      	subs	r3, r0, #0
 8004c70:	d112      	bne.n	8004c98 <TransmitReceive_Ble+0xf8>
		    asm ("nop");
 8004c72:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 8004c74:	4b35      	ldr	r3, [pc, #212]	@ (8004d4c <TransmitReceive_Ble+0x1ac>)
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004c7a:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 8004c7c:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	4b34      	ldr	r3, [pc, #208]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004c82:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 8004c84:	4b34      	ldr	r3, [pc, #208]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004c8a:	4b33      	ldr	r3, [pc, #204]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004c90:	0011      	movs	r1, r2
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7ff fdee 	bl	8004874 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 8004c98:	4930      	ldr	r1, [pc, #192]	@ (8004d5c <TransmitReceive_Ble+0x1bc>)
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f016 f92e 	bl	801af00 <memcmp>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d16d      	bne.n	8004d84 <TransmitReceive_Ble+0x1e4>
			uint8_t foo,foo2;
		    asm ("nop");
 8004ca8:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 8004caa:	4b29      	ldr	r3, [pc, #164]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b0b      	cmp	r3, #11
 8004cbc:	d905      	bls.n	8004cca <TransmitReceive_Ble+0x12a>
			  foo = PasswordALG & (~0xF8);
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	2107      	movs	r1, #7
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	3302      	adds	r3, #2
 8004cd0:	4a23      	ldr	r2, [pc, #140]	@ (8004d60 <TransmitReceive_Ble+0x1c0>)
 8004cd2:	5cd2      	ldrb	r2, [r2, r3]
 8004cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 8004ce2:	4b11      	ldr	r3, [pc, #68]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004ce4:	789b      	ldrb	r3, [r3, #2]
 8004ce6:	1dba      	adds	r2, r7, #6
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d13a      	bne.n	8004d64 <TransmitReceive_Ble+0x1c4>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8004cee:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <TransmitReceive_Ble+0x1a4>)
 8004cf0:	2272      	movs	r2, #114	@ 0x72
 8004cf2:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 8004cf4:	4b17      	ldr	r3, [pc, #92]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004cf6:	22f1      	movs	r2, #241	@ 0xf1
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	4b16      	ldr	r3, [pc, #88]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004cfc:	223d      	movs	r2, #61	@ 0x3d
 8004cfe:	705a      	strb	r2, [r3, #1]
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004d06:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff fdb0 	bl	8004874 <SerializeString2>
 8004d14:	e036      	b.n	8004d84 <TransmitReceive_Ble+0x1e4>
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	50000800 	.word	0x50000800
 8004d1c:	200003c6 	.word	0x200003c6
 8004d20:	20000eec 	.word	0x20000eec
 8004d24:	0801b32c 	.word	0x0801b32c
 8004d28:	20000a24 	.word	0x20000a24
 8004d2c:	20000e34 	.word	0x20000e34
 8004d30:	0801b330 	.word	0x0801b330
 8004d34:	0801b334 	.word	0x0801b334
 8004d38:	0801b338 	.word	0x0801b338
 8004d3c:	0801b33c 	.word	0x0801b33c
 8004d40:	0801b340 	.word	0x0801b340
 8004d44:	20001105 	.word	0x20001105
 8004d48:	0801b344 	.word	0x0801b344
 8004d4c:	200003d5 	.word	0x200003d5
 8004d50:	200003d4 	.word	0x200003d4
 8004d54:	20000e48 	.word	0x20000e48
 8004d58:	20000e42 	.word	0x20000e42
 8004d5c:	0801b348 	.word	0x0801b348
 8004d60:	20000df0 	.word	0x20000df0
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 8004d64:	4b98      	ldr	r3, [pc, #608]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d66:	22f1      	movs	r2, #241	@ 0xf1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	4b97      	ldr	r3, [pc, #604]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d6c:	223e      	movs	r2, #62	@ 0x3e
 8004d6e:	705a      	strb	r2, [r3, #1]
 8004d70:	4b96      	ldr	r3, [pc, #600]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004d76:	4b95      	ldr	r3, [pc, #596]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	4b93      	ldr	r3, [pc, #588]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7ff fd78 	bl	8004874 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 8004d84:	4b92      	ldr	r3, [pc, #584]	@ (8004fd0 <TransmitReceive_Ble+0x430>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b72      	cmp	r3, #114	@ 0x72
 8004d8a:	d004      	beq.n	8004d96 <TransmitReceive_Ble+0x1f6>
 8004d8c:	4b91      	ldr	r3, [pc, #580]	@ (8004fd4 <TransmitReceive_Ble+0x434>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d100      	bne.n	8004d96 <TransmitReceive_Ble+0x1f6>
 8004d94:	e0f1      	b.n	8004f7a <TransmitReceive_Ble+0x3da>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 8004d96:	4990      	ldr	r1, [pc, #576]	@ (8004fd8 <TransmitReceive_Ble+0x438>)
 8004d98:	4b90      	ldr	r3, [pc, #576]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f016 f8af 	bl	801af00 <memcmp>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d102      	bne.n	8004dac <TransmitReceive_Ble+0x20c>
			 codeTX = 0x60;
 8004da6:	4b8e      	ldr	r3, [pc, #568]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004da8:	2260      	movs	r2, #96	@ 0x60
 8004daa:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 8004dac:	498d      	ldr	r1, [pc, #564]	@ (8004fe4 <TransmitReceive_Ble+0x444>)
 8004dae:	4b8b      	ldr	r3, [pc, #556]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004db0:	2202      	movs	r2, #2
 8004db2:	0018      	movs	r0, r3
 8004db4:	f016 f8a4 	bl	801af00 <memcmp>
 8004db8:	1e03      	subs	r3, r0, #0
 8004dba:	d102      	bne.n	8004dc2 <TransmitReceive_Ble+0x222>
			 codeTX = 0x61;
 8004dbc:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dbe:	2261      	movs	r2, #97	@ 0x61
 8004dc0:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 8004dc2:	4989      	ldr	r1, [pc, #548]	@ (8004fe8 <TransmitReceive_Ble+0x448>)
 8004dc4:	4b85      	ldr	r3, [pc, #532]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f016 f899 	bl	801af00 <memcmp>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d102      	bne.n	8004dd8 <TransmitReceive_Ble+0x238>
			 codeTX = 0x53;
 8004dd2:	4b83      	ldr	r3, [pc, #524]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dd4:	2253      	movs	r2, #83	@ 0x53
 8004dd6:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8004dd8:	4984      	ldr	r1, [pc, #528]	@ (8004fec <TransmitReceive_Ble+0x44c>)
 8004dda:	4b80      	ldr	r3, [pc, #512]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ddc:	2202      	movs	r2, #2
 8004dde:	0018      	movs	r0, r3
 8004de0:	f016 f88e 	bl	801af00 <memcmp>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d102      	bne.n	8004dee <TransmitReceive_Ble+0x24e>
			 codeTX = 0x50;
 8004de8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dea:	2250      	movs	r2, #80	@ 0x50
 8004dec:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8004dee:	4980      	ldr	r1, [pc, #512]	@ (8004ff0 <TransmitReceive_Ble+0x450>)
 8004df0:	4b7a      	ldr	r3, [pc, #488]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004df2:	2202      	movs	r2, #2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f016 f883 	bl	801af00 <memcmp>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d102      	bne.n	8004e04 <TransmitReceive_Ble+0x264>
			 codeTX = 0x51;
 8004dfe:	4b78      	ldr	r3, [pc, #480]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e00:	2251      	movs	r2, #81	@ 0x51
 8004e02:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e04:	497b      	ldr	r1, [pc, #492]	@ (8004ff4 <TransmitReceive_Ble+0x454>)
 8004e06:	4b75      	ldr	r3, [pc, #468]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e08:	2202      	movs	r2, #2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f016 f878 	bl	801af00 <memcmp>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d102      	bne.n	8004e1a <TransmitReceive_Ble+0x27a>
			 codeTX = 0x46;
 8004e14:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e16:	2246      	movs	r2, #70	@ 0x46
 8004e18:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e1a:	4977      	ldr	r1, [pc, #476]	@ (8004ff8 <TransmitReceive_Ble+0x458>)
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e1e:	2202      	movs	r2, #2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f016 f86d 	bl	801af00 <memcmp>
 8004e26:	1e03      	subs	r3, r0, #0
 8004e28:	d102      	bne.n	8004e30 <TransmitReceive_Ble+0x290>
			 codeTX = 0x49;
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e2c:	2249      	movs	r2, #73	@ 0x49
 8004e2e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e30:	4972      	ldr	r1, [pc, #456]	@ (8004ffc <TransmitReceive_Ble+0x45c>)
 8004e32:	4b6a      	ldr	r3, [pc, #424]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e34:	2202      	movs	r2, #2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f016 f862 	bl	801af00 <memcmp>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d102      	bne.n	8004e46 <TransmitReceive_Ble+0x2a6>
			 codeTX = 0x4A;
 8004e40:	4b67      	ldr	r3, [pc, #412]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e42:	224a      	movs	r2, #74	@ 0x4a
 8004e44:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 8004e46:	496e      	ldr	r1, [pc, #440]	@ (8005000 <TransmitReceive_Ble+0x460>)
 8004e48:	4b64      	ldr	r3, [pc, #400]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f016 f857 	bl	801af00 <memcmp>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d102      	bne.n	8004e5c <TransmitReceive_Ble+0x2bc>
			 codeTX = 0x54;
 8004e56:	4b62      	ldr	r3, [pc, #392]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e58:	2254      	movs	r2, #84	@ 0x54
 8004e5a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e5c:	4969      	ldr	r1, [pc, #420]	@ (8005004 <TransmitReceive_Ble+0x464>)
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e60:	2202      	movs	r2, #2
 8004e62:	0018      	movs	r0, r3
 8004e64:	f016 f84c 	bl	801af00 <memcmp>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d102      	bne.n	8004e72 <TransmitReceive_Ble+0x2d2>
	   		 codeTX = 0x80;
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8004e72:	4965      	ldr	r1, [pc, #404]	@ (8005008 <TransmitReceive_Ble+0x468>)
 8004e74:	4b59      	ldr	r3, [pc, #356]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e76:	2202      	movs	r2, #2
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f016 f841 	bl	801af00 <memcmp>
 8004e7e:	1e03      	subs	r3, r0, #0
 8004e80:	d102      	bne.n	8004e88 <TransmitReceive_Ble+0x2e8>
	   		 codeTX = 0x3D;
 8004e82:	4b57      	ldr	r3, [pc, #348]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e84:	223d      	movs	r2, #61	@ 0x3d
 8004e86:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 8004e88:	4960      	ldr	r1, [pc, #384]	@ (800500c <TransmitReceive_Ble+0x46c>)
 8004e8a:	4b54      	ldr	r3, [pc, #336]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f016 f836 	bl	801af00 <memcmp>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d102      	bne.n	8004e9e <TransmitReceive_Ble+0x2fe>
			 codeTX = 0x55;
 8004e98:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e9a:	2255      	movs	r2, #85	@ 0x55
 8004e9c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 8004e9e:	495c      	ldr	r1, [pc, #368]	@ (8005010 <TransmitReceive_Ble+0x470>)
 8004ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f016 f82b 	bl	801af00 <memcmp>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d102      	bne.n	8004eb4 <TransmitReceive_Ble+0x314>
	   		 codeTX = 0x56;
 8004eae:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004eb0:	2256      	movs	r2, #86	@ 0x56
 8004eb2:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 8004eb4:	4957      	ldr	r1, [pc, #348]	@ (8005014 <TransmitReceive_Ble+0x474>)
 8004eb6:	4b49      	ldr	r3, [pc, #292]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004eb8:	2202      	movs	r2, #2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f016 f820 	bl	801af00 <memcmp>
 8004ec0:	1e03      	subs	r3, r0, #0
 8004ec2:	d102      	bne.n	8004eca <TransmitReceive_Ble+0x32a>
	   		 codeTX = 0x57;
 8004ec4:	4b46      	ldr	r3, [pc, #280]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004ec6:	2257      	movs	r2, #87	@ 0x57
 8004ec8:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8004eca:	4953      	ldr	r1, [pc, #332]	@ (8005018 <TransmitReceive_Ble+0x478>)
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ece:	2202      	movs	r2, #2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f016 f815 	bl	801af00 <memcmp>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d102      	bne.n	8004ee0 <TransmitReceive_Ble+0x340>
	   		 codeTX = 0x58;
 8004eda:	4b41      	ldr	r3, [pc, #260]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004edc:	2258      	movs	r2, #88	@ 0x58
 8004ede:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8004ee0:	494e      	ldr	r1, [pc, #312]	@ (800501c <TransmitReceive_Ble+0x47c>)
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f016 f80a 	bl	801af00 <memcmp>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d102      	bne.n	8004ef6 <TransmitReceive_Ble+0x356>
	   		 codeTX = 0x59;
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004ef2:	2259      	movs	r2, #89	@ 0x59
 8004ef4:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 8004ef6:	494a      	ldr	r1, [pc, #296]	@ (8005020 <TransmitReceive_Ble+0x480>)
 8004ef8:	4b38      	ldr	r3, [pc, #224]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004efa:	2202      	movs	r2, #2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f015 ffff 	bl	801af00 <memcmp>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d102      	bne.n	8004f0c <TransmitReceive_Ble+0x36c>
	    	 codeTX = 0x5A;
 8004f06:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f08:	225a      	movs	r2, #90	@ 0x5a
 8004f0a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8004f0c:	4945      	ldr	r1, [pc, #276]	@ (8005024 <TransmitReceive_Ble+0x484>)
 8004f0e:	4b33      	ldr	r3, [pc, #204]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f10:	2202      	movs	r2, #2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f015 fff4 	bl	801af00 <memcmp>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d102      	bne.n	8004f22 <TransmitReceive_Ble+0x382>
	   		 codeTX = 0x5B;
 8004f1c:	4b30      	ldr	r3, [pc, #192]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f1e:	225b      	movs	r2, #91	@ 0x5b
 8004f20:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 8004f22:	4941      	ldr	r1, [pc, #260]	@ (8005028 <TransmitReceive_Ble+0x488>)
 8004f24:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f26:	2202      	movs	r2, #2
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f015 ffe9 	bl	801af00 <memcmp>
 8004f2e:	1e03      	subs	r3, r0, #0
 8004f30:	d102      	bne.n	8004f38 <TransmitReceive_Ble+0x398>
		 	 codeTX = 0x5C;
 8004f32:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f34:	225c      	movs	r2, #92	@ 0x5c
 8004f36:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8004f38:	493c      	ldr	r1, [pc, #240]	@ (800502c <TransmitReceive_Ble+0x48c>)
 8004f3a:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f015 ffde 	bl	801af00 <memcmp>
 8004f44:	1e03      	subs	r3, r0, #0
 8004f46:	d102      	bne.n	8004f4e <TransmitReceive_Ble+0x3ae>
			  codeTX = 0x5F;
 8004f48:	4b25      	ldr	r3, [pc, #148]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f4a:	225f      	movs	r2, #95	@ 0x5f
 8004f4c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 8004f4e:	4938      	ldr	r1, [pc, #224]	@ (8005030 <TransmitReceive_Ble+0x490>)
 8004f50:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f52:	2202      	movs	r2, #2
 8004f54:	0018      	movs	r0, r3
 8004f56:	f015 ffd3 	bl	801af00 <memcmp>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d102      	bne.n	8004f64 <TransmitReceive_Ble+0x3c4>
	   		  codeTX = 0x62;
 8004f5e:	4b20      	ldr	r3, [pc, #128]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f60:	2262      	movs	r2, #98	@ 0x62
 8004f62:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 8004f64:	4933      	ldr	r1, [pc, #204]	@ (8005034 <TransmitReceive_Ble+0x494>)
 8004f66:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f68:	2202      	movs	r2, #2
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f015 ffc8 	bl	801af00 <memcmp>
 8004f70:	1e03      	subs	r3, r0, #0
 8004f72:	d102      	bne.n	8004f7a <TransmitReceive_Ble+0x3da>
	   		  codeTX = 0x63;
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f76:	2263      	movs	r2, #99	@ 0x63
 8004f78:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 8004f7a:	f004 fa03 	bl	8009384 <millis>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	001a      	movs	r2, r3
 8004f82:	4b2d      	ldr	r3, [pc, #180]	@ (8005038 <TransmitReceive_Ble+0x498>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b07      	cmp	r3, #7
 8004f8a:	d918      	bls.n	8004fbe <TransmitReceive_Ble+0x41e>
		TestMessMilis = millis();
 8004f8c:	f004 f9fa 	bl	8009384 <millis>
 8004f90:	0003      	movs	r3, r0
 8004f92:	001a      	movs	r2, r3
 8004f94:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <TransmitReceive_Ble+0x498>)
 8004f96:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 8004f98:	4b28      	ldr	r3, [pc, #160]	@ (800503c <TransmitReceive_Ble+0x49c>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b55      	cmp	r3, #85	@ 0x55
 8004f9e:	d102      	bne.n	8004fa6 <TransmitReceive_Ble+0x406>
		    asm ("nop");
 8004fa0:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 8004fa2:	f008 fb5b 	bl	800d65c <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 8004fa6:	4b25      	ldr	r3, [pc, #148]	@ (800503c <TransmitReceive_Ble+0x49c>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b55      	cmp	r3, #85	@ 0x55
 8004fac:	d107      	bne.n	8004fbe <TransmitReceive_Ble+0x41e>
		    asm ("nop");
 8004fae:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fc5b 	bl	8004874 <SerializeString2>
		}
	}

}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000e48 	.word	0x20000e48
 8004fcc:	20000e42 	.word	0x20000e42
 8004fd0:	20001105 	.word	0x20001105
 8004fd4:	20001107 	.word	0x20001107
 8004fd8:	0801b34c 	.word	0x0801b34c
 8004fdc:	20000a24 	.word	0x20000a24
 8004fe0:	20000e34 	.word	0x20000e34
 8004fe4:	0801b350 	.word	0x0801b350
 8004fe8:	0801b354 	.word	0x0801b354
 8004fec:	0801b358 	.word	0x0801b358
 8004ff0:	0801b35c 	.word	0x0801b35c
 8004ff4:	0801b360 	.word	0x0801b360
 8004ff8:	0801b364 	.word	0x0801b364
 8004ffc:	0801b368 	.word	0x0801b368
 8005000:	0801b36c 	.word	0x0801b36c
 8005004:	0801b334 	.word	0x0801b334
 8005008:	0801b33c 	.word	0x0801b33c
 800500c:	0801b370 	.word	0x0801b370
 8005010:	0801b374 	.word	0x0801b374
 8005014:	0801b378 	.word	0x0801b378
 8005018:	0801b37c 	.word	0x0801b37c
 800501c:	0801b380 	.word	0x0801b380
 8005020:	0801b384 	.word	0x0801b384
 8005024:	0801b388 	.word	0x0801b388
 8005028:	0801b330 	.word	0x0801b330
 800502c:	0801b38c 	.word	0x0801b38c
 8005030:	0801b390 	.word	0x0801b390
 8005034:	0801b394 	.word	0x0801b394
 8005038:	200003d0 	.word	0x200003d0
 800503c:	20000e29 	.word	0x20000e29

08005040 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8005044:	4b1f      	ldr	r3, [pc, #124]	@ (80050c4 <Read_Inpunts_ble+0x84>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d037      	beq.n	80050bc <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 800504c:	2380      	movs	r3, #128	@ 0x80
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <Read_Inpunts_ble+0x88>)
 8005052:	0019      	movs	r1, r3
 8005054:	0010      	movs	r0, r2
 8005056:	f00e fbf1 	bl	801383c <HAL_GPIO_ReadPin>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d017      	beq.n	800508e <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b32      	cmp	r3, #50	@ 0x32
 8005064:	d805      	bhi.n	8005072 <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 8005066:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005070:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 8005072:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b32      	cmp	r3, #50	@ 0x32
 8005078:	d120      	bne.n	80050bc <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <Read_Inpunts_ble+0x90>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 8005080:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005082:	2233      	movs	r2, #51	@ 0x33
 8005084:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <Read_Inpunts_ble+0x94>)
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 800508c:	e016      	b.n	80050bc <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 800508e:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	3b01      	subs	r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050a0:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d108      	bne.n	80050bc <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <Read_Inpunts_ble+0x90>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 80050b6:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <Read_Inpunts_ble+0x94>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	200008e4 	.word	0x200008e4
 80050c8:	50000400 	.word	0x50000400
 80050cc:	200003cc 	.word	0x200003cc
 80050d0:	200008e8 	.word	0x200008e8
 80050d4:	20001106 	.word	0x20001106

080050d8 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	0002      	movs	r2, r0
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <WaitSerAnsw_Ble_func+0x24>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <WaitSerAnsw_Ble_func+0x28>)
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	200003c5 	.word	0x200003c5
 8005100:	20000000 	.word	0x20000000

08005104 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <grabacion_exitosa_handshake+0x18>)
 800510a:	22f1      	movs	r2, #241	@ 0xf1
 800510c:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800510e:	4b03      	ldr	r3, [pc, #12]	@ (800511c <grabacion_exitosa_handshake+0x18>)
 8005110:	223d      	movs	r2, #61	@ 0x3d
 8005112:	705a      	strb	r2, [r3, #1]
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	20000df0 	.word	0x20000df0

08005120 <manda_transmision>:

void manda_transmision (void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <manda_transmision+0x34>)
 8005126:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <manda_transmision+0x38>)
 8005128:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <manda_transmision+0x3c>)
 800512c:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <manda_transmision+0x38>)
 800512e:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <manda_transmision+0x40>)
 8005132:	4a0c      	ldr	r2, [pc, #48]	@ (8005164 <manda_transmision+0x44>)
 8005134:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 8005136:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <manda_transmision+0x48>)
 8005138:	2202      	movs	r2, #2
 800513a:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <manda_transmision+0x4c>)
 800513e:	2201      	movs	r2, #1
 8005140:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <manda_transmision+0x50>)
 8005144:	2255      	movs	r2, #85	@ 0x55
 8005146:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <manda_transmision+0x54>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]

}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000e24 	.word	0x20000e24
 8005158:	20000df0 	.word	0x20000df0
 800515c:	20000e1c 	.word	0x20000e1c
 8005160:	20000e20 	.word	0x20000e20
 8005164:	20000df1 	.word	0x20000df1
 8005168:	20000e40 	.word	0x20000e40
 800516c:	20000e2c 	.word	0x20000e2c
 8005170:	20000e29 	.word	0x20000e29
 8005174:	20000e34 	.word	0x20000e34

08005178 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 800517c:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <main10+0x108>)
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 8005184:	4b3f      	ldr	r3, [pc, #252]	@ (8005284 <main10+0x10c>)
 8005186:	2201      	movs	r2, #1
 8005188:	2108      	movs	r1, #8
 800518a:	0018      	movs	r0, r3
 800518c:	f00e fb73 	bl	8013876 <HAL_GPIO_WritePin>
 8005190:	e005      	b.n	800519e <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 8005192:	4b3c      	ldr	r3, [pc, #240]	@ (8005284 <main10+0x10c>)
 8005194:	2200      	movs	r2, #0
 8005196:	2108      	movs	r1, #8
 8005198:	0018      	movs	r0, r3
 800519a:	f00e fb6c 	bl	8013876 <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 800519e:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <main10+0x108>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	0099      	lsls	r1, r3, #2
 80051aa:	23a0      	movs	r3, #160	@ 0xa0
 80051ac:	05db      	lsls	r3, r3, #23
 80051ae:	2201      	movs	r2, #1
 80051b0:	0018      	movs	r0, r3
 80051b2:	f00e fb60 	bl	8013876 <HAL_GPIO_WritePin>
 80051b6:	e007      	b.n	80051c8 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	0099      	lsls	r1, r3, #2
 80051bc:	23a0      	movs	r3, #160	@ 0xa0
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	2200      	movs	r2, #0
 80051c2:	0018      	movs	r0, r3
 80051c4:	f00e fb57 	bl	8013876 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 80051c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <main10+0x108>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	482b      	ldr	r0, [pc, #172]	@ (8005284 <main10+0x10c>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	0019      	movs	r1, r3
 80051da:	f00e fb4c 	bl	8013876 <HAL_GPIO_WritePin>
 80051de:	e006      	b.n	80051ee <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4827      	ldr	r0, [pc, #156]	@ (8005284 <main10+0x10c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	0019      	movs	r1, r3
 80051ea:	f00e fb44 	bl	8013876 <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <main10+0x108>)
 80051f0:	791b      	ldrb	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	0059      	lsls	r1, r3, #1
 80051fa:	23a0      	movs	r3, #160	@ 0xa0
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	2201      	movs	r2, #1
 8005200:	0018      	movs	r0, r3
 8005202:	f00e fb38 	bl	8013876 <HAL_GPIO_WritePin>
 8005206:	e007      	b.n	8005218 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	0059      	lsls	r1, r3, #1
 800520c:	23a0      	movs	r3, #160	@ 0xa0
 800520e:	05db      	lsls	r3, r3, #23
 8005210:	2200      	movs	r2, #0
 8005212:	0018      	movs	r0, r3
 8005214:	f00e fb2f 	bl	8013876 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005218:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <main10+0x110>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <main10+0x110>)
 8005222:	701a      	strb	r2, [r3, #0]
		if(portX[rel_fn] && (cntproc & 0x01))
 8005224:	4b16      	ldr	r3, [pc, #88]	@ (8005280 <main10+0x108>)
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <main10+0xd2>
 800522c:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <main10+0x110>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	001a      	movs	r2, r3
 8005232:	2301      	movs	r3, #1
 8005234:	4013      	ands	r3, r2
 8005236:	d008      	beq.n	800524a <main10+0xd2>
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
 8005238:	2380      	movs	r3, #128	@ 0x80
 800523a:	00d9      	lsls	r1, r3, #3
 800523c:	23a0      	movs	r3, #160	@ 0xa0
 800523e:	05db      	lsls	r3, r3, #23
 8005240:	2201      	movs	r2, #1
 8005242:	0018      	movs	r0, r3
 8005244:	f00e fb17 	bl	8013876 <HAL_GPIO_WritePin>
 8005248:	e007      	b.n	800525a <main10+0xe2>
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	00d9      	lsls	r1, r3, #3
 800524e:	23a0      	movs	r3, #160	@ 0xa0
 8005250:	05db      	lsls	r3, r3, #23
 8005252:	2200      	movs	r2, #0
 8005254:	0018      	movs	r0, r3
 8005256:	f00e fb0e 	bl	8013876 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <main10+0x114>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <main10+0x114>)
 8005264:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 8005266:	4b09      	ldr	r3, [pc, #36]	@ (800528c <main10+0x114>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b27      	cmp	r3, #39	@ 0x27
 800526c:	d904      	bls.n	8005278 <main10+0x100>
        asm ("nop");
 800526e:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 8005270:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 8005272:	4b06      	ldr	r3, [pc, #24]	@ (800528c <main10+0x114>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 8005278:	46c0      	nop			@ (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	20000b68 	.word	0x20000b68
 8005284:	50000800 	.word	0x50000800
 8005288:	20000b59 	.word	0x20000b59
 800528c:	20000bce 	.word	0x20000bce

08005290 <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 8005294:	4b46      	ldr	r3, [pc, #280]	@ (80053b0 <retardoDeActuadores+0x120>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4053      	eors	r3, r2
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d114      	bne.n	80052cc <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80052a2:	4b44      	ldr	r3, [pc, #272]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 80052aa:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4053      	eors	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10e      	bne.n	80052d6 <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	705a      	strb	r2, [r3, #1]
 80052be:	e000      	b.n	80052c2 <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 80052c0:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 80052c2:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <retardoDeActuadores+0x128>)
 80052c4:	0018      	movs	r0, r3
 80052c6:	f001 fe56 	bl	8006f76 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 80052ca:	e005      	b.n	80052d8 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 80052cc:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	705a      	strb	r2, [r3, #1]
 80052d4:	e000      	b.n	80052d8 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 80052d6:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 80052d8:	4b35      	ldr	r3, [pc, #212]	@ (80053b0 <retardoDeActuadores+0x120>)
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2201      	movs	r2, #1
 80052de:	4053      	eors	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 80052e6:	4b33      	ldr	r3, [pc, #204]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052e8:	789b      	ldrb	r3, [r3, #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4053      	eors	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10e      	bne.n	800531a <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80052fc:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052fe:	2201      	movs	r2, #1
 8005300:	709a      	strb	r2, [r3, #2]
 8005302:	e000      	b.n	8005306 <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8005304:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8005306:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <retardoDeActuadores+0x12c>)
 8005308:	0018      	movs	r0, r3
 800530a:	f001 fe34 	bl	8006f76 <decwreg>
			goto	revisa_ret_ventilador;		//
 800530e:	e005      	b.n	800531c <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 8005310:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 8005312:	4b28      	ldr	r3, [pc, #160]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005314:	2200      	movs	r2, #0
 8005316:	709a      	strb	r2, [r3, #2]
 8005318:	e000      	b.n	800531c <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 800531a:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <retardoDeActuadores+0x130>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4053      	eors	r3, r2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d114      	bne.n	8005354 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 800532a:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <retardoDeActuadores+0x124>)
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 8005332:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	4053      	eors	r3, r2
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10e      	bne.n	800535e <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005340:	4b1c      	ldr	r3, [pc, #112]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005342:	2201      	movs	r2, #1
 8005344:	70da      	strb	r2, [r3, #3]
 8005346:	e000      	b.n	800534a <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8005348:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <retardoDeActuadores+0x134>)
 800534c:	0018      	movs	r0, r3
 800534e:	f001 fe12 	bl	8006f76 <decwreg>
			goto	revisa_ret_lampara;		//
 8005352:	e005      	b.n	8005360 <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 8005354:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005358:	2200      	movs	r2, #0
 800535a:	70da      	strb	r2, [r3, #3]
 800535c:	e000      	b.n	8005360 <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 800535e:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 8005360:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <retardoDeActuadores+0x120>)
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	2201      	movs	r2, #1
 8005366:	4053      	eors	r3, r2
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 800536e:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 8005376:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	4053      	eors	r3, r2
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10e      	bne.n	80053a2 <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005386:	2201      	movs	r2, #1
 8005388:	711a      	strb	r2, [r3, #4]
 800538a:	e000      	b.n	800538e <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 800538c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <retardoDeActuadores+0x138>)
 8005390:	0018      	movs	r0, r3
 8005392:	f001 fdf0 	bl	8006f76 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 8005396:	e005      	b.n	80053a4 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 8005398:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 800539a:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <retardoDeActuadores+0x124>)
 800539c:	2200      	movs	r2, #0
 800539e:	711a      	strb	r2, [r3, #4]
 80053a0:	e000      	b.n	80053a4 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80053a2:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80053a4:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <retardoDeActuadores+0x124>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000bb4 	.word	0x20000bb4
 80053b4:	20000c6c 	.word	0x20000c6c
 80053b8:	20000c66 	.word	0x20000c66
 80053bc:	20000c67 	.word	0x20000c67
 80053c0:	20000bf0 	.word	0x20000bf0
 80053c4:	20000c68 	.word	0x20000c68
 80053c8:	20000c69 	.word	0x20000c69

080053cc <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
    asm ("nop");
 80053d0:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 80053d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 80053d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	2203      	movs	r2, #3
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <calculando_tiempo_UNIX+0x2e>
 80053e6:	4b48      	ldr	r3, [pc, #288]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d905      	bls.n	80053fa <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 80053ee:	4b44      	ldr	r3, [pc, #272]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a46      	ldr	r2, [pc, #280]	@ (800550c <calculando_tiempo_UNIX+0x140>)
 80053f4:	189a      	adds	r2, r3, r2
 80053f6:	4b42      	ldr	r3, [pc, #264]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053f8:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 80053fa:	4b43      	ldr	r3, [pc, #268]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 8005402:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	1e5a      	subs	r2, r3, #1
 8005408:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <calculando_tiempo_UNIX+0x144>)
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	58d2      	ldr	r2, [r2, r3]
 800540e:	0013      	movs	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	189b      	adds	r3, r3, r2
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	0113      	lsls	r3, r2, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	01db      	lsls	r3, r3, #7
 800541e:	001a      	movs	r2, r3
 8005420:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	18d2      	adds	r2, r2, r3
 8005426:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005428:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 800542a:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	@ (8005514 <calculando_tiempo_UNIX+0x148>)
 8005430:	189a      	adds	r2, r3, r2
 8005432:	0013      	movs	r3, r2
 8005434:	025b      	lsls	r3, r3, #9
 8005436:	189b      	adds	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	189b      	adds	r3, r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	189b      	adds	r3, r3, r2
 8005440:	011a      	lsls	r2, r3, #4
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	01d3      	lsls	r3, r2, #7
 8005446:	001a      	movs	r2, r3
 8005448:	0013      	movs	r3, r2
 800544a:	001a      	movs	r2, r3
 800544c:	4b2c      	ldr	r3, [pc, #176]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	4b2b      	ldr	r3, [pc, #172]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005454:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 8005456:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <calculando_tiempo_UNIX+0x14c>)
 800545c:	4694      	mov	ip, r2
 800545e:	4463      	add	r3, ip
 8005460:	2b00      	cmp	r3, #0
 8005462:	da00      	bge.n	8005466 <calculando_tiempo_UNIX+0x9a>
 8005464:	3303      	adds	r3, #3
 8005466:	109b      	asrs	r3, r3, #2
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b2c      	ldr	r3, [pc, #176]	@ (800551c <calculando_tiempo_UNIX+0x150>)
 800546c:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 800546e:	4b2b      	ldr	r3, [pc, #172]	@ (800551c <calculando_tiempo_UNIX+0x150>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	001a      	movs	r2, r3
 8005474:	0013      	movs	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	189b      	adds	r3, r3, r2
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	0113      	lsls	r3, r2, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	001a      	movs	r2, r3
 8005486:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	18d2      	adds	r2, r2, r3
 800548c:	4b1c      	ldr	r3, [pc, #112]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 800548e:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 8005490:	4b23      	ldr	r3, [pc, #140]	@ (8005520 <calculando_tiempo_UNIX+0x154>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	0013      	movs	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	189b      	adds	r3, r3, r2
 800549c:	011a      	lsls	r2, r3, #4
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	0113      	lsls	r3, r2, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	001a      	movs	r2, r3
 80054a8:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	18d2      	adds	r2, r2, r3
 80054ae:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054b0:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 80054b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <calculando_tiempo_UNIX+0x158>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	001a      	movs	r2, r3
 80054b8:	0013      	movs	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	0113      	lsls	r3, r2, #4
 80054c4:	001a      	movs	r2, r3
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	18d2      	adds	r2, r2, r3
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054ce:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 80054d0:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <calculando_tiempo_UNIX+0x15c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	001a      	movs	r2, r3
 80054d6:	0013      	movs	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	001a      	movs	r2, r3
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	18d2      	adds	r2, r2, r3
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054e8:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 80054ea:	4b10      	ldr	r3, [pc, #64]	@ (800552c <calculando_tiempo_UNIX+0x160>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	4b03      	ldr	r3, [pc, #12]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	4b02      	ldr	r3, [pc, #8]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054f8:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200010a8 	.word	0x200010a8
 8005504:	200010a0 	.word	0x200010a0
 8005508:	200010a2 	.word	0x200010a2
 800550c:	00015180 	.word	0x00015180
 8005510:	200001b8 	.word	0x200001b8
 8005514:	fffff84e 	.word	0xfffff84e
 8005518:	fffff84f 	.word	0xfffff84f
 800551c:	200010ac 	.word	0x200010ac
 8005520:	200010a3 	.word	0x200010a3
 8005524:	200010a4 	.word	0x200010a4
 8005528:	200010a5 	.word	0x200010a5
 800552c:	200010a6 	.word	0x200010a6

08005530 <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;
extern uint16_t temperatureRTP;

//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	000a      	movs	r2, r1
 800553a:	1cfb      	adds	r3, r7, #3
 800553c:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 800553e:	230e      	movs	r3, #14
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2200      	movs	r2, #0
 8005544:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8005546:	230d      	movs	r3, #13
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e011      	b.n	8005574 <prom8m1b+0x44>
		foo += array[i];
 8005550:	200d      	movs	r0, #13
 8005552:	183b      	adds	r3, r7, r0
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	0019      	movs	r1, r3
 800555e:	220e      	movs	r2, #14
 8005560:	18bb      	adds	r3, r7, r2
 8005562:	18ba      	adds	r2, r7, r2
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	188a      	adds	r2, r1, r2
 8005568:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 800556a:	183b      	adds	r3, r7, r0
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	183b      	adds	r3, r7, r0
 8005570:	3201      	adds	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	230d      	movs	r3, #13
 8005576:	18fa      	adds	r2, r7, r3
 8005578:	1cfb      	adds	r3, r7, #3
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3e6      	bcc.n	8005550 <prom8m1b+0x20>
	}
	foo /=  prom;
 8005582:	240e      	movs	r4, #14
 8005584:	193b      	adds	r3, r7, r4
 8005586:	881a      	ldrh	r2, [r3, #0]
 8005588:	1cfb      	adds	r3, r7, #3
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	0019      	movs	r1, r3
 800558e:	0010      	movs	r0, r2
 8005590:	f7fa fe4c 	bl	800022c <__divsi3>
 8005594:	0003      	movs	r3, r0
 8005596:	001a      	movs	r2, r3
 8005598:	193b      	adds	r3, r7, r4
 800559a:	801a      	strh	r2, [r3, #0]
	return foo;
 800559c:	193b      	adds	r3, r7, r4
 800559e:	881b      	ldrh	r3, [r3, #0]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b005      	add	sp, #20
 80055a6:	bd90      	pop	{r4, r7, pc}

080055a8 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 80055ae:	4bde      	ldr	r3, [pc, #888]	@ (8005928 <prog_param+0x380>)
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4053      	eors	r3, r2
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d137      	bne.n	800562c <prog_param+0x84>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 80055bc:	4bdb      	ldr	r3, [pc, #876]	@ (800592c <prog_param+0x384>)
 80055be:	2201      	movs	r2, #1
 80055c0:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 80055c2:	4bdb      	ldr	r3, [pc, #876]	@ (8005930 <prog_param+0x388>)
 80055c4:	2214      	movs	r2, #20
 80055c6:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 80055c8:	4bda      	ldr	r3, [pc, #872]	@ (8005934 <prog_param+0x38c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 80055ce:	4bda      	ldr	r3, [pc, #872]	@ (8005938 <prog_param+0x390>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80055d4:	230f      	movs	r3, #15
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e00a      	b.n	80055f4 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 80055de:	200f      	movs	r0, #15
 80055e0:	183b      	adds	r3, r7, r0
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	4ad5      	ldr	r2, [pc, #852]	@ (800593c <prog_param+0x394>)
 80055e6:	2100      	movs	r1, #0
 80055e8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 80055ea:	183b      	adds	r3, r7, r0
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	3201      	adds	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	230f      	movs	r3, #15
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d9ef      	bls.n	80055de <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
 80055fe:	4bd0      	ldr	r3, [pc, #832]	@ (8005940 <prog_param+0x398>)
 8005600:	60bb      	str	r3, [r7, #8]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005602:	4bd0      	ldr	r3, [pc, #832]	@ (8005944 <prog_param+0x39c>)
 8005604:	607b      	str	r3, [r7, #4]

		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0018      	movs	r0, r3
 800560a:	f7fd fb07 	bl	8002c1c <findLastValue>
 800560e:	0003      	movs	r3, r0
 8005610:	b2da      	uxtb	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	701a      	strb	r2, [r3, #0]
		X++;//incw X
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
		Y++;//incw Y
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4bc8      	ldr	r3, [pc, #800]	@ (8005948 <prog_param+0x3a0>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d802      	bhi.n	8005630 <prog_param+0x88>
			goto copy_eeprom;//jrule copy_eeprom
 800562a:	e7ec      	b.n	8005606 <prog_param+0x5e>
			goto no_set_prog;
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	e000      	b.n	8005632 <prog_param+0x8a>
		}

no_set_prog:
 8005630:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005632:	4bbe      	ldr	r3, [pc, #760]	@ (800592c <prog_param+0x384>)
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <prog_param+0x96>
 800563a:	f000 fc2b 	bl	8005e94 <prog_param+0x8ec>
			goto ask_btn_prsd;
 800563e:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005640:	1cfb      	adds	r3, r7, #3
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e00d      	b.n	8005664 <prog_param+0xbc>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005648:	1cfb      	adds	r3, r7, #3
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4abf      	ldr	r2, [pc, #764]	@ (800594c <prog_param+0x3a4>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	2201      	movs	r2, #1
 8005652:	4053      	eors	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <prog_param+0xcc>
	for(uint8_t k=0; k<8; k++){
 800565a:	1cfb      	adds	r3, r7, #3
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	1cfb      	adds	r3, r7, #3
 8005660:	3201      	adds	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	1cfb      	adds	r3, r7, #3
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b07      	cmp	r3, #7
 800566a:	d9ed      	bls.n	8005648 <prog_param+0xa0>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 800566c:	4bb0      	ldr	r3, [pc, #704]	@ (8005930 <prog_param+0x388>)
 800566e:	2214      	movs	r2, #20
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e000      	b.n	8005676 <prog_param+0xce>
			goto no_btn_pres; //jreq no_btn_pres
 8005674:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005676:	4bae      	ldr	r3, [pc, #696]	@ (8005930 <prog_param+0x388>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <prog_param+0xda>
 800567e:	f000 fbf4 	bl	8005e6a <prog_param+0x8c2>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005682:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005684:	4ba9      	ldr	r3, [pc, #676]	@ (800592c <prog_param+0x384>)
 8005686:	789b      	ldrb	r3, [r3, #2]
 8005688:	2201      	movs	r2, #1
 800568a:	4053      	eors	r3, r2
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d114      	bne.n	80056bc <prog_param+0x114>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005692:	4ba6      	ldr	r3, [pc, #664]	@ (800592c <prog_param+0x384>)
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d100      	bne.n	800569c <prog_param+0xf4>
 800569a:	e26a      	b.n	8005b72 <prog_param+0x5ca>
			goto jmp_nv2Menu2;
 800569c:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 800569e:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 80056a0:	4bab      	ldr	r3, [pc, #684]	@ (8005950 <prog_param+0x3a8>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2207      	movs	r2, #7
 80056a6:	4013      	ands	r3, r2
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4baa      	ldr	r3, [pc, #680]	@ (8005954 <prog_param+0x3ac>)
 80056ac:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 80056ae:	4ba9      	ldr	r3, [pc, #676]	@ (8005954 <prog_param+0x3ac>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d901      	bls.n	80056ba <prog_param+0x112>
 80056b6:	f000 fbc6 	bl	8005e46 <prog_param+0x89e>
 80056ba:	e305      	b.n	8005cc8 <prog_param+0x720>
			goto noMenu2;
 80056bc:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 80056be:	4b9b      	ldr	r3, [pc, #620]	@ (800592c <prog_param+0x384>)
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2201      	movs	r2, #1
 80056c4:	4053      	eors	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d100      	bne.n	80056ce <prog_param+0x126>
 80056cc:	e0cc      	b.n	8005868 <prog_param+0x2c0>
			goto sel_param;
 80056ce:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 80056d0:	4b9e      	ldr	r3, [pc, #632]	@ (800594c <prog_param+0x3a4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 80056d6:	4b9d      	ldr	r3, [pc, #628]	@ (800594c <prog_param+0x3a4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 80056dc:	4b96      	ldr	r3, [pc, #600]	@ (8005938 <prog_param+0x390>)
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	4b9c      	ldr	r3, [pc, #624]	@ (8005954 <prog_param+0x3ac>)
 80056e2:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 80056e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005958 <prog_param+0x3b0>)
 80056e6:	2209      	movs	r2, #9
 80056e8:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 80056ea:	4b9c      	ldr	r3, [pc, #624]	@ (800595c <prog_param+0x3b4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 80056f0:	f000 fbdc 	bl	8005eac <md_dif_math>
		param = wreg;		//mov param,wreg
 80056f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005960 <prog_param+0x3b8>)
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005938 <prog_param+0x390>)
 80056fa:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 80056fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005938 <prog_param+0x390>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	220f      	movs	r2, #15
 8005702:	4013      	ands	r3, r2
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4b93      	ldr	r3, [pc, #588]	@ (8005954 <prog_param+0x3ac>)
 8005708:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 800570a:	4b92      	ldr	r3, [pc, #584]	@ (8005954 <prog_param+0x3ac>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b09      	cmp	r3, #9
 8005710:	d840      	bhi.n	8005794 <prog_param+0x1ec>
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	4b93      	ldr	r3, [pc, #588]	@ (8005964 <prog_param+0x3bc>)
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 800571c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 800571e:	2125      	movs	r1, #37	@ 0x25
 8005720:	2005      	movs	r0, #5
 8005722:	f001 fd3d 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 8005726:	e03a      	b.n	800579e <prog_param+0x1f6>
			case 1: goto opc01m01;
 8005728:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 800572a:	210f      	movs	r1, #15
 800572c:	200d      	movs	r0, #13
 800572e:	f001 fd37 	bl	80071a0 <op_menu>
		goto ask_enter; // jra ask_enter
 8005732:	e034      	b.n	800579e <prog_param+0x1f6>
			case 2: goto opc02m01;
 8005734:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005736:	210a      	movs	r1, #10
 8005738:	2020      	movs	r0, #32
 800573a:	f001 fd31 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 800573e:	e02e      	b.n	800579e <prog_param+0x1f6>
			case 3: goto opc03m01;
 8005740:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005742:	210b      	movs	r1, #11
 8005744:	2020      	movs	r0, #32
 8005746:	f001 fd2b 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 800574a:	e028      	b.n	800579e <prog_param+0x1f6>
			case 4: goto opc04m01;
 800574c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 800574e:	210f      	movs	r1, #15
 8005750:	2000      	movs	r0, #0
 8005752:	f001 fd25 	bl	80071a0 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005756:	e022      	b.n	800579e <prog_param+0x1f6>
			case 5: goto opc05m01;
 8005758:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 800575a:	2105      	movs	r1, #5
 800575c:	2025      	movs	r0, #37	@ 0x25
 800575e:	f001 fd1f 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 8005762:	e01c      	b.n	800579e <prog_param+0x1f6>
			case 6: goto opc06m01;
 8005764:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005766:	2127      	movs	r1, #39	@ 0x27
 8005768:	200f      	movs	r0, #15
 800576a:	f001 fd19 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 800576e:	e016      	b.n	800579e <prog_param+0x1f6>
			case 7: goto opc07m01;
 8005770:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005772:	210a      	movs	r1, #10
 8005774:	200f      	movs	r0, #15
 8005776:	f001 fd13 	bl	80071a0 <op_menu>
		goto ask_enter;//jra	ask_enter
 800577a:	e010      	b.n	800579e <prog_param+0x1f6>
			case 8: goto opc08m01;
 800577c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 800577e:	210e      	movs	r1, #14
 8005780:	2005      	movs	r0, #5
 8005782:	f001 fd0d 	bl	80071a0 <op_menu>
		goto ask_enter;//jra ask_enter
 8005786:	e00a      	b.n	800579e <prog_param+0x1f6>
			case 9: goto opc09m01;
 8005788:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 800578a:	210e      	movs	r1, #14
 800578c:	201f      	movs	r0, #31
 800578e:	f001 fd07 	bl	80071a0 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005792:	e004      	b.n	800579e <prog_param+0x1f6>
			default: goto opcNA;
 8005794:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005796:	2126      	movs	r1, #38	@ 0x26
 8005798:	2026      	movs	r0, #38	@ 0x26
 800579a:	f001 fd01 	bl	80071a0 <op_menu>
		datled_clear();
 800579e:	f001 fd19 	bl	80071d4 <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 80057a2:	4b6a      	ldr	r3, [pc, #424]	@ (800594c <prog_param+0x3a4>)
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4053      	eors	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d157      	bne.n	8005860 <prog_param+0x2b8>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 80057b0:	4b5e      	ldr	r3, [pc, #376]	@ (800592c <prog_param+0x384>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 80057b6:	4b60      	ldr	r3, [pc, #384]	@ (8005938 <prog_param+0x390>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d100      	bne.n	80057c0 <prog_param+0x218>
 80057be:	e356      	b.n	8005e6e <prog_param+0x8c6>
			goto ask_set_prog;//jrne ask_set_prog
 80057c0:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 80057c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005938 <prog_param+0x390>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d14c      	bne.n	8005864 <prog_param+0x2bc>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 80057ca:	4b5c      	ldr	r3, [pc, #368]	@ (800593c <prog_param+0x394>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4053      	eors	r3, r2
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <prog_param+0x238>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 80057d8:	4b63      	ldr	r3, [pc, #396]	@ (8005968 <prog_param+0x3c0>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <prog_param+0x23a>
			goto no_desh_forz;
 80057e0:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 80057e2:	4b56      	ldr	r3, [pc, #344]	@ (800593c <prog_param+0x394>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4053      	eors	r3, r2
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d12f      	bne.n	8005850 <prog_param+0x2a8>
		flags_menu[1] = 0; //bres flags_menu,#1
 80057f0:	4b52      	ldr	r3, [pc, #328]	@ (800593c <prog_param+0x394>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 80057f6:	4b53      	ldr	r3, [pc, #332]	@ (8005944 <prog_param+0x39c>)
 80057f8:	2239      	movs	r2, #57	@ 0x39
 80057fa:	5c9a      	ldrb	r2, [r3, r2]
 80057fc:	4b51      	ldr	r3, [pc, #324]	@ (8005944 <prog_param+0x39c>)
 80057fe:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005800:	4b50      	ldr	r3, [pc, #320]	@ (8005944 <prog_param+0x39c>)
 8005802:	223a      	movs	r2, #58	@ 0x3a
 8005804:	5c9a      	ldrb	r2, [r3, r2]
 8005806:	4b4f      	ldr	r3, [pc, #316]	@ (8005944 <prog_param+0x39c>)
 8005808:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 800580a:	4b4e      	ldr	r3, [pc, #312]	@ (8005944 <prog_param+0x39c>)
 800580c:	223b      	movs	r2, #59	@ 0x3b
 800580e:	5c9a      	ldrb	r2, [r3, r2]
 8005810:	4b4c      	ldr	r3, [pc, #304]	@ (8005944 <prog_param+0x39c>)
 8005812:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005814:	4b4b      	ldr	r3, [pc, #300]	@ (8005944 <prog_param+0x39c>)
 8005816:	223c      	movs	r2, #60	@ 0x3c
 8005818:	5c9a      	ldrb	r2, [r3, r2]
 800581a:	4b4a      	ldr	r3, [pc, #296]	@ (8005944 <prog_param+0x39c>)
 800581c:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 800581e:	4b49      	ldr	r3, [pc, #292]	@ (8005944 <prog_param+0x39c>)
 8005820:	223d      	movs	r2, #61	@ 0x3d
 8005822:	5c99      	ldrb	r1, [r3, r2]
 8005824:	4b47      	ldr	r3, [pc, #284]	@ (8005944 <prog_param+0x39c>)
 8005826:	222d      	movs	r2, #45	@ 0x2d
 8005828:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 800582a:	4b46      	ldr	r3, [pc, #280]	@ (8005944 <prog_param+0x39c>)
 800582c:	223e      	movs	r2, #62	@ 0x3e
 800582e:	5c99      	ldrb	r1, [r3, r2]
 8005830:	4b44      	ldr	r3, [pc, #272]	@ (8005944 <prog_param+0x39c>)
 8005832:	222e      	movs	r2, #46	@ 0x2e
 8005834:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005836:	4b43      	ldr	r3, [pc, #268]	@ (8005944 <prog_param+0x39c>)
 8005838:	223f      	movs	r2, #63	@ 0x3f
 800583a:	5c99      	ldrb	r1, [r3, r2]
 800583c:	4b41      	ldr	r3, [pc, #260]	@ (8005944 <prog_param+0x39c>)
 800583e:	222f      	movs	r2, #47	@ 0x2f
 8005840:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005842:	4b40      	ldr	r3, [pc, #256]	@ (8005944 <prog_param+0x39c>)
 8005844:	2240      	movs	r2, #64	@ 0x40
 8005846:	5c99      	ldrb	r1, [r3, r2]
 8005848:	4b3e      	ldr	r3, [pc, #248]	@ (8005944 <prog_param+0x39c>)
 800584a:	2230      	movs	r2, #48	@ 0x30
 800584c:	5499      	strb	r1, [r3, r2]
 800584e:	e000      	b.n	8005852 <prog_param+0x2aa>
			goto no_def_param;
 8005850:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005852:	4b46      	ldr	r3, [pc, #280]	@ (800596c <prog_param+0x3c4>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005858:	4b45      	ldr	r3, [pc, #276]	@ (8005970 <prog_param+0x3c8>)
 800585a:	22aa      	movs	r2, #170	@ 0xaa
 800585c:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 800585e:	e309      	b.n	8005e74 <prog_param+0x8cc>
			goto fin_sel_param;
 8005860:	46c0      	nop			@ (mov r8, r8)
 8005862:	e318      	b.n	8005e96 <prog_param+0x8ee>
			goto fin_sel_param; //jrne fin_sel_param
 8005864:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005866:	e316      	b.n	8005e96 <prog_param+0x8ee>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005868:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 800586a:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <prog_param+0x390>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	220f      	movs	r2, #15
 8005870:	4013      	ands	r3, r2
 8005872:	b2da      	uxtb	r2, r3
 8005874:	4b37      	ldr	r3, [pc, #220]	@ (8005954 <prog_param+0x3ac>)
 8005876:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005878:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <prog_param+0x3ac>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b09      	cmp	r3, #9
 800587e:	d900      	bls.n	8005882 <prog_param+0x2da>
 8005880:	e134      	b.n	8005aec <prog_param+0x544>
 8005882:	009a      	lsls	r2, r3, #2
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <prog_param+0x3cc>)
 8005886:	18d3      	adds	r3, r2, r3
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 800588c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 800588e:	4b3a      	ldr	r3, [pc, #232]	@ (8005978 <prog_param+0x3d0>)
 8005890:	0018      	movs	r0, r3
 8005892:	f000 fbe5 	bl	8006060 <TwoByteInArrayToWord>
 8005896:	0003      	movs	r3, r0
 8005898:	001c      	movs	r4, r3
 800589a:	4b38      	ldr	r3, [pc, #224]	@ (800597c <prog_param+0x3d4>)
 800589c:	0018      	movs	r0, r3
 800589e:	f000 fbdf 	bl	8006060 <TwoByteInArrayToWord>
 80058a2:	0003      	movs	r3, r0
 80058a4:	001d      	movs	r5, r3
 80058a6:	4b36      	ldr	r3, [pc, #216]	@ (8005980 <prog_param+0x3d8>)
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fbd9 	bl	8006060 <TwoByteInArrayToWord>
 80058ae:	0003      	movs	r3, r0
 80058b0:	001a      	movs	r2, r3
 80058b2:	2302      	movs	r3, #2
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2301      	movs	r3, #1
 80058b8:	0029      	movs	r1, r5
 80058ba:	0020      	movs	r0, r4
 80058bc:	f001 fcc4 	bl	8007248 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 80058c0:	e119      	b.n	8005af6 <prog_param+0x54e>
			case 1: goto opc01m01nv2;
 80058c2:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 80058c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005984 <prog_param+0x3dc>)
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fbca 	bl	8006060 <TwoByteInArrayToWord>
 80058cc:	0003      	movs	r3, r0
 80058ce:	001a      	movs	r2, r3
 80058d0:	2304      	movs	r3, #4
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2303      	movs	r3, #3
 80058d6:	2100      	movs	r1, #0
 80058d8:	2063      	movs	r0, #99	@ 0x63
 80058da:	f001 fcb5 	bl	8007248 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 80058de:	e10a      	b.n	8005af6 <prog_param+0x54e>
			case 2: goto opc02m01nv2;
 80058e0:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 80058e2:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <prog_param+0x3d0>)
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 fbbb 	bl	8006060 <TwoByteInArrayToWord>
 80058ea:	0003      	movs	r3, r0
 80058ec:	3396      	adds	r3, #150	@ 0x96
 80058ee:	001c      	movs	r4, r3
 80058f0:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <prog_param+0x3d8>)
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 fbb4 	bl	8006060 <TwoByteInArrayToWord>
 80058f8:	0003      	movs	r3, r0
 80058fa:	001d      	movs	r5, r3
 80058fc:	4b21      	ldr	r3, [pc, #132]	@ (8005984 <prog_param+0x3dc>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 fbae 	bl	8006060 <TwoByteInArrayToWord>
 8005904:	0003      	movs	r3, r0
 8005906:	18eb      	adds	r3, r5, r3
 8005908:	330a      	adds	r3, #10
 800590a:	001d      	movs	r5, r3
 800590c:	4b1e      	ldr	r3, [pc, #120]	@ (8005988 <prog_param+0x3e0>)
 800590e:	0018      	movs	r0, r3
 8005910:	f000 fba6 	bl	8006060 <TwoByteInArrayToWord>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	232e      	movs	r3, #46	@ 0x2e
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	232d      	movs	r3, #45	@ 0x2d
 800591e:	0029      	movs	r1, r5
 8005920:	0020      	movs	r0, r4
 8005922:	f001 fc91 	bl	8007248 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005926:	e0e6      	b.n	8005af6 <prog_param+0x54e>
 8005928:	20000c28 	.word	0x20000c28
 800592c:	20000bf8 	.word	0x20000bf8
 8005930:	20000b82 	.word	0x20000b82
 8005934:	20000c10 	.word	0x20000c10
 8005938:	20000c0f 	.word	0x20000c0f
 800593c:	20000c58 	.word	0x20000c58
 8005940:	0803f000 	.word	0x0803f000
 8005944:	20000138 	.word	0x20000138
 8005948:	200001b7 	.word	0x200001b7
 800594c:	20000c00 	.word	0x20000c00
 8005950:	20000c0e 	.word	0x20000c0e
 8005954:	200008e0 	.word	0x200008e0
 8005958:	20000c12 	.word	0x20000c12
 800595c:	20000c14 	.word	0x20000c14
 8005960:	20000b65 	.word	0x20000b65
 8005964:	0801b3d8 	.word	0x0801b3d8
 8005968:	20000c60 	.word	0x20000c60
 800596c:	20000c74 	.word	0x20000c74
 8005970:	20000c73 	.word	0x20000c73
 8005974:	0801b400 	.word	0x0801b400
 8005978:	20000147 	.word	0x20000147
 800597c:	20000145 	.word	0x20000145
 8005980:	20000139 	.word	0x20000139
 8005984:	2000013b 	.word	0x2000013b
 8005988:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 800598c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 800598e:	4bd6      	ldr	r3, [pc, #856]	@ (8005ce8 <prog_param+0x740>)
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fb65 	bl	8006060 <TwoByteInArrayToWord>
 8005996:	0003      	movs	r3, r0
 8005998:	3b0a      	subs	r3, #10
 800599a:	001c      	movs	r4, r3
 800599c:	4bd3      	ldr	r3, [pc, #844]	@ (8005cec <prog_param+0x744>)
 800599e:	0018      	movs	r0, r3
 80059a0:	f000 fb5e 	bl	8006060 <TwoByteInArrayToWord>
 80059a4:	0003      	movs	r3, r0
 80059a6:	3b96      	subs	r3, #150	@ 0x96
 80059a8:	001d      	movs	r5, r3
 80059aa:	4bd1      	ldr	r3, [pc, #836]	@ (8005cf0 <prog_param+0x748>)
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 fb57 	bl	8006060 <TwoByteInArrayToWord>
 80059b2:	0003      	movs	r3, r0
 80059b4:	001a      	movs	r2, r3
 80059b6:	2330      	movs	r3, #48	@ 0x30
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	232f      	movs	r3, #47	@ 0x2f
 80059bc:	0029      	movs	r1, r5
 80059be:	0020      	movs	r0, r4
 80059c0:	f001 fc42 	bl	8007248 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 80059c4:	e097      	b.n	8005af6 <prog_param+0x54e>
			case 4: goto opc04m01nv2;
 80059c6:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 80059c8:	4bca      	ldr	r3, [pc, #808]	@ (8005cf4 <prog_param+0x74c>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <prog_param+0x432>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 80059d0:	4bc8      	ldr	r3, [pc, #800]	@ (8005cf4 <prog_param+0x74c>)
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <prog_param+0x44a>
				goto toggle_opc04m01nv2;
 80059d8:	e000      	b.n	80059dc <prog_param+0x434>
				goto toggle_opc04m01nv2;
 80059da:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 80059dc:	4bc6      	ldr	r3, [pc, #792]	@ (8005cf8 <prog_param+0x750>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	4053      	eors	r3, r2
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4193      	sbcs	r3, r2
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	4bc2      	ldr	r3, [pc, #776]	@ (8005cf8 <prog_param+0x750>)
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e000      	b.n	80059f4 <prog_param+0x44c>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 80059f2:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 80059f4:	2101      	movs	r1, #1
 80059f6:	2028      	movs	r0, #40	@ 0x28
 80059f8:	f001 fbd2 	bl	80071a0 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 80059fc:	4bbe      	ldr	r3, [pc, #760]	@ (8005cf8 <prog_param+0x750>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2201      	movs	r2, #1
 8005a02:	4053      	eors	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <prog_param+0x46c>
			op_menu (0x00, 0x1D);
 8005a0a:	211d      	movs	r1, #29
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f001 fbc7 	bl	80071a0 <op_menu>
 8005a12:	e000      	b.n	8005a16 <prog_param+0x46e>
				goto dpy2_opc04m01nv2;
 8005a14:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005a16:	f001 fbdd 	bl	80071d4 <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005a1a:	e06c      	b.n	8005af6 <prog_param+0x54e>
			case 5: goto opc05m01nv2;
 8005a1c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005a1e:	2105      	movs	r1, #5
 8005a20:	2025      	movs	r0, #37	@ 0x25
 8005a22:	f001 fbbd 	bl	80071a0 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005a26:	4bb5      	ldr	r3, [pc, #724]	@ (8005cfc <prog_param+0x754>)
 8005a28:	2263      	movs	r2, #99	@ 0x63
 8005a2a:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005a2c:	4bb4      	ldr	r3, [pc, #720]	@ (8005d00 <prog_param+0x758>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005a32:	4bb4      	ldr	r3, [pc, #720]	@ (8005d04 <prog_param+0x75c>)
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	4bb4      	ldr	r3, [pc, #720]	@ (8005d08 <prog_param+0x760>)
 8005a38:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005a3a:	f000 fa37 	bl	8005eac <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005a3e:	4bb3      	ldr	r3, [pc, #716]	@ (8005d0c <prog_param+0x764>)
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	4bb0      	ldr	r3, [pc, #704]	@ (8005d04 <prog_param+0x75c>)
 8005a44:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005a46:	f000 fd41 	bl	80064cc <soloent1>
			datled_clear();
 8005a4a:	f001 fbc3 	bl	80071d4 <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005a4e:	e052      	b.n	8005af6 <prog_param+0x54e>
			case 6: goto opc06m01nv2;
 8005a50:	46c0      	nop			@ (mov r8, r8)
			op_menu  (findLastValue((uint32_t) &eePlantilla[eeversion1]) , findLastValue((uint32_t) &eePlantilla[eeversion2])/10);
 8005a52:	4baf      	ldr	r3, [pc, #700]	@ (8005d10 <prog_param+0x768>)
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7fd f8e1 	bl	8002c1c <findLastValue>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	b2dc      	uxtb	r4, r3
 8005a5e:	4bad      	ldr	r3, [pc, #692]	@ (8005d14 <prog_param+0x76c>)
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fd f8db 	bl	8002c1c <findLastValue>
 8005a66:	0003      	movs	r3, r0
 8005a68:	210a      	movs	r1, #10
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fa fb54 	bl	8000118 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	0019      	movs	r1, r3
 8005a76:	0020      	movs	r0, r4
 8005a78:	f001 fb92 	bl	80071a0 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005a7c:	e03b      	b.n	8005af6 <prog_param+0x54e>
			case 7: goto opc07m01nv2;
 8005a7e:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005a80:	4b9c      	ldr	r3, [pc, #624]	@ (8005cf4 <prog_param+0x74c>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prog_param+0x4ea>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005a88:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf4 <prog_param+0x74c>)
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <prog_param+0x502>
			   goto toggle_opc07m01nv2;
 8005a90:	e000      	b.n	8005a94 <prog_param+0x4ec>
			   goto toggle_opc07m01nv2;
 8005a92:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005a94:	4b98      	ldr	r3, [pc, #608]	@ (8005cf8 <prog_param+0x750>)
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4053      	eors	r3, r2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	4193      	sbcs	r3, r2
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b94      	ldr	r3, [pc, #592]	@ (8005cf8 <prog_param+0x750>)
 8005aa6:	705a      	strb	r2, [r3, #1]
 8005aa8:	e000      	b.n	8005aac <prog_param+0x504>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005aaa:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005aac:	2101      	movs	r1, #1
 8005aae:	2028      	movs	r0, #40	@ 0x28
 8005ab0:	f001 fb76 	bl	80071a0 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005ab4:	4b90      	ldr	r3, [pc, #576]	@ (8005cf8 <prog_param+0x750>)
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4053      	eors	r3, r2
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <prog_param+0x524>
			op_menu (0x00, 0x1D);
 8005ac2:	211d      	movs	r1, #29
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f001 fb6b 	bl	80071a0 <op_menu>
 8005aca:	e000      	b.n	8005ace <prog_param+0x526>
				goto dpy2_opc07m01nv2;
 8005acc:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005ace:	f001 fb81 	bl	80071d4 <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005ad2:	e010      	b.n	8005af6 <prog_param+0x54e>
			case 8: goto opc08m01nv2;
 8005ad4:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005ad6:	210e      	movs	r1, #14
 8005ad8:	2005      	movs	r0, #5
 8005ada:	f001 fb61 	bl	80071a0 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005ade:	e00a      	b.n	8005af6 <prog_param+0x54e>
			case 9: goto opc09m01nv2;
 8005ae0:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005ae2:	210e      	movs	r1, #14
 8005ae4:	201f      	movs	r0, #31
 8005ae6:	f001 fb5b 	bl	80071a0 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005aea:	e004      	b.n	8005af6 <prog_param+0x54e>
			default: goto opcNAnv2;
 8005aec:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005aee:	2126      	movs	r1, #38	@ 0x26
 8005af0:	2026      	movs	r0, #38	@ 0x26
 8005af2:	f001 fb55 	bl	80071a0 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005af6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <prog_param+0x74c>)
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	2201      	movs	r2, #1
 8005afc:	4053      	eors	r3, r2
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d12e      	bne.n	8005b62 <prog_param+0x5ba>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005b04:	4b84      	ldr	r3, [pc, #528]	@ (8005d18 <prog_param+0x770>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005b0a:	4b84      	ldr	r3, [pc, #528]	@ (8005d1c <prog_param+0x774>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	d129      	bne.n	8005b66 <prog_param+0x5be>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005b12:	4b83      	ldr	r3, [pc, #524]	@ (8005d20 <prog_param+0x778>)
 8005b14:	2273      	movs	r2, #115	@ 0x73
 8005b16:	5c9a      	ldrb	r2, [r3, r2]
 8005b18:	4b7a      	ldr	r3, [pc, #488]	@ (8005d04 <prog_param+0x75c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d124      	bne.n	8005b6a <prog_param+0x5c2>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005b20:	4975      	ldr	r1, [pc, #468]	@ (8005cf8 <prog_param+0x750>)
 8005b22:	487d      	ldr	r0, [pc, #500]	@ (8005d18 <prog_param+0x770>)
 8005b24:	2303      	movs	r3, #3
 8005b26:	2202      	movs	r2, #2
 8005b28:	f007 fad0 	bl	800d0cc <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8005d24 <prog_param+0x77c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005b32:	4b79      	ldr	r3, [pc, #484]	@ (8005d18 <prog_param+0x770>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	4053      	eors	r3, r2
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <prog_param+0x5a0>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005b40:	4b6d      	ldr	r3, [pc, #436]	@ (8005cf8 <prog_param+0x750>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	70da      	strb	r2, [r3, #3]
 8005b46:	e000      	b.n	8005b4a <prog_param+0x5a2>
				goto noSetFlagLU;
 8005b48:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8005cf8 <prog_param+0x750>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005b50:	4b73      	ldr	r3, [pc, #460]	@ (8005d20 <prog_param+0x778>)
 8005b52:	2252      	movs	r2, #82	@ 0x52
 8005b54:	5c9b      	ldrb	r3, [r3, r2]
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d109      	bne.n	8005b6e <prog_param+0x5c6>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <prog_param+0x750>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005b60:	e199      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	e197      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	e195      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	e193      	b.n	8005e96 <prog_param+0x8ee>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005b6e:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005b70:	e191      	b.n	8005e96 <prog_param+0x8ee>
		goto menu2; //jp menu2
 8005b72:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005b74:	495f      	ldr	r1, [pc, #380]	@ (8005cf4 <prog_param+0x74c>)
 8005b76:	485f      	ldr	r0, [pc, #380]	@ (8005cf4 <prog_param+0x74c>)
 8005b78:	2305      	movs	r3, #5
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f007 fac1 	bl	800d102 <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005b80:	4b68      	ldr	r3, [pc, #416]	@ (8005d24 <prog_param+0x77c>)
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	4b60      	ldr	r3, [pc, #384]	@ (8005d08 <prog_param+0x760>)
 8005b86:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005b88:	4b5c      	ldr	r3, [pc, #368]	@ (8005cfc <prog_param+0x754>)
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d00 <prog_param+0x758>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005b94:	f000 f98a 	bl	8005eac <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8005b98:	4b5c      	ldr	r3, [pc, #368]	@ (8005d0c <prog_param+0x764>)
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	4b61      	ldr	r3, [pc, #388]	@ (8005d24 <prog_param+0x77c>)
 8005b9e:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005ba0:	4b60      	ldr	r3, [pc, #384]	@ (8005d24 <prog_param+0x77c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b57      	ldr	r3, [pc, #348]	@ (8005d08 <prog_param+0x760>)
 8005bac:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8005bae:	4b56      	ldr	r3, [pc, #344]	@ (8005d08 <prog_param+0x760>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d822      	bhi.n	8005bfc <prog_param+0x654>
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d28 <prog_param+0x780>)
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 8005bc0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005bc2:	210f      	movs	r1, #15
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f001 faeb 	bl	80071a0 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8005bca:	e01c      	b.n	8005c06 <prog_param+0x65e>
			case 1: goto opc01m02;
 8005bcc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8005bce:	2127      	movs	r1, #39	@ 0x27
 8005bd0:	2011      	movs	r0, #17
 8005bd2:	f001 fae5 	bl	80071a0 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8005bd6:	e016      	b.n	8005c06 <prog_param+0x65e>
			case 2: goto opc02m02;
 8005bd8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8005bda:	211d      	movs	r1, #29
 8005bdc:	2027      	movs	r0, #39	@ 0x27
 8005bde:	f001 fadf 	bl	80071a0 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 8005be2:	e010      	b.n	8005c06 <prog_param+0x65e>
			case 3: goto opc03m02;
 8005be4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005be6:	210e      	movs	r1, #14
 8005be8:	2005      	movs	r0, #5
 8005bea:	f001 fad9 	bl	80071a0 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8005bee:	e00a      	b.n	8005c06 <prog_param+0x65e>
			case 4: goto opc04m02;
 8005bf0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 8005bf2:	210e      	movs	r1, #14
 8005bf4:	201f      	movs	r0, #31
 8005bf6:	f001 fad3 	bl	80071a0 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8005bfa:	e004      	b.n	8005c06 <prog_param+0x65e>
			default: goto opcNA_m02;
 8005bfc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005bfe:	2126      	movs	r1, #38	@ 0x26
 8005c00:	2026      	movs	r0, #38	@ 0x26
 8005c02:	f001 facd 	bl	80071a0 <op_menu>
		datled_clear();
 8005c06:	f001 fae5 	bl	80071d4 <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005cf4 <prog_param+0x74c>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4053      	eors	r3, r2
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d153      	bne.n	8005cc0 <prog_param+0x718>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8005c18:	4b3f      	ldr	r3, [pc, #252]	@ (8005d18 <prog_param+0x770>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8005c1e:	4b41      	ldr	r3, [pc, #260]	@ (8005d24 <prog_param+0x77c>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d100      	bne.n	8005c28 <prog_param+0x680>
 8005c26:	e124      	b.n	8005e72 <prog_param+0x8ca>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8005c28:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d24 <prog_param+0x77c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d148      	bne.n	8005cc4 <prog_param+0x71c>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 8005c32:	4b39      	ldr	r3, [pc, #228]	@ (8005d18 <prog_param+0x770>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 8005c38:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf8 <prog_param+0x750>)
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4053      	eors	r3, r2
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <prog_param+0x6a6>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 8005c46:	4b34      	ldr	r3, [pc, #208]	@ (8005d18 <prog_param+0x770>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <prog_param+0x6a8>
			goto noOnLuz;
 8005c4e:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 8005c50:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <prog_param+0x750>)
 8005c52:	789b      	ldrb	r3, [r3, #2]
 8005c54:	2201      	movs	r2, #1
 8005c56:	4053      	eors	r3, r2
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <prog_param+0x6be>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 8005c5e:	4b33      	ldr	r3, [pc, #204]	@ (8005d2c <prog_param+0x784>)
 8005c60:	2278      	movs	r2, #120	@ 0x78
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e000      	b.n	8005c68 <prog_param+0x6c0>
			goto noOffManto;
 8005c66:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <prog_param+0x788>)
 8005c6a:	2252      	movs	r2, #82	@ 0x52
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <prog_param+0x750>)
 8005c72:	791b      	ldrb	r3, [r3, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4053      	eors	r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <prog_param+0x6e0>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 8005c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d30 <prog_param+0x788>)
 8005c80:	2252      	movs	r2, #82	@ 0x52
 8005c82:	2120      	movs	r1, #32
 8005c84:	5499      	strb	r1, [r3, r2]
 8005c86:	e000      	b.n	8005c8a <prog_param+0x6e2>
			goto noFahrenheitFlagDpy;
 8005c88:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == findLastValue((uint32_t) &eePlantilla[eeescala])){
 8005c8a:	4b29      	ldr	r3, [pc, #164]	@ (8005d30 <prog_param+0x788>)
 8005c8c:	2252      	movs	r2, #82	@ 0x52
 8005c8e:	5c9b      	ldrb	r3, [r3, r2]
 8005c90:	001c      	movs	r4, r3
 8005c92:	4b28      	ldr	r3, [pc, #160]	@ (8005d34 <prog_param+0x78c>)
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fc ffc1 	bl	8002c1c <findLastValue>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d00d      	beq.n	8005cbc <prog_param+0x714>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 8005ca0:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <prog_param+0x788>)
 8005ca2:	2252      	movs	r2, #82	@ 0x52
 8005ca4:	5c9a      	ldrb	r2, [r3, r2]
 8005ca6:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <prog_param+0x790>)
 8005ca8:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 8005caa:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <prog_param+0x790>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	001a      	movs	r2, r3
 8005cb0:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <prog_param+0x78c>)
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	0010      	movs	r0, r2
 8005cb6:	f001 fa5f 	bl	8007178 <wreeprom>
		 goto cancel_prog; //jp cancel_prog
 8005cba:	e0db      	b.n	8005e74 <prog_param+0x8cc>
			goto noCambiaEscala;//	jreq noCambiaEscala
 8005cbc:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 8005cbe:	e0d9      	b.n	8005e74 <prog_param+0x8cc>
			goto fin_menu2;
 8005cc0:	46c0      	nop			@ (mov r8, r8)
 8005cc2:	e0e8      	b.n	8005e96 <prog_param+0x8ee>
			goto fin_menu2;//	jrne fin_menu2;
 8005cc4:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8005cc6:	e0e6      	b.n	8005e96 <prog_param+0x8ee>
			switch(STM8_A)
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <prog_param+0x794>)
 8005ccc:	18d3      	adds	r3, r2, r3
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8005cd2:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <prog_param+0x74c>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d131      	bne.n	8005d40 <prog_param+0x798>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <prog_param+0x74c>)
 8005cde:	791b      	ldrb	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d039      	beq.n	8005d58 <prog_param+0x7b0>
				goto toggle_opc00m02nv2;
 8005ce4:	e02d      	b.n	8005d42 <prog_param+0x79a>
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	20000139 	.word	0x20000139
 8005cec:	20000145 	.word	0x20000145
 8005cf0:	20000167 	.word	0x20000167
 8005cf4:	20000c00 	.word	0x20000c00
 8005cf8:	20000c58 	.word	0x20000c58
 8005cfc:	20000c12 	.word	0x20000c12
 8005d00:	20000c14 	.word	0x20000c14
 8005d04:	20000c10 	.word	0x20000c10
 8005d08:	200008e0 	.word	0x200008e0
 8005d0c:	20000b65 	.word	0x20000b65
 8005d10:	0803f07b 	.word	0x0803f07b
 8005d14:	0803f07c 	.word	0x0803f07c
 8005d18:	20000bf8 	.word	0x20000bf8
 8005d1c:	20000c0f 	.word	0x20000c0f
 8005d20:	200000b8 	.word	0x200000b8
 8005d24:	20000c0e 	.word	0x20000c0e
 8005d28:	0801b428 	.word	0x0801b428
 8005d2c:	20000c61 	.word	0x20000c61
 8005d30:	20000138 	.word	0x20000138
 8005d34:	0803f052 	.word	0x0803f052
 8005d38:	20000b64 	.word	0x20000b64
 8005d3c:	0801b43c 	.word	0x0801b43c
				goto toggle_opc00m02nv2;
 8005d40:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <prog_param+0x8f8>)
 8005d44:	789b      	ldrb	r3, [r3, #2]
 8005d46:	001a      	movs	r2, r3
 8005d48:	2302      	movs	r3, #2
 8005d4a:	4053      	eors	r3, r2
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	4193      	sbcs	r3, r2
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b53      	ldr	r3, [pc, #332]	@ (8005ea0 <prog_param+0x8f8>)
 8005d54:	709a      	strb	r2, [r3, #2]
 8005d56:	e000      	b.n	8005d5a <prog_param+0x7b2>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 8005d58:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	2028      	movs	r0, #40	@ 0x28
 8005d5e:	f001 fa1f 	bl	80071a0 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 8005d62:	4b4f      	ldr	r3, [pc, #316]	@ (8005ea0 <prog_param+0x8f8>)
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	2201      	movs	r2, #1
 8005d68:	4053      	eors	r3, r2
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <prog_param+0x7d2>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 8005d70:	211d      	movs	r1, #29
 8005d72:	2000      	movs	r0, #0
 8005d74:	f001 fa14 	bl	80071a0 <op_menu>
 8005d78:	e000      	b.n	8005d7c <prog_param+0x7d4>
				goto dpy2_opc00m02nv2;
 8005d7a:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 8005d7c:	f001 fa2a 	bl	80071d4 <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 8005d80:	e066      	b.n	8005e50 <prog_param+0x8a8>
				case 1:  goto opc01m02nv2;
 8005d82:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 8005d84:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <prog_param+0x8fc>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <prog_param+0x7ee>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 8005d8c:	4b45      	ldr	r3, [pc, #276]	@ (8005ea4 <prog_param+0x8fc>)
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <prog_param+0x806>
				goto toggle_opc01m02nv2;
 8005d94:	e000      	b.n	8005d98 <prog_param+0x7f0>
				goto toggle_opc01m02nv2;
 8005d96:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 8005d98:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <prog_param+0x8f8>)
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4053      	eors	r3, r2
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	4193      	sbcs	r3, r2
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea0 <prog_param+0x8f8>)
 8005daa:	70da      	strb	r2, [r3, #3]
 8005dac:	e000      	b.n	8005db0 <prog_param+0x808>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8005dae:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8005db0:	210f      	movs	r1, #15
 8005db2:	2000      	movs	r0, #0
 8005db4:	f001 f9f4 	bl	80071a0 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8005db8:	4b39      	ldr	r3, [pc, #228]	@ (8005ea0 <prog_param+0x8f8>)
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4053      	eors	r3, r2
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <prog_param+0x828>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 8005dc6:	211d      	movs	r1, #29
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f001 f9e9 	bl	80071a0 <op_menu>
 8005dce:	e000      	b.n	8005dd2 <prog_param+0x82a>
				goto dpy2_opc01m02nv2;
 8005dd0:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 8005dd2:	f001 f9ff 	bl	80071d4 <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 8005dd6:	e03b      	b.n	8005e50 <prog_param+0x8a8>
				case 2:  goto opc02m02nv2;
 8005dd8:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8005dda:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <prog_param+0x8fc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <prog_param+0x844>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 8005de2:	4b30      	ldr	r3, [pc, #192]	@ (8005ea4 <prog_param+0x8fc>)
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00c      	beq.n	8005e04 <prog_param+0x85c>
			   goto toggle_opc02m02nv2;
 8005dea:	e000      	b.n	8005dee <prog_param+0x846>
			   goto toggle_opc02m02nv2;
 8005dec:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8005dee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea0 <prog_param+0x8f8>)
 8005df0:	791b      	ldrb	r3, [r3, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4053      	eors	r3, r2
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	4193      	sbcs	r3, r2
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ea0 <prog_param+0x8f8>)
 8005e00:	711a      	strb	r2, [r3, #4]
 8005e02:	e000      	b.n	8005e06 <prog_param+0x85e>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 8005e04:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 8005e06:	210c      	movs	r1, #12
 8005e08:	2029      	movs	r0, #41	@ 0x29
 8005e0a:	f001 f9c9 	bl	80071a0 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8005e0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <prog_param+0x8f8>)
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	4053      	eors	r3, r2
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <prog_param+0x87e>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8005e1c:	210f      	movs	r1, #15
 8005e1e:	2029      	movs	r0, #41	@ 0x29
 8005e20:	f001 f9be 	bl	80071a0 <op_menu>
 8005e24:	e000      	b.n	8005e28 <prog_param+0x880>
				  goto dpy2_opc02m02nv2;
 8005e26:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8005e28:	f001 f9d4 	bl	80071d4 <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8005e2c:	e010      	b.n	8005e50 <prog_param+0x8a8>
				case 3:  goto opc03m02nv2;
 8005e2e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8005e30:	210e      	movs	r1, #14
 8005e32:	2005      	movs	r0, #5
 8005e34:	f001 f9b4 	bl	80071a0 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8005e38:	e00a      	b.n	8005e50 <prog_param+0x8a8>
				case 4:  goto opc04m02nv2;
 8005e3a:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8005e3c:	210e      	movs	r1, #14
 8005e3e:	201f      	movs	r0, #31
 8005e40:	f001 f9ae 	bl	80071a0 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8005e44:	e004      	b.n	8005e50 <prog_param+0x8a8>
				default: goto opcNAm02nv2;
 8005e46:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 8005e48:	2126      	movs	r1, #38	@ 0x26
 8005e4a:	2026      	movs	r0, #38	@ 0x26
 8005e4c:	f001 f9a8 	bl	80071a0 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 8005e50:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <prog_param+0x8fc>)
 8005e52:	789b      	ldrb	r3, [r3, #2]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4053      	eors	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <prog_param+0x8be>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <prog_param+0x900>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 8005e64:	e017      	b.n	8005e96 <prog_param+0x8ee>
			goto no_enter_m02nv2;
 8005e66:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 8005e68:	e015      	b.n	8005e96 <prog_param+0x8ee>
		goto cancel_prog;
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	e002      	b.n	8005e74 <prog_param+0x8cc>
		goto cancel_prog;//jp cancel_prog;
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	e000      	b.n	8005e74 <prog_param+0x8cc>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 8005e72:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 8005e74:	490c      	ldr	r1, [pc, #48]	@ (8005ea8 <prog_param+0x900>)
 8005e76:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <prog_param+0x900>)
 8005e78:	2303      	movs	r3, #3
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f007 f941 	bl	800d102 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 8005e80:	4909      	ldr	r1, [pc, #36]	@ (8005ea8 <prog_param+0x900>)
 8005e82:	4809      	ldr	r0, [pc, #36]	@ (8005ea8 <prog_param+0x900>)
 8005e84:	2302      	movs	r3, #2
 8005e86:	2205      	movs	r2, #5
 8005e88:	f007 f93b 	bl	800d102 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 8005e8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <prog_param+0x900>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 8005e92:	e000      	b.n	8005e96 <prog_param+0x8ee>
		goto fin_prog_param; //jp fin_prog_param
 8005e94:	46c0      	nop			@ (mov r8, r8)
}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	20000c58 	.word	0x20000c58
 8005ea4:	20000c00 	.word	0x20000c00
 8005ea8:	20000bf8 	.word	0x20000bf8

08005eac <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <md_dif_math+0x20>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <md_dif_math+0x24>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	001a      	movs	r2, r3
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <md_dif_math+0x28>)
 8005ebe:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8005ec0:	f000 f80a 	bl	8005ed8 <md_signfrac_math>
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	20000bf8 	.word	0x20000bf8
 8005ed0:	200008e0 	.word	0x200008e0
 8005ed4:	200008e2 	.word	0x200008e2

08005ed8 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8005edc:	4b4b      	ldr	r3, [pc, #300]	@ (800600c <md_signfrac_math+0x134>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d121      	bne.n	8005f28 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 8005ee4:	4b49      	ldr	r3, [pc, #292]	@ (800600c <md_signfrac_math+0x134>)
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d14f      	bne.n	8005f8c <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8005eec:	4b48      	ldr	r3, [pc, #288]	@ (8006010 <md_signfrac_math+0x138>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d117      	bne.n	8005f24 <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 8005ef4:	4b46      	ldr	r3, [pc, #280]	@ (8006010 <md_signfrac_math+0x138>)
 8005ef6:	2219      	movs	r2, #25
 8005ef8:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8005efa:	4b46      	ldr	r3, [pc, #280]	@ (8006014 <md_signfrac_math+0x13c>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 8005f02:	4b43      	ldr	r3, [pc, #268]	@ (8006010 <md_signfrac_math+0x138>)
 8005f04:	220a      	movs	r2, #10
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8005f0a:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8005f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800600c <md_signfrac_math+0x134>)
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 8005f14:	4b3d      	ldr	r3, [pc, #244]	@ (800600c <md_signfrac_math+0x134>)
 8005f16:	795b      	ldrb	r3, [r3, #5]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d139      	bne.n	8005f90 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <md_signfrac_math+0x13c>)
 8005f1e:	2205      	movs	r2, #5
 8005f20:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 8005f22:	e067      	b.n	8005ff4 <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 8005f24:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 8005f26:	e065      	b.n	8005ff4 <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8005f28:	46c0      	nop			@ (mov r8, r8)
 8005f2a:	e000      	b.n	8005f2e <md_signfrac_math+0x56>
				goto inc_sf;
 8005f2c:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006018 <md_signfrac_math+0x140>)
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	4b39      	ldr	r3, [pc, #228]	@ (800601c <md_signfrac_math+0x144>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	db04      	blt.n	8005f48 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8005f3e:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <md_signfrac_math+0x148>)
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <md_signfrac_math+0x140>)
 8005f44:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 8005f46:	e052      	b.n	8005fee <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 8005f48:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 8005f4a:	4b36      	ldr	r3, [pc, #216]	@ (8006024 <md_signfrac_math+0x14c>)
 8005f4c:	799b      	ldrb	r3, [r3, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 8005f52:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <md_signfrac_math+0x140>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	2b63      	cmp	r3, #99	@ 0x63
 8005f5a:	dc0d      	bgt.n	8005f78 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 8005f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006018 <md_signfrac_math+0x140>)
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	3364      	adds	r3, #100	@ 0x64
 8005f64:	db0a      	blt.n	8005f7c <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 8005f66:	e000      	b.n	8005f6a <md_signfrac_math+0x92>
				goto inc_simple_ent;
 8005f68:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006018 <md_signfrac_math+0x140>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	4b29      	ldr	r3, [pc, #164]	@ (8006018 <md_signfrac_math+0x140>)
 8005f74:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8005f76:	e03a      	b.n	8005fee <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	e000      	b.n	8005f7e <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 8005f7c:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 8005f7e:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <md_signfrac_math+0x140>)
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	330a      	adds	r3, #10
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	4b24      	ldr	r3, [pc, #144]	@ (8006018 <md_signfrac_math+0x140>)
 8005f88:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8005f8a:	e030      	b.n	8005fee <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	e000      	b.n	8005f92 <md_signfrac_math+0xba>
				goto dec_sf;
 8005f90:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 8005f92:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <md_signfrac_math+0x140>)
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <md_signfrac_math+0x148>)
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	dc04      	bgt.n	8005fac <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <md_signfrac_math+0x144>)
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006018 <md_signfrac_math+0x140>)
 8005fa8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8005faa:	e020      	b.n	8005fee <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8005fac:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <md_signfrac_math+0x14c>)
 8005fb0:	799b      	ldrb	r3, [r3, #6]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 8005fb6:	4b18      	ldr	r3, [pc, #96]	@ (8006018 <md_signfrac_math+0x140>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b21b      	sxth	r3, r3
 8005fbc:	2b64      	cmp	r3, #100	@ 0x64
 8005fbe:	dc0d      	bgt.n	8005fdc <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <md_signfrac_math+0x140>)
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	3363      	adds	r3, #99	@ 0x63
 8005fc8:	db0a      	blt.n	8005fe0 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8005fca:	e000      	b.n	8005fce <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8005fcc:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8005fce:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <md_signfrac_math+0x140>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <md_signfrac_math+0x140>)
 8005fd8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8005fda:	e008      	b.n	8005fee <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	e000      	b.n	8005fe2 <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8005fe0:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <md_signfrac_math+0x140>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	3b0a      	subs	r3, #10
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <md_signfrac_math+0x140>)
 8005fec:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <md_signfrac_math+0x150>)
 8005ff0:	221e      	movs	r2, #30
 8005ff2:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <md_signfrac_math+0x14c>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <md_signfrac_math+0x140>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <md_signfrac_math+0x154>)
 8006002:	701a      	strb	r2, [r3, #0]
			//ret
}
 8006004:	46c0      	nop			@ (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	20000c00 	.word	0x20000c00
 8006010:	20000c32 	.word	0x20000c32
 8006014:	20000b83 	.word	0x20000b83
 8006018:	200008e2 	.word	0x200008e2
 800601c:	20000c12 	.word	0x20000c12
 8006020:	20000c14 	.word	0x20000c14
 8006024:	20000bf8 	.word	0x20000bf8
 8006028:	20000b82 	.word	0x20000b82
 800602c:	20000b65 	.word	0x20000b65

08006030 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 8006036:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <tdev_to_Word+0x28>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	b29a      	uxth	r2, r3
 800603e:	4b07      	ldr	r3, [pc, #28]	@ (800605c <tdev_to_Word+0x2c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	0019      	movs	r1, r3
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	1852      	adds	r2, r2, r1
 8006048:	801a      	strh	r2, [r3, #0]
	return	foo;
 800604a:	1dbb      	adds	r3, r7, #6
 800604c:	881b      	ldrh	r3, [r3, #0]
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b002      	add	sp, #8
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	20000bc0 	.word	0x20000bc0
 800605c:	20000bc1 	.word	0x20000bc1

08006060 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3301      	adds	r3, #1
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	0019      	movs	r1, r3
 8006078:	200e      	movs	r0, #14
 800607a:	183b      	adds	r3, r7, r0
 800607c:	1852      	adds	r2, r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
	return	 foo;
 8006080:	183b      	adds	r3, r7, r0
 8006082:	881b      	ldrh	r3, [r3, #0]
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}

0800608c <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
    asm ("nop");
 8006090:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 8006092:	46c0      	nop			@ (mov r8, r8)

}
 8006094:	46c0      	nop			@ (mov r8, r8)
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 80060a0:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <Load_ret2+0x1c>)
 80060a2:	2249      	movs	r2, #73	@ 0x49
 80060a4:	5c9b      	ldrb	r3, [r3, r2]
 80060a6:	001a      	movs	r2, r3
 80060a8:	233c      	movs	r3, #60	@ 0x3c
 80060aa:	4353      	muls	r3, r2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <Load_ret2+0x20>)
 80060b0:	801a      	strh	r2, [r3, #0]
}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200000b8 	.word	0x200000b8
 80060bc:	20000b76 	.word	0x20000b76

080060c0 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 80060c4:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <ldadaptivo+0x38>)
 80060c6:	2246      	movs	r2, #70	@ 0x46
 80060c8:	5c9b      	ldrb	r3, [r3, r2]
 80060ca:	001a      	movs	r2, r3
 80060cc:	23e1      	movs	r3, #225	@ 0xe1
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4353      	muls	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <ldadaptivo+0x3c>)
 80060d6:	801a      	strh	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 80060d8:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <ldadaptivo+0x38>)
 80060da:	2256      	movs	r2, #86	@ 0x56
 80060dc:	5c9b      	ldrb	r3, [r3, r2]
 80060de:	001a      	movs	r2, r3
 80060e0:	4b06      	ldr	r3, [pc, #24]	@ (80060fc <ldadaptivo+0x3c>)
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	08db      	lsrs	r3, r3, #3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4353      	muls	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <ldadaptivo+0x40>)
 80060ee:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 80060f0:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200000b8 	.word	0x200000b8
 80060fc:	20000bc6 	.word	0x20000bc6
 8006100:	20000bcc 	.word	0x20000bcc

08006104 <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 800610a:	1dbb      	adds	r3, r7, #6
 800610c:	2200      	movs	r2, #0
 800610e:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8006110:	1dbb      	adds	r3, r7, #6
 8006112:	4a0e      	ldr	r2, [pc, #56]	@ (800614c <blink_640+0x48>)
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8006118:	1dba      	adds	r2, r7, #6
 800611a:	1dbb      	adds	r3, r7, #6
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	18db      	adds	r3, r3, r3
 8006120:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 8006122:	1dba      	adds	r2, r7, #6
 8006124:	1dbb      	adds	r3, r7, #6
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	18db      	adds	r3, r3, r3
 800612a:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 800612c:	1dbb      	adds	r3, r7, #6
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <blink_640+0x4c>)
 8006134:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 8006136:	1dbb      	adds	r3, r7, #6
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	b29b      	uxth	r3, r3
 800613e:	b2da      	uxtb	r2, r3
 8006140:	4b04      	ldr	r3, [pc, #16]	@ (8006154 <blink_640+0x50>)
 8006142:	701a      	strb	r2, [r3, #0]
}
 8006144:	46c0      	nop			@ (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000b5c 	.word	0x20000b5c
 8006150:	20000b64 	.word	0x20000b64
 8006154:	20000b65 	.word	0x20000b65

08006158 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 800615c:	4b03      	ldr	r3, [pc, #12]	@ (800616c <sp_dpy+0x14>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	0018      	movs	r0, r3
 8006162:	f000 f8af 	bl	80062c4 <convadec_math>
								//			//ret	;
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000bbc 	.word	0x20000bbc

08006170 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 8006176:	1dbb      	adds	r3, r7, #6
 8006178:	2200      	movs	r2, #0
 800617a:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <dif_dpy+0x2c>)
 800617e:	8819      	ldrh	r1, [r3, #0]
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <dif_dpy+0x30>)
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	1dbb      	adds	r3, r7, #6
 8006186:	1a8a      	subs	r2, r1, r2
 8006188:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 800618a:	1dbb      	adds	r3, r7, #6
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	0018      	movs	r0, r3
 8006190:	f000 f898 	bl	80062c4 <convadec_math>
									// ret ;
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b002      	add	sp, #8
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000bbe 	.word	0x20000bbe
 80061a0:	20000bbc 	.word	0x20000bbc

080061a4 <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <minbrake_load+0x2c>)
 80061aa:	2265      	movs	r2, #101	@ 0x65
 80061ac:	5c9a      	ldrb	r2, [r3, r2]
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <minbrake_load+0x30>)
 80061b0:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 80061b2:	f000 f99f 	bl	80064f4 <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 80061b6:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <minbrake_load+0x34>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4a07      	ldr	r2, [pc, #28]	@ (80061dc <minbrake_load+0x38>)
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <minbrake_load+0x3c>)
 80061c8:	801a      	strh	r2, [r3, #0]
}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200000b8 	.word	0x200000b8
 80061d4:	20000b65 	.word	0x20000b65
 80061d8:	20000b57 	.word	0x20000b57
 80061dc:	20000b58 	.word	0x20000b58
 80061e0:	20000b72 	.word	0x20000b72

080061e4 <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 80061ea:	1dbb      	adds	r3, r7, #6
 80061ec:	2200      	movs	r2, #0
 80061ee:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 80061f0:	1dbb      	adds	r3, r7, #6
 80061f2:	4a31      	ldr	r2, [pc, #196]	@ (80062b8 <desptdv_math+0xd4>)
 80061f4:	8812      	ldrh	r2, [r2, #0]
 80061f6:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 80061f8:	4b30      	ldr	r3, [pc, #192]	@ (80062bc <desptdv_math+0xd8>)
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7ff ff30 	bl	8006060 <TwoByteInArrayToWord>
 8006200:	0003      	movs	r3, r0
 8006202:	0019      	movs	r1, r3
 8006204:	1dbb      	adds	r3, r7, #6
 8006206:	1dba      	adds	r2, r7, #6
 8006208:	8812      	ldrh	r2, [r2, #0]
 800620a:	188a      	adds	r2, r1, r2
 800620c:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 800620e:	4b2c      	ldr	r3, [pc, #176]	@ (80062c0 <desptdv_math+0xdc>)
 8006210:	2252      	movs	r2, #82	@ 0x52
 8006212:	5c9b      	ldrb	r3, [r3, r2]
 8006214:	2b20      	cmp	r3, #32
 8006216:	d145      	bne.n	80062a4 <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8006218:	1dbb      	adds	r3, r7, #6
 800621a:	2200      	movs	r2, #0
 800621c:	5e9b      	ldrsh	r3, [r3, r2]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da22      	bge.n	8006268 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 8006222:	1dbb      	adds	r3, r7, #6
 8006224:	1dba      	adds	r2, r7, #6
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	4252      	negs	r2, r2
 800622a:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 800622c:	1dbb      	adds	r3, r7, #6
 800622e:	1dba      	adds	r2, r7, #6
 8006230:	8812      	ldrh	r2, [r2, #0]
 8006232:	0852      	lsrs	r2, r2, #1
 8006234:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 8006236:	1dba      	adds	r2, r7, #6
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	1c19      	adds	r1, r3, #0
 800623e:	00c9      	lsls	r1, r1, #3
 8006240:	18cb      	adds	r3, r1, r3
 8006242:	18db      	adds	r3, r3, r3
 8006244:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 8006246:	1dbc      	adds	r4, r7, #6
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	2105      	movs	r1, #5
 800624e:	0018      	movs	r0, r3
 8006250:	f7f9 ff62 	bl	8000118 <__udivsi3>
 8006254:	0003      	movs	r3, r0
 8006256:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 8006258:	1dbb      	adds	r3, r7, #6
 800625a:	1dba      	adds	r2, r7, #6
 800625c:	8812      	ldrh	r2, [r2, #0]
 800625e:	21a0      	movs	r1, #160	@ 0xa0
 8006260:	0049      	lsls	r1, r1, #1
 8006262:	1a8a      	subs	r2, r1, r2
 8006264:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 8006266:	e01e      	b.n	80062a6 <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 8006268:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 800626a:	1dbb      	adds	r3, r7, #6
 800626c:	1dba      	adds	r2, r7, #6
 800626e:	8812      	ldrh	r2, [r2, #0]
 8006270:	0852      	lsrs	r2, r2, #1
 8006272:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 8006274:	1dba      	adds	r2, r7, #6
 8006276:	1dbb      	adds	r3, r7, #6
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	1c19      	adds	r1, r3, #0
 800627c:	00c9      	lsls	r1, r1, #3
 800627e:	18cb      	adds	r3, r1, r3
 8006280:	18db      	adds	r3, r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 8006284:	1dbc      	adds	r4, r7, #6
 8006286:	1dbb      	adds	r3, r7, #6
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	2105      	movs	r1, #5
 800628c:	0018      	movs	r0, r3
 800628e:	f7f9 ff43 	bl	8000118 <__udivsi3>
 8006292:	0003      	movs	r3, r0
 8006294:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 8006296:	1dbb      	adds	r3, r7, #6
 8006298:	1dba      	adds	r2, r7, #6
 800629a:	8812      	ldrh	r2, [r2, #0]
 800629c:	3241      	adds	r2, #65	@ 0x41
 800629e:	32ff      	adds	r2, #255	@ 0xff
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e000      	b.n	80062a6 <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 80062a4:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 80062a6:	1dbb      	adds	r3, r7, #6
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	0018      	movs	r0, r3
 80062ac:	f000 f80a 	bl	80062c4 <convadec_math>

}
 80062b0:	46c0      	nop			@ (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b003      	add	sp, #12
 80062b6:	bd90      	pop	{r4, r7, pc}
 80062b8:	20000bc4 	.word	0x20000bc4
 80062bc:	200000bd 	.word	0x200000bd
 80062c0:	200000b8 	.word	0x200000b8

080062c4 <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0002      	movs	r2, r0
 80062cc:	1dbb      	adds	r3, r7, #6
 80062ce:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 80062d0:	f000 face 	bl	8006870 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 80062d4:	230f      	movs	r3, #15
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 80062dc:	230e      	movs	r3, #14
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	2200      	movs	r2, #0
 80062e8:	5e9b      	ldrsh	r3, [r3, r2]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da08      	bge.n	8006300 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 80062ee:	1dbb      	adds	r3, r7, #6
 80062f0:	1dba      	adds	r2, r7, #6
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	4252      	negs	r2, r2
 80062f6:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 80062f8:	4b45      	ldr	r3, [pc, #276]	@ (8006410 <convadec_math+0x14c>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	705a      	strb	r2, [r3, #1]
 80062fe:	e000      	b.n	8006302 <convadec_math+0x3e>
			goto conv_temper_positiva;
 8006300:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 8006302:	1dbb      	adds	r3, r7, #6
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	210a      	movs	r1, #10
 8006308:	0018      	movs	r0, r3
 800630a:	f7f9 ff8b 	bl	8000224 <__aeabi_uidivmod>
 800630e:	000b      	movs	r3, r1
 8006310:	b29a      	uxth	r2, r3
 8006312:	230e      	movs	r3, #14
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8006318:	1dbb      	adds	r3, r7, #6
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	210a      	movs	r1, #10
 800631e:	0018      	movs	r0, r3
 8006320:	f7f9 fefa 	bl	8000118 <__udivsi3>
 8006324:	0003      	movs	r3, r0
 8006326:	b29a      	uxth	r2, r3
 8006328:	230f      	movs	r3, #15
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 800632e:	4b38      	ldr	r3, [pc, #224]	@ (8006410 <convadec_math+0x14c>)
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2201      	movs	r2, #1
 8006334:	4053      	eors	r3, r2
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 800633c:	4b35      	ldr	r3, [pc, #212]	@ (8006414 <convadec_math+0x150>)
 800633e:	2223      	movs	r2, #35	@ 0x23
 8006340:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 8006342:	4b35      	ldr	r3, [pc, #212]	@ (8006418 <convadec_math+0x154>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2201      	movs	r2, #1
 8006348:	4053      	eors	r3, r2
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 8006350:	4b30      	ldr	r3, [pc, #192]	@ (8006414 <convadec_math+0x150>)
 8006352:	2264      	movs	r2, #100	@ 0x64
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e000      	b.n	800635a <convadec_math+0x96>
			goto cp_25;
 8006358:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 800635a:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <convadec_math+0x150>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	220f      	movs	r2, #15
 8006360:	18ba      	adds	r2, r7, r2
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d318      	bcc.n	800639a <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 8006368:	e03d      	b.n	80063e6 <convadec_math+0x122>
			goto conv_signo_positivo;
 800636a:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 800636c:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <convadec_math+0x150>)
 800636e:	2263      	movs	r2, #99	@ 0x63
 8006370:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 8006372:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <convadec_math+0x154>)
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2201      	movs	r2, #1
 8006378:	4053      	eors	r3, r2
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 8006380:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <convadec_math+0x150>)
 8006382:	2264      	movs	r2, #100	@ 0x64
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e000      	b.n	800638a <convadec_math+0xc6>
			goto cp_99;
 8006388:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 800638a:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <convadec_math+0x150>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	220f      	movs	r2, #15
 8006390:	18ba      	adds	r2, r7, r2
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d225      	bcs.n	80063e4 <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 8006398:	e000      	b.n	800639c <convadec_math+0xd8>
		goto     convad10;
 800639a:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 800639c:	210f      	movs	r1, #15
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b09      	cmp	r3, #9
 80063a4:	d80d      	bhi.n	80063c2 <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 80063a6:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 80063a8:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <convadec_math+0x14c>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 80063ae:	230e      	movs	r3, #14
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fef0 	bl	80071a0 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 80063c0:	e021      	b.n	8006406 <convadec_math+0x142>
			goto soloent;
 80063c2:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80063c4:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <convadec_math+0x150>)
 80063c6:	220f      	movs	r2, #15
 80063c8:	18ba      	adds	r2, r7, r2
 80063ca:	7812      	ldrb	r2, [r2, #0]
 80063cc:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80063ce:	f000 f891 	bl	80064f4 <BaBentre10_math>
		op_menu (waux,wreg);
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <convadec_math+0x158>)
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <convadec_math+0x150>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	0019      	movs	r1, r3
 80063dc:	0010      	movs	r0, r2
 80063de:	f000 fedf 	bl	80071a0 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80063e2:	e010      	b.n	8006406 <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 80063e4:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 80063e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <convadec_math+0x15c>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	001a      	movs	r2, r3
 80063ee:	2320      	movs	r3, #32
 80063f0:	4013      	ands	r3, r2
 80063f2:	d102      	bne.n	80063fa <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 80063f4:	f000 fa3c 	bl	8006870 <offdpy>
		goto	finconvad;
 80063f8:	e005      	b.n	8006406 <convadec_math+0x142>
			goto convadec_j02;
 80063fa:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 80063fc:	2111      	movs	r1, #17
 80063fe:	2010      	movs	r0, #16
 8006400:	f000 fece 	bl	80071a0 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006404:	46c0      	nop			@ (mov r8, r8)
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	46bd      	mov	sp, r7
 800640a:	b004      	add	sp, #16
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	20000ba0 	.word	0x20000ba0
 8006414:	20000b65 	.word	0x20000b65
 8006418:	20000bf8 	.word	0x20000bf8
 800641c:	20000b64 	.word	0x20000b64
 8006420:	20000b5c 	.word	0x20000b5c

08006424 <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	0002      	movs	r2, r0
 800642c:	1dfb      	adds	r3, r7, #7
 800642e:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8006430:	210f      	movs	r1, #15
 8006432:	187b      	adds	r3, r7, r1
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006438:	1dfb      	adds	r3, r7, #7
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b09      	cmp	r3, #9
 800643e:	d80c      	bhi.n	800645a <convad10+0x36>
			goto soloent;
		}
fraccion:
 8006440:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <convad10+0x60>)
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 8006448:	187b      	adds	r3, r7, r1
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	0011      	movs	r1, r2
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fea4 	bl	80071a0 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 8006458:	e00f      	b.n	800647a <convad10+0x56>
			goto soloent;
 800645a:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 800645c:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <convad10+0x64>)
 800645e:	1dfa      	adds	r2, r7, #7
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006464:	f000 f846 	bl	80064f4 <BaBentre10_math>
		op_menu (waux,wreg);
 8006468:	4b08      	ldr	r3, [pc, #32]	@ (800648c <convad10+0x68>)
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <convad10+0x64>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	0019      	movs	r1, r3
 8006472:	0010      	movs	r0, r2
 8006474:	f000 fe94 	bl	80071a0 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006478:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800647a:	46c0      	nop			@ (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b004      	add	sp, #16
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	20000ba0 	.word	0x20000ba0
 8006488:	20000b65 	.word	0x20000b65
 800648c:	20000b64 	.word	0x20000b64

08006490 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	0002      	movs	r2, r0
 8006498:	1dfb      	adds	r3, r7, #7
 800649a:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 800649c:	4b09      	ldr	r3, [pc, #36]	@ (80064c4 <soloent+0x34>)
 800649e:	1dfa      	adds	r2, r7, #7
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80064a4:	f000 f826 	bl	80064f4 <BaBentre10_math>
		op_menu (waux,wreg);
 80064a8:	4b07      	ldr	r3, [pc, #28]	@ (80064c8 <soloent+0x38>)
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <soloent+0x34>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	0019      	movs	r1, r3
 80064b2:	0010      	movs	r0, r2
 80064b4:	f000 fe74 	bl	80071a0 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80064b8:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	b002      	add	sp, #8
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			@ (mov r8, r8)
 80064c4:	20000b65 	.word	0x20000b65
 80064c8:	20000b64 	.word	0x20000b64

080064cc <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 80064d0:	f000 f810 	bl	80064f4 <BaBentre10_math>
		op_menu (waux,wreg);
 80064d4:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <soloent1+0x20>)
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <soloent1+0x24>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	0019      	movs	r1, r3
 80064de:	0010      	movs	r0, r2
 80064e0:	f000 fe5e 	bl	80071a0 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80064e4:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000b64 	.word	0x20000b64
 80064f0:	20000b65 	.word	0x20000b65

080064f4 <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <BaBentre10_math+0x4c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 80064fe:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <BaBentre10_math+0x50>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	001a      	movs	r2, r3
 8006504:	4b10      	ldr	r3, [pc, #64]	@ (8006548 <BaBentre10_math+0x54>)
 8006506:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8006508:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <BaBentre10_math+0x54>)
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	210a      	movs	r1, #10
 8006510:	0018      	movs	r0, r3
 8006512:	f7f9 fe87 	bl	8000224 <__aeabi_uidivmod>
 8006516:	000b      	movs	r3, r1
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <BaBentre10_math+0x50>)
 800651c:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <BaBentre10_math+0x54>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	210a      	movs	r1, #10
 8006526:	0018      	movs	r0, r3
 8006528:	f7f9 fdf6 	bl	8000118 <__udivsi3>
 800652c:	0003      	movs	r3, r0
 800652e:	b2da      	uxtb	r2, r3
 8006530:	4b03      	ldr	r3, [pc, #12]	@ (8006540 <BaBentre10_math+0x4c>)
 8006532:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 8006534:	f000 f80a 	bl	800654c <conv60_6_math>
}
 8006538:	46c0      	nop			@ (mov r8, r8)
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	20000b64 	.word	0x20000b64
 8006544:	20000b65 	.word	0x20000b65
 8006548:	200008e2 	.word	0x200008e2

0800654c <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8006552:	1dbb      	adds	r3, r7, #6
 8006554:	2200      	movs	r2, #0
 8006556:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 8006558:	4b11      	ldr	r3, [pc, #68]	@ (80065a0 <conv60_6_math+0x54>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	1dba      	adds	r2, r7, #6
 800655e:	1c19      	adds	r1, r3, #0
 8006560:	1c0b      	adds	r3, r1, #0
 8006562:	18db      	adds	r3, r3, r3
 8006564:	185b      	adds	r3, r3, r1
 8006566:	18db      	adds	r3, r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 800656a:	4b0e      	ldr	r3, [pc, #56]	@ (80065a4 <conv60_6_math+0x58>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	001a      	movs	r2, r3
 8006570:	233c      	movs	r3, #60	@ 0x3c
 8006572:	4353      	muls	r3, r2
 8006574:	b299      	uxth	r1, r3
 8006576:	1dbb      	adds	r3, r7, #6
 8006578:	1dba      	adds	r2, r7, #6
 800657a:	8812      	ldrh	r2, [r2, #0]
 800657c:	188a      	adds	r2, r1, r2
 800657e:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 8006580:	1dbb      	adds	r3, r7, #6
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	0a1b      	lsrs	r3, r3, #8
 8006586:	b29b      	uxth	r3, r3
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b07      	ldr	r3, [pc, #28]	@ (80065a8 <conv60_6_math+0x5c>)
 800658c:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 800658e:	1dbb      	adds	r3, r7, #6
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <conv60_6_math+0x60>)
 8006596:	701a      	strb	r2, [r3, #0]
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000b65 	.word	0x20000b65
 80065a4:	20000b64 	.word	0x20000b64
 80065a8:	20000b57 	.word	0x20000b57
 80065ac:	20000b58 	.word	0x20000b58

080065b0 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 80065b6:	4ba3      	ldr	r3, [pc, #652]	@ (8006844 <fallas+0x294>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 80065bc:	4ba2      	ldr	r3, [pc, #648]	@ (8006848 <fallas+0x298>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 80065c4:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 80065c6:	e138      	b.n	800683a <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 80065c8:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 80065ca:	4b9f      	ldr	r3, [pc, #636]	@ (8006848 <fallas+0x298>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d003      	beq.n	80065da <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 80065d2:	4b9e      	ldr	r3, [pc, #632]	@ (800684c <fallas+0x29c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	715a      	strb	r2, [r3, #5]
 80065d8:	e000      	b.n	80065dc <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 80065da:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 80065dc:	2300      	movs	r3, #0
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	e014      	b.n	800660c <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 80065e2:	4a9b      	ldr	r2, [pc, #620]	@ (8006850 <fallas+0x2a0>)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	18d3      	adds	r3, r2, r3
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	499a      	ldr	r1, [pc, #616]	@ (8006854 <fallas+0x2a4>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	18cb      	adds	r3, r1, r3
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4998      	ldr	r1, [pc, #608]	@ (8006858 <fallas+0x2a8>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	18cb      	adds	r3, r1, r3
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <fallas+0x66>
		for(int k=0; k<8;k++){
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3301      	adds	r3, #1
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b07      	cmp	r3, #7
 8006610:	dde7      	ble.n	80065e2 <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8006612:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006614:	e7d7      	b.n	80065c6 <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006616:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006618:	4b90      	ldr	r3, [pc, #576]	@ (800685c <fallas+0x2ac>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d12c      	bne.n	800667a <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8006620:	4b8a      	ldr	r3, [pc, #552]	@ (800684c <fallas+0x29c>)
 8006622:	2201      	movs	r2, #1
 8006624:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006626:	4b87      	ldr	r3, [pc, #540]	@ (8006844 <fallas+0x294>)
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 800662c:	4b8c      	ldr	r3, [pc, #560]	@ (8006860 <fallas+0x2b0>)
 800662e:	2213      	movs	r2, #19
 8006630:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8006632:	4b87      	ldr	r3, [pc, #540]	@ (8006850 <fallas+0x2a0>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2201      	movs	r2, #1
 8006638:	4053      	eors	r3, r2
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <fallas+0xa4>
	       	goto fallas_j00;
 8006640:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8006642:	4b83      	ldr	r3, [pc, #524]	@ (8006850 <fallas+0x2a0>)
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d019      	beq.n	800667e <fallas+0xce>
	       	goto fallas_j01;
 800664a:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 800664c:	4b84      	ldr	r3, [pc, #528]	@ (8006860 <fallas+0x2b0>)
 800664e:	2213      	movs	r2, #19
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	e000      	b.n	8006656 <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006654:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006656:	f000 facd 	bl	8006bf4 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 800665a:	f000 fae9 	bl	8006c30 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 800665e:	f000 fdb9 	bl	80071d4 <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 8006662:	4b80      	ldr	r3, [pc, #512]	@ (8006864 <fallas+0x2b4>)
 8006664:	2201      	movs	r2, #1
 8006666:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006668:	4b7d      	ldr	r3, [pc, #500]	@ (8006860 <fallas+0x2b0>)
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	4b7d      	ldr	r3, [pc, #500]	@ (8006864 <fallas+0x2b4>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	0019      	movs	r1, r3
 8006672:	0010      	movs	r0, r2
 8006674:	f000 fd94 	bl	80071a0 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006678:	e0df      	b.n	800683a <fallas+0x28a>
	       	goto fallas16;//
 800667a:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 800667c:	e0dd      	b.n	800683a <fallas+0x28a>
	    goto fallas20;//jra fallas20
 800667e:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8006680:	4b73      	ldr	r3, [pc, #460]	@ (8006850 <fallas+0x2a0>)
 8006682:	79db      	ldrb	r3, [r3, #7]
 8006684:	2201      	movs	r2, #1
 8006686:	4053      	eors	r3, r2
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d105      	bne.n	800669a <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 800668e:	2201      	movs	r2, #1
 8006690:	2127      	movs	r1, #39	@ 0x27
 8006692:	201f      	movs	r0, #31
 8006694:	f000 fdac 	bl	80071f0 <wreg_waux_conf>
 8006698:	e000      	b.n	800669c <fallas+0xec>
			goto fallas_j07;
 800669a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 800669c:	4b6c      	ldr	r3, [pc, #432]	@ (8006850 <fallas+0x2a0>)
 800669e:	799b      	ldrb	r3, [r3, #6]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4053      	eors	r3, r2
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 80066aa:	2201      	movs	r2, #1
 80066ac:	2127      	movs	r1, #39	@ 0x27
 80066ae:	2026      	movs	r0, #38	@ 0x26
 80066b0:	f000 fd9e 	bl	80071f0 <wreg_waux_conf>
 80066b4:	e000      	b.n	80066b8 <fallas+0x108>
			goto fallas_j08;
 80066b6:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 80066b8:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <fallas+0x2a4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	4053      	eors	r3, r2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 80066c6:	2200      	movs	r2, #0
 80066c8:	212f      	movs	r1, #47	@ 0x2f
 80066ca:	200e      	movs	r0, #14
 80066cc:	f000 fd90 	bl	80071f0 <wreg_waux_conf>
 80066d0:	e000      	b.n	80066d4 <fallas+0x124>
			goto fallas_j08b;
 80066d2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 80066d4:	4b60      	ldr	r3, [pc, #384]	@ (8006858 <fallas+0x2a8>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	4053      	eors	r3, r2
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 80066e2:	2201      	movs	r2, #1
 80066e4:	210a      	movs	r1, #10
 80066e6:	200b      	movs	r0, #11
 80066e8:	f000 fd82 	bl	80071f0 <wreg_waux_conf>
 80066ec:	e000      	b.n	80066f0 <fallas+0x140>
			goto fallas_j08c;
 80066ee:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 80066f0:	4b57      	ldr	r3, [pc, #348]	@ (8006850 <fallas+0x2a0>)
 80066f2:	795b      	ldrb	r3, [r3, #5]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d107      	bne.n	8006708 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 80066f8:	4b56      	ldr	r3, [pc, #344]	@ (8006854 <fallas+0x2a4>)
 80066fa:	79db      	ldrb	r3, [r3, #7]
 80066fc:	2201      	movs	r2, #1
 80066fe:	4053      	eors	r3, r2
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006706:	e000      	b.n	800670a <fallas+0x15a>
			goto fallas_j01c;
 8006708:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 800670a:	2201      	movs	r2, #1
 800670c:	2104      	movs	r1, #4
 800670e:	2013      	movs	r0, #19
 8006710:	f000 fd6e 	bl	80071f0 <wreg_waux_conf>
 8006714:	e000      	b.n	8006718 <fallas+0x168>
			goto fallas_j02c;
 8006716:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006718:	4b4e      	ldr	r3, [pc, #312]	@ (8006854 <fallas+0x2a4>)
 800671a:	791b      	ldrb	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8006720:	4b4c      	ldr	r3, [pc, #304]	@ (8006854 <fallas+0x2a4>)
 8006722:	795b      	ldrb	r3, [r3, #5]
 8006724:	2201      	movs	r2, #1
 8006726:	4053      	eors	r3, r2
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d107      	bne.n	800673e <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 800672e:	e000      	b.n	8006732 <fallas+0x182>
	       	  goto fallas_j01b;
 8006730:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 8006732:	2201      	movs	r2, #1
 8006734:	2102      	movs	r1, #2
 8006736:	2013      	movs	r0, #19
 8006738:	f000 fd5a 	bl	80071f0 <wreg_waux_conf>
 800673c:	e000      	b.n	8006740 <fallas+0x190>
	       	  goto fallas_j02b;
 800673e:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8006740:	4b43      	ldr	r3, [pc, #268]	@ (8006850 <fallas+0x2a0>)
 8006742:	789b      	ldrb	r3, [r3, #2]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006748:	4b41      	ldr	r3, [pc, #260]	@ (8006850 <fallas+0x2a0>)
 800674a:	78db      	ldrb	r3, [r3, #3]
 800674c:	2201      	movs	r2, #1
 800674e:	4053      	eors	r3, r2
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006756:	e000      	b.n	800675a <fallas+0x1aa>
			goto fallas_j03;
 8006758:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 800675a:	2201      	movs	r2, #1
 800675c:	2113      	movs	r1, #19
 800675e:	201f      	movs	r0, #31
 8006760:	f000 fd46 	bl	80071f0 <wreg_waux_conf>
 8006764:	e000      	b.n	8006768 <fallas+0x1b8>
			goto fallas_j04;
 8006766:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006768:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <fallas+0x2a0>)
 800676a:	791b      	ldrb	r3, [r3, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	4053      	eors	r3, r2
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006776:	2201      	movs	r2, #1
 8006778:	211e      	movs	r1, #30
 800677a:	201f      	movs	r0, #31
 800677c:	f000 fd38 	bl	80071f0 <wreg_waux_conf>
 8006780:	e000      	b.n	8006784 <fallas+0x1d4>
			goto fallas_j06;
 8006782:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006784:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <fallas+0x2a4>)
 8006786:	799b      	ldrb	r3, [r3, #6]
 8006788:	2201      	movs	r2, #1
 800678a:	4053      	eors	r3, r2
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d105      	bne.n	800679e <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8006792:	2201      	movs	r2, #1
 8006794:	210a      	movs	r1, #10
 8006796:	201f      	movs	r0, #31
 8006798:	f000 fd2a 	bl	80071f0 <wreg_waux_conf>
 800679c:	e000      	b.n	80067a0 <fallas+0x1f0>
			goto fallas_j06a;
 800679e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 80067a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006854 <fallas+0x2a4>)
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	2201      	movs	r2, #1
 80067a6:	4053      	eors	r3, r2
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 80067ae:	2201      	movs	r2, #1
 80067b0:	210c      	movs	r1, #12
 80067b2:	2020      	movs	r0, #32
 80067b4:	f000 fd1c 	bl	80071f0 <wreg_waux_conf>
 80067b8:	e000      	b.n	80067bc <fallas+0x20c>
			goto fallas_j04b;
 80067ba:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 80067bc:	4b25      	ldr	r3, [pc, #148]	@ (8006854 <fallas+0x2a4>)
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	2201      	movs	r2, #1
 80067c2:	4053      	eors	r3, r2
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 80067ca:	2201      	movs	r2, #1
 80067cc:	210b      	movs	r1, #11
 80067ce:	2020      	movs	r0, #32
 80067d0:	f000 fd0e 	bl	80071f0 <wreg_waux_conf>
 80067d4:	e000      	b.n	80067d8 <fallas+0x228>
			goto fallas_j04c;
 80067d6:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 80067d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006854 <fallas+0x2a4>)
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2201      	movs	r2, #1
 80067de:	4053      	eors	r3, r2
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 80067e6:	2201      	movs	r2, #1
 80067e8:	210c      	movs	r1, #12
 80067ea:	201f      	movs	r0, #31
 80067ec:	f000 fd00 	bl	80071f0 <wreg_waux_conf>
 80067f0:	e000      	b.n	80067f4 <fallas+0x244>
			goto fallas_j06b;
 80067f2:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 80067f4:	4b14      	ldr	r3, [pc, #80]	@ (8006848 <fallas+0x298>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d00c      	beq.n	8006816 <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 80067fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006868 <fallas+0x2b8>)
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	b29b      	uxth	r3, r3
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4a19      	ldr	r2, [pc, #100]	@ (800686c <fallas+0x2bc>)
 8006808:	215a      	movs	r1, #90	@ 0x5a
 800680a:	5c52      	ldrb	r2, [r2, r1]
 800680c:	4013      	ands	r3, r2
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d111      	bne.n	8006838 <fallas+0x288>
			goto parpadeo2a;
 8006814:	e000      	b.n	8006818 <fallas+0x268>
			goto parpadeo2a;
 8006816:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006818:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 800681a:	4b12      	ldr	r3, [pc, #72]	@ (8006864 <fallas+0x2b4>)
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	4b10      	ldr	r3, [pc, #64]	@ (8006860 <fallas+0x2b0>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	0019      	movs	r1, r3
 8006824:	0010      	movs	r0, r2
 8006826:	f000 fcbb 	bl	80071a0 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 800682a:	4b08      	ldr	r3, [pc, #32]	@ (800684c <fallas+0x29c>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8006830:	4b06      	ldr	r3, [pc, #24]	@ (800684c <fallas+0x29c>)
 8006832:	2200      	movs	r2, #0
 8006834:	705a      	strb	r2, [r3, #1]
 8006836:	e000      	b.n	800683a <fallas+0x28a>
		goto finfallas;
 8006838:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000fa8 	.word	0x20000fa8
 8006848:	20000ba8 	.word	0x20000ba8
 800684c:	20000ba0 	.word	0x20000ba0
 8006850:	20000b98 	.word	0x20000b98
 8006854:	20000b90 	.word	0x20000b90
 8006858:	200010b8 	.word	0x200010b8
 800685c:	20000be8 	.word	0x20000be8
 8006860:	20000b64 	.word	0x20000b64
 8006864:	20000b65 	.word	0x20000b65
 8006868:	20000b5c 	.word	0x20000b5c
 800686c:	200000b8 	.word	0x200000b8

08006870 <offdpy>:
void offdpy (){				//	offdpy:
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006874:	211f      	movs	r1, #31
 8006876:	201f      	movs	r0, #31
 8006878:	f000 fc92 	bl	80071a0 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 800687c:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <offdpy+0x20>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8006882:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <offdpy+0x20>)
 8006884:	2200      	movs	r2, #0
 8006886:	705a      	strb	r2, [r3, #1]
}
 8006888:	46c0      	nop			@ (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	20000ba0 	.word	0x20000ba0

08006894 <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	b0a7      	sub	sp, #156	@ 0x9c
 8006898:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 800689a:	4bd2      	ldr	r3, [pc, #840]	@ (8006be4 <ram_reserved+0x350>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2baa      	cmp	r3, #170	@ 0xaa
 80068a0:	d000      	beq.n	80068a4 <ram_reserved+0x10>
 80068a2:	e15c      	b.n	8006b5e <ram_reserved+0x2ca>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 80068a4:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 80068a6:	4bd0      	ldr	r3, [pc, #832]	@ (8006be8 <ram_reserved+0x354>)
 80068a8:	0018      	movs	r0, r3
 80068aa:	f00f f9b7 	bl	8015c1c <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 80068ae:	4bcf      	ldr	r3, [pc, #828]	@ (8006bec <ram_reserved+0x358>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	22f8      	movs	r2, #248	@ 0xf8
 80068b4:	0612      	lsls	r2, r2, #24
 80068b6:	4694      	mov	ip, r2
 80068b8:	4463      	add	r3, ip
 80068ba:	228c      	movs	r2, #140	@ 0x8c
 80068bc:	18b9      	adds	r1, r7, r2
 80068be:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 80068c0:	18bb      	adds	r3, r7, r2
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	055b      	lsls	r3, r3, #21
 80068c6:	0d5b      	lsrs	r3, r3, #21
 80068c8:	d12f      	bne.n	800692a <ram_reserved+0x96>
				uint32_t numberPage = VarAux_/2048; 		// Number the Page
 80068ca:	18bb      	adds	r3, r7, r2
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	0adb      	lsrs	r3, r3, #11
 80068d0:	2288      	movs	r2, #136	@ 0x88
 80068d2:	18b9      	adds	r1, r7, r2
 80068d4:	600b      	str	r3, [r1, #0]
				uint32_t Error_ = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
				FLASH_EraseInitTypeDef pEraseInit = {0};
 80068da:	266c      	movs	r6, #108	@ 0x6c
 80068dc:	19bb      	adds	r3, r7, r6
 80068de:	0018      	movs	r0, r3
 80068e0:	2310      	movs	r3, #16
 80068e2:	001a      	movs	r2, r3
 80068e4:	2100      	movs	r1, #0
 80068e6:	f014 fb19 	bl	801af1c <memset>
				pEraseInit.NbPages = 1;
 80068ea:	0031      	movs	r1, r6
 80068ec:	187a      	adds	r2, r7, r1
 80068ee:	2301      	movs	r3, #1
 80068f0:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 80068f2:	187a      	adds	r2, r7, r1
 80068f4:	2388      	movs	r3, #136	@ 0x88
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80068fc:	187a      	adds	r2, r7, r1
 80068fe:	2302      	movs	r3, #2
 8006900:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	f00c fbfe 	bl	8013104 <HAL_FLASH_Unlock>
 8006908:	1e03      	subs	r3, r0, #0
 800690a:	d1fb      	bne.n	8006904 <ram_reserved+0x70>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 800690c:	2314      	movs	r3, #20
 800690e:	2268      	movs	r2, #104	@ 0x68
 8006910:	189b      	adds	r3, r3, r2
 8006912:	19da      	adds	r2, r3, r7
 8006914:	236c      	movs	r3, #108	@ 0x6c
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	0011      	movs	r1, r2
 800691a:	0018      	movs	r0, r3
 800691c:	f00c fca0 	bl	8013260 <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	f00c fc13 	bl	801314c <HAL_FLASH_Lock>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d1fb      	bne.n	8006922 <ram_reserved+0x8e>
			}
			AddressDestination = (uint64_t *) dirPointer;
 800692a:	4bb0      	ldr	r3, [pc, #704]	@ (8006bec <ram_reserved+0x358>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2294      	movs	r2, #148	@ 0x94
 8006930:	18ba      	adds	r2, r7, r2
 8006932:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006934:	232b      	movs	r3, #43	@ 0x2b
 8006936:	2268      	movs	r2, #104	@ 0x68
 8006938:	189b      	adds	r3, r3, r2
 800693a:	19da      	adds	r2, r3, r7
 800693c:	2300      	movs	r3, #0
 800693e:	7013      	strb	r3, [r2, #0]
 8006940:	e103      	b.n	8006b4a <ram_reserved+0x2b6>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 8006942:	4bab      	ldr	r3, [pc, #684]	@ (8006bf0 <ram_reserved+0x35c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2680      	movs	r6, #128	@ 0x80
 800694a:	19ba      	adds	r2, r7, r6
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	2284      	movs	r2, #132	@ 0x84
 8006952:	18ba      	adds	r2, r7, r2
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4ba6      	ldr	r3, [pc, #664]	@ (8006bf0 <ram_reserved+0x35c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	4ba4      	ldr	r3, [pc, #656]	@ (8006bf0 <ram_reserved+0x35c>)
 800695e:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 8006960:	4ba3      	ldr	r3, [pc, #652]	@ (8006bf0 <ram_reserved+0x35c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006968:	2300      	movs	r3, #0
 800696a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800696c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800696e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006970:	000b      	movs	r3, r1
 8006972:	0e1b      	lsrs	r3, r3, #24
 8006974:	0010      	movs	r0, r2
 8006976:	0200      	lsls	r0, r0, #8
 8006978:	6678      	str	r0, [r7, #100]	@ 0x64
 800697a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800697c:	4318      	orrs	r0, r3
 800697e:	6678      	str	r0, [r7, #100]	@ 0x64
 8006980:	000b      	movs	r3, r1
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	663b      	str	r3, [r7, #96]	@ 0x60
 8006986:	19bb      	adds	r3, r7, r6
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800698e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006990:	1812      	adds	r2, r2, r0
 8006992:	414b      	adcs	r3, r1
 8006994:	19b9      	adds	r1, r7, r6
 8006996:	600a      	str	r2, [r1, #0]
 8006998:	604b      	str	r3, [r1, #4]
 800699a:	4b95      	ldr	r3, [pc, #596]	@ (8006bf0 <ram_reserved+0x35c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	4b93      	ldr	r3, [pc, #588]	@ (8006bf0 <ram_reserved+0x35c>)
 80069a2:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 80069a4:	4b92      	ldr	r3, [pc, #584]	@ (8006bf0 <ram_reserved+0x35c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ac:	2300      	movs	r3, #0
 80069ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80069b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069b4:	000b      	movs	r3, r1
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	0010      	movs	r0, r2
 80069ba:	0405      	lsls	r5, r0, #16
 80069bc:	431d      	orrs	r5, r3
 80069be:	000b      	movs	r3, r1
 80069c0:	041c      	lsls	r4, r3, #16
 80069c2:	19bb      	adds	r3, r7, r6
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	1912      	adds	r2, r2, r4
 80069ca:	416b      	adcs	r3, r5
 80069cc:	0030      	movs	r0, r6
 80069ce:	19b9      	adds	r1, r7, r6
 80069d0:	600a      	str	r2, [r1, #0]
 80069d2:	604b      	str	r3, [r1, #4]
 80069d4:	4b86      	ldr	r3, [pc, #536]	@ (8006bf0 <ram_reserved+0x35c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	4b85      	ldr	r3, [pc, #532]	@ (8006bf0 <ram_reserved+0x35c>)
 80069dc:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 80069de:	4b84      	ldr	r3, [pc, #528]	@ (8006bf0 <ram_reserved+0x35c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e6:	2300      	movs	r3, #0
 80069e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ee:	0011      	movs	r1, r2
 80069f0:	0a09      	lsrs	r1, r1, #8
 80069f2:	6479      	str	r1, [r7, #68]	@ 0x44
 80069f4:	0013      	movs	r3, r2
 80069f6:	061b      	lsls	r3, r3, #24
 80069f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069fa:	0006      	movs	r6, r0
 80069fc:	183b      	adds	r3, r7, r0
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006a04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a06:	1812      	adds	r2, r2, r0
 8006a08:	414b      	adcs	r3, r1
 8006a0a:	0031      	movs	r1, r6
 8006a0c:	1878      	adds	r0, r7, r1
 8006a0e:	6002      	str	r2, [r0, #0]
 8006a10:	6043      	str	r3, [r0, #4]
 8006a12:	4b77      	ldr	r3, [pc, #476]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	4b75      	ldr	r3, [pc, #468]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a1a:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 8006a1c:	4b74      	ldr	r3, [pc, #464]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	001b      	movs	r3, r3
 8006a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2e:	2300      	movs	r3, #0
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a32:	000e      	movs	r6, r1
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a3e:	1812      	adds	r2, r2, r0
 8006a40:	414b      	adcs	r3, r1
 8006a42:	0031      	movs	r1, r6
 8006a44:	1878      	adds	r0, r7, r1
 8006a46:	6002      	str	r2, [r0, #0]
 8006a48:	6043      	str	r3, [r0, #4]
 8006a4a:	4b69      	ldr	r3, [pc, #420]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	4b67      	ldr	r3, [pc, #412]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a52:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 8006a54:	4b66      	ldr	r3, [pc, #408]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
 8006a6a:	000e      	movs	r6, r1
 8006a6c:	187b      	adds	r3, r7, r1
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	6a38      	ldr	r0, [r7, #32]
 8006a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a76:	1812      	adds	r2, r2, r0
 8006a78:	414b      	adcs	r3, r1
 8006a7a:	0031      	movs	r1, r6
 8006a7c:	1878      	adds	r0, r7, r1
 8006a7e:	6002      	str	r2, [r0, #0]
 8006a80:	6043      	str	r3, [r0, #4]
 8006a82:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	4b59      	ldr	r3, [pc, #356]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a8a:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 8006a8c:	4b58      	ldr	r3, [pc, #352]	@ (8006bf0 <ram_reserved+0x35c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	000e      	movs	r6, r1
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	6938      	ldr	r0, [r7, #16]
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	1812      	adds	r2, r2, r0
 8006ab0:	414b      	adcs	r3, r1
 8006ab2:	0031      	movs	r1, r6
 8006ab4:	1878      	adds	r0, r7, r1
 8006ab6:	6002      	str	r2, [r0, #0]
 8006ab8:	6043      	str	r3, [r0, #4]
 8006aba:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf0 <ram_reserved+0x35c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8006bf0 <ram_reserved+0x35c>)
 8006ac2:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8006ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8006bf0 <ram_reserved+0x35c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	60bb      	str	r3, [r7, #8]
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	000e      	movs	r6, r1
 8006adc:	187b      	adds	r3, r7, r1
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	6838      	ldr	r0, [r7, #0]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	1812      	adds	r2, r2, r0
 8006ae8:	414b      	adcs	r3, r1
 8006aea:	19b9      	adds	r1, r7, r6
 8006aec:	600a      	str	r2, [r1, #0]
 8006aee:	604b      	str	r3, [r1, #4]
 8006af0:	4b3f      	ldr	r3, [pc, #252]	@ (8006bf0 <ram_reserved+0x35c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf0 <ram_reserved+0x35c>)
 8006af8:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	f00c fb02 	bl	8013104 <HAL_FLASH_Unlock>
 8006b00:	1e03      	subs	r3, r0, #0
 8006b02:	d1fb      	bne.n	8006afc <ram_reserved+0x268>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8006b04:	2394      	movs	r3, #148	@ 0x94
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2001      	movs	r0, #1
 8006b14:	f00c faa8 	bl	8013068 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006b18:	46c0      	nop			@ (mov r8, r8)
 8006b1a:	f00c fb17 	bl	801314c <HAL_FLASH_Lock>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d1fb      	bne.n	8006b1a <ram_reserved+0x286>
				AddressDestination++;
 8006b22:	2294      	movs	r2, #148	@ 0x94
 8006b24:	18bb      	adds	r3, r7, r2
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	18ba      	adds	r2, r7, r2
 8006b2c:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8006be8 <ram_reserved+0x354>)
 8006b30:	0018      	movs	r0, r3
 8006b32:	f00f f873 	bl	8015c1c <HAL_IWDG_Refresh>


				asm ("nop");
 8006b36:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006b38:	222b      	movs	r2, #43	@ 0x2b
 8006b3a:	2168      	movs	r1, #104	@ 0x68
 8006b3c:	1853      	adds	r3, r2, r1
 8006b3e:	19db      	adds	r3, r3, r7
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	1852      	adds	r2, r2, r1
 8006b44:	19d2      	adds	r2, r2, r7
 8006b46:	3301      	adds	r3, #1
 8006b48:	7013      	strb	r3, [r2, #0]
 8006b4a:	232b      	movs	r3, #43	@ 0x2b
 8006b4c:	2268      	movs	r2, #104	@ 0x68
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	19db      	adds	r3, r3, r7
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d800      	bhi.n	8006b5a <ram_reserved+0x2c6>
 8006b58:	e6f3      	b.n	8006942 <ram_reserved+0xae>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 8006b5a:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006b5c:	e039      	b.n	8006bd2 <ram_reserved+0x33e>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006b5e:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006b60:	4b21      	ldr	r3, [pc, #132]	@ (8006be8 <ram_reserved+0x354>)
 8006b62:	0018      	movs	r0, r3
 8006b64:	f00f f85a 	bl	8015c1c <HAL_IWDG_Refresh>
//
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			HAL_IWDG_Refresh( &hiwdg );
 8006b68:	4b1f      	ldr	r3, [pc, #124]	@ (8006be8 <ram_reserved+0x354>)
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f00f f856 	bl	8015c1c <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006b70:	232a      	movs	r3, #42	@ 0x2a
 8006b72:	2268      	movs	r2, #104	@ 0x68
 8006b74:	189b      	adds	r3, r3, r2
 8006b76:	19db      	adds	r3, r3, r7
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e020      	b.n	8006bc0 <ram_reserved+0x32c>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <ram_reserved+0x358>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	001a      	movs	r2, r3
 8006b84:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf0 <ram_reserved+0x35c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	0010      	movs	r0, r2
 8006b8e:	f7fc f8d5 	bl	8002d3c <FlashManager>
				dataPointer++;
 8006b92:	4b17      	ldr	r3, [pc, #92]	@ (8006bf0 <ram_reserved+0x35c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <ram_reserved+0x35c>)
 8006b9a:	601a      	str	r2, [r3, #0]
				dirPointer++;
 8006b9c:	4b13      	ldr	r3, [pc, #76]	@ (8006bec <ram_reserved+0x358>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	4b12      	ldr	r3, [pc, #72]	@ (8006bec <ram_reserved+0x358>)
 8006ba4:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );
 8006ba6:	4b10      	ldr	r3, [pc, #64]	@ (8006be8 <ram_reserved+0x354>)
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f00f f837 	bl	8015c1c <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006bae:	212a      	movs	r1, #42	@ 0x2a
 8006bb0:	2068      	movs	r0, #104	@ 0x68
 8006bb2:	180b      	adds	r3, r1, r0
 8006bb4:	19db      	adds	r3, r3, r7
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	180b      	adds	r3, r1, r0
 8006bba:	19db      	adds	r3, r3, r7
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	232a      	movs	r3, #42	@ 0x2a
 8006bc2:	2268      	movs	r2, #104	@ 0x68
 8006bc4:	189b      	adds	r3, r3, r2
 8006bc6:	19db      	adds	r3, r3, r7
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dad6      	bge.n	8006b7e <ram_reserved+0x2ea>
			}



WAIT_FOR_GRAB_0:
 8006bd0:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <ram_reserved+0x354>)
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f00f f821 	bl	8015c1c <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b027      	add	sp, #156	@ 0x9c
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	20000d9c 	.word	0x20000d9c
 8006be8:	2000055c 	.word	0x2000055c
 8006bec:	20000da0 	.word	0x20000da0
 8006bf0:	20000da4 	.word	0x20000da4

08006bf4 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8006bfa:	1dbb      	adds	r3, r7, #6
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	801a      	strh	r2, [r3, #0]
	foo= findLastValue((uint32_t) &eePlantilla[eetiempoAhorro1])*360;
 8006c00:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <load_tiempoAhorro1+0x34>)
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fc f80a 	bl	8002c1c <findLastValue>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	1dbb      	adds	r3, r7, #6
 8006c0e:	21b4      	movs	r1, #180	@ 0xb4
 8006c10:	0049      	lsls	r1, r1, #1
 8006c12:	434a      	muls	r2, r1
 8006c14:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8006c16:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <load_tiempoAhorro1+0x38>)
 8006c18:	1dba      	adds	r2, r7, #6
 8006c1a:	8812      	ldrh	r2, [r2, #0]
 8006c1c:	801a      	strh	r2, [r3, #0]
}
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b002      	add	sp, #8
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	0803f06f 	.word	0x0803f06f
 8006c2c:	20000c40 	.word	0x20000c40

08006c30 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8006c36:	1dbb      	adds	r3, r7, #6
 8006c38:	2200      	movs	r2, #0
 8006c3a:	801a      	strh	r2, [r3, #0]
		foo= findLastValue((uint32_t) &eePlantilla[eetiempoAhorro2])*360;
 8006c3c:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <load_tiempoAhorro2+0x34>)
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f7fb ffec 	bl	8002c1c <findLastValue>
 8006c44:	0003      	movs	r3, r0
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	1dbb      	adds	r3, r7, #6
 8006c4a:	21b4      	movs	r1, #180	@ 0xb4
 8006c4c:	0049      	lsls	r1, r1, #1
 8006c4e:	434a      	muls	r2, r1
 8006c50:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 8006c52:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <load_tiempoAhorro2+0x38>)
 8006c54:	1dba      	adds	r2, r7, #6
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	801a      	strh	r2, [r3, #0]
}
 8006c5a:	46c0      	nop			@ (mov r8, r8)
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b002      	add	sp, #8
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	0803f070 	.word	0x0803f070
 8006c68:	20000c42 	.word	0x20000c42

08006c6c <load_timeNoct>:

void load_timeNoct(){
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = findLastValue((uint32_t) &eePlantilla[eetimeNoct])*60;
 8006c70:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <load_timeNoct+0x20>)
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7fb ffd2 	bl	8002c1c <findLastValue>
 8006c78:	0003      	movs	r3, r0
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	223c      	movs	r2, #60	@ 0x3c
 8006c7e:	4353      	muls	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	4b03      	ldr	r3, [pc, #12]	@ (8006c90 <load_timeNoct+0x24>)
 8006c84:	801a      	strh	r2, [r3, #0]
}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	0803f04b 	.word	0x0803f04b
 8006c90:	20000c54 	.word	0x20000c54

08006c94 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 8006c9a:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <load_next_buffer+0x60>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8006ca0:	4b15      	ldr	r3, [pc, #84]	@ (8006cf8 <load_next_buffer+0x64>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	01db      	lsls	r3, r3, #7
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <load_next_buffer+0x68>)
 8006caa:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8006cac:	4b14      	ldr	r3, [pc, #80]	@ (8006d00 <load_next_buffer+0x6c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <load_next_buffer+0x68>)
 8006cb2:	8812      	ldrh	r2, [r2, #0]
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8006cb8:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <load_next_buffer+0x70>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	701a      	strb	r2, [r3, #0]
	point_X++;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
	point_Y++;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	603b      	str	r3, [r7, #0]
	wreg++;
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <load_next_buffer+0x70>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <load_next_buffer+0x70>)
 8006cdc:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <load_next_buffer+0x70>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	db00      	blt.n	8006cea <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8006ce8:	e7e9      	b.n	8006cbe <load_next_buffer+0x2a>
	}
    asm ("nop");
 8006cea:	46c0      	nop			@ (mov r8, r8)
}
 8006cec:	46c0      	nop			@ (mov r8, r8)
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000db4 	.word	0x20000db4
 8006cf8:	20000daa 	.word	0x20000daa
 8006cfc:	200008e2 	.word	0x200008e2
 8006d00:	20000db0 	.word	0x20000db0
 8006d04:	20000b65 	.word	0x20000b65

08006d08 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
		//		ldw		X,cntReg
		//		ldw		resulh,X

		uint32_t *point_X;
		point_X = (uint32_t *) (cntRegPNT);
 8006d0e:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <save_cntReg+0x64>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	607b      	str	r3, [r7, #4]

		waux = highByte(cntReg);			//		mov		waux,resulh;
 8006d14:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <save_cntReg+0x68>)
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <save_cntReg+0x6c>)
 8006d20:	701a      	strb	r2, [r3, #0]
		//		ldw		X,cntRegPNT;
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8006d22:	4b14      	ldr	r3, [pc, #80]	@ (8006d74 <save_cntReg+0x6c>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	001a      	movs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	f000 fa23 	bl	8007178 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//  	MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d32:	4b11      	ldr	r3, [pc, #68]	@ (8006d78 <save_cntReg+0x70>)
 8006d34:	0018      	movs	r0, r3
 8006d36:	f00e ff71 	bl	8015c1c <HAL_IWDG_Refresh>
		//
		waux = lowByte(cntReg);		// 		mov		waux,resull;
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <save_cntReg+0x68>)
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <save_cntReg+0x6c>)
 8006d42:	701a      	strb	r2, [r3, #0]
		point_X++;  // cntRegPNT++;						//		incw	X
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3304      	adds	r3, #4
 8006d48:	607b      	str	r3, [r7, #4]
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <save_cntReg+0x6c>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	001a      	movs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0019      	movs	r1, r3
 8006d54:	0010      	movs	r0, r2
 8006d56:	f000 fa0f 	bl	8007178 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d5a:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <save_cntReg+0x70>)
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f00e ff5d 	bl	8015c1c <HAL_IWDG_Refresh>
		//
//		ret
}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b002      	add	sp, #8
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	20001050 	.word	0x20001050
 8006d70:	2000104e 	.word	0x2000104e
 8006d74:	20000b64 	.word	0x20000b64
 8006d78:	2000055c 	.word	0x2000055c

08006d7c <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8006d80:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <save_timeUNIX+0x9c>)
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b24      	ldr	r3, [pc, #144]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006d8c:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 8006d8e:	4b23      	ldr	r3, [pc, #140]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	001a      	movs	r2, r3
 8006d94:	4b22      	ldr	r3, [pc, #136]	@ (8006e20 <save_timeUNIX+0xa4>)
 8006d96:	0019      	movs	r1, r3
 8006d98:	0010      	movs	r0, r2
 8006d9a:	f000 f9ed 	bl	8007178 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d9e:	4b21      	ldr	r3, [pc, #132]	@ (8006e24 <save_timeUNIX+0xa8>)
 8006da0:	0018      	movs	r0, r3
 8006da2:	f00e ff3b 	bl	8015c1c <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 8006da6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <save_timeUNIX+0x9c>)
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006dae:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 8006db0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	001a      	movs	r2, r3
 8006db6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e28 <save_timeUNIX+0xac>)
 8006db8:	0019      	movs	r1, r3
 8006dba:	0010      	movs	r0, r2
 8006dbc:	f000 f9dc 	bl	8007178 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006dc0:	4b18      	ldr	r3, [pc, #96]	@ (8006e24 <save_timeUNIX+0xa8>)
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f00e ff2a 	bl	8015c1c <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 8006dc8:	4b18      	ldr	r3, [pc, #96]	@ (8006e2c <save_timeUNIX+0xb0>)
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006dd4:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8006dd6:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	001a      	movs	r2, r3
 8006ddc:	4b14      	ldr	r3, [pc, #80]	@ (8006e30 <save_timeUNIX+0xb4>)
 8006dde:	0019      	movs	r1, r3
 8006de0:	0010      	movs	r0, r2
 8006de2:	f000 f9c9 	bl	8007178 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006de6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e24 <save_timeUNIX+0xa8>)
 8006de8:	0018      	movs	r0, r3
 8006dea:	f00e ff17 	bl	8015c1c <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8006dee:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <save_timeUNIX+0xb0>)
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006df6:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8006df8:	4b08      	ldr	r3, [pc, #32]	@ (8006e1c <save_timeUNIX+0xa0>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	001a      	movs	r2, r3
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <save_timeUNIX+0xb8>)
 8006e00:	0019      	movs	r1, r3
 8006e02:	0010      	movs	r0, r2
 8006e04:	f000 f9b8 	bl	8007178 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <save_timeUNIX+0xa8>)
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f00e ff06 	bl	8015c1c <HAL_IWDG_Refresh>

}
 8006e10:	46c0      	nop			@ (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	20000dc0 	.word	0x20000dc0
 8006e1c:	20000b64 	.word	0x20000b64
 8006e20:	0803f804 	.word	0x0803f804
 8006e24:	2000055c 	.word	0x2000055c
 8006e28:	0803f805 	.word	0x0803f805
 8006e2c:	20000dc2 	.word	0x20000dc2
 8006e30:	0803f806 	.word	0x0803f806
 8006e34:	0803f807 	.word	0x0803f807

08006e38 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	000a      	movs	r2, r1
 8006e42:	1cfb      	adds	r3, r7, #3
 8006e44:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8006e46:	e011      	b.n	8006e6c <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8006e48:	210f      	movs	r1, #15
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 f860 	bl	8006f1c <build_chksum>
		*point_X++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	607b      	str	r3, [r7, #4]
		waux--;
 8006e62:	1cfb      	adds	r3, r7, #3
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	1cfb      	adds	r3, r7, #3
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
	while (waux){
 8006e6c:	1cfb      	adds	r3, r7, #3
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e9      	bne.n	8006e48 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 8006e74:	46c0      	nop			@ (mov r8, r8)
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b004      	add	sp, #16
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 8006e84:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <ld_alarmDelay+0x1c>)
 8006e86:	224e      	movs	r2, #78	@ 0x4e
 8006e88:	5c9b      	ldrb	r3, [r3, r2]
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	233c      	movs	r3, #60	@ 0x3c
 8006e8e:	4353      	muls	r3, r2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <ld_alarmDelay+0x20>)
 8006e94:	801a      	strh	r2, [r3, #0]
}
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	200000b8 	.word	0x200000b8
 8006ea0:	20000fb0 	.word	0x20000fb0

08006ea4 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	e007      	b.n	8006ec0 <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 8006eb0:	4a07      	ldr	r2, [pc, #28]	@ (8006ed0 <clean_buffer+0x2c>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	18d3      	adds	r3, r2, r3
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec4:	ddf4      	ble.n	8006eb0 <clean_buffer+0xc>
	}
}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	46c0      	nop			@ (mov r8, r8)
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000c9c 	.word	0x20000c9c

08006ed4 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e00c      	b.n	8006efe <copyVector+0x2a>
		*dstY = *srcX;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	701a      	strb	r2, [r3, #0]
		srcX++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	607b      	str	r3, [r7, #4]
		dstY++;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <copyVector+0x44>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	001a      	movs	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	dbec      	blt.n	8006ee4 <copyVector+0x10>
	}
	wreg = 0;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	@ (8006f18 <copyVector+0x44>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
}
 8006f10:	46c0      	nop			@ (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b004      	add	sp, #16
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000b65 	.word	0x20000b65

08006f1c <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	0002      	movs	r2, r0
 8006f24:	1dfb      	adds	r3, r7, #7
 8006f26:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8006f28:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8006f2a:	1dfb      	adds	r3, r7, #7
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <build_chksum+0x24>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	18d2      	adds	r2, r2, r3
 8006f34:	4b02      	ldr	r3, [pc, #8]	@ (8006f40 <build_chksum+0x24>)
 8006f36:	601a      	str	r2, [r3, #0]
}
 8006f38:	46c0      	nop			@ (mov r8, r8)
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b002      	add	sp, #8
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000e44 	.word	0x20000e44

08006f44 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8006f48:	f7ff fca4 	bl	8006894 <ram_reserved>
Return_RAM:

}
 8006f4c:	46c0      	nop			@ (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <decword+0x1c>
		(*decwreg_Reg)--;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	801a      	strh	r2, [r3, #0]
}
 8006f6e:	46c0      	nop			@ (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b002      	add	sp, #8
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <decwreg+0x1c>
		(*decwreg_Reg)--;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	701a      	strb	r2, [r3, #0]
}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 8006fa2:	4b40      	ldr	r3, [pc, #256]	@ (80070a4 <buildmode+0x108>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 8006fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80070a8 <buildmode+0x10c>)
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d107      	bne.n	8006fc0 <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 8006fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80070a4 <buildmode+0x108>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b3a      	ldr	r3, [pc, #232]	@ (80070a4 <buildmode+0x108>)
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e000      	b.n	8006fc2 <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 8006fc0:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 8006fc2:	1dbb      	adds	r3, r7, #6
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8006fc8:	4b38      	ldr	r3, [pc, #224]	@ (80070ac <buildmode+0x110>)
 8006fca:	2223      	movs	r2, #35	@ 0x23
 8006fcc:	5c9b      	ldrb	r3, [r3, r2]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4a36      	ldr	r2, [pc, #216]	@ (80070ac <buildmode+0x110>)
 8006fd4:	2124      	movs	r1, #36	@ 0x24
 8006fd6:	5c52      	ldrb	r2, [r2, r1]
 8006fd8:	189b      	adds	r3, r3, r2
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	1dbb      	adds	r3, r7, #6
 8006fde:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 8006fe0:	4b33      	ldr	r3, [pc, #204]	@ (80070b0 <buildmode+0x114>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4a32      	ldr	r2, [pc, #200]	@ (80070b4 <buildmode+0x118>)
 8006fea:	7812      	ldrb	r2, [r2, #0]
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <buildmode+0x11c>)
 8006ff2:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8006ff4:	4b30      	ldr	r3, [pc, #192]	@ (80070b8 <buildmode+0x11c>)
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b21b      	sxth	r3, r3
 8006ffa:	1dba      	adds	r2, r7, #6
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	5e52      	ldrsh	r2, [r2, r1]
 8007000:	429a      	cmp	r2, r3
 8007002:	dc07      	bgt.n	8007014 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007004:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <buildmode+0x108>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2202      	movs	r2, #2
 800700a:	4313      	orrs	r3, r2
 800700c:	b2da      	uxtb	r2, r3
 800700e:	4b25      	ldr	r3, [pc, #148]	@ (80070a4 <buildmode+0x108>)
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e000      	b.n	8007016 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007014:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007016:	4b25      	ldr	r3, [pc, #148]	@ (80070ac <buildmode+0x110>)
 8007018:	2259      	movs	r2, #89	@ 0x59
 800701a:	5c9b      	ldrb	r3, [r3, r2]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d025      	beq.n	800706c <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 8007020:	4b26      	ldr	r3, [pc, #152]	@ (80070bc <buildmode+0x120>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	b29b      	uxth	r3, r3
 8007028:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <buildmode+0x124>)
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	189b      	adds	r3, r3, r2
 800702e:	b29a      	uxth	r2, r3
 8007030:	4b21      	ldr	r3, [pc, #132]	@ (80070b8 <buildmode+0x11c>)
 8007032:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8007034:	4b1d      	ldr	r3, [pc, #116]	@ (80070ac <buildmode+0x110>)
 8007036:	2221      	movs	r2, #33	@ 0x21
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	b29b      	uxth	r3, r3
 800703e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ac <buildmode+0x110>)
 8007040:	2122      	movs	r1, #34	@ 0x22
 8007042:	5c52      	ldrb	r2, [r2, r1]
 8007044:	189b      	adds	r3, r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	1dbb      	adds	r3, r7, #6
 800704a:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 800704c:	4b1a      	ldr	r3, [pc, #104]	@ (80070b8 <buildmode+0x11c>)
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b21b      	sxth	r3, r3
 8007052:	1dba      	adds	r2, r7, #6
 8007054:	2100      	movs	r1, #0
 8007056:	5e52      	ldrsh	r2, [r2, r1]
 8007058:	429a      	cmp	r2, r3
 800705a:	dc09      	bgt.n	8007070 <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 800705c:	4b11      	ldr	r3, [pc, #68]	@ (80070a4 <buildmode+0x108>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2210      	movs	r2, #16
 8007062:	4313      	orrs	r3, r2
 8007064:	b2da      	uxtb	r2, r3
 8007066:	4b0f      	ldr	r3, [pc, #60]	@ (80070a4 <buildmode+0x108>)
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e002      	b.n	8007072 <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 800706c:	46c0      	nop			@ (mov r8, r8)
 800706e:	e000      	b.n	8007072 <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 8007070:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 8007072:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <buildmode+0x128>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	4053      	eors	r3, r2
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d108      	bne.n	8007092 <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 8007080:	4b08      	ldr	r3, [pc, #32]	@ (80070a4 <buildmode+0x108>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2280      	movs	r2, #128	@ 0x80
 8007086:	4252      	negs	r2, r2
 8007088:	4313      	orrs	r3, r2
 800708a:	b2da      	uxtb	r2, r3
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <buildmode+0x108>)
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e000      	b.n	8007094 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 8007092:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 8007094:	4b03      	ldr	r3, [pc, #12]	@ (80070a4 <buildmode+0x108>)
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	4b0b      	ldr	r3, [pc, #44]	@ (80070c8 <buildmode+0x12c>)
 800709a:	701a      	strb	r2, [r3, #0]

}
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	46bd      	mov	sp, r7
 80070a0:	b002      	add	sp, #8
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000b64 	.word	0x20000b64
 80070a8:	20000bca 	.word	0x20000bca
 80070ac:	200000b8 	.word	0x200000b8
 80070b0:	20000bc0 	.word	0x20000bc0
 80070b4:	20000bc1 	.word	0x20000bc1
 80070b8:	200008e2 	.word	0x200008e2
 80070bc:	20000bc2 	.word	0x20000bc2
 80070c0:	20000bc3 	.word	0x20000bc3
 80070c4:	20000b88 	.word	0x20000b88
 80070c8:	20000b62 	.word	0x20000b62

080070cc <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 80070d2:	4b24      	ldr	r3, [pc, #144]	@ (8007164 <memodriver+0x98>)
 80070d4:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <memodriver+0x9c>)
 80070d8:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 80070da:	4b24      	ldr	r3, [pc, #144]	@ (800716c <memodriver+0xa0>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2baa      	cmp	r3, #170	@ 0xaa
 80070e0:	d115      	bne.n	800710e <memodriver+0x42>
				goto  loaddat;
			}
grabmemo:
 80070e2:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 80070e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007164 <memodriver+0x98>)
 80070e6:	781a      	ldrb	r2, [r3, #0]
 80070e8:	4b21      	ldr	r3, [pc, #132]	@ (8007170 <memodriver+0xa4>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d020      	beq.n	8007132 <memodriver+0x66>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 80070f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007170 <memodriver+0xa4>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	001a      	movs	r2, r3
 80070f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007174 <memodriver+0xa8>)
 80070f8:	5c9b      	ldrb	r3, [r3, r2]
 80070fa:	0018      	movs	r0, r3
 80070fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007170 <memodriver+0xa4>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	001a      	movs	r2, r3
 8007102:	4b19      	ldr	r3, [pc, #100]	@ (8007168 <memodriver+0x9c>)
 8007104:	18d3      	adds	r3, r2, r3
 8007106:	0019      	movs	r1, r3
 8007108:	f000 f836 	bl	8007178 <wreeprom>
			goto nextdat;
 800710c:	e012      	b.n	8007134 <memodriver+0x68>
				goto  loaddat;
 800710e:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = findLastValue((uint32_t)&eePlantilla[cntmemo]);
 8007110:	4b17      	ldr	r3, [pc, #92]	@ (8007170 <memodriver+0xa4>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	001a      	movs	r2, r3
 8007116:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <memodriver+0x9c>)
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	0018      	movs	r0, r3
 800711c:	f7fb fd7e 	bl	8002c1c <findLastValue>
 8007120:	0001      	movs	r1, r0
 8007122:	4b13      	ldr	r3, [pc, #76]	@ (8007170 <memodriver+0xa4>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	001a      	movs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	189b      	adds	r3, r3, r2
 800712c:	b2ca      	uxtb	r2, r1
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e000      	b.n	8007134 <memodriver+0x68>
				goto nextdat;
 8007132:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 8007134:	4b0e      	ldr	r3, [pc, #56]	@ (8007170 <memodriver+0xa4>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <memodriver+0xa4>)
 800713e:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 8007140:	4b0b      	ldr	r3, [pc, #44]	@ (8007170 <memodriver+0xa4>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	da06      	bge.n	8007158 <memodriver+0x8c>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 800714a:	4b08      	ldr	r3, [pc, #32]	@ (800716c <memodriver+0xa0>)
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 8007150:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <memodriver+0xa4>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 8007156:	e000      	b.n	800715a <memodriver+0x8e>
				goto finmemodr;
 8007158:	46c0      	nop			@ (mov r8, r8)
}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}
 8007162:	46c0      	nop			@ (mov r8, r8)
 8007164:	200000b8 	.word	0x200000b8
 8007168:	0803f000 	.word	0x0803f000
 800716c:	20000c73 	.word	0x20000c73
 8007170:	20000c74 	.word	0x20000c74
 8007174:	20000138 	.word	0x20000138

08007178 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	0002      	movs	r2, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 8007186:	1dfb      	adds	r3, r7, #7
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f7fb fdd2 	bl	8002d3c <FlashManager>
}
 8007198:	46c0      	nop			@ (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bd80      	pop	{r7, pc}

080071a0 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	0002      	movs	r2, r0
 80071a8:	1dfb      	adds	r3, r7, #7
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	1dbb      	adds	r3, r7, #6
 80071ae:	1c0a      	adds	r2, r1, #0
 80071b0:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <op_menu+0x2c>)
 80071b4:	1dfa      	adds	r2, r7, #7
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 80071ba:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <op_menu+0x30>)
 80071bc:	1dba      	adds	r2, r7, #6
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	701a      	strb	r2, [r3, #0]
}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b002      	add	sp, #8
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	20000b61 	.word	0x20000b61
 80071d0:	20000b60 	.word	0x20000b60

080071d4 <datled_clear>:

void datled_clear()
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 80071d8:	4b04      	ldr	r3, [pc, #16]	@ (80071ec <datled_clear+0x18>)
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 80071de:	4b03      	ldr	r3, [pc, #12]	@ (80071ec <datled_clear+0x18>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	705a      	strb	r2, [r3, #1]
}
 80071e4:	46c0      	nop			@ (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	20000ba0 	.word	0x20000ba0

080071f0 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	0004      	movs	r4, r0
 80071f8:	0008      	movs	r0, r1
 80071fa:	0011      	movs	r1, r2
 80071fc:	1dfb      	adds	r3, r7, #7
 80071fe:	1c22      	adds	r2, r4, #0
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	1dbb      	adds	r3, r7, #6
 8007204:	1c02      	adds	r2, r0, #0
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	1d7b      	adds	r3, r7, #5
 800720a:	1c0a      	adds	r2, r1, #0
 800720c:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 800720e:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <wreg_waux_conf+0x4c>)
 8007210:	1dfa      	adds	r2, r7, #7
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <wreg_waux_conf+0x50>)
 8007218:	1dba      	adds	r2, r7, #6
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 800721e:	1d7b      	adds	r3, r7, #5
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 8007226:	4b07      	ldr	r3, [pc, #28]	@ (8007244 <wreg_waux_conf+0x54>)
 8007228:	2201      	movs	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 800722c:	e002      	b.n	8007234 <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 800722e:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <wreg_waux_conf+0x54>)
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
}
 8007234:	46c0      	nop			@ (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b003      	add	sp, #12
 800723a:	bd90      	pop	{r4, r7, pc}
 800723c:	20000b65 	.word	0x20000b65
 8007240:	20000b64 	.word	0x20000b64
 8007244:	20000fa8 	.word	0x20000fa8

08007248 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	0005      	movs	r5, r0
 8007250:	000c      	movs	r4, r1
 8007252:	0010      	movs	r0, r2
 8007254:	0019      	movs	r1, r3
 8007256:	1dbb      	adds	r3, r7, #6
 8007258:	1c2a      	adds	r2, r5, #0
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	1c22      	adds	r2, r4, #0
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	1cbb      	adds	r3, r7, #2
 8007264:	1c02      	adds	r2, r0, #0
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	1c7b      	adds	r3, r7, #1
 800726a:	1c0a      	adds	r2, r1, #0
 800726c:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 800726e:	4b14      	ldr	r3, [pc, #80]	@ (80072c0 <opc_nv+0x78>)
 8007270:	1dba      	adds	r2, r7, #6
 8007272:	8812      	ldrh	r2, [r2, #0]
 8007274:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <opc_nv+0x7c>)
 8007278:	1d3a      	adds	r2, r7, #4
 800727a:	8812      	ldrh	r2, [r2, #0]
 800727c:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 800727e:	4b12      	ldr	r3, [pc, #72]	@ (80072c8 <opc_nv+0x80>)
 8007280:	1cba      	adds	r2, r7, #2
 8007282:	8812      	ldrh	r2, [r2, #0]
 8007284:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 8007286:	f7fe fe27 	bl	8005ed8 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 800728a:	4b0f      	ldr	r3, [pc, #60]	@ (80072c8 <opc_nv+0x80>)
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b29a      	uxth	r2, r3
 8007292:	1c7b      	adds	r3, r7, #1
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b2d1      	uxtb	r1, r2
 8007298:	4a0c      	ldr	r2, [pc, #48]	@ (80072cc <opc_nv+0x84>)
 800729a:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 800729c:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <opc_nv+0x80>)
 800729e:	881a      	ldrh	r2, [r3, #0]
 80072a0:	2318      	movs	r3, #24
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b2d1      	uxtb	r1, r2
 80072a8:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <opc_nv+0x84>)
 80072aa:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 80072ac:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <opc_nv+0x80>)
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7ff f807 	bl	80062c4 <convadec_math>

}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b002      	add	sp, #8
 80072bc:	bdb0      	pop	{r4, r5, r7, pc}
 80072be:	46c0      	nop			@ (mov r8, r8)
 80072c0:	20000c12 	.word	0x20000c12
 80072c4:	20000c14 	.word	0x20000c14
 80072c8:	200008e2 	.word	0x200008e2
 80072cc:	20000138 	.word	0x20000138

080072d0 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 80072d6:	4b79      	ldr	r3, [pc, #484]	@ (80074bc <comunicacion+0x1ec>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	3b01      	subs	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	4b77      	ldr	r3, [pc, #476]	@ (80074bc <comunicacion+0x1ec>)
 80072e0:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 80072e2:	4b76      	ldr	r3, [pc, #472]	@ (80074bc <comunicacion+0x1ec>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2bff      	cmp	r3, #255	@ 0xff
 80072e8:	d103      	bne.n	80072f2 <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80072ea:	4b75      	ldr	r3, [pc, #468]	@ (80074c0 <comunicacion+0x1f0>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80072f0:	e0dd      	b.n	80074ae <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 80072f2:	4b72      	ldr	r3, [pc, #456]	@ (80074bc <comunicacion+0x1ec>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80072f8:	d103      	bne.n	8007302 <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80072fa:	4b71      	ldr	r3, [pc, #452]	@ (80074c0 <comunicacion+0x1f0>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007300:	e0d5      	b.n	80074ae <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 8007302:	4b6e      	ldr	r3, [pc, #440]	@ (80074bc <comunicacion+0x1ec>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d000      	beq.n	800730c <comunicacion+0x3c>
 800730a:	e0cd      	b.n	80074a8 <comunicacion+0x1d8>
			goto comu_01;
 800730c:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 800730e:	4b6b      	ldr	r3, [pc, #428]	@ (80074bc <comunicacion+0x1ec>)
 8007310:	2205      	movs	r2, #5
 8007312:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8007314:	4b6b      	ldr	r3, [pc, #428]	@ (80074c4 <comunicacion+0x1f4>)
 8007316:	0018      	movs	r0, r3
 8007318:	f00c fed1 	bl	80140be <HAL_I2C_GetState>
 800731c:	0003      	movs	r3, r0
 800731e:	2b20      	cmp	r3, #32
 8007320:	d000      	beq.n	8007324 <comunicacion+0x54>
 8007322:	e0ae      	b.n	8007482 <comunicacion+0x1b2>
				countResetI2C = 0;
 8007324:	4b68      	ldr	r3, [pc, #416]	@ (80074c8 <comunicacion+0x1f8>)
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 800732a:	4b68      	ldr	r3, [pc, #416]	@ (80074cc <comunicacion+0x1fc>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 8007330:	4b66      	ldr	r3, [pc, #408]	@ (80074cc <comunicacion+0x1fc>)
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007336:	230f      	movs	r3, #15
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e00a      	b.n	8007356 <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 8007340:	200f      	movs	r0, #15
 8007342:	183b      	adds	r3, r7, r0
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	4a62      	ldr	r2, [pc, #392]	@ (80074d0 <comunicacion+0x200>)
 8007348:	2100      	movs	r1, #0
 800734a:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 800734c:	183b      	adds	r3, r7, r0
 800734e:	781a      	ldrb	r2, [r3, #0]
 8007350:	183b      	adds	r3, r7, r0
 8007352:	3201      	adds	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	230f      	movs	r3, #15
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b06      	cmp	r3, #6
 800735e:	d9ef      	bls.n	8007340 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 8007360:	4b5b      	ldr	r3, [pc, #364]	@ (80074d0 <comunicacion+0x200>)
 8007362:	2207      	movs	r2, #7
 8007364:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 8007366:	4b5a      	ldr	r3, [pc, #360]	@ (80074d0 <comunicacion+0x200>)
 8007368:	2209      	movs	r2, #9
 800736a:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 800736c:	4b59      	ldr	r3, [pc, #356]	@ (80074d4 <comunicacion+0x204>)
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	4b57      	ldr	r3, [pc, #348]	@ (80074d0 <comunicacion+0x200>)
 8007372:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8007374:	4b58      	ldr	r3, [pc, #352]	@ (80074d8 <comunicacion+0x208>)
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	4b55      	ldr	r3, [pc, #340]	@ (80074d0 <comunicacion+0x200>)
 800737a:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 800737c:	4b54      	ldr	r3, [pc, #336]	@ (80074d0 <comunicacion+0x200>)
 800737e:	2200      	movs	r2, #0
 8007380:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 8007382:	230e      	movs	r3, #14
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e015      	b.n	80073b8 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 800738c:	4b50      	ldr	r3, [pc, #320]	@ (80074d0 <comunicacion+0x200>)
 800738e:	791a      	ldrb	r2, [r3, #4]
 8007390:	200e      	movs	r0, #14
 8007392:	183b      	adds	r3, r7, r0
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	4951      	ldr	r1, [pc, #324]	@ (80074dc <comunicacion+0x20c>)
 8007398:	5ccb      	ldrb	r3, [r1, r3]
 800739a:	0019      	movs	r1, r3
 800739c:	183b      	adds	r3, r7, r0
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	4099      	lsls	r1, r3
 80073a2:	000b      	movs	r3, r1
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	4b49      	ldr	r3, [pc, #292]	@ (80074d0 <comunicacion+0x200>)
 80073ac:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 80073ae:	183b      	adds	r3, r7, r0
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	183b      	adds	r3, r7, r0
 80073b4:	3201      	adds	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	230e      	movs	r3, #14
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d9e4      	bls.n	800738c <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 80073c2:	4b43      	ldr	r3, [pc, #268]	@ (80074d0 <comunicacion+0x200>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 80073c8:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <comunicacion+0x200>)
 80073ca:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2106      	movs	r1, #6
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff fd31 	bl	8006e38 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 80073d6:	4b3d      	ldr	r3, [pc, #244]	@ (80074cc <comunicacion+0x1fc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	4b3c      	ldr	r3, [pc, #240]	@ (80074d0 <comunicacion+0x200>)
 80073de:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 80073e0:	4b3a      	ldr	r3, [pc, #232]	@ (80074cc <comunicacion+0x1fc>)
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 80073e6:	4b3e      	ldr	r3, [pc, #248]	@ (80074e0 <comunicacion+0x210>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d034      	beq.n	8007458 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 80073ee:	4a3d      	ldr	r2, [pc, #244]	@ (80074e4 <comunicacion+0x214>)
 80073f0:	4834      	ldr	r0, [pc, #208]	@ (80074c4 <comunicacion+0x1f4>)
 80073f2:	2309      	movs	r3, #9
 80073f4:	2154      	movs	r1, #84	@ 0x54
 80073f6:	f00c fc91 	bl	8013d1c <HAL_I2C_Master_Receive_DMA>
 80073fa:	1e03      	subs	r3, r0, #0
 80073fc:	d123      	bne.n	8007446 <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 80073fe:	230d      	movs	r3, #13
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e015      	b.n	8007434 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007408:	4b36      	ldr	r3, [pc, #216]	@ (80074e4 <comunicacion+0x214>)
 800740a:	799b      	ldrb	r3, [r3, #6]
 800740c:	001a      	movs	r2, r3
 800740e:	200d      	movs	r0, #13
 8007410:	183b      	adds	r3, r7, r0
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	411a      	asrs	r2, r3
 8007416:	0013      	movs	r3, r2
 8007418:	2201      	movs	r2, #1
 800741a:	401a      	ands	r2, r3
 800741c:	183b      	adds	r3, r7, r0
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	1e51      	subs	r1, r2, #1
 8007422:	418a      	sbcs	r2, r1
 8007424:	b2d1      	uxtb	r1, r2
 8007426:	4a30      	ldr	r2, [pc, #192]	@ (80074e8 <comunicacion+0x218>)
 8007428:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 800742a:	183b      	adds	r3, r7, r0
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	183b      	adds	r3, r7, r0
 8007430:	3201      	adds	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	230d      	movs	r3, #13
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b07      	cmp	r3, #7
 800743c:	d9e4      	bls.n	8007408 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 800743e:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <comunicacion+0x210>)
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e033      	b.n	80074ae <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007446:	4b1f      	ldr	r3, [pc, #124]	@ (80074c4 <comunicacion+0x1f4>)
 8007448:	0018      	movs	r0, r3
 800744a:	f00c fb31 	bl	8013ab0 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 800744e:	4b1d      	ldr	r3, [pc, #116]	@ (80074c4 <comunicacion+0x1f4>)
 8007450:	0018      	movs	r0, r3
 8007452:	f00c fa87 	bl	8013964 <HAL_I2C_Init>
 8007456:	e02a      	b.n	80074ae <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 8007458:	4a1d      	ldr	r2, [pc, #116]	@ (80074d0 <comunicacion+0x200>)
 800745a:	481a      	ldr	r0, [pc, #104]	@ (80074c4 <comunicacion+0x1f4>)
 800745c:	2307      	movs	r3, #7
 800745e:	2154      	movs	r1, #84	@ 0x54
 8007460:	f00c fb56 	bl	8013b10 <HAL_I2C_Master_Transmit_DMA>
 8007464:	1e03      	subs	r3, r0, #0
 8007466:	d103      	bne.n	8007470 <comunicacion+0x1a0>
					  FlagTx= 1;
 8007468:	4b1d      	ldr	r3, [pc, #116]	@ (80074e0 <comunicacion+0x210>)
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e01e      	b.n	80074ae <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007470:	4b14      	ldr	r3, [pc, #80]	@ (80074c4 <comunicacion+0x1f4>)
 8007472:	0018      	movs	r0, r3
 8007474:	f00c fb1c 	bl	8013ab0 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8007478:	4b12      	ldr	r3, [pc, #72]	@ (80074c4 <comunicacion+0x1f4>)
 800747a:	0018      	movs	r0, r3
 800747c:	f00c fa72 	bl	8013964 <HAL_I2C_Init>
 8007480:	e015      	b.n	80074ae <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 8007482:	4b11      	ldr	r3, [pc, #68]	@ (80074c8 <comunicacion+0x1f8>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	3301      	adds	r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b0f      	ldr	r3, [pc, #60]	@ (80074c8 <comunicacion+0x1f8>)
 800748c:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 800748e:	4b0e      	ldr	r3, [pc, #56]	@ (80074c8 <comunicacion+0x1f8>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <comunicacion+0x1f4>)
 8007498:	0018      	movs	r0, r3
 800749a:	f00c fb09 	bl	8013ab0 <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <comunicacion+0x1f4>)
 80074a0:	0018      	movs	r0, r3
 80074a2:	f00c fa5f 	bl	8013964 <HAL_I2C_Init>
 80074a6:	e002      	b.n	80074ae <comunicacion+0x1de>
		goto fin_comu;
 80074a8:	46c0      	nop			@ (mov r8, r8)
 80074aa:	e000      	b.n	80074ae <comunicacion+0x1de>
				}
			}
fin_comu:
 80074ac:	46c0      	nop			@ (mov r8, r8)
	detecta();
 80074ae:	f000 f81d 	bl	80074ec <detecta>


}
 80074b2:	46c0      	nop			@ (mov r8, r8)
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b004      	add	sp, #16
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			@ (mov r8, r8)
 80074bc:	20000c88 	.word	0x20000c88
 80074c0:	20000b68 	.word	0x20000b68
 80074c4:	20000448 	.word	0x20000448
 80074c8:	200010c6 	.word	0x200010c6
 80074cc:	20000e44 	.word	0x20000e44
 80074d0:	20000004 	.word	0x20000004
 80074d4:	20000c89 	.word	0x20000c89
 80074d8:	20000c8a 	.word	0x20000c8a
 80074dc:	20000c8c 	.word	0x20000c8c
 80074e0:	200003d6 	.word	0x200003d6
 80074e4:	200003d8 	.word	0x200003d8
 80074e8:	20000c94 	.word	0x20000c94

080074ec <detecta>:

void detecta(void){
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 80074f2:	4bb8      	ldr	r3, [pc, #736]	@ (80077d4 <detecta+0x2e8>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <detecta+0x12>
 80074fa:	f000 fc4b 	bl	8007d94 <detecta+0x8a8>
		goto dete03;
 80074fe:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 8007500:	4bb5      	ldr	r3, [pc, #724]	@ (80077d8 <detecta+0x2ec>)
 8007502:	225b      	movs	r2, #91	@ 0x5b
 8007504:	5c9b      	ldrb	r3, [r3, r2]
 8007506:	001a      	movs	r2, r3
 8007508:	2301      	movs	r3, #1
 800750a:	4013      	ands	r3, r2
 800750c:	d004      	beq.n	8007518 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 800750e:	f7ff fb71 	bl	8006bf4 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007512:	f7ff fb8d 	bl	8006c30 <load_tiempoAhorro2>
	goto closedoor_b;
 8007516:	e1e4      	b.n	80078e2 <detecta+0x3f6>
		goto detectaPuerta;
 8007518:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 800751a:	4baf      	ldr	r3, [pc, #700]	@ (80077d8 <detecta+0x2ec>)
 800751c:	2253      	movs	r2, #83	@ 0x53
 800751e:	5c9b      	ldrb	r3, [r3, r2]
 8007520:	001a      	movs	r2, r3
 8007522:	2308      	movs	r3, #8
 8007524:	4013      	ands	r3, r2
 8007526:	d04c      	beq.n	80075c2 <detecta+0xd6>
		goto detecta_j01;
 8007528:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 800752a:	230f      	movs	r3, #15
 800752c:	18fb      	adds	r3, r7, r3
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	e03f      	b.n	80075b4 <detecta+0xc8>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 8007534:	210f      	movs	r1, #15
 8007536:	187b      	adds	r3, r7, r1
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	4ba8      	ldr	r3, [pc, #672]	@ (80077dc <detecta+0x2f0>)
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	58d0      	ldr	r0, [r2, r3]
 8007540:	187b      	adds	r3, r7, r1
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4aa6      	ldr	r2, [pc, #664]	@ (80077e0 <detecta+0x2f4>)
 8007546:	5cd3      	ldrb	r3, [r2, r3]
 8007548:	2201      	movs	r2, #1
 800754a:	0019      	movs	r1, r3
 800754c:	f00c f993 	bl	8013876 <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007550:	230e      	movs	r3, #14
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e014      	b.n	8007584 <detecta+0x98>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800755a:	240e      	movs	r4, #14
 800755c:	193b      	adds	r3, r7, r4
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	4b9e      	ldr	r3, [pc, #632]	@ (80077dc <detecta+0x2f0>)
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	58d0      	ldr	r0, [r2, r3]
 8007566:	193b      	adds	r3, r7, r4
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	4a9d      	ldr	r2, [pc, #628]	@ (80077e0 <detecta+0x2f4>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	0019      	movs	r1, r3
 8007570:	f00c f964 	bl	801383c <HAL_GPIO_ReadPin>
 8007574:	1e03      	subs	r3, r0, #0
 8007576:	d100      	bne.n	800757a <detecta+0x8e>
 8007578:	e1df      	b.n	800793a <detecta+0x44e>
		for(uint8_t Px = 0; Px < 5; Px++){
 800757a:	193b      	adds	r3, r7, r4
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	193b      	adds	r3, r7, r4
 8007580:	3201      	adds	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	230e      	movs	r3, #14
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d9e5      	bls.n	800755a <detecta+0x6e>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 800758e:	240f      	movs	r4, #15
 8007590:	193b      	adds	r3, r7, r4
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	4b91      	ldr	r3, [pc, #580]	@ (80077dc <detecta+0x2f0>)
 8007596:	0092      	lsls	r2, r2, #2
 8007598:	58d0      	ldr	r0, [r2, r3]
 800759a:	193b      	adds	r3, r7, r4
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	4a90      	ldr	r2, [pc, #576]	@ (80077e0 <detecta+0x2f4>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
 80075a2:	2200      	movs	r2, #0
 80075a4:	0019      	movs	r1, r3
 80075a6:	f00c f966 	bl	8013876 <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80075aa:	193b      	adds	r3, r7, r4
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	193b      	adds	r3, r7, r4
 80075b0:	3201      	adds	r2, #1
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	230f      	movs	r3, #15
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d9ba      	bls.n	8007534 <detecta+0x48>
	}
	goto detecta_j02;
 80075be:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 80075c0:	e185      	b.n	80078ce <detecta+0x3e2>
	goto switch_no;
 80075c2:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 80075c4:	4b87      	ldr	r3, [pc, #540]	@ (80077e4 <detecta+0x2f8>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	425a      	negs	r2, r3
 80075ca:	4153      	adcs	r3, r2
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	001a      	movs	r2, r3
 80075d0:	4b85      	ldr	r3, [pc, #532]	@ (80077e8 <detecta+0x2fc>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4013      	ands	r3, r2
 80075d6:	d022      	beq.n	800761e <detecta+0x132>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80075d8:	4b84      	ldr	r3, [pc, #528]	@ (80077ec <detecta+0x300>)
 80075da:	6858      	ldr	r0, [r3, #4]
 80075dc:	4b84      	ldr	r3, [pc, #528]	@ (80077f0 <detecta+0x304>)
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2201      	movs	r2, #1
 80075e2:	0019      	movs	r1, r3
 80075e4:	f00c f947 	bl	8013876 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80075e8:	200a      	movs	r0, #10
 80075ea:	f009 fea9 	bl	8011340 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 80075ee:	4b7b      	ldr	r3, [pc, #492]	@ (80077dc <detecta+0x2f0>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b7b      	ldr	r3, [pc, #492]	@ (80077e0 <detecta+0x2f4>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	0019      	movs	r1, r3
 80075f8:	0010      	movs	r0, r2
 80075fa:	f00c f91f 	bl	801383c <HAL_GPIO_ReadPin>
 80075fe:	1e03      	subs	r3, r0, #0
 8007600:	d002      	beq.n	8007608 <detecta+0x11c>
			FlagPuertaX[4] = 1;// Puerta Abierta
 8007602:	4b7c      	ldr	r3, [pc, #496]	@ (80077f4 <detecta+0x308>)
 8007604:	2201      	movs	r2, #1
 8007606:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007608:	4b78      	ldr	r3, [pc, #480]	@ (80077ec <detecta+0x300>)
 800760a:	6858      	ldr	r0, [r3, #4]
 800760c:	4b78      	ldr	r3, [pc, #480]	@ (80077f0 <detecta+0x304>)
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2201      	movs	r2, #1
 8007612:	0019      	movs	r1, r3
 8007614:	f00c f92f 	bl	8013876 <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 8007618:	4b73      	ldr	r3, [pc, #460]	@ (80077e8 <detecta+0x2fc>)
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 800761e:	4b71      	ldr	r3, [pc, #452]	@ (80077e4 <detecta+0x2f8>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b0a      	cmp	r3, #10
 8007624:	d000      	beq.n	8007628 <detecta+0x13c>
 8007626:	e088      	b.n	800773a <detecta+0x24e>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007628:	230d      	movs	r3, #13
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e04b      	b.n	80076ca <detecta+0x1de>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007632:	240d      	movs	r4, #13
 8007634:	193b      	adds	r3, r7, r4
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	4b68      	ldr	r3, [pc, #416]	@ (80077dc <detecta+0x2f0>)
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	58d0      	ldr	r0, [r2, r3]
 800763e:	193b      	adds	r3, r7, r4
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4a67      	ldr	r2, [pc, #412]	@ (80077e0 <detecta+0x2f4>)
 8007644:	5cd3      	ldrb	r3, [r2, r3]
 8007646:	0019      	movs	r1, r3
 8007648:	f00c f8f8 	bl	801383c <HAL_GPIO_ReadPin>
 800764c:	1e03      	subs	r3, r0, #0
 800764e:	d00f      	beq.n	8007670 <detecta+0x184>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 8007650:	4b69      	ldr	r3, [pc, #420]	@ (80077f8 <detecta+0x30c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	001a      	movs	r2, r3
 8007656:	0013      	movs	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	189a      	adds	r2, r3, r2
 800765c:	193b      	adds	r3, r7, r4
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	18d3      	adds	r3, r2, r3
 8007662:	4a66      	ldr	r2, [pc, #408]	@ (80077fc <detecta+0x310>)
 8007664:	5cd2      	ldrb	r2, [r2, r3]
 8007666:	3201      	adds	r2, #1
 8007668:	b2d1      	uxtb	r1, r2
 800766a:	4a64      	ldr	r2, [pc, #400]	@ (80077fc <detecta+0x310>)
 800766c:	54d1      	strb	r1, [r2, r3]
 800766e:	e026      	b.n	80076be <detecta+0x1d2>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007670:	240d      	movs	r4, #13
 8007672:	193b      	adds	r3, r7, r4
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	4b59      	ldr	r3, [pc, #356]	@ (80077dc <detecta+0x2f0>)
 8007678:	0092      	lsls	r2, r2, #2
 800767a:	58d0      	ldr	r0, [r2, r3]
 800767c:	193b      	adds	r3, r7, r4
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	4a57      	ldr	r2, [pc, #348]	@ (80077e0 <detecta+0x2f4>)
 8007682:	5cd3      	ldrb	r3, [r2, r3]
 8007684:	0019      	movs	r1, r3
 8007686:	f00c f8d9 	bl	801383c <HAL_GPIO_ReadPin>
 800768a:	1e03      	subs	r3, r0, #0
 800768c:	d117      	bne.n	80076be <detecta+0x1d2>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 800768e:	4b5a      	ldr	r3, [pc, #360]	@ (80077f8 <detecta+0x30c>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	001a      	movs	r2, r3
 8007694:	0013      	movs	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	189a      	adds	r2, r3, r2
 800769a:	193b      	adds	r3, r7, r4
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	18d3      	adds	r3, r2, r3
 80076a0:	4a54      	ldr	r2, [pc, #336]	@ (80077f4 <detecta+0x308>)
 80076a2:	2100      	movs	r1, #0
 80076a4:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 80076a6:	4b54      	ldr	r3, [pc, #336]	@ (80077f8 <detecta+0x30c>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	001a      	movs	r2, r3
 80076ac:	0013      	movs	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	189a      	adds	r2, r3, r2
 80076b2:	193b      	adds	r3, r7, r4
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	18d3      	adds	r3, r2, r3
 80076b8:	4a50      	ldr	r2, [pc, #320]	@ (80077fc <detecta+0x310>)
 80076ba:	2100      	movs	r1, #0
 80076bc:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 80076be:	210d      	movs	r1, #13
 80076c0:	187b      	adds	r3, r7, r1
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	3201      	adds	r2, #1
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	230d      	movs	r3, #13
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d9ae      	bls.n	8007632 <detecta+0x146>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 80076d4:	4b48      	ldr	r3, [pc, #288]	@ (80077f8 <detecta+0x30c>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	001a      	movs	r2, r3
 80076da:	4b44      	ldr	r3, [pc, #272]	@ (80077ec <detecta+0x300>)
 80076dc:	0092      	lsls	r2, r2, #2
 80076de:	58d0      	ldr	r0, [r2, r3]
 80076e0:	4b45      	ldr	r3, [pc, #276]	@ (80077f8 <detecta+0x30c>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	001a      	movs	r2, r3
 80076e6:	4b42      	ldr	r3, [pc, #264]	@ (80077f0 <detecta+0x304>)
 80076e8:	5c9b      	ldrb	r3, [r3, r2]
 80076ea:	2200      	movs	r2, #0
 80076ec:	0019      	movs	r1, r3
 80076ee:	f00c f8c2 	bl	8013876 <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 80076f2:	4b41      	ldr	r3, [pc, #260]	@ (80077f8 <detecta+0x30c>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d805      	bhi.n	8007706 <detecta+0x21a>
			countMPx++;
 80076fa:	4b3f      	ldr	r3, [pc, #252]	@ (80077f8 <detecta+0x30c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	4b3d      	ldr	r3, [pc, #244]	@ (80077f8 <detecta+0x30c>)
 8007704:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 8007706:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <detecta+0x30c>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b04      	cmp	r3, #4
 800770c:	d102      	bne.n	8007714 <detecta+0x228>
			countMPx = 0;
 800770e:	4b3a      	ldr	r3, [pc, #232]	@ (80077f8 <detecta+0x30c>)
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 8007714:	4b38      	ldr	r3, [pc, #224]	@ (80077f8 <detecta+0x30c>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	001a      	movs	r2, r3
 800771a:	4b34      	ldr	r3, [pc, #208]	@ (80077ec <detecta+0x300>)
 800771c:	0092      	lsls	r2, r2, #2
 800771e:	58d0      	ldr	r0, [r2, r3]
 8007720:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <detecta+0x30c>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	001a      	movs	r2, r3
 8007726:	4b32      	ldr	r3, [pc, #200]	@ (80077f0 <detecta+0x304>)
 8007728:	5c9b      	ldrb	r3, [r3, r2]
 800772a:	2201      	movs	r2, #1
 800772c:	0019      	movs	r1, r3
 800772e:	f00c f8a2 	bl	8013876 <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 8007732:	4b2c      	ldr	r3, [pc, #176]	@ (80077e4 <detecta+0x2f8>)
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e009      	b.n	800774e <detecta+0x262>
	}else if(countWaitPuerta < 10){
 800773a:	4b2a      	ldr	r3, [pc, #168]	@ (80077e4 <detecta+0x2f8>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b09      	cmp	r3, #9
 8007740:	d805      	bhi.n	800774e <detecta+0x262>
		countWaitPuerta++;
 8007742:	4b28      	ldr	r3, [pc, #160]	@ (80077e4 <detecta+0x2f8>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4b26      	ldr	r3, [pc, #152]	@ (80077e4 <detecta+0x2f8>)
 800774c:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 800774e:	230c      	movs	r3, #12
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e0af      	b.n	80078b8 <detecta+0x3cc>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007758:	230b      	movs	r3, #11
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e09e      	b.n	80078a0 <detecta+0x3b4>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8007762:	250c      	movs	r5, #12
 8007764:	197b      	adds	r3, r7, r5
 8007766:	781a      	ldrb	r2, [r3, #0]
 8007768:	0013      	movs	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	189a      	adds	r2, r3, r2
 800776e:	240b      	movs	r4, #11
 8007770:	193b      	adds	r3, r7, r4
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	18d3      	adds	r3, r2, r3
 8007776:	4a21      	ldr	r2, [pc, #132]	@ (80077fc <detecta+0x310>)
 8007778:	5cd3      	ldrb	r3, [r2, r3]
 800777a:	1e5a      	subs	r2, r3, #1
 800777c:	4193      	sbcs	r3, r2
 800777e:	b2da      	uxtb	r2, r3
 8007780:	4b18      	ldr	r3, [pc, #96]	@ (80077e4 <detecta+0x2f8>)
 8007782:	7819      	ldrb	r1, [r3, #0]
 8007784:	2009      	movs	r0, #9
 8007786:	2300      	movs	r3, #0
 8007788:	4288      	cmp	r0, r1
 800778a:	415b      	adcs	r3, r3
 800778c:	b2db      	uxtb	r3, r3
 800778e:	4013      	ands	r3, r2
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <detecta+0x2ac>
 8007796:	e07d      	b.n	8007894 <detecta+0x3a8>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007798:	193b      	adds	r3, r7, r4
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <detecta+0x2f0>)
 800779e:	0092      	lsls	r2, r2, #2
 80077a0:	58d0      	ldr	r0, [r2, r3]
 80077a2:	193b      	adds	r3, r7, r4
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	4a0e      	ldr	r2, [pc, #56]	@ (80077e0 <detecta+0x2f4>)
 80077a8:	5cd3      	ldrb	r3, [r2, r3]
 80077aa:	0019      	movs	r1, r3
 80077ac:	f00c f846 	bl	801383c <HAL_GPIO_ReadPin>
 80077b0:	1e03      	subs	r3, r0, #0
 80077b2:	d025      	beq.n	8007800 <detecta+0x314>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 80077b4:	197b      	adds	r3, r7, r5
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	0013      	movs	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	189a      	adds	r2, r3, r2
 80077be:	193b      	adds	r3, r7, r4
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	18d3      	adds	r3, r2, r3
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <detecta+0x310>)
 80077c6:	5cd2      	ldrb	r2, [r2, r3]
 80077c8:	3201      	adds	r2, #1
 80077ca:	b2d1      	uxtb	r1, r2
 80077cc:	4a0b      	ldr	r2, [pc, #44]	@ (80077fc <detecta+0x310>)
 80077ce:	54d1      	strb	r1, [r2, r3]
 80077d0:	e03c      	b.n	800784c <detecta+0x360>
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	20000ba8 	.word	0x20000ba8
 80077d8:	200000b8 	.word	0x200000b8
 80077dc:	200001e8 	.word	0x200001e8
 80077e0:	200001fc 	.word	0x200001fc
 80077e4:	200010f0 	.word	0x200010f0
 80077e8:	20000218 	.word	0x20000218
 80077ec:	20000204 	.word	0x20000204
 80077f0:	20000214 	.word	0x20000214
 80077f4:	200010c8 	.word	0x200010c8
 80077f8:	200010f1 	.word	0x200010f1
 80077fc:	200010dc 	.word	0x200010dc
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007800:	240b      	movs	r4, #11
 8007802:	193b      	adds	r3, r7, r4
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	4bd2      	ldr	r3, [pc, #840]	@ (8007b50 <detecta+0x664>)
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	58d0      	ldr	r0, [r2, r3]
 800780c:	193b      	adds	r3, r7, r4
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	4ad0      	ldr	r2, [pc, #832]	@ (8007b54 <detecta+0x668>)
 8007812:	5cd3      	ldrb	r3, [r2, r3]
 8007814:	0019      	movs	r1, r3
 8007816:	f00c f811 	bl	801383c <HAL_GPIO_ReadPin>
 800781a:	1e03      	subs	r3, r0, #0
 800781c:	d116      	bne.n	800784c <detecta+0x360>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 800781e:	200c      	movs	r0, #12
 8007820:	183b      	adds	r3, r7, r0
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	0013      	movs	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	189a      	adds	r2, r3, r2
 800782a:	193b      	adds	r3, r7, r4
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	18d3      	adds	r3, r2, r3
 8007830:	4ac9      	ldr	r2, [pc, #804]	@ (8007b58 <detecta+0x66c>)
 8007832:	2100      	movs	r1, #0
 8007834:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007836:	183b      	adds	r3, r7, r0
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	0013      	movs	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	189a      	adds	r2, r3, r2
 8007840:	193b      	adds	r3, r7, r4
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	18d3      	adds	r3, r2, r3
 8007846:	4ac5      	ldr	r2, [pc, #788]	@ (8007b5c <detecta+0x670>)
 8007848:	2100      	movs	r1, #0
 800784a:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 800784c:	200c      	movs	r0, #12
 800784e:	183b      	adds	r3, r7, r0
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	0013      	movs	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	189a      	adds	r2, r3, r2
 8007858:	240b      	movs	r4, #11
 800785a:	193b      	adds	r3, r7, r4
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	4abe      	ldr	r2, [pc, #760]	@ (8007b5c <detecta+0x670>)
 8007862:	5cd3      	ldrb	r3, [r2, r3]
 8007864:	2b0a      	cmp	r3, #10
 8007866:	d115      	bne.n	8007894 <detecta+0x3a8>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007868:	183b      	adds	r3, r7, r0
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	0013      	movs	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	189a      	adds	r2, r3, r2
 8007872:	193b      	adds	r3, r7, r4
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	4ab7      	ldr	r2, [pc, #732]	@ (8007b58 <detecta+0x66c>)
 800787a:	2101      	movs	r1, #1
 800787c:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 800787e:	183b      	adds	r3, r7, r0
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	0013      	movs	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	189a      	adds	r2, r3, r2
 8007888:	193b      	adds	r3, r7, r4
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	18d3      	adds	r3, r2, r3
 800788e:	4ab3      	ldr	r2, [pc, #716]	@ (8007b5c <detecta+0x670>)
 8007890:	2100      	movs	r1, #0
 8007892:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007894:	210b      	movs	r1, #11
 8007896:	187b      	adds	r3, r7, r1
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	187b      	adds	r3, r7, r1
 800789c:	3201      	adds	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	230b      	movs	r3, #11
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d800      	bhi.n	80078ac <detecta+0x3c0>
 80078aa:	e75a      	b.n	8007762 <detecta+0x276>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 80078ac:	210c      	movs	r1, #12
 80078ae:	187b      	adds	r3, r7, r1
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	3201      	adds	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	230c      	movs	r3, #12
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d800      	bhi.n	80078c4 <detecta+0x3d8>
 80078c2:	e749      	b.n	8007758 <detecta+0x26c>
			}
		}
	}


	if(FlagPuertaX[4]){
 80078c4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b58 <detecta+0x66c>)
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d138      	bne.n	800793e <detecta+0x452>
		goto opendoor;
	}
	goto detecta_j03;
 80078cc:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 80078ce:	4ba4      	ldr	r3, [pc, #656]	@ (8007b60 <detecta+0x674>)
 80078d0:	0018      	movs	r0, r3
 80078d2:	f7ff fb50 	bl	8006f76 <decwreg>
	if(debdoor == 0){
 80078d6:	4ba2      	ldr	r3, [pc, #648]	@ (8007b60 <detecta+0x674>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d000      	beq.n	80078e0 <detecta+0x3f4>
 80078de:	e0a3      	b.n	8007a28 <detecta+0x53c>
		goto closedoor_b;
 80078e0:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 80078e2:	4ba0      	ldr	r3, [pc, #640]	@ (8007b64 <detecta+0x678>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 80078e8:	4b9f      	ldr	r3, [pc, #636]	@ (8007b68 <detecta+0x67c>)
 80078ea:	2248      	movs	r2, #72	@ 0x48
 80078ec:	5c9a      	ldrb	r2, [r3, r2]
 80078ee:	4b9f      	ldr	r3, [pc, #636]	@ (8007b6c <detecta+0x680>)
 80078f0:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 80078f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007b70 <detecta+0x684>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 80078f8:	f7fe fbd0 	bl	800609c <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 80078fc:	4b9d      	ldr	r3, [pc, #628]	@ (8007b74 <detecta+0x688>)
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d100      	bne.n	8007906 <detecta+0x41a>
 8007904:	e092      	b.n	8007a2c <detecta+0x540>
		goto detecta_j04;
 8007906:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007908:	4b9a      	ldr	r3, [pc, #616]	@ (8007b74 <detecta+0x688>)
 800790a:	2200      	movs	r2, #0
 800790c:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 800790e:	4b99      	ldr	r3, [pc, #612]	@ (8007b74 <detecta+0x688>)
 8007910:	78db      	ldrb	r3, [r3, #3]
 8007912:	2201      	movs	r2, #1
 8007914:	4053      	eors	r3, r2
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d100      	bne.n	800791e <detecta+0x432>
 800791c:	e088      	b.n	8007a30 <detecta+0x544>
		goto det_j04;
 800791e:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 8007920:	f7ff f9a4 	bl	8006c6c <load_timeNoct>
	durdhh=0;
 8007924:	4b94      	ldr	r3, [pc, #592]	@ (8007b78 <detecta+0x68c>)
 8007926:	2200      	movs	r2, #0
 8007928:	801a      	strh	r2, [r3, #0]
	//durdhl=0;
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 800792a:	4b92      	ldr	r3, [pc, #584]	@ (8007b74 <detecta+0x688>)
 800792c:	2201      	movs	r2, #1
 800792e:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007930:	4b92      	ldr	r3, [pc, #584]	@ (8007b7c <detecta+0x690>)
 8007932:	2201      	movs	r2, #1
 8007934:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007936:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8007938:	e05f      	b.n	80079fa <detecta+0x50e>
				goto opendoor;
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	e000      	b.n	8007940 <detecta+0x454>
		goto opendoor;
 800793e:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007940:	4b87      	ldr	r3, [pc, #540]	@ (8007b60 <detecta+0x674>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b25b      	sxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	db06      	blt.n	8007958 <detecta+0x46c>
	debdoor++;
 800794a:	4b85      	ldr	r3, [pc, #532]	@ (8007b60 <detecta+0x674>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	3301      	adds	r3, #1
 8007950:	b2da      	uxtb	r2, r3
 8007952:	4b83      	ldr	r3, [pc, #524]	@ (8007b60 <detecta+0x674>)
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e000      	b.n	800795a <detecta+0x46e>
		goto noinc;
 8007958:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 800795a:	4b81      	ldr	r3, [pc, #516]	@ (8007b60 <detecta+0x674>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b25b      	sxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	da2a      	bge.n	80079ba <detecta+0x4ce>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007964:	4b7f      	ldr	r3, [pc, #508]	@ (8007b64 <detecta+0x678>)
 8007966:	2201      	movs	r2, #1
 8007968:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 800796a:	4b85      	ldr	r3, [pc, #532]	@ (8007b80 <detecta+0x694>)
 800796c:	2205      	movs	r2, #5
 800796e:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007970:	4b7d      	ldr	r3, [pc, #500]	@ (8007b68 <detecta+0x67c>)
 8007972:	224f      	movs	r2, #79	@ 0x4f
 8007974:	5c9a      	ldrb	r2, [r3, r2]
 8007976:	4b83      	ldr	r3, [pc, #524]	@ (8007b84 <detecta+0x698>)
 8007978:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 800797a:	4b83      	ldr	r3, [pc, #524]	@ (8007b88 <detecta+0x69c>)
 800797c:	2205      	movs	r2, #5
 800797e:	701a      	strb	r2, [r3, #0]
	if(findLastValue((uint32_t) &eePlantilla[eetimepaf])!= 0){
 8007980:	4b82      	ldr	r3, [pc, #520]	@ (8007b8c <detecta+0x6a0>)
 8007982:	0018      	movs	r0, r3
 8007984:	f7fb f94a 	bl	8002c1c <findLastValue>
 8007988:	1e03      	subs	r3, r0, #0
 800798a:	d103      	bne.n	8007994 <detecta+0x4a8>
	cnt_pta_fan=99;
 800798c:	4b77      	ldr	r3, [pc, #476]	@ (8007b6c <detecta+0x680>)
 800798e:	2263      	movs	r2, #99	@ 0x63
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e000      	b.n	8007996 <detecta+0x4aa>
		goto no_ld_timepaf;
 8007994:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007996:	4b77      	ldr	r3, [pc, #476]	@ (8007b74 <detecta+0x688>)
 8007998:	78db      	ldrb	r3, [r3, #3]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00f      	beq.n	80079be <detecta+0x4d2>
		goto detecta_j05;
 800799e:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 80079a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007b90 <detecta+0x6a4>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 80079a6:	4b73      	ldr	r3, [pc, #460]	@ (8007b74 <detecta+0x688>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 80079ac:	4b73      	ldr	r3, [pc, #460]	@ (8007b7c <detecta+0x690>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 80079b2:	4b78      	ldr	r3, [pc, #480]	@ (8007b94 <detecta+0x6a8>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 80079b8:	e01f      	b.n	80079fa <detecta+0x50e>
		goto revnocman;
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	e000      	b.n	80079c0 <detecta+0x4d4>
	goto revnocman;
 80079be:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 80079c0:	4b75      	ldr	r3, [pc, #468]	@ (8007b98 <detecta+0x6ac>)
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d113      	bne.n	80079f0 <detecta+0x504>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 80079c8:	4b68      	ldr	r3, [pc, #416]	@ (8007b6c <detecta+0x680>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <detecta+0x4f6>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 80079d0:	4b65      	ldr	r3, [pc, #404]	@ (8007b68 <detecta+0x67c>)
 80079d2:	2249      	movs	r2, #73	@ 0x49
 80079d4:	5c9b      	ldrb	r3, [r3, r2]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <detecta+0x4fa>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 80079da:	4b65      	ldr	r3, [pc, #404]	@ (8007b70 <detecta+0x684>)
 80079dc:	2201      	movs	r2, #1
 80079de:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 80079e0:	e00b      	b.n	80079fa <detecta+0x50e>
		goto cancelAlarmPA;
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	e000      	b.n	80079e8 <detecta+0x4fc>
		goto cancelAlarmPA;
 80079e6:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 80079e8:	4b61      	ldr	r3, [pc, #388]	@ (8007b70 <detecta+0x684>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	711a      	strb	r2, [r3, #4]
 80079ee:	e004      	b.n	80079fa <detecta+0x50e>
		goto ahorro_off;
 80079f0:	46c0      	nop			@ (mov r8, r8)
 80079f2:	e002      	b.n	80079fa <detecta+0x50e>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 80079f4:	46c0      	nop			@ (mov r8, r8)
 80079f6:	e000      	b.n	80079fa <detecta+0x50e>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 80079f8:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 80079fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007b64 <detecta+0x678>)
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2201      	movs	r2, #1
 8007a00:	4053      	eors	r3, r2
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <detecta+0x524>
	cntdpysp=0xF0;
 8007a08:	4b64      	ldr	r3, [pc, #400]	@ (8007b9c <detecta+0x6b0>)
 8007a0a:	22f0      	movs	r2, #240	@ 0xf0
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e000      	b.n	8007a12 <detecta+0x526>
		goto ahorro_off_00;
 8007a10:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007a12:	4b54      	ldr	r3, [pc, #336]	@ (8007b64 <detecta+0x678>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007a18:	4b52      	ldr	r3, [pc, #328]	@ (8007b64 <detecta+0x678>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007a1e:	f7ff f8e9 	bl	8006bf4 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007a22:	f7ff f905 	bl	8006c30 <load_tiempoAhorro2>
	goto fin_detecta;
 8007a26:	e047      	b.n	8007ab8 <detecta+0x5cc>
		goto revbotones;
 8007a28:	46c0      	nop			@ (mov r8, r8)
 8007a2a:	e002      	b.n	8007a32 <detecta+0x546>
	goto revbotones;
 8007a2c:	46c0      	nop			@ (mov r8, r8)
 8007a2e:	e000      	b.n	8007a32 <detecta+0x546>
	goto revbotones;
 8007a30:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007a32:	4b4c      	ldr	r3, [pc, #304]	@ (8007b64 <detecta+0x678>)
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10c      	bne.n	8007a54 <detecta+0x568>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007a3a:	f7fe faf9 	bl	8006030 <tdev_to_Word>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	b21c      	sxth	r4, r3
 8007a42:	4b57      	ldr	r3, [pc, #348]	@ (8007ba0 <detecta+0x6b4>)
 8007a44:	0018      	movs	r0, r3
 8007a46:	f7fe fb0b 	bl	8006060 <TwoByteInArrayToWord>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	b21b      	sxth	r3, r3
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	dad0      	bge.n	80079f4 <detecta+0x508>
ask_ahorro:
 8007a52:	e000      	b.n	8007a56 <detecta+0x56a>
		goto ask_ahorro;
 8007a54:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007a56:	4b43      	ldr	r3, [pc, #268]	@ (8007b64 <detecta+0x678>)
 8007a58:	79db      	ldrb	r3, [r3, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0cc      	beq.n	80079f8 <detecta+0x50c>
		goto ask_time_ahorro;
 8007a5e:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007a60:	4b50      	ldr	r3, [pc, #320]	@ (8007ba4 <detecta+0x6b8>)
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <detecta+0x58e>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007a68:	f7ff f8e2 	bl	8006c30 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8007b64 <detecta+0x678>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007a72:	4b3c      	ldr	r3, [pc, #240]	@ (8007b64 <detecta+0x678>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007a78:	e01e      	b.n	8007ab8 <detecta+0x5cc>
		goto modoAhorro1_ON;
 8007a7a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007a7c:	4b39      	ldr	r3, [pc, #228]	@ (8007b64 <detecta+0x678>)
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <detecta+0x5a0>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007a84:	4b45      	ldr	r3, [pc, #276]	@ (8007b9c <detecta+0x6b0>)
 8007a86:	22f0      	movs	r2, #240	@ 0xf0
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e000      	b.n	8007a8e <detecta+0x5a2>
		goto modoAhorro1_ON_2;
 8007a8c:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007a8e:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <detecta+0x678>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007a94:	4b44      	ldr	r3, [pc, #272]	@ (8007ba8 <detecta+0x6bc>)
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10c      	bne.n	8007ab6 <detecta+0x5ca>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007a9c:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <detecta+0x678>)
 8007a9e:	789b      	ldrb	r3, [r3, #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <detecta+0x5c0>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8007b9c <detecta+0x6b0>)
 8007aa6:	22f0      	movs	r2, #240	@ 0xf0
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e000      	b.n	8007aae <detecta+0x5c2>
		goto modoAhorro1_ON_3;
 8007aac:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007aae:	4b2d      	ldr	r3, [pc, #180]	@ (8007b64 <detecta+0x678>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	709a      	strb	r2, [r3, #2]
 8007ab4:	e000      	b.n	8007ab8 <detecta+0x5cc>
		goto fin_detecta;
 8007ab6:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007ab8:	230a      	movs	r3, #10
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e014      	b.n	8007aec <detecta+0x600>
		btn_pr[k] = 0;
 8007ac2:	200a      	movs	r0, #10
 8007ac4:	183b      	adds	r3, r7, r0
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	4a38      	ldr	r2, [pc, #224]	@ (8007bac <detecta+0x6c0>)
 8007aca:	2100      	movs	r1, #0
 8007acc:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007ace:	183b      	adds	r3, r7, r0
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	4a37      	ldr	r2, [pc, #220]	@ (8007bb0 <detecta+0x6c4>)
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007ad8:	183b      	adds	r3, r7, r0
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	4a35      	ldr	r2, [pc, #212]	@ (8007bb4 <detecta+0x6c8>)
 8007ade:	2100      	movs	r1, #0
 8007ae0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	183b      	adds	r3, r7, r0
 8007ae8:	3201      	adds	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	230a      	movs	r3, #10
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b07      	cmp	r3, #7
 8007af4:	d9e5      	bls.n	8007ac2 <detecta+0x5d6>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007af6:	4b26      	ldr	r3, [pc, #152]	@ (8007b90 <detecta+0x6a4>)
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d117      	bne.n	8007b2e <detecta+0x642>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007afe:	4b2e      	ldr	r3, [pc, #184]	@ (8007bb8 <detecta+0x6cc>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	4053      	eors	r3, r2
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <detecta+0x646>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8007bb8 <detecta+0x6cc>)
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	2201      	movs	r2, #1
 8007b12:	4053      	eors	r3, r2
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10d      	bne.n	8007b36 <detecta+0x64a>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007b1a:	4b28      	ldr	r3, [pc, #160]	@ (8007bbc <detecta+0x6d0>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <detecta+0x63e>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007b22:	4b24      	ldr	r3, [pc, #144]	@ (8007bb4 <detecta+0x6c8>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007b28:	e13d      	b.n	8007da6 <detecta+0x8ba>
		goto findet_jp;
 8007b2a:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007b2c:	e13b      	b.n	8007da6 <detecta+0x8ba>
		goto no2btn;
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	e002      	b.n	8007b38 <detecta+0x64c>
		goto no2btn;
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	e000      	b.n	8007b38 <detecta+0x64c>
		goto no2btn;
 8007b36:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007b38:	4b20      	ldr	r3, [pc, #128]	@ (8007bbc <detecta+0x6d0>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b95      	cmp	r3, #149	@ 0x95
 8007b3e:	d83f      	bhi.n	8007bc0 <detecta+0x6d4>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007b40:	4b1e      	ldr	r3, [pc, #120]	@ (8007bbc <detecta+0x6d0>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	3303      	adds	r3, #3
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	4b1c      	ldr	r3, [pc, #112]	@ (8007bbc <detecta+0x6d0>)
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	e039      	b.n	8007bc2 <detecta+0x6d6>
 8007b4e:	46c0      	nop			@ (mov r8, r8)
 8007b50:	200001e8 	.word	0x200001e8
 8007b54:	200001fc 	.word	0x200001fc
 8007b58:	200010c8 	.word	0x200010c8
 8007b5c:	200010dc 	.word	0x200010dc
 8007b60:	20000bd1 	.word	0x20000bd1
 8007b64:	20000c4c 	.word	0x20000c4c
 8007b68:	200000b8 	.word	0x200000b8
 8007b6c:	20000c37 	.word	0x20000c37
 8007b70:	20000b98 	.word	0x20000b98
 8007b74:	20000b88 	.word	0x20000b88
 8007b78:	20000bc8 	.word	0x20000bc8
 8007b7c:	20000ba0 	.word	0x20000ba0
 8007b80:	20001076 	.word	0x20001076
 8007b84:	200010c0 	.word	0x200010c0
 8007b88:	20000b7a 	.word	0x20000b7a
 8007b8c:	0803f048 	.word	0x0803f048
 8007b90:	20000bf8 	.word	0x20000bf8
 8007b94:	20000c54 	.word	0x20000c54
 8007b98:	20000b76 	.word	0x20000b76
 8007b9c:	20000bd2 	.word	0x20000bd2
 8007ba0:	200000e1 	.word	0x200000e1
 8007ba4:	20000c40 	.word	0x20000c40
 8007ba8:	20000c42 	.word	0x20000c42
 8007bac:	20000c00 	.word	0x20000c00
 8007bb0:	20000bac 	.word	0x20000bac
 8007bb4:	20000c28 	.word	0x20000c28
 8007bb8:	20000c94 	.word	0x20000c94
 8007bbc:	20000c26 	.word	0x20000c26
		goto ask_btn2_f3;
 8007bc0:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8007e54 <detecta+0x968>)
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d114      	bne.n	8007bf4 <detecta+0x708>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007bca:	4ba3      	ldr	r3, [pc, #652]	@ (8007e58 <detecta+0x96c>)
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4053      	eors	r3, r2
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10f      	bne.n	8007bf8 <detecta+0x70c>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007bd8:	4ba0      	ldr	r3, [pc, #640]	@ (8007e5c <detecta+0x970>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d117      	bne.n	8007c10 <detecta+0x724>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8007be0:	4b9f      	ldr	r3, [pc, #636]	@ (8007e60 <detecta+0x974>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8007be6:	4b9f      	ldr	r3, [pc, #636]	@ (8007e64 <detecta+0x978>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8007bec:	4b9b      	ldr	r3, [pc, #620]	@ (8007e5c <detecta+0x970>)
 8007bee:	221e      	movs	r2, #30
 8007bf0:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8007bf2:	e79b      	b.n	8007b2c <detecta+0x640>
		goto noBtn2F3;
 8007bf4:	46c0      	nop			@ (mov r8, r8)
 8007bf6:	e000      	b.n	8007bfa <detecta+0x70e>
		goto noBtn2F3;
 8007bf8:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 8007bfa:	4b98      	ldr	r3, [pc, #608]	@ (8007e5c <detecta+0x970>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b1d      	cmp	r3, #29
 8007c00:	d808      	bhi.n	8007c14 <detecta+0x728>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8007c02:	4b96      	ldr	r3, [pc, #600]	@ (8007e5c <detecta+0x970>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4b94      	ldr	r3, [pc, #592]	@ (8007e5c <detecta+0x970>)
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <detecta+0x72a>
		goto ask_btn1;
 8007c10:	46c0      	nop			@ (mov r8, r8)
 8007c12:	e000      	b.n	8007c16 <detecta+0x72a>
		goto ask_btn1;
 8007c14:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8007c16:	4b90      	ldr	r3, [pc, #576]	@ (8007e58 <detecta+0x96c>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4053      	eors	r3, r2
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d12a      	bne.n	8007c7a <detecta+0x78e>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8007c24:	4b90      	ldr	r3, [pc, #576]	@ (8007e68 <detecta+0x97c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <detecta+0x74e>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8007c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8007e6c <detecta+0x980>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8007c32:	4b8f      	ldr	r3, [pc, #572]	@ (8007e70 <detecta+0x984>)
 8007c34:	2214      	movs	r2, #20
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e000      	b.n	8007c3c <detecta+0x750>
		goto ask_btn1_sec;
 8007c3a:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8007c3c:	4b85      	ldr	r3, [pc, #532]	@ (8007e54 <detecta+0x968>)
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2201      	movs	r2, #1
 8007c42:	4053      	eors	r3, r2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d107      	bne.n	8007c5a <detecta+0x76e>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 8007c4a:	4b8a      	ldr	r3, [pc, #552]	@ (8007e74 <detecta+0x988>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c50:	d822      	bhi.n	8007c98 <detecta+0x7ac>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8007c52:	4b86      	ldr	r3, [pc, #536]	@ (8007e6c <detecta+0x980>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	705a      	strb	r2, [r3, #1]
	goto findet;
 8007c58:	e0a5      	b.n	8007da6 <detecta+0x8ba>
		goto func_sec_norm_btn1;
 8007c5a:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8007c5c:	4b86      	ldr	r3, [pc, #536]	@ (8007e78 <detecta+0x98c>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11b      	bne.n	8007c9c <detecta+0x7b0>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8007c64:	4b83      	ldr	r3, [pc, #524]	@ (8007e74 <detecta+0x988>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d119      	bne.n	8007ca0 <detecta+0x7b4>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8007c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8007e6c <detecta+0x980>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8007c72:	4b81      	ldr	r3, [pc, #516]	@ (8007e78 <detecta+0x98c>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8007c78:	e095      	b.n	8007da6 <detecta+0x8ba>
		goto no_btn1;
 8007c7a:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8007c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8007e78 <detecta+0x98c>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8007c82:	4b7c      	ldr	r3, [pc, #496]	@ (8007e74 <detecta+0x988>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b95      	cmp	r3, #149	@ 0x95
 8007c88:	d80c      	bhi.n	8007ca4 <detecta+0x7b8>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 8007c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e74 <detecta+0x988>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	3303      	adds	r3, #3
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	4b78      	ldr	r3, [pc, #480]	@ (8007e74 <detecta+0x988>)
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	e006      	b.n	8007ca6 <detecta+0x7ba>
		goto ask_btn2;
 8007c98:	46c0      	nop			@ (mov r8, r8)
 8007c9a:	e004      	b.n	8007ca6 <detecta+0x7ba>
		goto ask_btn2;
 8007c9c:	46c0      	nop			@ (mov r8, r8)
 8007c9e:	e002      	b.n	8007ca6 <detecta+0x7ba>
		goto ask_btn2;
 8007ca0:	46c0      	nop			@ (mov r8, r8)
 8007ca2:	e000      	b.n	8007ca6 <detecta+0x7ba>
		goto ask_btn2;
 8007ca4:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 8007ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e58 <detecta+0x96c>)
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2201      	movs	r2, #1
 8007cac:	4053      	eors	r3, r2
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11a      	bne.n	8007cea <detecta+0x7fe>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8007cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8007e68 <detecta+0x97c>)
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d106      	bne.n	8007cca <detecta+0x7de>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8007cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8007e6c <detecta+0x980>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8007cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8007e70 <detecta+0x984>)
 8007cc4:	2214      	movs	r2, #20
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e000      	b.n	8007ccc <detecta+0x7e0>
		goto ask_btn2_sec;
 8007cca:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 8007ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8007e78 <detecta+0x98c>)
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d119      	bne.n	8007d08 <detecta+0x81c>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 8007cd4:	4b69      	ldr	r3, [pc, #420]	@ (8007e7c <detecta+0x990>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d117      	bne.n	8007d0c <detecta+0x820>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8007cdc:	4b63      	ldr	r3, [pc, #396]	@ (8007e6c <detecta+0x980>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8007ce2:	4b65      	ldr	r3, [pc, #404]	@ (8007e78 <detecta+0x98c>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	709a      	strb	r2, [r3, #2]
	goto findet;
 8007ce8:	e05d      	b.n	8007da6 <detecta+0x8ba>
		goto no_btn2;
 8007cea:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8007cec:	4b62      	ldr	r3, [pc, #392]	@ (8007e78 <detecta+0x98c>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8007cf2:	4b62      	ldr	r3, [pc, #392]	@ (8007e7c <detecta+0x990>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b95      	cmp	r3, #149	@ 0x95
 8007cf8:	d80a      	bhi.n	8007d10 <detecta+0x824>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 8007cfa:	4b60      	ldr	r3, [pc, #384]	@ (8007e7c <detecta+0x990>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	3303      	adds	r3, #3
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4b5e      	ldr	r3, [pc, #376]	@ (8007e7c <detecta+0x990>)
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e004      	b.n	8007d12 <detecta+0x826>
		goto ask_btn3;
 8007d08:	46c0      	nop			@ (mov r8, r8)
 8007d0a:	e002      	b.n	8007d12 <detecta+0x826>
		goto ask_btn3;
 8007d0c:	46c0      	nop			@ (mov r8, r8)
 8007d0e:	e000      	b.n	8007d12 <detecta+0x826>
		goto ask_btn3;
 8007d10:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8007d12:	4b51      	ldr	r3, [pc, #324]	@ (8007e58 <detecta+0x96c>)
 8007d14:	789b      	ldrb	r3, [r3, #2]
 8007d16:	2201      	movs	r2, #1
 8007d18:	4053      	eors	r3, r2
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d12a      	bne.n	8007d76 <detecta+0x88a>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8007d20:	4b51      	ldr	r3, [pc, #324]	@ (8007e68 <detecta+0x97c>)
 8007d22:	789b      	ldrb	r3, [r3, #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <detecta+0x84a>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8007d28:	4b50      	ldr	r3, [pc, #320]	@ (8007e6c <detecta+0x980>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8007d2e:	4b50      	ldr	r3, [pc, #320]	@ (8007e70 <detecta+0x984>)
 8007d30:	2214      	movs	r2, #20
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e000      	b.n	8007d38 <detecta+0x84c>
		goto ask_btn3_sec;
 8007d36:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8007d38:	4b46      	ldr	r3, [pc, #280]	@ (8007e54 <detecta+0x968>)
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	4053      	eors	r3, r2
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <detecta+0x86a>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8007d46:	4b4e      	ldr	r3, [pc, #312]	@ (8007e80 <detecta+0x994>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d4c:	d824      	bhi.n	8007d98 <detecta+0x8ac>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8007d4e:	4b47      	ldr	r3, [pc, #284]	@ (8007e6c <detecta+0x980>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	715a      	strb	r2, [r3, #5]
	goto findet;
 8007d54:	e027      	b.n	8007da6 <detecta+0x8ba>
		goto func_sec_norm_btn3;
 8007d56:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8007d58:	4b47      	ldr	r3, [pc, #284]	@ (8007e78 <detecta+0x98c>)
 8007d5a:	791b      	ldrb	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11d      	bne.n	8007d9c <detecta+0x8b0>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8007d60:	4b47      	ldr	r3, [pc, #284]	@ (8007e80 <detecta+0x994>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11b      	bne.n	8007da0 <detecta+0x8b4>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8007d68:	4b40      	ldr	r3, [pc, #256]	@ (8007e6c <detecta+0x980>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8007d6e:	4b42      	ldr	r3, [pc, #264]	@ (8007e78 <detecta+0x98c>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8007d74:	e017      	b.n	8007da6 <detecta+0x8ba>
		goto no_btn3;
 8007d76:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8007d78:	4b3f      	ldr	r3, [pc, #252]	@ (8007e78 <detecta+0x98c>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8007d7e:	4b40      	ldr	r3, [pc, #256]	@ (8007e80 <detecta+0x994>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b95      	cmp	r3, #149	@ 0x95
 8007d84:	d80e      	bhi.n	8007da4 <detecta+0x8b8>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 8007d86:	4b3e      	ldr	r3, [pc, #248]	@ (8007e80 <detecta+0x994>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	3303      	adds	r3, #3
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e80 <detecta+0x994>)
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	e008      	b.n	8007da6 <detecta+0x8ba>
	goto findet;
 8007d94:	46c0      	nop			@ (mov r8, r8)
 8007d96:	e006      	b.n	8007da6 <detecta+0x8ba>
		goto ask_btn4;
 8007d98:	46c0      	nop			@ (mov r8, r8)
 8007d9a:	e004      	b.n	8007da6 <detecta+0x8ba>
		goto ask_btn4;
 8007d9c:	46c0      	nop			@ (mov r8, r8)
 8007d9e:	e002      	b.n	8007da6 <detecta+0x8ba>
		goto ask_btn4;
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	e000      	b.n	8007da6 <detecta+0x8ba>
		goto ask_btn4;
 8007da4:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 8007da6:	2309      	movs	r3, #9
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e00d      	b.n	8007dcc <detecta+0x8e0>
		Botones_COPY[k] = Botones_T[k];
 8007db0:	2009      	movs	r0, #9
 8007db2:	183b      	adds	r3, r7, r0
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	183b      	adds	r3, r7, r0
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	4927      	ldr	r1, [pc, #156]	@ (8007e58 <detecta+0x96c>)
 8007dbc:	5c89      	ldrb	r1, [r1, r2]
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8007e68 <detecta+0x97c>)
 8007dc0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8007dc2:	183b      	adds	r3, r7, r0
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	183b      	adds	r3, r7, r0
 8007dc8:	3201      	adds	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	2309      	movs	r3, #9
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b07      	cmp	r3, #7
 8007dd4:	d9ec      	bls.n	8007db0 <detecta+0x8c4>
	if(!flagsb[f_prog]){
 8007dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e54 <detecta+0x968>)
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4053      	eors	r3, r2
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11d      	bne.n	8007e20 <detecta+0x934>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8007de4:	2308      	movs	r3, #8
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
 8007dec:	e012      	b.n	8007e14 <detecta+0x928>
		btn_pr[k] = botonst[k];
 8007dee:	2008      	movs	r0, #8
 8007df0:	183b      	adds	r3, r7, r0
 8007df2:	781a      	ldrb	r2, [r3, #0]
 8007df4:	183b      	adds	r3, r7, r0
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	491c      	ldr	r1, [pc, #112]	@ (8007e6c <detecta+0x980>)
 8007dfa:	5c89      	ldrb	r1, [r1, r2]
 8007dfc:	4a21      	ldr	r2, [pc, #132]	@ (8007e84 <detecta+0x998>)
 8007dfe:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007e00:	183b      	adds	r3, r7, r0
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4a19      	ldr	r2, [pc, #100]	@ (8007e6c <detecta+0x980>)
 8007e06:	2100      	movs	r1, #0
 8007e08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007e0a:	183b      	adds	r3, r7, r0
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	3201      	adds	r2, #1
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	2308      	movs	r3, #8
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b07      	cmp	r3, #7
 8007e1c:	d9e7      	bls.n	8007dee <detecta+0x902>
	}

det_j18:
 8007e1e:	e000      	b.n	8007e22 <detecta+0x936>
		goto det_j18;
 8007e20:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8007e22:	4b19      	ldr	r3, [pc, #100]	@ (8007e88 <detecta+0x99c>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2201      	movs	r2, #1
 8007e28:	4053      	eors	r3, r2
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <detecta+0x952>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8007e30:	4b0e      	ldr	r3, [pc, #56]	@ (8007e6c <detecta+0x980>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <detecta+0x980>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	711a      	strb	r2, [r3, #4]
 8007e3c:	e000      	b.n	8007e40 <detecta+0x954>
		goto det_j19;
 8007e3e:	46c0      	nop			@ (mov r8, r8)

det_j19:
	uint8_t kkkkk;
	kkkkk++;
 8007e40:	1dfb      	adds	r3, r7, #7
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	1dfb      	adds	r3, r7, #7
 8007e46:	3201      	adds	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b004      	add	sp, #16
 8007e50:	bdb0      	pop	{r4, r5, r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	20000bf8 	.word	0x20000bf8
 8007e58:	20000c94 	.word	0x20000c94
 8007e5c:	200010b4 	.word	0x200010b4
 8007e60:	20000c28 	.word	0x20000c28
 8007e64:	20000c4c 	.word	0x20000c4c
 8007e68:	20000c18 	.word	0x20000c18
 8007e6c:	20000bac 	.word	0x20000bac
 8007e70:	200010ad 	.word	0x200010ad
 8007e74:	20000c20 	.word	0x20000c20
 8007e78:	20000be0 	.word	0x20000be0
 8007e7c:	20000c21 	.word	0x20000c21
 8007e80:	20000c22 	.word	0x20000c22
 8007e84:	20000c00 	.word	0x20000c00
 8007e88:	200010b8 	.word	0x200010b8

08007e8c <display>:





void display (void){
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1); // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8007e92:	4bbe      	ldr	r3, [pc, #760]	@ (800818c <display+0x300>)
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7fa fec1 	bl	8002c1c <findLastValue>
 8007e9a:	0002      	movs	r2, r0
 8007e9c:	1dbb      	adds	r3, r7, #6
 8007e9e:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007ea0:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 8007ea2:	4bbb      	ldr	r3, [pc, #748]	@ (8008190 <display+0x304>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d100      	bne.n	8007eac <display+0x20>
 8007eaa:	e092      	b.n	8007fd2 <display+0x146>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 8007eac:	4bb9      	ldr	r3, [pc, #740]	@ (8008194 <display+0x308>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d114      	bne.n	8007ede <display+0x52>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 8007eb4:	4bb8      	ldr	r3, [pc, #736]	@ (8008198 <display+0x30c>)
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	4053      	eors	r3, r2
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10f      	bne.n	8007ee2 <display+0x56>
 8007ec2:	4bb6      	ldr	r3, [pc, #728]	@ (800819c <display+0x310>)
 8007ec4:	789b      	ldrb	r3, [r3, #2]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4053      	eors	r3, r2
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <display+0x56>
		goto display_00;


	op_menu (0x0B, 0x11);
 8007ed0:	2111      	movs	r1, #17
 8007ed2:	200b      	movs	r0, #11
 8007ed4:	f7ff f964 	bl	80071a0 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8007ed8:	f7ff f97c 	bl	80071d4 <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 8007edc:	e01e      	b.n	8007f1c <display+0x90>
		goto display_00;
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	e000      	b.n	8007ee4 <display+0x58>
		goto display_00;
 8007ee2:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8007ee4:	1dbb      	adds	r3, r7, #6
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	4013      	ands	r3, r2
 8007eec:	d106      	bne.n	8007efc <display+0x70>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 8007eee:	2110      	movs	r1, #16
 8007ef0:	2011      	movs	r0, #17
 8007ef2:	f7ff f955 	bl	80071a0 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 8007ef6:	f7ff f96d 	bl	80071d4 <datled_clear>
 8007efa:	e000      	b.n	8007efe <display+0x72>
		goto display_00b;
 8007efc:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 8007efe:	4ba8      	ldr	r3, [pc, #672]	@ (80081a0 <display+0x314>)
 8007f00:	78db      	ldrb	r3, [r3, #3]
 8007f02:	2201      	movs	r2, #1
 8007f04:	4053      	eors	r3, r2
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <display+0x8e>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 8007f0c:	211d      	movs	r1, #29
 8007f0e:	201f      	movs	r0, #31
 8007f10:	f7ff f946 	bl	80071a0 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 8007f14:	f7ff f95e 	bl	80071d4 <datled_clear>
 8007f18:	e000      	b.n	8007f1c <display+0x90>
		goto display_01;
 8007f1a:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 8007f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80081a4 <display+0x318>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d058      	beq.n	8007fd6 <display+0x14a>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 8007f24:	4b9f      	ldr	r3, [pc, #636]	@ (80081a4 <display+0x318>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f2a:	d900      	bls.n	8007f2e <display+0xa2>
 8007f2c:	e09e      	b.n	800806c <display+0x1e0>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 8007f2e:	4b9d      	ldr	r3, [pc, #628]	@ (80081a4 <display+0x318>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b31      	cmp	r3, #49	@ 0x31
 8007f34:	d800      	bhi.n	8007f38 <display+0xac>
 8007f36:	e09b      	b.n	8008070 <display+0x1e4>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 8007f38:	f7ff f94c 	bl	80071d4 <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	@ (80081a8 <display+0x31c>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d10f      	bne.n	8007f64 <display+0xd8>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 8007f44:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 8007f46:	2110      	movs	r1, #16
 8007f48:	2011      	movs	r0, #17
 8007f4a:	f7ff f929 	bl	80071a0 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8007f4e:	1dbb      	adds	r3, r7, #6
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2201      	movs	r2, #1
 8007f54:	4013      	ands	r3, r2
 8007f56:	d003      	beq.n	8007f60 <display+0xd4>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 8007f58:	4b94      	ldr	r3, [pc, #592]	@ (80081ac <display+0x320>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8007f5e:	e0a0      	b.n	80080a2 <display+0x216>
		goto msg1_01;
 8007f60:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8007f62:	e09e      	b.n	80080a2 <display+0x216>
		goto askMsg2; //jrne		askMsg2
 8007f64:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8007f66:	4b90      	ldr	r3, [pc, #576]	@ (80081a8 <display+0x31c>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d10f      	bne.n	8007f8e <display+0x102>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8007f6e:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8007f70:	2101      	movs	r1, #1
 8007f72:	2011      	movs	r0, #17
 8007f74:	f7ff f914 	bl	80071a0 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 8007f78:	1dbb      	adds	r3, r7, #6
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d003      	beq.n	8007f8a <display+0xfe>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8007f82:	4b8b      	ldr	r3, [pc, #556]	@ (80081b0 <display+0x324>)
 8007f84:	2202      	movs	r2, #2
 8007f86:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 8007f88:	e08b      	b.n	80080a2 <display+0x216>
		goto	msg2_01;
 8007f8a:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8007f8c:	e089      	b.n	80080a2 <display+0x216>
		goto askMsg3; //jrne		askMsg3
 8007f8e:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8007f90:	4b85      	ldr	r3, [pc, #532]	@ (80081a8 <display+0x31c>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d10f      	bne.n	8007fb8 <display+0x12c>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 8007f98:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	2011      	movs	r0, #17
 8007f9e:	f7ff f8ff 	bl	80071a0 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 8007fa2:	1dbb      	adds	r3, r7, #6
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2240      	movs	r2, #64	@ 0x40
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d103      	bne.n	8007fb4 <display+0x128>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8007fac:	4b7f      	ldr	r3, [pc, #508]	@ (80081ac <display+0x320>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 8007fb2:	e076      	b.n	80080a2 <display+0x216>
		goto msg3_01;
 8007fb4:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 8007fb6:	e074      	b.n	80080a2 <display+0x216>
		goto askMsg4;  //jrne askMsg4
 8007fb8:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8007fba:	4b7b      	ldr	r3, [pc, #492]	@ (80081a8 <display+0x31c>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d105      	bne.n	8007fce <display+0x142>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 8007fc2:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 8007fc4:	211d      	movs	r1, #29
 8007fc6:	201f      	movs	r0, #31
 8007fc8:	f7ff f8ea 	bl	80071a0 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8007fcc:	e069      	b.n	80080a2 <display+0x216>
		goto askMsg5;  //jrne		askMsg5
 8007fce:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 8007fd0:	e067      	b.n	80080a2 <display+0x216>
		goto display_02;
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	e000      	b.n	8007fd8 <display+0x14c>
		goto display_02;//jreq		display_02;
 8007fd6:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8007fd8:	f7fd fae6 	bl	80055a8 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8007fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8008190 <display+0x304>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d018      	beq.n	8008016 <display+0x18a>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 8007fe4:	4b73      	ldr	r3, [pc, #460]	@ (80081b4 <display+0x328>)
 8007fe6:	79db      	ldrb	r3, [r3, #7]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4053      	eors	r3, r2
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d113      	bne.n	800801a <display+0x18e>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 8007ff2:	210a      	movs	r1, #10
 8007ff4:	200a      	movs	r0, #10
 8007ff6:	f7ff f8d3 	bl	80071a0 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 8007ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80081b8 <display+0x32c>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	001a      	movs	r2, r3
 8008002:	2340      	movs	r3, #64	@ 0x40
 8008004:	4013      	ands	r3, r2
 8008006:	d104      	bne.n	8008012 <display+0x186>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 8008008:	211f      	movs	r1, #31
 800800a:	201f      	movs	r0, #31
 800800c:	f7ff f8c8 	bl	80071a0 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 8008010:	e047      	b.n	80080a2 <display+0x216>
    	goto blk_aa;
 8008012:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 8008014:	e045      	b.n	80080a2 <display+0x216>
    	goto display_norm3; //jreq		display_norm3;
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	e000      	b.n	800801c <display+0x190>
    	goto display_norm3;
 800801a:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 800801c:	4b60      	ldr	r3, [pc, #384]	@ (80081a0 <display+0x314>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	4053      	eors	r3, r2
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02c      	beq.n	8008084 <display+0x1f8>
    	  goto display_j00;
 800802a:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 800802c:	4b63      	ldr	r3, [pc, #396]	@ (80081bc <display+0x330>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d019      	beq.n	8008068 <display+0x1dc>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 8008034:	4b61      	ldr	r3, [pc, #388]	@ (80081bc <display+0x330>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2bc7      	cmp	r3, #199	@ 0xc7
 800803a:	d81b      	bhi.n	8008074 <display+0x1e8>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 800803c:	4b5f      	ldr	r3, [pc, #380]	@ (80081bc <display+0x330>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b95      	cmp	r3, #149	@ 0x95
 8008042:	d902      	bls.n	800804a <display+0x1be>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 8008044:	f7fe f888 	bl	8006158 <sp_dpy>
      	  goto dpy07;
 8008048:	e02b      	b.n	80080a2 <display+0x216>
    	  goto dpydif;//jrult dpydif
 800804a:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 800804c:	4b5b      	ldr	r3, [pc, #364]	@ (80081bc <display+0x330>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b63      	cmp	r3, #99	@ 0x63
 8008052:	d811      	bhi.n	8008078 <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 8008054:	4b59      	ldr	r3, [pc, #356]	@ (80081bc <display+0x330>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b31      	cmp	r3, #49	@ 0x31
 800805a:	d90f      	bls.n	800807c <display+0x1f0>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 800805c:	f7fe f888 	bl	8006170 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8008060:	4b52      	ldr	r3, [pc, #328]	@ (80081ac <display+0x320>)
 8008062:	2200      	movs	r2, #0
 8008064:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 8008066:	e01c      	b.n	80080a2 <display+0x216>
    	  goto dpy02;//jreq		dpy02;
 8008068:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 800806a:	e00c      	b.n	8008086 <display+0x1fa>
		goto dpy03; //************** ?
 800806c:	46c0      	nop			@ (mov r8, r8)
 800806e:	e006      	b.n	800807e <display+0x1f2>
		goto dpy03;
 8008070:	46c0      	nop			@ (mov r8, r8)
 8008072:	e004      	b.n	800807e <display+0x1f2>
    	  goto dpy03;//jruge		dpy03;
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	e002      	b.n	800807e <display+0x1f2>
    	 goto dpy03;//jruge		dpy03;
 8008078:	46c0      	nop			@ (mov r8, r8)
 800807a:	e000      	b.n	800807e <display+0x1f2>
    	 goto dpy03;//jrult		dpy03;
 800807c:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 800807e:	f7fe fbf7 	bl	8006870 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 8008082:	e00e      	b.n	80080a2 <display+0x216>
      goto dpy06;//jra dpy06;
 8008084:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 8008086:	4b4b      	ldr	r3, [pc, #300]	@ (80081b4 <display+0x328>)
 8008088:	78db      	ldrb	r3, [r3, #3]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <display+0x210>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 800808e:	4b4c      	ldr	r3, [pc, #304]	@ (80081c0 <display+0x334>)
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <display+0x214>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 8008096:	f7fe fa8b 	bl	80065b0 <fallas>
 800809a:	e002      	b.n	80080a2 <display+0x216>
	   goto dpy07;
 800809c:	46c0      	nop			@ (mov r8, r8)
 800809e:	e000      	b.n	80080a2 <display+0x216>
	   goto dpy07;
 80080a0:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 80080a2:	4b48      	ldr	r3, [pc, #288]	@ (80081c4 <display+0x338>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	001a      	movs	r2, r3
 80080a8:	4b47      	ldr	r3, [pc, #284]	@ (80081c8 <display+0x33c>)
 80080aa:	5c9a      	ldrb	r2, [r3, r2]
 80080ac:	4b47      	ldr	r3, [pc, #284]	@ (80081cc <display+0x340>)
 80080ae:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 80080b0:	4b3f      	ldr	r3, [pc, #252]	@ (80081b0 <display+0x324>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	001a      	movs	r2, r3
 80080b6:	4b44      	ldr	r3, [pc, #272]	@ (80081c8 <display+0x33c>)
 80080b8:	5c9a      	ldrb	r2, [r3, r2]
 80080ba:	4b45      	ldr	r3, [pc, #276]	@ (80081d0 <display+0x344>)
 80080bc:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 80080be:	230f      	movs	r3, #15
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e011      	b.n	80080ec <display+0x260>
			if(trefst[k] ){ //tnz  trefst ***************??
 80080c8:	210f      	movs	r1, #15
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	4a41      	ldr	r2, [pc, #260]	@ (80081d4 <display+0x348>)
 80080d0:	5cd3      	ldrb	r3, [r2, r3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d113      	bne.n	80080fe <display+0x272>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 80080d6:	187b      	adds	r3, r7, r1
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	4a3f      	ldr	r2, [pc, #252]	@ (80081d8 <display+0x34c>)
 80080dc:	5cd3      	ldrb	r3, [r2, r3]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <display+0x276>
		for(uint8_t k=0; k<8; k++){
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	3201      	adds	r2, #1
 80080ea:	701a      	strb	r2, [r3, #0]
 80080ec:	230f      	movs	r3, #15
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	d9e8      	bls.n	80080c8 <display+0x23c>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80080f6:	4b39      	ldr	r3, [pc, #228]	@ (80081dc <display+0x350>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 80080fc:	e00d      	b.n	800811a <display+0x28e>
				goto ask_snooze; //jrne	ask_snooze
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	e000      	b.n	8008104 <display+0x278>
				goto ask_snooze;  //jrne	ask_snooze
 8008102:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 8008104:	4b36      	ldr	r3, [pc, #216]	@ (80081e0 <display+0x354>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	4053      	eors	r3, r2
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <display+0x28c>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 8008112:	f7fe feb5 	bl	8006e80 <ld_alarmDelay>
 8008116:	e000      	b.n	800811a <display+0x28e>
			goto noLoadSnooze;
 8008118:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 800811a:	4b30      	ldr	r3, [pc, #192]	@ (80081dc <display+0x350>)
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <display+0x29e>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 8008122:	4b30      	ldr	r3, [pc, #192]	@ (80081e4 <display+0x358>)
 8008124:	2201      	movs	r2, #1
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e000      	b.n	800812c <display+0x2a0>
			goto no_snooze;//jreq no_snooze
 800812a:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 800812c:	4b2e      	ldr	r3, [pc, #184]	@ (80081e8 <display+0x35c>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <display+0x2c6>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 8008134:	4b2b      	ldr	r3, [pc, #172]	@ (80081e4 <display+0x358>)
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d108      	bne.n	800814e <display+0x2c2>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800813c:	4b2b      	ldr	r3, [pc, #172]	@ (80081ec <display+0x360>)
 800813e:	2104      	movs	r1, #4
 8008140:	0018      	movs	r0, r3
 8008142:	f010 f953 	bl	80183ec <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 8008146:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <display+0x358>)
 8008148:	2201      	movs	r2, #1
 800814a:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 800814c:	e186      	b.n	800845c <display+0x5d0>
			goto jp_termina_buzzer;
 800814e:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 8008150:	e184      	b.n	800845c <display+0x5d0>
			goto noBtnBuzz; //jreq noBtnBuzz
 8008152:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 8008154:	4b23      	ldr	r3, [pc, #140]	@ (80081e4 <display+0x358>)
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2201      	movs	r2, #1
 800815a:	4053      	eors	r3, r2
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d150      	bne.n	8008204 <display+0x378>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 8008162:	4b23      	ldr	r3, [pc, #140]	@ (80081f0 <display+0x364>)
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8008168:	4b22      	ldr	r3, [pc, #136]	@ (80081f4 <display+0x368>)
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800816e:	4b1f      	ldr	r3, [pc, #124]	@ (80081ec <display+0x360>)
 8008170:	2104      	movs	r1, #4
 8008172:	0018      	movs	r0, r3
 8008174:	f010 fa1c 	bl	80185b0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 8008178:	4b1f      	ldr	r3, [pc, #124]	@ (80081f8 <display+0x36c>)
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	4a1f      	ldr	r2, [pc, #124]	@ (80081fc <display+0x370>)
 800817e:	4694      	mov	ip, r2
 8008180:	4463      	add	r3, ip
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b1e      	ldr	r3, [pc, #120]	@ (8008200 <display+0x374>)
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	e03d      	b.n	8008206 <display+0x37a>
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	0803f803 	.word	0x0803f803
 8008190:	20000ba8 	.word	0x20000ba8
 8008194:	200010b8 	.word	0x200010b8
 8008198:	200010fc 	.word	0x200010fc
 800819c:	20000f54 	.word	0x20000f54
 80081a0:	20000b88 	.word	0x20000b88
 80081a4:	20001074 	.word	0x20001074
 80081a8:	20001075 	.word	0x20001075
 80081ac:	20000ba0 	.word	0x20000ba0
 80081b0:	20000b60 	.word	0x20000b60
 80081b4:	20000be8 	.word	0x20000be8
 80081b8:	20000b5c 	.word	0x20000b5c
 80081bc:	20000bd2 	.word	0x20000bd2
 80081c0:	20000bf8 	.word	0x20000bf8
 80081c4:	20000b61 	.word	0x20000b61
 80081c8:	2000000c 	.word	0x2000000c
 80081cc:	20000c89 	.word	0x20000c89
 80081d0:	20000c8a 	.word	0x20000c8a
 80081d4:	20000b98 	.word	0x20000b98
 80081d8:	20000b90 	.word	0x20000b90
 80081dc:	20000fb0 	.word	0x20000fb0
 80081e0:	20000bac 	.word	0x20000bac
 80081e4:	20000fa8 	.word	0x20000fa8
 80081e8:	200010ad 	.word	0x200010ad
 80081ec:	200005a0 	.word	0x200005a0
 80081f0:	20000fa0 	.word	0x20000fa0
 80081f4:	20000f98 	.word	0x20000f98
 80081f8:	20000f94 	.word	0x20000f94
 80081fc:	00001388 	.word	0x00001388
 8008200:	20000f96 	.word	0x20000f96
			goto noBtnBuzz_01;
 8008204:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 8008206:	4bd0      	ldr	r3, [pc, #832]	@ (8008548 <display+0x6bc>)
 8008208:	2200      	movs	r2, #0
 800820a:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 800820c:	4bce      	ldr	r3, [pc, #824]	@ (8008548 <display+0x6bc>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d111      	bne.n	8008238 <display+0x3ac>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 8008214:	4bcd      	ldr	r3, [pc, #820]	@ (800854c <display+0x6c0>)
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800821a:	4bcd      	ldr	r3, [pc, #820]	@ (8008550 <display+0x6c4>)
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008220:	4bcc      	ldr	r3, [pc, #816]	@ (8008554 <display+0x6c8>)
 8008222:	2104      	movs	r1, #4
 8008224:	0018      	movs	r0, r3
 8008226:	f010 f9c3 	bl	80185b0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 800822a:	4bcb      	ldr	r3, [pc, #812]	@ (8008558 <display+0x6cc>)
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	3364      	adds	r3, #100	@ 0x64
 8008230:	b29a      	uxth	r2, r3
 8008232:	4bca      	ldr	r3, [pc, #808]	@ (800855c <display+0x6d0>)
 8008234:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 8008236:	e111      	b.n	800845c <display+0x5d0>
			goto buzzer_0;
 8008238:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 800823a:	4bc5      	ldr	r3, [pc, #788]	@ (8008550 <display+0x6c4>)
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 8008240:	4bc7      	ldr	r3, [pc, #796]	@ (8008560 <display+0x6d4>)
 8008242:	79db      	ldrb	r3, [r3, #7]
 8008244:	2201      	movs	r2, #1
 8008246:	4053      	eors	r3, r2
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <display+0x3ca>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800824e:	4bc0      	ldr	r3, [pc, #768]	@ (8008550 <display+0x6c4>)
 8008250:	2202      	movs	r2, #2
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e000      	b.n	8008258 <display+0x3cc>
			goto buzzer_activado_04;
 8008256:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 8008258:	4bc1      	ldr	r3, [pc, #772]	@ (8008560 <display+0x6d4>)
 800825a:	799b      	ldrb	r3, [r3, #6]
 800825c:	2201      	movs	r2, #1
 800825e:	4053      	eors	r3, r2
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <display+0x3e2>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008266:	4bba      	ldr	r3, [pc, #744]	@ (8008550 <display+0x6c4>)
 8008268:	2202      	movs	r2, #2
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e000      	b.n	8008270 <display+0x3e4>
			goto buzzer_activado_05;
 800826e:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008270:	4bbc      	ldr	r3, [pc, #752]	@ (8008564 <display+0x6d8>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2201      	movs	r2, #1
 8008276:	4053      	eors	r3, r2
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <display+0x3fa>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800827e:	4bb4      	ldr	r3, [pc, #720]	@ (8008550 <display+0x6c4>)
 8008280:	2202      	movs	r2, #2
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e000      	b.n	8008288 <display+0x3fc>
			goto buzzer_activado_08;
 8008286:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 8008288:	4bb7      	ldr	r3, [pc, #732]	@ (8008568 <display+0x6dc>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	4053      	eors	r3, r2
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <display+0x412>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008296:	4bae      	ldr	r3, [pc, #696]	@ (8008550 <display+0x6c4>)
 8008298:	2202      	movs	r2, #2
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e000      	b.n	80082a0 <display+0x414>
			goto buzzer_activado_01;
 800829e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 80082a0:	4bb1      	ldr	r3, [pc, #708]	@ (8008568 <display+0x6dc>)
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2201      	movs	r2, #1
 80082a6:	4053      	eors	r3, r2
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <display+0x42a>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 80082ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008550 <display+0x6c4>)
 80082b0:	2203      	movs	r2, #3
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	e000      	b.n	80082b8 <display+0x42c>
			goto buzzer_activado_02;
 80082b6:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 80082b8:	4bab      	ldr	r3, [pc, #684]	@ (8008568 <display+0x6dc>)
 80082ba:	789b      	ldrb	r3, [r3, #2]
 80082bc:	2201      	movs	r2, #1
 80082be:	4053      	eors	r3, r2
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <display+0x442>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80082c6:	4ba2      	ldr	r3, [pc, #648]	@ (8008550 <display+0x6c4>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e000      	b.n	80082d0 <display+0x444>
			goto buzzer_activado_03;
 80082ce:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 80082d0:	4ba4      	ldr	r3, [pc, #656]	@ (8008564 <display+0x6d8>)
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4053      	eors	r3, r2
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <display+0x45a>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80082de:	4b9c      	ldr	r3, [pc, #624]	@ (8008550 <display+0x6c4>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e000      	b.n	80082e8 <display+0x45c>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 80082e6:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 80082e8:	230e      	movs	r3, #14
 80082ea:	18fb      	adds	r3, r7, r3
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80082f0:	230d      	movs	r3, #13
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	e015      	b.n	8008326 <display+0x49a>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80082fa:	200d      	movs	r0, #13
 80082fc:	183b      	adds	r3, r7, r0
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	4a97      	ldr	r2, [pc, #604]	@ (8008560 <display+0x6d4>)
 8008302:	5cd3      	ldrb	r3, [r2, r3]
 8008304:	001a      	movs	r2, r3
 8008306:	183b      	adds	r3, r7, r0
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	409a      	lsls	r2, r3
 800830c:	0013      	movs	r3, r2
 800830e:	b2d9      	uxtb	r1, r3
 8008310:	220e      	movs	r2, #14
 8008312:	18bb      	adds	r3, r7, r2
 8008314:	18ba      	adds	r2, r7, r2
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 800831c:	183b      	adds	r3, r7, r0
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	183b      	adds	r3, r7, r0
 8008322:	3201      	adds	r2, #1
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	230d      	movs	r3, #13
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b07      	cmp	r3, #7
 800832e:	d9e4      	bls.n	80082fa <display+0x46e>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8008330:	230e      	movs	r3, #14
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	223f      	movs	r2, #63	@ 0x3f
 8008338:	4013      	ands	r3, r2
 800833a:	d003      	beq.n	8008344 <display+0x4b8>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800833c:	4b84      	ldr	r3, [pc, #528]	@ (8008550 <display+0x6c4>)
 800833e:	2201      	movs	r2, #1
 8008340:	701a      	strb	r2, [r3, #0]
 8008342:	e000      	b.n	8008346 <display+0x4ba>
			goto buzzer_activado_06;
 8008344:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 8008346:	230e      	movs	r3, #14
 8008348:	18fb      	adds	r3, r7, r3
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800834e:	2300      	movs	r3, #0
 8008350:	60bb      	str	r3, [r7, #8]
 8008352:	e013      	b.n	800837c <display+0x4f0>
			trefst_aux_ |= trefst2[k]<<k;
 8008354:	4a85      	ldr	r2, [pc, #532]	@ (800856c <display+0x6e0>)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	18d3      	adds	r3, r2, r3
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	001a      	movs	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	409a      	lsls	r2, r3
 8008362:	0013      	movs	r3, r2
 8008364:	b25a      	sxtb	r2, r3
 8008366:	210e      	movs	r1, #14
 8008368:	187b      	adds	r3, r7, r1
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b25b      	sxtb	r3, r3
 800836e:	4313      	orrs	r3, r2
 8008370:	b25a      	sxtb	r2, r3
 8008372:	187b      	adds	r3, r7, r1
 8008374:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	3301      	adds	r3, #1
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b07      	cmp	r3, #7
 8008380:	dde8      	ble.n	8008354 <display+0x4c8>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 8008382:	230e      	movs	r3, #14
 8008384:	18fb      	adds	r3, r7, r3
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <display+0x508>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800838c:	4b70      	ldr	r3, [pc, #448]	@ (8008550 <display+0x6c4>)
 800838e:	2201      	movs	r2, #1
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	e000      	b.n	8008396 <display+0x50a>
			goto buzzer_activado_07;
 8008394:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 8008396:	4b6e      	ldr	r3, [pc, #440]	@ (8008550 <display+0x6c4>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b04      	cmp	r3, #4
 800839c:	d85b      	bhi.n	8008456 <display+0x5ca>
 800839e:	009a      	lsls	r2, r3, #2
 80083a0:	4b73      	ldr	r3, [pc, #460]	@ (8008570 <display+0x6e4>)
 80083a2:	18d3      	adds	r3, r2, r3
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 80083a8:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80083aa:	4b6b      	ldr	r3, [pc, #428]	@ (8008558 <display+0x6cc>)
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	3364      	adds	r3, #100	@ 0x64
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	4b6a      	ldr	r3, [pc, #424]	@ (800855c <display+0x6d0>)
 80083b4:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 80083b6:	e051      	b.n	800845c <display+0x5d0>
			case 1: goto buzzer_etapa_1;
 80083b8:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 80083ba:	4b6e      	ldr	r3, [pc, #440]	@ (8008574 <display+0x6e8>)
 80083bc:	22fa      	movs	r2, #250	@ 0xfa
 80083be:	0052      	lsls	r2, r2, #1
 80083c0:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 80083c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008578 <display+0x6ec>)
 80083c4:	22fa      	movs	r2, #250	@ 0xfa
 80083c6:	0052      	lsls	r2, r2, #1
 80083c8:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083ca:	e012      	b.n	80083f2 <display+0x566>
			case 2: goto buzzer_etapa_2;
 80083cc:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80083ce:	4b69      	ldr	r3, [pc, #420]	@ (8008574 <display+0x6e8>)
 80083d0:	22fa      	movs	r2, #250	@ 0xfa
 80083d2:	0052      	lsls	r2, r2, #1
 80083d4:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 80083d6:	4b68      	ldr	r3, [pc, #416]	@ (8008578 <display+0x6ec>)
 80083d8:	4a68      	ldr	r2, [pc, #416]	@ (800857c <display+0x6f0>)
 80083da:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083dc:	e009      	b.n	80083f2 <display+0x566>
			case 3: goto buzzer_etapa_3;
 80083de:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80083e0:	4b64      	ldr	r3, [pc, #400]	@ (8008574 <display+0x6e8>)
 80083e2:	22fa      	movs	r2, #250	@ 0xfa
 80083e4:	0052      	lsls	r2, r2, #1
 80083e6:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 80083e8:	4b63      	ldr	r3, [pc, #396]	@ (8008578 <display+0x6ec>)
 80083ea:	4a65      	ldr	r2, [pc, #404]	@ (8008580 <display+0x6f4>)
 80083ec:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083ee:	e000      	b.n	80083f2 <display+0x566>
			case 4: goto buzzer_etapa_4;
 80083f0:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 80083f2:	4b59      	ldr	r3, [pc, #356]	@ (8008558 <display+0x6cc>)
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	4b59      	ldr	r3, [pc, #356]	@ (800855c <display+0x6d0>)
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d12d      	bne.n	800845a <display+0x5ce>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 80083fe:	4b53      	ldr	r3, [pc, #332]	@ (800854c <display+0x6c0>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2201      	movs	r2, #1
 8008404:	4053      	eors	r3, r2
 8008406:	b2db      	uxtb	r3, r3
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	4193      	sbcs	r3, r2
 800840c:	b2da      	uxtb	r2, r3
 800840e:	4b4f      	ldr	r3, [pc, #316]	@ (800854c <display+0x6c0>)
 8008410:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8008412:	4b4e      	ldr	r3, [pc, #312]	@ (800854c <display+0x6c0>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10e      	bne.n	8008438 <display+0x5ac>
			goto buzzer_on;
		}
buzzer_off:
 800841a:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800841c:	4b4d      	ldr	r3, [pc, #308]	@ (8008554 <display+0x6c8>)
 800841e:	2104      	movs	r1, #4
 8008420:	0018      	movs	r0, r3
 8008422:	f010 f8c5 	bl	80185b0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 8008426:	4b4c      	ldr	r3, [pc, #304]	@ (8008558 <display+0x6cc>)
 8008428:	881a      	ldrh	r2, [r3, #0]
 800842a:	4b53      	ldr	r3, [pc, #332]	@ (8008578 <display+0x6ec>)
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	18d3      	adds	r3, r2, r3
 8008430:	b29a      	uxth	r2, r3
 8008432:	4b4a      	ldr	r3, [pc, #296]	@ (800855c <display+0x6d0>)
 8008434:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 8008436:	e011      	b.n	800845c <display+0x5d0>
			goto buzzer_on;
 8008438:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800843a:	4b46      	ldr	r3, [pc, #280]	@ (8008554 <display+0x6c8>)
 800843c:	2104      	movs	r1, #4
 800843e:	0018      	movs	r0, r3
 8008440:	f00f ffd4 	bl	80183ec <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 8008444:	4b44      	ldr	r3, [pc, #272]	@ (8008558 <display+0x6cc>)
 8008446:	881a      	ldrh	r2, [r3, #0]
 8008448:	4b4a      	ldr	r3, [pc, #296]	@ (8008574 <display+0x6e8>)
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	b29a      	uxth	r2, r3
 8008450:	4b42      	ldr	r3, [pc, #264]	@ (800855c <display+0x6d0>)
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e002      	b.n	800845c <display+0x5d0>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	e000      	b.n	800845c <display+0x5d0>
			goto termina_buzzer;//jrne    termina_buzzer
 800845a:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 800845c:	1dfb      	adds	r3, r7, #7
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	e009      	b.n	8008478 <display+0x5ec>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 8008464:	1dfb      	adds	r3, r7, #7
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	4a46      	ldr	r2, [pc, #280]	@ (8008584 <display+0x6f8>)
 800846a:	2101      	movs	r1, #1
 800846c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 800846e:	1dfb      	adds	r3, r7, #7
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	3201      	adds	r2, #1
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	1dfb      	adds	r3, r7, #7
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b07      	cmp	r3, #7
 800847e:	d9f1      	bls.n	8008464 <display+0x5d8>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008480:	4b41      	ldr	r3, [pc, #260]	@ (8008588 <display+0x6fc>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2201      	movs	r2, #1
 8008486:	4053      	eors	r3, r2
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <display+0x608>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 800848e:	4b3d      	ldr	r3, [pc, #244]	@ (8008584 <display+0x6f8>)
 8008490:	2200      	movs	r2, #0
 8008492:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 8008494:	4b3c      	ldr	r3, [pc, #240]	@ (8008588 <display+0x6fc>)
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2201      	movs	r2, #1
 800849a:	4053      	eors	r3, r2
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <display+0x61c>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 80084a2:	4b38      	ldr	r3, [pc, #224]	@ (8008584 <display+0x6f8>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 80084a8:	4b37      	ldr	r3, [pc, #220]	@ (8008588 <display+0x6fc>)
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2201      	movs	r2, #1
 80084ae:	4053      	eors	r3, r2
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <display+0x630>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 80084b6:	4b33      	ldr	r3, [pc, #204]	@ (8008584 <display+0x6f8>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 80084bc:	4b32      	ldr	r3, [pc, #200]	@ (8008588 <display+0x6fc>)
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	2201      	movs	r2, #1
 80084c2:	4053      	eors	r3, r2
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <display+0x644>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 80084ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008584 <display+0x6f8>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 80084d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008588 <display+0x6fc>)
 80084d2:	79db      	ldrb	r3, [r3, #7]
 80084d4:	2201      	movs	r2, #1
 80084d6:	4053      	eors	r3, r2
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <display+0x658>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 80084de:	4b29      	ldr	r3, [pc, #164]	@ (8008584 <display+0x6f8>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 80084e4:	4b28      	ldr	r3, [pc, #160]	@ (8008588 <display+0x6fc>)
 80084e6:	791b      	ldrb	r3, [r3, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	4053      	eors	r3, r2
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <display+0x66c>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 80084f2:	4b24      	ldr	r3, [pc, #144]	@ (8008584 <display+0x6f8>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80084f8:	4b24      	ldr	r3, [pc, #144]	@ (800858c <display+0x700>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d803      	bhi.n	8008508 <display+0x67c>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8008500:	4b20      	ldr	r3, [pc, #128]	@ (8008584 <display+0x6f8>)
 8008502:	2200      	movs	r2, #0
 8008504:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8008506:	e058      	b.n	80085ba <display+0x72e>
		goto	clt_ledInd;
 8008508:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 800850a:	4b1e      	ldr	r3, [pc, #120]	@ (8008584 <display+0x6f8>)
 800850c:	2201      	movs	r2, #1
 800850e:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8008510:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <display+0x6fc>)
 8008512:	78db      	ldrb	r3, [r3, #3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d141      	bne.n	800859c <display+0x710>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 8008518:	4b1d      	ldr	r3, [pc, #116]	@ (8008590 <display+0x704>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d047      	beq.n	80085b0 <display+0x724>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8008520:	4b1c      	ldr	r3, [pc, #112]	@ (8008594 <display+0x708>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2201      	movs	r2, #1
 8008526:	4053      	eors	r3, r2
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d142      	bne.n	80085b4 <display+0x728>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 800852e:	4b1a      	ldr	r3, [pc, #104]	@ (8008598 <display+0x70c>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	001a      	movs	r2, r3
 8008536:	2320      	movs	r3, #32
 8008538:	4013      	ands	r3, r2
 800853a:	d001      	beq.n	8008540 <display+0x6b4>
	    asm ("nop");
 800853c:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 800853e:	e03c      	b.n	80085ba <display+0x72e>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 8008540:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <display+0x6f8>)
 8008542:	2200      	movs	r2, #0
 8008544:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8008546:	e038      	b.n	80085ba <display+0x72e>
 8008548:	20000fa8 	.word	0x20000fa8
 800854c:	20000fa0 	.word	0x20000fa0
 8008550:	20000f98 	.word	0x20000f98
 8008554:	200005a0 	.word	0x200005a0
 8008558:	20000f94 	.word	0x20000f94
 800855c:	20000f96 	.word	0x20000f96
 8008560:	20000b98 	.word	0x20000b98
 8008564:	200010b8 	.word	0x200010b8
 8008568:	20000fb4 	.word	0x20000fb4
 800856c:	20000b90 	.word	0x20000b90
 8008570:	0801b450 	.word	0x0801b450
 8008574:	20000f9a 	.word	0x20000f9a
 8008578:	20000f9c 	.word	0x20000f9c
 800857c:	00007530 	.word	0x00007530
 8008580:	00003a98 	.word	0x00003a98
 8008584:	20000c8c 	.word	0x20000c8c
 8008588:	20000ba0 	.word	0x20000ba0
 800858c:	20000ba8 	.word	0x20000ba8
 8008590:	20000c37 	.word	0x20000c37
 8008594:	20000c4c 	.word	0x20000c4c
 8008598:	20000b5c 	.word	0x20000b5c
		goto	blink_dia;
 800859c:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 800859e:	4b0f      	ldr	r3, [pc, #60]	@ (80085dc <display+0x750>)
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b25b      	sxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	db07      	blt.n	80085b8 <display+0x72c>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 80085a8:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <display+0x754>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	709a      	strb	r2, [r3, #2]
 80085ae:	e004      	b.n	80085ba <display+0x72e>
		goto	no_blk;
 80085b0:	46c0      	nop			@ (mov r8, r8)
 80085b2:	e002      	b.n	80085ba <display+0x72e>
		goto	no_blk;
 80085b4:	46c0      	nop			@ (mov r8, r8)
 80085b6:	e000      	b.n	80085ba <display+0x72e>
		goto	display_j11;
 80085b8:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 80085ba:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80085bc:	1dbb      	adds	r3, r7, #6
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	4013      	ands	r3, r2
 80085c4:	d104      	bne.n	80085d0 <display+0x744>
		goto	refriON;
	}
refriOFF_2:
 80085c6:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 80085c8:	4b05      	ldr	r3, [pc, #20]	@ (80085e0 <display+0x754>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80085ce:	e000      	b.n	80085d2 <display+0x746>
		goto	refriON;
 80085d0:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80085d2:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 80085d4:	46c0      	nop			@ (mov r8, r8)
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b004      	add	sp, #16
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000b5c 	.word	0x20000b5c
 80085e0:	20000c8c 	.word	0x20000c8c

080085e4 <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 80085ea:	4bac      	ldr	r3, [pc, #688]	@ (800889c <inicio+0x2b8>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 80085f0:	4baa      	ldr	r3, [pc, #680]	@ (800889c <inicio+0x2b8>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 80085f6:	4baa      	ldr	r3, [pc, #680]	@ (80088a0 <inicio+0x2bc>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 80085fc:	4ba9      	ldr	r3, [pc, #676]	@ (80088a4 <inicio+0x2c0>)
 80085fe:	2281      	movs	r2, #129	@ 0x81
 8008600:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8008602:	4ba9      	ldr	r3, [pc, #676]	@ (80088a8 <inicio+0x2c4>)
 8008604:	2278      	movs	r2, #120	@ 0x78
 8008606:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8008608:	4ba8      	ldr	r3, [pc, #672]	@ (80088ac <inicio+0x2c8>)
 800860a:	2204      	movs	r2, #4
 800860c:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 800860e:	4ba8      	ldr	r3, [pc, #672]	@ (80088b0 <inicio+0x2cc>)
 8008610:	22c5      	movs	r2, #197	@ 0xc5
 8008612:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8008614:	4ba7      	ldr	r3, [pc, #668]	@ (80088b4 <inicio+0x2d0>)
 8008616:	22a4      	movs	r2, #164	@ 0xa4
 8008618:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 800861a:	4ba7      	ldr	r3, [pc, #668]	@ (80088b8 <inicio+0x2d4>)
 800861c:	220f      	movs	r2, #15
 800861e:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008620:	1cfb      	adds	r3, r7, #3
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	e009      	b.n	800863c <inicio+0x58>
		cruze_por_cero[k] = 0;
 8008628:	1cfb      	adds	r3, r7, #3
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	4aa3      	ldr	r2, [pc, #652]	@ (80088bc <inicio+0x2d8>)
 800862e:	2100      	movs	r1, #0
 8008630:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008632:	1cfb      	adds	r3, r7, #3
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	1cfb      	adds	r3, r7, #3
 8008638:	3201      	adds	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	1cfb      	adds	r3, r7, #3
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	2b04      	cmp	r3, #4
 8008642:	d9f1      	bls.n	8008628 <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008644:	4b9e      	ldr	r3, [pc, #632]	@ (80088c0 <inicio+0x2dc>)
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 800864a:	4b9e      	ldr	r3, [pc, #632]	@ (80088c4 <inicio+0x2e0>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = findLastValue((uint32_t) &eePlantilla[eeprotype]);
 8008650:	4b9d      	ldr	r3, [pc, #628]	@ (80088c8 <inicio+0x2e4>)
 8008652:	0018      	movs	r0, r3
 8008654:	f7fa fae2 	bl	8002c1c <findLastValue>
 8008658:	0003      	movs	r3, r0
 800865a:	b2d9      	uxtb	r1, r3
 800865c:	4b9b      	ldr	r3, [pc, #620]	@ (80088cc <inicio+0x2e8>)
 800865e:	2257      	movs	r2, #87	@ 0x57
 8008660:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008662:	4b9b      	ldr	r3, [pc, #620]	@ (80088d0 <inicio+0x2ec>)
 8008664:	226e      	movs	r2, #110	@ 0x6e
 8008666:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 8008668:	4b98      	ldr	r3, [pc, #608]	@ (80088cc <inicio+0x2e8>)
 800866a:	2257      	movs	r2, #87	@ 0x57
 800866c:	5c9b      	ldrb	r3, [r3, r2]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d103      	bne.n	800867a <inicio+0x96>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008672:	4b97      	ldr	r3, [pc, #604]	@ (80088d0 <inicio+0x2ec>)
 8008674:	22d2      	movs	r2, #210	@ 0xd2
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e000      	b.n	800867c <inicio+0x98>
		goto no_ini_210;
 800867a:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 800867c:	4b95      	ldr	r3, [pc, #596]	@ (80088d4 <inicio+0x2f0>)
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008682:	4b94      	ldr	r3, [pc, #592]	@ (80088d4 <inicio+0x2f0>)
 8008684:	2200      	movs	r2, #0
 8008686:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 8008688:	4b92      	ldr	r3, [pc, #584]	@ (80088d4 <inicio+0x2f0>)
 800868a:	2200      	movs	r2, #0
 800868c:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 800868e:	4b92      	ldr	r3, [pc, #584]	@ (80088d8 <inicio+0x2f4>)
 8008690:	2296      	movs	r2, #150	@ 0x96
 8008692:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008694:	4b91      	ldr	r3, [pc, #580]	@ (80088dc <inicio+0x2f8>)
 8008696:	2296      	movs	r2, #150	@ 0x96
 8008698:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 800869a:	4b91      	ldr	r3, [pc, #580]	@ (80088e0 <inicio+0x2fc>)
 800869c:	2296      	movs	r2, #150	@ 0x96
 800869e:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 80086a0:	4b90      	ldr	r3, [pc, #576]	@ (80088e4 <inicio+0x300>)
 80086a2:	2296      	movs	r2, #150	@ 0x96
 80086a4:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 80086a6:	4b89      	ldr	r3, [pc, #548]	@ (80088cc <inicio+0x2e8>)
 80086a8:	22aa      	movs	r2, #170	@ 0xaa
 80086aa:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 80086ac:	4b87      	ldr	r3, [pc, #540]	@ (80088cc <inicio+0x2e8>)
 80086ae:	2241      	movs	r2, #65	@ 0x41
 80086b0:	2166      	movs	r1, #102	@ 0x66
 80086b2:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 80086b4:	4b85      	ldr	r3, [pc, #532]	@ (80088cc <inicio+0x2e8>)
 80086b6:	227f      	movs	r2, #127	@ 0x7f
 80086b8:	21cc      	movs	r1, #204	@ 0xcc
 80086ba:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = findLastValue((uint32_t) &eePlantilla[eetimepaf]);
 80086bc:	4b8a      	ldr	r3, [pc, #552]	@ (80088e8 <inicio+0x304>)
 80086be:	0018      	movs	r0, r3
 80086c0:	f7fa faac 	bl	8002c1c <findLastValue>
 80086c4:	0003      	movs	r3, r0
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	4b88      	ldr	r3, [pc, #544]	@ (80088ec <inicio+0x308>)
 80086ca:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 80086cc:	f7fe fa92 	bl	8006bf4 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 80086d0:	f7fe faae 	bl	8006c30 <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 80086d4:	4b86      	ldr	r3, [pc, #536]	@ (80088f0 <inicio+0x30c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 80086da:	4b86      	ldr	r3, [pc, #536]	@ (80088f4 <inicio+0x310>)
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 80086e0:	4b85      	ldr	r3, [pc, #532]	@ (80088f8 <inicio+0x314>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 80086e6:	4b85      	ldr	r3, [pc, #532]	@ (80088fc <inicio+0x318>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 80086ec:	4b84      	ldr	r3, [pc, #528]	@ (8008900 <inicio+0x31c>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 80086f2:	4b84      	ldr	r3, [pc, #528]	@ (8008904 <inicio+0x320>)
 80086f4:	2214      	movs	r2, #20
 80086f6:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 80086f8:	4b83      	ldr	r3, [pc, #524]	@ (8008908 <inicio+0x324>)
 80086fa:	2296      	movs	r2, #150	@ 0x96
 80086fc:	0052      	lsls	r2, r2, #1
 80086fe:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 8008700:	4b82      	ldr	r3, [pc, #520]	@ (800890c <inicio+0x328>)
 8008702:	220a      	movs	r2, #10
 8008704:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 8008706:	4b82      	ldr	r3, [pc, #520]	@ (8008910 <inicio+0x32c>)
 8008708:	2296      	movs	r2, #150	@ 0x96
 800870a:	0052      	lsls	r2, r2, #1
 800870c:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 800870e:	4b81      	ldr	r3, [pc, #516]	@ (8008914 <inicio+0x330>)
 8008710:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	781a      	ldrb	r2, [r3, #0]
 8008716:	4b80      	ldr	r3, [pc, #512]	@ (8008918 <inicio+0x334>)
 8008718:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 800871a:	4b7f      	ldr	r3, [pc, #508]	@ (8008918 <inicio+0x334>)
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	4b7f      	ldr	r3, [pc, #508]	@ (800891c <inicio+0x338>)
 8008720:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008722:	4b7f      	ldr	r3, [pc, #508]	@ (8008920 <inicio+0x33c>)
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4b7e      	ldr	r3, [pc, #504]	@ (8008924 <inicio+0x340>)
 800872c:	429a      	cmp	r2, r3
 800872e:	d103      	bne.n	8008738 <inicio+0x154>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008730:	4b7b      	ldr	r3, [pc, #492]	@ (8008920 <inicio+0x33c>)
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 8008736:	e015      	b.n	8008764 <inicio+0x180>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 8008738:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 800873a:	4b79      	ldr	r3, [pc, #484]	@ (8008920 <inicio+0x33c>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	4b77      	ldr	r3, [pc, #476]	@ (8008920 <inicio+0x33c>)
 8008744:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3380      	adds	r3, #128	@ 0x80
 800874a:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781a      	ldrb	r2, [r3, #0]
 8008750:	4b71      	ldr	r3, [pc, #452]	@ (8008918 <inicio+0x334>)
 8008752:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 8008754:	4b70      	ldr	r3, [pc, #448]	@ (8008918 <inicio+0x334>)
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	4b70      	ldr	r3, [pc, #448]	@ (800891c <inicio+0x338>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d100      	bne.n	8008762 <inicio+0x17e>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008760:	e7e2      	b.n	8008728 <inicio+0x144>
	}
lastDataBlockFound:
 8008762:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8008764:	4b6e      	ldr	r3, [pc, #440]	@ (8008920 <inicio+0x33c>)
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	4b6f      	ldr	r3, [pc, #444]	@ (8008928 <inicio+0x344>)
 800876a:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 800876c:	4b6e      	ldr	r3, [pc, #440]	@ (8008928 <inicio+0x344>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	01db      	lsls	r3, r3, #7
 8008772:	001a      	movs	r2, r3
 8008774:	4b6d      	ldr	r3, [pc, #436]	@ (800892c <inicio+0x348>)
 8008776:	18d3      	adds	r3, r2, r3
 8008778:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	337e      	adds	r3, #126	@ 0x7e
 800877e:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	781a      	ldrb	r2, [r3, #0]
 8008784:	4b6a      	ldr	r3, [pc, #424]	@ (8008930 <inicio+0x34c>)
 8008786:	701a      	strb	r2, [r3, #0]

	dirBuffer = &data_buffer[0];
 8008788:	4b6a      	ldr	r3, [pc, #424]	@ (8008934 <inicio+0x350>)
 800878a:	4a6b      	ldr	r2, [pc, #428]	@ (8008938 <inicio+0x354>)
 800878c:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 800878e:	4b6b      	ldr	r3, [pc, #428]	@ (800893c <inicio+0x358>)
 8008790:	4a66      	ldr	r2, [pc, #408]	@ (800892c <inicio+0x348>)
 8008792:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8008794:	4b64      	ldr	r3, [pc, #400]	@ (8008928 <inicio+0x344>)
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	4b56      	ldr	r3, [pc, #344]	@ (80088f4 <inicio+0x310>)
 800879a:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800879c:	f7fe fa7a 	bl	8006c94 <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 80087a0:	4b67      	ldr	r3, [pc, #412]	@ (8008940 <inicio+0x35c>)
 80087a2:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	4b5b      	ldr	r3, [pc, #364]	@ (8008918 <inicio+0x334>)
 80087aa:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 80087ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008918 <inicio+0x334>)
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <inicio+0x338>)
 80087b2:	701a      	strb	r2, [r3, #0]
	waux = 0;
 80087b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008920 <inicio+0x33c>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4b61      	ldr	r3, [pc, #388]	@ (8008944 <inicio+0x360>)
 80087be:	429a      	cmp	r2, r3
 80087c0:	d103      	bne.n	80087ca <inicio+0x1e6>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 80087c2:	4b57      	ldr	r3, [pc, #348]	@ (8008920 <inicio+0x33c>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 80087c8:	e015      	b.n	80087f6 <inicio+0x212>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 80087ca:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 80087cc:	4b54      	ldr	r3, [pc, #336]	@ (8008920 <inicio+0x33c>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	4b52      	ldr	r3, [pc, #328]	@ (8008920 <inicio+0x33c>)
 80087d6:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3380      	adds	r3, #128	@ 0x80
 80087dc:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008918 <inicio+0x334>)
 80087e4:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 80087e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008918 <inicio+0x334>)
 80087e8:	781a      	ldrb	r2, [r3, #0]
 80087ea:	4b4c      	ldr	r3, [pc, #304]	@ (800891c <inicio+0x338>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d100      	bne.n	80087f4 <inicio+0x210>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 80087f2:	e7e2      	b.n	80087ba <inicio+0x1d6>
		}
lastEventBlockFound:
 80087f4:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 80087f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008920 <inicio+0x33c>)
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	4b53      	ldr	r3, [pc, #332]	@ (8008948 <inicio+0x364>)
 80087fc:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 80087fe:	4b52      	ldr	r3, [pc, #328]	@ (8008948 <inicio+0x364>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	01db      	lsls	r3, r3, #7
 8008804:	001a      	movs	r2, r3
 8008806:	4b51      	ldr	r3, [pc, #324]	@ (800894c <inicio+0x368>)
 8008808:	18d3      	adds	r3, r2, r3
 800880a:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	337e      	adds	r3, #126	@ 0x7e
 8008810:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	4b4e      	ldr	r3, [pc, #312]	@ (8008950 <inicio+0x36c>)
 8008818:	701a      	strb	r2, [r3, #0]

		dirBuffer = &event_buffer[0];
 800881a:	4b46      	ldr	r3, [pc, #280]	@ (8008934 <inicio+0x350>)
 800881c:	4a4d      	ldr	r2, [pc, #308]	@ (8008954 <inicio+0x370>)
 800881e:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8008820:	4b46      	ldr	r3, [pc, #280]	@ (800893c <inicio+0x358>)
 8008822:	4a4a      	ldr	r2, [pc, #296]	@ (800894c <inicio+0x368>)
 8008824:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 8008826:	4b48      	ldr	r3, [pc, #288]	@ (8008948 <inicio+0x364>)
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	4b32      	ldr	r3, [pc, #200]	@ (80088f4 <inicio+0x310>)
 800882c:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 800882e:	f7fe fa31 	bl	8006c94 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8008832:	4b49      	ldr	r3, [pc, #292]	@ (8008958 <inicio+0x374>)
 8008834:	2200      	movs	r2, #0
 8008836:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 8008838:	4b47      	ldr	r3, [pc, #284]	@ (8008958 <inicio+0x374>)
 800883a:	2200      	movs	r2, #0
 800883c:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1); // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 800883e:	4b47      	ldr	r3, [pc, #284]	@ (800895c <inicio+0x378>)
 8008840:	0018      	movs	r0, r3
 8008842:	f7fa f9eb 	bl	8002c1c <findLastValue>
 8008846:	0002      	movs	r2, r0
 8008848:	1cbb      	adds	r3, r7, #2
 800884a:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 800884c:	1cbb      	adds	r3, r7, #2
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2204      	movs	r2, #4
 8008852:	4013      	ands	r3, r2
 8008854:	d003      	beq.n	800885e <inicio+0x27a>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 8008856:	4b40      	ldr	r3, [pc, #256]	@ (8008958 <inicio+0x374>)
 8008858:	2201      	movs	r2, #1
 800885a:	719a      	strb	r2, [r3, #6]
 800885c:	e000      	b.n	8008860 <inicio+0x27c>
			goto initLampOFF;
 800885e:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 8008860:	4b1a      	ldr	r3, [pc, #104]	@ (80088cc <inicio+0x2e8>)
 8008862:	225b      	movs	r2, #91	@ 0x5b
 8008864:	5c9b      	ldrb	r3, [r3, r2]
 8008866:	001a      	movs	r2, r3
 8008868:	2308      	movs	r3, #8
 800886a:	4013      	ands	r3, r2
 800886c:	d10b      	bne.n	8008886 <inicio+0x2a2>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 800886e:	4b3c      	ldr	r3, [pc, #240]	@ (8008960 <inicio+0x37c>)
 8008870:	2200      	movs	r2, #0
 8008872:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 8008874:	1cbb      	adds	r3, r7, #2
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2240      	movs	r2, #64	@ 0x40
 800887a:	4013      	ands	r3, r2
 800887c:	d005      	beq.n	800888a <inicio+0x2a6>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 800887e:	4b38      	ldr	r3, [pc, #224]	@ (8008960 <inicio+0x37c>)
 8008880:	2201      	movs	r2, #1
 8008882:	705a      	strb	r2, [r3, #1]
 8008884:	e002      	b.n	800888c <inicio+0x2a8>
			goto deshTypeAct_02;
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	e000      	b.n	800888c <inicio+0x2a8>
			goto initLockDrOFF;
 800888a:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 800888c:	4b35      	ldr	r3, [pc, #212]	@ (8008964 <inicio+0x380>)
 800888e:	225a      	movs	r2, #90	@ 0x5a
 8008890:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	46bd      	mov	sp, r7
 8008896:	b002      	add	sp, #8
 8008898:	bd80      	pop	{r7, pc}
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	20000b88 	.word	0x20000b88
 80088a0:	20000b5b 	.word	0x20000b5b
 80088a4:	20000bda 	.word	0x20000bda
 80088a8:	20000bdb 	.word	0x20000bdb
 80088ac:	20000c67 	.word	0x20000c67
 80088b0:	20000c68 	.word	0x20000c68
 80088b4:	20000c66 	.word	0x20000c66
 80088b8:	20000c69 	.word	0x20000c69
 80088bc:	20000c6c 	.word	0x20000c6c
 80088c0:	20000c71 	.word	0x20000c71
 80088c4:	20000c72 	.word	0x20000c72
 80088c8:	0803f057 	.word	0x0803f057
 80088cc:	200000b8 	.word	0x200000b8
 80088d0:	20000bde 	.word	0x20000bde
 80088d4:	20000bf8 	.word	0x20000bf8
 80088d8:	20000c20 	.word	0x20000c20
 80088dc:	20000c21 	.word	0x20000c21
 80088e0:	20000c22 	.word	0x20000c22
 80088e4:	20000c23 	.word	0x20000c23
 80088e8:	0803f048 	.word	0x0803f048
 80088ec:	20000c37 	.word	0x20000c37
 80088f0:	20000da8 	.word	0x20000da8
 80088f4:	20000daa 	.word	0x20000daa
 80088f8:	20000dab 	.word	0x20000dab
 80088fc:	20000dac 	.word	0x20000dac
 8008900:	20000ed8 	.word	0x20000ed8
 8008904:	20000f4a 	.word	0x20000f4a
 8008908:	20000f5c 	.word	0x20000f5c
 800890c:	2000110a 	.word	0x2000110a
 8008910:	2000110c 	.word	0x2000110c
 8008914:	0803c07f 	.word	0x0803c07f
 8008918:	200008e0 	.word	0x200008e0
 800891c:	20000b65 	.word	0x20000b65
 8008920:	20000b64 	.word	0x20000b64
 8008924:	0803efff 	.word	0x0803efff
 8008928:	20000dbd 	.word	0x20000dbd
 800892c:	0803c000 	.word	0x0803c000
 8008930:	20000dbc 	.word	0x20000dbc
 8008934:	20000db4 	.word	0x20000db4
 8008938:	20000c9c 	.word	0x20000c9c
 800893c:	20000db0 	.word	0x20000db0
 8008940:	0803707f 	.word	0x0803707f
 8008944:	0803bfff 	.word	0x0803bfff
 8008948:	20000dbf 	.word	0x20000dbf
 800894c:	08037000 	.word	0x08037000
 8008950:	20000dbe 	.word	0x20000dbe
 8008954:	20000d1c 	.word	0x20000d1c
 8008958:	20000c4c 	.word	0x20000c4c
 800895c:	0803f803 	.word	0x0803f803
 8008960:	20000bb4 	.word	0x20000bb4
 8008964:	20001108 	.word	0x20001108

08008968 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 800896c:	4b1f      	ldr	r3, [pc, #124]	@ (80089ec <timeBCD_to_UNIX+0x84>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	0018      	movs	r0, r3
 8008972:	f000 f853 	bl	8008a1c <BCDtoByte>
 8008976:	0003      	movs	r3, r0
 8008978:	22fa      	movs	r2, #250	@ 0xfa
 800897a:	00d2      	lsls	r2, r2, #3
 800897c:	4694      	mov	ip, r2
 800897e:	4463      	add	r3, ip
 8008980:	b29a      	uxth	r2, r3
 8008982:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <timeBCD_to_UNIX+0x88>)
 8008984:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 8008986:	4b1b      	ldr	r3, [pc, #108]	@ (80089f4 <timeBCD_to_UNIX+0x8c>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	221f      	movs	r2, #31
 800898c:	4013      	ands	r3, r2
 800898e:	b2db      	uxtb	r3, r3
 8008990:	0018      	movs	r0, r3
 8008992:	f000 f843 	bl	8008a1c <BCDtoByte>
 8008996:	0003      	movs	r3, r0
 8008998:	001a      	movs	r2, r3
 800899a:	4b17      	ldr	r3, [pc, #92]	@ (80089f8 <timeBCD_to_UNIX+0x90>)
 800899c:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 800899e:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <timeBCD_to_UNIX+0x94>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 f83a 	bl	8008a1c <BCDtoByte>
 80089a8:	0003      	movs	r3, r0
 80089aa:	001a      	movs	r2, r3
 80089ac:	4b14      	ldr	r3, [pc, #80]	@ (8008a00 <timeBCD_to_UNIX+0x98>)
 80089ae:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 80089b0:	4b14      	ldr	r3, [pc, #80]	@ (8008a04 <timeBCD_to_UNIX+0x9c>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	0018      	movs	r0, r3
 80089b6:	f000 f831 	bl	8008a1c <BCDtoByte>
 80089ba:	0003      	movs	r3, r0
 80089bc:	001a      	movs	r2, r3
 80089be:	4b12      	ldr	r3, [pc, #72]	@ (8008a08 <timeBCD_to_UNIX+0xa0>)
 80089c0:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 80089c2:	4b12      	ldr	r3, [pc, #72]	@ (8008a0c <timeBCD_to_UNIX+0xa4>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	0018      	movs	r0, r3
 80089c8:	f000 f828 	bl	8008a1c <BCDtoByte>
 80089cc:	0003      	movs	r3, r0
 80089ce:	001a      	movs	r2, r3
 80089d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <timeBCD_to_UNIX+0xa8>)
 80089d2:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 80089d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a14 <timeBCD_to_UNIX+0xac>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	0018      	movs	r0, r3
 80089da:	f000 f81f 	bl	8008a1c <BCDtoByte>
 80089de:	0003      	movs	r3, r0
 80089e0:	001a      	movs	r2, r3
 80089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <timeBCD_to_UNIX+0xb0>)
 80089e4:	701a      	strb	r2, [r3, #0]
}
 80089e6:	46c0      	nop			@ (mov r8, r8)
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20001080 	.word	0x20001080
 80089f0:	200010a0 	.word	0x200010a0
 80089f4:	20001081 	.word	0x20001081
 80089f8:	200010a2 	.word	0x200010a2
 80089fc:	20001082 	.word	0x20001082
 8008a00:	200010a3 	.word	0x200010a3
 8008a04:	20001083 	.word	0x20001083
 8008a08:	200010a4 	.word	0x200010a4
 8008a0c:	20001084 	.word	0x20001084
 8008a10:	200010a5 	.word	0x200010a5
 8008a14:	20001085 	.word	0x20001085
 8008a18:	200010a6 	.word	0x200010a6

08008a1c <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	0002      	movs	r2, r0
 8008a24:	1dfb      	adds	r3, r7, #7
 8008a26:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008a28:	1dfb      	adds	r3, r7, #7
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	220f      	movs	r2, #15
 8008a2e:	4013      	ands	r3, r2
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	1dfb      	adds	r3, r7, #7
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	1c19      	adds	r1, r3, #0
 8008a3c:	0089      	lsls	r1, r1, #2
 8008a3e:	18cb      	adds	r3, r1, r3
 8008a40:	18db      	adds	r3, r3, r3
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	b2db      	uxtb	r3, r3

}
 8008a48:	0018      	movs	r0, r3
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <logger>:





void logger (void){
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008a54:	4bb9      	ldr	r3, [pc, #740]	@ (8008d3c <logger+0x2ec>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d800      	bhi.n	8008a5e <logger+0xe>
 8008a5c:	e30e      	b.n	800907c <logger+0x62c>
			goto logger_01;//jruge	logger_01;
 8008a5e:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008a60:	4bb7      	ldr	r3, [pc, #732]	@ (8008d40 <logger+0x2f0>)
 8008a62:	79db      	ldrb	r3, [r3, #7]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d118      	bne.n	8008a9a <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008a68:	4bb6      	ldr	r3, [pc, #728]	@ (8008d44 <logger+0x2f4>)
 8008a6a:	2257      	movs	r2, #87	@ 0x57
 8008a6c:	5c9b      	ldrb	r3, [r3, r2]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d005      	beq.n	8008a7e <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008a72:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008a74:	4bb4      	ldr	r3, [pc, #720]	@ (8008d48 <logger+0x2f8>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b45      	cmp	r3, #69	@ 0x45
 8008a7a:	d90a      	bls.n	8008a92 <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008a7c:	e005      	b.n	8008a8a <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008a7e:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008a80:	4bb1      	ldr	r3, [pc, #708]	@ (8008d48 <logger+0x2f8>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2ba9      	cmp	r3, #169	@ 0xa9
 8008a86:	d906      	bls.n	8008a96 <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008a88:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008a8a:	4bad      	ldr	r3, [pc, #692]	@ (8008d40 <logger+0x2f0>)
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008a90:	e2f5      	b.n	800907e <logger+0x62e>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008a92:	46c0      	nop			@ (mov r8, r8)
 8008a94:	e2f3      	b.n	800907e <logger+0x62e>
		goto voltArranFAIL;//jra voltArranFAIL
 8008a96:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008a98:	e2f1      	b.n	800907e <logger+0x62e>
			goto voltFlagOK;
 8008a9a:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008a9c:	4bab      	ldr	r3, [pc, #684]	@ (8008d4c <logger+0x2fc>)
 8008a9e:	789b      	ldrb	r3, [r3, #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008aa4:	4ba6      	ldr	r3, [pc, #664]	@ (8008d40 <logger+0x2f0>)
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4053      	eors	r3, r2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d102      	bne.n	8008ab8 <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008ab2:	e000      	b.n	8008ab6 <logger+0x66>
			goto event_logg_01;
 8008ab4:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008ab6:	e2e2      	b.n	800907e <logger+0x62e>
			goto door_event;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008aba:	4ba5      	ldr	r3, [pc, #660]	@ (8008d50 <logger+0x300>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d136      	bne.n	8008b30 <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008ac2:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008ac4:	4ba3      	ldr	r3, [pc, #652]	@ (8008d54 <logger+0x304>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d068      	beq.n	8008b9e <logger+0x14e>
			goto ask_DE_start_01;
 8008acc:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008ace:	4ba2      	ldr	r3, [pc, #648]	@ (8008d58 <logger+0x308>)
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8008d5c <logger+0x30c>)
 8008ada:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008adc:	4b9e      	ldr	r3, [pc, #632]	@ (8008d58 <logger+0x308>)
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b9e      	ldr	r3, [pc, #632]	@ (8008d5c <logger+0x30c>)
 8008ae4:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d60 <logger+0x310>)
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	4b9a      	ldr	r3, [pc, #616]	@ (8008d5c <logger+0x30c>)
 8008af2:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008af4:	4b9a      	ldr	r3, [pc, #616]	@ (8008d60 <logger+0x310>)
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	4b98      	ldr	r3, [pc, #608]	@ (8008d5c <logger+0x30c>)
 8008afc:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008afe:	4b97      	ldr	r3, [pc, #604]	@ (8008d5c <logger+0x30c>)
 8008b00:	2201      	movs	r2, #1
 8008b02:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008b04:	4b97      	ldr	r3, [pc, #604]	@ (8008d64 <logger+0x314>)
 8008b06:	781a      	ldrb	r2, [r3, #0]
 8008b08:	4b94      	ldr	r3, [pc, #592]	@ (8008d5c <logger+0x30c>)
 8008b0a:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008b0c:	4b96      	ldr	r3, [pc, #600]	@ (8008d68 <logger+0x318>)
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	4b92      	ldr	r3, [pc, #584]	@ (8008d5c <logger+0x30c>)
 8008b12:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008b14:	4b8c      	ldr	r3, [pc, #560]	@ (8008d48 <logger+0x2f8>)
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	4b90      	ldr	r3, [pc, #576]	@ (8008d5c <logger+0x30c>)
 8008b1a:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8008d50 <logger+0x300>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008b22:	4b88      	ldr	r3, [pc, #544]	@ (8008d44 <logger+0x2f4>)
 8008b24:	2250      	movs	r2, #80	@ 0x50
 8008b26:	5c9b      	ldrb	r3, [r3, r2]
 8008b28:	001a      	movs	r2, r3
 8008b2a:	4b90      	ldr	r3, [pc, #576]	@ (8008d6c <logger+0x31c>)
 8008b2c:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008b2e:	e039      	b.n	8008ba4 <logger+0x154>
			goto ask_DE_end;
 8008b30:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008b32:	4b88      	ldr	r3, [pc, #544]	@ (8008d54 <logger+0x304>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d133      	bne.n	8008ba2 <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8008d6c <logger+0x31c>)
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008b42:	4b83      	ldr	r3, [pc, #524]	@ (8008d50 <logger+0x300>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008b48:	e02c      	b.n	8008ba4 <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008b4a:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008b4c:	4b82      	ldr	r3, [pc, #520]	@ (8008d58 <logger+0x308>)
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	0a1b      	lsrs	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	4b81      	ldr	r3, [pc, #516]	@ (8008d5c <logger+0x30c>)
 8008b58:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d58 <logger+0x308>)
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b7e      	ldr	r3, [pc, #504]	@ (8008d5c <logger+0x30c>)
 8008b62:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008b64:	4b7e      	ldr	r3, [pc, #504]	@ (8008d60 <logger+0x310>)
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d5c <logger+0x30c>)
 8008b70:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008b72:	4b7b      	ldr	r3, [pc, #492]	@ (8008d60 <logger+0x310>)
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	4b78      	ldr	r3, [pc, #480]	@ (8008d5c <logger+0x30c>)
 8008b7a:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8008d70 <logger+0x320>)
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	4b76      	ldr	r3, [pc, #472]	@ (8008d5c <logger+0x30c>)
 8008b82:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008b84:	4b7b      	ldr	r3, [pc, #492]	@ (8008d74 <logger+0x324>)
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	4b74      	ldr	r3, [pc, #464]	@ (8008d5c <logger+0x30c>)
 8008b8a:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8008d78 <logger+0x328>)
 8008b8e:	4a7b      	ldr	r2, [pc, #492]	@ (8008d7c <logger+0x32c>)
 8008b90:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008b92:	f000 fac9 	bl	8009128 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008b96:	4b6e      	ldr	r3, [pc, #440]	@ (8008d50 <logger+0x300>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008b9c:	e002      	b.n	8008ba4 <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008b9e:	46c0      	nop			@ (mov r8, r8)
 8008ba0:	e000      	b.n	8008ba4 <logger+0x154>
			goto comp_event;
 8008ba2:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8008d50 <logger+0x300>)
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d130      	bne.n	8008c0e <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008bac:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008bae:	4b74      	ldr	r3, [pc, #464]	@ (8008d80 <logger+0x330>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d05a      	beq.n	8008c6c <logger+0x21c>
			goto ask_CE_start_01;
 8008bb6:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008bb8:	4b67      	ldr	r3, [pc, #412]	@ (8008d58 <logger+0x308>)
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	4b70      	ldr	r3, [pc, #448]	@ (8008d84 <logger+0x334>)
 8008bc4:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008bc6:	4b64      	ldr	r3, [pc, #400]	@ (8008d58 <logger+0x308>)
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8008d84 <logger+0x334>)
 8008bce:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008bd0:	4b63      	ldr	r3, [pc, #396]	@ (8008d60 <logger+0x310>)
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	4b6a      	ldr	r3, [pc, #424]	@ (8008d84 <logger+0x334>)
 8008bdc:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008bde:	4b60      	ldr	r3, [pc, #384]	@ (8008d60 <logger+0x310>)
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	4b67      	ldr	r3, [pc, #412]	@ (8008d84 <logger+0x334>)
 8008be6:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008be8:	4b66      	ldr	r3, [pc, #408]	@ (8008d84 <logger+0x334>)
 8008bea:	2202      	movs	r2, #2
 8008bec:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008bee:	4b5d      	ldr	r3, [pc, #372]	@ (8008d64 <logger+0x314>)
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	4b64      	ldr	r3, [pc, #400]	@ (8008d84 <logger+0x334>)
 8008bf4:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8008d68 <logger+0x318>)
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	4b62      	ldr	r3, [pc, #392]	@ (8008d84 <logger+0x334>)
 8008bfc:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008bfe:	4b52      	ldr	r3, [pc, #328]	@ (8008d48 <logger+0x2f8>)
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	4b60      	ldr	r3, [pc, #384]	@ (8008d84 <logger+0x334>)
 8008c04:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008c06:	4b52      	ldr	r3, [pc, #328]	@ (8008d50 <logger+0x300>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008c0c:	e031      	b.n	8008c72 <logger+0x222>
			goto ask_CE_end;
 8008c0e:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008c10:	4b5b      	ldr	r3, [pc, #364]	@ (8008d80 <logger+0x330>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d12b      	bne.n	8008c70 <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8008c18:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8008c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d58 <logger+0x308>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b57      	ldr	r3, [pc, #348]	@ (8008d84 <logger+0x334>)
 8008c26:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8008c28:	4b4b      	ldr	r3, [pc, #300]	@ (8008d58 <logger+0x308>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	4b55      	ldr	r3, [pc, #340]	@ (8008d84 <logger+0x334>)
 8008c30:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008c32:	4b4b      	ldr	r3, [pc, #300]	@ (8008d60 <logger+0x310>)
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	0a1b      	lsrs	r3, r3, #8
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	4b51      	ldr	r3, [pc, #324]	@ (8008d84 <logger+0x334>)
 8008c3e:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8008c40:	4b47      	ldr	r3, [pc, #284]	@ (8008d60 <logger+0x310>)
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	4b4f      	ldr	r3, [pc, #316]	@ (8008d84 <logger+0x334>)
 8008c48:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8008c4a:	4b49      	ldr	r3, [pc, #292]	@ (8008d70 <logger+0x320>)
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8008d84 <logger+0x334>)
 8008c50:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008c52:	4b48      	ldr	r3, [pc, #288]	@ (8008d74 <logger+0x324>)
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	4b4b      	ldr	r3, [pc, #300]	@ (8008d84 <logger+0x334>)
 8008c58:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8008c5a:	4b47      	ldr	r3, [pc, #284]	@ (8008d78 <logger+0x328>)
 8008c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8008d88 <logger+0x338>)
 8008c5e:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8008c60:	f000 fa62 	bl	8009128 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8008c64:	4b3a      	ldr	r3, [pc, #232]	@ (8008d50 <logger+0x300>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8008c6a:	e002      	b.n	8008c72 <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8008c6c:	46c0      	nop			@ (mov r8, r8)
 8008c6e:	e000      	b.n	8008c72 <logger+0x222>
			goto desh_event;
 8008c70:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8008c72:	4b37      	ldr	r3, [pc, #220]	@ (8008d50 <logger+0x300>)
 8008c74:	789b      	ldrb	r3, [r3, #2]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d12f      	bne.n	8008cda <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8008c7a:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8008c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008d3c <logger+0x2ec>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d159      	bne.n	8008d38 <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008c84:	4b34      	ldr	r3, [pc, #208]	@ (8008d58 <logger+0x308>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d8c <logger+0x33c>)
 8008c90:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8008c92:	4b31      	ldr	r3, [pc, #196]	@ (8008d58 <logger+0x308>)
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	4b3c      	ldr	r3, [pc, #240]	@ (8008d8c <logger+0x33c>)
 8008c9a:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008c9c:	4b30      	ldr	r3, [pc, #192]	@ (8008d60 <logger+0x310>)
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	0a1b      	lsrs	r3, r3, #8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4b39      	ldr	r3, [pc, #228]	@ (8008d8c <logger+0x33c>)
 8008ca8:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008caa:	4b2d      	ldr	r3, [pc, #180]	@ (8008d60 <logger+0x310>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b36      	ldr	r3, [pc, #216]	@ (8008d8c <logger+0x33c>)
 8008cb2:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8008cb4:	4b35      	ldr	r3, [pc, #212]	@ (8008d8c <logger+0x33c>)
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8008cba:	4b2a      	ldr	r3, [pc, #168]	@ (8008d64 <logger+0x314>)
 8008cbc:	781a      	ldrb	r2, [r3, #0]
 8008cbe:	4b33      	ldr	r3, [pc, #204]	@ (8008d8c <logger+0x33c>)
 8008cc0:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8008cc2:	4b29      	ldr	r3, [pc, #164]	@ (8008d68 <logger+0x318>)
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	4b31      	ldr	r3, [pc, #196]	@ (8008d8c <logger+0x33c>)
 8008cc8:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8008cca:	4b1f      	ldr	r3, [pc, #124]	@ (8008d48 <logger+0x2f8>)
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	4b2f      	ldr	r3, [pc, #188]	@ (8008d8c <logger+0x33c>)
 8008cd0:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d50 <logger+0x300>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8008cd8:	e05d      	b.n	8008d96 <logger+0x346>
			goto ask_DhE_end;
 8008cda:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 8008cdc:	4b17      	ldr	r3, [pc, #92]	@ (8008d3c <logger+0x2ec>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d057      	beq.n	8008d94 <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8008ce4:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8008d58 <logger+0x308>)
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b26      	ldr	r3, [pc, #152]	@ (8008d8c <logger+0x33c>)
 8008cf2:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8008cf4:	4b18      	ldr	r3, [pc, #96]	@ (8008d58 <logger+0x308>)
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	4b24      	ldr	r3, [pc, #144]	@ (8008d8c <logger+0x33c>)
 8008cfc:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008cfe:	4b18      	ldr	r3, [pc, #96]	@ (8008d60 <logger+0x310>)
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	4b20      	ldr	r3, [pc, #128]	@ (8008d8c <logger+0x33c>)
 8008d0a:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 8008d0c:	4b14      	ldr	r3, [pc, #80]	@ (8008d60 <logger+0x310>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	4b1e      	ldr	r3, [pc, #120]	@ (8008d8c <logger+0x33c>)
 8008d14:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 8008d16:	4b16      	ldr	r3, [pc, #88]	@ (8008d70 <logger+0x320>)
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008d8c <logger+0x33c>)
 8008d1c:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <logger+0x324>)
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	4b1a      	ldr	r3, [pc, #104]	@ (8008d8c <logger+0x33c>)
 8008d24:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 8008d26:	4b14      	ldr	r3, [pc, #80]	@ (8008d78 <logger+0x328>)
 8008d28:	4a19      	ldr	r2, [pc, #100]	@ (8008d90 <logger+0x340>)
 8008d2a:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8008d2c:	f000 f9fc 	bl	8009128 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <logger+0x300>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 8008d36:	e02e      	b.n	8008d96 <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8008d38:	46c0      	nop			@ (mov r8, r8)
 8008d3a:	e02c      	b.n	8008d96 <logger+0x346>
 8008d3c:	20000ba8 	.word	0x20000ba8
 8008d40:	20000e14 	.word	0x20000e14
 8008d44:	200000b8 	.word	0x200000b8
 8008d48:	20000bde 	.word	0x20000bde
 8008d4c:	20000f60 	.word	0x20000f60
 8008d50:	20000ed8 	.word	0x20000ed8
 8008d54:	20000c4c 	.word	0x20000c4c
 8008d58:	20000dc0 	.word	0x20000dc0
 8008d5c:	20000efc 	.word	0x20000efc
 8008d60:	20000dc2 	.word	0x20000dc2
 8008d64:	20000bc0 	.word	0x20000bc0
 8008d68:	20000bc1 	.word	0x20000bc1
 8008d6c:	20000ee8 	.word	0x20000ee8
 8008d70:	20000bc2 	.word	0x20000bc2
 8008d74:	20000bc3 	.word	0x20000bc3
 8008d78:	20000db8 	.word	0x20000db8
 8008d7c:	20000f00 	.word	0x20000f00
 8008d80:	20000bb4 	.word	0x20000bb4
 8008d84:	20000f10 	.word	0x20000f10
 8008d88:	20000f14 	.word	0x20000f14
 8008d8c:	20000f24 	.word	0x20000f24
 8008d90:	20000f28 	.word	0x20000f28
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8008d94:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8008d96:	4bbb      	ldr	r3, [pc, #748]	@ (8009084 <logger+0x634>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d15c      	bne.n	8008e58 <logger+0x408>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8008d9e:	4bba      	ldr	r3, [pc, #744]	@ (8009088 <logger+0x638>)
 8008da0:	78db      	ldrb	r3, [r3, #3]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d05a      	beq.n	8008e5c <logger+0x40c>
			goto power_event_end;
 8008da6:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = findLastValue((uint32_t) &eeTimeUnix1);		//ldw	X,eeTimeUnix1
 8008da8:	4bb8      	ldr	r3, [pc, #736]	@ (800908c <logger+0x63c>)
 8008daa:	0018      	movs	r0, r3
 8008dac:	f7f9 ff36 	bl	8002c1c <findLastValue>
 8008db0:	0003      	movs	r3, r0
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	4bb6      	ldr	r3, [pc, #728]	@ (8009090 <logger+0x640>)
 8008db6:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = findLastValue((uint32_t) &eeTimeUnix2);		//ldw	EPo_timeInit_HW,X
 8008db8:	4bb6      	ldr	r3, [pc, #728]	@ (8009094 <logger+0x644>)
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f7f9 ff2e 	bl	8002c1c <findLastValue>
 8008dc0:	0003      	movs	r3, r0
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	4bb2      	ldr	r3, [pc, #712]	@ (8009090 <logger+0x640>)
 8008dc6:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = findLastValue((uint32_t) &eeTimeUnix3);		//ldw	X,eeTimeUnix3
 8008dc8:	4bb3      	ldr	r3, [pc, #716]	@ (8009098 <logger+0x648>)
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7f9 ff26 	bl	8002c1c <findLastValue>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	4bae      	ldr	r3, [pc, #696]	@ (8009090 <logger+0x640>)
 8008dd6:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = findLastValue((uint32_t) &eeTimeUnix4);		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008dd8:	4bb0      	ldr	r3, [pc, #704]	@ (800909c <logger+0x64c>)
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7f9 ff1e 	bl	8002c1c <findLastValue>
 8008de0:	0003      	movs	r3, r0
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	4baa      	ldr	r3, [pc, #680]	@ (8009090 <logger+0x640>)
 8008de6:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8008de8:	4ba9      	ldr	r3, [pc, #676]	@ (8009090 <logger+0x640>)
 8008dea:	2204      	movs	r2, #4
 8008dec:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 8008dee:	4bac      	ldr	r3, [pc, #688]	@ (80090a0 <logger+0x650>)
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	4ba7      	ldr	r3, [pc, #668]	@ (8009090 <logger+0x640>)
 8008df4:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8008df6:	4bab      	ldr	r3, [pc, #684]	@ (80090a4 <logger+0x654>)
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	4ba5      	ldr	r3, [pc, #660]	@ (8009090 <logger+0x640>)
 8008dfc:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 8008dfe:	4baa      	ldr	r3, [pc, #680]	@ (80090a8 <logger+0x658>)
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	4ba3      	ldr	r3, [pc, #652]	@ (8009090 <logger+0x640>)
 8008e04:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008e06:	4ba9      	ldr	r3, [pc, #676]	@ (80090ac <logger+0x65c>)
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	4b9f      	ldr	r3, [pc, #636]	@ (8009090 <logger+0x640>)
 8008e12:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8008e14:	4ba5      	ldr	r3, [pc, #660]	@ (80090ac <logger+0x65c>)
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	4b9d      	ldr	r3, [pc, #628]	@ (8009090 <logger+0x640>)
 8008e1c:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e1e:	4ba4      	ldr	r3, [pc, #656]	@ (80090b0 <logger+0x660>)
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	4b99      	ldr	r3, [pc, #612]	@ (8009090 <logger+0x640>)
 8008e2a:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 8008e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80090b0 <logger+0x660>)
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	4b97      	ldr	r3, [pc, #604]	@ (8009090 <logger+0x640>)
 8008e34:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 8008e36:	4b9f      	ldr	r3, [pc, #636]	@ (80090b4 <logger+0x664>)
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	4b95      	ldr	r3, [pc, #596]	@ (8009090 <logger+0x640>)
 8008e3c:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008e3e:	4b9e      	ldr	r3, [pc, #632]	@ (80090b8 <logger+0x668>)
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	4b93      	ldr	r3, [pc, #588]	@ (8009090 <logger+0x640>)
 8008e44:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 8008e46:	4b9d      	ldr	r3, [pc, #628]	@ (80090bc <logger+0x66c>)
 8008e48:	4a9d      	ldr	r2, [pc, #628]	@ (80090c0 <logger+0x670>)
 8008e4a:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8008e4c:	f000 f96c 	bl	8009128 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8008e50:	4b8d      	ldr	r3, [pc, #564]	@ (8009088 <logger+0x638>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 8008e56:	e002      	b.n	8008e5e <logger+0x40e>
			goto wifi_event;
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	e000      	b.n	8008e5e <logger+0x40e>
		goto wifi_event;
 8008e5c:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8008e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8009088 <logger+0x638>)
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d133      	bne.n	8008ece <logger+0x47e>
			goto ask_wfE_end;
ask_wfE_start:
 8008e66:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8008e68:	4b96      	ldr	r3, [pc, #600]	@ (80090c4 <logger+0x674>)
 8008e6a:	789b      	ldrb	r3, [r3, #2]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	4053      	eors	r3, r2
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d05a      	beq.n	8008f2c <logger+0x4dc>
			goto wifi_event_start;
 8008e76:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8008e78:	4b8c      	ldr	r3, [pc, #560]	@ (80090ac <logger+0x65c>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	4b91      	ldr	r3, [pc, #580]	@ (80090c8 <logger+0x678>)
 8008e84:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 8008e86:	4b89      	ldr	r3, [pc, #548]	@ (80090ac <logger+0x65c>)
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80090c8 <logger+0x678>)
 8008e8e:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008e90:	4b87      	ldr	r3, [pc, #540]	@ (80090b0 <logger+0x660>)
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	0a1b      	lsrs	r3, r3, #8
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80090c8 <logger+0x678>)
 8008e9c:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 8008e9e:	4b84      	ldr	r3, [pc, #528]	@ (80090b0 <logger+0x660>)
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b88      	ldr	r3, [pc, #544]	@ (80090c8 <logger+0x678>)
 8008ea6:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8008ea8:	4b87      	ldr	r3, [pc, #540]	@ (80090c8 <logger+0x678>)
 8008eaa:	2205      	movs	r2, #5
 8008eac:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 8008eae:	4b7c      	ldr	r3, [pc, #496]	@ (80090a0 <logger+0x650>)
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	4b85      	ldr	r3, [pc, #532]	@ (80090c8 <logger+0x678>)
 8008eb4:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 8008eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80090a4 <logger+0x654>)
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	4b83      	ldr	r3, [pc, #524]	@ (80090c8 <logger+0x678>)
 8008ebc:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 8008ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80090a8 <logger+0x658>)
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	4b81      	ldr	r3, [pc, #516]	@ (80090c8 <logger+0x678>)
 8008ec4:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 8008ec6:	4b70      	ldr	r3, [pc, #448]	@ (8009088 <logger+0x638>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 8008ecc:	e031      	b.n	8008f32 <logger+0x4e2>
			goto ask_wfE_end;
 8008ece:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 8008ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80090c4 <logger+0x674>)
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02b      	beq.n	8008f30 <logger+0x4e0>
			goto wifi_event_end;
 8008ed8:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 8008eda:	4b74      	ldr	r3, [pc, #464]	@ (80090ac <logger+0x65c>)
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	4b78      	ldr	r3, [pc, #480]	@ (80090c8 <logger+0x678>)
 8008ee6:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 8008ee8:	4b70      	ldr	r3, [pc, #448]	@ (80090ac <logger+0x65c>)
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4b76      	ldr	r3, [pc, #472]	@ (80090c8 <logger+0x678>)
 8008ef0:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 8008ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80090b0 <logger+0x660>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	4b72      	ldr	r3, [pc, #456]	@ (80090c8 <logger+0x678>)
 8008efe:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 8008f00:	4b6b      	ldr	r3, [pc, #428]	@ (80090b0 <logger+0x660>)
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	4b70      	ldr	r3, [pc, #448]	@ (80090c8 <logger+0x678>)
 8008f08:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80090b4 <logger+0x664>)
 8008f0c:	781a      	ldrb	r2, [r3, #0]
 8008f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80090c8 <logger+0x678>)
 8008f10:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 8008f12:	4b69      	ldr	r3, [pc, #420]	@ (80090b8 <logger+0x668>)
 8008f14:	781a      	ldrb	r2, [r3, #0]
 8008f16:	4b6c      	ldr	r3, [pc, #432]	@ (80090c8 <logger+0x678>)
 8008f18:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[0];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 8008f1a:	4b68      	ldr	r3, [pc, #416]	@ (80090bc <logger+0x66c>)
 8008f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80090c8 <logger+0x678>)
 8008f1e:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 8008f20:	f000 f902 	bl	8009128 <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 8008f24:	4b58      	ldr	r3, [pc, #352]	@ (8009088 <logger+0x638>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 8008f2a:	e002      	b.n	8008f32 <logger+0x4e2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 8008f2c:	46c0      	nop			@ (mov r8, r8)
 8008f2e:	e000      	b.n	8008f32 <logger+0x4e2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 8008f30:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 8008f32:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 8008f34:	4b65      	ldr	r3, [pc, #404]	@ (80090cc <logger+0x67c>)
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d108      	bne.n	8008f4e <logger+0x4fe>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8008f3c:	4b64      	ldr	r3, [pc, #400]	@ (80090d0 <logger+0x680>)
 8008f3e:	795b      	ldrb	r3, [r3, #5]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <logger+0x502>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 8008f44:	4b63      	ldr	r3, [pc, #396]	@ (80090d4 <logger+0x684>)
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d004      	beq.n	8008f56 <logger+0x506>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8008f4c:	e002      	b.n	8008f54 <logger+0x504>
			goto jmp_fin_logger;
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	e095      	b.n	800907e <logger+0x62e>
			goto jmp_fin_logger;
 8008f52:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008f54:	e093      	b.n	800907e <logger+0x62e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 8008f56:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 8008f58:	4b5f      	ldr	r3, [pc, #380]	@ (80090d8 <logger+0x688>)
 8008f5a:	2251      	movs	r2, #81	@ 0x51
 8008f5c:	5c9b      	ldrb	r3, [r3, r2]
 8008f5e:	001a      	movs	r2, r3
 8008f60:	233c      	movs	r3, #60	@ 0x3c
 8008f62:	4353      	muls	r3, r2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	4b5b      	ldr	r3, [pc, #364]	@ (80090d4 <logger+0x684>)
 8008f68:	801a      	strh	r2, [r3, #0]

        //DEBUG***********DEBUG---------DEBUG
        cntLogger_H = 120;  // valor de prueba a cada 10 segundos tomar muestras
 8008f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80090d4 <logger+0x684>)
 8008f6c:	2278      	movs	r2, #120	@ 0x78
 8008f6e:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8008f70:	4b4e      	ldr	r3, [pc, #312]	@ (80090ac <logger+0x65c>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	4b58      	ldr	r3, [pc, #352]	@ (80090dc <logger+0x68c>)
 8008f7c:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 8008f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80090ac <logger+0x65c>)
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	4b55      	ldr	r3, [pc, #340]	@ (80090dc <logger+0x68c>)
 8008f86:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 8008f88:	4b49      	ldr	r3, [pc, #292]	@ (80090b0 <logger+0x660>)
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b52      	ldr	r3, [pc, #328]	@ (80090dc <logger+0x68c>)
 8008f94:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8008f96:	4b46      	ldr	r3, [pc, #280]	@ (80090b0 <logger+0x660>)
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80090dc <logger+0x68c>)
 8008f9e:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8008fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80090a0 <logger+0x650>)
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80090dc <logger+0x68c>)
 8008fa6:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8008fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80090a4 <logger+0x654>)
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	4b4b      	ldr	r3, [pc, #300]	@ (80090dc <logger+0x68c>)
 8008fae:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8008fb0:	4b40      	ldr	r3, [pc, #256]	@ (80090b4 <logger+0x664>)
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	4b49      	ldr	r3, [pc, #292]	@ (80090dc <logger+0x68c>)
 8008fb6:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8008fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80090b8 <logger+0x668>)
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	4b47      	ldr	r3, [pc, #284]	@ (80090dc <logger+0x68c>)
 8008fbe:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8008fc0:	4b39      	ldr	r3, [pc, #228]	@ (80090a8 <logger+0x658>)
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	4b45      	ldr	r3, [pc, #276]	@ (80090dc <logger+0x68c>)
 8008fc6:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8008fc8:	4b45      	ldr	r3, [pc, #276]	@ (80090e0 <logger+0x690>)
 8008fca:	4a46      	ldr	r2, [pc, #280]	@ (80090e4 <logger+0x694>)
 8008fcc:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8008fce:	4b3b      	ldr	r3, [pc, #236]	@ (80090bc <logger+0x66c>)
 8008fd0:	4a42      	ldr	r2, [pc, #264]	@ (80090dc <logger+0x68c>)
 8008fd2:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 8008fd4:	4b44      	ldr	r3, [pc, #272]	@ (80090e8 <logger+0x698>)
 8008fd6:	4a45      	ldr	r2, [pc, #276]	@ (80090ec <logger+0x69c>)
 8008fd8:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 8008fda:	4b45      	ldr	r3, [pc, #276]	@ (80090f0 <logger+0x6a0>)
 8008fdc:	2260      	movs	r2, #96	@ 0x60
 8008fde:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 8008fe0:	4b44      	ldr	r3, [pc, #272]	@ (80090f4 <logger+0x6a4>)
 8008fe2:	2209      	movs	r2, #9
 8008fe4:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8008fe6:	4b44      	ldr	r3, [pc, #272]	@ (80090f8 <logger+0x6a8>)
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	4b44      	ldr	r3, [pc, #272]	@ (80090fc <logger+0x6ac>)
 8008fec:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 8008fee:	4b44      	ldr	r3, [pc, #272]	@ (8009100 <logger+0x6b0>)
 8008ff0:	781a      	ldrb	r2, [r3, #0]
 8008ff2:	4b44      	ldr	r3, [pc, #272]	@ (8009104 <logger+0x6b4>)
 8008ff4:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8008ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80090f4 <logger+0x6a4>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	2080      	movs	r0, #128	@ 0x80
 8008ffe:	f7f7 f915 	bl	800022c <__divsi3>
 8009002:	0003      	movs	r3, r0
 8009004:	b2da      	uxtb	r2, r3
 8009006:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <logger+0x6b8>)
 8009008:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 800900a:	4b3f      	ldr	r3, [pc, #252]	@ (8009108 <logger+0x6b8>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4a39      	ldr	r2, [pc, #228]	@ (80090f4 <logger+0x6a4>)
 8009010:	7812      	ldrb	r2, [r2, #0]
 8009012:	4353      	muls	r3, r2
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b3d      	ldr	r3, [pc, #244]	@ (800910c <logger+0x6bc>)
 8009018:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         cntRegDATA++;	//incw	X
 800901a:	4b3d      	ldr	r3, [pc, #244]	@ (8009110 <logger+0x6c0>)
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	b29a      	uxth	r2, r3
 8009022:	4b3b      	ldr	r3, [pc, #236]	@ (8009110 <logger+0x6c0>)
 8009024:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 8009026:	4b3a      	ldr	r3, [pc, #232]	@ (8009110 <logger+0x6c0>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	4a3a      	ldr	r2, [pc, #232]	@ (8009114 <logger+0x6c4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d903      	bls.n	8009038 <logger+0x5e8>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 8009030:	4b37      	ldr	r3, [pc, #220]	@ (8009110 <logger+0x6c0>)
 8009032:	4a39      	ldr	r2, [pc, #228]	@ (8009118 <logger+0x6c8>)
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e000      	b.n	800903a <logger+0x5ea>
			goto no_clrREG_01;
 8009038:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 800903a:	4b35      	ldr	r3, [pc, #212]	@ (8009110 <logger+0x6c0>)
 800903c:	881a      	ldrh	r2, [r3, #0]
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <logger+0x6cc>)
 8009040:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 8009042:	4b37      	ldr	r3, [pc, #220]	@ (8009120 <logger+0x6d0>)
 8009044:	4a37      	ldr	r2, [pc, #220]	@ (8009124 <logger+0x6d4>)
 8009046:	601a      	str	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 8009048:	f000 f8f0 	bl	800922c <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 800904c:	4b2b      	ldr	r3, [pc, #172]	@ (80090fc <logger+0x6ac>)
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	4b29      	ldr	r3, [pc, #164]	@ (80090f8 <logger+0x6a8>)
 8009052:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 8009054:	4b2b      	ldr	r3, [pc, #172]	@ (8009104 <logger+0x6b4>)
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	4b29      	ldr	r3, [pc, #164]	@ (8009100 <logger+0x6b0>)
 800905a:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 800905c:	4b1c      	ldr	r3, [pc, #112]	@ (80090d0 <logger+0x680>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2201      	movs	r2, #1
 8009062:	4053      	eors	r3, r2
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <logger+0x628>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 800906a:	4b19      	ldr	r3, [pc, #100]	@ (80090d0 <logger+0x680>)
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 8009070:	4b17      	ldr	r3, [pc, #92]	@ (80090d0 <logger+0x680>)
 8009072:	2201      	movs	r2, #1
 8009074:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 8009076:	e002      	b.n	800907e <logger+0x62e>
        	 	 goto noFullLoggerDATA;
 8009078:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 800907a:	e000      	b.n	800907e <logger+0x62e>
		goto fin_logger; //jp fin_logger
 800907c:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200010ae 	.word	0x200010ae
 8009088:	20000ed8 	.word	0x20000ed8
 800908c:	0803f804 	.word	0x0803f804
 8009090:	20000f38 	.word	0x20000f38
 8009094:	0803f805 	.word	0x0803f805
 8009098:	0803f806 	.word	0x0803f806
 800909c:	0803f807 	.word	0x0803f807
 80090a0:	20000bc0 	.word	0x20000bc0
 80090a4:	20000bc1 	.word	0x20000bc1
 80090a8:	20000bde 	.word	0x20000bde
 80090ac:	20000dc0 	.word	0x20000dc0
 80090b0:	20000dc2 	.word	0x20000dc2
 80090b4:	20000bc2 	.word	0x20000bc2
 80090b8:	20000bc3 	.word	0x20000bc3
 80090bc:	20000db8 	.word	0x20000db8
 80090c0:	20000f3c 	.word	0x20000f3c
 80090c4:	200010fc 	.word	0x200010fc
 80090c8:	20001110 	.word	0x20001110
 80090cc:	20000f60 	.word	0x20000f60
 80090d0:	20000e14 	.word	0x20000e14
 80090d4:	20000da8 	.word	0x20000da8
 80090d8:	200000b8 	.word	0x200000b8
 80090dc:	20000dc4 	.word	0x20000dc4
 80090e0:	20000db4 	.word	0x20000db4
 80090e4:	20000c9c 	.word	0x20000c9c
 80090e8:	20000db0 	.word	0x20000db0
 80090ec:	0803c000 	.word	0x0803c000
 80090f0:	20000dad 	.word	0x20000dad
 80090f4:	20000dae 	.word	0x20000dae
 80090f8:	20000dbd 	.word	0x20000dbd
 80090fc:	20000daa 	.word	0x20000daa
 8009100:	20000dbc 	.word	0x20000dbc
 8009104:	20000dab 	.word	0x20000dab
 8009108:	200008e0 	.word	0x200008e0
 800910c:	20000b65 	.word	0x20000b65
 8009110:	2000104a 	.word	0x2000104a
 8009114:	0000053e 	.word	0x0000053e
 8009118:	0000053f 	.word	0x0000053f
 800911c:	2000104e 	.word	0x2000104e
 8009120:	20001050 	.word	0x20001050
 8009124:	0803f810 	.word	0x0803f810

08009128 <load_event>:
void load_event(){
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 800912c:	4b2c      	ldr	r3, [pc, #176]	@ (80091e0 <load_event+0xb8>)
 800912e:	4a2d      	ldr	r2, [pc, #180]	@ (80091e4 <load_event+0xbc>)
 8009130:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 8009132:	4b2d      	ldr	r3, [pc, #180]	@ (80091e8 <load_event+0xc0>)
 8009134:	4a2d      	ldr	r2, [pc, #180]	@ (80091ec <load_event+0xc4>)
 8009136:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 8009138:	4b2d      	ldr	r3, [pc, #180]	@ (80091f0 <load_event+0xc8>)
 800913a:	22a0      	movs	r2, #160	@ 0xa0
 800913c:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 800913e:	4b2d      	ldr	r3, [pc, #180]	@ (80091f4 <load_event+0xcc>)
 8009140:	220e      	movs	r2, #14
 8009142:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 8009144:	4b2c      	ldr	r3, [pc, #176]	@ (80091f8 <load_event+0xd0>)
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	4b2c      	ldr	r3, [pc, #176]	@ (80091fc <load_event+0xd4>)
 800914a:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 800914c:	4b2c      	ldr	r3, [pc, #176]	@ (8009200 <load_event+0xd8>)
 800914e:	781a      	ldrb	r2, [r3, #0]
 8009150:	4b2c      	ldr	r3, [pc, #176]	@ (8009204 <load_event+0xdc>)
 8009152:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <load_event+0xcc>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	0019      	movs	r1, r3
 800915a:	2080      	movs	r0, #128	@ 0x80
 800915c:	f7f7 f866 	bl	800022c <__divsi3>
 8009160:	0003      	movs	r3, r0
 8009162:	b2da      	uxtb	r2, r3
 8009164:	4b28      	ldr	r3, [pc, #160]	@ (8009208 <load_event+0xe0>)
 8009166:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 8009168:	4b27      	ldr	r3, [pc, #156]	@ (8009208 <load_event+0xe0>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	4a21      	ldr	r2, [pc, #132]	@ (80091f4 <load_event+0xcc>)
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	4353      	muls	r3, r2
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b25      	ldr	r3, [pc, #148]	@ (800920c <load_event+0xe4>)
 8009176:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 8009178:	4b25      	ldr	r3, [pc, #148]	@ (8009210 <load_event+0xe8>)
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	4b23      	ldr	r3, [pc, #140]	@ (8009210 <load_event+0xe8>)
 8009182:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 8009184:	4b22      	ldr	r3, [pc, #136]	@ (8009210 <load_event+0xe8>)
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	4a22      	ldr	r2, [pc, #136]	@ (8009214 <load_event+0xec>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d903      	bls.n	8009196 <load_event+0x6e>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 800918e:	4b20      	ldr	r3, [pc, #128]	@ (8009210 <load_event+0xe8>)
 8009190:	4a21      	ldr	r2, [pc, #132]	@ (8009218 <load_event+0xf0>)
 8009192:	801a      	strh	r2, [r3, #0]
 8009194:	e000      	b.n	8009198 <load_event+0x70>
			goto no_clrREG_02;
 8009196:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 8009198:	4b1d      	ldr	r3, [pc, #116]	@ (8009210 <load_event+0xe8>)
 800919a:	881a      	ldrh	r2, [r3, #0]
 800919c:	4b1f      	ldr	r3, [pc, #124]	@ (800921c <load_event+0xf4>)
 800919e:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 80091a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009220 <load_event+0xf8>)
 80091a2:	4a20      	ldr	r2, [pc, #128]	@ (8009224 <load_event+0xfc>)
 80091a4:	601a      	str	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 80091a6:	f000 f841 	bl	800922c <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 80091aa:	4b14      	ldr	r3, [pc, #80]	@ (80091fc <load_event+0xd4>)
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <load_event+0xd0>)
 80091b0:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 80091b2:	4b14      	ldr	r3, [pc, #80]	@ (8009204 <load_event+0xdc>)
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	4b12      	ldr	r3, [pc, #72]	@ (8009200 <load_event+0xd8>)
 80091b8:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 80091ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009228 <load_event+0x100>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2201      	movs	r2, #1
 80091c0:	4053      	eors	r3, r2
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <load_event+0xae>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 80091c8:	4b17      	ldr	r3, [pc, #92]	@ (8009228 <load_event+0x100>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 80091ce:	4b16      	ldr	r3, [pc, #88]	@ (8009228 <load_event+0x100>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 80091d4:	e000      	b.n	80091d8 <load_event+0xb0>
			goto noFullLoggerEVENT;
 80091d6:	46c0      	nop			@ (mov r8, r8)
}
 80091d8:	46c0      	nop			@ (mov r8, r8)
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	46c0      	nop			@ (mov r8, r8)
 80091e0:	20000db4 	.word	0x20000db4
 80091e4:	20000d1c 	.word	0x20000d1c
 80091e8:	20000db0 	.word	0x20000db0
 80091ec:	08037000 	.word	0x08037000
 80091f0:	20000dad 	.word	0x20000dad
 80091f4:	20000dae 	.word	0x20000dae
 80091f8:	20000dbf 	.word	0x20000dbf
 80091fc:	20000daa 	.word	0x20000daa
 8009200:	20000dbe 	.word	0x20000dbe
 8009204:	20000dab 	.word	0x20000dab
 8009208:	200008e0 	.word	0x200008e0
 800920c:	20000b65 	.word	0x20000b65
 8009210:	2000104c 	.word	0x2000104c
 8009214:	0000059e 	.word	0x0000059e
 8009218:	0000059f 	.word	0x0000059f
 800921c:	2000104e 	.word	0x2000104e
 8009220:	20001050 	.word	0x20001050
 8009224:	0803f812 	.word	0x0803f812
 8009228:	20000e14 	.word	0x20000e14

0800922c <load_buffer_logger>:

void load_buffer_logger(){
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 8009232:	4b45      	ldr	r3, [pc, #276]	@ (8009348 <load_buffer_logger+0x11c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 8009238:	4b44      	ldr	r3, [pc, #272]	@ (800934c <load_buffer_logger+0x120>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 800923e:	4b44      	ldr	r3, [pc, #272]	@ (8009350 <load_buffer_logger+0x124>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	001a      	movs	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	189b      	adds	r3, r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 800924a:	4b42      	ldr	r3, [pc, #264]	@ (8009354 <load_buffer_logger+0x128>)
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3301      	adds	r3, #1
 8009262:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 8009264:	4b3b      	ldr	r3, [pc, #236]	@ (8009354 <load_buffer_logger+0x128>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	3301      	adds	r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b39      	ldr	r3, [pc, #228]	@ (8009354 <load_buffer_logger+0x128>)
 800926e:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 8009270:	4b37      	ldr	r3, [pc, #220]	@ (8009350 <load_buffer_logger+0x124>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	b2da      	uxtb	r2, r3
 8009278:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <load_buffer_logger+0x124>)
 800927a:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 800927c:	4b34      	ldr	r3, [pc, #208]	@ (8009350 <load_buffer_logger+0x124>)
 800927e:	781a      	ldrb	r2, [r3, #0]
 8009280:	4b35      	ldr	r3, [pc, #212]	@ (8009358 <load_buffer_logger+0x12c>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d352      	bcc.n	800932e <load_buffer_logger+0x102>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 8009288:	4b30      	ldr	r3, [pc, #192]	@ (800934c <load_buffer_logger+0x120>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	337f      	adds	r3, #127	@ 0x7f
 800928e:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	4b31      	ldr	r3, [pc, #196]	@ (800935c <load_buffer_logger+0x130>)
 8009296:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 8009298:	4b30      	ldr	r3, [pc, #192]	@ (800935c <load_buffer_logger+0x130>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	4b2e      	ldr	r3, [pc, #184]	@ (800935c <load_buffer_logger+0x130>)
 80092a2:	701a      	strb	r2, [r3, #0]
		*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 80092a4:	4b2d      	ldr	r3, [pc, #180]	@ (800935c <load_buffer_logger+0x130>)
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 80092b8:	4b29      	ldr	r3, [pc, #164]	@ (8009360 <load_buffer_logger+0x134>)
 80092ba:	22aa      	movs	r2, #170	@ 0xaa
 80092bc:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 80092be:	4b29      	ldr	r3, [pc, #164]	@ (8009364 <load_buffer_logger+0x138>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	01db      	lsls	r3, r3, #7
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	4b28      	ldr	r3, [pc, #160]	@ (8009368 <load_buffer_logger+0x13c>)
 80092c8:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 80092ca:	4b28      	ldr	r3, [pc, #160]	@ (800936c <load_buffer_logger+0x140>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a26      	ldr	r2, [pc, #152]	@ (8009368 <load_buffer_logger+0x13c>)
 80092d0:	8812      	ldrh	r2, [r2, #0]
 80092d2:	189a      	adds	r2, r3, r2
 80092d4:	4b26      	ldr	r3, [pc, #152]	@ (8009370 <load_buffer_logger+0x144>)
 80092d6:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 80092d8:	4b1c      	ldr	r3, [pc, #112]	@ (800934c <load_buffer_logger+0x120>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	4b25      	ldr	r3, [pc, #148]	@ (8009374 <load_buffer_logger+0x148>)
 80092de:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 80092e4:	f7fd fe2e 	bl	8006f44 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 80092e8:	f7fd fd48 	bl	8006d7c <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80092ec:	f7fd fd0c 	bl	8006d08 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80092f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009364 <load_buffer_logger+0x138>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009364 <load_buffer_logger+0x138>)
 80092fa:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 80092fc:	4b19      	ldr	r3, [pc, #100]	@ (8009364 <load_buffer_logger+0x138>)
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	4b1d      	ldr	r3, [pc, #116]	@ (8009378 <load_buffer_logger+0x14c>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d306      	bcc.n	8009316 <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 8009308:	4b16      	ldr	r3, [pc, #88]	@ (8009364 <load_buffer_logger+0x138>)
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 800930e:	4b1b      	ldr	r3, [pc, #108]	@ (800937c <load_buffer_logger+0x150>)
 8009310:	2201      	movs	r2, #1
 8009312:	701a      	strb	r2, [r3, #0]
 8009314:	e000      	b.n	8009318 <load_buffer_logger+0xec>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 8009316:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 8009318:	f7fd fcbc 	bl	8006c94 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <load_buffer_logger+0x120>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 8009326:	4b0a      	ldr	r3, [pc, #40]	@ (8009350 <load_buffer_logger+0x124>)
 8009328:	2200      	movs	r2, #0
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e000      	b.n	8009330 <load_buffer_logger+0x104>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 800932e:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 8009330:	4b08      	ldr	r3, [pc, #32]	@ (8009354 <load_buffer_logger+0x128>)
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	4b12      	ldr	r3, [pc, #72]	@ (8009380 <load_buffer_logger+0x154>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d200      	bcs.n	800933e <load_buffer_logger+0x112>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 800933c:	e788      	b.n	8009250 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 800933e:	46c0      	nop			@ (mov r8, r8)

}
 8009340:	46c0      	nop			@ (mov r8, r8)
 8009342:	46bd      	mov	sp, r7
 8009344:	b004      	add	sp, #16
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000db8 	.word	0x20000db8
 800934c:	20000db4 	.word	0x20000db4
 8009350:	20000dab 	.word	0x20000dab
 8009354:	20000dac 	.word	0x20000dac
 8009358:	20000b65 	.word	0x20000b65
 800935c:	200008e0 	.word	0x200008e0
 8009360:	20000d9c 	.word	0x20000d9c
 8009364:	20000daa 	.word	0x20000daa
 8009368:	200008e2 	.word	0x200008e2
 800936c:	20000db0 	.word	0x20000db0
 8009370:	20000da0 	.word	0x20000da0
 8009374:	20000da4 	.word	0x20000da4
 8009378:	20000dad 	.word	0x20000dad
 800937c:	20000e14 	.word	0x20000e14
 8009380:	20000dae 	.word	0x20000dae

08009384 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0

    return timemilis;
 8009388:	4b02      	ldr	r3, [pc, #8]	@ (8009394 <millis+0x10>)
 800938a:	681b      	ldr	r3, [r3, #0]
}
 800938c:	0018      	movs	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	200008ec 	.word	0x200008ec

08009398 <configura_perif_2>:

	HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);
}

void configura_perif_2(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 800939c:	f000 fe6e 	bl	800a07c <MX_GPIO_Init>
	  MX_DMA_Init();
 80093a0:	f000 fe46 	bl	800a030 <MX_DMA_Init>
	  MX_ADC1_Init();
 80093a4:	f000 fa9c 	bl	80098e0 <MX_ADC1_Init>
	  MX_I2C1_Init();
 80093a8:	f000 fc08 	bl	8009bbc <MX_I2C1_Init>
	  MX_TIM3_Init();
 80093ac:	f000 fce0 	bl	8009d70 <MX_TIM3_Init>
	  MX_TIM6_Init();
 80093b0:	f000 fd60 	bl	8009e74 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80093b4:	f000 fd9e 	bl	8009ef4 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80093b8:	f000 fdea 	bl	8009f90 <MX_USART4_UART_Init>
	  //MX_IWDG_Init();

}
 80093bc:	46c0      	nop			@ (mov r8, r8)
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80093c8:	4b21      	ldr	r3, [pc, #132]	@ (8009450 <check_Tick_1ms+0x8c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	4b20      	ldr	r3, [pc, #128]	@ (8009450 <check_Tick_1ms+0x8c>)
 80093d0:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80093d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009450 <check_Tick_1ms+0x8c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	dd0f      	ble.n	80093fa <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80093da:	4b1d      	ldr	r3, [pc, #116]	@ (8009450 <check_Tick_1ms+0x8c>)
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80093e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009454 <check_Tick_1ms+0x90>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80093e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <check_Tick_1ms+0x94>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <check_Tick_1ms+0x94>)
 80093ee:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 80093f0:	4b1a      	ldr	r3, [pc, #104]	@ (800945c <check_Tick_1ms+0x98>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	4b19      	ldr	r3, [pc, #100]	@ (800945c <check_Tick_1ms+0x98>)
 80093f8:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 80093fa:	4b17      	ldr	r3, [pc, #92]	@ (8009458 <check_Tick_1ms+0x94>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b09      	cmp	r3, #9
 8009400:	dd0a      	ble.n	8009418 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 8009402:	4b15      	ldr	r3, [pc, #84]	@ (8009458 <check_Tick_1ms+0x94>)
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 8009408:	4b15      	ldr	r3, [pc, #84]	@ (8009460 <check_Tick_1ms+0x9c>)
 800940a:	2201      	movs	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 800940e:	4b15      	ldr	r3, [pc, #84]	@ (8009464 <check_Tick_1ms+0xa0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	4b13      	ldr	r3, [pc, #76]	@ (8009464 <check_Tick_1ms+0xa0>)
 8009416:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 8009418:	4b12      	ldr	r3, [pc, #72]	@ (8009464 <check_Tick_1ms+0xa0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b09      	cmp	r3, #9
 800941e:	dd0a      	ble.n	8009436 <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8009420:	4b10      	ldr	r3, [pc, #64]	@ (8009464 <check_Tick_1ms+0xa0>)
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 8009426:	4b10      	ldr	r3, [pc, #64]	@ (8009468 <check_Tick_1ms+0xa4>)
 8009428:	2201      	movs	r2, #1
 800942a:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 800942c:	4b0f      	ldr	r3, [pc, #60]	@ (800946c <check_Tick_1ms+0xa8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <check_Tick_1ms+0xa8>)
 8009434:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 8009436:	4b0d      	ldr	r3, [pc, #52]	@ (800946c <check_Tick_1ms+0xa8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b09      	cmp	r3, #9
 800943c:	dd05      	ble.n	800944a <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 800943e:	4b0b      	ldr	r3, [pc, #44]	@ (800946c <check_Tick_1ms+0xa8>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8009444:	4b0a      	ldr	r3, [pc, #40]	@ (8009470 <check_Tick_1ms+0xac>)
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	200008f0 	.word	0x200008f0
 8009454:	200008e4 	.word	0x200008e4
 8009458:	200008f4 	.word	0x200008f4
 800945c:	200008ec 	.word	0x200008ec
 8009460:	200008e5 	.word	0x200008e5
 8009464:	200008f8 	.word	0x200008f8
 8009468:	200008e6 	.word	0x200008e6
 800946c:	200008fc 	.word	0x200008fc
 8009470:	200008e7 	.word	0x200008e7

08009474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initEEPROMEmulated(); // Init EEPROM Emulated
 800947a:	f7f9 f83b 	bl	80024f4 <initEEPROMEmulated>
	timeRstBLE = 1;
 800947e:	4bc7      	ldr	r3, [pc, #796]	@ (800979c <main+0x328>)
 8009480:	2201      	movs	r2, #1
 8009482:	701a      	strb	r2, [r3, #0]
	inicio ();
 8009484:	f7ff f8ae 	bl	80085e4 <inicio>
	ProcesosC = 6;
 8009488:	4bc5      	ldr	r3, [pc, #788]	@ (80097a0 <main+0x32c>)
 800948a:	2206      	movs	r2, #6
 800948c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800948e:	f007 fedc 	bl	801124a <HAL_Init>

  /* USER CODE BEGIN Init */
  configura_perif_2();
 8009492:	f7ff ff81 	bl	8009398 <configura_perif_2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009496:	f000 f9d1 	bl	800983c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800949a:	f000 fdef 	bl	800a07c <MX_GPIO_Init>
  MX_DMA_Init();
 800949e:	f000 fdc7 	bl	800a030 <MX_DMA_Init>
  MX_ADC1_Init();
 80094a2:	f000 fa1d 	bl	80098e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80094a6:	f000 fb89 	bl	8009bbc <MX_I2C1_Init>
  MX_IWDG_Init();
 80094aa:	f000 fbc9 	bl	8009c40 <MX_IWDG_Init>
  MX_RTC_Init();
 80094ae:	f000 fbe9 	bl	8009c84 <MX_RTC_Init>
  MX_TIM3_Init();
 80094b2:	f000 fc5d 	bl	8009d70 <MX_TIM3_Init>
  MX_TIM6_Init();
 80094b6:	f000 fcdd 	bl	8009e74 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80094ba:	f000 fd1b 	bl	8009ef4 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80094be:	f000 fd67 	bl	8009f90 <MX_USART4_UART_Init>
  MX_FLASH_Init();
 80094c2:	f000 fb69 	bl	8009b98 <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 80094c6:	f7fa fe9b 	bl	8004200 <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin((uint8_t)findLastValue((uint32_t) &eePlantilla[eeAddModBus]));
 80094ca:	4bb6      	ldr	r3, [pc, #728]	@ (80097a4 <main+0x330>)
 80094cc:	0018      	movs	r0, r3
 80094ce:	f7f9 fba5 	bl	8002c1c <findLastValue>
 80094d2:	0003      	movs	r3, r0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7fa fe98 	bl	800420c <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 80094dc:	4bb2      	ldr	r3, [pc, #712]	@ (80097a8 <main+0x334>)
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80094e2:	4bb2      	ldr	r3, [pc, #712]	@ (80097ac <main+0x338>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	2104      	movs	r1, #4
 80094e8:	0018      	movs	r0, r3
 80094ea:	f00a f9c4 	bl	8013876 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 80094ee:	4bb0      	ldr	r3, [pc, #704]	@ (80097b0 <main+0x33c>)
 80094f0:	2203      	movs	r2, #3
 80094f2:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 80094f4:	4ba9      	ldr	r3, [pc, #676]	@ (800979c <main+0x328>)
 80094f6:	2208      	movs	r2, #8
 80094f8:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 80094fa:	4bad      	ldr	r3, [pc, #692]	@ (80097b0 <main+0x33c>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8009500:	4bac      	ldr	r3, [pc, #688]	@ (80097b4 <main+0x340>)
 8009502:	2201      	movs	r2, #1
 8009504:	2120      	movs	r1, #32
 8009506:	0018      	movs	r0, r3
 8009508:	f00a f9b5 	bl	8013876 <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800950c:	2007      	movs	r0, #7
 800950e:	f009 f978 	bl	8012802 <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8009512:	4ba9      	ldr	r3, [pc, #676]	@ (80097b8 <main+0x344>)
 8009514:	0018      	movs	r0, r3
 8009516:	f00e fe65 	bl	80181e4 <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 800951a:	e00e      	b.n	800953a <main+0xc6>
  {
		Count_Test2++;//  eliminar JTA buzzer
 800951c:	4ba7      	ldr	r3, [pc, #668]	@ (80097bc <main+0x348>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	4ba6      	ldr	r3, [pc, #664]	@ (80097bc <main+0x348>)
 8009524:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 8009526:	4ba5      	ldr	r3, [pc, #660]	@ (80097bc <main+0x348>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4aa5      	ldr	r2, [pc, #660]	@ (80097c0 <main+0x34c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d104      	bne.n	800953a <main+0xc6>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8009530:	4ba4      	ldr	r3, [pc, #656]	@ (80097c4 <main+0x350>)
 8009532:	2104      	movs	r1, #4
 8009534:	0018      	movs	r0, r3
 8009536:	f00f f83b 	bl	80185b0 <HAL_TIM_PWM_Stop>
  while(Count_Test2 < 130000)
 800953a:	4ba0      	ldr	r3, [pc, #640]	@ (80097bc <main+0x348>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4aa0      	ldr	r2, [pc, #640]	@ (80097c0 <main+0x34c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d9eb      	bls.n	800951c <main+0xa8>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
  }
  Count_Test2 = 0;
 8009544:	4b9d      	ldr	r3, [pc, #628]	@ (80097bc <main+0x348>)
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]

  asm ("nop");
 800954a:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 800954c:	2300      	movs	r3, #0
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e009      	b.n	8009566 <main+0xf2>
  {
	  HAL_Delay (1);
 8009552:	2001      	movs	r0, #1
 8009554:	f007 fef4 	bl	8011340 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8009558:	4b9b      	ldr	r3, [pc, #620]	@ (80097c8 <main+0x354>)
 800955a:	0018      	movs	r0, r3
 800955c:	f00c fb5e 	bl	8015c1c <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3301      	adds	r3, #1
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	23fa      	movs	r3, #250	@ 0xfa
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	429a      	cmp	r2, r3
 800956e:	dbf0      	blt.n	8009552 <main+0xde>


  while (1)
  {

testTimmingProcess:
 8009570:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 8009572:	4b8b      	ldr	r3, [pc, #556]	@ (80097a0 <main+0x32c>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	3301      	adds	r3, #1
 8009578:	b2da      	uxtb	r2, r3
 800957a:	4b89      	ldr	r3, [pc, #548]	@ (80097a0 <main+0x32c>)
 800957c:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 800957e:	e000      	b.n	8009582 <main+0x10e>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 8009580:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 8009582:	4b92      	ldr	r3, [pc, #584]	@ (80097cc <main+0x358>)
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2201      	movs	r2, #1
 8009588:	4013      	ands	r3, r2
 800958a:	d0f9      	beq.n	8009580 <main+0x10c>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 800958c:	4b8f      	ldr	r3, [pc, #572]	@ (80097cc <main+0x358>)
 800958e:	691a      	ldr	r2, [r3, #16]
 8009590:	4b8e      	ldr	r3, [pc, #568]	@ (80097cc <main+0x358>)
 8009592:	2101      	movs	r1, #1
 8009594:	438a      	bics	r2, r1
 8009596:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 8009598:	4b8b      	ldr	r3, [pc, #556]	@ (80097c8 <main+0x354>)
 800959a:	0018      	movs	r0, r3
 800959c:	f00c fb3e 	bl	8015c1c <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);	 //28-May-2024: Salida IO6 toogle test
 80095a0:	4b84      	ldr	r3, [pc, #528]	@ (80097b4 <main+0x340>)
 80095a2:	2104      	movs	r1, #4
 80095a4:	0018      	movs	r0, r3
 80095a6:	f00a f983 	bl	80138b0 <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 80095aa:	4b89      	ldr	r3, [pc, #548]	@ (80097d0 <main+0x35c>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	4b87      	ldr	r3, [pc, #540]	@ (80097d0 <main+0x35c>)
 80095b4:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 80095b6:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80095b8:	f7fb fdde 	bl	8005178 <main10>

    muestreo();
 80095bc:	f000 fe28 	bl	800a210 <muestreo>

  	if(StateSleep == 0x55){
 80095c0:	4b84      	ldr	r3, [pc, #528]	@ (80097d4 <main+0x360>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b55      	cmp	r3, #85	@ 0x55
 80095c6:	d101      	bne.n	80095cc <main+0x158>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 80095c8:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 80095ca:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80095cc:	f7fb fe60 	bl	8005290 <retardoDeActuadores>

  	asm ("nop");
 80095d0:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 80095d2:	f7ff fef7 	bl	80093c4 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 80095d6:	4b71      	ldr	r3, [pc, #452]	@ (800979c <main+0x328>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d009      	beq.n	80095f2 <main+0x17e>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 80095de:	4b73      	ldr	r3, [pc, #460]	@ (80097ac <main+0x338>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	2140      	movs	r1, #64	@ 0x40
 80095e4:	0018      	movs	r0, r3
 80095e6:	f00a f946 	bl	8013876 <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 80095ea:	4b71      	ldr	r3, [pc, #452]	@ (80097b0 <main+0x33c>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	e018      	b.n	8009624 <main+0x1b0>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 80095f2:	4b6e      	ldr	r3, [pc, #440]	@ (80097ac <main+0x338>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	2140      	movs	r1, #64	@ 0x40
 80095f8:	0018      	movs	r0, r3
 80095fa:	f00a f93c 	bl	8013876 <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 80095fe:	4b6c      	ldr	r3, [pc, #432]	@ (80097b0 <main+0x33c>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b03      	cmp	r3, #3
 8009604:	d00b      	beq.n	800961e <main+0x1aa>
 8009606:	dc0d      	bgt.n	8009624 <main+0x1b0>
 8009608:	2b01      	cmp	r3, #1
 800960a:	d002      	beq.n	8009612 <main+0x19e>
 800960c:	2b02      	cmp	r3, #2
 800960e:	d003      	beq.n	8009618 <main+0x1a4>
 8009610:	e008      	b.n	8009624 <main+0x1b0>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009612:	f7fb f9f9 	bl	8004a08 <SetUpBluetooth_Ble>
 8009616:	e005      	b.n	8009624 <main+0x1b0>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 8009618:	f7fb fa62 	bl	8004ae0 <GetParamBluetooth_Ble>
 800961c:	e002      	b.n	8009624 <main+0x1b0>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 800961e:	f7fb fabf 	bl	8004ba0 <TransmitReceive_Ble>
 8009622:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8009624:	f7fb fd0c 	bl	8005040 <Read_Inpunts_ble>
//  			flagsLogger [5] = 0;				// permite loggeo de datos
//  		}
//  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
//  	}

  	if(tick_1s){
 8009628:	4b6b      	ldr	r3, [pc, #428]	@ (80097d8 <main+0x364>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <main+0x1ca>
  	  asm ("nop");
 8009630:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8009632:	4b6a      	ldr	r3, [pc, #424]	@ (80097dc <main+0x368>)
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	4b68      	ldr	r3, [pc, #416]	@ (80097dc <main+0x368>)
 800963c:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 800963e:	4b68      	ldr	r3, [pc, #416]	@ (80097e0 <main+0x36c>)
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <main+0x1de>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 8009646:	4b67      	ldr	r3, [pc, #412]	@ (80097e4 <main+0x370>)
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	4b65      	ldr	r3, [pc, #404]	@ (80097e4 <main+0x370>)
 8009650:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8009652:	4965      	ldr	r1, [pc, #404]	@ (80097e8 <main+0x374>)
 8009654:	4b58      	ldr	r3, [pc, #352]	@ (80097b8 <main+0x344>)
 8009656:	2201      	movs	r2, #1
 8009658:	0018      	movs	r0, r3
 800965a:	f00e fb31 	bl	8017cc0 <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800965e:	4963      	ldr	r1, [pc, #396]	@ (80097ec <main+0x378>)
 8009660:	4b55      	ldr	r3, [pc, #340]	@ (80097b8 <main+0x344>)
 8009662:	2201      	movs	r2, #1
 8009664:	0018      	movs	r0, r3
 8009666:	f00e fc35 	bl	8017ed4 <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 800966a:	4b60      	ldr	r3, [pc, #384]	@ (80097ec <main+0x378>)
 800966c:	78da      	ldrb	r2, [r3, #3]
 800966e:	4b60      	ldr	r3, [pc, #384]	@ (80097f0 <main+0x37c>)
 8009670:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8009672:	4b5e      	ldr	r3, [pc, #376]	@ (80097ec <main+0x378>)
 8009674:	785a      	ldrb	r2, [r3, #1]
 8009676:	4b5f      	ldr	r3, [pc, #380]	@ (80097f4 <main+0x380>)
 8009678:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 800967a:	4b5c      	ldr	r3, [pc, #368]	@ (80097ec <main+0x378>)
 800967c:	789a      	ldrb	r2, [r3, #2]
 800967e:	4b5e      	ldr	r3, [pc, #376]	@ (80097f8 <main+0x384>)
 8009680:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8009682:	4b59      	ldr	r3, [pc, #356]	@ (80097e8 <main+0x374>)
 8009684:	781a      	ldrb	r2, [r3, #0]
 8009686:	4b5d      	ldr	r3, [pc, #372]	@ (80097fc <main+0x388>)
 8009688:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 800968a:	4b57      	ldr	r3, [pc, #348]	@ (80097e8 <main+0x374>)
 800968c:	785a      	ldrb	r2, [r3, #1]
 800968e:	4b5c      	ldr	r3, [pc, #368]	@ (8009800 <main+0x38c>)
 8009690:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8009692:	4b55      	ldr	r3, [pc, #340]	@ (80097e8 <main+0x374>)
 8009694:	789a      	ldrb	r2, [r3, #2]
 8009696:	4b5b      	ldr	r3, [pc, #364]	@ (8009804 <main+0x390>)
 8009698:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 800969a:	f7ff f965 	bl	8008968 <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 800969e:	f7fb fe95 	bl	80053cc <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 80096a2:	4b59      	ldr	r3, [pc, #356]	@ (8009808 <main+0x394>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2201      	movs	r2, #1
 80096a8:	4053      	eors	r3, r2
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d119      	bne.n	80096e4 <main+0x270>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 80096b0:	4b56      	ldr	r3, [pc, #344]	@ (800980c <main+0x398>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	0c1b      	lsrs	r3, r3, #16
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	4b55      	ldr	r3, [pc, #340]	@ (8009810 <main+0x39c>)
 80096ba:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 80096bc:	4b53      	ldr	r3, [pc, #332]	@ (800980c <main+0x398>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	4b54      	ldr	r3, [pc, #336]	@ (8009814 <main+0x3a0>)
 80096c4:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 80096c6:	4b54      	ldr	r3, [pc, #336]	@ (8009818 <main+0x3a4>)
 80096c8:	781a      	ldrb	r2, [r3, #0]
 80096ca:	4b4e      	ldr	r3, [pc, #312]	@ (8009804 <main+0x390>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d00a      	beq.n	80096e8 <main+0x274>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 80096d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009804 <main+0x390>)
 80096d4:	781a      	ldrb	r2, [r3, #0]
 80096d6:	4b50      	ldr	r3, [pc, #320]	@ (8009818 <main+0x3a4>)
 80096d8:	701a      	strb	r2, [r3, #0]
  		  		decword(&cntLogger_H);
 80096da:	4b50      	ldr	r3, [pc, #320]	@ (800981c <main+0x3a8>)
 80096dc:	0018      	movs	r0, r3
 80096de:	f7fd fc38 	bl	8006f52 <decword>
 80096e2:	e002      	b.n	80096ea <main+0x276>
  		  			goto noActTime;
 80096e4:	46c0      	nop			@ (mov r8, r8)
 80096e6:	e000      	b.n	80096ea <main+0x276>
  		  			goto no_inc_cnt_sec;
 80096e8:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 80096ea:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 80096ec:	4b2c      	ldr	r3, [pc, #176]	@ (80097a0 <main+0x32c>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b07      	cmp	r3, #7
 80096f2:	d841      	bhi.n	8009778 <main+0x304>
 80096f4:	009a      	lsls	r2, r3, #2
 80096f6:	4b4a      	ldr	r3, [pc, #296]	@ (8009820 <main+0x3ac>)
 80096f8:	18d3      	adds	r3, r2, r3
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 80096fe:	f7fd fde7 	bl	80072d0 <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8009702:	e03d      	b.n	8009780 <main+0x30c>
  	  		case 1:
  	  			voltmetro();
 8009704:	f007 fb28 	bl	8010d58 <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 8009708:	e03a      	b.n	8009780 <main+0x30c>
  	  		case 2:
  	  			temper();
 800970a:	f002 fd17 	bl	800c13c <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 800970e:	e037      	b.n	8009780 <main+0x30c>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8009710:	4b44      	ldr	r3, [pc, #272]	@ (8009824 <main+0x3b0>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	2240      	movs	r2, #64	@ 0x40
 8009716:	4013      	ands	r3, r2
 8009718:	d005      	beq.n	8009726 <main+0x2b2>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 800971a:	4b24      	ldr	r3, [pc, #144]	@ (80097ac <main+0x338>)
 800971c:	2200      	movs	r2, #0
 800971e:	2104      	movs	r1, #4
 8009720:	0018      	movs	r0, r3
 8009722:	f00a f8a8 	bl	8013876 <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 8009726:	f7f9 fd37 	bl	8003198 <ModbusMap>
  	  			noctar ();
 800972a:	f000 ff0b 	bl	800a544 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 800972e:	e027      	b.n	8009780 <main+0x30c>
  	  		case 4:
  	  			refrigera();
 8009730:	f000 ff0e 	bl	800a550 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 8009734:	e024      	b.n	8009780 <main+0x30c>
  	  		case 5:
  	  			display();
 8009736:	f7fe fba9 	bl	8007e8c <display>
  	  			break;		// ASM: Pendiente a traducir
 800973a:	e021      	b.n	8009780 <main+0x30c>
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 800973c:	f003 fcfc 	bl	800d138 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 8009740:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <main+0x3b4>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2201      	movs	r2, #1
 8009746:	4053      	eors	r3, r2
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <main+0x2de>
  	  			{
  	  				logger ();				// ASM: Pendiente a traducir
 800974e:	f7ff f97f 	bl	8008a50 <logger>
  	  			}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8009752:	f004 f885 	bl	800d860 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 8009756:	4b35      	ldr	r3, [pc, #212]	@ (800982c <main+0x3b8>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2baa      	cmp	r3, #170	@ 0xaa
 800975c:	d10f      	bne.n	800977e <main+0x30a>
  	  			    asm ("nop");
 800975e:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 8009760:	4b33      	ldr	r3, [pc, #204]	@ (8009830 <main+0x3bc>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <main+0x30a>
  	  				    asm ("nop");
 8009768:	46c0      	nop			@ (mov r8, r8)
// 	  					bootloader();
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 800976a:	e008      	b.n	800977e <main+0x30a>
  	  		case 7:
  	  			watch();
 800976c:	f007 fc3c 	bl	8010fe8 <watch>
  	  			ProcesosC = 255;
 8009770:	4b0b      	ldr	r3, [pc, #44]	@ (80097a0 <main+0x32c>)
 8009772:	22ff      	movs	r2, #255	@ 0xff
 8009774:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 8009776:	e003      	b.n	8009780 <main+0x30c>
  	  		default:
  	  		    asm ("nop");
 8009778:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 800977a:	46c0      	nop			@ (mov r8, r8)
 800977c:	e7fd      	b.n	800977a <main+0x306>
  	  			break;		// ASM: Pendiente a traducir
 800977e:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8009780:	4b17      	ldr	r3, [pc, #92]	@ (80097e0 <main+0x36c>)
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 8009786:	4b2b      	ldr	r3, [pc, #172]	@ (8009834 <main+0x3c0>)
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 800978c:	4b2a      	ldr	r3, [pc, #168]	@ (8009838 <main+0x3c4>)
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8009792:	4b11      	ldr	r3, [pc, #68]	@ (80097d8 <main+0x364>)
 8009794:	2200      	movs	r2, #0
 8009796:	701a      	strb	r2, [r3, #0]
  {
 8009798:	e6eb      	b.n	8009572 <main+0xfe>
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	20000ef8 	.word	0x20000ef8
 80097a0:	20000900 	.word	0x20000900
 80097a4:	0803f072 	.word	0x0803f072
 80097a8:	200008e9 	.word	0x200008e9
 80097ac:	50000800 	.word	0x50000800
 80097b0:	2000004c 	.word	0x2000004c
 80097b4:	50000400 	.word	0x50000400
 80097b8:	20000570 	.word	0x20000570
 80097bc:	200010f4 	.word	0x200010f4
 80097c0:	0001fbcf 	.word	0x0001fbcf
 80097c4:	200005a0 	.word	0x200005a0
 80097c8:	2000055c 	.word	0x2000055c
 80097cc:	40001000 	.word	0x40001000
 80097d0:	200003d5 	.word	0x200003d5
 80097d4:	20000901 	.word	0x20000901
 80097d8:	200008e7 	.word	0x200008e7
 80097dc:	20000b12 	.word	0x20000b12
 80097e0:	200008e4 	.word	0x200008e4
 80097e4:	20000f94 	.word	0x20000f94
 80097e8:	20001088 	.word	0x20001088
 80097ec:	2000109c 	.word	0x2000109c
 80097f0:	20001080 	.word	0x20001080
 80097f4:	20001081 	.word	0x20001081
 80097f8:	20001082 	.word	0x20001082
 80097fc:	20001083 	.word	0x20001083
 8009800:	20001084 	.word	0x20001084
 8009804:	20001085 	.word	0x20001085
 8009808:	20001078 	.word	0x20001078
 800980c:	200010a8 	.word	0x200010a8
 8009810:	20000dc0 	.word	0x20000dc0
 8009814:	20000dc2 	.word	0x20000dc2
 8009818:	200010f9 	.word	0x200010f9
 800981c:	20000da8 	.word	0x20000da8
 8009820:	0801b464 	.word	0x0801b464
 8009824:	40004c00 	.word	0x40004c00
 8009828:	200010f8 	.word	0x200010f8
 800982c:	20000ef4 	.word	0x20000ef4
 8009830:	20000e29 	.word	0x20000e29
 8009834:	200008e5 	.word	0x200008e5
 8009838:	200008e6 	.word	0x200008e6

0800983c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b099      	sub	sp, #100	@ 0x64
 8009840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009842:	2414      	movs	r4, #20
 8009844:	193b      	adds	r3, r7, r4
 8009846:	0018      	movs	r0, r3
 8009848:	234c      	movs	r3, #76	@ 0x4c
 800984a:	001a      	movs	r2, r3
 800984c:	2100      	movs	r1, #0
 800984e:	f011 fb65 	bl	801af1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009852:	1d3b      	adds	r3, r7, #4
 8009854:	0018      	movs	r0, r3
 8009856:	2310      	movs	r3, #16
 8009858:	001a      	movs	r2, r3
 800985a:	2100      	movs	r1, #0
 800985c:	f011 fb5e 	bl	801af1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009860:	2380      	movs	r3, #128	@ 0x80
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	0018      	movs	r0, r3
 8009866:	f00c f9e9 	bl	8015c3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800986a:	193b      	adds	r3, r7, r4
 800986c:	221a      	movs	r2, #26
 800986e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009870:	193b      	adds	r3, r7, r4
 8009872:	2280      	movs	r2, #128	@ 0x80
 8009874:	0052      	lsls	r2, r2, #1
 8009876:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009878:	0021      	movs	r1, r4
 800987a:	187b      	adds	r3, r7, r1
 800987c:	2240      	movs	r2, #64	@ 0x40
 800987e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009880:	187b      	adds	r3, r7, r1
 8009882:	2201      	movs	r2, #1
 8009884:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009886:	187b      	adds	r3, r7, r1
 8009888:	2201      	movs	r2, #1
 800988a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800988c:	187b      	adds	r3, r7, r1
 800988e:	2200      	movs	r2, #0
 8009890:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8009892:	187b      	adds	r3, r7, r1
 8009894:	22b0      	movs	r2, #176	@ 0xb0
 8009896:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009898:	187b      	adds	r3, r7, r1
 800989a:	2200      	movs	r2, #0
 800989c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800989e:	187b      	adds	r3, r7, r1
 80098a0:	0018      	movs	r0, r3
 80098a2:	f00c fa37 	bl	8015d14 <HAL_RCC_OscConfig>
 80098a6:	1e03      	subs	r3, r0, #0
 80098a8:	d001      	beq.n	80098ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80098aa:	f000 fcab 	bl	800a204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098ae:	1d3b      	adds	r3, r7, #4
 80098b0:	2207      	movs	r2, #7
 80098b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	2200      	movs	r2, #0
 80098b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	2200      	movs	r2, #0
 80098be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80098c0:	1d3b      	adds	r3, r7, #4
 80098c2:	2200      	movs	r2, #0
 80098c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80098c6:	1d3b      	adds	r3, r7, #4
 80098c8:	2101      	movs	r1, #1
 80098ca:	0018      	movs	r0, r3
 80098cc:	f00c fe4c 	bl	8016568 <HAL_RCC_ClockConfig>
 80098d0:	1e03      	subs	r3, r0, #0
 80098d2:	d001      	beq.n	80098d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80098d4:	f000 fc96 	bl	800a204 <Error_Handler>
  }
}
 80098d8:	46c0      	nop			@ (mov r8, r8)
 80098da:	46bd      	mov	sp, r7
 80098dc:	b019      	add	sp, #100	@ 0x64
 80098de:	bd90      	pop	{r4, r7, pc}

080098e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	@ 0x28
 80098e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 80098e6:	4b9c      	ldr	r3, [pc, #624]	@ (8009b58 <MX_ADC1_Init+0x278>)
 80098e8:	4a9c      	ldr	r2, [pc, #624]	@ (8009b5c <MX_ADC1_Init+0x27c>)
 80098ea:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 80098ec:	4b9a      	ldr	r3, [pc, #616]	@ (8009b58 <MX_ADC1_Init+0x278>)
 80098ee:	4a9b      	ldr	r2, [pc, #620]	@ (8009b5c <MX_ADC1_Init+0x27c>)
 80098f0:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 80098f2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b60 <MX_ADC1_Init+0x280>)
 80098f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80098f6:	4b9a      	ldr	r3, [pc, #616]	@ (8009b60 <MX_ADC1_Init+0x280>)
 80098f8:	2180      	movs	r1, #128	@ 0x80
 80098fa:	0349      	lsls	r1, r1, #13
 80098fc:	430a      	orrs	r2, r1
 80098fe:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8009900:	4b97      	ldr	r3, [pc, #604]	@ (8009b60 <MX_ADC1_Init+0x280>)
 8009902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009904:	4b96      	ldr	r3, [pc, #600]	@ (8009b60 <MX_ADC1_Init+0x280>)
 8009906:	2104      	movs	r1, #4
 8009908:	430a      	orrs	r2, r1
 800990a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800990c:	4b94      	ldr	r3, [pc, #592]	@ (8009b60 <MX_ADC1_Init+0x280>)
 800990e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009910:	4b93      	ldr	r3, [pc, #588]	@ (8009b60 <MX_ADC1_Init+0x280>)
 8009912:	2101      	movs	r1, #1
 8009914:	430a      	orrs	r2, r1
 8009916:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8009918:	4b91      	ldr	r3, [pc, #580]	@ (8009b60 <MX_ADC1_Init+0x280>)
 800991a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800991c:	4b90      	ldr	r3, [pc, #576]	@ (8009b60 <MX_ADC1_Init+0x280>)
 800991e:	2110      	movs	r1, #16
 8009920:	430a      	orrs	r2, r1
 8009922:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8009924:	4b8f      	ldr	r3, [pc, #572]	@ (8009b64 <MX_ADC1_Init+0x284>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	4b8e      	ldr	r3, [pc, #568]	@ (8009b64 <MX_ADC1_Init+0x284>)
 800992a:	210f      	movs	r1, #15
 800992c:	430a      	orrs	r2, r1
 800992e:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8009930:	4b8c      	ldr	r3, [pc, #560]	@ (8009b64 <MX_ADC1_Init+0x284>)
 8009932:	68da      	ldr	r2, [r3, #12]
 8009934:	4b8b      	ldr	r3, [pc, #556]	@ (8009b64 <MX_ADC1_Init+0x284>)
 8009936:	210f      	movs	r1, #15
 8009938:	438a      	bics	r2, r1
 800993a:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800993c:	23a0      	movs	r3, #160	@ 0xa0
 800993e:	05db      	lsls	r3, r3, #23
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	23a0      	movs	r3, #160	@ 0xa0
 8009944:	05db      	lsls	r3, r3, #23
 8009946:	21fc      	movs	r1, #252	@ 0xfc
 8009948:	0209      	lsls	r1, r1, #8
 800994a:	430a      	orrs	r2, r1
 800994c:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800994e:	23a0      	movs	r3, #160	@ 0xa0
 8009950:	05db      	lsls	r3, r3, #23
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	23a0      	movs	r3, #160	@ 0xa0
 8009956:	05db      	lsls	r3, r3, #23
 8009958:	4983      	ldr	r1, [pc, #524]	@ (8009b68 <MX_ADC1_Init+0x288>)
 800995a:	400a      	ands	r2, r1
 800995c:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 800995e:	4b83      	ldr	r3, [pc, #524]	@ (8009b6c <MX_ADC1_Init+0x28c>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b82      	ldr	r3, [pc, #520]	@ (8009b6c <MX_ADC1_Init+0x28c>)
 8009964:	210c      	movs	r1, #12
 8009966:	430a      	orrs	r2, r1
 8009968:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 800996a:	4b80      	ldr	r3, [pc, #512]	@ (8009b6c <MX_ADC1_Init+0x28c>)
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	4b7f      	ldr	r3, [pc, #508]	@ (8009b6c <MX_ADC1_Init+0x28c>)
 8009970:	210c      	movs	r1, #12
 8009972:	438a      	bics	r2, r1
 8009974:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 8009976:	4b78      	ldr	r3, [pc, #480]	@ (8009b58 <MX_ADC1_Init+0x278>)
 8009978:	22c0      	movs	r2, #192	@ 0xc0
 800997a:	0612      	lsls	r2, r2, #24
 800997c:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 800997e:	4b76      	ldr	r3, [pc, #472]	@ (8009b58 <MX_ADC1_Init+0x278>)
 8009980:	2208      	movs	r2, #8
 8009982:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8009984:	4b74      	ldr	r3, [pc, #464]	@ (8009b58 <MX_ADC1_Init+0x278>)
 8009986:	2280      	movs	r2, #128	@ 0x80
 8009988:	0552      	lsls	r2, r2, #21
 800998a:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 800998c:	4b72      	ldr	r3, [pc, #456]	@ (8009b58 <MX_ADC1_Init+0x278>)
 800998e:	4a78      	ldr	r2, [pc, #480]	@ (8009b70 <MX_ADC1_Init+0x290>)
 8009990:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009992:	231c      	movs	r3, #28
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	0018      	movs	r0, r3
 8009998:	230c      	movs	r3, #12
 800999a:	001a      	movs	r2, r3
 800999c:	2100      	movs	r1, #0
 800999e:	f011 fabd 	bl	801af1c <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80099a2:	1d3b      	adds	r3, r7, #4
 80099a4:	0018      	movs	r0, r3
 80099a6:	2318      	movs	r3, #24
 80099a8:	001a      	movs	r2, r3
 80099aa:	2100      	movs	r1, #0
 80099ac:	f011 fab6 	bl	801af1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80099b0:	4b70      	ldr	r3, [pc, #448]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099b2:	4a69      	ldr	r2, [pc, #420]	@ (8009b58 <MX_ADC1_Init+0x278>)
 80099b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80099b6:	4b6f      	ldr	r3, [pc, #444]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099b8:	22c0      	movs	r2, #192	@ 0xc0
 80099ba:	0612      	lsls	r2, r2, #24
 80099bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80099be:	4b6d      	ldr	r3, [pc, #436]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099c0:	2208      	movs	r2, #8
 80099c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80099c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80099ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099cc:	2280      	movs	r2, #128	@ 0x80
 80099ce:	0612      	lsls	r2, r2, #24
 80099d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80099d2:	4b68      	ldr	r3, [pc, #416]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099d4:	2204      	movs	r2, #4
 80099d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80099d8:	4b66      	ldr	r3, [pc, #408]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099da:	2200      	movs	r2, #0
 80099dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80099de:	4b65      	ldr	r3, [pc, #404]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80099e4:	4b63      	ldr	r3, [pc, #396]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80099ea:	4b62      	ldr	r3, [pc, #392]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80099f0:	4b60      	ldr	r3, [pc, #384]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099f2:	2220      	movs	r2, #32
 80099f4:	2100      	movs	r1, #0
 80099f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80099f8:	4b5e      	ldr	r3, [pc, #376]	@ (8009b74 <MX_ADC1_Init+0x294>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80099fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009a04:	4b5b      	ldr	r3, [pc, #364]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a06:	222c      	movs	r2, #44	@ 0x2c
 8009a08:	2100      	movs	r1, #0
 8009a0a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009a0c:	4b59      	ldr	r3, [pc, #356]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009a12:	4b58      	ldr	r3, [pc, #352]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009a18:	4b56      	ldr	r3, [pc, #344]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a1a:	223c      	movs	r2, #60	@ 0x3c
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8009a20:	4b54      	ldr	r3, [pc, #336]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a22:	2280      	movs	r2, #128	@ 0x80
 8009a24:	0592      	lsls	r2, r2, #22
 8009a26:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009a28:	4b52      	ldr	r3, [pc, #328]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f007 feb2 	bl	8011794 <HAL_ADC_Init>
 8009a30:	1e03      	subs	r3, r0, #0
 8009a32:	d001      	beq.n	8009a38 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8009a34:	f000 fbe6 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009a38:	211c      	movs	r1, #28
 8009a3a:	187b      	adds	r3, r7, r1
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009a40:	187b      	adds	r3, r7, r1
 8009a42:	2201      	movs	r2, #1
 8009a44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a46:	187a      	adds	r2, r7, r1
 8009a48:	4b4a      	ldr	r3, [pc, #296]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a4a:	0011      	movs	r1, r2
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f008 f849 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009a52:	1e03      	subs	r3, r0, #0
 8009a54:	d001      	beq.n	8009a5a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8009a56:	f000 fbd5 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009a5a:	211c      	movs	r1, #28
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	4a46      	ldr	r2, [pc, #280]	@ (8009b78 <MX_ADC1_Init+0x298>)
 8009a60:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a62:	187a      	adds	r2, r7, r1
 8009a64:	4b43      	ldr	r3, [pc, #268]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a66:	0011      	movs	r1, r2
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f008 f83b 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009a6e:	1e03      	subs	r3, r0, #0
 8009a70:	d001      	beq.n	8009a76 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8009a72:	f000 fbc7 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009a76:	211c      	movs	r1, #28
 8009a78:	187b      	adds	r3, r7, r1
 8009a7a:	4a40      	ldr	r2, [pc, #256]	@ (8009b7c <MX_ADC1_Init+0x29c>)
 8009a7c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a7e:	187a      	adds	r2, r7, r1
 8009a80:	4b3c      	ldr	r3, [pc, #240]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a82:	0011      	movs	r1, r2
 8009a84:	0018      	movs	r0, r3
 8009a86:	f008 f82d 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009a8a:	1e03      	subs	r3, r0, #0
 8009a8c:	d001      	beq.n	8009a92 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8009a8e:	f000 fbb9 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009a92:	211c      	movs	r1, #28
 8009a94:	187b      	adds	r3, r7, r1
 8009a96:	4a3a      	ldr	r2, [pc, #232]	@ (8009b80 <MX_ADC1_Init+0x2a0>)
 8009a98:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a9a:	187a      	adds	r2, r7, r1
 8009a9c:	4b35      	ldr	r3, [pc, #212]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009a9e:	0011      	movs	r1, r2
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f008 f81f 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009aa6:	1e03      	subs	r3, r0, #0
 8009aa8:	d001      	beq.n	8009aae <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8009aaa:	f000 fbab 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009aae:	211c      	movs	r1, #28
 8009ab0:	187b      	adds	r3, r7, r1
 8009ab2:	4a34      	ldr	r2, [pc, #208]	@ (8009b84 <MX_ADC1_Init+0x2a4>)
 8009ab4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ab6:	187a      	adds	r2, r7, r1
 8009ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009aba:	0011      	movs	r1, r2
 8009abc:	0018      	movs	r0, r3
 8009abe:	f008 f811 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009ac2:	1e03      	subs	r3, r0, #0
 8009ac4:	d001      	beq.n	8009aca <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8009ac6:	f000 fb9d 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009aca:	211c      	movs	r1, #28
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	4a2e      	ldr	r2, [pc, #184]	@ (8009b88 <MX_ADC1_Init+0x2a8>)
 8009ad0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ad2:	187a      	adds	r2, r7, r1
 8009ad4:	4b27      	ldr	r3, [pc, #156]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009ad6:	0011      	movs	r1, r2
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f008 f803 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009ade:	1e03      	subs	r3, r0, #0
 8009ae0:	d001      	beq.n	8009ae6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8009ae2:	f000 fb8f 	bl	800a204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8009ae6:	211c      	movs	r1, #28
 8009ae8:	187b      	adds	r3, r7, r1
 8009aea:	4a28      	ldr	r2, [pc, #160]	@ (8009b8c <MX_ADC1_Init+0x2ac>)
 8009aec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009aee:	187a      	adds	r2, r7, r1
 8009af0:	4b20      	ldr	r3, [pc, #128]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009af2:	0011      	movs	r1, r2
 8009af4:	0018      	movs	r0, r3
 8009af6:	f007 fff5 	bl	8011ae4 <HAL_ADC_ConfigChannel>
 8009afa:	1e03      	subs	r3, r0, #0
 8009afc:	d001      	beq.n	8009b02 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8009afe:	f000 fb81 	bl	800a204 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8009b02:	1d3b      	adds	r3, r7, #4
 8009b04:	4a22      	ldr	r2, [pc, #136]	@ (8009b90 <MX_ADC1_Init+0x2b0>)
 8009b06:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009b08:	1d3b      	adds	r3, r7, #4
 8009b0a:	22c0      	movs	r2, #192	@ 0xc0
 8009b0c:	0412      	lsls	r2, r2, #16
 8009b0e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009b10:	1d3a      	adds	r2, r7, #4
 8009b12:	4b18      	ldr	r3, [pc, #96]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009b14:	0011      	movs	r1, r2
 8009b16:	0018      	movs	r0, r3
 8009b18:	f008 f950 	bl	8011dbc <HAL_ADC_AnalogWDGConfig>
 8009b1c:	1e03      	subs	r3, r0, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_ADC1_Init+0x244>
  {
    Error_Handler();
 8009b20:	f000 fb70 	bl	800a204 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8009b24:	1d3b      	adds	r3, r7, #4
 8009b26:	4a1b      	ldr	r2, [pc, #108]	@ (8009b94 <MX_ADC1_Init+0x2b4>)
 8009b28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009b2a:	1d3a      	adds	r2, r7, #4
 8009b2c:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009b2e:	0011      	movs	r1, r2
 8009b30:	0018      	movs	r0, r3
 8009b32:	f008 f943 	bl	8011dbc <HAL_ADC_AnalogWDGConfig>
 8009b36:	1e03      	subs	r3, r0, #0
 8009b38:	d001      	beq.n	8009b3e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8009b3a:	f000 fb63 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	4b0c      	ldr	r3, [pc, #48]	@ (8009b74 <MX_ADC1_Init+0x294>)
 8009b42:	0018      	movs	r0, r3
 8009b44:	f008 fc70 	bl	8012428 <HAL_ADCEx_Calibration_Start>
 8009b48:	1e03      	subs	r3, r0, #0
 8009b4a:	d1f9      	bne.n	8009b40 <MX_ADC1_Init+0x260>

  /* USER CODE END ADC1_Init 2 */

}
 8009b4c:	46c0      	nop			@ (mov r8, r8)
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	46bd      	mov	sp, r7
 8009b52:	b00a      	add	sp, #40	@ 0x28
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	46c0      	nop			@ (mov r8, r8)
 8009b58:	40012400 	.word	0x40012400
 8009b5c:	0fff0000 	.word	0x0fff0000
 8009b60:	40021000 	.word	0x40021000
 8009b64:	50000800 	.word	0x50000800
 8009b68:	ffff03ff 	.word	0xffff03ff
 8009b6c:	50000400 	.word	0x50000400
 8009b70:	00044603 	.word	0x00044603
 8009b74:	200003e4 	.word	0x200003e4
 8009b78:	04000002 	.word	0x04000002
 8009b7c:	24000200 	.word	0x24000200
 8009b80:	28000400 	.word	0x28000400
 8009b84:	38004000 	.word	0x38004000
 8009b88:	3c008000 	.word	0x3c008000
 8009b8c:	48040000 	.word	0x48040000
 8009b90:	0017ffff 	.word	0x0017ffff
 8009b94:	0027ffff 	.word	0x0027ffff

08009b98 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8009b9c:	f009 fab2 	bl	8013104 <HAL_FLASH_Unlock>
 8009ba0:	1e03      	subs	r3, r0, #0
 8009ba2:	d001      	beq.n	8009ba8 <MX_FLASH_Init+0x10>
  {
    Error_Handler();
 8009ba4:	f000 fb2e 	bl	800a204 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8009ba8:	f009 fad0 	bl	801314c <HAL_FLASH_Lock>
 8009bac:	1e03      	subs	r3, r0, #0
 8009bae:	d001      	beq.n	8009bb4 <MX_FLASH_Init+0x1c>
  {
    Error_Handler();
 8009bb0:	f000 fb28 	bl	800a204 <Error_Handler>
  /* USER CODE BEGIN FLASH_Init 2 */


  /* USER CODE END FLASH_Init 2 */

}
 8009bb4:	46c0      	nop			@ (mov r8, r8)
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8009c38 <MX_I2C1_Init+0x7c>)
 8009bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8009c3c <MX_I2C1_Init+0x80>)
 8009bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009bcc:	4b19      	ldr	r3, [pc, #100]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009bd2:	4b18      	ldr	r3, [pc, #96]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009bd8:	4b16      	ldr	r3, [pc, #88]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009bde:	4b15      	ldr	r3, [pc, #84]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009be4:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009bea:	4b12      	ldr	r3, [pc, #72]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009bf0:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	f009 feb3 	bl	8013964 <HAL_I2C_Init>
 8009bfe:	1e03      	subs	r3, r0, #0
 8009c00:	d001      	beq.n	8009c06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009c02:	f000 faff 	bl	800a204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8009c06:	2380      	movs	r3, #128	@ 0x80
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009c0c:	0011      	movs	r1, r2
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f00b fee2 	bl	80159d8 <HAL_I2CEx_ConfigAnalogFilter>
 8009c14:	1e03      	subs	r3, r0, #0
 8009c16:	d001      	beq.n	8009c1c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8009c18:	f000 faf4 	bl	800a204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <MX_I2C1_Init+0x78>)
 8009c1e:	2100      	movs	r1, #0
 8009c20:	0018      	movs	r0, r3
 8009c22:	f00b ff25 	bl	8015a70 <HAL_I2CEx_ConfigDigitalFilter>
 8009c26:	1e03      	subs	r3, r0, #0
 8009c28:	d001      	beq.n	8009c2e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8009c2a:	f000 faeb 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009c2e:	46c0      	nop			@ (mov r8, r8)
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000448 	.word	0x20000448
 8009c38:	40005400 	.word	0x40005400
 8009c3c:	201060ff 	.word	0x201060ff

08009c40 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8009c44:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c46:	4a0e      	ldr	r2, [pc, #56]	@ (8009c80 <MX_IWDG_Init+0x40>)
 8009c48:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c52:	22fa      	movs	r2, #250	@ 0xfa
 8009c54:	0112      	lsls	r2, r2, #4
 8009c56:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8009c58:	4b08      	ldr	r3, [pc, #32]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c5a:	22fa      	movs	r2, #250	@ 0xfa
 8009c5c:	0112      	lsls	r2, r2, #4
 8009c5e:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 8009c60:	4b06      	ldr	r3, [pc, #24]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009c66:	4b05      	ldr	r3, [pc, #20]	@ (8009c7c <MX_IWDG_Init+0x3c>)
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f00b ff4d 	bl	8015b08 <HAL_IWDG_Init>
 8009c6e:	1e03      	subs	r3, r0, #0
 8009c70:	d001      	beq.n	8009c76 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8009c72:	f000 fac7 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8009c76:	46c0      	nop			@ (mov r8, r8)
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	2000055c 	.word	0x2000055c
 8009c80:	40003000 	.word	0x40003000

08009c84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009c8a:	1d3b      	adds	r3, r7, #4
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	2314      	movs	r3, #20
 8009c90:	001a      	movs	r2, r3
 8009c92:	2100      	movs	r1, #0
 8009c94:	f011 f942 	bl	801af1c <memset>
  RTC_DateTypeDef sDate = {0};
 8009c98:	003b      	movs	r3, r7
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009c9e:	4b32      	ldr	r3, [pc, #200]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009ca0:	4a32      	ldr	r2, [pc, #200]	@ (8009d6c <MX_RTC_Init+0xe8>)
 8009ca2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009ca4:	4b30      	ldr	r3, [pc, #192]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009caa:	4b2f      	ldr	r3, [pc, #188]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cac:	227f      	movs	r2, #127	@ 0x7f
 8009cae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cb2:	22ff      	movs	r2, #255	@ 0xff
 8009cb4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009cc2:	4b29      	ldr	r3, [pc, #164]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009cc8:	4b27      	ldr	r3, [pc, #156]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cca:	2280      	movs	r2, #128	@ 0x80
 8009ccc:	05d2      	lsls	r2, r2, #23
 8009cce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009cd0:	4b25      	ldr	r3, [pc, #148]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009cd6:	4b24      	ldr	r3, [pc, #144]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009cdc:	4b22      	ldr	r3, [pc, #136]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f00d fe88 	bl	80179f4 <HAL_RTC_Init>
 8009ce4:	1e03      	subs	r3, r0, #0
 8009ce6:	d001      	beq.n	8009cec <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8009ce8:	f000 fa8c 	bl	800a204 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8009cec:	1d3b      	adds	r3, r7, #4
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8009cf2:	1d3b      	adds	r3, r7, #4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8009cf8:	1d3b      	adds	r3, r7, #4
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009cfe:	1d3b      	adds	r3, r7, #4
 8009d00:	2200      	movs	r2, #0
 8009d02:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	2200      	movs	r2, #0
 8009d08:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009d0a:	1d39      	adds	r1, r7, #4
 8009d0c:	4b16      	ldr	r3, [pc, #88]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	0018      	movs	r0, r3
 8009d12:	f00d ff15 	bl	8017b40 <HAL_RTC_SetTime>
 8009d16:	1e03      	subs	r3, r0, #0
 8009d18:	d001      	beq.n	8009d1e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8009d1a:	f000 fa73 	bl	800a204 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009d1e:	003b      	movs	r3, r7
 8009d20:	2201      	movs	r2, #1
 8009d22:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8009d24:	003b      	movs	r3, r7
 8009d26:	2201      	movs	r2, #1
 8009d28:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8009d2a:	003b      	movs	r3, r7
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8009d30:	003b      	movs	r3, r7
 8009d32:	2200      	movs	r2, #0
 8009d34:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009d36:	0039      	movs	r1, r7
 8009d38:	4b0b      	ldr	r3, [pc, #44]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f00e f823 	bl	8017d88 <HAL_RTC_SetDate>
 8009d42:	1e03      	subs	r3, r0, #0
 8009d44:	d001      	beq.n	8009d4a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8009d46:	f000 fa5d 	bl	800a204 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8009d4a:	2380      	movs	r3, #128	@ 0x80
 8009d4c:	0199      	lsls	r1, r3, #6
 8009d4e:	4806      	ldr	r0, [pc, #24]	@ (8009d68 <MX_RTC_Init+0xe4>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	2200      	movs	r2, #0
 8009d54:	f00e f9a4 	bl	80180a0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009d58:	1e03      	subs	r3, r0, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8009d5c:	f000 fa52 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009d60:	46c0      	nop			@ (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b006      	add	sp, #24
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20000570 	.word	0x20000570
 8009d6c:	40002800 	.word	0x40002800

08009d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	@ 0x38
 8009d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d76:	2328      	movs	r3, #40	@ 0x28
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	001a      	movs	r2, r3
 8009d80:	2100      	movs	r1, #0
 8009d82:	f011 f8cb 	bl	801af1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d86:	231c      	movs	r3, #28
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	230c      	movs	r3, #12
 8009d8e:	001a      	movs	r2, r3
 8009d90:	2100      	movs	r1, #0
 8009d92:	f011 f8c3 	bl	801af1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d96:	003b      	movs	r3, r7
 8009d98:	0018      	movs	r0, r3
 8009d9a:	231c      	movs	r3, #28
 8009d9c:	001a      	movs	r2, r3
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f011 f8bc 	bl	801af1c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009da4:	4b30      	ldr	r3, [pc, #192]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009da6:	4a31      	ldr	r2, [pc, #196]	@ (8009e6c <MX_TIM3_Init+0xfc>)
 8009da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009daa:	4b2f      	ldr	r3, [pc, #188]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009db0:	4b2d      	ldr	r3, [pc, #180]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8009db6:	4b2c      	ldr	r3, [pc, #176]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009db8:	4a2d      	ldr	r2, [pc, #180]	@ (8009e70 <MX_TIM3_Init+0x100>)
 8009dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dc2:	4b29      	ldr	r3, [pc, #164]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009dc8:	4b27      	ldr	r3, [pc, #156]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f00e fa56 	bl	801827c <HAL_TIM_Base_Init>
 8009dd0:	1e03      	subs	r3, r0, #0
 8009dd2:	d001      	beq.n	8009dd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8009dd4:	f000 fa16 	bl	800a204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dd8:	2128      	movs	r1, #40	@ 0x28
 8009dda:	187b      	adds	r3, r7, r1
 8009ddc:	2280      	movs	r2, #128	@ 0x80
 8009dde:	0152      	lsls	r2, r2, #5
 8009de0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009de2:	187a      	adds	r2, r7, r1
 8009de4:	4b20      	ldr	r3, [pc, #128]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009de6:	0011      	movs	r1, r2
 8009de8:	0018      	movs	r0, r3
 8009dea:	f00e fd67 	bl	80188bc <HAL_TIM_ConfigClockSource>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d001      	beq.n	8009df6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8009df2:	f000 fa07 	bl	800a204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009df6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f00e fa97 	bl	801832c <HAL_TIM_PWM_Init>
 8009dfe:	1e03      	subs	r3, r0, #0
 8009e00:	d001      	beq.n	8009e06 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8009e02:	f000 f9ff 	bl	800a204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e06:	211c      	movs	r1, #28
 8009e08:	187b      	adds	r3, r7, r1
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e0e:	187b      	adds	r3, r7, r1
 8009e10:	2200      	movs	r2, #0
 8009e12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009e14:	187a      	adds	r2, r7, r1
 8009e16:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009e18:	0011      	movs	r1, r2
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	f00f fa04 	bl	8019228 <HAL_TIMEx_MasterConfigSynchronization>
 8009e20:	1e03      	subs	r3, r0, #0
 8009e22:	d001      	beq.n	8009e28 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009e24:	f000 f9ee 	bl	800a204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e28:	003b      	movs	r3, r7
 8009e2a:	2260      	movs	r2, #96	@ 0x60
 8009e2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8009e2e:	003b      	movs	r3, r7
 8009e30:	22fa      	movs	r2, #250	@ 0xfa
 8009e32:	00d2      	lsls	r2, r2, #3
 8009e34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e36:	003b      	movs	r3, r7
 8009e38:	2200      	movs	r2, #0
 8009e3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e3c:	003b      	movs	r3, r7
 8009e3e:	2200      	movs	r2, #0
 8009e40:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009e42:	0039      	movs	r1, r7
 8009e44:	4b08      	ldr	r3, [pc, #32]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009e46:	2204      	movs	r2, #4
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f00e fc37 	bl	80186bc <HAL_TIM_PWM_ConfigChannel>
 8009e4e:	1e03      	subs	r3, r0, #0
 8009e50:	d001      	beq.n	8009e56 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8009e52:	f000 f9d7 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009e56:	4b04      	ldr	r3, [pc, #16]	@ (8009e68 <MX_TIM3_Init+0xf8>)
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f001 fed1 	bl	800bc00 <HAL_TIM_MspPostInit>

}
 8009e5e:	46c0      	nop			@ (mov r8, r8)
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b00e      	add	sp, #56	@ 0x38
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	46c0      	nop			@ (mov r8, r8)
 8009e68:	200005a0 	.word	0x200005a0
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	00002ee0 	.word	0x00002ee0

08009e74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e7a:	1d3b      	adds	r3, r7, #4
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	230c      	movs	r3, #12
 8009e80:	001a      	movs	r2, r3
 8009e82:	2100      	movs	r1, #0
 8009e84:	f011 f84a 	bl	801af1c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009e88:	4b18      	ldr	r3, [pc, #96]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009e8a:	4a19      	ldr	r2, [pc, #100]	@ (8009ef0 <MX_TIM6_Init+0x7c>)
 8009e8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8009e8e:	4b17      	ldr	r3, [pc, #92]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009e90:	221f      	movs	r2, #31
 8009e92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e94:	4b15      	ldr	r3, [pc, #84]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 375;
 8009e9a:	4b14      	ldr	r3, [pc, #80]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009e9c:	2278      	movs	r2, #120	@ 0x78
 8009e9e:	32ff      	adds	r2, #255	@ 0xff
 8009ea0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ea2:	4b12      	ldr	r3, [pc, #72]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f00e f9e6 	bl	801827c <HAL_TIM_Base_Init>
 8009eb0:	1e03      	subs	r3, r0, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8009eb4:	f000 f9a6 	bl	800a204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ebe:	1d3b      	adds	r3, r7, #4
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009ec4:	1d3a      	adds	r2, r7, #4
 8009ec6:	4b09      	ldr	r3, [pc, #36]	@ (8009eec <MX_TIM6_Init+0x78>)
 8009ec8:	0011      	movs	r1, r2
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f00f f9ac 	bl	8019228 <HAL_TIMEx_MasterConfigSynchronization>
 8009ed0:	1e03      	subs	r3, r0, #0
 8009ed2:	d001      	beq.n	8009ed8 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8009ed4:	f000 f996 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 8009ed8:	4b05      	ldr	r3, [pc, #20]	@ (8009ef0 <MX_TIM6_Init+0x7c>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	4b04      	ldr	r3, [pc, #16]	@ (8009ef0 <MX_TIM6_Init+0x7c>)
 8009ede:	2101      	movs	r1, #1
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 8009ee4:	46c0      	nop			@ (mov r8, r8)
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	b004      	add	sp, #16
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	200005ec 	.word	0x200005ec
 8009ef0:	40001000 	.word	0x40001000

08009ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009ef8:	4b23      	ldr	r3, [pc, #140]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009efa:	4a24      	ldr	r2, [pc, #144]	@ (8009f8c <MX_USART2_UART_Init+0x98>)
 8009efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009efe:	4b22      	ldr	r3, [pc, #136]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f00:	22e1      	movs	r2, #225	@ 0xe1
 8009f02:	0252      	lsls	r2, r2, #9
 8009f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f06:	4b20      	ldr	r3, [pc, #128]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f12:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f1a:	220c      	movs	r2, #12
 8009f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f24:	4b18      	ldr	r3, [pc, #96]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f2a:	4b17      	ldr	r3, [pc, #92]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009f30:	4b15      	ldr	r3, [pc, #84]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f36:	4b14      	ldr	r3, [pc, #80]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009f3c:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f00f f9e0 	bl	8019304 <HAL_UART_Init>
 8009f44:	1e03      	subs	r3, r0, #0
 8009f46:	d001      	beq.n	8009f4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009f48:	f000 f95c 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f4e:	2100      	movs	r1, #0
 8009f50:	0018      	movs	r0, r3
 8009f52:	f010 fe2f 	bl	801abb4 <HAL_UARTEx_SetTxFifoThreshold>
 8009f56:	1e03      	subs	r3, r0, #0
 8009f58:	d001      	beq.n	8009f5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009f5a:	f000 f953 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f60:	2100      	movs	r1, #0
 8009f62:	0018      	movs	r0, r3
 8009f64:	f010 fe66 	bl	801ac34 <HAL_UARTEx_SetRxFifoThreshold>
 8009f68:	1e03      	subs	r3, r0, #0
 8009f6a:	d001      	beq.n	8009f70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009f6c:	f000 f94a 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009f70:	4b05      	ldr	r3, [pc, #20]	@ (8009f88 <MX_USART2_UART_Init+0x94>)
 8009f72:	0018      	movs	r0, r3
 8009f74:	f010 fde4 	bl	801ab40 <HAL_UARTEx_DisableFifoMode>
 8009f78:	1e03      	subs	r3, r0, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009f7c:	f000 f942 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f80:	46c0      	nop			@ (mov r8, r8)
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	46c0      	nop			@ (mov r8, r8)
 8009f88:	20000638 	.word	0x20000638
 8009f8c:	40004400 	.word	0x40004400

08009f90 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009f94:	4b24      	ldr	r3, [pc, #144]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009f96:	4a25      	ldr	r2, [pc, #148]	@ (800a02c <MX_USART4_UART_Init+0x9c>)
 8009f98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8009f9a:	4b23      	ldr	r3, [pc, #140]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009f9c:	2296      	movs	r2, #150	@ 0x96
 8009f9e:	0212      	lsls	r2, r2, #8
 8009fa0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8009fa2:	4b21      	ldr	r3, [pc, #132]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fa4:	2280      	movs	r2, #128	@ 0x80
 8009fa6:	0152      	lsls	r2, r2, #5
 8009fa8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009faa:	4b1f      	ldr	r3, [pc, #124]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fb2:	2280      	movs	r2, #128	@ 0x80
 8009fb4:	00d2      	lsls	r2, r2, #3
 8009fb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fba:	220c      	movs	r2, #12
 8009fbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fc4:	4b18      	ldr	r3, [pc, #96]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fca:	4b17      	ldr	r3, [pc, #92]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009fd0:	4b15      	ldr	r3, [pc, #84]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fd6:	4b14      	ldr	r3, [pc, #80]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009fdc:	4b12      	ldr	r3, [pc, #72]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f00f f990 	bl	8019304 <HAL_UART_Init>
 8009fe4:	1e03      	subs	r3, r0, #0
 8009fe6:	d001      	beq.n	8009fec <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 8009fe8:	f000 f90c 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fec:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 8009fee:	2100      	movs	r1, #0
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	f010 fddf 	bl	801abb4 <HAL_UARTEx_SetTxFifoThreshold>
 8009ff6:	1e03      	subs	r3, r0, #0
 8009ff8:	d001      	beq.n	8009ffe <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 8009ffa:	f000 f903 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 800a000:	2100      	movs	r1, #0
 800a002:	0018      	movs	r0, r3
 800a004:	f010 fe16 	bl	801ac34 <HAL_UARTEx_SetRxFifoThreshold>
 800a008:	1e03      	subs	r3, r0, #0
 800a00a:	d001      	beq.n	800a010 <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 800a00c:	f000 f8fa 	bl	800a204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a010:	4b05      	ldr	r3, [pc, #20]	@ (800a028 <MX_USART4_UART_Init+0x98>)
 800a012:	0018      	movs	r0, r3
 800a014:	f010 fd94 	bl	801ab40 <HAL_UARTEx_DisableFifoMode>
 800a018:	1e03      	subs	r3, r0, #0
 800a01a:	d001      	beq.n	800a020 <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a01c:	f000 f8f2 	bl	800a204 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a020:	46c0      	nop			@ (mov r8, r8)
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	46c0      	nop			@ (mov r8, r8)
 800a028:	200006cc 	.word	0x200006cc
 800a02c:	40004c00 	.word	0x40004c00

0800a030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a036:	4b10      	ldr	r3, [pc, #64]	@ (800a078 <MX_DMA_Init+0x48>)
 800a038:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a03a:	4b0f      	ldr	r3, [pc, #60]	@ (800a078 <MX_DMA_Init+0x48>)
 800a03c:	2101      	movs	r1, #1
 800a03e:	430a      	orrs	r2, r1
 800a040:	649a      	str	r2, [r3, #72]	@ 0x48
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <MX_DMA_Init+0x48>)
 800a044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a046:	2201      	movs	r2, #1
 800a048:	4013      	ands	r3, r2
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	200a      	movs	r0, #10
 800a054:	f008 fbb0 	bl	80127b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a058:	200a      	movs	r0, #10
 800a05a:	f008 fbc2 	bl	80127e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	200b      	movs	r0, #11
 800a064:	f008 fba8 	bl	80127b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a068:	200b      	movs	r0, #11
 800a06a:	f008 fbba 	bl	80127e2 <HAL_NVIC_EnableIRQ>

}
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	46bd      	mov	sp, r7
 800a072:	b002      	add	sp, #8
 800a074:	bd80      	pop	{r7, pc}
 800a076:	46c0      	nop			@ (mov r8, r8)
 800a078:	40021000 	.word	0x40021000

0800a07c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b089      	sub	sp, #36	@ 0x24
 800a080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a082:	240c      	movs	r4, #12
 800a084:	193b      	adds	r3, r7, r4
 800a086:	0018      	movs	r0, r3
 800a088:	2314      	movs	r3, #20
 800a08a:	001a      	movs	r2, r3
 800a08c:	2100      	movs	r1, #0
 800a08e:	f010 ff45 	bl	801af1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a092:	4b56      	ldr	r3, [pc, #344]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a096:	4b55      	ldr	r3, [pc, #340]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a098:	2104      	movs	r1, #4
 800a09a:	430a      	orrs	r2, r1
 800a09c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a09e:	4b53      	ldr	r3, [pc, #332]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	60bb      	str	r3, [r7, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0aa:	4b50      	ldr	r3, [pc, #320]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a0b6:	4b4d      	ldr	r3, [pc, #308]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4013      	ands	r3, r2
 800a0be:	607b      	str	r3, [r7, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0c2:	4b4a      	ldr	r3, [pc, #296]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0c6:	4b49      	ldr	r3, [pc, #292]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a0ce:	4b47      	ldr	r3, [pc, #284]	@ (800a1ec <MX_GPIO_Init+0x170>)
 800a0d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a0da:	4945      	ldr	r1, [pc, #276]	@ (800a1f0 <MX_GPIO_Init+0x174>)
 800a0dc:	4b45      	ldr	r3, [pc, #276]	@ (800a1f4 <MX_GPIO_Init+0x178>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f009 fbc8 	bl	8013876 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a0e6:	4944      	ldr	r1, [pc, #272]	@ (800a1f8 <MX_GPIO_Init+0x17c>)
 800a0e8:	4b44      	ldr	r3, [pc, #272]	@ (800a1fc <MX_GPIO_Init+0x180>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f009 fbc2 	bl	8013876 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800a0f2:	23f0      	movs	r3, #240	@ 0xf0
 800a0f4:	0119      	lsls	r1, r3, #4
 800a0f6:	23a0      	movs	r3, #160	@ 0xa0
 800a0f8:	05db      	lsls	r3, r3, #23
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f009 fbba 	bl	8013876 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a102:	193b      	adds	r3, r7, r4
 800a104:	4a3a      	ldr	r2, [pc, #232]	@ (800a1f0 <MX_GPIO_Init+0x174>)
 800a106:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a108:	193b      	adds	r3, r7, r4
 800a10a:	2201      	movs	r2, #1
 800a10c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10e:	193b      	adds	r3, r7, r4
 800a110:	2200      	movs	r2, #0
 800a112:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a114:	193b      	adds	r3, r7, r4
 800a116:	2200      	movs	r2, #0
 800a118:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a11a:	193b      	adds	r3, r7, r4
 800a11c:	4a35      	ldr	r2, [pc, #212]	@ (800a1f4 <MX_GPIO_Init+0x178>)
 800a11e:	0019      	movs	r1, r3
 800a120:	0010      	movs	r0, r2
 800a122:	f009 f937 	bl	8013394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a126:	193b      	adds	r3, r7, r4
 800a128:	4a33      	ldr	r2, [pc, #204]	@ (800a1f8 <MX_GPIO_Init+0x17c>)
 800a12a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a12c:	193b      	adds	r3, r7, r4
 800a12e:	2201      	movs	r2, #1
 800a130:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a132:	193b      	adds	r3, r7, r4
 800a134:	2200      	movs	r2, #0
 800a136:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a138:	193b      	adds	r3, r7, r4
 800a13a:	2200      	movs	r2, #0
 800a13c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a13e:	193b      	adds	r3, r7, r4
 800a140:	4a2e      	ldr	r2, [pc, #184]	@ (800a1fc <MX_GPIO_Init+0x180>)
 800a142:	0019      	movs	r1, r3
 800a144:	0010      	movs	r0, r2
 800a146:	f009 f925 	bl	8013394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a14a:	193b      	adds	r3, r7, r4
 800a14c:	4a2c      	ldr	r2, [pc, #176]	@ (800a200 <MX_GPIO_Init+0x184>)
 800a14e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a150:	193b      	adds	r3, r7, r4
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a156:	193b      	adds	r3, r7, r4
 800a158:	2200      	movs	r2, #0
 800a15a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a15c:	193b      	adds	r3, r7, r4
 800a15e:	4a27      	ldr	r2, [pc, #156]	@ (800a1fc <MX_GPIO_Init+0x180>)
 800a160:	0019      	movs	r1, r3
 800a162:	0010      	movs	r0, r2
 800a164:	f009 f916 	bl	8013394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a168:	0021      	movs	r1, r4
 800a16a:	187b      	adds	r3, r7, r1
 800a16c:	22f0      	movs	r2, #240	@ 0xf0
 800a16e:	0112      	lsls	r2, r2, #4
 800a170:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a172:	000c      	movs	r4, r1
 800a174:	193b      	adds	r3, r7, r4
 800a176:	2201      	movs	r2, #1
 800a178:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a17a:	193b      	adds	r3, r7, r4
 800a17c:	2200      	movs	r2, #0
 800a17e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a180:	193b      	adds	r3, r7, r4
 800a182:	2200      	movs	r2, #0
 800a184:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a186:	193a      	adds	r2, r7, r4
 800a188:	23a0      	movs	r3, #160	@ 0xa0
 800a18a:	05db      	lsls	r3, r3, #23
 800a18c:	0011      	movs	r1, r2
 800a18e:	0018      	movs	r0, r3
 800a190:	f009 f900 	bl	8013394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a194:	0021      	movs	r1, r4
 800a196:	187b      	adds	r3, r7, r1
 800a198:	2280      	movs	r2, #128	@ 0x80
 800a19a:	0212      	lsls	r2, r2, #8
 800a19c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a19e:	187b      	adds	r3, r7, r1
 800a1a0:	2288      	movs	r2, #136	@ 0x88
 800a1a2:	0352      	lsls	r2, r2, #13
 800a1a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a6:	187b      	adds	r3, r7, r1
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1ac:	187a      	adds	r2, r7, r1
 800a1ae:	23a0      	movs	r3, #160	@ 0xa0
 800a1b0:	05db      	lsls	r3, r3, #23
 800a1b2:	0011      	movs	r1, r2
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f009 f8ed 	bl	8013394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	2007      	movs	r0, #7
 800a1c0:	f008 fafa 	bl	80127b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a1c4:	2007      	movs	r0, #7
 800a1c6:	f008 fb0c 	bl	80127e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <MX_GPIO_Init+0x180>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2108      	movs	r1, #8
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	f009 fb50 	bl	8013876 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800a1d6:	2380      	movs	r3, #128	@ 0x80
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	4a06      	ldr	r2, [pc, #24]	@ (800a1f4 <MX_GPIO_Init+0x178>)
 800a1dc:	0019      	movs	r1, r3
 800a1de:	0010      	movs	r0, r2
 800a1e0:	f009 fb66 	bl	80138b0 <HAL_GPIO_TogglePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800a1e4:	46c0      	nop			@ (mov r8, r8)
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	b009      	add	sp, #36	@ 0x24
 800a1ea:	bd90      	pop	{r4, r7, pc}
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	0000074c 	.word	0x0000074c
 800a1f4:	50000800 	.word	0x50000800
 800a1f8:	0000142c 	.word	0x0000142c
 800a1fc:	50000400 	.word	0x50000400
 800a200:	00004810 	.word	0x00004810

0800a204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a208:	b672      	cpsid	i
}
 800a20a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a20c:	46c0      	nop			@ (mov r8, r8)
 800a20e:	e7fd      	b.n	800a20c <Error_Handler+0x8>

0800a210 <muestreo>:
#include "commonMainAsm.h"
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

//*************************************************************************************************
void muestreo(void){
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST

		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a216:	4bb7      	ldr	r3, [pc, #732]	@ (800a4f4 <muestreo+0x2e4>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	3301      	adds	r3, #1
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	4bb5      	ldr	r3, [pc, #724]	@ (800a4f4 <muestreo+0x2e4>)
 800a220:	701a      	strb	r2, [r3, #0]
	    if(cnt_veces_muestreo <= 200){ //cp  A,#200
 800a222:	4bb4      	ldr	r3, [pc, #720]	@ (800a4f4 <muestreo+0x2e4>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2bc8      	cmp	r3, #200	@ 0xc8
 800a228:	d909      	bls.n	800a23e <muestreo+0x2e>
	       	goto detecta_flanco;//jrule detecta_flanco
	    }

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a22a:	4bb2      	ldr	r3, [pc, #712]	@ (800a4f4 <muestreo+0x2e4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a230:	4bb1      	ldr	r3, [pc, #708]	@ (800a4f8 <muestreo+0x2e8>)
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a236:	4bb1      	ldr	r3, [pc, #708]	@ (800a4fc <muestreo+0x2ec>)
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]
	    /*
	     * PRUEBAS DEBUGGER, Eliminar cuando sea necesario CGM 12/03/2025
	     *
	     */
	    goto fin_voltrms;
 800a23c:	e156      	b.n	800a4ec <muestreo+0x2dc>
	       	goto detecta_flanco;//jrule detecta_flanco
 800a23e:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800a240:	4baf      	ldr	r3, [pc, #700]	@ (800a500 <muestreo+0x2f0>)
 800a242:	2200      	movs	r2, #0
 800a244:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800a246:	4bae      	ldr	r3, [pc, #696]	@ (800a500 <muestreo+0x2f0>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <muestreo+0x46>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800a24e:	4bac      	ldr	r3, [pc, #688]	@ (800a500 <muestreo+0x2f0>)
 800a250:	2200      	movs	r2, #0
 800a252:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800a254:	e003      	b.n	800a25e <muestreo+0x4e>
			goto alto;
 800a256:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800a258:	4ba9      	ldr	r3, [pc, #676]	@ (800a500 <muestreo+0x2f0>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		adcram = HAL_ADC_GetValue(&hadc); // get the adc value
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
 800a25e:	4ba9      	ldr	r3, [pc, #676]	@ (800a504 <muestreo+0x2f4>)
 800a260:	2220      	movs	r2, #32
 800a262:	629a      	str	r2, [r3, #40]	@ 0x28
		//capturaAD();
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800a264:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800a266:	4ba8      	ldr	r3, [pc, #672]	@ (800a508 <muestreo+0x2f8>)
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	2b22      	cmp	r3, #34	@ 0x22
 800a26c:	d803      	bhi.n	800a276 <muestreo+0x66>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800a26e:	4ba4      	ldr	r3, [pc, #656]	@ (800a500 <muestreo+0x2f0>)
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800a274:	e003      	b.n	800a27e <muestreo+0x6e>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800a276:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800a278:	4ba1      	ldr	r3, [pc, #644]	@ (800a500 <muestreo+0x2f0>)
 800a27a:	2201      	movs	r2, #1
 800a27c:	701a      	strb	r2, [r3, #0]


determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800a27e:	4ba0      	ldr	r3, [pc, #640]	@ (800a500 <muestreo+0x2f0>)
 800a280:	781a      	ldrb	r2, [r3, #0]
 800a282:	4b9f      	ldr	r3, [pc, #636]	@ (800a500 <muestreo+0x2f0>)
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	4313      	orrs	r3, r2
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2201      	movs	r2, #1
 800a28c:	4053      	eors	r3, r2
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <muestreo+0x94>
			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800a294:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800a296:	4b9a      	ldr	r3, [pc, #616]	@ (800a500 <muestreo+0x2f0>)
 800a298:	2201      	movs	r2, #1
 800a29a:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800a29c:	4b96      	ldr	r3, [pc, #600]	@ (800a4f8 <muestreo+0x2e8>)
 800a29e:	2201      	movs	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e000      	b.n	800a2a6 <muestreo+0x96>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800a2a4:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800a2a6:	4b96      	ldr	r3, [pc, #600]	@ (800a500 <muestreo+0x2f0>)
 800a2a8:	789b      	ldrb	r3, [r3, #2]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d105      	bne.n	800a2ba <muestreo+0xaa>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800a2ae:	4b97      	ldr	r3, [pc, #604]	@ (800a50c <muestreo+0x2fc>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d000      	beq.n	800a2b8 <muestreo+0xa8>
 800a2b6:	e118      	b.n	800a4ea <muestreo+0x2da>
			goto muestrea; //jreq  muestrea
 800a2b8:	e009      	b.n	800a2ce <muestreo+0xbe>
			goto pregunta_edo_muestreo;
 800a2ba:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800a2bc:	4b94      	ldr	r3, [pc, #592]	@ (800a510 <muestreo+0x300>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d000      	beq.n	800a2c6 <muestreo+0xb6>
 800a2c4:	e106      	b.n	800a4d4 <muestreo+0x2c4>
			goto no_error_muestreo;//jreq no_error_muestreo
 800a2c6:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800a2c8:	4b90      	ldr	r3, [pc, #576]	@ (800a50c <muestreo+0x2fc>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800a2ce:	4b90      	ldr	r3, [pc, #576]	@ (800a510 <muestreo+0x300>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d10a      	bne.n	800a2ec <muestreo+0xdc>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800a2d6:	4b8e      	ldr	r3, [pc, #568]	@ (800a510 <muestreo+0x300>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800a2dc:	4b8b      	ldr	r3, [pc, #556]	@ (800a50c <muestreo+0x2fc>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800a2e2:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800a2e4:	4b8b      	ldr	r3, [pc, #556]	@ (800a514 <muestreo+0x304>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	e01f      	b.n	800a32c <muestreo+0x11c>
			goto adq_muesn; //jrne    adq_muesn
 800a2ec:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
 800a2ee:	4b85      	ldr	r3, [pc, #532]	@ (800a504 <muestreo+0x2f4>)
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	629a      	str	r2, [r3, #40]	@ 0x28
		asm ("nop");
 800a2f4:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800a2f6:	4b84      	ldr	r3, [pc, #528]	@ (800a508 <muestreo+0x2f8>)
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	085b      	lsrs	r3, r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	4b82      	ldr	r3, [pc, #520]	@ (800a508 <muestreo+0x2f8>)
 800a300:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800a302:	4b81      	ldr	r3, [pc, #516]	@ (800a508 <muestreo+0x2f8>)
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4b7f      	ldr	r3, [pc, #508]	@ (800a508 <muestreo+0x2f8>)
 800a30c:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800a30e:	4b7e      	ldr	r3, [pc, #504]	@ (800a508 <muestreo+0x2f8>)
 800a310:	8819      	ldrh	r1, [r3, #0]
 800a312:	4b7f      	ldr	r3, [pc, #508]	@ (800a510 <muestreo+0x300>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	001a      	movs	r2, r3
 800a318:	b2c9      	uxtb	r1, r1
 800a31a:	4b7f      	ldr	r3, [pc, #508]	@ (800a518 <muestreo+0x308>)
 800a31c:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800a31e:	4b7c      	ldr	r3, [pc, #496]	@ (800a510 <muestreo+0x300>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	b2da      	uxtb	r2, r3
 800a326:	4b7a      	ldr	r3, [pc, #488]	@ (800a510 <muestreo+0x300>)
 800a328:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800a32a:	e0df      	b.n	800a4ec <muestreo+0x2dc>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800a32c:	4b78      	ldr	r3, [pc, #480]	@ (800a510 <muestreo+0x300>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	001a      	movs	r2, r3
 800a332:	4b79      	ldr	r3, [pc, #484]	@ (800a518 <muestreo+0x308>)
 800a334:	5c9a      	ldrb	r2, [r3, r2]
 800a336:	4b79      	ldr	r3, [pc, #484]	@ (800a51c <muestreo+0x30c>)
 800a338:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800a33a:	1dbb      	adds	r3, r7, #6
 800a33c:	2200      	movs	r2, #0
 800a33e:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * findLastValue((uint32_t)&eevolt_mul));
 800a340:	4b76      	ldr	r3, [pc, #472]	@ (800a51c <muestreo+0x30c>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	001c      	movs	r4, r3
 800a346:	4b76      	ldr	r3, [pc, #472]	@ (800a520 <muestreo+0x310>)
 800a348:	0018      	movs	r0, r3
 800a34a:	f7f8 fc67 	bl	8002c1c <findLastValue>
 800a34e:	0003      	movs	r3, r0
 800a350:	b29a      	uxth	r2, r3
 800a352:	1dbb      	adds	r3, r7, #6
 800a354:	4362      	muls	r2, r4
 800a356:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / findLastValue((uint32_t)&eevolt_div);
 800a358:	1dbb      	adds	r3, r7, #6
 800a35a:	881c      	ldrh	r4, [r3, #0]
 800a35c:	4b71      	ldr	r3, [pc, #452]	@ (800a524 <muestreo+0x314>)
 800a35e:	0018      	movs	r0, r3
 800a360:	f7f8 fc5c 	bl	8002c1c <findLastValue>
 800a364:	0003      	movs	r3, r0
 800a366:	0019      	movs	r1, r3
 800a368:	0020      	movs	r0, r4
 800a36a:	f7f5 fed5 	bl	8000118 <__udivsi3>
 800a36e:	0003      	movs	r3, r0
 800a370:	001a      	movs	r2, r3
 800a372:	1dbb      	adds	r3, r7, #6
 800a374:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800a376:	1dbb      	adds	r3, r7, #6
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	1dba      	adds	r2, r7, #6
 800a37c:	8812      	ldrh	r2, [r2, #0]
 800a37e:	4353      	muls	r3, r2
 800a380:	001a      	movs	r2, r3
 800a382:	4b69      	ldr	r3, [pc, #420]	@ (800a528 <muestreo+0x318>)
 800a384:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800a386:	4b63      	ldr	r3, [pc, #396]	@ (800a514 <muestreo+0x304>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	4b67      	ldr	r3, [pc, #412]	@ (800a528 <muestreo+0x318>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	18d2      	adds	r2, r2, r3
 800a390:	4b60      	ldr	r3, [pc, #384]	@ (800a514 <muestreo+0x304>)
 800a392:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800a394:	4b5e      	ldr	r3, [pc, #376]	@ (800a510 <muestreo+0x300>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	4b5c      	ldr	r3, [pc, #368]	@ (800a510 <muestreo+0x300>)
 800a39e:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800a3a0:	4b5b      	ldr	r3, [pc, #364]	@ (800a510 <muestreo+0x300>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b1f      	cmp	r3, #31
 800a3a6:	d800      	bhi.n	800a3aa <muestreo+0x19a>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800a3a8:	e7c0      	b.n	800a32c <muestreo+0x11c>
				goto sumatoria_completa;//jreq sumatoria_completa
 800a3aa:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800a3ac:	4b58      	ldr	r3, [pc, #352]	@ (800a510 <muestreo+0x300>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800a3b2:	4b58      	ldr	r3, [pc, #352]	@ (800a514 <muestreo+0x304>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	095a      	lsrs	r2, r3, #5
 800a3b8:	4b56      	ldr	r3, [pc, #344]	@ (800a514 <muestreo+0x304>)
 800a3ba:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800a3bc:	4b55      	ldr	r3, [pc, #340]	@ (800a514 <muestreo+0x304>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f7f7 ffef 	bl	80023a4 <__aeabi_ui2d>
 800a3c6:	0002      	movs	r2, r0
 800a3c8:	000b      	movs	r3, r1
 800a3ca:	0010      	movs	r0, r2
 800a3cc:	0019      	movs	r1, r3
 800a3ce:	f010 fe63 	bl	801b098 <sqrt>
 800a3d2:	0002      	movs	r2, r0
 800a3d4:	000b      	movs	r3, r1
 800a3d6:	0010      	movs	r0, r2
 800a3d8:	0019      	movs	r1, r3
 800a3da:	f7f6 f88f 	bl	80004fc <__aeabi_d2uiz>
 800a3de:	0003      	movs	r3, r0
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	4b52      	ldr	r3, [pc, #328]	@ (800a52c <muestreo+0x31c>)
 800a3e4:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800a3e6:	4b43      	ldr	r3, [pc, #268]	@ (800a4f4 <muestreo+0x2e4>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800a3ec:	4b43      	ldr	r3, [pc, #268]	@ (800a4fc <muestreo+0x2ec>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800a3f2:	4b42      	ldr	r3, [pc, #264]	@ (800a4fc <muestreo+0x2ec>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800a3f8:	4b40      	ldr	r3, [pc, #256]	@ (800a4fc <muestreo+0x2ec>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	709a      	strb	r2, [r3, #2]
					// SAlto por lo mientras

//;-------------------- Falta programa esta parte ---------------------------------------
calibracion_voltaje:
	        //ld A,eef_voltaje
			asm ("nop");
 800a3fe:	46c0      	nop			@ (mov r8, r8)
			//if(eef_voltaje != 0x3C ){//cp A, #$3c					¿Esta calibrado en voltaje el equipo?
			if(findLastValue((uint32_t)&eef_voltaje)!= 0x3C){
 800a400:	4b4b      	ldr	r3, [pc, #300]	@ (800a530 <muestreo+0x320>)
 800a402:	0018      	movs	r0, r3
 800a404:	f7f8 fc0a 	bl	8002c1c <findLastValue>
 800a408:	0003      	movs	r3, r0
 800a40a:	2b3c      	cmp	r3, #60	@ 0x3c
 800a40c:	d05a      	beq.n	800a4c4 <muestreo+0x2b4>
				goto realiza_cal_volt; //jrne realiza_cal_volt
 800a40e:	46c0      	nop			@ (mov r8, r8)
			goto fin_calibra_voltaje;

realiza_cal_volt:

//;RM_20230908 Mejoras para calibración de voltaje, espera 2 segundos antes de calibrar
			muestras_cal_volt++; //inc     muestras_cal_volt
 800a410:	4b48      	ldr	r3, [pc, #288]	@ (800a534 <muestreo+0x324>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	3301      	adds	r3, #1
 800a416:	b2da      	uxtb	r2, r3
 800a418:	4b46      	ldr	r3, [pc, #280]	@ (800a534 <muestreo+0x324>)
 800a41a:	701a      	strb	r2, [r3, #0]
			if(muestras_cal_volt >= 60){//cp  A,#60
 800a41c:	4b45      	ldr	r3, [pc, #276]	@ (800a534 <muestreo+0x324>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b3b      	cmp	r3, #59	@ 0x3b
 800a422:	d951      	bls.n	800a4c8 <muestreo+0x2b8>
				goto espera_iguales;//jruge   espera_iguales
 800a424:	46c0      	nop			@ (mov r8, r8)
			}
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje

espera_iguales:

			if(muestras_cal_volt != 60) {//  cp  A,#60
 800a426:	4b43      	ldr	r3, [pc, #268]	@ (800a534 <muestreo+0x324>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b3c      	cmp	r3, #60	@ 0x3c
 800a42c:	d104      	bne.n	800a438 <muestreo+0x228>
				goto segunda_muestra;//	jrne   segunda_muestra
			}
			voltaje_ant_cal = volt_trms;//	mov voltaje_ant_cal,volt_trms
 800a42e:	4b3f      	ldr	r3, [pc, #252]	@ (800a52c <muestreo+0x31c>)
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	4b41      	ldr	r3, [pc, #260]	@ (800a538 <muestreo+0x328>)
 800a434:	701a      	strb	r2, [r3, #0]
			goto fin_calibra_voltaje;//jp  fin_calibra_voltaje
 800a436:	e04c      	b.n	800a4d2 <muestreo+0x2c2>
				goto segunda_muestra;//	jrne   segunda_muestra
 800a438:	46c0      	nop			@ (mov r8, r8)

segunda_muestra:

			if(muestras_cal_volt != 61){//cp      A,#61
 800a43a:	4b3e      	ldr	r3, [pc, #248]	@ (800a534 <muestreo+0x324>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b3d      	cmp	r3, #61	@ 0x3d
 800a440:	d044      	beq.n	800a4cc <muestreo+0x2bc>
				goto tercera_muestra;////jrne    tercera_muestra
 800a442:	46c0      	nop			@ (mov r8, r8)
			}
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje

tercera_muestra:
			//	ld      A,volt_trms
			if(volt_trms == voltaje_ant_cal){//cp  A,voltaje_ant_cal
 800a444:	4b39      	ldr	r3, [pc, #228]	@ (800a52c <muestreo+0x31c>)
 800a446:	781a      	ldrb	r2, [r3, #0]
 800a448:	4b3b      	ldr	r3, [pc, #236]	@ (800a538 <muestreo+0x328>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d13f      	bne.n	800a4d0 <muestreo+0x2c0>
				goto calibracion_valida;//jreq calibracion_valida
 800a450:	46c0      	nop			@ (mov r8, r8)

v_ubajo_cv:
			//ldw Y,#60
			//ldw waux,Y
			//waux = 60;
			if(volt_trms > 60 ){//cpw X,waux -------x =   ;Compara la medición sin factor con el umbral bajo
 800a452:	4b36      	ldr	r3, [pc, #216]	@ (800a52c <muestreo+0x31c>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b3c      	cmp	r3, #60	@ 0x3c
 800a458:	d803      	bhi.n	800a462 <muestreo+0x252>
				goto v_ualto_cv;//jrugt  v_ualto_cv
			}
			goto calibra_reset;//jp   calibra_reset
 800a45a:	46c0      	nop			@ (mov r8, r8)
 800a45c:	e02f      	b.n	800a4be <muestreo+0x2ae>

			//ldw     Y,#80
			//ldw     waux,Y
			//waux = 80;
			if(volt_trms > 80 ){//cpw     X,waux, x  ;Mayor o igual al umbral alto, resistores mal soldados o inadecuados
				goto calibra_reset;//jruge   calibra_reset
 800a45e:	46c0      	nop			@ (mov r8, r8)
 800a460:	e02d      	b.n	800a4be <muestreo+0x2ae>
				goto v_ualto_cv;//jrugt  v_ualto_cv
 800a462:	46c0      	nop			@ (mov r8, r8)
			if(volt_trms > 80 ){//cpw     X,waux, x  ;Mayor o igual al umbral alto, resistores mal soldados o inadecuados
 800a464:	4b31      	ldr	r3, [pc, #196]	@ (800a52c <muestreo+0x31c>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b50      	cmp	r3, #80	@ 0x50
 800a46a:	d8f8      	bhi.n	800a45e <muestreo+0x24e>
			}
			wreg = 100;					//mov  wreg,#100
 800a46c:	4b2b      	ldr	r3, [pc, #172]	@ (800a51c <muestreo+0x30c>)
 800a46e:	2264      	movs	r2, #100	@ 0x64
 800a470:	701a      	strb	r2, [r3, #0]
			waux = volt_trms;			//mov  waux,volt_trms
 800a472:	4b2e      	ldr	r3, [pc, #184]	@ (800a52c <muestreo+0x31c>)
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	4b31      	ldr	r3, [pc, #196]	@ (800a53c <muestreo+0x32c>)
 800a478:	701a      	strb	r2, [r3, #0]
			//ld  A, wreg
			//ldw  X, #eevolt_mul
			// (eevolt_mul) = wreg; //ld (X), A
			//Data = (uint32_t)wreg;											//;Guarda la variable de multiplicación en EEPROM
			//AddressDestination = &eevolt_mul;
			wreeprom(wreg,&eevolt_mul);
 800a47a:	4b28      	ldr	r3, [pc, #160]	@ (800a51c <muestreo+0x30c>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	001a      	movs	r2, r3
 800a480:	4b27      	ldr	r3, [pc, #156]	@ (800a520 <muestreo+0x310>)
 800a482:	0019      	movs	r1, r3
 800a484:	0010      	movs	r0, r2
 800a486:	f7fc fe77 	bl	8007178 <wreeprom>

//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			HAL_IWDG_Refresh( &hiwdg );
 800a48a:	4b2d      	ldr	r3, [pc, #180]	@ (800a540 <muestreo+0x330>)
 800a48c:	0018      	movs	r0, r3
 800a48e:	f00b fbc5 	bl	8015c1c <HAL_IWDG_Refresh>
			//ld  A,waux
			 //ldw  X,#eevolt_div
			 //ld	(X),A
			//Data = (uint32_t)waux;										//;Guarda la variable de división en EEPROM
			//AddressDestination = &eevolt_div;
			wreeprom(waux,&eevolt_div);
 800a492:	4b2a      	ldr	r3, [pc, #168]	@ (800a53c <muestreo+0x32c>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	001a      	movs	r2, r3
 800a498:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <muestreo+0x314>)
 800a49a:	0019      	movs	r1, r3
 800a49c:	0010      	movs	r0, r2
 800a49e:	f7fc fe6b 	bl	8007178 <wreeprom>
//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			HAL_IWDG_Refresh( &hiwdg );
 800a4a2:	4b27      	ldr	r3, [pc, #156]	@ (800a540 <muestreo+0x330>)
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f00b fbb9 	bl	8015c1c <HAL_IWDG_Refresh>
			//ldw X,#eef_voltaje
			//ld (X),A
			//Data = (uint32_t)0x3C;										//;Indica que ya se realizo calibración de voltaje en EEPROM
			//AddressDestination = &eef_voltaje;
//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			wreeprom(0x3C,&eef_voltaje);
 800a4aa:	4b21      	ldr	r3, [pc, #132]	@ (800a530 <muestreo+0x320>)
 800a4ac:	0019      	movs	r1, r3
 800a4ae:	203c      	movs	r0, #60	@ 0x3c
 800a4b0:	f7fc fe62 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800a4b4:	4b22      	ldr	r3, [pc, #136]	@ (800a540 <muestreo+0x330>)
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f00b fbb0 	bl	8015c1c <HAL_IWDG_Refresh>

graba_3: //----------------------------------registro
	        //btjt FLASH_IAPSR,#2,graba_3
	        // mov FLASH_IAPSR,#$00	   ;Bloquea la EEPROM inmediatamente
//			HAL_FLASHEx_DATAEEPROM_Lock();
	        goto fin_calibra_voltaje;//jp fin_calibra_voltaje
 800a4bc:	e009      	b.n	800a4d2 <muestreo+0x2c2>

calibra_reset:
			asm ("nop");
 800a4be:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
 800a4c0:	46c0      	nop			@ (mov r8, r8)
 800a4c2:	e7fc      	b.n	800a4be <muestreo+0x2ae>
			goto fin_calibra_voltaje;
 800a4c4:	46c0      	nop			@ (mov r8, r8)
 800a4c6:	e011      	b.n	800a4ec <muestreo+0x2dc>
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje
 800a4c8:	46c0      	nop			@ (mov r8, r8)
 800a4ca:	e00f      	b.n	800a4ec <muestreo+0x2dc>
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje
 800a4cc:	46c0      	nop			@ (mov r8, r8)
 800a4ce:	e00d      	b.n	800a4ec <muestreo+0x2dc>
			goto fin_calibra_voltaje;// MAN DEBUG
 800a4d0:	46c0      	nop			@ (mov r8, r8)
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800a4d2:	e00b      	b.n	800a4ec <muestreo+0x2dc>
		goto error_muestreo;//jp error_muestreo
 800a4d4:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800a4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a510 <muestreo+0x300>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <muestreo+0x2e4>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <muestreo+0x2fc>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800a4e8:	e000      	b.n	800a4ec <muestreo+0x2dc>
		goto fin_voltrms;//jp fin_voltrms
 800a4ea:	46c0      	nop			@ (mov r8, r8)
}
 800a4ec:	46c0      	nop			@ (mov r8, r8)
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b003      	add	sp, #12
 800a4f2:	bd90      	pop	{r4, r7, pc}
 800a4f4:	20000b54 	.word	0x20000b54
 800a4f8:	20000c6c 	.word	0x20000c6c
 800a4fc:	20000f8c 	.word	0x20000f8c
 800a500:	20000b28 	.word	0x20000b28
 800a504:	40012400 	.word	0x40012400
 800a508:	20000b70 	.word	0x20000b70
 800a50c:	20000b56 	.word	0x20000b56
 800a510:	20000b2b 	.word	0x20000b2b
 800a514:	20000b2c 	.word	0x20000b2c
 800a518:	20000b34 	.word	0x20000b34
 800a51c:	20000b65 	.word	0x20000b65
 800a520:	0803f801 	.word	0x0803f801
 800a524:	0803f800 	.word	0x0803f800
 800a528:	20000b30 	.word	0x20000b30
 800a52c:	20000b55 	.word	0x20000b55
 800a530:	0803f802 	.word	0x0803f802
 800a534:	20000c71 	.word	0x20000c71
 800a538:	20000c72 	.word	0x20000c72
 800a53c:	20000b64 	.word	0x20000b64
 800a540:	2000055c 	.word	0x2000055c

0800a544 <noctar>:


void noctar (void){
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0

	asm ("nop");
 800a548:	46c0      	nop			@ (mov r8, r8)

}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e00c      	b.n	800a576 <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800a55c:	4ad4      	ldr	r2, [pc, #848]	@ (800a8b0 <refrigera+0x360>)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	18d3      	adds	r3, r2, r3
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800a566:	4ad3      	ldr	r2, [pc, #844]	@ (800a8b4 <refrigera+0x364>)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	18d3      	adds	r3, r2, r3
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	3301      	adds	r3, #1
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b07      	cmp	r3, #7
 800a57a:	ddef      	ble.n	800a55c <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800a57c:	4bce      	ldr	r3, [pc, #824]	@ (800a8b8 <refrigera+0x368>)
 800a57e:	2253      	movs	r2, #83	@ 0x53
 800a580:	5c9a      	ldrb	r2, [r3, r2]
 800a582:	4bce      	ldr	r3, [pc, #824]	@ (800a8bc <refrigera+0x36c>)
 800a584:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800a586:	4bcd      	ldr	r3, [pc, #820]	@ (800a8bc <refrigera+0x36c>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	001a      	movs	r2, r3
 800a58c:	2301      	movs	r3, #1
 800a58e:	4013      	ands	r3, r2
 800a590:	d003      	beq.n	800a59a <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800a592:	4bc7      	ldr	r3, [pc, #796]	@ (800a8b0 <refrigera+0x360>)
 800a594:	2201      	movs	r2, #1
 800a596:	70da      	strb	r2, [r3, #3]
 800a598:	e000      	b.n	800a59c <refrigera+0x4c>
					goto refrigera_j00;
 800a59a:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800a59c:	4bc7      	ldr	r3, [pc, #796]	@ (800a8bc <refrigera+0x36c>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	001a      	movs	r2, r3
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800a5a8:	4bc1      	ldr	r3, [pc, #772]	@ (800a8b0 <refrigera+0x360>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	711a      	strb	r2, [r3, #4]
 800a5ae:	e000      	b.n	800a5b2 <refrigera+0x62>
					goto refrigera_j01;
 800a5b0:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800a5b2:	4bc1      	ldr	r3, [pc, #772]	@ (800a8b8 <refrigera+0x368>)
 800a5b4:	2262      	movs	r2, #98	@ 0x62
 800a5b6:	5c9a      	ldrb	r2, [r3, r2]
 800a5b8:	4bc0      	ldr	r3, [pc, #768]	@ (800a8bc <refrigera+0x36c>)
 800a5ba:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800a5bc:	f7fb ff9a 	bl	80064f4 <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800a5c0:	4bbd      	ldr	r3, [pc, #756]	@ (800a8b8 <refrigera+0x368>)
 800a5c2:	2257      	movs	r2, #87	@ 0x57
 800a5c4:	5c9b      	ldrb	r3, [r3, r2]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d11e      	bne.n	800a608 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800a5ca:	4bbb      	ldr	r3, [pc, #748]	@ (800a8b8 <refrigera+0x368>)
 800a5cc:	2243      	movs	r2, #67	@ 0x43
 800a5ce:	5c9b      	ldrb	r3, [r3, r2]
 800a5d0:	3364      	adds	r3, #100	@ 0x64
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	4bba      	ldr	r3, [pc, #744]	@ (800a8c0 <refrigera+0x370>)
 800a5d6:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800a5d8:	4bb9      	ldr	r3, [pc, #740]	@ (800a8c0 <refrigera+0x370>)
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	4bb9      	ldr	r3, [pc, #740]	@ (800a8c4 <refrigera+0x374>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	18d3      	adds	r3, r2, r3
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	4bb8      	ldr	r3, [pc, #736]	@ (800a8c8 <refrigera+0x378>)
 800a5e6:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800a5e8:	4bb3      	ldr	r3, [pc, #716]	@ (800a8b8 <refrigera+0x368>)
 800a5ea:	2244      	movs	r2, #68	@ 0x44
 800a5ec:	5c9b      	ldrb	r3, [r3, r2]
 800a5ee:	3b38      	subs	r3, #56	@ 0x38
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	4bb6      	ldr	r3, [pc, #728]	@ (800a8cc <refrigera+0x37c>)
 800a5f4:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800a5f6:	4bb5      	ldr	r3, [pc, #724]	@ (800a8cc <refrigera+0x37c>)
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	4bb0      	ldr	r3, [pc, #704]	@ (800a8bc <refrigera+0x36c>)
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	b2da      	uxtb	r2, r3
 800a602:	4bb3      	ldr	r3, [pc, #716]	@ (800a8d0 <refrigera+0x380>)
 800a604:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800a606:	e021      	b.n	800a64c <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800a608:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800a60a:	4bab      	ldr	r3, [pc, #684]	@ (800a8b8 <refrigera+0x368>)
 800a60c:	2257      	movs	r2, #87	@ 0x57
 800a60e:	5c9b      	ldrb	r3, [r3, r2]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d11f      	bne.n	800a654 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800a614:	4ba8      	ldr	r3, [pc, #672]	@ (800a8b8 <refrigera+0x368>)
 800a616:	2242      	movs	r2, #66	@ 0x42
 800a618:	5c9a      	ldrb	r2, [r3, r2]
 800a61a:	4ba9      	ldr	r3, [pc, #676]	@ (800a8c0 <refrigera+0x370>)
 800a61c:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800a61e:	4ba8      	ldr	r3, [pc, #672]	@ (800a8c0 <refrigera+0x370>)
 800a620:	781a      	ldrb	r2, [r3, #0]
 800a622:	4ba8      	ldr	r3, [pc, #672]	@ (800a8c4 <refrigera+0x374>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	18d3      	adds	r3, r2, r3
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	4ba7      	ldr	r3, [pc, #668]	@ (800a8c8 <refrigera+0x378>)
 800a62c:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800a62e:	4ba2      	ldr	r3, [pc, #648]	@ (800a8b8 <refrigera+0x368>)
 800a630:	2243      	movs	r2, #67	@ 0x43
 800a632:	5c9b      	ldrb	r3, [r3, r2]
 800a634:	3364      	adds	r3, #100	@ 0x64
 800a636:	b2da      	uxtb	r2, r3
 800a638:	4ba4      	ldr	r3, [pc, #656]	@ (800a8cc <refrigera+0x37c>)
 800a63a:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800a63c:	4ba3      	ldr	r3, [pc, #652]	@ (800a8cc <refrigera+0x37c>)
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	4b9e      	ldr	r3, [pc, #632]	@ (800a8bc <refrigera+0x36c>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	b2da      	uxtb	r2, r3
 800a648:	4ba1      	ldr	r3, [pc, #644]	@ (800a8d0 <refrigera+0x380>)
 800a64a:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800a64c:	4b98      	ldr	r3, [pc, #608]	@ (800a8b0 <refrigera+0x360>)
 800a64e:	2201      	movs	r2, #1
 800a650:	719a      	strb	r2, [r3, #6]
 800a652:	e000      	b.n	800a656 <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800a654:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800a656:	4b97      	ldr	r3, [pc, #604]	@ (800a8b4 <refrigera+0x364>)
 800a658:	2201      	movs	r2, #1
 800a65a:	705a      	strb	r2, [r3, #1]
				if(GetRegFlagState(Plantilla[logicos2],funReleDesh))	// btjt		logicos2,#funReleDesh,deshTypeAct_01
 800a65c:	4b96      	ldr	r3, [pc, #600]	@ (800a8b8 <refrigera+0x368>)
 800a65e:	225b      	movs	r2, #91	@ 0x5b
 800a660:	5c9b      	ldrb	r3, [r3, r2]
 800a662:	001a      	movs	r2, r3
 800a664:	2308      	movs	r3, #8
 800a666:	4013      	ands	r3, r2
 800a668:	d104      	bne.n	800a674 <refrigera+0x124>
					goto deshTypeAct_01;
				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800a66a:	4b93      	ldr	r3, [pc, #588]	@ (800a8b8 <refrigera+0x368>)
 800a66c:	2255      	movs	r2, #85	@ 0x55
 800a66e:	2100      	movs	r1, #0
 800a670:	5499      	strb	r1, [r3, r2]
 800a672:	e000      	b.n	800a676 <refrigera+0x126>
					goto deshTypeAct_01;
 800a674:	46c0      	nop			@ (mov r8, r8)
deshTypeAct_01:
              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800a676:	4b97      	ldr	r3, [pc, #604]	@ (800a8d4 <refrigera+0x384>)
 800a678:	0018      	movs	r0, r3
 800a67a:	f7fb fcf1 	bl	8006060 <TwoByteInArrayToWord>
 800a67e:	0003      	movs	r3, r0
 800a680:	b29a      	uxth	r2, r3
 800a682:	4b95      	ldr	r3, [pc, #596]	@ (800a8d8 <refrigera+0x388>)
 800a684:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800a686:	4b95      	ldr	r3, [pc, #596]	@ (800a8dc <refrigera+0x38c>)
 800a688:	0018      	movs	r0, r3
 800a68a:	f7fb fce9 	bl	8006060 <TwoByteInArrayToWord>
 800a68e:	0003      	movs	r3, r0
 800a690:	b29a      	uxth	r2, r3
 800a692:	4b91      	ldr	r3, [pc, #580]	@ (800a8d8 <refrigera+0x388>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	18d3      	adds	r3, r2, r3
 800a698:	b29a      	uxth	r2, r3
 800a69a:	4b91      	ldr	r3, [pc, #580]	@ (800a8e0 <refrigera+0x390>)
 800a69c:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800a69e:	4b91      	ldr	r3, [pc, #580]	@ (800a8e4 <refrigera+0x394>)
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4053      	eors	r3, r2
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d137      	bne.n	800a71c <refrigera+0x1cc>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800a6ac:	4b8e      	ldr	r3, [pc, #568]	@ (800a8e8 <refrigera+0x398>)
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f7fb fcd6 	bl	8006060 <TwoByteInArrayToWord>
 800a6b4:	0003      	movs	r3, r0
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	4b87      	ldr	r3, [pc, #540]	@ (800a8d8 <refrigera+0x388>)
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	18d3      	adds	r3, r2, r3
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	4b85      	ldr	r3, [pc, #532]	@ (800a8d8 <refrigera+0x388>)
 800a6c2:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800a6c4:	4b88      	ldr	r3, [pc, #544]	@ (800a8e8 <refrigera+0x398>)
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	f7fb fcca 	bl	8006060 <TwoByteInArrayToWord>
 800a6cc:	0003      	movs	r3, r0
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	4b83      	ldr	r3, [pc, #524]	@ (800a8e0 <refrigera+0x390>)
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	18d3      	adds	r3, r2, r3
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	4b81      	ldr	r3, [pc, #516]	@ (800a8e0 <refrigera+0x390>)
 800a6da:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800a6dc:	4b81      	ldr	r3, [pc, #516]	@ (800a8e4 <refrigera+0x394>)
 800a6de:	789b      	ldrb	r3, [r3, #2]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4053      	eors	r3, r2
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d11a      	bne.n	800a720 <refrigera+0x1d0>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800a6ea:	4b80      	ldr	r3, [pc, #512]	@ (800a8ec <refrigera+0x39c>)
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	f7fb fcb7 	bl	8006060 <TwoByteInArrayToWord>
 800a6f2:	0003      	movs	r3, r0
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	4b78      	ldr	r3, [pc, #480]	@ (800a8d8 <refrigera+0x388>)
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	18d3      	adds	r3, r2, r3
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	4b76      	ldr	r3, [pc, #472]	@ (800a8d8 <refrigera+0x388>)
 800a700:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800a702:	4b7a      	ldr	r3, [pc, #488]	@ (800a8ec <refrigera+0x39c>)
 800a704:	0018      	movs	r0, r3
 800a706:	f7fb fcab 	bl	8006060 <TwoByteInArrayToWord>
 800a70a:	0003      	movs	r3, r0
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	4b74      	ldr	r3, [pc, #464]	@ (800a8e0 <refrigera+0x390>)
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	18d3      	adds	r3, r2, r3
 800a714:	b29a      	uxth	r2, r3
 800a716:	4b72      	ldr	r3, [pc, #456]	@ (800a8e0 <refrigera+0x390>)
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	e002      	b.n	800a722 <refrigera+0x1d2>
					goto no_ahorro1;
 800a71c:	46c0      	nop			@ (mov r8, r8)
 800a71e:	e000      	b.n	800a722 <refrigera+0x1d2>
					goto no_ahorro1;
 800a720:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800a722:	4b73      	ldr	r3, [pc, #460]	@ (800a8f0 <refrigera+0x3a0>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	001a      	movs	r2, r3
 800a728:	2302      	movs	r3, #2
 800a72a:	4013      	ands	r3, r2
 800a72c:	d138      	bne.n	800a7a0 <refrigera+0x250>
					goto refrigera_j04;
 800a72e:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800a730:	f7fc f89e 	bl	8006870 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800a734:	2313      	movs	r3, #19
 800a736:	18fb      	adds	r3, r7, r3
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	e00f      	b.n	800a75e <refrigera+0x20e>
					if(k!=4)
 800a73e:	2213      	movs	r2, #19
 800a740:	18bb      	adds	r3, r7, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b04      	cmp	r3, #4
 800a746:	d004      	beq.n	800a752 <refrigera+0x202>
						datled[k] = 0;
 800a748:	18bb      	adds	r3, r7, r2
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	4a69      	ldr	r2, [pc, #420]	@ (800a8f4 <refrigera+0x3a4>)
 800a74e:	2100      	movs	r1, #0
 800a750:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800a752:	2113      	movs	r1, #19
 800a754:	187b      	adds	r3, r7, r1
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	187b      	adds	r3, r7, r1
 800a75a:	3201      	adds	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	2313      	movs	r3, #19
 800a760:	18fb      	adds	r3, r7, r3
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b06      	cmp	r3, #6
 800a766:	d9ea      	bls.n	800a73e <refrigera+0x1ee>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800a768:	4b61      	ldr	r3, [pc, #388]	@ (800a8f0 <refrigera+0x3a0>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	001a      	movs	r2, r3
 800a76e:	2301      	movs	r3, #1
 800a770:	4013      	ands	r3, r2
 800a772:	d100      	bne.n	800a776 <refrigera+0x226>
 800a774:	e1ff      	b.n	800ab76 <refrigera+0x626>
					goto refrigera_j05;
 800a776:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800a778:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800a77a:	4b5f      	ldr	r3, [pc, #380]	@ (800a8f8 <refrigera+0x3a8>)
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	4b4f      	ldr	r3, [pc, #316]	@ (800a8bc <refrigera+0x36c>)
 800a780:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800a782:	4b4e      	ldr	r3, [pc, #312]	@ (800a8bc <refrigera+0x36c>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	001a      	movs	r2, r3
 800a788:	4b5c      	ldr	r3, [pc, #368]	@ (800a8fc <refrigera+0x3ac>)
 800a78a:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800a78c:	f7fb fcba 	bl	8006104 <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800a790:	4b4a      	ldr	r3, [pc, #296]	@ (800a8bc <refrigera+0x36c>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <refrigera+0x24c>
 800a798:	f000 fbab 	bl	800aef2 <refrigera+0x9a2>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800a79c:	f000 fbad 	bl	800aefa <refrigera+0x9aa>
				goto refrige10;
 800a7a0:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800a7a2:	f7fb fd1f 	bl	80061e4 <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800a7a6:	4953      	ldr	r1, [pc, #332]	@ (800a8f4 <refrigera+0x3a4>)
 800a7a8:	4852      	ldr	r0, [pc, #328]	@ (800a8f4 <refrigera+0x3a4>)
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	f002 fca8 	bl	800d102 <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800a7b2:	4b53      	ldr	r3, [pc, #332]	@ (800a900 <refrigera+0x3b0>)
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4053      	eors	r3, r2
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d137      	bne.n	800a830 <refrigera+0x2e0>
            cntMsgCmd = 250;
 800a7c0:	4b50      	ldr	r3, [pc, #320]	@ (800a904 <refrigera+0x3b4>)
 800a7c2:	22fa      	movs	r2, #250	@ 0xfa
 800a7c4:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800a7c6:	4b50      	ldr	r3, [pc, #320]	@ (800a908 <refrigera+0x3b8>)
 800a7c8:	2203      	movs	r2, #3
 800a7ca:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800a7cc:	4b4f      	ldr	r3, [pc, #316]	@ (800a90c <refrigera+0x3bc>)
 800a7ce:	799b      	ldrb	r3, [r3, #6]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	4053      	eors	r3, r2
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	1e5a      	subs	r2, r3, #1
 800a7d8:	4193      	sbcs	r3, r2
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	4b4b      	ldr	r3, [pc, #300]	@ (800a90c <refrigera+0x3bc>)
 800a7de:	719a      	strb	r2, [r3, #6]
            waux = findLastValue((uint32_t)&eeEstado1);;
 800a7e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a910 <refrigera+0x3c0>)
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f7f8 fa1a 	bl	8002c1c <findLastValue>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	4b35      	ldr	r3, [pc, #212]	@ (800a8c4 <refrigera+0x374>)
 800a7ee:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800a7f0:	4b34      	ldr	r3, [pc, #208]	@ (800a8c4 <refrigera+0x374>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2240      	movs	r2, #64	@ 0x40
 800a7f6:	4393      	bics	r3, r2
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4b32      	ldr	r3, [pc, #200]	@ (800a8c4 <refrigera+0x374>)
 800a7fc:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800a7fe:	4b43      	ldr	r3, [pc, #268]	@ (800a90c <refrigera+0x3bc>)
 800a800:	799b      	ldrb	r3, [r3, #6]
 800a802:	2201      	movs	r2, #1
 800a804:	4053      	eors	r3, r2
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <refrigera+0x2cc>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800a80c:	4b2d      	ldr	r3, [pc, #180]	@ (800a8c4 <refrigera+0x374>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2240      	movs	r2, #64	@ 0x40
 800a812:	4313      	orrs	r3, r2
 800a814:	b2da      	uxtb	r2, r3
 800a816:	4b2b      	ldr	r3, [pc, #172]	@ (800a8c4 <refrigera+0x374>)
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	e000      	b.n	800a81e <refrigera+0x2ce>
            	goto func_lock_01;
 800a81c:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800a81e:	4b29      	ldr	r3, [pc, #164]	@ (800a8c4 <refrigera+0x374>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	001a      	movs	r2, r3
 800a824:	4b3a      	ldr	r3, [pc, #232]	@ (800a910 <refrigera+0x3c0>)
 800a826:	0019      	movs	r1, r3
 800a828:	0010      	movs	r0, r2
 800a82a:	f7fc fca5 	bl	8007178 <wreeprom>
 800a82e:	e000      	b.n	800a832 <refrigera+0x2e2>
            	goto no_Func_Lock;
 800a830:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800a832:	4b33      	ldr	r3, [pc, #204]	@ (800a900 <refrigera+0x3b0>)
 800a834:	789b      	ldrb	r3, [r3, #2]
 800a836:	2201      	movs	r2, #1
 800a838:	4053      	eors	r3, r2
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d169      	bne.n	800a914 <refrigera+0x3c4>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800a840:	4b30      	ldr	r3, [pc, #192]	@ (800a904 <refrigera+0x3b4>)
 800a842:	22fa      	movs	r2, #250	@ 0xfa
 800a844:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800a846:	4b30      	ldr	r3, [pc, #192]	@ (800a908 <refrigera+0x3b8>)
 800a848:	2202      	movs	r2, #2
 800a84a:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800a84c:	4b25      	ldr	r3, [pc, #148]	@ (800a8e4 <refrigera+0x394>)
 800a84e:	799b      	ldrb	r3, [r3, #6]
 800a850:	2201      	movs	r2, #1
 800a852:	4053      	eors	r3, r2
 800a854:	b2db      	uxtb	r3, r3
 800a856:	1e5a      	subs	r2, r3, #1
 800a858:	4193      	sbcs	r3, r2
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	4b21      	ldr	r3, [pc, #132]	@ (800a8e4 <refrigera+0x394>)
 800a85e:	719a      	strb	r2, [r3, #6]
               waux = findLastValue((uint32_t)&eeEstado1);;
 800a860:	4b2b      	ldr	r3, [pc, #172]	@ (800a910 <refrigera+0x3c0>)
 800a862:	0018      	movs	r0, r3
 800a864:	f7f8 f9da 	bl	8002c1c <findLastValue>
 800a868:	0003      	movs	r3, r0
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	4b15      	ldr	r3, [pc, #84]	@ (800a8c4 <refrigera+0x374>)
 800a86e:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800a870:	4b14      	ldr	r3, [pc, #80]	@ (800a8c4 <refrigera+0x374>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2204      	movs	r2, #4
 800a876:	4393      	bics	r3, r2
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	4b12      	ldr	r3, [pc, #72]	@ (800a8c4 <refrigera+0x374>)
 800a87c:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800a87e:	4b19      	ldr	r3, [pc, #100]	@ (800a8e4 <refrigera+0x394>)
 800a880:	799b      	ldrb	r3, [r3, #6]
 800a882:	2201      	movs	r2, #1
 800a884:	4053      	eors	r3, r2
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d107      	bne.n	800a89c <refrigera+0x34c>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800a88c:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c4 <refrigera+0x374>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2204      	movs	r2, #4
 800a892:	4313      	orrs	r3, r2
 800a894:	b2da      	uxtb	r2, r3
 800a896:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <refrigera+0x374>)
 800a898:	701a      	strb	r2, [r3, #0]
 800a89a:	e000      	b.n	800a89e <refrigera+0x34e>
            	   goto refrigera_j06d;
 800a89c:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800a89e:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <refrigera+0x374>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	001a      	movs	r2, r3
 800a8a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a910 <refrigera+0x3c0>)
 800a8a6:	0019      	movs	r1, r3
 800a8a8:	0010      	movs	r0, r2
 800a8aa:	f7fc fc65 	bl	8007178 <wreeprom>
 800a8ae:	e032      	b.n	800a916 <refrigera+0x3c6>
 800a8b0:	20000bb4 	.word	0x20000bb4
 800a8b4:	20000bf0 	.word	0x20000bf0
 800a8b8:	200000b8 	.word	0x200000b8
 800a8bc:	20000b65 	.word	0x20000b65
 800a8c0:	20000c34 	.word	0x20000c34
 800a8c4:	20000b64 	.word	0x20000b64
 800a8c8:	20000c36 	.word	0x20000c36
 800a8cc:	20000c33 	.word	0x20000c33
 800a8d0:	20000c35 	.word	0x20000c35
 800a8d4:	200000b9 	.word	0x200000b9
 800a8d8:	20000bbc 	.word	0x20000bbc
 800a8dc:	200000bb 	.word	0x200000bb
 800a8e0:	20000bbe 	.word	0x20000bbe
 800a8e4:	20000c4c 	.word	0x20000c4c
 800a8e8:	200000d3 	.word	0x200000d3
 800a8ec:	200000d5 	.word	0x200000d5
 800a8f0:	20000ba8 	.word	0x20000ba8
 800a8f4:	20000ba0 	.word	0x20000ba0
 800a8f8:	20000b7c 	.word	0x20000b7c
 800a8fc:	20000bca 	.word	0x20000bca
 800a900:	20000bac 	.word	0x20000bac
 800a904:	20001074 	.word	0x20001074
 800a908:	20001075 	.word	0x20001075
 800a90c:	20001054 	.word	0x20001054
 800a910:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800a914:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800a916:	4bc9      	ldr	r3, [pc, #804]	@ (800ac3c <refrigera+0x6ec>)
 800a918:	789b      	ldrb	r3, [r3, #2]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d121      	bne.n	800a962 <refrigera+0x412>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800a91e:	4bc8      	ldr	r3, [pc, #800]	@ (800ac40 <refrigera+0x6f0>)
 800a920:	78db      	ldrb	r3, [r3, #3]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d11f      	bne.n	800a966 <refrigera+0x416>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800a926:	4bc7      	ldr	r3, [pc, #796]	@ (800ac44 <refrigera+0x6f4>)
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2201      	movs	r2, #1
 800a92c:	4053      	eors	r3, r2
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d11a      	bne.n	800a96a <refrigera+0x41a>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800a934:	4bc1      	ldr	r3, [pc, #772]	@ (800ac3c <refrigera+0x6ec>)
 800a936:	799b      	ldrb	r3, [r3, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10b      	bne.n	800a954 <refrigera+0x404>
                if(retLampOff != 0){ //tnz retLampOff
 800a93c:	4bc2      	ldr	r3, [pc, #776]	@ (800ac48 <refrigera+0x6f8>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d109      	bne.n	800a958 <refrigera+0x408>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800a944:	4bbd      	ldr	r3, [pc, #756]	@ (800ac3c <refrigera+0x6ec>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	4053      	eors	r3, r2
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10d      	bne.n	800a96e <refrigera+0x41e>
refrigera_j06a:
 800a952:	e002      	b.n	800a95a <refrigera+0x40a>
                	goto refrigera_j06a;
 800a954:	46c0      	nop			@ (mov r8, r8)
 800a956:	e000      	b.n	800a95a <refrigera+0x40a>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800a958:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800a95a:	4bbc      	ldr	r3, [pc, #752]	@ (800ac4c <refrigera+0x6fc>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	709a      	strb	r2, [r3, #2]
 800a960:	e006      	b.n	800a970 <refrigera+0x420>
                	goto refrigera_j06;
 800a962:	46c0      	nop			@ (mov r8, r8)
 800a964:	e004      	b.n	800a970 <refrigera+0x420>
                	goto refrigera_j06;
 800a966:	46c0      	nop			@ (mov r8, r8)
 800a968:	e002      	b.n	800a970 <refrigera+0x420>
                	goto refrigera_j06;
 800a96a:	46c0      	nop			@ (mov r8, r8)
 800a96c:	e000      	b.n	800a970 <refrigera+0x420>
                	goto refrigera_j06;
 800a96e:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800a970:	4bb7      	ldr	r3, [pc, #732]	@ (800ac50 <refrigera+0x700>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	001a      	movs	r2, r3
 800a976:	2301      	movs	r3, #1
 800a978:	4013      	ands	r3, r2
 800a97a:	d101      	bne.n	800a980 <refrigera+0x430>
 800a97c:	f000 fc34 	bl	800b1e8 <refrigera+0xc98>
                	goto refrigera_j07;
 800a980:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800a982:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800a984:	49b3      	ldr	r1, [pc, #716]	@ (800ac54 <refrigera+0x704>)
 800a986:	48b3      	ldr	r0, [pc, #716]	@ (800ac54 <refrigera+0x704>)
 800a988:	2307      	movs	r3, #7
 800a98a:	2203      	movs	r2, #3
 800a98c:	f002 fb9e 	bl	800d0cc <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800a990:	4bb1      	ldr	r3, [pc, #708]	@ (800ac58 <refrigera+0x708>)
 800a992:	2259      	movs	r2, #89	@ 0x59
 800a994:	5c9b      	ldrb	r3, [r3, r2]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <refrigera+0x44e>
 800a99a:	f000 fe60 	bl	800b65e <refrigera+0x110e>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800a99e:	f000 fe6e 	bl	800b67e <refrigera+0x112e>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800a9a2:	4bae      	ldr	r3, [pc, #696]	@ (800ac5c <refrigera+0x70c>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	801a      	strh	r2, [r3, #0]
				goto finref;
 800a9a8:	e061      	b.n	800aa6e <refrigera+0x51e>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800a9aa:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800a9ac:	4baa      	ldr	r3, [pc, #680]	@ (800ac58 <refrigera+0x708>)
 800a9ae:	2264      	movs	r2, #100	@ 0x64
 800a9b0:	5c9a      	ldrb	r2, [r3, r2]
 800a9b2:	4bab      	ldr	r3, [pc, #684]	@ (800ac60 <refrigera+0x710>)
 800a9b4:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800a9b6:	f7fb fd9d 	bl	80064f4 <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800a9ba:	4baa      	ldr	r3, [pc, #680]	@ (800ac64 <refrigera+0x714>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	001a      	movs	r2, r3
 800a9c0:	233c      	movs	r3, #60	@ 0x3c
 800a9c2:	4353      	muls	r3, r2
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac68 <refrigera+0x718>)
 800a9c8:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800a9ca:	4ba5      	ldr	r3, [pc, #660]	@ (800ac60 <refrigera+0x710>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	233c      	movs	r3, #60	@ 0x3c
 800a9d2:	4353      	muls	r3, r2
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	4ba5      	ldr	r3, [pc, #660]	@ (800ac6c <refrigera+0x71c>)
 800a9d8:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800a9da:	f7fb fbe3 	bl	80061a4 <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800a9de:	4b9c      	ldr	r3, [pc, #624]	@ (800ac50 <refrigera+0x700>)
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800a9e4:	e040      	b.n	800aa68 <refrigera+0x518>
				retvent = 20;
 800a9e6:	4ba2      	ldr	r3, [pc, #648]	@ (800ac70 <refrigera+0x720>)
 800a9e8:	2214      	movs	r2, #20
 800a9ea:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800a9ec:	4ba1      	ldr	r3, [pc, #644]	@ (800ac74 <refrigera+0x724>)
 800a9ee:	2232      	movs	r2, #50	@ 0x32
 800a9f0:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800a9f2:	4b97      	ldr	r3, [pc, #604]	@ (800ac50 <refrigera+0x700>)
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800a9f8:	e036      	b.n	800aa68 <refrigera+0x518>
                  goto todh; //jp todh
 800a9fa:	46c0      	nop			@ (mov r8, r8)
 800a9fc:	e000      	b.n	800aa00 <refrigera+0x4b0>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800a9fe:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800aa00:	4b9d      	ldr	r3, [pc, #628]	@ (800ac78 <refrigera+0x728>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800aa06:	f7fb fb5b 	bl	80060c0 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800aa0a:	4b93      	ldr	r3, [pc, #588]	@ (800ac58 <refrigera+0x708>)
 800aa0c:	2247      	movs	r2, #71	@ 0x47
 800aa0e:	5c9a      	ldrb	r2, [r3, r2]
 800aa10:	4b93      	ldr	r3, [pc, #588]	@ (800ac60 <refrigera+0x710>)
 800aa12:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800aa14:	4b90      	ldr	r3, [pc, #576]	@ (800ac58 <refrigera+0x708>)
 800aa16:	2255      	movs	r2, #85	@ 0x55
 800aa18:	5c9b      	ldrb	r3, [r3, r2]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d102      	bne.n	800aa24 <refrigera+0x4d4>
				BaBentre10_math();					//call BaBentre10_math
 800aa1e:	f7fb fd69 	bl	80064f4 <BaBentre10_math>
				goto todh2;
 800aa22:	e014      	b.n	800aa4e <refrigera+0x4fe>
					goto todh1;
 800aa24:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800aa26:	4b8e      	ldr	r3, [pc, #568]	@ (800ac60 <refrigera+0x710>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	001a      	movs	r2, r3
 800aa2c:	233c      	movs	r3, #60	@ 0x3c
 800aa2e:	4353      	muls	r3, r2
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	4b92      	ldr	r3, [pc, #584]	@ (800ac7c <refrigera+0x72c>)
 800aa34:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800aa36:	4b91      	ldr	r3, [pc, #580]	@ (800ac7c <refrigera+0x72c>)
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	4b8f      	ldr	r3, [pc, #572]	@ (800ac80 <refrigera+0x730>)
 800aa42:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800aa44:	4b8d      	ldr	r3, [pc, #564]	@ (800ac7c <refrigera+0x72c>)
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	4b8e      	ldr	r3, [pc, #568]	@ (800ac84 <refrigera+0x734>)
 800aa4c:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800aa4e:	4b8c      	ldr	r3, [pc, #560]	@ (800ac80 <refrigera+0x730>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	4a8b      	ldr	r2, [pc, #556]	@ (800ac84 <refrigera+0x734>)
 800aa58:	7812      	ldrb	r2, [r2, #0]
 800aa5a:	189b      	adds	r3, r3, r2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	4b8a      	ldr	r3, [pc, #552]	@ (800ac88 <refrigera+0x738>)
 800aa60:	801a      	strh	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800aa62:	4b7b      	ldr	r3, [pc, #492]	@ (800ac50 <refrigera+0x700>)
 800aa64:	2203      	movs	r2, #3
 800aa66:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800aa68:	4b88      	ldr	r3, [pc, #544]	@ (800ac8c <refrigera+0x73c>)
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800aa6e:	4b77      	ldr	r3, [pc, #476]	@ (800ac4c <refrigera+0x6fc>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <refrigera+0x52e>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800aa76:	4b77      	ldr	r3, [pc, #476]	@ (800ac54 <refrigera+0x704>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	709a      	strb	r2, [r3, #2]
 800aa7c:	e000      	b.n	800aa80 <refrigera+0x530>
                	goto refrigera_j11;
 800aa7e:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800aa80:	4b83      	ldr	r3, [pc, #524]	@ (800ac90 <refrigera+0x740>)
 800aa82:	0018      	movs	r0, r3
 800aa84:	f7f8 f8ca 	bl	8002c1c <findLastValue>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	1dfb      	adds	r3, r7, #7
 800aa8c:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800aa8e:	1dfb      	adds	r3, r7, #7
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2240      	movs	r2, #64	@ 0x40
 800aa94:	4013      	ands	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <refrigera+0x550>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800aa98:	4b6c      	ldr	r3, [pc, #432]	@ (800ac4c <refrigera+0x6fc>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	705a      	strb	r2, [r3, #1]
 800aa9e:	e000      	b.n	800aaa2 <refrigera+0x552>
                	goto refrigeraLockDrOFF;
 800aaa0:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800aaa2:	4b7c      	ldr	r3, [pc, #496]	@ (800ac94 <refrigera+0x744>)
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00f      	beq.n	800aaca <refrigera+0x57a>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800aaaa:	4b68      	ldr	r3, [pc, #416]	@ (800ac4c <refrigera+0x6fc>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800aab0:	4b66      	ldr	r3, [pc, #408]	@ (800ac4c <refrigera+0x6fc>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800aab6:	4b78      	ldr	r3, [pc, #480]	@ (800ac98 <refrigera+0x748>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800aabc:	4965      	ldr	r1, [pc, #404]	@ (800ac54 <refrigera+0x704>)
 800aabe:	4865      	ldr	r0, [pc, #404]	@ (800ac54 <refrigera+0x704>)
 800aac0:	2307      	movs	r3, #7
 800aac2:	2202      	movs	r2, #2
 800aac4:	f002 fb1d 	bl	800d102 <Bclear_Clear_trfst>
               goto endNoct;
 800aac8:	e01b      	b.n	800ab02 <refrigera+0x5b2>
            	   goto endNocturno;
 800aaca:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800aacc:	4b5c      	ldr	r3, [pc, #368]	@ (800ac40 <refrigera+0x6f0>)
 800aace:	78db      	ldrb	r3, [r3, #3]
 800aad0:	2201      	movs	r2, #1
 800aad2:	4053      	eors	r3, r2
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d112      	bne.n	800ab00 <refrigera+0x5b0>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800aada:	4959      	ldr	r1, [pc, #356]	@ (800ac40 <refrigera+0x6f0>)
 800aadc:	4859      	ldr	r0, [pc, #356]	@ (800ac44 <refrigera+0x6f4>)
 800aade:	2303      	movs	r3, #3
 800aae0:	2200      	movs	r2, #0
 800aae2:	f002 faf3 	bl	800d0cc <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800aae6:	495b      	ldr	r1, [pc, #364]	@ (800ac54 <refrigera+0x704>)
 800aae8:	4854      	ldr	r0, [pc, #336]	@ (800ac3c <refrigera+0x6ec>)
 800aaea:	2304      	movs	r3, #4
 800aaec:	2201      	movs	r2, #1
 800aaee:	f002 faed 	bl	800d0cc <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800aaf2:	4b6a      	ldr	r3, [pc, #424]	@ (800ac9c <refrigera+0x74c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800aaf8:	4b69      	ldr	r3, [pc, #420]	@ (800aca0 <refrigera+0x750>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	801a      	strh	r2, [r3, #0]
 800aafe:	e000      	b.n	800ab02 <refrigera+0x5b2>
            	  goto endNoct;
 800ab00:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800ab02:	4b63      	ldr	r3, [pc, #396]	@ (800ac90 <refrigera+0x740>)
 800ab04:	0018      	movs	r0, r3
 800ab06:	f7f8 f889 	bl	8002c1c <findLastValue>
 800ab0a:	0002      	movs	r2, r0
 800ab0c:	1dfb      	adds	r3, r7, #7
 800ab0e:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800ab10:	1dfb      	adds	r3, r7, #7
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2201      	movs	r2, #1
 800ab16:	4013      	ands	r3, r2
 800ab18:	d118      	bne.n	800ab4c <refrigera+0x5fc>
refriOFF:
 800ab1a:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800ab1c:	f000 fe22 	bl	800b764 <st_refri>
           for(uint8_t k=0; k<8; k++){
 800ab20:	2312      	movs	r3, #18
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	2200      	movs	r2, #0
 800ab26:	701a      	strb	r2, [r3, #0]
 800ab28:	e00a      	b.n	800ab40 <refrigera+0x5f0>
        	   datled[k] = 0;
 800ab2a:	2012      	movs	r0, #18
 800ab2c:	183b      	adds	r3, r7, r0
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	4a48      	ldr	r2, [pc, #288]	@ (800ac54 <refrigera+0x704>)
 800ab32:	2100      	movs	r1, #0
 800ab34:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800ab36:	183b      	adds	r3, r7, r0
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	183b      	adds	r3, r7, r0
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	2312      	movs	r3, #18
 800ab42:	18fb      	adds	r3, r7, r3
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	d9ef      	bls.n	800ab2a <refrigera+0x5da>
refriON:
 800ab4a:	e000      	b.n	800ab4e <refrigera+0x5fe>
            	 goto refriON;
 800ab4c:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800ab4e:	4b55      	ldr	r3, [pc, #340]	@ (800aca4 <refrigera+0x754>)
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2201      	movs	r2, #1
 800ab54:	4053      	eors	r3, r2
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <refrigera+0x620>
         st_refri();
 800ab5c:	f000 fe02 	bl	800b764 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800ab60:	4b51      	ldr	r3, [pc, #324]	@ (800aca8 <refrigera+0x758>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800ab66:	4b35      	ldr	r3, [pc, #212]	@ (800ac3c <refrigera+0x6ec>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800ab6c:	f000 fdbc 	bl	800b6e8 <refrigera+0x1198>
        	 goto ac_OK;
 800ab70:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800ab72:	f000 fdb9 	bl	800b6e8 <refrigera+0x1198>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800ab76:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800ab78:	4b4c      	ldr	r3, [pc, #304]	@ (800acac <refrigera+0x75c>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800ab7e:	f7fb fa85 	bl	800608c <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800ab82:	f7fb fa8b 	bl	800609c <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800ab86:	494a      	ldr	r1, [pc, #296]	@ (800acb0 <refrigera+0x760>)
 800ab88:	4849      	ldr	r0, [pc, #292]	@ (800acb0 <refrigera+0x760>)
 800ab8a:	2307      	movs	r3, #7
 800ab8c:	2206      	movs	r2, #6
 800ab8e:	f002 fab8 	bl	800d102 <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800ab92:	4b48      	ldr	r3, [pc, #288]	@ (800acb4 <refrigera+0x764>)
 800ab94:	2202      	movs	r2, #2
 800ab96:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800ab98:	4b31      	ldr	r3, [pc, #196]	@ (800ac60 <refrigera+0x710>)
 800ab9a:	2205      	movs	r2, #5
 800ab9c:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <refrigera+0x75c>)
 800aba0:	799b      	ldrb	r3, [r3, #6]
 800aba2:	2201      	movs	r2, #1
 800aba4:	4053      	eors	r3, r2
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <refrigera+0x664>
          wreg = 0x01;
 800abac:	4b2c      	ldr	r3, [pc, #176]	@ (800ac60 <refrigera+0x710>)
 800abae:	2201      	movs	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e000      	b.n	800abb6 <refrigera+0x666>
        	  goto no_change_time;
 800abb4:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800abb6:	4b2a      	ldr	r3, [pc, #168]	@ (800ac60 <refrigera+0x710>)
 800abb8:	781a      	ldrb	r2, [r3, #0]
 800abba:	4b2d      	ldr	r3, [pc, #180]	@ (800ac70 <refrigera+0x720>)
 800abbc:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800abbe:	4b28      	ldr	r3, [pc, #160]	@ (800ac60 <refrigera+0x710>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	001a      	movs	r2, r3
 800abc4:	4b3c      	ldr	r3, [pc, #240]	@ (800acb8 <refrigera+0x768>)
 800abc6:	801a      	strh	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800abc8:	f7fb fa9c 	bl	8006104 <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800abcc:	4b23      	ldr	r3, [pc, #140]	@ (800ac5c <refrigera+0x70c>)
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	2b63      	cmp	r3, #99	@ 0x63
 800abd2:	d92a      	bls.n	800ac2a <refrigera+0x6da>
			if(cntblkh <= 250){
 800abd4:	4b21      	ldr	r3, [pc, #132]	@ (800ac5c <refrigera+0x70c>)
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	2bfa      	cmp	r3, #250	@ 0xfa
 800abda:	d800      	bhi.n	800abde <refrigera+0x68e>
 800abdc:	e072      	b.n	800acc4 <refrigera+0x774>
			if(cntblkh < 300){
 800abde:	4b1f      	ldr	r3, [pc, #124]	@ (800ac5c <refrigera+0x70c>)
 800abe0:	881a      	ldrh	r2, [r3, #0]
 800abe2:	2396      	movs	r3, #150	@ 0x96
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d321      	bcc.n	800ac2e <refrigera+0x6de>
			if(cntblkh < 450){
 800abea:	4b1c      	ldr	r3, [pc, #112]	@ (800ac5c <refrigera+0x70c>)
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	23e1      	movs	r3, #225	@ 0xe1
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d200      	bcs.n	800abf8 <refrigera+0x6a8>
 800abf6:	e094      	b.n	800ad22 <refrigera+0x7d2>
			if(cntblkh < 500){
 800abf8:	4b18      	ldr	r3, [pc, #96]	@ (800ac5c <refrigera+0x70c>)
 800abfa:	881a      	ldrh	r2, [r3, #0]
 800abfc:	23fa      	movs	r3, #250	@ 0xfa
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d316      	bcc.n	800ac32 <refrigera+0x6e2>
			if(cntblkh < 650){
 800ac04:	4b15      	ldr	r3, [pc, #84]	@ (800ac5c <refrigera+0x70c>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	4a2c      	ldr	r2, [pc, #176]	@ (800acbc <refrigera+0x76c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d800      	bhi.n	800ac10 <refrigera+0x6c0>
 800ac0e:	e0e6      	b.n	800adde <refrigera+0x88e>
			if(cntblkh < 700){
 800ac10:	4b12      	ldr	r3, [pc, #72]	@ (800ac5c <refrigera+0x70c>)
 800ac12:	881a      	ldrh	r2, [r3, #0]
 800ac14:	23af      	movs	r3, #175	@ 0xaf
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d30c      	bcc.n	800ac36 <refrigera+0x6e6>
			if(cntblkh < 850){
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac5c <refrigera+0x70c>)
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	4a27      	ldr	r2, [pc, #156]	@ (800acc0 <refrigera+0x770>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d800      	bhi.n	800ac28 <refrigera+0x6d8>
 800ac26:	e0f8      	b.n	800ae1a <refrigera+0x8ca>
indi_off:
 800ac28:	e006      	b.n	800ac38 <refrigera+0x6e8>
				goto indi_off; //jrult	indi_off
 800ac2a:	46c0      	nop			@ (mov r8, r8)
 800ac2c:	e113      	b.n	800ae56 <refrigera+0x906>
				goto indi_off; //rult indi_off
 800ac2e:	46c0      	nop			@ (mov r8, r8)
 800ac30:	e111      	b.n	800ae56 <refrigera+0x906>
				goto indi_off; //rult indi_off
 800ac32:	46c0      	nop			@ (mov r8, r8)
 800ac34:	e10f      	b.n	800ae56 <refrigera+0x906>
				goto indi_off; //rult indi_off
 800ac36:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800ac38:	e10d      	b.n	800ae56 <refrigera+0x906>
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	20000c4c 	.word	0x20000c4c
 800ac40:	20000b88 	.word	0x20000b88
 800ac44:	20000bf8 	.word	0x20000bf8
 800ac48:	20001076 	.word	0x20001076
 800ac4c:	20000bb4 	.word	0x20000bb4
 800ac50:	20000ba8 	.word	0x20000ba8
 800ac54:	20000ba0 	.word	0x20000ba0
 800ac58:	200000b8 	.word	0x200000b8
 800ac5c:	20000b5c 	.word	0x20000b5c
 800ac60:	20000b65 	.word	0x20000b65
 800ac64:	20000b64 	.word	0x20000b64
 800ac68:	20000c0a 	.word	0x20000c0a
 800ac6c:	20000c0c 	.word	0x20000c0c
 800ac70:	20000b7a 	.word	0x20000b7a
 800ac74:	20000b72 	.word	0x20000b72
 800ac78:	20000b7d 	.word	0x20000b7d
 800ac7c:	200008e2 	.word	0x200008e2
 800ac80:	20000b57 	.word	0x20000b57
 800ac84:	20000b58 	.word	0x20000b58
 800ac88:	20000bc8 	.word	0x20000bc8
 800ac8c:	20000b7b 	.word	0x20000b7b
 800ac90:	0803f803 	.word	0x0803f803
 800ac94:	20000c54 	.word	0x20000c54
 800ac98:	20000bf0 	.word	0x20000bf0
 800ac9c:	20000c40 	.word	0x20000c40
 800aca0:	20000c42 	.word	0x20000c42
 800aca4:	200010b8 	.word	0x200010b8
 800aca8:	20000ef8 	.word	0x20000ef8
 800acac:	20000be8 	.word	0x20000be8
 800acb0:	20000b98 	.word	0x20000b98
 800acb4:	20000b7e 	.word	0x20000b7e
 800acb8:	20000bc6 	.word	0x20000bc6
 800acbc:	00000289 	.word	0x00000289
 800acc0:	00000351 	.word	0x00000351
				goto Indi_int; //jrule	Indi_int
 800acc4:	46c0      	nop			@ (mov r8, r8)
			soloent (findLastValue((uint32_t) &eePlantilla[interdh]));
 800acc6:	4bcc      	ldr	r3, [pc, #816]	@ (800aff8 <refrigera+0xaa8>)
 800acc8:	0018      	movs	r0, r3
 800acca:	f7f7 ffa7 	bl	8002c1c <findLastValue>
 800acce:	0003      	movs	r3, r0
 800acd0:	0018      	movs	r0, r3
 800acd2:	f7fb fbdd 	bl	8006490 <soloent>
			op_menu (findLastValue((uint32_t) &eePlantilla[eeD1_Msg1]) , findLastValue((uint32_t) &eePlantilla[eeD2_Msg1]));
 800acd6:	4bc9      	ldr	r3, [pc, #804]	@ (800affc <refrigera+0xaac>)
 800acd8:	0018      	movs	r0, r3
 800acda:	f7f7 ff9f 	bl	8002c1c <findLastValue>
 800acde:	0003      	movs	r3, r0
 800ace0:	b2dc      	uxtb	r4, r3
 800ace2:	4bc7      	ldr	r3, [pc, #796]	@ (800b000 <refrigera+0xab0>)
 800ace4:	0018      	movs	r0, r3
 800ace6:	f7f7 ff99 	bl	8002c1c <findLastValue>
 800acea:	0003      	movs	r3, r0
 800acec:	b2db      	uxtb	r3, r3
 800acee:	0019      	movs	r1, r3
 800acf0:	0020      	movs	r0, r4
 800acf2:	f7fc fa55 	bl	80071a0 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800acf6:	2311      	movs	r3, #17
 800acf8:	18fb      	adds	r3, r7, r3
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e00a      	b.n	800ad16 <refrigera+0x7c6>
            	 datled[k] = 0;
 800ad00:	2011      	movs	r0, #17
 800ad02:	183b      	adds	r3, r7, r0
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	4abf      	ldr	r2, [pc, #764]	@ (800b004 <refrigera+0xab4>)
 800ad08:	2100      	movs	r1, #0
 800ad0a:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800ad0c:	183b      	adds	r3, r7, r0
 800ad0e:	781a      	ldrb	r2, [r3, #0]
 800ad10:	183b      	adds	r3, r7, r0
 800ad12:	3201      	adds	r2, #1
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	2311      	movs	r3, #17
 800ad18:	18fb      	adds	r3, r7, r3
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b07      	cmp	r3, #7
 800ad1e:	d9ef      	bls.n	800ad00 <refrigera+0x7b0>
             goto defindi;
 800ad20:	e099      	b.n	800ae56 <refrigera+0x906>
				goto Indi_time;//rult Indi_time
 800ad22:	46c0      	nop			@ (mov r8, r8)
            if(findLastValue((uint32_t) &eePlantilla[dhmode]) != 1){
 800ad24:	4bb8      	ldr	r3, [pc, #736]	@ (800b008 <refrigera+0xab8>)
 800ad26:	0018      	movs	r0, r3
 800ad28:	f7f7 ff78 	bl	8002c1c <findLastValue>
 800ad2c:	0003      	movs	r3, r0
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d10b      	bne.n	800ad4a <refrigera+0x7fa>
            soloent( findLastValue((uint32_t) &eePlantilla[timedh]) );
 800ad32:	4bb6      	ldr	r3, [pc, #728]	@ (800b00c <refrigera+0xabc>)
 800ad34:	0018      	movs	r0, r3
 800ad36:	f7f7 ff71 	bl	8002c1c <findLastValue>
 800ad3a:	0003      	movs	r3, r0
 800ad3c:	0018      	movs	r0, r3
 800ad3e:	f7fb fba7 	bl	8006490 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800ad42:	4bb0      	ldr	r3, [pc, #704]	@ (800b004 <refrigera+0xab4>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800ad48:	e085      	b.n	800ae56 <refrigera+0x906>
				goto indica45;
 800ad4a:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800ad4c:	4bb0      	ldr	r3, [pc, #704]	@ (800b010 <refrigera+0xac0>)
 800ad4e:	2247      	movs	r2, #71	@ 0x47
 800ad50:	5c9b      	ldrb	r3, [r3, r2]
 800ad52:	0018      	movs	r0, r3
 800ad54:	f7fb fb66 	bl	8006424 <convad10>
            if(findLastValue((uint32_t) &eePlantilla[eeprotype])){
 800ad58:	4bae      	ldr	r3, [pc, #696]	@ (800b014 <refrigera+0xac4>)
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7f7 ff5e 	bl	8002c1c <findLastValue>
 800ad60:	1e03      	subs	r3, r0, #0
 800ad62:	d10e      	bne.n	800ad82 <refrigera+0x832>
            if(findLastValue((uint32_t) &eePlantilla[eeprotype]) == 2){
 800ad64:	4bab      	ldr	r3, [pc, #684]	@ (800b014 <refrigera+0xac4>)
 800ad66:	0018      	movs	r0, r3
 800ad68:	f7f7 ff58 	bl	8002c1c <findLastValue>
 800ad6c:	0003      	movs	r3, r0
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d00f      	beq.n	800ad92 <refrigera+0x842>
indica_na:
 800ad72:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800ad74:	4ba8      	ldr	r3, [pc, #672]	@ (800b018 <refrigera+0xac8>)
 800ad76:	2226      	movs	r2, #38	@ 0x26
 800ad78:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800ad7a:	4ba8      	ldr	r3, [pc, #672]	@ (800b01c <refrigera+0xacc>)
 800ad7c:	2226      	movs	r2, #38	@ 0x26
 800ad7e:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800ad80:	e00f      	b.n	800ada2 <refrigera+0x852>
            	goto indica_110v; //jreq indica_110v
 800ad82:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800ad84:	4ba4      	ldr	r3, [pc, #656]	@ (800b018 <refrigera+0xac8>)
 800ad86:	221f      	movs	r2, #31
 800ad88:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800ad8a:	4ba4      	ldr	r3, [pc, #656]	@ (800b01c <refrigera+0xacc>)
 800ad8c:	220b      	movs	r2, #11
 800ad8e:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800ad90:	e007      	b.n	800ada2 <refrigera+0x852>
            	goto indica_220v; //jreq indica_220v
 800ad92:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800ad94:	4ba0      	ldr	r3, [pc, #640]	@ (800b018 <refrigera+0xac8>)
 800ad96:	221f      	movs	r2, #31
 800ad98:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800ad9a:	4ba0      	ldr	r3, [pc, #640]	@ (800b01c <refrigera+0xacc>)
 800ad9c:	220a      	movs	r2, #10
 800ad9e:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800ada0:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800ada2:	4b9d      	ldr	r3, [pc, #628]	@ (800b018 <refrigera+0xac8>)
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	4b9d      	ldr	r3, [pc, #628]	@ (800b01c <refrigera+0xacc>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	0019      	movs	r1, r3
 800adac:	0010      	movs	r0, r2
 800adae:	f7fc f9f7 	bl	80071a0 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800adb2:	2310      	movs	r3, #16
 800adb4:	18fb      	adds	r3, r7, r3
 800adb6:	2200      	movs	r2, #0
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e00a      	b.n	800add2 <refrigera+0x882>
            	 datled[k] = 0;
 800adbc:	2010      	movs	r0, #16
 800adbe:	183b      	adds	r3, r7, r0
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4a90      	ldr	r2, [pc, #576]	@ (800b004 <refrigera+0xab4>)
 800adc4:	2100      	movs	r1, #0
 800adc6:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800adc8:	183b      	adds	r3, r7, r0
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	183b      	adds	r3, r7, r0
 800adce:	3201      	adds	r2, #1
 800add0:	701a      	strb	r2, [r3, #0]
 800add2:	2310      	movs	r3, #16
 800add4:	18fb      	adds	r3, r7, r3
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b07      	cmp	r3, #7
 800adda:	d9ef      	bls.n	800adbc <refrigera+0x86c>
             goto defindi;
 800addc:	e03b      	b.n	800ae56 <refrigera+0x906>
				goto Indi_sp; //rult Indi_sp
 800adde:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800ade0:	f7fb f9ba 	bl	8006158 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800ade4:	4b8e      	ldr	r3, [pc, #568]	@ (800b020 <refrigera+0xad0>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	0018      	movs	r0, r3
 800adea:	f7fb fb51 	bl	8006490 <soloent>
			for(uint8_t k=0; k<8; k++){
 800adee:	230f      	movs	r3, #15
 800adf0:	18fb      	adds	r3, r7, r3
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e00a      	b.n	800ae0e <refrigera+0x8be>
				datled[k] = 0;
 800adf8:	200f      	movs	r0, #15
 800adfa:	183b      	adds	r3, r7, r0
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	4a81      	ldr	r2, [pc, #516]	@ (800b004 <refrigera+0xab4>)
 800ae00:	2100      	movs	r1, #0
 800ae02:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800ae04:	183b      	adds	r3, r7, r0
 800ae06:	781a      	ldrb	r2, [r3, #0]
 800ae08:	183b      	adds	r3, r7, r0
 800ae0a:	3201      	adds	r2, #1
 800ae0c:	701a      	strb	r2, [r3, #0]
 800ae0e:	230f      	movs	r3, #15
 800ae10:	18fb      	adds	r3, r7, r3
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b07      	cmp	r3, #7
 800ae16:	d9ef      	bls.n	800adf8 <refrigera+0x8a8>
			goto defindi;
 800ae18:	e01d      	b.n	800ae56 <refrigera+0x906>
				goto Indi_dif; //rult Indi_dif
 800ae1a:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800ae1c:	f7fb f9a8 	bl	8006170 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800ae20:	4b80      	ldr	r3, [pc, #512]	@ (800b024 <refrigera+0xad4>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	0018      	movs	r0, r3
 800ae26:	f7fb fb33 	bl	8006490 <soloent>
            for(uint8_t k=0; k<8; k++){
 800ae2a:	230e      	movs	r3, #14
 800ae2c:	18fb      	adds	r3, r7, r3
 800ae2e:	2200      	movs	r2, #0
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	e00a      	b.n	800ae4a <refrigera+0x8fa>
            	datled[k] = 0;
 800ae34:	200e      	movs	r0, #14
 800ae36:	183b      	adds	r3, r7, r0
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	4a72      	ldr	r2, [pc, #456]	@ (800b004 <refrigera+0xab4>)
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800ae40:	183b      	adds	r3, r7, r0
 800ae42:	781a      	ldrb	r2, [r3, #0]
 800ae44:	183b      	adds	r3, r7, r0
 800ae46:	3201      	adds	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	230e      	movs	r3, #14
 800ae4c:	18fb      	adds	r3, r7, r3
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b07      	cmp	r3, #7
 800ae52:	d9ef      	bls.n	800ae34 <refrigera+0x8e4>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800ae54:	46c0      	nop			@ (mov r8, r8)
 800ae56:	f7fc f8a1 	bl	8006f9c <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800ae5a:	4b73      	ldr	r3, [pc, #460]	@ (800b028 <refrigera+0xad8>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	db2a      	blt.n	800aeba <refrigera+0x96a>
        	   goto indica_j00;
 800ae64:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800ae66:	4b6a      	ldr	r3, [pc, #424]	@ (800b010 <refrigera+0xac0>)
 800ae68:	2259      	movs	r2, #89	@ 0x59
 800ae6a:	5c9b      	ldrb	r3, [r3, r2]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d104      	bne.n	800ae7a <refrigera+0x92a>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800ae70:	4b6e      	ldr	r3, [pc, #440]	@ (800b02c <refrigera+0xadc>)
 800ae72:	791b      	ldrb	r3, [r3, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d01c      	beq.n	800aeb2 <refrigera+0x962>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800ae78:	e018      	b.n	800aeac <refrigera+0x95c>
            	goto indica_j00b;
 800ae7a:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800ae7c:	4b6c      	ldr	r3, [pc, #432]	@ (800b030 <refrigera+0xae0>)
 800ae7e:	78db      	ldrb	r3, [r3, #3]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10e      	bne.n	800aea2 <refrigera+0x952>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800ae84:	4b6a      	ldr	r3, [pc, #424]	@ (800b030 <refrigera+0xae0>)
 800ae86:	789b      	ldrb	r3, [r3, #2]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10c      	bne.n	800aea6 <refrigera+0x956>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800ae8c:	4b67      	ldr	r3, [pc, #412]	@ (800b02c <refrigera+0xadc>)
 800ae8e:	791b      	ldrb	r3, [r3, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <refrigera+0x95a>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800ae94:	4b64      	ldr	r3, [pc, #400]	@ (800b028 <refrigera+0xad8>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	001a      	movs	r2, r3
 800ae9a:	2310      	movs	r3, #16
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d00a      	beq.n	800aeb6 <refrigera+0x966>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800aea0:	e004      	b.n	800aeac <refrigera+0x95c>
            	 goto indica_j01;
 800aea2:	46c0      	nop			@ (mov r8, r8)
 800aea4:	e002      	b.n	800aeac <refrigera+0x95c>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800aea6:	46c0      	nop			@ (mov r8, r8)
 800aea8:	e000      	b.n	800aeac <refrigera+0x95c>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800aeaa:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800aeac:	f7fb f908 	bl	80060c0 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800aeb0:	e599      	b.n	800a9e6 <refrigera+0x496>
            goto indica_j02;
 800aeb2:	46c0      	nop			@ (mov r8, r8)
 800aeb4:	e597      	b.n	800a9e6 <refrigera+0x496>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800aeb6:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800aeb8:	e595      	b.n	800a9e6 <refrigera+0x496>
           goto defind10;				/// No, pregunta por otro modo
 800aeba:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800aebc:	4b5d      	ldr	r3, [pc, #372]	@ (800b034 <refrigera+0xae4>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d112      	bne.n	800aeea <refrigera+0x99a>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800aec4:	4b5a      	ldr	r3, [pc, #360]	@ (800b030 <refrigera+0xae0>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d010      	beq.n	800aeee <refrigera+0x99e>
            	 goto indica_j04;
 800aecc:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800aece:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800aed0:	4b59      	ldr	r3, [pc, #356]	@ (800b038 <refrigera+0xae8>)
 800aed2:	2211      	movs	r2, #17
 800aed4:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800aed6:	4b59      	ldr	r3, [pc, #356]	@ (800b03c <refrigera+0xaec>)
 800aed8:	2208      	movs	r2, #8
 800aeda:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800aedc:	4b58      	ldr	r3, [pc, #352]	@ (800b040 <refrigera+0xaf0>)
 800aede:	2201      	movs	r2, #1
 800aee0:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800aee2:	4b58      	ldr	r3, [pc, #352]	@ (800b044 <refrigera+0xaf4>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e55b      	b.n	800a9a2 <refrigera+0x452>
            	 goto finindi;
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	e5bf      	b.n	800aa6e <refrigera+0x51e>
             goto finindi;
 800aeee:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800aef0:	e5bd      	b.n	800aa6e <refrigera+0x51e>
            fauto[7] = 1;						//bset		fauto,#7
 800aef2:	4b55      	ldr	r3, [pc, #340]	@ (800b048 <refrigera+0xaf8>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800aef8:	e15f      	b.n	800b1ba <refrigera+0xc6a>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800aefa:	4b53      	ldr	r3, [pc, #332]	@ (800b048 <refrigera+0xaf8>)
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d150      	bne.n	800afa4 <refrigera+0xa54>
			wreg = num_ver;			//;		/ Versión del Firmware
 800af02:	4b45      	ldr	r3, [pc, #276]	@ (800b018 <refrigera+0xac8>)
 800af04:	2205      	movs	r2, #5
 800af06:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800af08:	f7fb fae0 	bl	80064cc <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800af0c:	4b3d      	ldr	r3, [pc, #244]	@ (800b004 <refrigera+0xab4>)
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800af12:	4b4d      	ldr	r3, [pc, #308]	@ (800b048 <refrigera+0xaf8>)
 800af14:	2201      	movs	r2, #1
 800af16:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800af18:	4b47      	ldr	r3, [pc, #284]	@ (800b038 <refrigera+0xae8>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d90c      	bls.n	800af3a <refrigera+0x9ea>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800af20:	4b4a      	ldr	r3, [pc, #296]	@ (800b04c <refrigera+0xafc>)
 800af22:	2110      	movs	r1, #16
 800af24:	0018      	movs	r0, r3
 800af26:	f008 fc89 	bl	801383c <HAL_GPIO_ReadPin>
 800af2a:	1e03      	subs	r3, r0, #0
 800af2c:	d003      	beq.n	800af36 <refrigera+0x9e6>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800af2e:	4b40      	ldr	r3, [pc, #256]	@ (800b030 <refrigera+0xae0>)
 800af30:	2201      	movs	r2, #1
 800af32:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800af34:	e020      	b.n	800af78 <refrigera+0xa28>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800af36:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800af38:	e13f      	b.n	800b1ba <refrigera+0xc6a>
        	   goto door_det; //jrule door_det
 800af3a:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800af3c:	4b3e      	ldr	r3, [pc, #248]	@ (800b038 <refrigera+0xae8>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b0d      	cmp	r3, #13
 800af42:	d915      	bls.n	800af70 <refrigera+0xa20>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800af44:	4b2f      	ldr	r3, [pc, #188]	@ (800b004 <refrigera+0xab4>)
 800af46:	2200      	movs	r2, #0
 800af48:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800af4a:	4b40      	ldr	r3, [pc, #256]	@ (800b04c <refrigera+0xafc>)
 800af4c:	2110      	movs	r1, #16
 800af4e:	0018      	movs	r0, r3
 800af50:	f008 fc74 	bl	801383c <HAL_GPIO_ReadPin>
 800af54:	1e03      	subs	r3, r0, #0
 800af56:	d009      	beq.n	800af6c <refrigera+0xa1c>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800af58:	4b3b      	ldr	r3, [pc, #236]	@ (800b048 <refrigera+0xaf8>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800af5e:	4b29      	ldr	r3, [pc, #164]	@ (800b004 <refrigera+0xab4>)
 800af60:	2201      	movs	r2, #1
 800af62:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800af64:	4b3a      	ldr	r3, [pc, #232]	@ (800b050 <refrigera+0xb00>)
 800af66:	2200      	movs	r2, #0
 800af68:	705a      	strb	r2, [r3, #1]
			goto defap;
 800af6a:	e126      	b.n	800b1ba <refrigera+0xc6a>
            	goto no_det_door;				//	¿La puerta está abierta?
 800af6c:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800af6e:	e124      	b.n	800b1ba <refrigera+0xc6a>
            	goto do_sec;
 800af70:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800af72:	4b35      	ldr	r3, [pc, #212]	@ (800b048 <refrigera+0xaf8>)
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800af78:	2300      	movs	r3, #0
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	e00e      	b.n	800af9c <refrigera+0xa4c>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800af7e:	4a2c      	ldr	r2, [pc, #176]	@ (800b030 <refrigera+0xae0>)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	18d3      	adds	r3, r2, r3
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10e      	bne.n	800afa8 <refrigera+0xa58>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800af8a:	4a32      	ldr	r2, [pc, #200]	@ (800b054 <refrigera+0xb04>)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	18d3      	adds	r3, r2, r3
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <refrigera+0xa5c>
			for(int k=0;k<8;k++){
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3301      	adds	r3, #1
 800af9a:	60bb      	str	r3, [r7, #8]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2b07      	cmp	r3, #7
 800afa0:	dded      	ble.n	800af7e <refrigera+0xa2e>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800afa2:	e08e      	b.n	800b0c2 <refrigera+0xb72>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800afa4:	46c0      	nop			@ (mov r8, r8)
 800afa6:	e004      	b.n	800afb2 <refrigera+0xa62>
           		   goto fail_det;//jrne fail_det
 800afa8:	46c0      	nop			@ (mov r8, r8)
 800afaa:	e002      	b.n	800afb2 <refrigera+0xa62>
           		   goto fail_det; //jrne fail_det
 800afac:	46c0      	nop			@ (mov r8, r8)
 800afae:	e000      	b.n	800afb2 <refrigera+0xa62>
				goto fail_det;
 800afb0:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800afb2:	210a      	movs	r1, #10
 800afb4:	200a      	movs	r0, #10
 800afb6:	f7fc f8f3 	bl	80071a0 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800afba:	4b27      	ldr	r3, [pc, #156]	@ (800b058 <refrigera+0xb08>)
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	001a      	movs	r2, r3
 800afc2:	2340      	movs	r3, #64	@ 0x40
 800afc4:	4013      	ands	r3, r2
 800afc6:	d104      	bne.n	800afd2 <refrigera+0xa82>
			op_menu (0x1F, 0X1F);
 800afc8:	211f      	movs	r1, #31
 800afca:	201f      	movs	r0, #31
 800afcc:	f7fc f8e8 	bl	80071a0 <op_menu>
 800afd0:	e000      	b.n	800afd4 <refrigera+0xa84>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800afd2:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800afd4:	4b1c      	ldr	r3, [pc, #112]	@ (800b048 <refrigera+0xaf8>)
 800afd6:	2201      	movs	r2, #1
 800afd8:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800afda:	4b1b      	ldr	r3, [pc, #108]	@ (800b048 <refrigera+0xaf8>)
 800afdc:	2201      	movs	r2, #1
 800afde:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800afe0:	4b13      	ldr	r3, [pc, #76]	@ (800b030 <refrigera+0xae0>)
 800afe2:	79db      	ldrb	r3, [r3, #7]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d139      	bne.n	800b05c <refrigera+0xb0c>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800afe8:	4b11      	ldr	r3, [pc, #68]	@ (800b030 <refrigera+0xae0>)
 800afea:	799b      	ldrb	r3, [r3, #6]
 800afec:	2201      	movs	r2, #1
 800afee:	4053      	eors	r3, r2
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d163      	bne.n	800b0be <refrigera+0xb6e>
dpy_volt_f:
 800aff6:	e032      	b.n	800b05e <refrigera+0xb0e>
 800aff8:	0803f046 	.word	0x0803f046
 800affc:	0803f05f 	.word	0x0803f05f
 800b000:	0803f060 	.word	0x0803f060
 800b004:	20000ba0 	.word	0x20000ba0
 800b008:	0803f055 	.word	0x0803f055
 800b00c:	0803f047 	.word	0x0803f047
 800b010:	200000b8 	.word	0x200000b8
 800b014:	0803f057 	.word	0x0803f057
 800b018:	20000b65 	.word	0x20000b65
 800b01c:	20000b64 	.word	0x20000b64
 800b020:	0801e7f0 	.word	0x0801e7f0
 800b024:	0801e7f1 	.word	0x0801e7f1
 800b028:	20000b62 	.word	0x20000b62
 800b02c:	20000bb4 	.word	0x20000bb4
 800b030:	20000b98 	.word	0x20000b98
 800b034:	20000b63 	.word	0x20000b63
 800b038:	20000b7c 	.word	0x20000b7c
 800b03c:	20000c38 	.word	0x20000c38
 800b040:	20000ba8 	.word	0x20000ba8
 800b044:	20000b5b 	.word	0x20000b5b
 800b048:	20000be8 	.word	0x20000be8
 800b04c:	50000400 	.word	0x50000400
 800b050:	20000bf0 	.word	0x20000bf0
 800b054:	20000b90 	.word	0x20000b90
 800b058:	20000b5c 	.word	0x20000b5c
        	   goto dpy_volt_f;
 800b05c:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800b05e:	4bc7      	ldr	r3, [pc, #796]	@ (800b37c <refrigera+0xe2c>)
 800b060:	2200      	movs	r2, #0
 800b062:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800b064:	4bc6      	ldr	r3, [pc, #792]	@ (800b380 <refrigera+0xe30>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	001a      	movs	r2, r3
 800b06a:	2301      	movs	r3, #1
 800b06c:	4013      	ands	r3, r2
 800b06e:	d103      	bne.n	800b078 <refrigera+0xb28>
              fauto[3] = 1;					//bset		fauto,#3
 800b070:	4bc2      	ldr	r3, [pc, #776]	@ (800b37c <refrigera+0xe2c>)
 800b072:	2201      	movs	r2, #1
 800b074:	70da      	strb	r2, [r3, #3]
 800b076:	e000      	b.n	800b07a <refrigera+0xb2a>
            	  goto no_dpy_f;
 800b078:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800b07a:	4bc2      	ldr	r3, [pc, #776]	@ (800b384 <refrigera+0xe34>)
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	4bc2      	ldr	r3, [pc, #776]	@ (800b388 <refrigera+0xe38>)
 800b080:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800b082:	4bc1      	ldr	r3, [pc, #772]	@ (800b388 <refrigera+0xe38>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b63      	cmp	r3, #99	@ 0x63
 800b088:	d910      	bls.n	800b0ac <refrigera+0xb5c>
				wreg = wreg - 100;
 800b08a:	4bbf      	ldr	r3, [pc, #764]	@ (800b388 <refrigera+0xe38>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	3b64      	subs	r3, #100	@ 0x64
 800b090:	b2da      	uxtb	r2, r3
 800b092:	4bbd      	ldr	r3, [pc, #756]	@ (800b388 <refrigera+0xe38>)
 800b094:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b096:	4bbc      	ldr	r3, [pc, #752]	@ (800b388 <refrigera+0xe38>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b63      	cmp	r3, #99	@ 0x63
 800b09c:	d908      	bls.n	800b0b0 <refrigera+0xb60>
				wreg = wreg - 100;
 800b09e:	4bba      	ldr	r3, [pc, #744]	@ (800b388 <refrigera+0xe38>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	3b64      	subs	r3, #100	@ 0x64
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	4bb8      	ldr	r3, [pc, #736]	@ (800b388 <refrigera+0xe38>)
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	e002      	b.n	800b0b2 <refrigera+0xb62>
					goto under_100_f; //jrult under_100_f
 800b0ac:	46c0      	nop			@ (mov r8, r8)
 800b0ae:	e000      	b.n	800b0b2 <refrigera+0xb62>
					goto under_100_f;
 800b0b0:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800b0b2:	f7fb fa0b 	bl	80064cc <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800b0b6:	4bb5      	ldr	r3, [pc, #724]	@ (800b38c <refrigera+0xe3c>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800b0bc:	e07d      	b.n	800b1ba <refrigera+0xc6a>
        	   goto no_dpy_volt_f;
 800b0be:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800b0c0:	e07b      	b.n	800b1ba <refrigera+0xc6a>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800b0c2:	4bae      	ldr	r3, [pc, #696]	@ (800b37c <refrigera+0xe2c>)
 800b0c4:	789b      	ldrb	r3, [r3, #2]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d100      	bne.n	800b0cc <refrigera+0xb7c>
 800b0ca:	e771      	b.n	800afb0 <refrigera+0xa60>
					goto on_compres;
 800b0cc:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800b0ce:	4bb0      	ldr	r3, [pc, #704]	@ (800b390 <refrigera+0xe40>)
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800b0d4:	4bad      	ldr	r3, [pc, #692]	@ (800b38c <refrigera+0xe3c>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800b0da:	4bae      	ldr	r3, [pc, #696]	@ (800b394 <refrigera+0xe44>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b0b      	cmp	r3, #11
 800b0e0:	d864      	bhi.n	800b1ac <refrigera+0xc5c>
            	 	 goto on_desh;
 800b0e2:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800b0e4:	4baa      	ldr	r3, [pc, #680]	@ (800b390 <refrigera+0xe40>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800b0ea:	49a8      	ldr	r1, [pc, #672]	@ (800b38c <refrigera+0xe3c>)
 800b0ec:	48a7      	ldr	r0, [pc, #668]	@ (800b38c <refrigera+0xe3c>)
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	2203      	movs	r2, #3
 800b0f2:	f001 ffeb 	bl	800d0cc <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800b0f6:	4ba6      	ldr	r3, [pc, #664]	@ (800b390 <refrigera+0xe40>)
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800b0fc:	4ba3      	ldr	r3, [pc, #652]	@ (800b38c <refrigera+0xe3c>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800b102:	4ba4      	ldr	r3, [pc, #656]	@ (800b394 <refrigera+0xe44>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b09      	cmp	r3, #9
 800b108:	d852      	bhi.n	800b1b0 <refrigera+0xc60>
            		goto on_vent;//jrule on_vent
 800b10a:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800b10c:	4ba0      	ldr	r3, [pc, #640]	@ (800b390 <refrigera+0xe40>)
 800b10e:	2200      	movs	r2, #0
 800b110:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800b112:	499e      	ldr	r1, [pc, #632]	@ (800b38c <refrigera+0xe3c>)
 800b114:	489d      	ldr	r0, [pc, #628]	@ (800b38c <refrigera+0xe3c>)
 800b116:	2303      	movs	r3, #3
 800b118:	2207      	movs	r2, #7
 800b11a:	f001 ffd7 	bl	800d0cc <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800b11e:	4b9e      	ldr	r3, [pc, #632]	@ (800b398 <refrigera+0xe48>)
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800b124:	4b9b      	ldr	r3, [pc, #620]	@ (800b394 <refrigera+0xe44>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b07      	cmp	r3, #7
 800b12a:	d843      	bhi.n	800b1b4 <refrigera+0xc64>
					goto on_lamp; //jrule	on_lamp
 800b12c:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800b12e:	4b9a      	ldr	r3, [pc, #616]	@ (800b398 <refrigera+0xe48>)
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800b134:	4995      	ldr	r1, [pc, #596]	@ (800b38c <refrigera+0xe3c>)
 800b136:	4895      	ldr	r0, [pc, #596]	@ (800b38c <refrigera+0xe3c>)
 800b138:	2307      	movs	r3, #7
 800b13a:	2204      	movs	r2, #4
 800b13c:	f001 ffc6 	bl	800d0cc <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800b140:	4b93      	ldr	r3, [pc, #588]	@ (800b390 <refrigera+0xe40>)
 800b142:	2201      	movs	r2, #1
 800b144:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800b146:	4b93      	ldr	r3, [pc, #588]	@ (800b394 <refrigera+0xe44>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d834      	bhi.n	800b1b8 <refrigera+0xc68>
					goto dpy_volt; //jrule	dpy_volt
 800b14e:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800b150:	4b8f      	ldr	r3, [pc, #572]	@ (800b390 <refrigera+0xe40>)
 800b152:	2200      	movs	r2, #0
 800b154:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800b156:	4b8d      	ldr	r3, [pc, #564]	@ (800b38c <refrigera+0xe3c>)
 800b158:	2200      	movs	r2, #0
 800b15a:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800b15c:	4b89      	ldr	r3, [pc, #548]	@ (800b384 <refrigera+0xe34>)
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	4b89      	ldr	r3, [pc, #548]	@ (800b388 <refrigera+0xe38>)
 800b162:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b164:	4b88      	ldr	r3, [pc, #544]	@ (800b388 <refrigera+0xe38>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b63      	cmp	r3, #99	@ 0x63
 800b16a:	d910      	bls.n	800b18e <refrigera+0xc3e>
				wreg = wreg - 100;
 800b16c:	4b86      	ldr	r3, [pc, #536]	@ (800b388 <refrigera+0xe38>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	3b64      	subs	r3, #100	@ 0x64
 800b172:	b2da      	uxtb	r2, r3
 800b174:	4b84      	ldr	r3, [pc, #528]	@ (800b388 <refrigera+0xe38>)
 800b176:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b178:	4b83      	ldr	r3, [pc, #524]	@ (800b388 <refrigera+0xe38>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b63      	cmp	r3, #99	@ 0x63
 800b17e:	d908      	bls.n	800b192 <refrigera+0xc42>
				wreg = wreg - 100;
 800b180:	4b81      	ldr	r3, [pc, #516]	@ (800b388 <refrigera+0xe38>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	3b64      	subs	r3, #100	@ 0x64
 800b186:	b2da      	uxtb	r2, r3
 800b188:	4b7f      	ldr	r3, [pc, #508]	@ (800b388 <refrigera+0xe38>)
 800b18a:	701a      	strb	r2, [r3, #0]
 800b18c:	e002      	b.n	800b194 <refrigera+0xc44>
					goto under_100; //jrult	under_100
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	e000      	b.n	800b194 <refrigera+0xc44>
					goto under_100;
 800b192:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800b194:	f7fb f99a 	bl	80064cc <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800b198:	4b7c      	ldr	r3, [pc, #496]	@ (800b38c <refrigera+0xe3c>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800b19e:	4b77      	ldr	r3, [pc, #476]	@ (800b37c <refrigera+0xe2c>)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800b1a4:	4b75      	ldr	r3, [pc, #468]	@ (800b37c <refrigera+0xe2c>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	71da      	strb	r2, [r3, #7]
 800b1aa:	e006      	b.n	800b1ba <refrigera+0xc6a>
             	 goto defap;
 800b1ac:	46c0      	nop			@ (mov r8, r8)
 800b1ae:	e004      	b.n	800b1ba <refrigera+0xc6a>
            	goto defap;
 800b1b0:	46c0      	nop			@ (mov r8, r8)
 800b1b2:	e002      	b.n	800b1ba <refrigera+0xc6a>
				goto defap;
 800b1b4:	46c0      	nop			@ (mov r8, r8)
 800b1b6:	e000      	b.n	800b1ba <refrigera+0xc6a>
				goto defap;
 800b1b8:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800b1ba:	f7fb feef 	bl	8006f9c <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800b1be:	4b77      	ldr	r3, [pc, #476]	@ (800b39c <refrigera+0xe4c>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	001a      	movs	r2, r3
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d00c      	beq.n	800b1e4 <refrigera+0xc94>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800b1ce:	4b74      	ldr	r3, [pc, #464]	@ (800b3a0 <refrigera+0xe50>)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800b1d4:	4b73      	ldr	r3, [pc, #460]	@ (800b3a4 <refrigera+0xe54>)
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800b1da:	4b73      	ldr	r3, [pc, #460]	@ (800b3a8 <refrigera+0xe58>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800b1e0:	f7ff fbdf 	bl	800a9a2 <refrigera+0x452>
					goto finap;
 800b1e4:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800b1e6:	e442      	b.n	800aa6e <refrigera+0x51e>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800b1e8:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800b1ea:	4b68      	ldr	r3, [pc, #416]	@ (800b38c <refrigera+0xe3c>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800b1f0:	4b6e      	ldr	r3, [pc, #440]	@ (800b3ac <refrigera+0xe5c>)
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d000      	beq.n	800b1fa <refrigera+0xcaa>
 800b1f8:	e060      	b.n	800b2bc <refrigera+0xd6c>
					goto ask_door_fan; //jreq ask_door_fan
 800b1fa:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b1fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b3b0 <refrigera+0xe60>)
 800b1fe:	225b      	movs	r2, #91	@ 0x5b
 800b200:	5c9b      	ldrb	r3, [r3, r2]
 800b202:	001a      	movs	r2, r3
 800b204:	2302      	movs	r3, #2
 800b206:	4013      	ands	r3, r2
 800b208:	d108      	bne.n	800b21c <refrigera+0xccc>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800b20a:	4b6a      	ldr	r3, [pc, #424]	@ (800b3b4 <refrigera+0xe64>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d006      	beq.n	800b220 <refrigera+0xcd0>
               if(retvent == 0){ //tnz retvent
 800b212:	4b69      	ldr	r3, [pc, #420]	@ (800b3b8 <refrigera+0xe68>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d152      	bne.n	800b2c0 <refrigera+0xd70>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800b21a:	e002      	b.n	800b222 <refrigera+0xcd2>
            	   goto ask_fan_on;
 800b21c:	46c0      	nop			@ (mov r8, r8)
 800b21e:	e000      	b.n	800b222 <refrigera+0xcd2>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800b220:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800b222:	4b66      	ldr	r3, [pc, #408]	@ (800b3bc <refrigera+0xe6c>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2201      	movs	r2, #1
 800b228:	4053      	eors	r3, r2
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <refrigera+0xcea>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800b230:	4b63      	ldr	r3, [pc, #396]	@ (800b3c0 <refrigera+0xe70>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d033      	beq.n	800b2a0 <refrigera+0xd50>
					goto fan_off; //jrne fan_off
 800b238:	e047      	b.n	800b2ca <refrigera+0xd7a>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b23a:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800b23c:	4b5c      	ldr	r3, [pc, #368]	@ (800b3b0 <refrigera+0xe60>)
 800b23e:	2268      	movs	r2, #104	@ 0x68
 800b240:	5c9a      	ldrb	r2, [r3, r2]
 800b242:	4b51      	ldr	r3, [pc, #324]	@ (800b388 <refrigera+0xe38>)
 800b244:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800b246:	f7fb f955 	bl	80064f4 <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800b24a:	4b5e      	ldr	r3, [pc, #376]	@ (800b3c4 <refrigera+0xe74>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d038      	beq.n	800b2c4 <refrigera+0xd74>
					goto ciclof_00;					// No, pregunta por parte baja
 800b252:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800b254:	4b4c      	ldr	r3, [pc, #304]	@ (800b388 <refrigera+0xe38>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d023      	beq.n	800b2a4 <refrigera+0xd54>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800b25c:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b25e:	4b57      	ldr	r3, [pc, #348]	@ (800b3bc <refrigera+0xe6c>)
 800b260:	78db      	ldrb	r3, [r3, #3]
 800b262:	2201      	movs	r2, #1
 800b264:	4053      	eors	r3, r2
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00e      	beq.n	800b28a <refrigera+0xd3a>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b26c:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800b26e:	4b56      	ldr	r3, [pc, #344]	@ (800b3c8 <refrigera+0xe78>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d128      	bne.n	800b2c8 <refrigera+0xd78>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800b276:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800b278:	4b54      	ldr	r3, [pc, #336]	@ (800b3cc <refrigera+0xe7c>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d113      	bne.n	800b2a8 <refrigera+0xd58>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800b280:	4b50      	ldr	r3, [pc, #320]	@ (800b3c4 <refrigera+0xe74>)
 800b282:	781a      	ldrb	r2, [r3, #0]
 800b284:	4b51      	ldr	r3, [pc, #324]	@ (800b3cc <refrigera+0xe7c>)
 800b286:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800b288:	e011      	b.n	800b2ae <refrigera+0xd5e>
				goto ciclo_on;					/// Si, ciclo de encendido
 800b28a:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800b28c:	4b4f      	ldr	r3, [pc, #316]	@ (800b3cc <refrigera+0xe7c>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10b      	bne.n	800b2ac <refrigera+0xd5c>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800b294:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800b296:	4b3c      	ldr	r3, [pc, #240]	@ (800b388 <refrigera+0xe38>)
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c8 <refrigera+0xe78>)
 800b29c:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800b29e:	e014      	b.n	800b2ca <refrigera+0xd7a>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800b2a0:	46c0      	nop			@ (mov r8, r8)
 800b2a2:	e004      	b.n	800b2ae <refrigera+0xd5e>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800b2a4:	46c0      	nop			@ (mov r8, r8)
 800b2a6:	e002      	b.n	800b2ae <refrigera+0xd5e>
					goto fan_on; //jrne fan_on
 800b2a8:	46c0      	nop			@ (mov r8, r8)
 800b2aa:	e000      	b.n	800b2ae <refrigera+0xd5e>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800b2ac:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800b2ae:	4b3a      	ldr	r3, [pc, #232]	@ (800b398 <refrigera+0xe48>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800b2b4:	4b35      	ldr	r3, [pc, #212]	@ (800b38c <refrigera+0xe3c>)
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	71da      	strb	r2, [r3, #7]
 800b2ba:	e006      	b.n	800b2ca <refrigera+0xd7a>
				goto fan_off;
 800b2bc:	46c0      	nop			@ (mov r8, r8)
 800b2be:	e004      	b.n	800b2ca <refrigera+0xd7a>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800b2c0:	46c0      	nop			@ (mov r8, r8)
 800b2c2:	e002      	b.n	800b2ca <refrigera+0xd7a>
				goto fan_off;							// Si, manten apagado el ventilador
 800b2c4:	46c0      	nop			@ (mov r8, r8)
 800b2c6:	e000      	b.n	800b2ca <refrigera+0xd7a>
				goto fan_off;						// No, manten apagado el ventilador
 800b2c8:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800b2ca:	4b41      	ldr	r3, [pc, #260]	@ (800b3d0 <refrigera+0xe80>)
 800b2cc:	881a      	ldrh	r2, [r3, #0]
 800b2ce:	4b41      	ldr	r3, [pc, #260]	@ (800b3d4 <refrigera+0xe84>)
 800b2d0:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800b2d2:	4b41      	ldr	r3, [pc, #260]	@ (800b3d8 <refrigera+0xe88>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d107      	bne.n	800b2ea <refrigera+0xd9a>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800b2da:	4b3f      	ldr	r3, [pc, #252]	@ (800b3d8 <refrigera+0xe88>)
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4053      	eors	r3, r2
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <refrigera+0xda0>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800b2e8:	e000      	b.n	800b2ec <refrigera+0xd9c>
            	   goto control_j02;
 800b2ea:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800b2ec:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800b2ee:	e029      	b.n	800b344 <refrigera+0xdf4>
            	   goto control_j03;
 800b2f0:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800b2f2:	4b3a      	ldr	r3, [pc, #232]	@ (800b3dc <refrigera+0xe8c>)
 800b2f4:	785b      	ldrb	r3, [r3, #1]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d13a      	bne.n	800b370 <refrigera+0xe20>
ctl13:
 800b2fa:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800b2fc:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800b2fe:	f7fa fe97 	bl	8006030 <tdev_to_Word>
 800b302:	0003      	movs	r3, r0
 800b304:	b21a      	sxth	r2, r3
 800b306:	4b36      	ldr	r3, [pc, #216]	@ (800b3e0 <refrigera+0xe90>)
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	b21b      	sxth	r3, r3
 800b30c:	429a      	cmp	r2, r3
 800b30e:	db09      	blt.n	800b324 <refrigera+0xdd4>
ctl15:			//	ld			A,tminstopl;
 800b310:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800b312:	4b34      	ldr	r3, [pc, #208]	@ (800b3e4 <refrigera+0xe94>)
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d12c      	bne.n	800b374 <refrigera+0xe24>
				if(drp_comph != 0){
 800b31a:	4b33      	ldr	r3, [pc, #204]	@ (800b3e8 <refrigera+0xe98>)
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d01e      	beq.n	800b360 <refrigera+0xe10>
					goto defctl;
 800b322:	e068      	b.n	800b3f6 <refrigera+0xea6>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800b324:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800b326:	f7fa fe83 	bl	8006030 <tdev_to_Word>
 800b32a:	0003      	movs	r3, r0
 800b32c:	b21a      	sxth	r2, r3
 800b32e:	4b2f      	ldr	r3, [pc, #188]	@ (800b3ec <refrigera+0xe9c>)
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	b21b      	sxth	r3, r3
 800b334:	429a      	cmp	r2, r3
 800b336:	dc0d      	bgt.n	800b354 <refrigera+0xe04>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800b338:	4914      	ldr	r1, [pc, #80]	@ (800b38c <refrigera+0xe3c>)
 800b33a:	482d      	ldr	r0, [pc, #180]	@ (800b3f0 <refrigera+0xea0>)
 800b33c:	2306      	movs	r3, #6
 800b33e:	2207      	movs	r2, #7
 800b340:	f001 fec4 	bl	800d0cc <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b344:	4b1d      	ldr	r3, [pc, #116]	@ (800b3bc <refrigera+0xe6c>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d015      	beq.n	800b378 <refrigera+0xe28>
					goto control_j04;
 800b34c:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800b34e:	f7fa ff29 	bl	80061a4 <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800b352:	e050      	b.n	800b3f6 <refrigera+0xea6>
					goto equal;
 800b354:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b356:	4b19      	ldr	r3, [pc, #100]	@ (800b3bc <refrigera+0xe6c>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d04a      	beq.n	800b3f4 <refrigera+0xea4>
					goto control_j05;
 800b35e:	e000      	b.n	800b362 <refrigera+0xe12>
				goto on_comp;						// Enciende el compresor
 800b360:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800b362:	4b0b      	ldr	r3, [pc, #44]	@ (800b390 <refrigera+0xe40>)
 800b364:	2201      	movs	r2, #1
 800b366:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800b368:	4b08      	ldr	r3, [pc, #32]	@ (800b38c <refrigera+0xe3c>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800b36e:	e042      	b.n	800b3f6 <refrigera+0xea6>
             		 goto defctl;
 800b370:	46c0      	nop			@ (mov r8, r8)
 800b372:	e040      	b.n	800b3f6 <refrigera+0xea6>
					goto defctl;					// No, espera
 800b374:	46c0      	nop			@ (mov r8, r8)
 800b376:	e03e      	b.n	800b3f6 <refrigera+0xea6>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800b378:	46c0      	nop			@ (mov r8, r8)
 800b37a:	e03c      	b.n	800b3f6 <refrigera+0xea6>
 800b37c:	20000be8 	.word	0x20000be8
 800b380:	20000c38 	.word	0x20000c38
 800b384:	20000bde 	.word	0x20000bde
 800b388:	20000b65 	.word	0x20000b65
 800b38c:	20000ba0 	.word	0x20000ba0
 800b390:	20000bb4 	.word	0x20000bb4
 800b394:	20000b7c 	.word	0x20000b7c
 800b398:	20000bf0 	.word	0x20000bf0
 800b39c:	20000b62 	.word	0x20000b62
 800b3a0:	20000b88 	.word	0x20000b88
 800b3a4:	20000b5b 	.word	0x20000b5b
 800b3a8:	20000ba8 	.word	0x20000ba8
 800b3ac:	20000c0c 	.word	0x20000c0c
 800b3b0:	200000b8 	.word	0x200000b8
 800b3b4:	20000c37 	.word	0x20000c37
 800b3b8:	20000b7a 	.word	0x20000b7a
 800b3bc:	20000b68 	.word	0x20000b68
 800b3c0:	20000b84 	.word	0x20000b84
 800b3c4:	20000b64 	.word	0x20000b64
 800b3c8:	20000c09 	.word	0x20000c09
 800b3cc:	20000c08 	.word	0x20000c08
 800b3d0:	20000bc6 	.word	0x20000bc6
 800b3d4:	20000bca 	.word	0x20000bca
 800b3d8:	20000b98 	.word	0x20000b98
 800b3dc:	20000b90 	.word	0x20000b90
 800b3e0:	20000bbe 	.word	0x20000bbe
 800b3e4:	20000b72 	.word	0x20000b72
 800b3e8:	20000c0a 	.word	0x20000c0a
 800b3ec:	20000bbc 	.word	0x20000bbc
 800b3f0:	20000c4c 	.word	0x20000c4c
        		goto defctl;
 800b3f4:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800b3f6:	4bbe      	ldr	r3, [pc, #760]	@ (800b6f0 <refrigera+0x11a0>)
 800b3f8:	224d      	movs	r2, #77	@ 0x4d
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800b3fe:	4bbc      	ldr	r3, [pc, #752]	@ (800b6f0 <refrigera+0x11a0>)
 800b400:	224d      	movs	r2, #77	@ 0x4d
 800b402:	5c9b      	ldrb	r3, [r3, r2]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d100      	bne.n	800b40a <refrigera+0xeba>
 800b408:	e0a4      	b.n	800b554 <refrigera+0x1004>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b40a:	4bba      	ldr	r3, [pc, #744]	@ (800b6f4 <refrigera+0x11a4>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d120      	bne.n	800b454 <refrigera+0xf04>
				STM8_16_X = Plantilla[timeDefi] *60;
 800b412:	4bb7      	ldr	r3, [pc, #732]	@ (800b6f0 <refrigera+0x11a0>)
 800b414:	224d      	movs	r2, #77	@ 0x4d
 800b416:	5c9b      	ldrb	r3, [r3, r2]
 800b418:	001a      	movs	r2, r3
 800b41a:	233c      	movs	r3, #60	@ 0x3c
 800b41c:	4353      	muls	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	4bb5      	ldr	r3, [pc, #724]	@ (800b6f8 <refrigera+0x11a8>)
 800b422:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800b424:	4bb4      	ldr	r3, [pc, #720]	@ (800b6f8 <refrigera+0x11a8>)
 800b426:	881a      	ldrh	r2, [r3, #0]
 800b428:	4bb4      	ldr	r3, [pc, #720]	@ (800b6fc <refrigera+0x11ac>)
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d005      	beq.n	800b43c <refrigera+0xeec>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800b430:	4baf      	ldr	r3, [pc, #700]	@ (800b6f0 <refrigera+0x11a0>)
 800b432:	2259      	movs	r2, #89	@ 0x59
 800b434:	5c9b      	ldrb	r3, [r3, r2]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d134      	bne.n	800b4a4 <refrigera+0xf54>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800b43a:	e05c      	b.n	800b4f6 <refrigera+0xfa6>
					goto loadDefiCnts;
 800b43c:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800b43e:	4bae      	ldr	r3, [pc, #696]	@ (800b6f8 <refrigera+0x11a8>)
 800b440:	881a      	ldrh	r2, [r3, #0]
 800b442:	4bae      	ldr	r3, [pc, #696]	@ (800b6fc <refrigera+0x11ac>)
 800b444:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800b446:	4bac      	ldr	r3, [pc, #688]	@ (800b6f8 <refrigera+0x11a8>)
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	4bac      	ldr	r3, [pc, #688]	@ (800b700 <refrigera+0x11b0>)
 800b450:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800b452:	e084      	b.n	800b55e <refrigera+0x100e>
					goto chkTimeDefi;
 800b454:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800b456:	4ba6      	ldr	r3, [pc, #664]	@ (800b6f0 <refrigera+0x11a0>)
 800b458:	2259      	movs	r2, #89	@ 0x59
 800b45a:	5c9b      	ldrb	r3, [r3, r2]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d03c      	beq.n	800b4da <refrigera+0xf8a>
chkTimeDefi_1s:
 800b460:	46c0      	nop			@ (mov r8, r8)
 800b462:	e002      	b.n	800b46a <refrigera+0xf1a>
                	   goto chkTimeDefi_1s;
 800b464:	46c0      	nop			@ (mov r8, r8)
 800b466:	e000      	b.n	800b46a <refrigera+0xf1a>
                	   goto chkTimeDefi_1s;
 800b468:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800b46a:	4ba6      	ldr	r3, [pc, #664]	@ (800b704 <refrigera+0x11b4>)
 800b46c:	791b      	ldrb	r3, [r3, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d000      	beq.n	800b474 <refrigera+0xf24>
 800b472:	e066      	b.n	800b542 <refrigera+0xff2>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800b474:	4ba3      	ldr	r3, [pc, #652]	@ (800b704 <refrigera+0x11b4>)
 800b476:	795b      	ldrb	r3, [r3, #5]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d000      	beq.n	800b47e <refrigera+0xf2e>
 800b47c:	e063      	b.n	800b546 <refrigera+0xff6>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800b47e:	4b9f      	ldr	r3, [pc, #636]	@ (800b6fc <refrigera+0x11ac>)
 800b480:	881a      	ldrh	r2, [r3, #0]
 800b482:	4b9f      	ldr	r3, [pc, #636]	@ (800b700 <refrigera+0x11b0>)
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d106      	bne.n	800b498 <refrigera+0xf48>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800b48a:	f7fa fdd1 	bl	8006030 <tdev_to_Word>
 800b48e:	0003      	movs	r3, r0
 800b490:	b29a      	uxth	r2, r3
 800b492:	4b9d      	ldr	r3, [pc, #628]	@ (800b708 <refrigera+0x11b8>)
 800b494:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800b496:	e062      	b.n	800b55e <refrigera+0x100e>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800b498:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800b49a:	4b98      	ldr	r3, [pc, #608]	@ (800b6fc <refrigera+0x11ac>)
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d15a      	bne.n	800b558 <refrigera+0x1008>
chkTimeDefi_1s_02:
 800b4a2:	e000      	b.n	800b4a6 <refrigera+0xf56>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800b4a4:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800b4a6:	4b98      	ldr	r3, [pc, #608]	@ (800b708 <refrigera+0x11b8>)
 800b4a8:	881a      	ldrh	r2, [r3, #0]
 800b4aa:	4b93      	ldr	r3, [pc, #588]	@ (800b6f8 <refrigera+0x11a8>)
 800b4ac:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800b4ae:	4b92      	ldr	r3, [pc, #584]	@ (800b6f8 <refrigera+0x11a8>)
 800b4b0:	881c      	ldrh	r4, [r3, #0]
 800b4b2:	f7fa fdbd 	bl	8006030 <tdev_to_Word>
 800b4b6:	0003      	movs	r3, r0
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	1ae3      	subs	r3, r4, r3
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	4b8e      	ldr	r3, [pc, #568]	@ (800b6f8 <refrigera+0x11a8>)
 800b4c0:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800b4c2:	4b92      	ldr	r3, [pc, #584]	@ (800b70c <refrigera+0x11bc>)
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	f7fa fdcb 	bl	8006060 <TwoByteInArrayToWord>
 800b4ca:	0003      	movs	r3, r0
 800b4cc:	b21a      	sxth	r2, r3
 800b4ce:	4b8a      	ldr	r3, [pc, #552]	@ (800b6f8 <refrigera+0x11a8>)
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	dc28      	bgt.n	800b52a <refrigera+0xfda>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800b4d8:	e038      	b.n	800b54c <refrigera+0xffc>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800b4da:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800b4dc:	4b89      	ldr	r3, [pc, #548]	@ (800b704 <refrigera+0x11b4>)
 800b4de:	791b      	ldrb	r3, [r3, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1bf      	bne.n	800b464 <refrigera+0xf14>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800b4e4:	4b87      	ldr	r3, [pc, #540]	@ (800b704 <refrigera+0x11b4>)
 800b4e6:	795b      	ldrb	r3, [r3, #5]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1bd      	bne.n	800b468 <refrigera+0xf18>
                   if(cntDefi_H != 1){ //cpw X,#1
 800b4ec:	4b83      	ldr	r3, [pc, #524]	@ (800b6fc <refrigera+0x11ac>)
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d133      	bne.n	800b55c <refrigera+0x100c>
chkTimeDefi_3s_01:
 800b4f4:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800b4f6:	f7fa fd9b 	bl	8006030 <tdev_to_Word>
 800b4fa:	0003      	movs	r3, r0
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b7e      	ldr	r3, [pc, #504]	@ (800b6f8 <refrigera+0x11a8>)
 800b500:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800b502:	4b7d      	ldr	r3, [pc, #500]	@ (800b6f8 <refrigera+0x11a8>)
 800b504:	881a      	ldrh	r2, [r3, #0]
 800b506:	4b82      	ldr	r3, [pc, #520]	@ (800b710 <refrigera+0x11c0>)
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	4b7a      	ldr	r3, [pc, #488]	@ (800b6f8 <refrigera+0x11a8>)
 800b510:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800b512:	4b7e      	ldr	r3, [pc, #504]	@ (800b70c <refrigera+0x11bc>)
 800b514:	0018      	movs	r0, r3
 800b516:	f7fa fda3 	bl	8006060 <TwoByteInArrayToWord>
 800b51a:	0003      	movs	r3, r0
 800b51c:	b21a      	sxth	r2, r3
 800b51e:	4b76      	ldr	r3, [pc, #472]	@ (800b6f8 <refrigera+0x11a8>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	b21b      	sxth	r3, r3
 800b524:	429a      	cmp	r2, r3
 800b526:	dd10      	ble.n	800b54a <refrigera+0xffa>
alarmDefi:
 800b528:	e000      	b.n	800b52c <refrigera+0xfdc>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800b52a:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800b52c:	4b75      	ldr	r3, [pc, #468]	@ (800b704 <refrigera+0x11b4>)
 800b52e:	2201      	movs	r2, #1
 800b530:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800b532:	4b78      	ldr	r3, [pc, #480]	@ (800b714 <refrigera+0x11c4>)
 800b534:	2200      	movs	r2, #0
 800b536:	801a      	strh	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800b538:	4b76      	ldr	r3, [pc, #472]	@ (800b714 <refrigera+0x11c4>)
 800b53a:	881a      	ldrh	r2, [r3, #0]
 800b53c:	4b76      	ldr	r3, [pc, #472]	@ (800b718 <refrigera+0x11c8>)
 800b53e:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800b540:	e00d      	b.n	800b55e <refrigera+0x100e>
                	  goto noAlarmDefi;
 800b542:	46c0      	nop			@ (mov r8, r8)
 800b544:	e002      	b.n	800b54c <refrigera+0xffc>
                	  goto noAlarmDefi;
 800b546:	46c0      	nop			@ (mov r8, r8)
 800b548:	e000      	b.n	800b54c <refrigera+0xffc>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800b54a:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800b54c:	4b6d      	ldr	r3, [pc, #436]	@ (800b704 <refrigera+0x11b4>)
 800b54e:	2200      	movs	r2, #0
 800b550:	719a      	strb	r2, [r3, #6]
 800b552:	e004      	b.n	800b55e <refrigera+0x100e>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800b554:	46c0      	nop			@ (mov r8, r8)
 800b556:	e002      	b.n	800b55e <refrigera+0x100e>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800b558:	46c0      	nop			@ (mov r8, r8)
 800b55a:	e000      	b.n	800b55e <refrigera+0x100e>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800b55c:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800b55e:	f7fa fd67 	bl	8006030 <tdev_to_Word>
 800b562:	0003      	movs	r3, r0
 800b564:	b29a      	uxth	r2, r3
 800b566:	4b64      	ldr	r3, [pc, #400]	@ (800b6f8 <refrigera+0x11a8>)
 800b568:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800b56a:	4b6c      	ldr	r3, [pc, #432]	@ (800b71c <refrigera+0x11cc>)
 800b56c:	0018      	movs	r0, r3
 800b56e:	f7fa fd77 	bl	8006060 <TwoByteInArrayToWord>
 800b572:	0003      	movs	r3, r0
 800b574:	b21a      	sxth	r2, r3
 800b576:	4b60      	ldr	r3, [pc, #384]	@ (800b6f8 <refrigera+0x11a8>)
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	b21b      	sxth	r3, r3
 800b57c:	429a      	cmp	r2, r3
 800b57e:	dc02      	bgt.n	800b586 <refrigera+0x1036>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800b580:	f7fa fd9e 	bl	80060c0 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800b584:	e058      	b.n	800b638 <refrigera+0x10e8>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800b586:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800b588:	4b59      	ldr	r3, [pc, #356]	@ (800b6f0 <refrigera+0x11a0>)
 800b58a:	2259      	movs	r2, #89	@ 0x59
 800b58c:	5c9b      	ldrb	r3, [r3, r2]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d03c      	beq.n	800b60c <refrigera+0x10bc>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800b592:	4b63      	ldr	r3, [pc, #396]	@ (800b720 <refrigera+0x11d0>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4a62      	ldr	r2, [pc, #392]	@ (800b724 <refrigera+0x11d4>)
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	189b      	adds	r3, r3, r2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	4b55      	ldr	r3, [pc, #340]	@ (800b6f8 <refrigera+0x11a8>)
 800b5a4:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800b5a6:	4b60      	ldr	r3, [pc, #384]	@ (800b728 <refrigera+0x11d8>)
 800b5a8:	785b      	ldrb	r3, [r3, #1]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d130      	bne.n	800b610 <refrigera+0x10c0>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800b5ae:	4b5e      	ldr	r3, [pc, #376]	@ (800b728 <refrigera+0x11d8>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d12e      	bne.n	800b614 <refrigera+0x10c4>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800b5b6:	4b5d      	ldr	r3, [pc, #372]	@ (800b72c <refrigera+0x11dc>)
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f7fa fd51 	bl	8006060 <TwoByteInArrayToWord>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	b21a      	sxth	r2, r3
 800b5c2:	4b4d      	ldr	r3, [pc, #308]	@ (800b6f8 <refrigera+0x11a8>)
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	b21b      	sxth	r3, r3
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	dd25      	ble.n	800b618 <refrigera+0x10c8>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800b5cc:	4b58      	ldr	r3, [pc, #352]	@ (800b730 <refrigera+0x11e0>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	021b      	lsls	r3, r3, #8
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4a57      	ldr	r2, [pc, #348]	@ (800b734 <refrigera+0x11e4>)
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	4b46      	ldr	r3, [pc, #280]	@ (800b6f8 <refrigera+0x11a8>)
 800b5de:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800b5e0:	4b51      	ldr	r3, [pc, #324]	@ (800b728 <refrigera+0x11d8>)
 800b5e2:	78db      	ldrb	r3, [r3, #3]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d119      	bne.n	800b61c <refrigera+0x10cc>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800b5e8:	4b4f      	ldr	r3, [pc, #316]	@ (800b728 <refrigera+0x11d8>)
 800b5ea:	789b      	ldrb	r3, [r3, #2]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d117      	bne.n	800b620 <refrigera+0x10d0>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800b5f0:	4b51      	ldr	r3, [pc, #324]	@ (800b738 <refrigera+0x11e8>)
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f7fa fd34 	bl	8006060 <TwoByteInArrayToWord>
 800b5f8:	0003      	movs	r3, r0
 800b5fa:	b21a      	sxth	r2, r3
 800b5fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b6f8 <refrigera+0x11a8>)
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b21b      	sxth	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	dd01      	ble.n	800b60a <refrigera+0x10ba>
 800b606:	f7ff f9f8 	bl	800a9fa <refrigera+0x4aa>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800b60a:	e00a      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800b60c:	46c0      	nop			@ (mov r8, r8)
 800b60e:	e008      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp;
 800b610:	46c0      	nop			@ (mov r8, r8)
 800b612:	e006      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp;
 800b614:	46c0      	nop			@ (mov r8, r8)
 800b616:	e004      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800b618:	46c0      	nop			@ (mov r8, r8)
 800b61a:	e002      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp;
 800b61c:	46c0      	nop			@ (mov r8, r8)
 800b61e:	e000      	b.n	800b622 <refrigera+0x10d2>
                	  goto noDeshXTemp;
 800b620:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800b622:	f7fb fcbb 	bl	8006f9c <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800b626:	4b45      	ldr	r3, [pc, #276]	@ (800b73c <refrigera+0x11ec>)
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	001a      	movs	r2, r3
 800b62c:	2301      	movs	r3, #1
 800b62e:	4013      	ands	r3, r2
 800b630:	d001      	beq.n	800b636 <refrigera+0x10e6>
 800b632:	f7ff f9e4 	bl	800a9fe <refrigera+0x4ae>
            	   goto control_j06;
 800b636:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800b638:	4b41      	ldr	r3, [pc, #260]	@ (800b740 <refrigera+0x11f0>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <refrigera+0x1102>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800b640:	4b40      	ldr	r3, [pc, #256]	@ (800b744 <refrigera+0x11f4>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <refrigera+0x1108>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800b648:	4b3e      	ldr	r3, [pc, #248]	@ (800b744 <refrigera+0x11f4>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800b64e:	f7ff f9d7 	bl	800aa00 <refrigera+0x4b0>
					goto finctl; //jrne	finctl;
 800b652:	46c0      	nop			@ (mov r8, r8)
 800b654:	f7ff fa0b 	bl	800aa6e <refrigera+0x51e>
            		goto control_j07;
 800b658:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800b65a:	f7ff fa08 	bl	800aa6e <refrigera+0x51e>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800b65e:	4b24      	ldr	r3, [pc, #144]	@ (800b6f0 <refrigera+0x11a0>)
 800b660:	2255      	movs	r2, #85	@ 0x55
 800b662:	5c9b      	ldrb	r3, [r3, r2]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d103      	bne.n	800b670 <refrigera+0x1120>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800b668:	4b37      	ldr	r3, [pc, #220]	@ (800b748 <refrigera+0x11f8>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
 800b66e:	e000      	b.n	800b672 <refrigera+0x1122>
					goto deshie20;				/// No
 800b670:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800b672:	4b1f      	ldr	r3, [pc, #124]	@ (800b6f0 <refrigera+0x11a0>)
 800b674:	2255      	movs	r2, #85	@ 0x55
 800b676:	5c9b      	ldrb	r3, [r3, r2]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d114      	bne.n	800b6a6 <refrigera+0x1156>
deshXvent:
 800b67c:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b67e:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f0 <refrigera+0x11a0>)
 800b680:	225b      	movs	r2, #91	@ 0x5b
 800b682:	5c9b      	ldrb	r3, [r3, r2]
 800b684:	001a      	movs	r2, r3
 800b686:	2302      	movs	r3, #2
 800b688:	4013      	ands	r3, r2
 800b68a:	d104      	bne.n	800b696 <refrigera+0x1146>
				if(retvent != 0){ //tnz retvent
 800b68c:	4b2f      	ldr	r3, [pc, #188]	@ (800b74c <refrigera+0x11fc>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10d      	bne.n	800b6b0 <refrigera+0x1160>
deshie24:
 800b694:	e000      	b.n	800b698 <refrigera+0x1148>
					goto deshie24;
 800b696:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800b698:	4b2d      	ldr	r3, [pc, #180]	@ (800b750 <refrigera+0x1200>)
 800b69a:	2201      	movs	r2, #1
 800b69c:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800b69e:	4b2d      	ldr	r3, [pc, #180]	@ (800b754 <refrigera+0x1204>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800b6a4:	e005      	b.n	800b6b2 <refrigera+0x1162>
					goto deshie25;				//;		/ No, acciona el deshielo
 800b6a6:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800b6a8:	4b27      	ldr	r3, [pc, #156]	@ (800b748 <refrigera+0x11f8>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	705a      	strb	r2, [r3, #1]
 800b6ae:	e000      	b.n	800b6b2 <refrigera+0x1162>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800b6b0:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800b6b2:	4b29      	ldr	r3, [pc, #164]	@ (800b758 <refrigera+0x1208>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800b6b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <refrigera+0x11a0>)
 800b6ba:	224c      	movs	r2, #76	@ 0x4c
 800b6bc:	5c9a      	ldrb	r2, [r3, r2]
 800b6be:	4b27      	ldr	r3, [pc, #156]	@ (800b75c <refrigera+0x120c>)
 800b6c0:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800b6c2:	4b27      	ldr	r3, [pc, #156]	@ (800b760 <refrigera+0x1210>)
 800b6c4:	881a      	ldrh	r2, [r3, #0]
 800b6c6:	4b14      	ldr	r3, [pc, #80]	@ (800b718 <refrigera+0x11c8>)
 800b6c8:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800b6ca:	f7fb fc67 	bl	8006f9c <buildmode>
				 if((0x13 & modo ) == 0){
 800b6ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b73c <refrigera+0x11ec>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2213      	movs	r2, #19
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <refrigera+0x1190>
 800b6dc:	f7ff f965 	bl	800a9aa <refrigera+0x45a>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800b6e0:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	f7ff f9c3 	bl	800aa6e <refrigera+0x51e>


main_refrigera:


}
 800b6e8:	46c0      	nop			@ (mov r8, r8)
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	b007      	add	sp, #28
 800b6ee:	bd90      	pop	{r4, r7, pc}
 800b6f0:	200000b8 	.word	0x200000b8
 800b6f4:	20000b68 	.word	0x20000b68
 800b6f8:	200008e2 	.word	0x200008e2
 800b6fc:	20000c46 	.word	0x20000c46
 800b700:	20000c4a 	.word	0x20000c4a
 800b704:	20000b90 	.word	0x20000b90
 800b708:	20000c48 	.word	0x20000c48
 800b70c:	200000eb 	.word	0x200000eb
 800b710:	20000c64 	.word	0x20000c64
 800b714:	20000bc6 	.word	0x20000bc6
 800b718:	20000bca 	.word	0x20000bca
 800b71c:	200000cb 	.word	0x200000cb
 800b720:	20000bc0 	.word	0x20000bc0
 800b724:	20000bc1 	.word	0x20000bc1
 800b728:	20000b98 	.word	0x20000b98
 800b72c:	200000cf 	.word	0x200000cf
 800b730:	20000bc2 	.word	0x20000bc2
 800b734:	20000bc3 	.word	0x20000bc3
 800b738:	200000cd 	.word	0x200000cd
 800b73c:	20000b62 	.word	0x20000b62
 800b740:	20000b7b 	.word	0x20000b7b
 800b744:	20000c60 	.word	0x20000c60
 800b748:	20000bb4 	.word	0x20000bb4
 800b74c:	20000b7a 	.word	0x20000b7a
 800b750:	20000bf0 	.word	0x20000bf0
 800b754:	20000ba0 	.word	0x20000ba0
 800b758:	20000b63 	.word	0x20000b63
 800b75c:	20000bd7 	.word	0x20000bd7
 800b760:	20000bc8 	.word	0x20000bc8

0800b764 <st_refri>:

void st_refri (void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800b768:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <st_refri+0x30>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800b76e:	4b09      	ldr	r3, [pc, #36]	@ (800b794 <st_refri+0x30>)
 800b770:	2200      	movs	r2, #0
 800b772:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800b774:	4b07      	ldr	r3, [pc, #28]	@ (800b794 <st_refri+0x30>)
 800b776:	2200      	movs	r2, #0
 800b778:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800b77a:	4b07      	ldr	r3, [pc, #28]	@ (800b798 <st_refri+0x34>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800b780:	f7fa fd10 	bl	80061a4 <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800b784:	4b05      	ldr	r3, [pc, #20]	@ (800b79c <st_refri+0x38>)
 800b786:	2202      	movs	r2, #2
 800b788:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800b78a:	f7fa fc99 	bl	80060c0 <ldadaptivo>
}
 800b78e:	46c0      	nop			@ (mov r8, r8)
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000bb4 	.word	0x20000bb4
 800b798:	20000bf0 	.word	0x20000bf0
 800b79c:	20000ba8 	.word	0x20000ba8

0800b7a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7ac:	2180      	movs	r1, #128	@ 0x80
 800b7ae:	0549      	lsls	r1, r1, #21
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7b8:	2380      	movs	r3, #128	@ 0x80
 800b7ba:	055b      	lsls	r3, r3, #21
 800b7bc:	4013      	ands	r3, r2
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7c2:	4b08      	ldr	r3, [pc, #32]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b7c6:	4b07      	ldr	r3, [pc, #28]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800b7ce:	4b05      	ldr	r3, [pc, #20]	@ (800b7e4 <HAL_MspInit+0x44>)
 800b7d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	603b      	str	r3, [r7, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	b002      	add	sp, #8
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	40021000 	.word	0x40021000

0800b7e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b09d      	sub	sp, #116	@ 0x74
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7f0:	235c      	movs	r3, #92	@ 0x5c
 800b7f2:	18fb      	adds	r3, r7, r3
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	2314      	movs	r3, #20
 800b7f8:	001a      	movs	r2, r3
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	f00f fb8e 	bl	801af1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b800:	2418      	movs	r4, #24
 800b802:	193b      	adds	r3, r7, r4
 800b804:	0018      	movs	r0, r3
 800b806:	2344      	movs	r3, #68	@ 0x44
 800b808:	001a      	movs	r2, r3
 800b80a:	2100      	movs	r1, #0
 800b80c:	f00f fb86 	bl	801af1c <memset>
  if(hadc->Instance==ADC1)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a3b      	ldr	r2, [pc, #236]	@ (800b904 <HAL_ADC_MspInit+0x11c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d16f      	bne.n	800b8fa <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b81a:	193b      	adds	r3, r7, r4
 800b81c:	2280      	movs	r2, #128	@ 0x80
 800b81e:	01d2      	lsls	r2, r2, #7
 800b820:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800b822:	193b      	adds	r3, r7, r4
 800b824:	2200      	movs	r2, #0
 800b826:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b828:	193b      	adds	r3, r7, r4
 800b82a:	0018      	movs	r0, r3
 800b82c:	f00b f8b2 	bl	8016994 <HAL_RCCEx_PeriphCLKConfig>
 800b830:	1e03      	subs	r3, r0, #0
 800b832:	d001      	beq.n	800b838 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800b834:	f7fe fce6 	bl	800a204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800b838:	4b33      	ldr	r3, [pc, #204]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b83a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b83c:	4b32      	ldr	r3, [pc, #200]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b83e:	2180      	movs	r1, #128	@ 0x80
 800b840:	0349      	lsls	r1, r1, #13
 800b842:	430a      	orrs	r2, r1
 800b844:	661a      	str	r2, [r3, #96]	@ 0x60
 800b846:	4b30      	ldr	r3, [pc, #192]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b848:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b84a:	2380      	movs	r3, #128	@ 0x80
 800b84c:	035b      	lsls	r3, r3, #13
 800b84e:	4013      	ands	r3, r2
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b854:	4b2c      	ldr	r3, [pc, #176]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b858:	4b2b      	ldr	r3, [pc, #172]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b85a:	2104      	movs	r1, #4
 800b85c:	430a      	orrs	r2, r1
 800b85e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b860:	4b29      	ldr	r3, [pc, #164]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b864:	2204      	movs	r2, #4
 800b866:	4013      	ands	r3, r2
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b86c:	4b26      	ldr	r3, [pc, #152]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b86e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b870:	4b25      	ldr	r3, [pc, #148]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b872:	2101      	movs	r1, #1
 800b874:	430a      	orrs	r2, r1
 800b876:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b878:	4b23      	ldr	r3, [pc, #140]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b87a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b87c:	2201      	movs	r2, #1
 800b87e:	4013      	ands	r3, r2
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b884:	4b20      	ldr	r3, [pc, #128]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b888:	4b1f      	ldr	r3, [pc, #124]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b88a:	2102      	movs	r1, #2
 800b88c:	430a      	orrs	r2, r1
 800b88e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b890:	4b1d      	ldr	r3, [pc, #116]	@ (800b908 <HAL_ADC_MspInit+0x120>)
 800b892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b894:	2202      	movs	r2, #2
 800b896:	4013      	ands	r3, r2
 800b898:	60bb      	str	r3, [r7, #8]
 800b89a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800b89c:	245c      	movs	r4, #92	@ 0x5c
 800b89e:	193b      	adds	r3, r7, r4
 800b8a0:	2213      	movs	r2, #19
 800b8a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8a4:	193b      	adds	r3, r7, r4
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8aa:	193b      	adds	r3, r7, r4
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8b0:	193b      	adds	r3, r7, r4
 800b8b2:	4a16      	ldr	r2, [pc, #88]	@ (800b90c <HAL_ADC_MspInit+0x124>)
 800b8b4:	0019      	movs	r1, r3
 800b8b6:	0010      	movs	r0, r2
 800b8b8:	f007 fd6c 	bl	8013394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b8bc:	193b      	adds	r3, r7, r4
 800b8be:	22e0      	movs	r2, #224	@ 0xe0
 800b8c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8c2:	193b      	adds	r3, r7, r4
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8c8:	193b      	adds	r3, r7, r4
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ce:	193a      	adds	r2, r7, r4
 800b8d0:	23a0      	movs	r3, #160	@ 0xa0
 800b8d2:	05db      	lsls	r3, r3, #23
 800b8d4:	0011      	movs	r1, r2
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	f007 fd5c 	bl	8013394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b8dc:	193b      	adds	r3, r7, r4
 800b8de:	2202      	movs	r2, #2
 800b8e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8e2:	193b      	adds	r3, r7, r4
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e8:	193b      	adds	r3, r7, r4
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8ee:	193b      	adds	r3, r7, r4
 800b8f0:	4a07      	ldr	r2, [pc, #28]	@ (800b910 <HAL_ADC_MspInit+0x128>)
 800b8f2:	0019      	movs	r1, r3
 800b8f4:	0010      	movs	r0, r2
 800b8f6:	f007 fd4d 	bl	8013394 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	b01d      	add	sp, #116	@ 0x74
 800b900:	bd90      	pop	{r4, r7, pc}
 800b902:	46c0      	nop			@ (mov r8, r8)
 800b904:	40012400 	.word	0x40012400
 800b908:	40021000 	.word	0x40021000
 800b90c:	50000800 	.word	0x50000800
 800b910:	50000400 	.word	0x50000400

0800b914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b09b      	sub	sp, #108	@ 0x6c
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b91c:	2354      	movs	r3, #84	@ 0x54
 800b91e:	18fb      	adds	r3, r7, r3
 800b920:	0018      	movs	r0, r3
 800b922:	2314      	movs	r3, #20
 800b924:	001a      	movs	r2, r3
 800b926:	2100      	movs	r1, #0
 800b928:	f00f faf8 	bl	801af1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b92c:	2410      	movs	r4, #16
 800b92e:	193b      	adds	r3, r7, r4
 800b930:	0018      	movs	r0, r3
 800b932:	2344      	movs	r3, #68	@ 0x44
 800b934:	001a      	movs	r2, r3
 800b936:	2100      	movs	r1, #0
 800b938:	f00f faf0 	bl	801af1c <memset>
  if(hi2c->Instance==I2C1)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a50      	ldr	r2, [pc, #320]	@ (800ba84 <HAL_I2C_MspInit+0x170>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d000      	beq.n	800b948 <HAL_I2C_MspInit+0x34>
 800b946:	e099      	b.n	800ba7c <HAL_I2C_MspInit+0x168>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800b948:	193b      	adds	r3, r7, r4
 800b94a:	2220      	movs	r2, #32
 800b94c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800b94e:	193b      	adds	r3, r7, r4
 800b950:	2280      	movs	r2, #128	@ 0x80
 800b952:	0192      	lsls	r2, r2, #6
 800b954:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b956:	193b      	adds	r3, r7, r4
 800b958:	0018      	movs	r0, r3
 800b95a:	f00b f81b 	bl	8016994 <HAL_RCCEx_PeriphCLKConfig>
 800b95e:	1e03      	subs	r3, r0, #0
 800b960:	d001      	beq.n	800b966 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800b962:	f7fe fc4f 	bl	800a204 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b966:	4b48      	ldr	r3, [pc, #288]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b968:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b96a:	4b47      	ldr	r3, [pc, #284]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b96c:	2102      	movs	r1, #2
 800b96e:	430a      	orrs	r2, r1
 800b970:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b972:	4b45      	ldr	r3, [pc, #276]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b976:	2202      	movs	r2, #2
 800b978:	4013      	ands	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b97e:	2154      	movs	r1, #84	@ 0x54
 800b980:	187b      	adds	r3, r7, r1
 800b982:	22c0      	movs	r2, #192	@ 0xc0
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b988:	187b      	adds	r3, r7, r1
 800b98a:	2212      	movs	r2, #18
 800b98c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b98e:	187b      	adds	r3, r7, r1
 800b990:	2200      	movs	r2, #0
 800b992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b994:	187b      	adds	r3, r7, r1
 800b996:	2203      	movs	r2, #3
 800b998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b99a:	187b      	adds	r3, r7, r1
 800b99c:	2204      	movs	r2, #4
 800b99e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9a0:	187b      	adds	r3, r7, r1
 800b9a2:	4a3a      	ldr	r2, [pc, #232]	@ (800ba8c <HAL_I2C_MspInit+0x178>)
 800b9a4:	0019      	movs	r1, r3
 800b9a6:	0010      	movs	r0, r2
 800b9a8:	f007 fcf4 	bl	8013394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b9ac:	4b36      	ldr	r3, [pc, #216]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b9ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b9b0:	4b35      	ldr	r3, [pc, #212]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b9b2:	2180      	movs	r1, #128	@ 0x80
 800b9b4:	0389      	lsls	r1, r1, #14
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	659a      	str	r2, [r3, #88]	@ 0x58
 800b9ba:	4b33      	ldr	r3, [pc, #204]	@ (800ba88 <HAL_I2C_MspInit+0x174>)
 800b9bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b9be:	2380      	movs	r3, #128	@ 0x80
 800b9c0:	039b      	lsls	r3, r3, #14
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800b9c8:	4b31      	ldr	r3, [pc, #196]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9ca:	4a32      	ldr	r2, [pc, #200]	@ (800ba94 <HAL_I2C_MspInit+0x180>)
 800b9cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800b9ce:	4b30      	ldr	r3, [pc, #192]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9d0:	2209      	movs	r2, #9
 800b9d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b9d4:	4b2e      	ldr	r3, [pc, #184]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9da:	4b2d      	ldr	r3, [pc, #180]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b9e0:	4b2b      	ldr	r3, [pc, #172]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9e2:	2280      	movs	r2, #128	@ 0x80
 800b9e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9e6:	4b2a      	ldr	r3, [pc, #168]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b9ec:	4b28      	ldr	r3, [pc, #160]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800b9f2:	4b27      	ldr	r3, [pc, #156]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b9f8:	4b25      	ldr	r3, [pc, #148]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800b9fe:	4b24      	ldr	r3, [pc, #144]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800ba00:	0018      	movs	r0, r3
 800ba02:	f006 ff1b 	bl	801283c <HAL_DMA_Init>
 800ba06:	1e03      	subs	r3, r0, #0
 800ba08:	d001      	beq.n	800ba0e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800ba0a:	f7fe fbfb 	bl	800a204 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1f      	ldr	r2, [pc, #124]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800ba12:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ba14:	4b1e      	ldr	r3, [pc, #120]	@ (800ba90 <HAL_I2C_MspInit+0x17c>)
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800ba1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba1c:	4a1f      	ldr	r2, [pc, #124]	@ (800ba9c <HAL_I2C_MspInit+0x188>)
 800ba1e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800ba20:	4b1d      	ldr	r3, [pc, #116]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba22:	220a      	movs	r2, #10
 800ba24:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ba26:	4b1c      	ldr	r3, [pc, #112]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba28:	2210      	movs	r2, #16
 800ba2a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ba32:	4b19      	ldr	r3, [pc, #100]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba34:	2280      	movs	r2, #128	@ 0x80
 800ba36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba38:	4b17      	ldr	r3, [pc, #92]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba3e:	4b16      	ldr	r3, [pc, #88]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800ba44:	4b14      	ldr	r3, [pc, #80]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ba4a:	4b13      	ldr	r3, [pc, #76]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800ba50:	4b11      	ldr	r3, [pc, #68]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba52:	0018      	movs	r0, r3
 800ba54:	f006 fef2 	bl	801283c <HAL_DMA_Init>
 800ba58:	1e03      	subs	r3, r0, #0
 800ba5a:	d001      	beq.n	800ba60 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800ba5c:	f7fe fbd2 	bl	800a204 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a0d      	ldr	r2, [pc, #52]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba64:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba66:	4b0c      	ldr	r3, [pc, #48]	@ (800ba98 <HAL_I2C_MspInit+0x184>)
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2100      	movs	r1, #0
 800ba70:	2017      	movs	r0, #23
 800ba72:	f006 fea1 	bl	80127b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800ba76:	2017      	movs	r0, #23
 800ba78:	f006 feb3 	bl	80127e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800ba7c:	46c0      	nop			@ (mov r8, r8)
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b01b      	add	sp, #108	@ 0x6c
 800ba82:	bd90      	pop	{r4, r7, pc}
 800ba84:	40005400 	.word	0x40005400
 800ba88:	40021000 	.word	0x40021000
 800ba8c:	50000400 	.word	0x50000400
 800ba90:	2000049c 	.word	0x2000049c
 800ba94:	40020080 	.word	0x40020080
 800ba98:	200004fc 	.word	0x200004fc
 800ba9c:	4002006c 	.word	0x4002006c

0800baa0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a13      	ldr	r2, [pc, #76]	@ (800bafc <HAL_I2C_MspDeInit+0x5c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d120      	bne.n	800baf4 <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800bab2:	4b13      	ldr	r3, [pc, #76]	@ (800bb00 <HAL_I2C_MspDeInit+0x60>)
 800bab4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bab6:	4b12      	ldr	r3, [pc, #72]	@ (800bb00 <HAL_I2C_MspDeInit+0x60>)
 800bab8:	4912      	ldr	r1, [pc, #72]	@ (800bb04 <HAL_I2C_MspDeInit+0x64>)
 800baba:	400a      	ands	r2, r1
 800babc:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800babe:	2380      	movs	r3, #128	@ 0x80
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4a11      	ldr	r2, [pc, #68]	@ (800bb08 <HAL_I2C_MspDeInit+0x68>)
 800bac4:	0019      	movs	r1, r3
 800bac6:	0010      	movs	r0, r2
 800bac8:	f007 fdd8 	bl	801367c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800bacc:	2380      	movs	r3, #128	@ 0x80
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4a0d      	ldr	r2, [pc, #52]	@ (800bb08 <HAL_I2C_MspDeInit+0x68>)
 800bad2:	0019      	movs	r1, r3
 800bad4:	0010      	movs	r0, r2
 800bad6:	f007 fdd1 	bl	801367c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bade:	0018      	movs	r0, r3
 800bae0:	f006 ff58 	bl	8012994 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae8:	0018      	movs	r0, r3
 800baea:	f006 ff53 	bl	8012994 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800baee:	2017      	movs	r0, #23
 800baf0:	f006 fe87 	bl	8012802 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800baf4:	46c0      	nop			@ (mov r8, r8)
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b002      	add	sp, #8
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	40005400 	.word	0x40005400
 800bb00:	40021000 	.word	0x40021000
 800bb04:	ffdfffff 	.word	0xffdfffff
 800bb08:	50000400 	.word	0x50000400

0800bb0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b095      	sub	sp, #84	@ 0x54
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb14:	240c      	movs	r4, #12
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	0018      	movs	r0, r3
 800bb1a:	2344      	movs	r3, #68	@ 0x44
 800bb1c:	001a      	movs	r2, r3
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f00f f9fc 	bl	801af1c <memset>
  if(hrtc->Instance==RTC)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a1a      	ldr	r2, [pc, #104]	@ (800bb94 <HAL_RTC_MspInit+0x88>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d12e      	bne.n	800bb8c <HAL_RTC_MspInit+0x80>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bb2e:	193b      	adds	r3, r7, r4
 800bb30:	2280      	movs	r2, #128	@ 0x80
 800bb32:	0212      	lsls	r2, r2, #8
 800bb34:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800bb36:	193b      	adds	r3, r7, r4
 800bb38:	2280      	movs	r2, #128	@ 0x80
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb3e:	193b      	adds	r3, r7, r4
 800bb40:	0018      	movs	r0, r3
 800bb42:	f00a ff27 	bl	8016994 <HAL_RCCEx_PeriphCLKConfig>
 800bb46:	1e03      	subs	r3, r0, #0
 800bb48:	d001      	beq.n	800bb4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800bb4a:	f7fe fb5b 	bl	800a204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bb4e:	4a12      	ldr	r2, [pc, #72]	@ (800bb98 <HAL_RTC_MspInit+0x8c>)
 800bb50:	2390      	movs	r3, #144	@ 0x90
 800bb52:	58d3      	ldr	r3, [r2, r3]
 800bb54:	4910      	ldr	r1, [pc, #64]	@ (800bb98 <HAL_RTC_MspInit+0x8c>)
 800bb56:	2280      	movs	r2, #128	@ 0x80
 800bb58:	0212      	lsls	r2, r2, #8
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	2290      	movs	r2, #144	@ 0x90
 800bb5e:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bb60:	4b0d      	ldr	r3, [pc, #52]	@ (800bb98 <HAL_RTC_MspInit+0x8c>)
 800bb62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb64:	4b0c      	ldr	r3, [pc, #48]	@ (800bb98 <HAL_RTC_MspInit+0x8c>)
 800bb66:	2180      	movs	r1, #128	@ 0x80
 800bb68:	00c9      	lsls	r1, r1, #3
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <HAL_RTC_MspInit+0x8c>)
 800bb70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb72:	2380      	movs	r3, #128	@ 0x80
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	4013      	ands	r3, r2
 800bb78:	60bb      	str	r3, [r7, #8]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	2002      	movs	r0, #2
 800bb82:	f006 fe19 	bl	80127b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800bb86:	2002      	movs	r0, #2
 800bb88:	f006 fe2b 	bl	80127e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800bb8c:	46c0      	nop			@ (mov r8, r8)
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	b015      	add	sp, #84	@ 0x54
 800bb92:	bd90      	pop	{r4, r7, pc}
 800bb94:	40002800 	.word	0x40002800
 800bb98:	40021000 	.word	0x40021000

0800bb9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a12      	ldr	r2, [pc, #72]	@ (800bbf4 <HAL_TIM_Base_MspInit+0x58>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d10c      	bne.n	800bbc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bbae:	4b12      	ldr	r3, [pc, #72]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bbb2:	4b11      	ldr	r3, [pc, #68]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbb4:	2102      	movs	r1, #2
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbba:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800bbc6:	e010      	b.n	800bbea <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a0b      	ldr	r2, [pc, #44]	@ (800bbfc <HAL_TIM_Base_MspInit+0x60>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d10b      	bne.n	800bbea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bbd2:	4b09      	ldr	r3, [pc, #36]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bbd6:	4b08      	ldr	r3, [pc, #32]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbd8:	2110      	movs	r1, #16
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbde:	4b06      	ldr	r3, [pc, #24]	@ (800bbf8 <HAL_TIM_Base_MspInit+0x5c>)
 800bbe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbe2:	2210      	movs	r2, #16
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	60bb      	str	r3, [r7, #8]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	46bd      	mov	sp, r7
 800bbee:	b004      	add	sp, #16
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	46c0      	nop			@ (mov r8, r8)
 800bbf4:	40000400 	.word	0x40000400
 800bbf8:	40021000 	.word	0x40021000
 800bbfc:	40001000 	.word	0x40001000

0800bc00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b089      	sub	sp, #36	@ 0x24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc08:	240c      	movs	r4, #12
 800bc0a:	193b      	adds	r3, r7, r4
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	2314      	movs	r3, #20
 800bc10:	001a      	movs	r2, r3
 800bc12:	2100      	movs	r1, #0
 800bc14:	f00f f982 	bl	801af1c <memset>
  if(htim->Instance==TIM3)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a14      	ldr	r2, [pc, #80]	@ (800bc70 <HAL_TIM_MspPostInit+0x70>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d121      	bne.n	800bc66 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc22:	4b14      	ldr	r3, [pc, #80]	@ (800bc74 <HAL_TIM_MspPostInit+0x74>)
 800bc24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc26:	4b13      	ldr	r3, [pc, #76]	@ (800bc74 <HAL_TIM_MspPostInit+0x74>)
 800bc28:	2104      	movs	r1, #4
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bc2e:	4b11      	ldr	r3, [pc, #68]	@ (800bc74 <HAL_TIM_MspPostInit+0x74>)
 800bc30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc32:	2204      	movs	r2, #4
 800bc34:	4013      	ands	r3, r2
 800bc36:	60bb      	str	r3, [r7, #8]
 800bc38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800bc3a:	0021      	movs	r1, r4
 800bc3c:	187b      	adds	r3, r7, r1
 800bc3e:	2280      	movs	r2, #128	@ 0x80
 800bc40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc42:	187b      	adds	r3, r7, r1
 800bc44:	2202      	movs	r2, #2
 800bc46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc48:	187b      	adds	r3, r7, r1
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc4e:	187b      	adds	r3, r7, r1
 800bc50:	2200      	movs	r2, #0
 800bc52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bc54:	187b      	adds	r3, r7, r1
 800bc56:	2202      	movs	r2, #2
 800bc58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc5a:	187b      	adds	r3, r7, r1
 800bc5c:	4a06      	ldr	r2, [pc, #24]	@ (800bc78 <HAL_TIM_MspPostInit+0x78>)
 800bc5e:	0019      	movs	r1, r3
 800bc60:	0010      	movs	r0, r2
 800bc62:	f007 fb97 	bl	8013394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800bc66:	46c0      	nop			@ (mov r8, r8)
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	b009      	add	sp, #36	@ 0x24
 800bc6c:	bd90      	pop	{r4, r7, pc}
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	40000400 	.word	0x40000400
 800bc74:	40021000 	.word	0x40021000
 800bc78:	50000800 	.word	0x50000800

0800bc7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bc7c:	b590      	push	{r4, r7, lr}
 800bc7e:	b09d      	sub	sp, #116	@ 0x74
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc84:	235c      	movs	r3, #92	@ 0x5c
 800bc86:	18fb      	adds	r3, r7, r3
 800bc88:	0018      	movs	r0, r3
 800bc8a:	2314      	movs	r3, #20
 800bc8c:	001a      	movs	r2, r3
 800bc8e:	2100      	movs	r1, #0
 800bc90:	f00f f944 	bl	801af1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bc94:	2418      	movs	r4, #24
 800bc96:	193b      	adds	r3, r7, r4
 800bc98:	0018      	movs	r0, r3
 800bc9a:	2344      	movs	r3, #68	@ 0x44
 800bc9c:	001a      	movs	r2, r3
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f00f f93c 	bl	801af1c <memset>
  if(huart->Instance==USART2)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4aa0      	ldr	r2, [pc, #640]	@ (800bf2c <HAL_UART_MspInit+0x2b0>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d000      	beq.n	800bcb0 <HAL_UART_MspInit+0x34>
 800bcae:	e09a      	b.n	800bde6 <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bcb0:	193b      	adds	r3, r7, r4
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bcb6:	193b      	adds	r3, r7, r4
 800bcb8:	2200      	movs	r2, #0
 800bcba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bcbc:	193b      	adds	r3, r7, r4
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	f00a fe68 	bl	8016994 <HAL_RCCEx_PeriphCLKConfig>
 800bcc4:	1e03      	subs	r3, r0, #0
 800bcc6:	d001      	beq.n	800bccc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800bcc8:	f7fe fa9c 	bl	800a204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800bccc:	4b98      	ldr	r3, [pc, #608]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bcd0:	4b97      	ldr	r3, [pc, #604]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcd2:	2180      	movs	r1, #128	@ 0x80
 800bcd4:	0289      	lsls	r1, r1, #10
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	659a      	str	r2, [r3, #88]	@ 0x58
 800bcda:	4b95      	ldr	r3, [pc, #596]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bcde:	2380      	movs	r3, #128	@ 0x80
 800bce0:	029b      	lsls	r3, r3, #10
 800bce2:	4013      	ands	r3, r2
 800bce4:	617b      	str	r3, [r7, #20]
 800bce6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bce8:	4b91      	ldr	r3, [pc, #580]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcec:	4b90      	ldr	r3, [pc, #576]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcee:	2101      	movs	r1, #1
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bcf4:	4b8e      	ldr	r3, [pc, #568]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800bcf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	613b      	str	r3, [r7, #16]
 800bcfe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bd00:	215c      	movs	r1, #92	@ 0x5c
 800bd02:	187b      	adds	r3, r7, r1
 800bd04:	220c      	movs	r2, #12
 800bd06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd08:	187b      	adds	r3, r7, r1
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd0e:	187b      	adds	r3, r7, r1
 800bd10:	2200      	movs	r2, #0
 800bd12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd14:	187b      	adds	r3, r7, r1
 800bd16:	2200      	movs	r2, #0
 800bd18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bd1a:	187b      	adds	r3, r7, r1
 800bd1c:	2207      	movs	r2, #7
 800bd1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd20:	187a      	adds	r2, r7, r1
 800bd22:	23a0      	movs	r3, #160	@ 0xa0
 800bd24:	05db      	lsls	r3, r3, #23
 800bd26:	0011      	movs	r1, r2
 800bd28:	0018      	movs	r0, r3
 800bd2a:	f007 fb33 	bl	8013394 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800bd2e:	4b81      	ldr	r3, [pc, #516]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd30:	4a81      	ldr	r2, [pc, #516]	@ (800bf38 <HAL_UART_MspInit+0x2bc>)
 800bd32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800bd34:	4b7f      	ldr	r3, [pc, #508]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd36:	2247      	movs	r2, #71	@ 0x47
 800bd38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bd3a:	4b7e      	ldr	r3, [pc, #504]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd40:	4b7c      	ldr	r3, [pc, #496]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bd46:	4b7b      	ldr	r3, [pc, #492]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd48:	2280      	movs	r2, #128	@ 0x80
 800bd4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd4c:	4b79      	ldr	r3, [pc, #484]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd52:	4b78      	ldr	r3, [pc, #480]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800bd58:	4b76      	ldr	r3, [pc, #472]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bd5e:	4b75      	ldr	r3, [pc, #468]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800bd64:	4b73      	ldr	r3, [pc, #460]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd66:	0018      	movs	r0, r3
 800bd68:	f006 fd68 	bl	801283c <HAL_DMA_Init>
 800bd6c:	1e03      	subs	r3, r0, #0
 800bd6e:	d001      	beq.n	800bd74 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800bd70:	f7fe fa48 	bl	800a204 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2180      	movs	r1, #128	@ 0x80
 800bd78:	4a6e      	ldr	r2, [pc, #440]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd7a:	505a      	str	r2, [r3, r1]
 800bd7c:	4b6d      	ldr	r3, [pc, #436]	@ (800bf34 <HAL_UART_MspInit+0x2b8>)
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800bd82:	4b6e      	ldr	r3, [pc, #440]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bd84:	4a6e      	ldr	r2, [pc, #440]	@ (800bf40 <HAL_UART_MspInit+0x2c4>)
 800bd86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800bd88:	4b6c      	ldr	r3, [pc, #432]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bd8a:	2248      	movs	r2, #72	@ 0x48
 800bd8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bd8e:	4b6b      	ldr	r3, [pc, #428]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bd90:	2210      	movs	r2, #16
 800bd92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd94:	4b69      	ldr	r3, [pc, #420]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bd9a:	4b68      	ldr	r3, [pc, #416]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bd9c:	2280      	movs	r2, #128	@ 0x80
 800bd9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bda0:	4b66      	ldr	r3, [pc, #408]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bda6:	4b65      	ldr	r3, [pc, #404]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800bdac:	4b63      	ldr	r3, [pc, #396]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bdb2:	4b62      	ldr	r3, [pc, #392]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800bdb8:	4b60      	ldr	r3, [pc, #384]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bdba:	0018      	movs	r0, r3
 800bdbc:	f006 fd3e 	bl	801283c <HAL_DMA_Init>
 800bdc0:	1e03      	subs	r3, r0, #0
 800bdc2:	d001      	beq.n	800bdc8 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800bdc4:	f7fe fa1e 	bl	800a204 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a5c      	ldr	r2, [pc, #368]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bdcc:	67da      	str	r2, [r3, #124]	@ 0x7c
 800bdce:	4b5b      	ldr	r3, [pc, #364]	@ (800bf3c <HAL_UART_MspInit+0x2c0>)
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	201c      	movs	r0, #28
 800bdda:	f006 fced 	bl	80127b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800bdde:	201c      	movs	r0, #28
 800bde0:	f006 fcff 	bl	80127e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800bde4:	e09e      	b.n	800bf24 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a56      	ldr	r2, [pc, #344]	@ (800bf44 <HAL_UART_MspInit+0x2c8>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d000      	beq.n	800bdf2 <HAL_UART_MspInit+0x176>
 800bdf0:	e098      	b.n	800bf24 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800bdf2:	2118      	movs	r1, #24
 800bdf4:	187b      	adds	r3, r7, r1
 800bdf6:	2280      	movs	r2, #128	@ 0x80
 800bdf8:	0292      	lsls	r2, r2, #10
 800bdfa:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bdfc:	187b      	adds	r3, r7, r1
 800bdfe:	0018      	movs	r0, r3
 800be00:	f00a fdc8 	bl	8016994 <HAL_RCCEx_PeriphCLKConfig>
 800be04:	1e03      	subs	r3, r0, #0
 800be06:	d001      	beq.n	800be0c <HAL_UART_MspInit+0x190>
      Error_Handler();
 800be08:	f7fe f9fc 	bl	800a204 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800be0c:	4b48      	ldr	r3, [pc, #288]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be10:	4b47      	ldr	r3, [pc, #284]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be12:	2180      	movs	r1, #128	@ 0x80
 800be14:	0309      	lsls	r1, r1, #12
 800be16:	430a      	orrs	r2, r1
 800be18:	659a      	str	r2, [r3, #88]	@ 0x58
 800be1a:	4b45      	ldr	r3, [pc, #276]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be1e:	2380      	movs	r3, #128	@ 0x80
 800be20:	031b      	lsls	r3, r3, #12
 800be22:	4013      	ands	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be28:	4b41      	ldr	r3, [pc, #260]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be2c:	4b40      	ldr	r3, [pc, #256]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be2e:	2101      	movs	r1, #1
 800be30:	430a      	orrs	r2, r1
 800be32:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be34:	4b3e      	ldr	r3, [pc, #248]	@ (800bf30 <HAL_UART_MspInit+0x2b4>)
 800be36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be38:	2201      	movs	r2, #1
 800be3a:	4013      	ands	r3, r2
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800be40:	215c      	movs	r1, #92	@ 0x5c
 800be42:	187b      	adds	r3, r7, r1
 800be44:	2203      	movs	r2, #3
 800be46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	2202      	movs	r2, #2
 800be4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be4e:	187b      	adds	r3, r7, r1
 800be50:	2200      	movs	r2, #0
 800be52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be54:	187b      	adds	r3, r7, r1
 800be56:	2200      	movs	r2, #0
 800be58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800be5a:	187b      	adds	r3, r7, r1
 800be5c:	2208      	movs	r2, #8
 800be5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be60:	187a      	adds	r2, r7, r1
 800be62:	23a0      	movs	r3, #160	@ 0xa0
 800be64:	05db      	lsls	r3, r3, #23
 800be66:	0011      	movs	r1, r2
 800be68:	0018      	movs	r0, r3
 800be6a:	f007 fa93 	bl	8013394 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800be6e:	4b36      	ldr	r3, [pc, #216]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be70:	4a36      	ldr	r2, [pc, #216]	@ (800bf4c <HAL_UART_MspInit+0x2d0>)
 800be72:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800be74:	4b34      	ldr	r3, [pc, #208]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be76:	224b      	movs	r2, #75	@ 0x4b
 800be78:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be7a:	4b33      	ldr	r3, [pc, #204]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be80:	4b31      	ldr	r3, [pc, #196]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be82:	2200      	movs	r2, #0
 800be84:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800be86:	4b30      	ldr	r3, [pc, #192]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be88:	2280      	movs	r2, #128	@ 0x80
 800be8a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be8c:	4b2e      	ldr	r3, [pc, #184]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be8e:	2200      	movs	r2, #0
 800be90:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be92:	4b2d      	ldr	r3, [pc, #180]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be94:	2200      	movs	r2, #0
 800be96:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800be98:	4b2b      	ldr	r3, [pc, #172]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be9e:	4b2a      	ldr	r3, [pc, #168]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800bea4:	4b28      	ldr	r3, [pc, #160]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800bea6:	0018      	movs	r0, r3
 800bea8:	f006 fcc8 	bl	801283c <HAL_DMA_Init>
 800beac:	1e03      	subs	r3, r0, #0
 800beae:	d001      	beq.n	800beb4 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800beb0:	f7fe f9a8 	bl	800a204 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2180      	movs	r1, #128	@ 0x80
 800beb8:	4a23      	ldr	r2, [pc, #140]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800beba:	505a      	str	r2, [r3, r1]
 800bebc:	4b22      	ldr	r3, [pc, #136]	@ (800bf48 <HAL_UART_MspInit+0x2cc>)
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800bec2:	4b23      	ldr	r3, [pc, #140]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bec4:	4a23      	ldr	r2, [pc, #140]	@ (800bf54 <HAL_UART_MspInit+0x2d8>)
 800bec6:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800bec8:	4b21      	ldr	r3, [pc, #132]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800beca:	224c      	movs	r2, #76	@ 0x4c
 800becc:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bece:	4b20      	ldr	r3, [pc, #128]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bed0:	2210      	movs	r2, #16
 800bed2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bed4:	4b1e      	ldr	r3, [pc, #120]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800beda:	4b1d      	ldr	r3, [pc, #116]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bedc:	2280      	movs	r2, #128	@ 0x80
 800bede:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bee0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bee6:	4b1a      	ldr	r3, [pc, #104]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bee8:	2200      	movs	r2, #0
 800beea:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800beec:	4b18      	ldr	r3, [pc, #96]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800beee:	2200      	movs	r2, #0
 800bef0:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bef2:	4b17      	ldr	r3, [pc, #92]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800bef8:	4b15      	ldr	r3, [pc, #84]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800befa:	0018      	movs	r0, r3
 800befc:	f006 fc9e 	bl	801283c <HAL_DMA_Init>
 800bf00:	1e03      	subs	r3, r0, #0
 800bf02:	d001      	beq.n	800bf08 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800bf04:	f7fe f97e 	bl	800a204 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a11      	ldr	r2, [pc, #68]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bf0c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800bf0e:	4b10      	ldr	r3, [pc, #64]	@ (800bf50 <HAL_UART_MspInit+0x2d4>)
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800bf14:	2200      	movs	r2, #0
 800bf16:	2100      	movs	r1, #0
 800bf18:	201e      	movs	r0, #30
 800bf1a:	f006 fc4d 	bl	80127b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800bf1e:	201e      	movs	r0, #30
 800bf20:	f006 fc5f 	bl	80127e2 <HAL_NVIC_EnableIRQ>
}
 800bf24:	46c0      	nop			@ (mov r8, r8)
 800bf26:	46bd      	mov	sp, r7
 800bf28:	b01d      	add	sp, #116	@ 0x74
 800bf2a:	bd90      	pop	{r4, r7, pc}
 800bf2c:	40004400 	.word	0x40004400
 800bf30:	40021000 	.word	0x40021000
 800bf34:	20000760 	.word	0x20000760
 800bf38:	40020058 	.word	0x40020058
 800bf3c:	200007c0 	.word	0x200007c0
 800bf40:	40020044 	.word	0x40020044
 800bf44:	40004c00 	.word	0x40004c00
 800bf48:	20000820 	.word	0x20000820
 800bf4c:	4002001c 	.word	0x4002001c
 800bf50:	20000880 	.word	0x20000880
 800bf54:	40020030 	.word	0x40020030

0800bf58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bf5c:	46c0      	nop			@ (mov r8, r8)
 800bf5e:	e7fd      	b.n	800bf5c <NMI_Handler+0x4>

0800bf60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bf64:	46c0      	nop			@ (mov r8, r8)
 800bf66:	e7fd      	b.n	800bf64 <HardFault_Handler+0x4>

0800bf68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bf6c:	46c0      	nop			@ (mov r8, r8)
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bf76:	46c0      	nop			@ (mov r8, r8)
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bf80:	f005 f9c4 	bl	801130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bf84:	46c0      	nop			@ (mov r8, r8)
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800bf90:	4b03      	ldr	r3, [pc, #12]	@ (800bfa0 <RTC_TAMP_IRQHandler+0x14>)
 800bf92:	0018      	movs	r0, r3
 800bf94:	f00c f950 	bl	8018238 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800bf98:	46c0      	nop			@ (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	46c0      	nop			@ (mov r8, r8)
 800bfa0:	20000570 	.word	0x20000570

0800bfa4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800bfa8:	2380      	movs	r3, #128	@ 0x80
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	0018      	movs	r0, r3
 800bfae:	f007 fc9b 	bl	80138e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800bfb2:	46c0      	nop			@ (mov r8, r8)
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800bfbc:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	f006 fece 	bl	8012d60 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800bfc4:	4b04      	ldr	r3, [pc, #16]	@ (800bfd8 <DMA1_Channel2_3_IRQHandler+0x20>)
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f006 feca 	bl	8012d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800bfcc:	46c0      	nop			@ (mov r8, r8)
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	46c0      	nop			@ (mov r8, r8)
 800bfd4:	20000820 	.word	0x20000820
 800bfd8:	20000880 	.word	0x20000880

0800bfdc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800bfe0:	4b09      	ldr	r3, [pc, #36]	@ (800c008 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	f006 febc 	bl	8012d60 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800bfe8:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800bfea:	0018      	movs	r0, r3
 800bfec:	f006 feb8 	bl	8012d60 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800bff0:	4b07      	ldr	r3, [pc, #28]	@ (800c010 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800bff2:	0018      	movs	r0, r3
 800bff4:	f006 feb4 	bl	8012d60 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800bff8:	4b06      	ldr	r3, [pc, #24]	@ (800c014 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800bffa:	0018      	movs	r0, r3
 800bffc:	f006 feb0 	bl	8012d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800c000:	46c0      	nop			@ (mov r8, r8)
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	46c0      	nop			@ (mov r8, r8)
 800c008:	200007c0 	.word	0x200007c0
 800c00c:	20000760 	.word	0x20000760
 800c010:	200004fc 	.word	0x200004fc
 800c014:	2000049c 	.word	0x2000049c

0800c018 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c01c:	4b09      	ldr	r3, [pc, #36]	@ (800c044 <I2C1_IRQHandler+0x2c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	23e0      	movs	r3, #224	@ 0xe0
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	4013      	ands	r3, r2
 800c028:	d004      	beq.n	800c034 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c02a:	4b06      	ldr	r3, [pc, #24]	@ (800c044 <I2C1_IRQHandler+0x2c>)
 800c02c:	0018      	movs	r0, r3
 800c02e:	f007 ff95 	bl	8013f5c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c032:	e003      	b.n	800c03c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c034:	4b03      	ldr	r3, [pc, #12]	@ (800c044 <I2C1_IRQHandler+0x2c>)
 800c036:	0018      	movs	r0, r3
 800c038:	f007 ff76 	bl	8013f28 <HAL_I2C_EV_IRQHandler>
}
 800c03c:	46c0      	nop			@ (mov r8, r8)
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	20000448 	.word	0x20000448

0800c048 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c04c:	4b03      	ldr	r3, [pc, #12]	@ (800c05c <USART2_LPUART2_IRQHandler+0x14>)
 800c04e:	0018      	movs	r0, r3
 800c050:	f00d fb60 	bl	8019714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800c054:	46c0      	nop			@ (mov r8, r8)
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	46c0      	nop			@ (mov r8, r8)
 800c05c:	20000638 	.word	0x20000638

0800c060 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c064:	4b03      	ldr	r3, [pc, #12]	@ (800c074 <USART4_LPUART3_IRQHandler+0x14>)
 800c066:	0018      	movs	r0, r3
 800c068:	f00d fb54 	bl	8019714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800c06c:	46c0      	nop			@ (mov r8, r8)
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	46c0      	nop			@ (mov r8, r8)
 800c074:	200006cc 	.word	0x200006cc

0800c078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c080:	4a14      	ldr	r2, [pc, #80]	@ (800c0d4 <_sbrk+0x5c>)
 800c082:	4b15      	ldr	r3, [pc, #84]	@ (800c0d8 <_sbrk+0x60>)
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c08c:	4b13      	ldr	r3, [pc, #76]	@ (800c0dc <_sbrk+0x64>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c094:	4b11      	ldr	r3, [pc, #68]	@ (800c0dc <_sbrk+0x64>)
 800c096:	4a12      	ldr	r2, [pc, #72]	@ (800c0e0 <_sbrk+0x68>)
 800c098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c09a:	4b10      	ldr	r3, [pc, #64]	@ (800c0dc <_sbrk+0x64>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	18d3      	adds	r3, r2, r3
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d207      	bcs.n	800c0b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c0a8:	f00e ff76 	bl	801af98 <__errno>
 800c0ac:	0003      	movs	r3, r0
 800c0ae:	220c      	movs	r2, #12
 800c0b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	e009      	b.n	800c0cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c0b8:	4b08      	ldr	r3, [pc, #32]	@ (800c0dc <_sbrk+0x64>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c0be:	4b07      	ldr	r3, [pc, #28]	@ (800c0dc <_sbrk+0x64>)
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	18d2      	adds	r2, r2, r3
 800c0c6:	4b05      	ldr	r3, [pc, #20]	@ (800c0dc <_sbrk+0x64>)
 800c0c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b006      	add	sp, #24
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20008000 	.word	0x20008000
 800c0d8:	00000400 	.word	0x00000400
 800c0dc:	20001124 	.word	0x20001124
 800c0e0:	200012f0 	.word	0x200012f0

0800c0e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c0ea:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <SystemInit+0x50>)
 800c0ec:	2280      	movs	r2, #128	@ 0x80
 800c0ee:	0512      	lsls	r2, r2, #20
 800c0f0:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800c0f2:	4a11      	ldr	r2, [pc, #68]	@ (800c138 <SystemInit+0x54>)
 800c0f4:	2380      	movs	r3, #128	@ 0x80
 800c0f6:	58d3      	ldr	r3, [r2, r3]
 800c0f8:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800c0fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c138 <SystemInit+0x54>)
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	2380      	movs	r3, #128	@ 0x80
 800c104:	025b      	lsls	r3, r3, #9
 800c106:	4013      	ands	r3, r2
 800c108:	d010      	beq.n	800c12c <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	22ff      	movs	r2, #255	@ 0xff
 800c10e:	4013      	ands	r3, r2
 800c110:	2bcc      	cmp	r3, #204	@ 0xcc
 800c112:	d00b      	beq.n	800c12c <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	22ff      	movs	r2, #255	@ 0xff
 800c118:	4013      	ands	r3, r2
 800c11a:	2baa      	cmp	r3, #170	@ 0xaa
 800c11c:	d006      	beq.n	800c12c <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800c11e:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <SystemInit+0x54>)
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <SystemInit+0x54>)
 800c124:	2180      	movs	r1, #128	@ 0x80
 800c126:	02c9      	lsls	r1, r1, #11
 800c128:	430a      	orrs	r2, r1
 800c12a:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800c12c:	46c0      	nop			@ (mov r8, r8)
 800c12e:	46bd      	mov	sp, r7
 800c130:	b002      	add	sp, #8
 800c132:	bd80      	pop	{r7, pc}
 800c134:	e000ed00 	.word	0xe000ed00
 800c138:	40022000 	.word	0x40022000

0800c13c <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0


	cnttemp++;
 800c142:	4bc5      	ldr	r3, [pc, #788]	@ (800c458 <temper+0x31c>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	4bc3      	ldr	r3, [pc, #780]	@ (800c458 <temper+0x31c>)
 800c14c:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800c14e:	4bc2      	ldr	r3, [pc, #776]	@ (800c458 <temper+0x31c>)
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	4bc2      	ldr	r3, [pc, #776]	@ (800c45c <temper+0x320>)
 800c154:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800c156:	4bc1      	ldr	r3, [pc, #772]	@ (800c45c <temper+0x320>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b31      	cmp	r3, #49	@ 0x31
 800c15c:	d801      	bhi.n	800c162 <temper+0x26>
 800c15e:	f000 fd8b 	bl	800cc78 <temper+0xb3c>
		goto tempe05;  // Sí no tomes muestras
 800c162:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800c164:	4bbe      	ldr	r3, [pc, #760]	@ (800c460 <temper+0x324>)
 800c166:	0018      	movs	r0, r3
 800c168:	f7fa ff05 	bl	8006f76 <decwreg>
		decwreg(&retcncfe);
 800c16c:	4bbd      	ldr	r3, [pc, #756]	@ (800c464 <temper+0x328>)
 800c16e:	0018      	movs	r0, r3
 800c170:	f7fa ff01 	bl	8006f76 <decwreg>
		decwreg(&retcncfr);
 800c174:	4bbc      	ldr	r3, [pc, #752]	@ (800c468 <temper+0x32c>)
 800c176:	0018      	movs	r0, r3
 800c178:	f7fa fefd 	bl	8006f76 <decwreg>
		decwreg(&retcncfc);
 800c17c:	4bbb      	ldr	r3, [pc, #748]	@ (800c46c <temper+0x330>)
 800c17e:	0018      	movs	r0, r3
 800c180:	f7fa fef9 	bl	8006f76 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800c184:	4bb4      	ldr	r3, [pc, #720]	@ (800c458 <temper+0x31c>)
 800c186:	2200      	movs	r2, #0
 800c188:	701a      	strb	r2, [r3, #0]

		/*
		 * PRUEBAS DEBUGGER // Comentar de ser necesario
		 */

		ADC1->CHSELR = 0;
 800c18a:	4bb9      	ldr	r3, [pc, #740]	@ (800c470 <temper+0x334>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800c190:	4bb7      	ldr	r3, [pc, #732]	@ (800c470 <temper+0x334>)
 800c192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c194:	4bb6      	ldr	r3, [pc, #728]	@ (800c470 <temper+0x334>)
 800c196:	2180      	movs	r1, #128	@ 0x80
 800c198:	0209      	lsls	r1, r1, #8
 800c19a:	430a      	orrs	r2, r1
 800c19c:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD ();
 800c19e:	f000 ff0f 	bl	800cfc0 <capturaAD>
		tRTP1000[cntmues] = adcramh;
 800c1a2:	4bb4      	ldr	r3, [pc, #720]	@ (800c474 <temper+0x338>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	001a      	movs	r2, r3
 800c1a8:	4bb3      	ldr	r3, [pc, #716]	@ (800c478 <temper+0x33c>)
 800c1aa:	8819      	ldrh	r1, [r3, #0]
 800c1ac:	4bb3      	ldr	r3, [pc, #716]	@ (800c47c <temper+0x340>)
 800c1ae:	0052      	lsls	r2, r2, #1
 800c1b0:	52d1      	strh	r1, [r2, r3]
		if(cntmues == 7){
 800c1b2:	4bb0      	ldr	r3, [pc, #704]	@ (800c474 <temper+0x338>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b07      	cmp	r3, #7
 800c1b8:	d171      	bne.n	800c29e <temper+0x162>
			tRTP1000_p = 0;
 800c1ba:	4bb1      	ldr	r3, [pc, #708]	@ (800c480 <temper+0x344>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c1c0:	230f      	movs	r3, #15
 800c1c2:	18fb      	adds	r3, r7, r3
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	e010      	b.n	800c1ec <temper+0xb0>
				tRTP1000_p += tRTP1000[i];
 800c1ca:	210f      	movs	r1, #15
 800c1cc:	187b      	adds	r3, r7, r1
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	4baa      	ldr	r3, [pc, #680]	@ (800c47c <temper+0x340>)
 800c1d2:	0052      	lsls	r2, r2, #1
 800c1d4:	5ad2      	ldrh	r2, [r2, r3]
 800c1d6:	4baa      	ldr	r3, [pc, #680]	@ (800c480 <temper+0x344>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	18d3      	adds	r3, r2, r3
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	4ba8      	ldr	r3, [pc, #672]	@ (800c480 <temper+0x344>)
 800c1e0:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c1e2:	187b      	adds	r3, r7, r1
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	187b      	adds	r3, r7, r1
 800c1e8:	3201      	adds	r2, #1
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	230f      	movs	r3, #15
 800c1ee:	18fb      	adds	r3, r7, r3
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b07      	cmp	r3, #7
 800c1f4:	d9e9      	bls.n	800c1ca <temper+0x8e>
			}

			tRTP1000_p = tRTP1000_p/8;
 800c1f6:	4ba2      	ldr	r3, [pc, #648]	@ (800c480 <temper+0x344>)
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	08db      	lsrs	r3, r3, #3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	4ba0      	ldr	r3, [pc, #640]	@ (800c480 <temper+0x344>)
 800c200:	801a      	strh	r2, [r3, #0]
			vRTP1000_p = 330*tRTP1000_p/1024;
 800c202:	4b9f      	ldr	r3, [pc, #636]	@ (800c480 <temper+0x344>)
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	001a      	movs	r2, r3
 800c208:	0013      	movs	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	189b      	adds	r3, r3, r2
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	189b      	adds	r3, r3, r2
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	d502      	bpl.n	800c21c <temper+0xe0>
 800c216:	4a9b      	ldr	r2, [pc, #620]	@ (800c484 <temper+0x348>)
 800c218:	4694      	mov	ip, r2
 800c21a:	4463      	add	r3, ip
 800c21c:	129b      	asrs	r3, r3, #10
 800c21e:	b29a      	uxth	r2, r3
 800c220:	4b99      	ldr	r3, [pc, #612]	@ (800c488 <temper+0x34c>)
 800c222:	801a      	strh	r2, [r3, #0]
			uint32_t mul1 = vRTP1000_p+(R169/1000)*VSEN/R170;
 800c224:	4b98      	ldr	r3, [pc, #608]	@ (800c488 <temper+0x34c>)
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	4a98      	ldr	r2, [pc, #608]	@ (800c48c <temper+0x350>)
 800c22a:	4694      	mov	ip, r2
 800c22c:	4463      	add	r3, ip
 800c22e:	607b      	str	r3, [r7, #4]
			uint32_t mul2 = ((2*R169/R170+1000)*VSEN)/1000;
 800c230:	4b97      	ldr	r3, [pc, #604]	@ (800c490 <temper+0x354>)
 800c232:	603b      	str	r3, [r7, #0]
			constantRTP = 1000*mul1/mul2;
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	0013      	movs	r3, r2
 800c238:	015b      	lsls	r3, r3, #5
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	189b      	adds	r3, r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	0018      	movs	r0, r3
 800c246:	f7f3 ff67 	bl	8000118 <__udivsi3>
 800c24a:	0003      	movs	r3, r0
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	4b91      	ldr	r3, [pc, #580]	@ (800c494 <temper+0x358>)
 800c250:	801a      	strh	r2, [r3, #0]
			RTP1000 = constantRTP*R157/(1000-constantRTP);
 800c252:	4b90      	ldr	r3, [pc, #576]	@ (800c494 <temper+0x358>)
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	001a      	movs	r2, r3
 800c258:	0013      	movs	r3, r2
 800c25a:	015b      	lsls	r3, r3, #5
 800c25c:	1a9b      	subs	r3, r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	189b      	adds	r3, r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	0018      	movs	r0, r3
 800c266:	4b8b      	ldr	r3, [pc, #556]	@ (800c494 <temper+0x358>)
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	001a      	movs	r2, r3
 800c26c:	23fa      	movs	r3, #250	@ 0xfa
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	0019      	movs	r1, r3
 800c274:	f7f3 ffda 	bl	800022c <__divsi3>
 800c278:	0003      	movs	r3, r0
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	4b86      	ldr	r3, [pc, #536]	@ (800c498 <temper+0x35c>)
 800c27e:	801a      	strh	r2, [r3, #0]
			temperatureRTP = pendienteRTP*RTP1000/100 + (ordenadaRTP*10) ;
 800c280:	4b85      	ldr	r3, [pc, #532]	@ (800c498 <temper+0x35c>)
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	021b      	lsls	r3, r3, #8
 800c286:	2164      	movs	r1, #100	@ 0x64
 800c288:	0018      	movs	r0, r3
 800c28a:	f7f3 ffcf 	bl	800022c <__divsi3>
 800c28e:	0003      	movs	r3, r0
 800c290:	b29b      	uxth	r3, r3
 800c292:	4a82      	ldr	r2, [pc, #520]	@ (800c49c <temper+0x360>)
 800c294:	4694      	mov	ip, r2
 800c296:	4463      	add	r3, ip
 800c298:	b29a      	uxth	r2, r3
 800c29a:	4b81      	ldr	r3, [pc, #516]	@ (800c4a0 <temper+0x364>)
 800c29c:	801a      	strh	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c29e:	4b74      	ldr	r3, [pc, #464]	@ (800c470 <temper+0x334>)
 800c2a0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c2a2:	4b73      	ldr	r3, [pc, #460]	@ (800c470 <temper+0x334>)
 800c2a4:	2280      	movs	r2, #128	@ 0x80
 800c2a6:	01d2      	lsls	r2, r2, #7
 800c2a8:	400a      	ands	r2, r1
 800c2aa:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c2ac:	4b70      	ldr	r3, [pc, #448]	@ (800c470 <temper+0x334>)
 800c2ae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c2b0:	4b6f      	ldr	r3, [pc, #444]	@ (800c470 <temper+0x334>)
 800c2b2:	2280      	movs	r2, #128	@ 0x80
 800c2b4:	00d2      	lsls	r2, r2, #3
 800c2b6:	400a      	ands	r2, r1
 800c2b8:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c2ba:	4b6d      	ldr	r3, [pc, #436]	@ (800c470 <temper+0x334>)
 800c2bc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c2be:	4b6c      	ldr	r3, [pc, #432]	@ (800c470 <temper+0x334>)
 800c2c0:	2280      	movs	r2, #128	@ 0x80
 800c2c2:	02d2      	lsls	r2, r2, #11
 800c2c4:	400a      	ands	r2, r1
 800c2c6:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800c2c8:	4b69      	ldr	r3, [pc, #420]	@ (800c470 <temper+0x334>)
 800c2ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2cc:	4b68      	ldr	r3, [pc, #416]	@ (800c470 <temper+0x334>)
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800c2d4:	f000 fe74 	bl	800cfc0 <capturaAD>

//lookshort_S4:
		Y_A();
 800c2d8:	f000 fee2 	bl	800d0a0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800c2dc:	4b5f      	ldr	r3, [pc, #380]	@ (800c45c <temper+0x320>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d005      	beq.n	800c2f0 <temper+0x1b4>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c2e4:	4b6f      	ldr	r3, [pc, #444]	@ (800c4a4 <temper+0x368>)
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	4a6f      	ldr	r2, [pc, #444]	@ (800c4a8 <temper+0x36c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d808      	bhi.n	800c300 <temper+0x1c4>
			goto lookopen_S04;          // No, revise límite inferior
 800c2ee:	e010      	b.n	800c312 <temper+0x1d6>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800c2f0:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c2f2:	4b6c      	ldr	r3, [pc, #432]	@ (800c4a4 <temper+0x368>)
 800c2f4:	881a      	ldrh	r2, [r3, #0]
 800c2f6:	23e2      	movs	r3, #226	@ 0xe2
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d308      	bcc.n	800c310 <temper+0x1d4>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800c2fe:	e000      	b.n	800c302 <temper+0x1c6>
		goto sens_short_S04;
 800c300:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c302:	496a      	ldr	r1, [pc, #424]	@ (800c4ac <temper+0x370>)
 800c304:	486a      	ldr	r0, [pc, #424]	@ (800c4b0 <temper+0x374>)
 800c306:	2307      	movs	r3, #7
 800c308:	2205      	movs	r2, #5
 800c30a:	f000 fedf 	bl	800d0cc <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800c30e:	e01c      	b.n	800c34a <temper+0x20e>
			goto lookopen_S04;          // No, revise límite inferior
 800c310:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800c312:	4b68      	ldr	r3, [pc, #416]	@ (800c4b4 <temper+0x378>)
 800c314:	781a      	ldrb	r2, [r3, #0]
 800c316:	4b51      	ldr	r3, [pc, #324]	@ (800c45c <temper+0x320>)
 800c318:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c31a:	4b50      	ldr	r3, [pc, #320]	@ (800c45c <temper+0x320>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d004      	beq.n	800c32c <temper+0x1f0>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c322:	4b60      	ldr	r3, [pc, #384]	@ (800c4a4 <temper+0x368>)
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	2b2a      	cmp	r3, #42	@ 0x2a
 800c328:	d908      	bls.n	800c33c <temper+0x200>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c32a:	e013      	b.n	800c354 <temper+0x218>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800c32c:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800c32e:	4b5d      	ldr	r3, [pc, #372]	@ (800c4a4 <temper+0x368>)
 800c330:	881a      	ldrh	r2, [r3, #0]
 800c332:	23d7      	movs	r3, #215	@ 0xd7
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	429a      	cmp	r2, r3
 800c338:	d20b      	bcs.n	800c352 <temper+0x216>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800c33a:	e000      	b.n	800c33e <temper+0x202>
		goto sens_open_S04;
 800c33c:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800c33e:	495c      	ldr	r1, [pc, #368]	@ (800c4b0 <temper+0x374>)
 800c340:	485a      	ldr	r0, [pc, #360]	@ (800c4ac <temper+0x370>)
 800c342:	2305      	movs	r3, #5
 800c344:	2207      	movs	r2, #7
 800c346:	f000 fec1 	bl	800d0cc <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800c34a:	4b48      	ldr	r3, [pc, #288]	@ (800c46c <temper+0x330>)
 800c34c:	220f      	movs	r2, #15
 800c34e:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800c350:	e010      	b.n	800c374 <temper+0x238>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c352:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800c354:	4b45      	ldr	r3, [pc, #276]	@ (800c46c <temper+0x330>)
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	4b40      	ldr	r3, [pc, #256]	@ (800c45c <temper+0x320>)
 800c35a:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800c35c:	4b3f      	ldr	r3, [pc, #252]	@ (800c45c <temper+0x320>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <temper+0x236>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c364:	4951      	ldr	r1, [pc, #324]	@ (800c4ac <temper+0x370>)
 800c366:	4852      	ldr	r0, [pc, #328]	@ (800c4b0 <temper+0x374>)
 800c368:	2307      	movs	r3, #7
 800c36a:	2205      	movs	r2, #5
 800c36c:	f000 fec9 	bl	800d102 <Bclear_Clear_trfst>
 800c370:	e000      	b.n	800c374 <temper+0x238>
			goto tempeLoad_s04;
 800c372:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c374:	4b3f      	ldr	r3, [pc, #252]	@ (800c474 <temper+0x338>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	001a      	movs	r2, r3
 800c37a:	4b3f      	ldr	r3, [pc, #252]	@ (800c478 <temper+0x33c>)
 800c37c:	8819      	ldrh	r1, [r3, #0]
 800c37e:	4b4e      	ldr	r3, [pc, #312]	@ (800c4b8 <temper+0x37c>)
 800c380:	0052      	lsls	r2, r2, #1
 800c382:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c384:	4b3a      	ldr	r3, [pc, #232]	@ (800c470 <temper+0x334>)
 800c386:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c388:	4b39      	ldr	r3, [pc, #228]	@ (800c470 <temper+0x334>)
 800c38a:	2280      	movs	r2, #128	@ 0x80
 800c38c:	00d2      	lsls	r2, r2, #3
 800c38e:	400a      	ands	r2, r1
 800c390:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c392:	4b37      	ldr	r3, [pc, #220]	@ (800c470 <temper+0x334>)
 800c394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c396:	4b36      	ldr	r3, [pc, #216]	@ (800c470 <temper+0x334>)
 800c398:	2101      	movs	r1, #1
 800c39a:	400a      	ands	r2, r1
 800c39c:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c39e:	4b34      	ldr	r3, [pc, #208]	@ (800c470 <temper+0x334>)
 800c3a0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c3a2:	4b33      	ldr	r3, [pc, #204]	@ (800c470 <temper+0x334>)
 800c3a4:	2280      	movs	r2, #128	@ 0x80
 800c3a6:	02d2      	lsls	r2, r2, #11
 800c3a8:	400a      	ands	r2, r1
 800c3aa:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800c3ac:	4b30      	ldr	r3, [pc, #192]	@ (800c470 <temper+0x334>)
 800c3ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c3b0:	4b2f      	ldr	r3, [pc, #188]	@ (800c470 <temper+0x334>)
 800c3b2:	2180      	movs	r1, #128	@ 0x80
 800c3b4:	02c9      	lsls	r1, r1, #11
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800c3ba:	f000 fe01 	bl	800cfc0 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800c3be:	f000 fe6f 	bl	800d0a0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800c3c2:	4b26      	ldr	r3, [pc, #152]	@ (800c45c <temper+0x320>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d005      	beq.n	800c3d6 <temper+0x29a>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c3ca:	4b36      	ldr	r3, [pc, #216]	@ (800c4a4 <temper+0x368>)
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	4a3b      	ldr	r2, [pc, #236]	@ (800c4bc <temper+0x380>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d808      	bhi.n	800c3e6 <temper+0x2aa>
		goto lookopen_S03;      // No, revise límite inferior
 800c3d4:	e010      	b.n	800c3f8 <temper+0x2bc>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800c3d6:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c3d8:	4b32      	ldr	r3, [pc, #200]	@ (800c4a4 <temper+0x368>)
 800c3da:	881a      	ldrh	r2, [r3, #0]
 800c3dc:	23e2      	movs	r3, #226	@ 0xe2
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d308      	bcc.n	800c3f6 <temper+0x2ba>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800c3e4:	e000      	b.n	800c3e8 <temper+0x2ac>
	goto sens_short_S03;
 800c3e6:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800c3e8:	4930      	ldr	r1, [pc, #192]	@ (800c4ac <temper+0x370>)
 800c3ea:	4830      	ldr	r0, [pc, #192]	@ (800c4ac <temper+0x370>)
 800c3ec:	2305      	movs	r3, #5
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	f000 fe6c 	bl	800d0cc <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800c3f4:	e01c      	b.n	800c430 <temper+0x2f4>
			goto lookopen_S03; // No, revise límite inferior
 800c3f6:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800c3f8:	4b2e      	ldr	r3, [pc, #184]	@ (800c4b4 <temper+0x378>)
 800c3fa:	781a      	ldrb	r2, [r3, #0]
 800c3fc:	4b17      	ldr	r3, [pc, #92]	@ (800c45c <temper+0x320>)
 800c3fe:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c400:	4b16      	ldr	r3, [pc, #88]	@ (800c45c <temper+0x320>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d004      	beq.n	800c412 <temper+0x2d6>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800c408:	4b26      	ldr	r3, [pc, #152]	@ (800c4a4 <temper+0x368>)
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c40e:	d908      	bls.n	800c422 <temper+0x2e6>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800c410:	e013      	b.n	800c43a <temper+0x2fe>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800c412:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c414:	4b23      	ldr	r3, [pc, #140]	@ (800c4a4 <temper+0x368>)
 800c416:	881a      	ldrh	r2, [r3, #0]
 800c418:	23d7      	movs	r3, #215	@ 0xd7
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d20b      	bcs.n	800c438 <temper+0x2fc>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800c420:	e000      	b.n	800c424 <temper+0x2e8>
		goto sens_open_S03;
 800c422:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800c424:	4921      	ldr	r1, [pc, #132]	@ (800c4ac <temper+0x370>)
 800c426:	4821      	ldr	r0, [pc, #132]	@ (800c4ac <temper+0x370>)
 800c428:	2304      	movs	r3, #4
 800c42a:	2205      	movs	r2, #5
 800c42c:	f000 fe4e 	bl	800d0cc <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800c430:	4b0d      	ldr	r3, [pc, #52]	@ (800c468 <temper+0x32c>)
 800c432:	220f      	movs	r2, #15
 800c434:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800c436:	e044      	b.n	800c4c2 <temper+0x386>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800c438:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800c43a:	4b0b      	ldr	r3, [pc, #44]	@ (800c468 <temper+0x32c>)
 800c43c:	781a      	ldrb	r2, [r3, #0]
 800c43e:	4b07      	ldr	r3, [pc, #28]	@ (800c45c <temper+0x320>)
 800c440:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800c442:	4b06      	ldr	r3, [pc, #24]	@ (800c45c <temper+0x320>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d13a      	bne.n	800c4c0 <temper+0x384>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800c44a:	4918      	ldr	r1, [pc, #96]	@ (800c4ac <temper+0x370>)
 800c44c:	4817      	ldr	r0, [pc, #92]	@ (800c4ac <temper+0x370>)
 800c44e:	2305      	movs	r3, #5
 800c450:	2204      	movs	r2, #4
 800c452:	f000 fe56 	bl	800d102 <Bclear_Clear_trfst>
 800c456:	e034      	b.n	800c4c2 <temper+0x386>
 800c458:	20000bcf 	.word	0x20000bcf
 800c45c:	20001176 	.word	0x20001176
 800c460:	20000bd4 	.word	0x20000bd4
 800c464:	20000bd5 	.word	0x20000bd5
 800c468:	20000c62 	.word	0x20000c62
 800c46c:	20000c63 	.word	0x20000c63
 800c470:	40012400 	.word	0x40012400
 800c474:	20000bd0 	.word	0x20000bd0
 800c478:	20000b70 	.word	0x20000b70
 800c47c:	20000254 	.word	0x20000254
 800c480:	20001128 	.word	0x20001128
 800c484:	000003ff 	.word	0x000003ff
 800c488:	2000112a 	.word	0x2000112a
 800c48c:	000003e2 	.word	0x000003e2
 800c490:	00000903 	.word	0x00000903
 800c494:	2000112c 	.word	0x2000112c
 800c498:	2000112e 	.word	0x2000112e
 800c49c:	fffff600 	.word	0xfffff600
 800c4a0:	20001130 	.word	0x20001130
 800c4a4:	20001178 	.word	0x20001178
 800c4a8:	000003ad 	.word	0x000003ad
 800c4ac:	20000b90 	.word	0x20000b90
 800c4b0:	20000b98 	.word	0x20000b98
 800c4b4:	20000ba8 	.word	0x20000ba8
 800c4b8:	20001134 	.word	0x20001134
 800c4bc:	000003b5 	.word	0x000003b5
			goto tempeLoad_s03;
 800c4c0:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c4c2:	4bd0      	ldr	r3, [pc, #832]	@ (800c804 <temper+0x6c8>)
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	001a      	movs	r2, r3
 800c4c8:	4bcf      	ldr	r3, [pc, #828]	@ (800c808 <temper+0x6cc>)
 800c4ca:	8819      	ldrh	r1, [r3, #0]
 800c4cc:	4bcf      	ldr	r3, [pc, #828]	@ (800c80c <temper+0x6d0>)
 800c4ce:	0052      	lsls	r2, r2, #1
 800c4d0:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c4d2:	4bcf      	ldr	r3, [pc, #828]	@ (800c810 <temper+0x6d4>)
 800c4d4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c4d6:	4bce      	ldr	r3, [pc, #824]	@ (800c810 <temper+0x6d4>)
 800c4d8:	2280      	movs	r2, #128	@ 0x80
 800c4da:	01d2      	lsls	r2, r2, #7
 800c4dc:	400a      	ands	r2, r1
 800c4de:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c4e0:	4bcb      	ldr	r3, [pc, #812]	@ (800c810 <temper+0x6d4>)
 800c4e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4e4:	4bca      	ldr	r3, [pc, #808]	@ (800c810 <temper+0x6d4>)
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	400a      	ands	r2, r1
 800c4ea:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c4ec:	4bc8      	ldr	r3, [pc, #800]	@ (800c810 <temper+0x6d4>)
 800c4ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c4f0:	4bc7      	ldr	r3, [pc, #796]	@ (800c810 <temper+0x6d4>)
 800c4f2:	2280      	movs	r2, #128	@ 0x80
 800c4f4:	02d2      	lsls	r2, r2, #11
 800c4f6:	400a      	ands	r2, r1
 800c4f8:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800c4fa:	4bc5      	ldr	r3, [pc, #788]	@ (800c810 <temper+0x6d4>)
 800c4fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4fe:	4bc4      	ldr	r3, [pc, #784]	@ (800c810 <temper+0x6d4>)
 800c500:	2180      	movs	r1, #128	@ 0x80
 800c502:	00c9      	lsls	r1, r1, #3
 800c504:	430a      	orrs	r2, r1
 800c506:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800c508:	f000 fd5a 	bl	800cfc0 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800c50c:	f000 fdc8 	bl	800d0a0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800c510:	4bc0      	ldr	r3, [pc, #768]	@ (800c814 <temper+0x6d8>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d005      	beq.n	800c524 <temper+0x3e8>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c518:	4bbf      	ldr	r3, [pc, #764]	@ (800c818 <temper+0x6dc>)
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	4abf      	ldr	r2, [pc, #764]	@ (800c81c <temper+0x6e0>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d808      	bhi.n	800c534 <temper+0x3f8>
			goto lookopen;     // No, revise límite inferior
 800c522:	e010      	b.n	800c546 <temper+0x40a>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800c524:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c526:	4bbc      	ldr	r3, [pc, #752]	@ (800c818 <temper+0x6dc>)
 800c528:	881a      	ldrh	r2, [r3, #0]
 800c52a:	23e2      	movs	r3, #226	@ 0xe2
 800c52c:	005b      	lsls	r3, r3, #1
 800c52e:	429a      	cmp	r2, r3
 800c530:	d308      	bcc.n	800c544 <temper+0x408>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800c532:	e000      	b.n	800c536 <temper+0x3fa>
		goto sens_short;
 800c534:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800c536:	49ba      	ldr	r1, [pc, #744]	@ (800c820 <temper+0x6e4>)
 800c538:	48b9      	ldr	r0, [pc, #740]	@ (800c820 <temper+0x6e4>)
 800c53a:	2301      	movs	r3, #1
 800c53c:	2200      	movs	r2, #0
 800c53e:	f000 fdc5 	bl	800d0cc <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800c542:	e01c      	b.n	800c57e <temper+0x442>
			goto lookopen;     // No, revise límite inferior
 800c544:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800c546:	4bb7      	ldr	r3, [pc, #732]	@ (800c824 <temper+0x6e8>)
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	4bb2      	ldr	r3, [pc, #712]	@ (800c814 <temper+0x6d8>)
 800c54c:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c54e:	4bb1      	ldr	r3, [pc, #708]	@ (800c814 <temper+0x6d8>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d004      	beq.n	800c560 <temper+0x424>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c556:	4bb0      	ldr	r3, [pc, #704]	@ (800c818 <temper+0x6dc>)
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c55c:	d908      	bls.n	800c570 <temper+0x434>
			goto sens_ok;       // Sí, indica sensor OK
 800c55e:	e016      	b.n	800c58e <temper+0x452>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800c560:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c562:	4bad      	ldr	r3, [pc, #692]	@ (800c818 <temper+0x6dc>)
 800c564:	881a      	ldrh	r2, [r3, #0]
 800c566:	23d7      	movs	r3, #215	@ 0xd7
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d20e      	bcs.n	800c58c <temper+0x450>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800c56e:	e000      	b.n	800c572 <temper+0x436>
		goto sens_open;
 800c570:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800c572:	49ab      	ldr	r1, [pc, #684]	@ (800c820 <temper+0x6e4>)
 800c574:	48aa      	ldr	r0, [pc, #680]	@ (800c820 <temper+0x6e4>)
 800c576:	2300      	movs	r3, #0
 800c578:	2201      	movs	r2, #1
 800c57a:	f000 fda7 	bl	800d0cc <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800c57e:	4baa      	ldr	r3, [pc, #680]	@ (800c828 <temper+0x6ec>)
 800c580:	220f      	movs	r2, #15
 800c582:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800c584:	4ba9      	ldr	r3, [pc, #676]	@ (800c82c <temper+0x6f0>)
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800c58a:	e010      	b.n	800c5ae <temper+0x472>
			goto sens_ok;       // Sí, indica sensor OK
 800c58c:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800c58e:	4ba6      	ldr	r3, [pc, #664]	@ (800c828 <temper+0x6ec>)
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	4ba0      	ldr	r3, [pc, #640]	@ (800c814 <temper+0x6d8>)
 800c594:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800c596:	4b9f      	ldr	r3, [pc, #636]	@ (800c814 <temper+0x6d8>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <temper+0x470>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800c59e:	49a0      	ldr	r1, [pc, #640]	@ (800c820 <temper+0x6e4>)
 800c5a0:	489f      	ldr	r0, [pc, #636]	@ (800c820 <temper+0x6e4>)
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f000 fdac 	bl	800d102 <Bclear_Clear_trfst>
 800c5aa:	e000      	b.n	800c5ae <temper+0x472>
			goto tempe13;
 800c5ac:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c5ae:	4b95      	ldr	r3, [pc, #596]	@ (800c804 <temper+0x6c8>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	001a      	movs	r2, r3
 800c5b4:	4b94      	ldr	r3, [pc, #592]	@ (800c808 <temper+0x6cc>)
 800c5b6:	8819      	ldrh	r1, [r3, #0]
 800c5b8:	4b9d      	ldr	r3, [pc, #628]	@ (800c830 <temper+0x6f4>)
 800c5ba:	0052      	lsls	r2, r2, #1
 800c5bc:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c5be:	4b94      	ldr	r3, [pc, #592]	@ (800c810 <temper+0x6d4>)
 800c5c0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c5c2:	4b93      	ldr	r3, [pc, #588]	@ (800c810 <temper+0x6d4>)
 800c5c4:	2280      	movs	r2, #128	@ 0x80
 800c5c6:	00d2      	lsls	r2, r2, #3
 800c5c8:	400a      	ands	r2, r1
 800c5ca:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c5cc:	4b90      	ldr	r3, [pc, #576]	@ (800c810 <temper+0x6d4>)
 800c5ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5d0:	4b8f      	ldr	r3, [pc, #572]	@ (800c810 <temper+0x6d4>)
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	400a      	ands	r2, r1
 800c5d6:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c5d8:	4b8d      	ldr	r3, [pc, #564]	@ (800c810 <temper+0x6d4>)
 800c5da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c5dc:	4b8c      	ldr	r3, [pc, #560]	@ (800c810 <temper+0x6d4>)
 800c5de:	2280      	movs	r2, #128	@ 0x80
 800c5e0:	02d2      	lsls	r2, r2, #11
 800c5e2:	400a      	ands	r2, r1
 800c5e4:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800c5e6:	4b8a      	ldr	r3, [pc, #552]	@ (800c810 <temper+0x6d4>)
 800c5e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5ea:	4b89      	ldr	r3, [pc, #548]	@ (800c810 <temper+0x6d4>)
 800c5ec:	2180      	movs	r1, #128	@ 0x80
 800c5ee:	01c9      	lsls	r1, r1, #7
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800c5f4:	f000 fce4 	bl	800cfc0 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800c5f8:	f000 fd52 	bl	800d0a0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800c5fc:	4b85      	ldr	r3, [pc, #532]	@ (800c814 <temper+0x6d8>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d005      	beq.n	800c610 <temper+0x4d4>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c604:	4b84      	ldr	r3, [pc, #528]	@ (800c818 <temper+0x6dc>)
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	4a84      	ldr	r2, [pc, #528]	@ (800c81c <temper+0x6e0>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d808      	bhi.n	800c620 <temper+0x4e4>
		goto lookopene;    // No, revise límite inferior
 800c60e:	e010      	b.n	800c632 <temper+0x4f6>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800c610:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c612:	4b81      	ldr	r3, [pc, #516]	@ (800c818 <temper+0x6dc>)
 800c614:	881a      	ldrh	r2, [r3, #0]
 800c616:	23e2      	movs	r3, #226	@ 0xe2
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d308      	bcc.n	800c630 <temper+0x4f4>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800c61e:	e000      	b.n	800c622 <temper+0x4e6>
	goto senshorte;
 800c620:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800c622:	497f      	ldr	r1, [pc, #508]	@ (800c820 <temper+0x6e4>)
 800c624:	487e      	ldr	r0, [pc, #504]	@ (800c820 <temper+0x6e4>)
 800c626:	2303      	movs	r3, #3
 800c628:	2202      	movs	r2, #2
 800c62a:	f000 fd4f 	bl	800d0cc <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800c62e:	e01c      	b.n	800c66a <temper+0x52e>
		goto lookopene;    // No, revise límite inferior
 800c630:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800c632:	4b7c      	ldr	r3, [pc, #496]	@ (800c824 <temper+0x6e8>)
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	4b77      	ldr	r3, [pc, #476]	@ (800c814 <temper+0x6d8>)
 800c638:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800c63a:	4b76      	ldr	r3, [pc, #472]	@ (800c814 <temper+0x6d8>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d004      	beq.n	800c64c <temper+0x510>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c642:	4b75      	ldr	r3, [pc, #468]	@ (800c818 <temper+0x6dc>)
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	2b2a      	cmp	r3, #42	@ 0x2a
 800c648:	d908      	bls.n	800c65c <temper+0x520>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800c64a:	e013      	b.n	800c674 <temper+0x538>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800c64c:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c64e:	4b72      	ldr	r3, [pc, #456]	@ (800c818 <temper+0x6dc>)
 800c650:	881a      	ldrh	r2, [r3, #0]
 800c652:	23d7      	movs	r3, #215	@ 0xd7
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	429a      	cmp	r2, r3
 800c658:	d20b      	bcs.n	800c672 <temper+0x536>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800c65a:	e000      	b.n	800c65e <temper+0x522>
	goto sens_opene;
 800c65c:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800c65e:	4970      	ldr	r1, [pc, #448]	@ (800c820 <temper+0x6e4>)
 800c660:	486f      	ldr	r0, [pc, #444]	@ (800c820 <temper+0x6e4>)
 800c662:	2302      	movs	r3, #2
 800c664:	2203      	movs	r2, #3
 800c666:	f000 fd31 	bl	800d0cc <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800c66a:	4b72      	ldr	r3, [pc, #456]	@ (800c834 <temper+0x6f8>)
 800c66c:	2214      	movs	r2, #20
 800c66e:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800c670:	e010      	b.n	800c694 <temper+0x558>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800c672:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800c674:	4b6f      	ldr	r3, [pc, #444]	@ (800c834 <temper+0x6f8>)
 800c676:	781a      	ldrb	r2, [r3, #0]
 800c678:	4b66      	ldr	r3, [pc, #408]	@ (800c814 <temper+0x6d8>)
 800c67a:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800c67c:	4b65      	ldr	r3, [pc, #404]	@ (800c814 <temper+0x6d8>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d106      	bne.n	800c692 <temper+0x556>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800c684:	4966      	ldr	r1, [pc, #408]	@ (800c820 <temper+0x6e4>)
 800c686:	4866      	ldr	r0, [pc, #408]	@ (800c820 <temper+0x6e4>)
 800c688:	2303      	movs	r3, #3
 800c68a:	2202      	movs	r2, #2
 800c68c:	f000 fd39 	bl	800d102 <Bclear_Clear_trfst>
 800c690:	e000      	b.n	800c694 <temper+0x558>
		goto tempe16;
 800c692:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800c694:	4b62      	ldr	r3, [pc, #392]	@ (800c820 <temper+0x6e4>)
 800c696:	789b      	ldrb	r3, [r3, #2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d004      	beq.n	800c6a6 <temper+0x56a>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800c69c:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800c69e:	4b5a      	ldr	r3, [pc, #360]	@ (800c808 <temper+0x6cc>)
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	801a      	strh	r2, [r3, #0]
 800c6a4:	e000      	b.n	800c6a8 <temper+0x56c>
	goto tempe16a;                 // No, revisa temperatura alta
 800c6a6:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c6a8:	4b56      	ldr	r3, [pc, #344]	@ (800c804 <temper+0x6c8>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	001a      	movs	r2, r3
 800c6ae:	4b56      	ldr	r3, [pc, #344]	@ (800c808 <temper+0x6cc>)
 800c6b0:	8819      	ldrh	r1, [r3, #0]
 800c6b2:	4b61      	ldr	r3, [pc, #388]	@ (800c838 <temper+0x6fc>)
 800c6b4:	0052      	lsls	r2, r2, #1
 800c6b6:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800c6b8:	4b52      	ldr	r3, [pc, #328]	@ (800c804 <temper+0x6c8>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	4b50      	ldr	r3, [pc, #320]	@ (800c804 <temper+0x6c8>)
 800c6c2:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800c6c4:	4b4f      	ldr	r3, [pc, #316]	@ (800c804 <temper+0x6c8>)
 800c6c6:	781a      	ldrb	r2, [r3, #0]
 800c6c8:	4b52      	ldr	r3, [pc, #328]	@ (800c814 <temper+0x6d8>)
 800c6ca:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800c6cc:	4b51      	ldr	r3, [pc, #324]	@ (800c814 <temper+0x6d8>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b07      	cmp	r3, #7
 800c6d2:	d800      	bhi.n	800c6d6 <temper+0x59a>
 800c6d4:	e2d2      	b.n	800cc7c <temper+0xb40>
			goto tempe17;  // Si, obten el promedio
 800c6d6:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800c6d8:	4b58      	ldr	r3, [pc, #352]	@ (800c83c <temper+0x700>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c6de:	230e      	movs	r3, #14
 800c6e0:	18fb      	adds	r3, r7, r3
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	e010      	b.n	800c70a <temper+0x5ce>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800c6e8:	210e      	movs	r1, #14
 800c6ea:	187b      	adds	r3, r7, r1
 800c6ec:	781a      	ldrb	r2, [r3, #0]
 800c6ee:	4b54      	ldr	r3, [pc, #336]	@ (800c840 <temper+0x704>)
 800c6f0:	0052      	lsls	r2, r2, #1
 800c6f2:	5ad2      	ldrh	r2, [r2, r3]
 800c6f4:	4b51      	ldr	r3, [pc, #324]	@ (800c83c <temper+0x700>)
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	18d3      	adds	r3, r2, r3
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	4b4f      	ldr	r3, [pc, #316]	@ (800c83c <temper+0x700>)
 800c6fe:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c700:	187b      	adds	r3, r7, r1
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	187b      	adds	r3, r7, r1
 800c706:	3201      	adds	r2, #1
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	230e      	movs	r3, #14
 800c70c:	18fb      	adds	r3, r7, r3
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b07      	cmp	r3, #7
 800c712:	d9e9      	bls.n	800c6e8 <temper+0x5ac>
	}
	resul = resul / 8;
 800c714:	4b49      	ldr	r3, [pc, #292]	@ (800c83c <temper+0x700>)
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	08db      	lsrs	r3, r3, #3
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	4b47      	ldr	r3, [pc, #284]	@ (800c83c <temper+0x700>)
 800c71e:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c720:	f000 fb16 	bl	800cd50 <linealiza>
	X = tempo;
 800c724:	4b47      	ldr	r3, [pc, #284]	@ (800c844 <temper+0x708>)
 800c726:	881a      	ldrh	r2, [r3, #0]
 800c728:	4b47      	ldr	r3, [pc, #284]	@ (800c848 <temper+0x70c>)
 800c72a:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800c72c:	4b46      	ldr	r3, [pc, #280]	@ (800c848 <temper+0x70c>)
 800c72e:	881a      	ldrh	r2, [r3, #0]
 800c730:	4b46      	ldr	r3, [pc, #280]	@ (800c84c <temper+0x710>)
 800c732:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800c734:	4b41      	ldr	r3, [pc, #260]	@ (800c83c <temper+0x700>)
 800c736:	2200      	movs	r2, #0
 800c738:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c73a:	230d      	movs	r3, #13
 800c73c:	18fb      	adds	r3, r7, r3
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	e010      	b.n	800c766 <temper+0x62a>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800c744:	210d      	movs	r1, #13
 800c746:	187b      	adds	r3, r7, r1
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	4b30      	ldr	r3, [pc, #192]	@ (800c80c <temper+0x6d0>)
 800c74c:	0052      	lsls	r2, r2, #1
 800c74e:	5ad2      	ldrh	r2, [r2, r3]
 800c750:	4b3a      	ldr	r3, [pc, #232]	@ (800c83c <temper+0x700>)
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	18d3      	adds	r3, r2, r3
 800c756:	b29a      	uxth	r2, r3
 800c758:	4b38      	ldr	r3, [pc, #224]	@ (800c83c <temper+0x700>)
 800c75a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c75c:	187b      	adds	r3, r7, r1
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	187b      	adds	r3, r7, r1
 800c762:	3201      	adds	r2, #1
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	230d      	movs	r3, #13
 800c768:	18fb      	adds	r3, r7, r3
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b07      	cmp	r3, #7
 800c76e:	d9e9      	bls.n	800c744 <temper+0x608>
	}
	resul = resul / 8;
 800c770:	4b32      	ldr	r3, [pc, #200]	@ (800c83c <temper+0x700>)
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	08db      	lsrs	r3, r3, #3
 800c776:	b29a      	uxth	r2, r3
 800c778:	4b30      	ldr	r3, [pc, #192]	@ (800c83c <temper+0x700>)
 800c77a:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c77c:	f000 fae8 	bl	800cd50 <linealiza>
	X = tempo;
 800c780:	4b30      	ldr	r3, [pc, #192]	@ (800c844 <temper+0x708>)
 800c782:	881a      	ldrh	r2, [r3, #0]
 800c784:	4b30      	ldr	r3, [pc, #192]	@ (800c848 <temper+0x70c>)
 800c786:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800c788:	4b2f      	ldr	r3, [pc, #188]	@ (800c848 <temper+0x70c>)
 800c78a:	881a      	ldrh	r2, [r3, #0]
 800c78c:	4b30      	ldr	r3, [pc, #192]	@ (800c850 <temper+0x714>)
 800c78e:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800c790:	4b2a      	ldr	r3, [pc, #168]	@ (800c83c <temper+0x700>)
 800c792:	2200      	movs	r2, #0
 800c794:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c796:	230c      	movs	r3, #12
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	e010      	b.n	800c7c2 <temper+0x686>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800c7a0:	210c      	movs	r1, #12
 800c7a2:	187b      	adds	r3, r7, r1
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	4b24      	ldr	r3, [pc, #144]	@ (800c838 <temper+0x6fc>)
 800c7a8:	0052      	lsls	r2, r2, #1
 800c7aa:	5ad2      	ldrh	r2, [r2, r3]
 800c7ac:	4b23      	ldr	r3, [pc, #140]	@ (800c83c <temper+0x700>)
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	18d3      	adds	r3, r2, r3
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	4b21      	ldr	r3, [pc, #132]	@ (800c83c <temper+0x700>)
 800c7b6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c7b8:	187b      	adds	r3, r7, r1
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	187b      	adds	r3, r7, r1
 800c7be:	3201      	adds	r2, #1
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	230c      	movs	r3, #12
 800c7c4:	18fb      	adds	r3, r7, r3
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b07      	cmp	r3, #7
 800c7ca:	d9e9      	bls.n	800c7a0 <temper+0x664>
	}
	resul = resul / 8;
 800c7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800c83c <temper+0x700>)
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	08db      	lsrs	r3, r3, #3
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	4b19      	ldr	r3, [pc, #100]	@ (800c83c <temper+0x700>)
 800c7d6:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c7d8:	f000 faba 	bl	800cd50 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800c7dc:	4b19      	ldr	r3, [pc, #100]	@ (800c844 <temper+0x708>)
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	4b1c      	ldr	r3, [pc, #112]	@ (800c854 <temper+0x718>)
 800c7e4:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800c7e6:	4b17      	ldr	r3, [pc, #92]	@ (800c844 <temper+0x708>)
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	0a1b      	lsrs	r3, r3, #8
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	4b19      	ldr	r3, [pc, #100]	@ (800c858 <temper+0x71c>)
 800c7f2:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800c7f4:	4b11      	ldr	r3, [pc, #68]	@ (800c83c <temper+0x700>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c7fa:	230b      	movs	r3, #11
 800c7fc:	18fb      	adds	r3, r7, r3
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
 800c802:	e03c      	b.n	800c87e <temper+0x742>
 800c804:	20000bd0 	.word	0x20000bd0
 800c808:	20000b70 	.word	0x20000b70
 800c80c:	20001144 	.word	0x20001144
 800c810:	40012400 	.word	0x40012400
 800c814:	20001176 	.word	0x20001176
 800c818:	20001178 	.word	0x20001178
 800c81c:	000003b5 	.word	0x000003b5
 800c820:	20000b98 	.word	0x20000b98
 800c824:	20000ba8 	.word	0x20000ba8
 800c828:	20000bd4 	.word	0x20000bd4
 800c82c:	20000bd7 	.word	0x20000bd7
 800c830:	20001154 	.word	0x20001154
 800c834:	20000bd5 	.word	0x20000bd5
 800c838:	20001164 	.word	0x20001164
 800c83c:	2000117c 	.word	0x2000117c
 800c840:	20001134 	.word	0x20001134
 800c844:	2000117e 	.word	0x2000117e
 800c848:	2000117a 	.word	0x2000117a
 800c84c:	200010b0 	.word	0x200010b0
 800c850:	20000c64 	.word	0x20000c64
 800c854:	20000bc3 	.word	0x20000bc3
 800c858:	20000bc2 	.word	0x20000bc2
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800c85c:	210b      	movs	r1, #11
 800c85e:	187b      	adds	r3, r7, r1
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	4bb4      	ldr	r3, [pc, #720]	@ (800cb34 <temper+0x9f8>)
 800c864:	0052      	lsls	r2, r2, #1
 800c866:	5ad2      	ldrh	r2, [r2, r3]
 800c868:	4bb3      	ldr	r3, [pc, #716]	@ (800cb38 <temper+0x9fc>)
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	18d3      	adds	r3, r2, r3
 800c86e:	b29a      	uxth	r2, r3
 800c870:	4bb1      	ldr	r3, [pc, #708]	@ (800cb38 <temper+0x9fc>)
 800c872:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c874:	187b      	adds	r3, r7, r1
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	187b      	adds	r3, r7, r1
 800c87a:	3201      	adds	r2, #1
 800c87c:	701a      	strb	r2, [r3, #0]
 800c87e:	230b      	movs	r3, #11
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2b07      	cmp	r3, #7
 800c886:	d9e9      	bls.n	800c85c <temper+0x720>
	}
	resul = resul / 8;
 800c888:	4bab      	ldr	r3, [pc, #684]	@ (800cb38 <temper+0x9fc>)
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	08db      	lsrs	r3, r3, #3
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4ba9      	ldr	r3, [pc, #676]	@ (800cb38 <temper+0x9fc>)
 800c892:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800c894:	4ba9      	ldr	r3, [pc, #676]	@ (800cb3c <temper+0xa00>)
 800c896:	881a      	ldrh	r2, [r3, #0]
 800c898:	4ba9      	ldr	r3, [pc, #676]	@ (800cb40 <temper+0xa04>)
 800c89a:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800c89c:	4ba8      	ldr	r3, [pc, #672]	@ (800cb40 <temper+0xa04>)
 800c89e:	881a      	ldrh	r2, [r3, #0]
 800c8a0:	4ba5      	ldr	r3, [pc, #660]	@ (800cb38 <temper+0x9fc>)
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	4ba5      	ldr	r3, [pc, #660]	@ (800cb40 <temper+0xa04>)
 800c8aa:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800c8ac:	4ba4      	ldr	r3, [pc, #656]	@ (800cb40 <temper+0xa04>)
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d100      	bne.n	800c8b6 <temper+0x77a>
 800c8b4:	e07d      	b.n	800c9b2 <temper+0x876>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800c8b6:	4ba2      	ldr	r3, [pc, #648]	@ (800cb40 <temper+0xa04>)
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	b21b      	sxth	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	da18      	bge.n	800c8f2 <temper+0x7b6>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800c8c0:	4b9f      	ldr	r3, [pc, #636]	@ (800cb40 <temper+0xa04>)
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	4b9d      	ldr	r3, [pc, #628]	@ (800cb40 <temper+0xa04>)
 800c8ca:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800c8cc:	4b9c      	ldr	r3, [pc, #624]	@ (800cb40 <temper+0xa04>)
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d028      	beq.n	800c926 <temper+0x7ea>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800c8d4:	4b98      	ldr	r3, [pc, #608]	@ (800cb38 <temper+0x9fc>)
 800c8d6:	881a      	ldrh	r2, [r3, #0]
 800c8d8:	4b99      	ldr	r3, [pc, #612]	@ (800cb40 <temper+0xa04>)
 800c8da:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800c8dc:	4b98      	ldr	r3, [pc, #608]	@ (800cb40 <temper+0xa04>)
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	4b96      	ldr	r3, [pc, #600]	@ (800cb40 <temper+0xa04>)
 800c8e6:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800c8e8:	4b95      	ldr	r3, [pc, #596]	@ (800cb40 <temper+0xa04>)
 800c8ea:	881a      	ldrh	r2, [r3, #0]
 800c8ec:	4b92      	ldr	r3, [pc, #584]	@ (800cb38 <temper+0x9fc>)
 800c8ee:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800c8f0:	e048      	b.n	800c984 <temper+0x848>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800c8f2:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800c8f4:	4b92      	ldr	r3, [pc, #584]	@ (800cb40 <temper+0xa04>)
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	4b90      	ldr	r3, [pc, #576]	@ (800cb40 <temper+0xa04>)
 800c8fe:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800c900:	4b8f      	ldr	r3, [pc, #572]	@ (800cb40 <temper+0xa04>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d010      	beq.n	800c92a <temper+0x7ee>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800c908:	4b8b      	ldr	r3, [pc, #556]	@ (800cb38 <temper+0x9fc>)
 800c90a:	881a      	ldrh	r2, [r3, #0]
 800c90c:	4b8c      	ldr	r3, [pc, #560]	@ (800cb40 <temper+0xa04>)
 800c90e:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800c910:	4b8b      	ldr	r3, [pc, #556]	@ (800cb40 <temper+0xa04>)
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	3301      	adds	r3, #1
 800c916:	b29a      	uxth	r2, r3
 800c918:	4b89      	ldr	r3, [pc, #548]	@ (800cb40 <temper+0xa04>)
 800c91a:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800c91c:	4b88      	ldr	r3, [pc, #544]	@ (800cb40 <temper+0xa04>)
 800c91e:	881a      	ldrh	r2, [r3, #0]
 800c920:	4b85      	ldr	r3, [pc, #532]	@ (800cb38 <temper+0x9fc>)
 800c922:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800c924:	e02e      	b.n	800c984 <temper+0x848>
		goto vesiestab;  		  // Si, revisa estabilidad
 800c926:	46c0      	nop			@ (mov r8, r8)
 800c928:	e000      	b.n	800c92c <temper+0x7f0>
			goto vesiestab;       // Si, revisa estabilidad
 800c92a:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800c92c:	4b85      	ldr	r3, [pc, #532]	@ (800cb44 <temper+0xa08>)
 800c92e:	881a      	ldrh	r2, [r3, #0]
 800c930:	4b83      	ldr	r3, [pc, #524]	@ (800cb40 <temper+0xa04>)
 800c932:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800c934:	4b82      	ldr	r3, [pc, #520]	@ (800cb40 <temper+0xa04>)
 800c936:	881a      	ldrh	r2, [r3, #0]
 800c938:	4b7f      	ldr	r3, [pc, #508]	@ (800cb38 <temper+0x9fc>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	b29a      	uxth	r2, r3
 800c940:	4b7f      	ldr	r3, [pc, #508]	@ (800cb40 <temper+0xa04>)
 800c942:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800c944:	4b7e      	ldr	r3, [pc, #504]	@ (800cb40 <temper+0xa04>)
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <temper+0x818>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800c94c:	4b7e      	ldr	r3, [pc, #504]	@ (800cb48 <temper+0xa0c>)
 800c94e:	2200      	movs	r2, #0
 800c950:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800c952:	e006      	b.n	800c962 <temper+0x826>
			goto estable;  // El nuevo dato es igual a último?
 800c954:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800c956:	4b7c      	ldr	r3, [pc, #496]	@ (800cb48 <temper+0xa0c>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	3301      	adds	r3, #1
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	4b7a      	ldr	r3, [pc, #488]	@ (800cb48 <temper+0xa0c>)
 800c960:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800c962:	4b75      	ldr	r3, [pc, #468]	@ (800cb38 <temper+0x9fc>)
 800c964:	881a      	ldrh	r2, [r3, #0]
 800c966:	4b76      	ldr	r3, [pc, #472]	@ (800cb40 <temper+0xa04>)
 800c968:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800c96a:	4b75      	ldr	r3, [pc, #468]	@ (800cb40 <temper+0xa04>)
 800c96c:	881a      	ldrh	r2, [r3, #0]
 800c96e:	4b75      	ldr	r3, [pc, #468]	@ (800cb44 <temper+0xa08>)
 800c970:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800c972:	4b75      	ldr	r3, [pc, #468]	@ (800cb48 <temper+0xa0c>)
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	4b75      	ldr	r3, [pc, #468]	@ (800cb4c <temper+0xa10>)
 800c978:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800c97a:	4b74      	ldr	r3, [pc, #464]	@ (800cb4c <temper+0xa10>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b0e      	cmp	r3, #14
 800c980:	d920      	bls.n	800c9c4 <temper+0x888>
			goto tempe29;

tempe26:
 800c982:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800c984:	4b6c      	ldr	r3, [pc, #432]	@ (800cb38 <temper+0x9fc>)
 800c986:	881a      	ldrh	r2, [r3, #0]
 800c988:	4b71      	ldr	r3, [pc, #452]	@ (800cb50 <temper+0xa14>)
 800c98a:	801a      	strh	r2, [r3, #0]
		promant = X;
 800c98c:	4b70      	ldr	r3, [pc, #448]	@ (800cb50 <temper+0xa14>)
 800c98e:	881a      	ldrh	r2, [r3, #0]
 800c990:	4b6a      	ldr	r3, [pc, #424]	@ (800cb3c <temper+0xa00>)
 800c992:	801a      	strh	r2, [r3, #0]
		linealiza();
 800c994:	f000 f9dc 	bl	800cd50 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800c998:	4b6e      	ldr	r3, [pc, #440]	@ (800cb54 <temper+0xa18>)
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	4b6e      	ldr	r3, [pc, #440]	@ (800cb58 <temper+0xa1c>)
 800c9a0:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800c9a2:	4b6c      	ldr	r3, [pc, #432]	@ (800cb54 <temper+0xa18>)
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	0a1b      	lsrs	r3, r3, #8
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	4b6b      	ldr	r3, [pc, #428]	@ (800cb5c <temper+0xa20>)
 800c9ae:	701a      	strb	r2, [r3, #0]
 800c9b0:	e000      	b.n	800c9b4 <temper+0x878>
		goto tempe27;                //nota1: checar comparaciones
 800c9b2:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800c9b4:	4b61      	ldr	r3, [pc, #388]	@ (800cb3c <temper+0xa00>)
 800c9b6:	881a      	ldrh	r2, [r3, #0]
 800c9b8:	4b62      	ldr	r3, [pc, #392]	@ (800cb44 <temper+0xa08>)
 800c9ba:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800c9bc:	4b62      	ldr	r3, [pc, #392]	@ (800cb48 <temper+0xa0c>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e000      	b.n	800c9c6 <temper+0x88a>
			goto tempe29;
 800c9c4:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800c9c6:	f7f9 fb33 	bl	8006030 <tdev_to_Word>
 800c9ca:	0003      	movs	r3, r0
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	4b60      	ldr	r3, [pc, #384]	@ (800cb50 <temper+0xa14>)
 800c9d0:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800c9d2:	4b5f      	ldr	r3, [pc, #380]	@ (800cb50 <temper+0xa14>)
 800c9d4:	881a      	ldrh	r2, [r3, #0]
 800c9d6:	4b62      	ldr	r3, [pc, #392]	@ (800cb60 <temper+0xa24>)
 800c9d8:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800c9da:	4b62      	ldr	r3, [pc, #392]	@ (800cb64 <temper+0xa28>)
 800c9dc:	2259      	movs	r2, #89	@ 0x59
 800c9de:	5c9a      	ldrb	r2, [r3, r2]
 800c9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800cb4c <temper+0xa10>)
 800c9e2:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800c9e4:	4b59      	ldr	r3, [pc, #356]	@ (800cb4c <temper+0xa10>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d91d      	bls.n	800ca28 <temper+0x8ec>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800c9ec:	4b5d      	ldr	r3, [pc, #372]	@ (800cb64 <temper+0xa28>)
 800c9ee:	2253      	movs	r2, #83	@ 0x53
 800c9f0:	5c9b      	ldrb	r3, [r3, r2]
 800c9f2:	b25b      	sxtb	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	da19      	bge.n	800ca2c <temper+0x8f0>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800c9f8:	4b5b      	ldr	r3, [pc, #364]	@ (800cb68 <temper+0xa2c>)
 800c9fa:	791b      	ldrb	r3, [r3, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d107      	bne.n	800ca10 <temper+0x8d4>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800ca00:	4b59      	ldr	r3, [pc, #356]	@ (800cb68 <temper+0xa2c>)
 800ca02:	795b      	ldrb	r3, [r3, #5]
 800ca04:	2201      	movs	r2, #1
 800ca06:	4053      	eors	r3, r2
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <temper+0x8d8>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800ca0e:	e000      	b.n	800ca12 <temper+0x8d6>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800ca10:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800ca12:	e00c      	b.n	800ca2e <temper+0x8f2>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800ca14:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800ca16:	4b55      	ldr	r3, [pc, #340]	@ (800cb6c <temper+0xa30>)
 800ca18:	881a      	ldrh	r2, [r3, #0]
 800ca1a:	4b4d      	ldr	r3, [pc, #308]	@ (800cb50 <temper+0xa14>)
 800ca1c:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800ca1e:	4b4c      	ldr	r3, [pc, #304]	@ (800cb50 <temper+0xa14>)
 800ca20:	881a      	ldrh	r2, [r3, #0]
 800ca22:	4b4f      	ldr	r3, [pc, #316]	@ (800cb60 <temper+0xa24>)
 800ca24:	801a      	strh	r2, [r3, #0]
 800ca26:	e002      	b.n	800ca2e <temper+0x8f2>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800ca28:	46c0      	nop			@ (mov r8, r8)
 800ca2a:	e000      	b.n	800ca2e <temper+0x8f2>
			goto tempe26a;
 800ca2c:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800ca2e:	4b50      	ldr	r3, [pc, #320]	@ (800cb70 <temper+0xa34>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d014      	beq.n	800ca60 <temper+0x924>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800ca36:	4b4e      	ldr	r3, [pc, #312]	@ (800cb70 <temper+0xa34>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b08      	cmp	r3, #8
 800ca3c:	d800      	bhi.n	800ca40 <temper+0x904>
 800ca3e:	e073      	b.n	800cb28 <temper+0x9ec>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800ca40:	4b43      	ldr	r3, [pc, #268]	@ (800cb50 <temper+0xa14>)
 800ca42:	4a4c      	ldr	r2, [pc, #304]	@ (800cb74 <temper+0xa38>)
 800ca44:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800ca46:	4b42      	ldr	r3, [pc, #264]	@ (800cb50 <temper+0xa14>)
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	0a1b      	lsrs	r3, r3, #8
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	4b42      	ldr	r3, [pc, #264]	@ (800cb5c <temper+0xa20>)
 800ca52:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800ca54:	4b3e      	ldr	r3, [pc, #248]	@ (800cb50 <temper+0xa14>)
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	4b3f      	ldr	r3, [pc, #252]	@ (800cb58 <temper+0xa1c>)
 800ca5c:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800ca5e:	e0cc      	b.n	800cbfa <temper+0xabe>
			goto tempe30;              // Si
 800ca60:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800ca62:	4b45      	ldr	r3, [pc, #276]	@ (800cb78 <temper+0xa3c>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2201      	movs	r2, #1
 800ca68:	4053      	eors	r3, r2
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d05d      	beq.n	800cb2c <temper+0x9f0>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800ca70:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800ca72:	4b42      	ldr	r3, [pc, #264]	@ (800cb7c <temper+0xa40>)
 800ca74:	881a      	ldrh	r2, [r3, #0]
 800ca76:	4b32      	ldr	r3, [pc, #200]	@ (800cb40 <temper+0xa04>)
 800ca78:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800ca7a:	4b31      	ldr	r3, [pc, #196]	@ (800cb40 <temper+0xa04>)
 800ca7c:	881a      	ldrh	r2, [r3, #0]
 800ca7e:	4b38      	ldr	r3, [pc, #224]	@ (800cb60 <temper+0xa24>)
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	4b2e      	ldr	r3, [pc, #184]	@ (800cb40 <temper+0xa04>)
 800ca88:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800ca8a:	4b2d      	ldr	r3, [pc, #180]	@ (800cb40 <temper+0xa04>)
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d100      	bne.n	800ca94 <temper+0x958>
 800ca92:	e0ad      	b.n	800cbf0 <temper+0xab4>
			goto tempe40;
		else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800ca94:	4b2a      	ldr	r3, [pc, #168]	@ (800cb40 <temper+0xa04>)
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	b21b      	sxth	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	da48      	bge.n	800cb30 <temper+0x9f4>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800ca9e:	4b31      	ldr	r3, [pc, #196]	@ (800cb64 <temper+0xa28>)
 800caa0:	2254      	movs	r2, #84	@ 0x54
 800caa2:	5c9a      	ldrb	r2, [r3, r2]
 800caa4:	4b29      	ldr	r3, [pc, #164]	@ (800cb4c <temper+0xa10>)
 800caa6:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800caa8:	4b28      	ldr	r3, [pc, #160]	@ (800cb4c <temper+0xa10>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d06b      	beq.n	800cb88 <temper+0xa4c>
			goto tempe39;
		A = A << 1;
 800cab0:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <temper+0xa10>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	18db      	adds	r3, r3, r3
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	4b24      	ldr	r3, [pc, #144]	@ (800cb4c <temper+0xa10>)
 800caba:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800cabc:	4b30      	ldr	r3, [pc, #192]	@ (800cb80 <temper+0xa44>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	4b2e      	ldr	r3, [pc, #184]	@ (800cb80 <temper+0xa44>)
 800cac6:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800cac8:	4b20      	ldr	r3, [pc, #128]	@ (800cb4c <temper+0xa10>)
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	4b2c      	ldr	r3, [pc, #176]	@ (800cb80 <temper+0xa44>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d900      	bls.n	800cad6 <temper+0x99a>
 800cad4:	e095      	b.n	800cc02 <temper+0xac6>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800cad6:	4b1a      	ldr	r3, [pc, #104]	@ (800cb40 <temper+0xa04>)
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	425b      	negs	r3, r3
 800cadc:	b29a      	uxth	r2, r3
 800cade:	4b18      	ldr	r3, [pc, #96]	@ (800cb40 <temper+0xa04>)
 800cae0:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800cae2:	4b17      	ldr	r3, [pc, #92]	@ (800cb40 <temper+0xa04>)
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	2b0a      	cmp	r3, #10
 800cae8:	d90e      	bls.n	800cb08 <temper+0x9cc>
			goto tempe37b;

		X = tDisplay_w;
 800caea:	4b1d      	ldr	r3, [pc, #116]	@ (800cb60 <temper+0xa24>)
 800caec:	881a      	ldrh	r2, [r3, #0]
 800caee:	4b18      	ldr	r3, [pc, #96]	@ (800cb50 <temper+0xa14>)
 800caf0:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800caf2:	4b17      	ldr	r3, [pc, #92]	@ (800cb50 <temper+0xa14>)
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	3b0a      	subs	r3, #10
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	4b15      	ldr	r3, [pc, #84]	@ (800cb50 <temper+0xa14>)
 800cafc:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800cafe:	4b14      	ldr	r3, [pc, #80]	@ (800cb50 <temper+0xa14>)
 800cb00:	881a      	ldrh	r2, [r3, #0]
 800cb02:	4b20      	ldr	r3, [pc, #128]	@ (800cb84 <temper+0xa48>)
 800cb04:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800cb06:	e04b      	b.n	800cba0 <temper+0xa64>
			goto tempe37b;
 800cb08:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800cb0a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb7c <temper+0xa40>)
 800cb0c:	881a      	ldrh	r2, [r3, #0]
 800cb0e:	4b10      	ldr	r3, [pc, #64]	@ (800cb50 <temper+0xa14>)
 800cb10:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800cb12:	4b0f      	ldr	r3, [pc, #60]	@ (800cb50 <temper+0xa14>)
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb50 <temper+0xa14>)
 800cb1c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800cb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800cb50 <temper+0xa14>)
 800cb20:	881a      	ldrh	r2, [r3, #0]
 800cb22:	4b18      	ldr	r3, [pc, #96]	@ (800cb84 <temper+0xa48>)
 800cb24:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800cb26:	e03b      	b.n	800cba0 <temper+0xa64>
			goto tempe39;              // Si, cargalo al display
 800cb28:	46c0      	nop			@ (mov r8, r8)
 800cb2a:	e02e      	b.n	800cb8a <temper+0xa4e>
		goto tempe39;
 800cb2c:	46c0      	nop			@ (mov r8, r8)
 800cb2e:	e02c      	b.n	800cb8a <temper+0xa4e>
			goto tempe39;      // La diferencia es positiva?
 800cb30:	46c0      	nop			@ (mov r8, r8)
 800cb32:	e02a      	b.n	800cb8a <temper+0xa4e>
 800cb34:	20001154 	.word	0x20001154
 800cb38:	2000117c 	.word	0x2000117c
 800cb3c:	20001182 	.word	0x20001182
 800cb40:	20001178 	.word	0x20001178
 800cb44:	20001184 	.word	0x20001184
 800cb48:	20000bd6 	.word	0x20000bd6
 800cb4c:	20001176 	.word	0x20001176
 800cb50:	2000117a 	.word	0x2000117a
 800cb54:	2000117e 	.word	0x2000117e
 800cb58:	20000bc1 	.word	0x20000bc1
 800cb5c:	20000bc0 	.word	0x20000bc0
 800cb60:	200010b2 	.word	0x200010b2
 800cb64:	200000b8 	.word	0x200000b8
 800cb68:	20000b90 	.word	0x20000b90
 800cb6c:	20000c64 	.word	0x20000c64
 800cb70:	20000bd4 	.word	0x20000bd4
 800cb74:	fffffe34 	.word	0xfffffe34
 800cb78:	20000b88 	.word	0x20000b88
 800cb7c:	20000bc4 	.word	0x20000bc4
 800cb80:	20000bd3 	.word	0x20000bd3
 800cb84:	20001180 	.word	0x20001180
			goto tempe39;
 800cb88:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800cb8a:	4b5d      	ldr	r3, [pc, #372]	@ (800cd00 <temper+0xbc4>)
 800cb8c:	881a      	ldrh	r2, [r3, #0]
 800cb8e:	4b5d      	ldr	r3, [pc, #372]	@ (800cd04 <temper+0xbc8>)
 800cb90:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800cb92:	4b5c      	ldr	r3, [pc, #368]	@ (800cd04 <temper+0xbc8>)
 800cb94:	881a      	ldrh	r2, [r3, #0]
 800cb96:	4b5c      	ldr	r3, [pc, #368]	@ (800cd08 <temper+0xbcc>)
 800cb98:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800cb9a:	4b5c      	ldr	r3, [pc, #368]	@ (800cd0c <temper+0xbd0>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800cba0:	4b5b      	ldr	r3, [pc, #364]	@ (800cd10 <temper+0xbd4>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d125      	bne.n	800cbf4 <temper+0xab8>
			goto tempe40;

		A = cnthold;
 800cba8:	4b58      	ldr	r3, [pc, #352]	@ (800cd0c <temper+0xbd0>)
 800cbaa:	781a      	ldrb	r2, [r3, #0]
 800cbac:	4b59      	ldr	r3, [pc, #356]	@ (800cd14 <temper+0xbd8>)
 800cbae:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800cbb0:	4b58      	ldr	r3, [pc, #352]	@ (800cd14 <temper+0xbd8>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d011      	beq.n	800cbdc <temper+0xaa0>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800cbb8:	4b57      	ldr	r3, [pc, #348]	@ (800cd18 <temper+0xbdc>)
 800cbba:	881a      	ldrh	r2, [r3, #0]
 800cbbc:	4b57      	ldr	r3, [pc, #348]	@ (800cd1c <temper+0xbe0>)
 800cbbe:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800cbc0:	4b56      	ldr	r3, [pc, #344]	@ (800cd1c <temper+0xbe0>)
 800cbc2:	881a      	ldrh	r2, [r3, #0]
 800cbc4:	4b50      	ldr	r3, [pc, #320]	@ (800cd08 <temper+0xbcc>)
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	4b53      	ldr	r3, [pc, #332]	@ (800cd1c <temper+0xbe0>)
 800cbce:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800cbd0:	4b52      	ldr	r3, [pc, #328]	@ (800cd1c <temper+0xbe0>)
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	b21b      	sxth	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	db0e      	blt.n	800cbf8 <temper+0xabc>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800cbda:	e000      	b.n	800cbde <temper+0xaa2>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800cbdc:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800cbde:	4b4a      	ldr	r3, [pc, #296]	@ (800cd08 <temper+0xbcc>)
 800cbe0:	881a      	ldrh	r2, [r3, #0]
 800cbe2:	4b48      	ldr	r3, [pc, #288]	@ (800cd04 <temper+0xbc8>)
 800cbe4:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800cbe6:	4b47      	ldr	r3, [pc, #284]	@ (800cd04 <temper+0xbc8>)
 800cbe8:	881a      	ldrh	r2, [r3, #0]
 800cbea:	4b4d      	ldr	r3, [pc, #308]	@ (800cd20 <temper+0xbe4>)
 800cbec:	801a      	strh	r2, [r3, #0]
 800cbee:	e004      	b.n	800cbfa <temper+0xabe>
			goto tempe40;
 800cbf0:	46c0      	nop			@ (mov r8, r8)
 800cbf2:	e002      	b.n	800cbfa <temper+0xabe>
			goto tempe40;
 800cbf4:	46c0      	nop			@ (mov r8, r8)
 800cbf6:	e000      	b.n	800cbfa <temper+0xabe>
			goto tempe40;             // Si, congela el display en limsup
 800cbf8:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800cbfa:	4b4a      	ldr	r3, [pc, #296]	@ (800cd24 <temper+0xbe8>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	e000      	b.n	800cc04 <temper+0xac8>
			goto tempe50;
 800cc02:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800cc04:	4b48      	ldr	r3, [pc, #288]	@ (800cd28 <temper+0xbec>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800cc0a:	4b48      	ldr	r3, [pc, #288]	@ (800cd2c <temper+0xbf0>)
 800cc0c:	78db      	ldrb	r3, [r3, #3]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	4053      	eors	r3, r2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10f      	bne.n	800cc38 <temper+0xafc>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800cc18:	4b3a      	ldr	r3, [pc, #232]	@ (800cd04 <temper+0xbc8>)
 800cc1a:	4a45      	ldr	r2, [pc, #276]	@ (800cd30 <temper+0xbf4>)
 800cc1c:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800cc1e:	4b39      	ldr	r3, [pc, #228]	@ (800cd04 <temper+0xbc8>)
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	4b43      	ldr	r3, [pc, #268]	@ (800cd34 <temper+0xbf8>)
 800cc26:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800cc28:	4b36      	ldr	r3, [pc, #216]	@ (800cd04 <temper+0xbc8>)
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	0a1b      	lsrs	r3, r3, #8
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	4b41      	ldr	r3, [pc, #260]	@ (800cd38 <temper+0xbfc>)
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	e000      	b.n	800cc3a <temper+0xafe>
			goto tempe52;
 800cc38:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800cc3a:	4b40      	ldr	r3, [pc, #256]	@ (800cd3c <temper+0xc00>)
 800cc3c:	795b      	ldrb	r3, [r3, #5]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	4053      	eors	r3, r2
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d107      	bne.n	800cc58 <temper+0xb1c>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800cc48:	4b2e      	ldr	r3, [pc, #184]	@ (800cd04 <temper+0xbc8>)
 800cc4a:	4a39      	ldr	r2, [pc, #228]	@ (800cd30 <temper+0xbf4>)
 800cc4c:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800cc4e:	4b2d      	ldr	r3, [pc, #180]	@ (800cd04 <temper+0xbc8>)
 800cc50:	881a      	ldrh	r2, [r3, #0]
 800cc52:	4b3b      	ldr	r3, [pc, #236]	@ (800cd40 <temper+0xc04>)
 800cc54:	801a      	strh	r2, [r3, #0]
 800cc56:	e000      	b.n	800cc5a <temper+0xb1e>
			goto tempe53;
 800cc58:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800cc5a:	4b38      	ldr	r3, [pc, #224]	@ (800cd3c <temper+0xc00>)
 800cc5c:	79db      	ldrb	r3, [r3, #7]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4053      	eors	r3, r2
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10b      	bne.n	800cc80 <temper+0xb44>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800cc68:	4b26      	ldr	r3, [pc, #152]	@ (800cd04 <temper+0xbc8>)
 800cc6a:	4a31      	ldr	r2, [pc, #196]	@ (800cd30 <temper+0xbf4>)
 800cc6c:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800cc6e:	4b25      	ldr	r3, [pc, #148]	@ (800cd04 <temper+0xbc8>)
 800cc70:	881a      	ldrh	r2, [r3, #0]
 800cc72:	4b34      	ldr	r3, [pc, #208]	@ (800cd44 <temper+0xc08>)
 800cc74:	801a      	strh	r2, [r3, #0]
 800cc76:	e004      	b.n	800cc82 <temper+0xb46>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800cc78:	46c0      	nop			@ (mov r8, r8)
 800cc7a:	e002      	b.n	800cc82 <temper+0xb46>
			goto fintemp;
 800cc7c:	46c0      	nop			@ (mov r8, r8)
 800cc7e:	e000      	b.n	800cc82 <temper+0xb46>
			goto fintemp;
 800cc80:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800cc82:	4b31      	ldr	r3, [pc, #196]	@ (800cd48 <temper+0xc0c>)
 800cc84:	781a      	ldrb	r2, [r3, #0]
 800cc86:	4b23      	ldr	r3, [pc, #140]	@ (800cd14 <temper+0xbd8>)
 800cc88:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800cc8a:	4b22      	ldr	r3, [pc, #136]	@ (800cd14 <temper+0xbd8>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d02c      	beq.n	800ccec <temper+0xbb0>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800cc92:	4b2e      	ldr	r3, [pc, #184]	@ (800cd4c <temper+0xc10>)
 800cc94:	2259      	movs	r2, #89	@ 0x59
 800cc96:	5c9a      	ldrb	r2, [r3, r2]
 800cc98:	4b1e      	ldr	r3, [pc, #120]	@ (800cd14 <temper+0xbd8>)
 800cc9a:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800cc9c:	4b1d      	ldr	r3, [pc, #116]	@ (800cd14 <temper+0xbd8>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d025      	beq.n	800ccf0 <temper+0xbb4>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800cca4:	4b1b      	ldr	r3, [pc, #108]	@ (800cd14 <temper+0xbd8>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b03      	cmp	r3, #3
 800ccaa:	d017      	beq.n	800ccdc <temper+0xba0>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800ccac:	4b19      	ldr	r3, [pc, #100]	@ (800cd14 <temper+0xbd8>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d00b      	beq.n	800cccc <temper+0xb90>
			goto clrRetFail;
		if (A != 1)
 800ccb4:	4b17      	ldr	r3, [pc, #92]	@ (800cd14 <temper+0xbd8>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d11b      	bne.n	800ccf4 <temper+0xbb8>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800ccbc:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800ccbe:	491b      	ldr	r1, [pc, #108]	@ (800cd2c <temper+0xbf0>)
 800ccc0:	481a      	ldr	r0, [pc, #104]	@ (800cd2c <temper+0xbf0>)
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	f000 fa1c 	bl	800d102 <Bclear_Clear_trfst>
 800ccca:	e000      	b.n	800ccce <temper+0xb92>
			goto clrRetFail;
 800cccc:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800ccce:	491b      	ldr	r1, [pc, #108]	@ (800cd3c <temper+0xc00>)
 800ccd0:	481a      	ldr	r0, [pc, #104]	@ (800cd3c <temper+0xc00>)
 800ccd2:	2305      	movs	r3, #5
 800ccd4:	2204      	movs	r2, #4
 800ccd6:	f000 fa14 	bl	800d102 <Bclear_Clear_trfst>
 800ccda:	e000      	b.n	800ccde <temper+0xba2>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800ccdc:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800ccde:	4917      	ldr	r1, [pc, #92]	@ (800cd3c <temper+0xc00>)
 800cce0:	4812      	ldr	r0, [pc, #72]	@ (800cd2c <temper+0xbf0>)
 800cce2:	2307      	movs	r3, #7
 800cce4:	2205      	movs	r2, #5
 800cce6:	f000 fa0c 	bl	800d102 <Bclear_Clear_trfst>
 800ccea:	e004      	b.n	800ccf6 <temper+0xbba>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800ccec:	46c0      	nop			@ (mov r8, r8)
 800ccee:	e002      	b.n	800ccf6 <temper+0xbba>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800ccf0:	46c0      	nop			@ (mov r8, r8)
 800ccf2:	e000      	b.n	800ccf6 <temper+0xbba>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800ccf4:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800ccf6:	46c0      	nop			@ (mov r8, r8)




}
 800ccf8:	46c0      	nop			@ (mov r8, r8)
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	b004      	add	sp, #16
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200010b2 	.word	0x200010b2
 800cd04:	2000117a 	.word	0x2000117a
 800cd08:	20001180 	.word	0x20001180
 800cd0c:	20000bd7 	.word	0x20000bd7
 800cd10:	200010c0 	.word	0x200010c0
 800cd14:	20001176 	.word	0x20001176
 800cd18:	20000bbe 	.word	0x20000bbe
 800cd1c:	20001178 	.word	0x20001178
 800cd20:	20000bc4 	.word	0x20000bc4
 800cd24:	20000bd3 	.word	0x20000bd3
 800cd28:	20000bd0 	.word	0x20000bd0
 800cd2c:	20000b98 	.word	0x20000b98
 800cd30:	fffffe34 	.word	0xfffffe34
 800cd34:	20000bc3 	.word	0x20000bc3
 800cd38:	20000bc2 	.word	0x20000bc2
 800cd3c:	20000b90 	.word	0x20000b90
 800cd40:	20000c64 	.word	0x20000c64
 800cd44:	200010b0 	.word	0x200010b0
 800cd48:	20000ba8 	.word	0x20000ba8
 800cd4c:	200000b8 	.word	0x200000b8

0800cd50 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
	tempo = 0;
 800cd54:	4b57      	ldr	r3, [pc, #348]	@ (800ceb4 <linealiza+0x164>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800cd5a:	4b57      	ldr	r3, [pc, #348]	@ (800ceb8 <linealiza+0x168>)
 800cd5c:	881a      	ldrh	r2, [r3, #0]
 800cd5e:	4b57      	ldr	r3, [pc, #348]	@ (800cebc <linealiza+0x16c>)
 800cd60:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800cd62:	4b56      	ldr	r3, [pc, #344]	@ (800cebc <linealiza+0x16c>)
 800cd64:	881a      	ldrh	r2, [r3, #0]
 800cd66:	4b56      	ldr	r3, [pc, #344]	@ (800cec0 <linealiza+0x170>)
 800cd68:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800cd6a:	4b55      	ldr	r3, [pc, #340]	@ (800cec0 <linealiza+0x170>)
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	4a55      	ldr	r2, [pc, #340]	@ (800cec4 <linealiza+0x174>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d80e      	bhi.n	800cd92 <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800cd74:	4b52      	ldr	r3, [pc, #328]	@ (800cec0 <linealiza+0x170>)
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	4a53      	ldr	r2, [pc, #332]	@ (800cec8 <linealiza+0x178>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d810      	bhi.n	800cda0 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800cd7e:	4b50      	ldr	r3, [pc, #320]	@ (800cec0 <linealiza+0x170>)
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	4a52      	ldr	r2, [pc, #328]	@ (800cecc <linealiza+0x17c>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d812      	bhi.n	800cdae <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800cd88:	4b4d      	ldr	r3, [pc, #308]	@ (800cec0 <linealiza+0x170>)
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	2bca      	cmp	r3, #202	@ 0xca
 800cd8e:	d91c      	bls.n	800cdca <linealiza+0x7a>
		goto lil_principal;
 800cd90:	e015      	b.n	800cdbe <linealiza+0x6e>
		goto wise_hot_3;
 800cd92:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800cd94:	4b4e      	ldr	r3, [pc, #312]	@ (800ced0 <linealiza+0x180>)
 800cd96:	0019      	movs	r1, r3
 800cd98:	2053      	movs	r0, #83	@ 0x53
 800cd9a:	f000 f94d 	bl	800d038 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800cd9e:	e01b      	b.n	800cdd8 <linealiza+0x88>
		goto wise_hot_2;
 800cda0:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800cda2:	4b4c      	ldr	r3, [pc, #304]	@ (800ced4 <linealiza+0x184>)
 800cda4:	0019      	movs	r1, r3
 800cda6:	2034      	movs	r0, #52	@ 0x34
 800cda8:	f000 f946 	bl	800d038 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800cdac:	e014      	b.n	800cdd8 <linealiza+0x88>
		goto wise_hot_1;
 800cdae:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800cdb0:	2393      	movs	r3, #147	@ 0x93
 800cdb2:	01db      	lsls	r3, r3, #7
 800cdb4:	0019      	movs	r1, r3
 800cdb6:	201d      	movs	r0, #29
 800cdb8:	f000 f93e 	bl	800d038 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800cdbc:	e00c      	b.n	800cdd8 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800cdbe:	4b46      	ldr	r3, [pc, #280]	@ (800ced8 <linealiza+0x188>)
 800cdc0:	0019      	movs	r1, r3
 800cdc2:	2013      	movs	r0, #19
 800cdc4:	f000 f938 	bl	800d038 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800cdc8:	e006      	b.n	800cdd8 <linealiza+0x88>
		goto curva_fria;
 800cdca:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800cdcc:	23de      	movs	r3, #222	@ 0xde
 800cdce:	019b      	lsls	r3, r3, #6
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	201e      	movs	r0, #30
 800cdd4:	f000 f930 	bl	800d038 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800cdd8:	4b36      	ldr	r3, [pc, #216]	@ (800ceb4 <linealiza+0x164>)
 800cdda:	881a      	ldrh	r2, [r3, #0]
 800cddc:	4b3f      	ldr	r3, [pc, #252]	@ (800cedc <linealiza+0x18c>)
 800cdde:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800cde0:	4b3e      	ldr	r3, [pc, #248]	@ (800cedc <linealiza+0x18c>)
 800cde2:	881a      	ldrh	r2, [r3, #0]
 800cde4:	4b35      	ldr	r3, [pc, #212]	@ (800cebc <linealiza+0x16c>)
 800cde6:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800cde8:	4b34      	ldr	r3, [pc, #208]	@ (800cebc <linealiza+0x16c>)
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	b21b      	sxth	r3, r3
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	da05      	bge.n	800cdfe <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800cdf2:	4b3a      	ldr	r3, [pc, #232]	@ (800cedc <linealiza+0x18c>)
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	425b      	negs	r3, r3
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	4b38      	ldr	r3, [pc, #224]	@ (800cedc <linealiza+0x18c>)
 800cdfc:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800cdfe:	4b37      	ldr	r3, [pc, #220]	@ (800cedc <linealiza+0x18c>)
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	0a1b      	lsrs	r3, r3, #8
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	4b35      	ldr	r3, [pc, #212]	@ (800cee0 <linealiza+0x190>)
 800ce0a:	701a      	strb	r2, [r3, #0]
	waux = A;
 800ce0c:	4b34      	ldr	r3, [pc, #208]	@ (800cee0 <linealiza+0x190>)
 800ce0e:	781a      	ldrb	r2, [r3, #0]
 800ce10:	4b34      	ldr	r3, [pc, #208]	@ (800cee4 <linealiza+0x194>)
 800ce12:	701a      	strb	r2, [r3, #0]
	A = 10;
 800ce14:	4b32      	ldr	r3, [pc, #200]	@ (800cee0 <linealiza+0x190>)
 800ce16:	220a      	movs	r2, #10
 800ce18:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800ce1a:	4b30      	ldr	r3, [pc, #192]	@ (800cedc <linealiza+0x18c>)
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	001a      	movs	r2, r3
 800ce22:	4b2f      	ldr	r3, [pc, #188]	@ (800cee0 <linealiza+0x190>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	4353      	muls	r3, r2
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	4b2c      	ldr	r3, [pc, #176]	@ (800cedc <linealiza+0x18c>)
 800ce2c:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800ce2e:	4b2b      	ldr	r3, [pc, #172]	@ (800cedc <linealiza+0x18c>)
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	4b29      	ldr	r3, [pc, #164]	@ (800cee0 <linealiza+0x190>)
 800ce3a:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800ce3c:	4b27      	ldr	r3, [pc, #156]	@ (800cedc <linealiza+0x18c>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	801a      	strh	r2, [r3, #0]
	X = A;
 800ce42:	4b27      	ldr	r3, [pc, #156]	@ (800cee0 <linealiza+0x190>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	001a      	movs	r2, r3
 800ce48:	4b24      	ldr	r3, [pc, #144]	@ (800cedc <linealiza+0x18c>)
 800ce4a:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800ce4c:	4b23      	ldr	r3, [pc, #140]	@ (800cedc <linealiza+0x18c>)
 800ce4e:	881a      	ldrh	r2, [r3, #0]
 800ce50:	4b18      	ldr	r3, [pc, #96]	@ (800ceb4 <linealiza+0x164>)
 800ce52:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800ce54:	4b23      	ldr	r3, [pc, #140]	@ (800cee4 <linealiza+0x194>)
 800ce56:	781a      	ldrb	r2, [r3, #0]
 800ce58:	4b21      	ldr	r3, [pc, #132]	@ (800cee0 <linealiza+0x190>)
 800ce5a:	701a      	strb	r2, [r3, #0]
	X = A;
 800ce5c:	4b20      	ldr	r3, [pc, #128]	@ (800cee0 <linealiza+0x190>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	001a      	movs	r2, r3
 800ce62:	4b1e      	ldr	r3, [pc, #120]	@ (800cedc <linealiza+0x18c>)
 800ce64:	801a      	strh	r2, [r3, #0]

	A = 10;
 800ce66:	4b1e      	ldr	r3, [pc, #120]	@ (800cee0 <linealiza+0x190>)
 800ce68:	220a      	movs	r2, #10
 800ce6a:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800ce6c:	4b1b      	ldr	r3, [pc, #108]	@ (800cedc <linealiza+0x18c>)
 800ce6e:	881b      	ldrh	r3, [r3, #0]
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	001a      	movs	r2, r3
 800ce74:	4b1a      	ldr	r3, [pc, #104]	@ (800cee0 <linealiza+0x190>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	4353      	muls	r3, r2
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	4b17      	ldr	r3, [pc, #92]	@ (800cedc <linealiza+0x18c>)
 800ce7e:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800ce80:	4b16      	ldr	r3, [pc, #88]	@ (800cedc <linealiza+0x18c>)
 800ce82:	881a      	ldrh	r2, [r3, #0]
 800ce84:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb4 <linealiza+0x164>)
 800ce86:	881b      	ldrh	r3, [r3, #0]
 800ce88:	18d3      	adds	r3, r2, r3
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	4b13      	ldr	r3, [pc, #76]	@ (800cedc <linealiza+0x18c>)
 800ce8e:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800ce90:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <linealiza+0x16c>)
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	b21b      	sxth	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da05      	bge.n	800cea6 <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800ce9a:	4b10      	ldr	r3, [pc, #64]	@ (800cedc <linealiza+0x18c>)
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	425b      	negs	r3, r3
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	4b0e      	ldr	r3, [pc, #56]	@ (800cedc <linealiza+0x18c>)
 800cea4:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800cea6:	4b0d      	ldr	r3, [pc, #52]	@ (800cedc <linealiza+0x18c>)
 800cea8:	881a      	ldrh	r2, [r3, #0]
 800ceaa:	4b02      	ldr	r3, [pc, #8]	@ (800ceb4 <linealiza+0x164>)
 800ceac:	801a      	strh	r2, [r3, #0]
}
 800ceae:	46c0      	nop			@ (mov r8, r8)
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	2000117e 	.word	0x2000117e
 800ceb8:	2000117c 	.word	0x2000117c
 800cebc:	20001178 	.word	0x20001178
 800cec0:	20001174 	.word	0x20001174
 800cec4:	0000038d 	.word	0x0000038d
 800cec8:	00000339 	.word	0x00000339
 800cecc:	000002aa 	.word	0x000002aa
 800ced0:	0000ffff 	.word	0x0000ffff
 800ced4:	000093cc 	.word	0x000093cc
 800ced8:	00002ecc 	.word	0x00002ecc
 800cedc:	2000117a 	.word	0x2000117a
 800cee0:	20001176 	.word	0x20001176
 800cee4:	20000b64 	.word	0x20000b64

0800cee8 <mult1x2>:

void mult1x2(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800ceec:	4b2f      	ldr	r3, [pc, #188]	@ (800cfac <mult1x2+0xc4>)
 800ceee:	881a      	ldrh	r2, [r3, #0]
 800cef0:	4b2f      	ldr	r3, [pc, #188]	@ (800cfb0 <mult1x2+0xc8>)
 800cef2:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800cef4:	4b2e      	ldr	r3, [pc, #184]	@ (800cfb0 <mult1x2+0xc8>)
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	0a1b      	lsrs	r3, r3, #8
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	4b2d      	ldr	r3, [pc, #180]	@ (800cfb4 <mult1x2+0xcc>)
 800cf00:	701a      	strb	r2, [r3, #0]
	Y = A;
 800cf02:	4b2c      	ldr	r3, [pc, #176]	@ (800cfb4 <mult1x2+0xcc>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	001a      	movs	r2, r3
 800cf08:	4b28      	ldr	r3, [pc, #160]	@ (800cfac <mult1x2+0xc4>)
 800cf0a:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800cf0c:	4b2a      	ldr	r3, [pc, #168]	@ (800cfb8 <mult1x2+0xd0>)
 800cf0e:	781a      	ldrb	r2, [r3, #0]
 800cf10:	4b28      	ldr	r3, [pc, #160]	@ (800cfb4 <mult1x2+0xcc>)
 800cf12:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800cf14:	4b27      	ldr	r3, [pc, #156]	@ (800cfb4 <mult1x2+0xcc>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	001a      	movs	r2, r3
 800cf1a:	4b24      	ldr	r3, [pc, #144]	@ (800cfac <mult1x2+0xc4>)
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	4353      	muls	r3, r2
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	4b22      	ldr	r3, [pc, #136]	@ (800cfac <mult1x2+0xc4>)
 800cf24:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800cf26:	4b21      	ldr	r3, [pc, #132]	@ (800cfac <mult1x2+0xc4>)
 800cf28:	881a      	ldrh	r2, [r3, #0]
 800cf2a:	4b24      	ldr	r3, [pc, #144]	@ (800cfbc <mult1x2+0xd4>)
 800cf2c:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800cf2e:	4b20      	ldr	r3, [pc, #128]	@ (800cfb0 <mult1x2+0xc8>)
 800cf30:	881b      	ldrh	r3, [r3, #0]
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	4b1f      	ldr	r3, [pc, #124]	@ (800cfb4 <mult1x2+0xcc>)
 800cf36:	701a      	strb	r2, [r3, #0]
	Y = A;
 800cf38:	4b1e      	ldr	r3, [pc, #120]	@ (800cfb4 <mult1x2+0xcc>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	001a      	movs	r2, r3
 800cf3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cfac <mult1x2+0xc4>)
 800cf40:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800cf42:	4b1d      	ldr	r3, [pc, #116]	@ (800cfb8 <mult1x2+0xd0>)
 800cf44:	781a      	ldrb	r2, [r3, #0]
 800cf46:	4b1b      	ldr	r3, [pc, #108]	@ (800cfb4 <mult1x2+0xcc>)
 800cf48:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800cf4a:	4b1a      	ldr	r3, [pc, #104]	@ (800cfb4 <mult1x2+0xcc>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	001a      	movs	r2, r3
 800cf50:	4b16      	ldr	r3, [pc, #88]	@ (800cfac <mult1x2+0xc4>)
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	4353      	muls	r3, r2
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	4b14      	ldr	r3, [pc, #80]	@ (800cfac <mult1x2+0xc4>)
 800cf5a:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800cf5c:	4b13      	ldr	r3, [pc, #76]	@ (800cfac <mult1x2+0xc4>)
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	4b14      	ldr	r3, [pc, #80]	@ (800cfb4 <mult1x2+0xcc>)
 800cf64:	701a      	strb	r2, [r3, #0]
	resul = A;
 800cf66:	4b13      	ldr	r3, [pc, #76]	@ (800cfb4 <mult1x2+0xcc>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	001a      	movs	r2, r3
 800cf6c:	4b10      	ldr	r3, [pc, #64]	@ (800cfb0 <mult1x2+0xc8>)
 800cf6e:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800cf70:	4b0e      	ldr	r3, [pc, #56]	@ (800cfac <mult1x2+0xc4>)
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	0a1b      	lsrs	r3, r3, #8
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb4 <mult1x2+0xcc>)
 800cf7c:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	@ (800cfbc <mult1x2+0xd4>)
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb4 <mult1x2+0xcc>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	18d3      	adds	r3, r2, r3
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	4b09      	ldr	r3, [pc, #36]	@ (800cfb4 <mult1x2+0xcc>)
 800cf8e:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800cf90:	4b08      	ldr	r3, [pc, #32]	@ (800cfb4 <mult1x2+0xcc>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	4b05      	ldr	r3, [pc, #20]	@ (800cfb0 <mult1x2+0xc8>)
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	18d3      	adds	r3, r2, r3
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	4b03      	ldr	r3, [pc, #12]	@ (800cfb0 <mult1x2+0xc8>)
 800cfa2:	801a      	strh	r2, [r3, #0]
}
 800cfa4:	46c0      	nop			@ (mov r8, r8)
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	46c0      	nop			@ (mov r8, r8)
 800cfac:	20001178 	.word	0x20001178
 800cfb0:	2000117c 	.word	0x2000117c
 800cfb4:	20001176 	.word	0x20001176
 800cfb8:	20000b65 	.word	0x20000b65
 800cfbc:	20001180 	.word	0x20001180

0800cfc0 <capturaAD>:

void capturaAD (void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800cfc6:	4b1a      	ldr	r3, [pc, #104]	@ (800d030 <capturaAD+0x70>)
 800cfc8:	689a      	ldr	r2, [r3, #8]
 800cfca:	4b19      	ldr	r3, [pc, #100]	@ (800d030 <capturaAD+0x70>)
 800cfcc:	2101      	movs	r1, #1
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800cfd2:	4b17      	ldr	r3, [pc, #92]	@ (800d030 <capturaAD+0x70>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	4b16      	ldr	r3, [pc, #88]	@ (800d030 <capturaAD+0x70>)
 800cfd8:	211c      	movs	r1, #28
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800cfde:	4b14      	ldr	r3, [pc, #80]	@ (800d030 <capturaAD+0x70>)
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	4b13      	ldr	r3, [pc, #76]	@ (800d030 <capturaAD+0x70>)
 800cfe4:	2104      	movs	r1, #4
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800cfea:	46c0      	nop			@ (mov r8, r8)
 800cfec:	4b10      	ldr	r3, [pc, #64]	@ (800d030 <capturaAD+0x70>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2204      	movs	r2, #4
 800cff2:	4013      	ands	r3, r2
 800cff4:	d0fa      	beq.n	800cfec <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800cff6:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <capturaAD+0x70>)
 800cff8:	689a      	ldr	r2, [r3, #8]
 800cffa:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <capturaAD+0x70>)
 800cffc:	210c      	movs	r1, #12
 800cffe:	438a      	bics	r2, r1
 800d000:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 250; i++)
 800d002:	1dfb      	adds	r3, r7, #7
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	e009      	b.n	800d01e <capturaAD+0x5e>

	adcramh = ADC1->DR;
 800d00a:	4b09      	ldr	r3, [pc, #36]	@ (800d030 <capturaAD+0x70>)
 800d00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d00e:	b29a      	uxth	r2, r3
 800d010:	4b08      	ldr	r3, [pc, #32]	@ (800d034 <capturaAD+0x74>)
 800d012:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i < 250; i++)
 800d014:	1dfb      	adds	r3, r7, #7
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	1dfb      	adds	r3, r7, #7
 800d01a:	3201      	adds	r2, #1
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	1dfb      	adds	r3, r7, #7
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2bf9      	cmp	r3, #249	@ 0xf9
 800d024:	d9f1      	bls.n	800d00a <capturaAD+0x4a>
}
 800d026:	46c0      	nop			@ (mov r8, r8)
 800d028:	46c0      	nop			@ (mov r8, r8)
 800d02a:	46bd      	mov	sp, r7
 800d02c:	b002      	add	sp, #8
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	40012400 	.word	0x40012400
 800d034:	20000b70 	.word	0x20000b70

0800d038 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	0002      	movs	r2, r0
 800d040:	1dfb      	adds	r3, r7, #7
 800d042:	701a      	strb	r2, [r3, #0]
 800d044:	1d3b      	adds	r3, r7, #4
 800d046:	1c0a      	adds	r2, r1, #0
 800d048:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800d04a:	4b0f      	ldr	r3, [pc, #60]	@ (800d088 <wise_hot_rep+0x50>)
 800d04c:	1dfa      	adds	r2, r7, #7
 800d04e:	7812      	ldrb	r2, [r2, #0]
 800d050:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800d052:	4b0e      	ldr	r3, [pc, #56]	@ (800d08c <wise_hot_rep+0x54>)
 800d054:	881a      	ldrh	r2, [r3, #0]
 800d056:	4b0e      	ldr	r3, [pc, #56]	@ (800d090 <wise_hot_rep+0x58>)
 800d058:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800d05a:	f7ff ff45 	bl	800cee8 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800d05e:	4b0d      	ldr	r3, [pc, #52]	@ (800d094 <wise_hot_rep+0x5c>)
 800d060:	881a      	ldrh	r2, [r3, #0]
 800d062:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <wise_hot_rep+0x60>)
 800d064:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800d066:	4b0c      	ldr	r3, [pc, #48]	@ (800d098 <wise_hot_rep+0x60>)
 800d068:	881a      	ldrh	r2, [r3, #0]
 800d06a:	1d3b      	adds	r3, r7, #4
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	b29a      	uxth	r2, r3
 800d072:	4b09      	ldr	r3, [pc, #36]	@ (800d098 <wise_hot_rep+0x60>)
 800d074:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800d076:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <wise_hot_rep+0x60>)
 800d078:	881a      	ldrh	r2, [r3, #0]
 800d07a:	4b08      	ldr	r3, [pc, #32]	@ (800d09c <wise_hot_rep+0x64>)
 800d07c:	801a      	strh	r2, [r3, #0]
}
 800d07e:	46c0      	nop			@ (mov r8, r8)
 800d080:	46bd      	mov	sp, r7
 800d082:	b002      	add	sp, #8
 800d084:	bd80      	pop	{r7, pc}
 800d086:	46c0      	nop			@ (mov r8, r8)
 800d088:	20000b65 	.word	0x20000b65
 800d08c:	20001174 	.word	0x20001174
 800d090:	20001178 	.word	0x20001178
 800d094:	2000117c 	.word	0x2000117c
 800d098:	2000117a 	.word	0x2000117a
 800d09c:	2000117e 	.word	0x2000117e

0800d0a0 <Y_A>:

void Y_A (void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	af00      	add	r7, sp, #0
	Y = adcramh;
 800d0a4:	4b05      	ldr	r3, [pc, #20]	@ (800d0bc <Y_A+0x1c>)
 800d0a6:	881a      	ldrh	r2, [r3, #0]
 800d0a8:	4b05      	ldr	r3, [pc, #20]	@ (800d0c0 <Y_A+0x20>)
 800d0aa:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800d0ac:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <Y_A+0x24>)
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	4b05      	ldr	r3, [pc, #20]	@ (800d0c8 <Y_A+0x28>)
 800d0b2:	701a      	strb	r2, [r3, #0]
}
 800d0b4:	46c0      	nop			@ (mov r8, r8)
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	46c0      	nop			@ (mov r8, r8)
 800d0bc:	20000b70 	.word	0x20000b70
 800d0c0:	20001178 	.word	0x20001178
 800d0c4:	20000ba8 	.word	0x20000ba8
 800d0c8:	20001176 	.word	0x20001176

0800d0cc <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	0019      	movs	r1, r3
 800d0d8:	1dfb      	adds	r3, r7, #7
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	1dbb      	adds	r3, r7, #6
 800d0de:	1c0a      	adds	r2, r1, #0
 800d0e0:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800d0e2:	1dfb      	adds	r3, r7, #7
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	18d3      	adds	r3, r2, r3
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800d0ee:	1dbb      	adds	r3, r7, #6
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	18d3      	adds	r3, r2, r3
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
}
 800d0fa:	46c0      	nop			@ (mov r8, r8)
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	b004      	add	sp, #16
 800d100:	bd80      	pop	{r7, pc}

0800d102 <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	0019      	movs	r1, r3
 800d10e:	1dfb      	adds	r3, r7, #7
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	1dbb      	adds	r3, r7, #6
 800d114:	1c0a      	adds	r2, r1, #0
 800d116:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800d118:	1dfb      	adds	r3, r7, #7
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	18d3      	adds	r3, r2, r3
 800d120:	2200      	movs	r2, #0
 800d122:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800d124:	1dbb      	adds	r3, r7, #6
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	18d3      	adds	r3, r2, r3
 800d12c:	2200      	movs	r2, #0
 800d12e:	701a      	strb	r2, [r3, #0]
}
 800d130:	46c0      	nop			@ (mov r8, r8)
 800d132:	46bd      	mov	sp, r7
 800d134:	b004      	add	sp, #16
 800d136:	bd80      	pop	{r7, pc}

0800d138 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0

    asm ("nop");
 800d13c:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800d13e:	4bd5      	ldr	r3, [pc, #852]	@ (800d494 <tiempo+0x35c>)
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b07      	cmp	r3, #7
 800d144:	d900      	bls.n	800d148 <tiempo+0x10>
 800d146:	e269      	b.n	800d61c <tiempo+0x4e4>
			goto tiempo10;				//	jrult		tiempo10;
 800d148:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800d14a:	4bd3      	ldr	r3, [pc, #844]	@ (800d498 <tiempo+0x360>)
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	3301      	adds	r3, #1
 800d150:	b29a      	uxth	r2, r3
 800d152:	4bd1      	ldr	r3, [pc, #836]	@ (800d498 <tiempo+0x360>)
 800d154:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800d156:	4bd1      	ldr	r3, [pc, #836]	@ (800d49c <tiempo+0x364>)
 800d158:	0018      	movs	r0, r3
 800d15a:	f7f9 ff0c 	bl	8006f76 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800d15e:	4bd0      	ldr	r3, [pc, #832]	@ (800d4a0 <tiempo+0x368>)
 800d160:	0018      	movs	r0, r3
 800d162:	f7f9 ff08 	bl	8006f76 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800d166:	4bcf      	ldr	r3, [pc, #828]	@ (800d4a4 <tiempo+0x36c>)
 800d168:	0018      	movs	r0, r3
 800d16a:	f7f9 ff04 	bl	8006f76 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800d16e:	4bce      	ldr	r3, [pc, #824]	@ (800d4a8 <tiempo+0x370>)
 800d170:	0018      	movs	r0, r3
 800d172:	f7f9 ff00 	bl	8006f76 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800d176:	4bcd      	ldr	r3, [pc, #820]	@ (800d4ac <tiempo+0x374>)
 800d178:	0018      	movs	r0, r3
 800d17a:	f7f9 fefc 	bl	8006f76 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800d17e:	4bcc      	ldr	r3, [pc, #816]	@ (800d4b0 <tiempo+0x378>)
 800d180:	0018      	movs	r0, r3
 800d182:	f7f9 fef8 	bl	8006f76 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800d186:	4bcb      	ldr	r3, [pc, #812]	@ (800d4b4 <tiempo+0x37c>)
 800d188:	0018      	movs	r0, r3
 800d18a:	f7f9 fef4 	bl	8006f76 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800d18e:	4bca      	ldr	r3, [pc, #808]	@ (800d4b8 <tiempo+0x380>)
 800d190:	0018      	movs	r0, r3
 800d192:	f7f9 fef0 	bl	8006f76 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800d196:	4bc9      	ldr	r3, [pc, #804]	@ (800d4bc <tiempo+0x384>)
 800d198:	0018      	movs	r0, r3
 800d19a:	f7f9 feec 	bl	8006f76 <decwreg>

		       cntcent++;					//	Una centésima más
 800d19e:	4bc8      	ldr	r3, [pc, #800]	@ (800d4c0 <tiempo+0x388>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	4bc6      	ldr	r3, [pc, #792]	@ (800d4c0 <tiempo+0x388>)
 800d1a8:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800d1aa:	4bc5      	ldr	r3, [pc, #788]	@ (800d4c0 <tiempo+0x388>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	001a      	movs	r2, r3
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	d01c      	beq.n	800d1f0 <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800d1b6:	4bc3      	ldr	r3, [pc, #780]	@ (800d4c4 <tiempo+0x38c>)
 800d1b8:	0018      	movs	r0, r3
 800d1ba:	f7f9 fedc 	bl	8006f76 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800d1be:	4bc2      	ldr	r3, [pc, #776]	@ (800d4c8 <tiempo+0x390>)
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7f9 fed8 	bl	8006f76 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800d1c6:	4bc1      	ldr	r3, [pc, #772]	@ (800d4cc <tiempo+0x394>)
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	f7f9 fed4 	bl	8006f76 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800d1ce:	4bc0      	ldr	r3, [pc, #768]	@ (800d4d0 <tiempo+0x398>)
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f7f9 fed0 	bl	8006f76 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800d1d6:	4bbf      	ldr	r3, [pc, #764]	@ (800d4d4 <tiempo+0x39c>)
 800d1d8:	0018      	movs	r0, r3
 800d1da:	f7f9 fecc 	bl	8006f76 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800d1de:	4bbe      	ldr	r3, [pc, #760]	@ (800d4d8 <tiempo+0x3a0>)
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f7f9 fec8 	bl	8006f76 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800d1e6:	4bbd      	ldr	r3, [pc, #756]	@ (800d4dc <tiempo+0x3a4>)
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	f7f9 fec4 	bl	8006f76 <decwreg>
 800d1ee:	e000      	b.n	800d1f2 <tiempo+0xba>
			        goto no_dec_deb;
 800d1f0:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800d1f2:	4bb3      	ldr	r3, [pc, #716]	@ (800d4c0 <tiempo+0x388>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b63      	cmp	r3, #99	@ 0x63
 800d1f8:	d800      	bhi.n	800d1fc <tiempo+0xc4>
 800d1fa:	e211      	b.n	800d620 <tiempo+0x4e8>
		        	goto tiempo12;			//;jruge		tiempo12
 800d1fc:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800d1fe:	4bb0      	ldr	r3, [pc, #704]	@ (800d4c0 <tiempo+0x388>)
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800d204:	4bb6      	ldr	r3, [pc, #728]	@ (800d4e0 <tiempo+0x3a8>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d142      	bne.n	800d292 <tiempo+0x15a>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800d20c:	4bb5      	ldr	r3, [pc, #724]	@ (800d4e4 <tiempo+0x3ac>)
 800d20e:	0018      	movs	r0, r3
 800d210:	f7f9 fe9f 	bl	8006f52 <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800d214:	4bb4      	ldr	r3, [pc, #720]	@ (800d4e8 <tiempo+0x3b0>)
 800d216:	785b      	ldrb	r3, [r3, #1]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11e      	bne.n	800d25a <tiempo+0x122>
 800d21c:	4bb3      	ldr	r3, [pc, #716]	@ (800d4ec <tiempo+0x3b4>)
 800d21e:	78db      	ldrb	r3, [r3, #3]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d11a      	bne.n	800d25a <tiempo+0x122>
 800d224:	4bb1      	ldr	r3, [pc, #708]	@ (800d4ec <tiempo+0x3b4>)
 800d226:	791b      	ldrb	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d116      	bne.n	800d25a <tiempo+0x122>
					goto no_toggleCOM;

toggleCOM:
 800d22c:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800d22e:	4bb0      	ldr	r3, [pc, #704]	@ (800d4f0 <tiempo+0x3b8>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d113      	bne.n	800d25e <tiempo+0x126>
					goto no_toggleCOM;
				flagsTxControl[f_select] = !(flagsTxControl[f_select]);// bcpl		flagsTxControl,#f_select
 800d236:	4bac      	ldr	r3, [pc, #688]	@ (800d4e8 <tiempo+0x3b0>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	4193      	sbcs	r3, r2
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2201      	movs	r2, #1
 800d242:	4053      	eors	r3, r2
 800d244:	b2db      	uxtb	r3, r3
 800d246:	1c1a      	adds	r2, r3, #0
 800d248:	2301      	movs	r3, #1
 800d24a:	4013      	ands	r3, r2
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4ba6      	ldr	r3, [pc, #664]	@ (800d4e8 <tiempo+0x3b0>)
 800d250:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800d252:	4b92      	ldr	r3, [pc, #584]	@ (800d49c <tiempo+0x364>)
 800d254:	220a      	movs	r2, #10
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	e002      	b.n	800d260 <tiempo+0x128>
					goto no_toggleCOM;
 800d25a:	46c0      	nop			@ (mov r8, r8)
 800d25c:	e000      	b.n	800d260 <tiempo+0x128>
					goto no_toggleCOM;
 800d25e:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800d260:	4ba1      	ldr	r3, [pc, #644]	@ (800d4e8 <tiempo+0x3b0>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2201      	movs	r2, #1
 800d266:	4053      	eors	r3, r2
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d108      	bne.n	800d280 <tiempo+0x148>
					goto BLEselect;
WIFIselect:
 800d26e:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800d270:	2380      	movs	r3, #128	@ 0x80
 800d272:	015b      	lsls	r3, r3, #5
 800d274:	489f      	ldr	r0, [pc, #636]	@ (800d4f4 <tiempo+0x3bc>)
 800d276:	2201      	movs	r2, #1
 800d278:	0019      	movs	r1, r3
 800d27a:	f006 fafc 	bl	8013876 <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800d27e:	e009      	b.n	800d294 <tiempo+0x15c>
					goto BLEselect;
 800d280:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800d282:	2380      	movs	r3, #128	@ 0x80
 800d284:	015b      	lsls	r3, r3, #5
 800d286:	489b      	ldr	r0, [pc, #620]	@ (800d4f4 <tiempo+0x3bc>)
 800d288:	2200      	movs	r2, #0
 800d28a:	0019      	movs	r1, r3
 800d28c:	f006 faf3 	bl	8013876 <HAL_GPIO_WritePin>
 800d290:	e000      	b.n	800d294 <tiempo+0x15c>
					goto endSelect;
 800d292:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800d294:	4b98      	ldr	r3, [pc, #608]	@ (800d4f8 <tiempo+0x3c0>)
 800d296:	0018      	movs	r0, r3
 800d298:	f7f9 fe5b 	bl	8006f52 <decword>
	            decwreg(&timeTxTBLE);
 800d29c:	4b97      	ldr	r3, [pc, #604]	@ (800d4fc <tiempo+0x3c4>)
 800d29e:	0018      	movs	r0, r3
 800d2a0:	f7f9 fe69 	bl	8006f76 <decwreg>
				decword(&timeoutTBLE);
 800d2a4:	4b96      	ldr	r3, [pc, #600]	@ (800d500 <tiempo+0x3c8>)
 800d2a6:	0018      	movs	r0, r3
 800d2a8:	f7f9 fe53 	bl	8006f52 <decword>
	            decwreg(&timeTxTWF);
 800d2ac:	4b95      	ldr	r3, [pc, #596]	@ (800d504 <tiempo+0x3cc>)
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	f7f9 fe61 	bl	8006f76 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800d2b4:	4b94      	ldr	r3, [pc, #592]	@ (800d508 <tiempo+0x3d0>)
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	f7f9 fe4b 	bl	8006f52 <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800d2bc:	4b93      	ldr	r3, [pc, #588]	@ (800d50c <tiempo+0x3d4>)
 800d2be:	0018      	movs	r0, r3
 800d2c0:	f7f9 fe59 	bl	8006f76 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800d2c4:	4b92      	ldr	r3, [pc, #584]	@ (800d510 <tiempo+0x3d8>)
 800d2c6:	0018      	movs	r0, r3
 800d2c8:	f7f9 fe55 	bl	8006f76 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800d2cc:	4b91      	ldr	r3, [pc, #580]	@ (800d514 <tiempo+0x3dc>)
 800d2ce:	0018      	movs	r0, r3
 800d2d0:	f7f9 fe51 	bl	8006f76 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800d2d4:	4b90      	ldr	r3, [pc, #576]	@ (800d518 <tiempo+0x3e0>)
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f7f9 fe4d 	bl	8006f76 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800d2dc:	4b8f      	ldr	r3, [pc, #572]	@ (800d51c <tiempo+0x3e4>)
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f7f9 fe49 	bl	8006f76 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800d2e4:	4b8e      	ldr	r3, [pc, #568]	@ (800d520 <tiempo+0x3e8>)
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	f7f9 fe45 	bl	8006f76 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800d2ec:	4b8d      	ldr	r3, [pc, #564]	@ (800d524 <tiempo+0x3ec>)
 800d2ee:	0018      	movs	r0, r3
 800d2f0:	f7f9 fe2f 	bl	8006f52 <decword>
		    	decword(&timePreDh_h);
 800d2f4:	4b8c      	ldr	r3, [pc, #560]	@ (800d528 <tiempo+0x3f0>)
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f7f9 fe2b 	bl	8006f52 <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800d2fc:	4b8b      	ldr	r3, [pc, #556]	@ (800d52c <tiempo+0x3f4>)
 800d2fe:	0018      	movs	r0, r3
 800d300:	f7f9 fe39 	bl	8006f76 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800d304:	4b8a      	ldr	r3, [pc, #552]	@ (800d530 <tiempo+0x3f8>)
 800d306:	0018      	movs	r0, r3
 800d308:	f7f9 fe35 	bl	8006f76 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800d30c:	4b89      	ldr	r3, [pc, #548]	@ (800d534 <tiempo+0x3fc>)
 800d30e:	0018      	movs	r0, r3
 800d310:	f7f9 fe31 	bl	8006f76 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800d314:	4b88      	ldr	r3, [pc, #544]	@ (800d538 <tiempo+0x400>)
 800d316:	0018      	movs	r0, r3
 800d318:	f7f9 fe2d 	bl	8006f76 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800d31c:	4b87      	ldr	r3, [pc, #540]	@ (800d53c <tiempo+0x404>)
 800d31e:	0018      	movs	r0, r3
 800d320:	f7f9 fe29 	bl	8006f76 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800d324:	4b86      	ldr	r3, [pc, #536]	@ (800d540 <tiempo+0x408>)
 800d326:	0018      	movs	r0, r3
 800d328:	f7f9 fe25 	bl	8006f76 <decwreg>
		    	decwreg(&valflvl);//
 800d32c:	4b85      	ldr	r3, [pc, #532]	@ (800d544 <tiempo+0x40c>)
 800d32e:	0018      	movs	r0, r3
 800d330:	f7f9 fe21 	bl	8006f76 <decwreg>
		    	decwreg(&valfhvl);//
 800d334:	4b84      	ldr	r3, [pc, #528]	@ (800d548 <tiempo+0x410>)
 800d336:	0018      	movs	r0, r3
 800d338:	f7f9 fe1d 	bl	8006f76 <decwreg>
		    	decwreg(&cnt_prog);//
 800d33c:	4b83      	ldr	r3, [pc, #524]	@ (800d54c <tiempo+0x414>)
 800d33e:	0018      	movs	r0, r3
 800d340:	f7f9 fe19 	bl	8006f76 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800d344:	4b82      	ldr	r3, [pc, #520]	@ (800d550 <tiempo+0x418>)
 800d346:	0018      	movs	r0, r3
 800d348:	f7f9 fe15 	bl	8006f76 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800d34c:	4b81      	ldr	r3, [pc, #516]	@ (800d554 <tiempo+0x41c>)
 800d34e:	0018      	movs	r0, r3
 800d350:	f7f9 fe11 	bl	8006f76 <decwreg>
		    	decwreg(&End_sec);//
 800d354:	4b80      	ldr	r3, [pc, #512]	@ (800d558 <tiempo+0x420>)
 800d356:	0018      	movs	r0, r3
 800d358:	f7f9 fe0d 	bl	8006f76 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800d35c:	4b7f      	ldr	r3, [pc, #508]	@ (800d55c <tiempo+0x424>)
 800d35e:	0018      	movs	r0, r3
 800d360:	f7f9 fdf7 	bl	8006f52 <decword>

		    	decwreg(&timeOutRst);
 800d364:	4b7e      	ldr	r3, [pc, #504]	@ (800d560 <tiempo+0x428>)
 800d366:	0018      	movs	r0, r3
 800d368:	f7f9 fe05 	bl	8006f76 <decwreg>
		    	decwreg(&timeOutRx);
 800d36c:	4b7d      	ldr	r3, [pc, #500]	@ (800d564 <tiempo+0x42c>)
 800d36e:	0018      	movs	r0, r3
 800d370:	f7f9 fe01 	bl	8006f76 <decwreg>
		    	decwreg(&timeRstBLE);
 800d374:	4b7c      	ldr	r3, [pc, #496]	@ (800d568 <tiempo+0x430>)
 800d376:	0018      	movs	r0, r3
 800d378:	f7f9 fdfd 	bl	8006f76 <decwreg>
		    	decword(&cntLogger_H);			// decrementra contador de logger
 800d37c:	4b7b      	ldr	r3, [pc, #492]	@ (800d56c <tiempo+0x434>)
 800d37e:	0018      	movs	r0, r3
 800d380:	f7f9 fde7 	bl	8006f52 <decword>
		    	decwreg(&cntInitTx);
 800d384:	4b7a      	ldr	r3, [pc, #488]	@ (800d570 <tiempo+0x438>)
 800d386:	0018      	movs	r0, r3
 800d388:	f7f9 fdf5 	bl	8006f76 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800d38c:	4b79      	ldr	r3, [pc, #484]	@ (800d574 <tiempo+0x43c>)
 800d38e:	0018      	movs	r0, r3
 800d390:	f7f9 fddf 	bl	8006f52 <decword>

		    	decword(&t_ahorro1_H);
 800d394:	4b78      	ldr	r3, [pc, #480]	@ (800d578 <tiempo+0x440>)
 800d396:	0018      	movs	r0, r3
 800d398:	f7f9 fddb 	bl	8006f52 <decword>
		    	decword(&t_ahorro2_H);
 800d39c:	4b77      	ldr	r3, [pc, #476]	@ (800d57c <tiempo+0x444>)
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f7f9 fdd7 	bl	8006f52 <decword>
		    	decword(&cntNoct_H);
 800d3a4:	4b76      	ldr	r3, [pc, #472]	@ (800d580 <tiempo+0x448>)
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f7f9 fdd3 	bl	8006f52 <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800d3ac:	4b61      	ldr	r3, [pc, #388]	@ (800d534 <tiempo+0x3fc>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	001a      	movs	r2, r3
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	d104      	bne.n	800d3c2 <tiempo+0x28a>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800d3b8:	4b72      	ldr	r3, [pc, #456]	@ (800d584 <tiempo+0x44c>)
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	f7f9 fddb 	bl	8006f76 <decwreg>
 800d3c0:	e000      	b.n	800d3c4 <tiempo+0x28c>
		    		goto no_dec2;
 800d3c2:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800d3c4:	4b70      	ldr	r3, [pc, #448]	@ (800d588 <tiempo+0x450>)
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f7f9 fdc3 	bl	8006f52 <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800d3cc:	4b6f      	ldr	r3, [pc, #444]	@ (800d58c <tiempo+0x454>)
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f7f9 fdbf 	bl	8006f52 <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800d3d4:	4b6e      	ldr	r3, [pc, #440]	@ (800d590 <tiempo+0x458>)
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	f7f9 fdbb 	bl	8006f52 <decword>
		    	decword(&drp_fanh);
 800d3dc:	4b6d      	ldr	r3, [pc, #436]	@ (800d594 <tiempo+0x45c>)
 800d3de:	0018      	movs	r0, r3
 800d3e0:	f7f9 fdb7 	bl	8006f52 <decword>
		    	decword(&drp_comph);
 800d3e4:	4b6c      	ldr	r3, [pc, #432]	@ (800d598 <tiempo+0x460>)
 800d3e6:	0018      	movs	r0, r3
 800d3e8:	f7f9 fdb3 	bl	8006f52 <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800d3ec:	4b6b      	ldr	r3, [pc, #428]	@ (800d59c <tiempo+0x464>)
 800d3ee:	881a      	ldrh	r2, [r3, #0]
 800d3f0:	4b6b      	ldr	r3, [pc, #428]	@ (800d5a0 <tiempo+0x468>)
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d204      	bcs.n	800d402 <tiempo+0x2ca>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800d3f8:	4b6a      	ldr	r3, [pc, #424]	@ (800d5a4 <tiempo+0x46c>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d006      	beq.n	800d40e <tiempo+0x2d6>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800d400:	e000      	b.n	800d404 <tiempo+0x2cc>
		    		goto tiempo_17;
 800d402:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800d404:	4b65      	ldr	r3, [pc, #404]	@ (800d59c <tiempo+0x464>)
 800d406:	0018      	movs	r0, r3
 800d408:	f7f9 fda3 	bl	8006f52 <decword>
 800d40c:	e000      	b.n	800d410 <tiempo+0x2d8>
	        	goto tiempo20; //jra tiempo20
 800d40e:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800d410:	4b65      	ldr	r3, [pc, #404]	@ (800d5a8 <tiempo+0x470>)
 800d412:	0018      	movs	r0, r3
 800d414:	f7f9 fd9d 	bl	8006f52 <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800d418:	4b64      	ldr	r3, [pc, #400]	@ (800d5ac <tiempo+0x474>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	3301      	adds	r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	4b62      	ldr	r3, [pc, #392]	@ (800d5ac <tiempo+0x474>)
 800d422:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800d424:	4b61      	ldr	r3, [pc, #388]	@ (800d5ac <tiempo+0x474>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b3b      	cmp	r3, #59	@ 0x3b
 800d42a:	d907      	bls.n	800d43c <tiempo+0x304>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800d42c:	4b5f      	ldr	r3, [pc, #380]	@ (800d5ac <tiempo+0x474>)
 800d42e:	2200      	movs	r2, #0
 800d430:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800d432:	4b5f      	ldr	r3, [pc, #380]	@ (800d5b0 <tiempo+0x478>)
 800d434:	0018      	movs	r0, r3
 800d436:	f7f9 fd9e 	bl	8006f76 <decwreg>
 800d43a:	e000      	b.n	800d43e <tiempo+0x306>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800d43c:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
 800d43e:	2380      	movs	r3, #128	@ 0x80
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	4a2c      	ldr	r2, [pc, #176]	@ (800d4f4 <tiempo+0x3bc>)
 800d444:	0019      	movs	r1, r3
 800d446:	0010      	movs	r0, r2
 800d448:	f006 fa32 	bl	80138b0 <HAL_GPIO_TogglePin>
				if(GetRegFlagState(cntseg, 3)){
 800d44c:	4b59      	ldr	r3, [pc, #356]	@ (800d5b4 <tiempo+0x47c>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	001a      	movs	r2, r3
 800d452:	2308      	movs	r3, #8
 800d454:	4013      	ands	r3, r2
 800d456:	d001      	beq.n	800d45c <tiempo+0x324>
					asm ("nop");
 800d458:	46c0      	nop			@ (mov r8, r8)
 800d45a:	e000      	b.n	800d45e <tiempo+0x326>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800d45c:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800d45e:	4b55      	ldr	r3, [pc, #340]	@ (800d5b4 <tiempo+0x47c>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	b2da      	uxtb	r2, r3
 800d466:	4b53      	ldr	r3, [pc, #332]	@ (800d5b4 <tiempo+0x47c>)
 800d468:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800d46a:	4b52      	ldr	r3, [pc, #328]	@ (800d5b4 <tiempo+0x47c>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b08      	cmp	r3, #8
 800d470:	d903      	bls.n	800d47a <tiempo+0x342>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800d472:	4b51      	ldr	r3, [pc, #324]	@ (800d5b8 <tiempo+0x480>)
 800d474:	2200      	movs	r2, #0
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	e000      	b.n	800d47c <tiempo+0x344>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800d47a:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800d47c:	4b4d      	ldr	r3, [pc, #308]	@ (800d5b4 <tiempo+0x47c>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	001a      	movs	r2, r3
 800d482:	2310      	movs	r3, #16
 800d484:	4013      	ands	r3, r2
 800d486:	d100      	bne.n	800d48a <tiempo+0x352>
 800d488:	e098      	b.n	800d5bc <tiempo+0x484>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800d48a:	4b4b      	ldr	r3, [pc, #300]	@ (800d5b8 <tiempo+0x480>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	71da      	strb	r2, [r3, #7]
 800d490:	e095      	b.n	800d5be <tiempo+0x486>
 800d492:	46c0      	nop			@ (mov r8, r8)
 800d494:	20000bce 	.word	0x20000bce
 800d498:	20000b5c 	.word	0x20000b5c
 800d49c:	20001104 	.word	0x20001104
 800d4a0:	20001074 	.word	0x20001074
 800d4a4:	200010ad 	.word	0x200010ad
 800d4a8:	20000bd2 	.word	0x20000bd2
 800d4ac:	20000bd9 	.word	0x20000bd9
 800d4b0:	20000c30 	.word	0x20000c30
 800d4b4:	20000c31 	.word	0x20000c31
 800d4b8:	20000c32 	.word	0x20000c32
 800d4bc:	20000c44 	.word	0x20000c44
 800d4c0:	20000b5a 	.word	0x20000b5a
 800d4c4:	20000c20 	.word	0x20000c20
 800d4c8:	20000c21 	.word	0x20000c21
 800d4cc:	20000c22 	.word	0x20000c22
 800d4d0:	20000c23 	.word	0x20000c23
 800d4d4:	20000c24 	.word	0x20000c24
 800d4d8:	20000c25 	.word	0x20000c25
 800d4dc:	20000c26 	.word	0x20000c26
 800d4e0:	2000004c 	.word	0x2000004c
 800d4e4:	20001108 	.word	0x20001108
 800d4e8:	200010fc 	.word	0x200010fc
 800d4ec:	20000f60 	.word	0x20000f60
 800d4f0:	20000e29 	.word	0x20000e29
 800d4f4:	50000400 	.word	0x50000400
 800d4f8:	20000ee8 	.word	0x20000ee8
 800d4fc:	2000110a 	.word	0x2000110a
 800d500:	2000110c 	.word	0x2000110c
 800d504:	20000f4a 	.word	0x20000f4a
 800d508:	20000f5c 	.word	0x20000f5c
 800d50c:	20000f8a 	.word	0x20000f8a
 800d510:	20000f8b 	.word	0x20000f8b
 800d514:	20001076 	.word	0x20001076
 800d518:	200010ae 	.word	0x200010ae
 800d51c:	20000ef7 	.word	0x20000ef7
 800d520:	200010b4 	.word	0x200010b4
 800d524:	20000fb0 	.word	0x20000fb0
 800d528:	2000110e 	.word	0x2000110e
 800d52c:	20000b7a 	.word	0x20000b7a
 800d530:	20000b7b 	.word	0x20000b7b
 800d534:	20000b7c 	.word	0x20000b7c
 800d538:	20000b7d 	.word	0x20000b7d
 800d53c:	20000b7e 	.word	0x20000b7e
 800d540:	20000b7f 	.word	0x20000b7f
 800d544:	20000b80 	.word	0x20000b80
 800d548:	20000b81 	.word	0x20000b81
 800d54c:	20000b82 	.word	0x20000b82
 800d550:	20000b83 	.word	0x20000b83
 800d554:	20000b84 	.word	0x20000b84
 800d558:	20000b85 	.word	0x20000b85
 800d55c:	20000c46 	.word	0x20000c46
 800d560:	20000ef5 	.word	0x20000ef5
 800d564:	20000ef6 	.word	0x20000ef6
 800d568:	20000ef8 	.word	0x20000ef8
 800d56c:	20000da8 	.word	0x20000da8
 800d570:	20000e2a 	.word	0x20000e2a
 800d574:	20000f5e 	.word	0x20000f5e
 800d578:	20000c40 	.word	0x20000c40
 800d57c:	20000c42 	.word	0x20000c42
 800d580:	20000c54 	.word	0x20000c54
 800d584:	20000c38 	.word	0x20000c38
 800d588:	20000b78 	.word	0x20000b78
 800d58c:	20000b72 	.word	0x20000b72
 800d590:	20000b76 	.word	0x20000b76
 800d594:	20000c0c 	.word	0x20000c0c
 800d598:	20000c0a 	.word	0x20000c0a
 800d59c:	20000bc6 	.word	0x20000bc6
 800d5a0:	20000bcc 	.word	0x20000bcc
 800d5a4:	20000b68 	.word	0x20000b68
 800d5a8:	20000bc8 	.word	0x20000bc8
 800d5ac:	20000b63 	.word	0x20000b63
 800d5b0:	20000bd7 	.word	0x20000bd7
 800d5b4:	20000b5b 	.word	0x20000b5b
 800d5b8:	20000b88 	.word	0x20000b88
					goto	tiempo_j01;		// Ya son 16 segundos?
 800d5bc:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800d5be:	4b1c      	ldr	r3, [pc, #112]	@ (800d630 <tiempo+0x4f8>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	2b3b      	cmp	r3, #59	@ 0x3b
 800d5c4:	d92e      	bls.n	800d624 <tiempo+0x4ec>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800d5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d630 <tiempo+0x4f8>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800d5cc:	4b19      	ldr	r3, [pc, #100]	@ (800d634 <tiempo+0x4fc>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800d5d2:	4b19      	ldr	r3, [pc, #100]	@ (800d638 <tiempo+0x500>)
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	f7f9 fcce 	bl	8006f76 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800d5da:	4b18      	ldr	r3, [pc, #96]	@ (800d63c <tiempo+0x504>)
 800d5dc:	0018      	movs	r0, r3
 800d5de:	f7f9 fcca 	bl	8006f76 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800d5e2:	4b17      	ldr	r3, [pc, #92]	@ (800d640 <tiempo+0x508>)
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	f7f9 fcc6 	bl	8006f76 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800d5ea:	4b16      	ldr	r3, [pc, #88]	@ (800d644 <tiempo+0x50c>)
 800d5ec:	0018      	movs	r0, r3
 800d5ee:	f7f9 fcc2 	bl	8006f76 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800d5f2:	4b15      	ldr	r3, [pc, #84]	@ (800d648 <tiempo+0x510>)
 800d5f4:	0018      	movs	r0, r3
 800d5f6:	f7f9 fcbe 	bl	8006f76 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800d5fa:	4b14      	ldr	r3, [pc, #80]	@ (800d64c <tiempo+0x514>)
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f7f9 fca8 	bl	8006f52 <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800d602:	4b13      	ldr	r3, [pc, #76]	@ (800d650 <tiempo+0x518>)
 800d604:	0018      	movs	r0, r3
 800d606:	f7f9 fca4 	bl	8006f52 <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800d60a:	4b12      	ldr	r3, [pc, #72]	@ (800d654 <tiempo+0x51c>)
 800d60c:	0018      	movs	r0, r3
 800d60e:	f7f9 fca0 	bl	8006f52 <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800d612:	4b11      	ldr	r3, [pc, #68]	@ (800d658 <tiempo+0x520>)
 800d614:	0018      	movs	r0, r3
 800d616:	f7f9 fcae 	bl	8006f76 <decwreg>
	    		 goto fintiem;
 800d61a:	e004      	b.n	800d626 <tiempo+0x4ee>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800d61c:	46c0      	nop			@ (mov r8, r8)
 800d61e:	e002      	b.n	800d626 <tiempo+0x4ee>
		        goto fintiem;
 800d620:	46c0      	nop			@ (mov r8, r8)
 800d622:	e000      	b.n	800d626 <tiempo+0x4ee>
					goto fintiem;				//jrult fintiem
 800d624:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800d626:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800d628:	46c0      	nop			@ (mov r8, r8)
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	46c0      	nop			@ (mov r8, r8)
 800d630:	20000b5b 	.word	0x20000b5b
 800d634:	20000be8 	.word	0x20000be8
 800d638:	20000c37 	.word	0x20000c37
 800d63c:	20000c08 	.word	0x20000c08
 800d640:	20000c09 	.word	0x20000c09
 800d644:	20000bd8 	.word	0x20000bd8
 800d648:	20000bdb 	.word	0x20000bdb
 800d64c:	20000b74 	.word	0x20000b74
 800d650:	20000c3c 	.word	0x20000c3c
 800d654:	20000c3e 	.word	0x20000c3e
 800d658:	20000c61 	.word	0x20000c61

0800d65c <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800d662:	4b6f      	ldr	r3, [pc, #444]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d664:	789b      	ldrb	r3, [r3, #2]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d023      	beq.n	800d6b2 <tx_buffer_prep+0x56>
			goto	tx_header;
 800d66a:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800d66c:	4b6d      	ldr	r3, [pc, #436]	@ (800d824 <tx_buffer_prep+0x1c8>)
 800d66e:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800d670:	4b6d      	ldr	r3, [pc, #436]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d672:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	4b6c      	ldr	r3, [pc, #432]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d67a:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800d67c:	4b6b      	ldr	r3, [pc, #428]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d67e:	781a      	ldrb	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800d684:	4b69      	ldr	r3, [pc, #420]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	0018      	movs	r0, r3
 800d68a:	f7f9 fc47 	bl	8006f1c <build_chksum>
	    	point_X++;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3301      	adds	r3, #1
 800d692:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	3301      	adds	r3, #1
 800d698:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	4b64      	ldr	r3, [pc, #400]	@ (800d830 <tx_buffer_prep+0x1d4>)
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d800      	bhi.n	800d6a4 <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800d6a2:	e7e7      	b.n	800d674 <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800d6a4:	4b63      	ldr	r3, [pc, #396]	@ (800d834 <tx_buffer_prep+0x1d8>)
 800d6a6:	2208      	movs	r2, #8
 800d6a8:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800d6aa:	4b5d      	ldr	r3, [pc, #372]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800d6b0:	e0b1      	b.n	800d816 <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800d6b2:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800d6b4:	4b5a      	ldr	r3, [pc, #360]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	4053      	eors	r3, r2
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d107      	bne.n	800d6d2 <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800d6c2:	4b57      	ldr	r3, [pc, #348]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d6c4:	785b      	ldrb	r3, [r3, #1]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4053      	eors	r3, r2
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d140      	bne.n	800d752 <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800d6d0:	e000      	b.n	800d6d4 <tx_buffer_prep+0x78>
			goto	notest;
 800d6d2:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800d6d4:	4b58      	ldr	r3, [pc, #352]	@ (800d838 <tx_buffer_prep+0x1dc>)
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	4b58      	ldr	r3, [pc, #352]	@ (800d83c <tx_buffer_prep+0x1e0>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d33a      	bcc.n	800d756 <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800d6e0:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800d6e2:	4b4f      	ldr	r3, [pc, #316]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d6e4:	78db      	ldrb	r3, [r3, #3]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d122      	bne.n	800d730 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800d6ea:	4b4f      	ldr	r3, [pc, #316]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d6ec:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800d6ee:	4b54      	ldr	r3, [pc, #336]	@ (800d840 <tx_buffer_prep+0x1e4>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800d6f4:	4b53      	ldr	r3, [pc, #332]	@ (800d844 <tx_buffer_prep+0x1e8>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	0e1b      	lsrs	r3, r3, #24
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	4b4a      	ldr	r3, [pc, #296]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d6fe:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800d700:	4b50      	ldr	r3, [pc, #320]	@ (800d844 <tx_buffer_prep+0x1e8>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	0c1b      	lsrs	r3, r3, #16
 800d706:	b2da      	uxtb	r2, r3
 800d708:	4b47      	ldr	r3, [pc, #284]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d70a:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800d70c:	4b4d      	ldr	r3, [pc, #308]	@ (800d844 <tx_buffer_prep+0x1e8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	0a1b      	lsrs	r3, r3, #8
 800d712:	b2da      	uxtb	r2, r3
 800d714:	4b44      	ldr	r3, [pc, #272]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d716:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800d718:	4b4a      	ldr	r3, [pc, #296]	@ (800d844 <tx_buffer_prep+0x1e8>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	4b42      	ldr	r3, [pc, #264]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d720:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800d722:	4b44      	ldr	r3, [pc, #272]	@ (800d834 <tx_buffer_prep+0x1d8>)
 800d724:	2204      	movs	r2, #4
 800d726:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800d728:	4b3d      	ldr	r3, [pc, #244]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d72a:	2201      	movs	r2, #1
 800d72c:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800d72e:	e072      	b.n	800d816 <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800d730:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800d732:	4b45      	ldr	r3, [pc, #276]	@ (800d848 <tx_buffer_prep+0x1ec>)
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800d738:	4b39      	ldr	r3, [pc, #228]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800d73e:	4b38      	ldr	r3, [pc, #224]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d740:	2200      	movs	r2, #0
 800d742:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800d744:	4b41      	ldr	r3, [pc, #260]	@ (800d84c <tx_buffer_prep+0x1f0>)
 800d746:	2200      	movs	r2, #0
 800d748:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800d74a:	4b40      	ldr	r3, [pc, #256]	@ (800d84c <tx_buffer_prep+0x1f0>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800d750:	e061      	b.n	800d816 <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800d752:	46c0      	nop			@ (mov r8, r8)
 800d754:	e000      	b.n	800d758 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800d756:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800d758:	4b37      	ldr	r3, [pc, #220]	@ (800d838 <tx_buffer_prep+0x1dc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800d75e:	4b32      	ldr	r3, [pc, #200]	@ (800d828 <tx_buffer_prep+0x1cc>)
 800d760:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800d762:	4b37      	ldr	r3, [pc, #220]	@ (800d840 <tx_buffer_prep+0x1e4>)
 800d764:	2200      	movs	r2, #0
 800d766:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	781a      	ldrb	r2, [r3, #0]
 800d76c:	4b2f      	ldr	r3, [pc, #188]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d76e:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800d770:	4b37      	ldr	r3, [pc, #220]	@ (800d850 <tx_buffer_prep+0x1f4>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d111      	bne.n	800d79c <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800d778:	4b34      	ldr	r3, [pc, #208]	@ (800d84c <tx_buffer_prep+0x1f0>)
 800d77a:	791b      	ldrb	r3, [r3, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d107      	bne.n	800d790 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800d780:	4b32      	ldr	r3, [pc, #200]	@ (800d84c <tx_buffer_prep+0x1f0>)
 800d782:	795b      	ldrb	r3, [r3, #5]
 800d784:	2201      	movs	r2, #1
 800d786:	4053      	eors	r3, r2
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d108      	bne.n	800d7a0 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800d78e:	e000      	b.n	800d792 <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800d790:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	781a      	ldrb	r2, [r3, #0]
 800d796:	4b25      	ldr	r3, [pc, #148]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	e002      	b.n	800d7a2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800d79c:	46c0      	nop			@ (mov r8, r8)
 800d79e:	e000      	b.n	800d7a2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800d7a0:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800d7a2:	4b22      	ldr	r3, [pc, #136]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d7a4:	781a      	ldrb	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800d7b6:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <tx_buffer_prep+0x1e4>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	4b20      	ldr	r3, [pc, #128]	@ (800d840 <tx_buffer_prep+0x1e4>)
 800d7c0:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800d7c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d82c <tx_buffer_prep+0x1d0>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	0018      	movs	r0, r3
 800d7c8:	f7f9 fba8 	bl	8006f1c <build_chksum>

		if(!flagsTX [0]){
 800d7cc:	4b14      	ldr	r3, [pc, #80]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	4053      	eors	r3, r2
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10b      	bne.n	800d7f2 <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800d7da:	4b1e      	ldr	r3, [pc, #120]	@ (800d854 <tx_buffer_prep+0x1f8>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d108      	bne.n	800d7f6 <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800d7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800d858 <tx_buffer_prep+0x1fc>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800d7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d820 <tx_buffer_prep+0x1c4>)
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	705a      	strb	r2, [r3, #1]
 800d7f0:	e002      	b.n	800d7f8 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800d7f2:	46c0      	nop			@ (mov r8, r8)
 800d7f4:	e000      	b.n	800d7f8 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800d7f6:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800d7f8:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <tx_buffer_prep+0x1e4>)
 800d7fa:	781a      	ldrb	r2, [r3, #0]
 800d7fc:	4b17      	ldr	r3, [pc, #92]	@ (800d85c <tx_buffer_prep+0x200>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d200      	bcs.n	800d806 <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800d804:	e7b0      	b.n	800d768 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800d806:	4b0c      	ldr	r3, [pc, #48]	@ (800d838 <tx_buffer_prep+0x1dc>)
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800d80c:	4b13      	ldr	r3, [pc, #76]	@ (800d85c <tx_buffer_prep+0x200>)
 800d80e:	781a      	ldrb	r2, [r3, #0]
 800d810:	4b08      	ldr	r3, [pc, #32]	@ (800d834 <tx_buffer_prep+0x1d8>)
 800d812:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800d814:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800d816:	46c0      	nop			@ (mov r8, r8)
 800d818:	46bd      	mov	sp, r7
 800d81a:	b002      	add	sp, #8
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	46c0      	nop			@ (mov r8, r8)
 800d820:	20000e2c 	.word	0x20000e2c
 800d824:	20000de8 	.word	0x20000de8
 800d828:	20000e48 	.word	0x20000e48
 800d82c:	200008e0 	.word	0x200008e0
 800d830:	20000def 	.word	0x20000def
 800d834:	20000e42 	.word	0x20000e42
 800d838:	20000e24 	.word	0x20000e24
 800d83c:	20000e20 	.word	0x20000e20
 800d840:	20000e28 	.word	0x20000e28
 800d844:	20000e44 	.word	0x20000e44
 800d848:	20000e29 	.word	0x20000e29
 800d84c:	20000e14 	.word	0x20000e14
 800d850:	20000eec 	.word	0x20000eec
 800d854:	20000e3c 	.word	0x20000e3c
 800d858:	20000e38 	.word	0x20000e38
 800d85c:	20000e40 	.word	0x20000e40

0800d860 <tx_control>:
uint32_t    direccion_fw = 0x8018800;
uint32_t    direccion_borrado = 0x8018800;

uint32_t   chksum_to_compare = 0;

void tx_control(void){
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b093      	sub	sp, #76	@ 0x4c
 800d864:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800d866:	4bdc      	ldr	r3, [pc, #880]	@ (800dbd8 <tx_control+0x378>)
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d001      	beq.n	800d872 <tx_control+0x12>
 800d86e:	f003 f9b4 	bl	8010bda <tx_control+0x337a>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800d872:	4bda      	ldr	r3, [pc, #872]	@ (800dbdc <tx_control+0x37c>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <tx_control+0x1e>
 800d87a:	f002 f897 	bl	800f9ac <tx_control+0x214c>
		goto end_tx_control;
statDef:
 800d87e:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800d880:	4bd7      	ldr	r3, [pc, #860]	@ (800dbe0 <tx_control+0x380>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d029      	beq.n	800d8dc <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800d888:	4bd6      	ldr	r3, [pc, #856]	@ (800dbe4 <tx_control+0x384>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d11d      	bne.n	800d8cc <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800d890:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800d892:	4bd4      	ldr	r3, [pc, #848]	@ (800dbe4 <tx_control+0x384>)
 800d894:	2201      	movs	r2, #1
 800d896:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800d898:	4bd3      	ldr	r3, [pc, #844]	@ (800dbe8 <tx_control+0x388>)
 800d89a:	2296      	movs	r2, #150	@ 0x96
 800d89c:	0052      	lsls	r2, r2, #1
 800d89e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800d8a0:	233f      	movs	r3, #63	@ 0x3f
 800d8a2:	18fb      	adds	r3, r7, r3
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e00a      	b.n	800d8c0 <tx_control+0x60>
		flagsWIFI[i] = 0;
 800d8aa:	203f      	movs	r0, #63	@ 0x3f
 800d8ac:	183b      	adds	r3, r7, r0
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	4ace      	ldr	r2, [pc, #824]	@ (800dbec <tx_control+0x38c>)
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800d8b6:	183b      	adds	r3, r7, r0
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	183b      	adds	r3, r7, r0
 800d8bc:	3201      	adds	r2, #1
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	233f      	movs	r3, #63	@ 0x3f
 800d8c2:	18fb      	adds	r3, r7, r3
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	2b07      	cmp	r3, #7
 800d8c8:	d9ef      	bls.n	800d8aa <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800d8ca:	e047      	b.n	800d95c <tx_control+0xfc>
		goto statDef_WIFI;
 800d8cc:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800d8ce:	4bc5      	ldr	r3, [pc, #788]	@ (800dbe4 <tx_control+0x384>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800d8d4:	4bc6      	ldr	r3, [pc, #792]	@ (800dbf0 <tx_control+0x390>)
 800d8d6:	22ff      	movs	r2, #255	@ 0xff
 800d8d8:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800d8da:	e03f      	b.n	800d95c <tx_control+0xfc>
		goto statDef_clr;
 800d8dc:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800d8de:	4bc1      	ldr	r3, [pc, #772]	@ (800dbe4 <tx_control+0x384>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d133      	bne.n	800d94e <tx_control+0xee>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800d8e6:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(!flagsTxControl[f_statBLE])
 800d8e8:	4bbe      	ldr	r3, [pc, #760]	@ (800dbe4 <tx_control+0x384>)
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	4053      	eors	r3, r2
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d123      	bne.n	800d93e <tx_control+0xde>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800d8f6:	4bbf      	ldr	r3, [pc, #764]	@ (800dbf4 <tx_control+0x394>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800d8fc:	233e      	movs	r3, #62	@ 0x3e
 800d8fe:	18fb      	adds	r3, r7, r3
 800d900:	2200      	movs	r2, #0
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	e00f      	b.n	800d926 <tx_control+0xc6>
		flagsTX[i] = 0;
 800d906:	203e      	movs	r0, #62	@ 0x3e
 800d908:	183b      	adds	r3, r7, r0
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	4aba      	ldr	r2, [pc, #744]	@ (800dbf8 <tx_control+0x398>)
 800d90e:	2100      	movs	r1, #0
 800d910:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800d912:	183b      	adds	r3, r7, r0
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	4ab9      	ldr	r2, [pc, #740]	@ (800dbfc <tx_control+0x39c>)
 800d918:	2100      	movs	r1, #0
 800d91a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800d91c:	183b      	adds	r3, r7, r0
 800d91e:	781a      	ldrb	r2, [r3, #0]
 800d920:	183b      	adds	r3, r7, r0
 800d922:	3201      	adds	r2, #1
 800d924:	701a      	strb	r2, [r3, #0]
 800d926:	233e      	movs	r3, #62	@ 0x3e
 800d928:	18fb      	adds	r3, r7, r3
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	2b07      	cmp	r3, #7
 800d92e:	d9ea      	bls.n	800d906 <tx_control+0xa6>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800d930:	4bb3      	ldr	r3, [pc, #716]	@ (800dc00 <tx_control+0x3a0>)
 800d932:	2200      	movs	r2, #0
 800d934:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800d936:	4bb2      	ldr	r3, [pc, #712]	@ (800dc00 <tx_control+0x3a0>)
 800d938:	2200      	movs	r2, #0
 800d93a:	715a      	strb	r2, [r3, #5]
 800d93c:	e000      	b.n	800d940 <tx_control+0xe0>
		goto noCancelTx;
 800d93e:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800d940:	4ba8      	ldr	r3, [pc, #672]	@ (800dbe4 <tx_control+0x384>)
 800d942:	2200      	movs	r2, #0
 800d944:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800d946:	4baf      	ldr	r3, [pc, #700]	@ (800dc04 <tx_control+0x3a4>)
 800d948:	2200      	movs	r2, #0
 800d94a:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800d94c:	e006      	b.n	800d95c <tx_control+0xfc>
		goto statDef_clrWIFI;
 800d94e:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800d950:	4ba4      	ldr	r3, [pc, #656]	@ (800dbe4 <tx_control+0x384>)
 800d952:	2200      	movs	r2, #0
 800d954:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800d956:	4ba6      	ldr	r3, [pc, #664]	@ (800dbf0 <tx_control+0x390>)
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800d95c:	4ba1      	ldr	r3, [pc, #644]	@ (800dbe4 <tx_control+0x384>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2201      	movs	r2, #1
 800d962:	4053      	eors	r3, r2
 800d964:	b2db      	uxtb	r3, r3
 800d966:	2b00      	cmp	r3, #0
 800d968:	d058      	beq.n	800da1c <tx_control+0x1bc>
		goto tokenBLE_01;
 800d96a:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800d96c:	4ba3      	ldr	r3, [pc, #652]	@ (800dbfc <tx_control+0x39c>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d117      	bne.n	800d9a4 <tx_control+0x144>
 800d974:	4ba2      	ldr	r3, [pc, #648]	@ (800dc00 <tx_control+0x3a0>)
 800d976:	791b      	ldrb	r3, [r3, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d113      	bne.n	800d9a4 <tx_control+0x144>
 800d97c:	4ba0      	ldr	r3, [pc, #640]	@ (800dc00 <tx_control+0x3a0>)
 800d97e:	795b      	ldrb	r3, [r3, #5]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10f      	bne.n	800d9a4 <tx_control+0x144>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800d984:	4ba0      	ldr	r3, [pc, #640]	@ (800dc08 <tx_control+0x3a8>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d019      	beq.n	800d9c0 <tx_control+0x160>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800d98c:	4b9e      	ldr	r3, [pc, #632]	@ (800dc08 <tx_control+0x3a8>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	2b80      	cmp	r3, #128	@ 0x80
 800d992:	d045      	beq.n	800da20 <tx_control+0x1c0>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800d994:	4b9c      	ldr	r3, [pc, #624]	@ (800dc08 <tx_control+0x3a8>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	2b81      	cmp	r3, #129	@ 0x81
 800d99a:	d108      	bne.n	800d9ae <tx_control+0x14e>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800d99c:	4b9a      	ldr	r3, [pc, #616]	@ (800dc08 <tx_control+0x3a8>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	701a      	strb	r2, [r3, #0]
 800d9a2:	e000      	b.n	800d9a6 <tx_control+0x146>
		goto tokenBLE_02;
 800d9a4:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800d9a6:	4b99      	ldr	r3, [pc, #612]	@ (800dc0c <tx_control+0x3ac>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	709a      	strb	r2, [r3, #2]
 800d9ac:	e000      	b.n	800d9b0 <tx_control+0x150>
		goto tokenBLE_03;
 800d9ae:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800d9b0:	4b97      	ldr	r3, [pc, #604]	@ (800dc10 <tx_control+0x3b0>)
 800d9b2:	2214      	movs	r2, #20
 800d9b4:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800d9b6:	4b97      	ldr	r3, [pc, #604]	@ (800dc14 <tx_control+0x3b4>)
 800d9b8:	2296      	movs	r2, #150	@ 0x96
 800d9ba:	0052      	lsls	r2, r2, #1
 800d9bc:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800d9be:	e034      	b.n	800da2a <tx_control+0x1ca>
		goto tx_tokenBLE;
 800d9c0:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800d9c2:	4b8c      	ldr	r3, [pc, #560]	@ (800dbf4 <tx_control+0x394>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d12c      	bne.n	800da24 <tx_control+0x1c4>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800d9ca:	4b91      	ldr	r3, [pc, #580]	@ (800dc10 <tx_control+0x3b0>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d12a      	bne.n	800da28 <tx_control+0x1c8>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800d9d2:	4b8f      	ldr	r3, [pc, #572]	@ (800dc10 <tx_control+0x3b0>)
 800d9d4:	2214      	movs	r2, #20
 800d9d6:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800d9d8:	4b8f      	ldr	r3, [pc, #572]	@ (800dc18 <tx_control+0x3b8>)
 800d9da:	2240      	movs	r2, #64	@ 0x40
 800d9dc:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800d9de:	4b8e      	ldr	r3, [pc, #568]	@ (800dc18 <tx_control+0x3b8>)
 800d9e0:	22fa      	movs	r2, #250	@ 0xfa
 800d9e2:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d9e4:	4b84      	ldr	r3, [pc, #528]	@ (800dbf8 <tx_control+0x398>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800d9ea:	4b8c      	ldr	r3, [pc, #560]	@ (800dc1c <tx_control+0x3bc>)
 800d9ec:	4a8a      	ldr	r2, [pc, #552]	@ (800dc18 <tx_control+0x3b8>)
 800d9ee:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800d9f0:	4b8b      	ldr	r3, [pc, #556]	@ (800dc20 <tx_control+0x3c0>)
 800d9f2:	4a89      	ldr	r2, [pc, #548]	@ (800dc18 <tx_control+0x3b8>)
 800d9f4:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800d9f6:	4b8b      	ldr	r3, [pc, #556]	@ (800dc24 <tx_control+0x3c4>)
 800d9f8:	4a8b      	ldr	r2, [pc, #556]	@ (800dc28 <tx_control+0x3c8>)
 800d9fa:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800d9fc:	4b8b      	ldr	r3, [pc, #556]	@ (800dc2c <tx_control+0x3cc>)
 800d9fe:	2202      	movs	r2, #2
 800da00:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800da02:	4b8b      	ldr	r3, [pc, #556]	@ (800dc30 <tx_control+0x3d0>)
 800da04:	2200      	movs	r2, #0
 800da06:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800da08:	4b7b      	ldr	r3, [pc, #492]	@ (800dbf8 <tx_control+0x398>)
 800da0a:	2201      	movs	r2, #1
 800da0c:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800da0e:	4b79      	ldr	r3, [pc, #484]	@ (800dbf4 <tx_control+0x394>)
 800da10:	2255      	movs	r2, #85	@ 0x55
 800da12:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800da14:	4b7c      	ldr	r3, [pc, #496]	@ (800dc08 <tx_control+0x3a8>)
 800da16:	2200      	movs	r2, #0
 800da18:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800da1a:	e006      	b.n	800da2a <tx_control+0x1ca>
	goto finTokenBLE;//jra		finTokenBLE
 800da1c:	46c0      	nop			@ (mov r8, r8)
 800da1e:	e004      	b.n	800da2a <tx_control+0x1ca>
		goto finTokenBLE;
 800da20:	46c0      	nop			@ (mov r8, r8)
 800da22:	e002      	b.n	800da2a <tx_control+0x1ca>
		goto finTokenBLE;
 800da24:	46c0      	nop			@ (mov r8, r8)
 800da26:	e000      	b.n	800da2a <tx_control+0x1ca>
		goto finTokenBLE;
 800da28:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800da2a:	4b6e      	ldr	r3, [pc, #440]	@ (800dbe4 <tx_control+0x384>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d100      	bne.n	800da34 <tx_control+0x1d4>
 800da32:	e14e      	b.n	800dcd2 <tx_control+0x472>
		goto tokenWiFi_01;
 800da34:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800da36:	4b6d      	ldr	r3, [pc, #436]	@ (800dbec <tx_control+0x38c>)
 800da38:	78db      	ldrb	r3, [r3, #3]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d130      	bne.n	800daa0 <tx_control+0x240>
 800da3e:	4b6b      	ldr	r3, [pc, #428]	@ (800dbec <tx_control+0x38c>)
 800da40:	791b      	ldrb	r3, [r3, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d12c      	bne.n	800daa0 <tx_control+0x240>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800da46:	4b7b      	ldr	r3, [pc, #492]	@ (800dc34 <tx_control+0x3d4>)
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d12a      	bne.n	800daa4 <tx_control+0x244>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800da4e:	4b79      	ldr	r3, [pc, #484]	@ (800dc34 <tx_control+0x3d4>)
 800da50:	2296      	movs	r2, #150	@ 0x96
 800da52:	0092      	lsls	r2, r2, #2
 800da54:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800da56:	4b78      	ldr	r3, [pc, #480]	@ (800dc38 <tx_control+0x3d8>)
 800da58:	2232      	movs	r2, #50	@ 0x32
 800da5a:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800da5c:	4a6e      	ldr	r2, [pc, #440]	@ (800dc18 <tx_control+0x3b8>)
 800da5e:	4b77      	ldr	r3, [pc, #476]	@ (800dc3c <tx_control+0x3dc>)
 800da60:	0011      	movs	r1, r2
 800da62:	0018      	movs	r0, r3
 800da64:	f7f9 fa36 	bl	8006ed4 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800da68:	4b6c      	ldr	r3, [pc, #432]	@ (800dc1c <tx_control+0x3bc>)
 800da6a:	4a6b      	ldr	r2, [pc, #428]	@ (800dc18 <tx_control+0x3b8>)
 800da6c:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800da6e:	4b6c      	ldr	r3, [pc, #432]	@ (800dc20 <tx_control+0x3c0>)
 800da70:	4a69      	ldr	r2, [pc, #420]	@ (800dc18 <tx_control+0x3b8>)
 800da72:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800da74:	4b6b      	ldr	r3, [pc, #428]	@ (800dc24 <tx_control+0x3c4>)
 800da76:	4a72      	ldr	r2, [pc, #456]	@ (800dc40 <tx_control+0x3e0>)
 800da78:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800da7a:	4b6c      	ldr	r3, [pc, #432]	@ (800dc2c <tx_control+0x3cc>)
 800da7c:	2232      	movs	r2, #50	@ 0x32
 800da7e:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800da80:	4b5d      	ldr	r3, [pc, #372]	@ (800dbf8 <tx_control+0x398>)
 800da82:	2200      	movs	r2, #0
 800da84:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800da86:	4b6a      	ldr	r3, [pc, #424]	@ (800dc30 <tx_control+0x3d0>)
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800da8c:	4b5a      	ldr	r3, [pc, #360]	@ (800dbf8 <tx_control+0x398>)
 800da8e:	2201      	movs	r2, #1
 800da90:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800da92:	4b58      	ldr	r3, [pc, #352]	@ (800dbf4 <tx_control+0x394>)
 800da94:	2255      	movs	r2, #85	@ 0x55
 800da96:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800da98:	4b5b      	ldr	r3, [pc, #364]	@ (800dc08 <tx_control+0x3a8>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800da9e:	e11d      	b.n	800dcdc <tx_control+0x47c>
		goto tokenWiFi_02;
 800daa0:	46c0      	nop			@ (mov r8, r8)
 800daa2:	e000      	b.n	800daa6 <tx_control+0x246>
		goto tokenWiFi_02;
 800daa4:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800daa6:	4b55      	ldr	r3, [pc, #340]	@ (800dbfc <tx_control+0x39c>)
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	4b55      	ldr	r3, [pc, #340]	@ (800dc00 <tx_control+0x3a0>)
 800daac:	795b      	ldrb	r3, [r3, #5]
 800daae:	4313      	orrs	r3, r2
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	4b53      	ldr	r3, [pc, #332]	@ (800dc00 <tx_control+0x3a0>)
 800dab4:	791b      	ldrb	r3, [r3, #4]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	4b4c      	ldr	r3, [pc, #304]	@ (800dbec <tx_control+0x38c>)
 800dabc:	78db      	ldrb	r3, [r3, #3]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	4b4a      	ldr	r3, [pc, #296]	@ (800dbec <tx_control+0x38c>)
 800dac4:	791b      	ldrb	r3, [r3, #4]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d000      	beq.n	800dad0 <tx_control+0x270>
 800dace:	e0f8      	b.n	800dcc2 <tx_control+0x462>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800dad0:	4b4d      	ldr	r3, [pc, #308]	@ (800dc08 <tx_control+0x3a8>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d000      	beq.n	800dada <tx_control+0x27a>
 800dad8:	e0e9      	b.n	800dcae <tx_control+0x44e>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800dada:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800dadc:	4b45      	ldr	r3, [pc, #276]	@ (800dbf4 <tx_control+0x394>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d000      	beq.n	800dae6 <tx_control+0x286>
 800dae4:	e0f7      	b.n	800dcd6 <tx_control+0x476>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800dae6:	4b57      	ldr	r3, [pc, #348]	@ (800dc44 <tx_control+0x3e4>)
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d000      	beq.n	800daf0 <tx_control+0x290>
 800daee:	e0c3      	b.n	800dc78 <tx_control+0x418>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800daf0:	4b54      	ldr	r3, [pc, #336]	@ (800dc44 <tx_control+0x3e4>)
 800daf2:	221e      	movs	r2, #30
 800daf4:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800daf6:	4b48      	ldr	r3, [pc, #288]	@ (800dc18 <tx_control+0x3b8>)
 800daf8:	2240      	movs	r2, #64	@ 0x40
 800dafa:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800dafc:	4b46      	ldr	r3, [pc, #280]	@ (800dc18 <tx_control+0x3b8>)
 800dafe:	22f8      	movs	r2, #248	@ 0xf8
 800db00:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = findLastValue((uint32_t) &eeLat1);	//ldw X,eeLat1
 800db02:	4b51      	ldr	r3, [pc, #324]	@ (800dc48 <tx_control+0x3e8>)
 800db04:	0018      	movs	r0, r3
 800db06:	f7f5 f889 	bl	8002c1c <findLastValue>
 800db0a:	0003      	movs	r3, r0
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	4b42      	ldr	r3, [pc, #264]	@ (800dc18 <tx_control+0x3b8>)
 800db10:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = findLastValue((uint32_t) &eeLat2);	//ldw bufferTxControl+2,X
 800db12:	4b4e      	ldr	r3, [pc, #312]	@ (800dc4c <tx_control+0x3ec>)
 800db14:	0018      	movs	r0, r3
 800db16:	f7f5 f881 	bl	8002c1c <findLastValue>
 800db1a:	0003      	movs	r3, r0
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	4b3e      	ldr	r3, [pc, #248]	@ (800dc18 <tx_control+0x3b8>)
 800db20:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = findLastValue((uint32_t) &eeLat3);	//ldw X,eeLat3
 800db22:	4b4b      	ldr	r3, [pc, #300]	@ (800dc50 <tx_control+0x3f0>)
 800db24:	0018      	movs	r0, r3
 800db26:	f7f5 f879 	bl	8002c1c <findLastValue>
 800db2a:	0003      	movs	r3, r0
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	4b3a      	ldr	r3, [pc, #232]	@ (800dc18 <tx_control+0x3b8>)
 800db30:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = findLastValue((uint32_t) &eeLat4);	//ldw bufferTxControl+4,X
 800db32:	4b48      	ldr	r3, [pc, #288]	@ (800dc54 <tx_control+0x3f4>)
 800db34:	0018      	movs	r0, r3
 800db36:	f7f5 f871 	bl	8002c1c <findLastValue>
 800db3a:	0003      	movs	r3, r0
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	4b36      	ldr	r3, [pc, #216]	@ (800dc18 <tx_control+0x3b8>)
 800db40:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = findLastValue((uint32_t) &eeLong1);	//ldw X,eeLong1
 800db42:	4b45      	ldr	r3, [pc, #276]	@ (800dc58 <tx_control+0x3f8>)
 800db44:	0018      	movs	r0, r3
 800db46:	f7f5 f869 	bl	8002c1c <findLastValue>
 800db4a:	0003      	movs	r3, r0
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4b32      	ldr	r3, [pc, #200]	@ (800dc18 <tx_control+0x3b8>)
 800db50:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = findLastValue((uint32_t) &eeLong2);	//ldw bufferTxControl+6,X
 800db52:	4b42      	ldr	r3, [pc, #264]	@ (800dc5c <tx_control+0x3fc>)
 800db54:	0018      	movs	r0, r3
 800db56:	f7f5 f861 	bl	8002c1c <findLastValue>
 800db5a:	0003      	movs	r3, r0
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	4b2e      	ldr	r3, [pc, #184]	@ (800dc18 <tx_control+0x3b8>)
 800db60:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = findLastValue((uint32_t) &eeLong3);	//ldw X,eeLong3
 800db62:	4b3f      	ldr	r3, [pc, #252]	@ (800dc60 <tx_control+0x400>)
 800db64:	0018      	movs	r0, r3
 800db66:	f7f5 f859 	bl	8002c1c <findLastValue>
 800db6a:	0003      	movs	r3, r0
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	4b2a      	ldr	r3, [pc, #168]	@ (800dc18 <tx_control+0x3b8>)
 800db70:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = findLastValue((uint32_t) &eeLong4);	//ldw bufferTxControl+8,X
 800db72:	4b3c      	ldr	r3, [pc, #240]	@ (800dc64 <tx_control+0x404>)
 800db74:	0018      	movs	r0, r3
 800db76:	f7f5 f851 	bl	8002c1c <findLastValue>
 800db7a:	0003      	movs	r3, r0
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	4b26      	ldr	r3, [pc, #152]	@ (800dc18 <tx_control+0x3b8>)
 800db80:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800db82:	4b39      	ldr	r3, [pc, #228]	@ (800dc68 <tx_control+0x408>)
 800db84:	781a      	ldrb	r2, [r3, #0]
 800db86:	4b24      	ldr	r3, [pc, #144]	@ (800dc18 <tx_control+0x3b8>)
 800db88:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800db8a:	4b38      	ldr	r3, [pc, #224]	@ (800dc6c <tx_control+0x40c>)
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	4b22      	ldr	r3, [pc, #136]	@ (800dc18 <tx_control+0x3b8>)
 800db90:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800db92:	4b37      	ldr	r3, [pc, #220]	@ (800dc70 <tx_control+0x410>)
 800db94:	781a      	ldrb	r2, [r3, #0]
 800db96:	4b20      	ldr	r3, [pc, #128]	@ (800dc18 <tx_control+0x3b8>)
 800db98:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800db9a:	4b17      	ldr	r3, [pc, #92]	@ (800dbf8 <tx_control+0x398>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800dba0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc18 <tx_control+0x3b8>)
 800dba2:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800dba4:	4b1d      	ldr	r3, [pc, #116]	@ (800dc1c <tx_control+0x3bc>)
 800dba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dba8:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800dbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800dc20 <tx_control+0x3c0>)
 800dbac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbae:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800dbb0:	4b1c      	ldr	r3, [pc, #112]	@ (800dc24 <tx_control+0x3c4>)
 800dbb2:	4a30      	ldr	r2, [pc, #192]	@ (800dc74 <tx_control+0x414>)
 800dbb4:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800dbb6:	4b1d      	ldr	r3, [pc, #116]	@ (800dc2c <tx_control+0x3cc>)
 800dbb8:	220d      	movs	r2, #13
 800dbba:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800dbbc:	4b1c      	ldr	r3, [pc, #112]	@ (800dc30 <tx_control+0x3d0>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800dbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dbf8 <tx_control+0x398>)
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf4 <tx_control+0x394>)
 800dbca:	2255      	movs	r2, #85	@ 0x55
 800dbcc:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800dbce:	4b0e      	ldr	r3, [pc, #56]	@ (800dc08 <tx_control+0x3a8>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800dbd4:	e082      	b.n	800dcdc <tx_control+0x47c>
 800dbd6:	46c0      	nop			@ (mov r8, r8)
 800dbd8:	2000004c 	.word	0x2000004c
 800dbdc:	20001104 	.word	0x20001104
 800dbe0:	20001106 	.word	0x20001106
 800dbe4:	200010fc 	.word	0x200010fc
 800dbe8:	20000f5c 	.word	0x20000f5c
 800dbec:	20000f60 	.word	0x20000f60
 800dbf0:	20001107 	.word	0x20001107
 800dbf4:	20000e29 	.word	0x20000e29
 800dbf8:	20000e2c 	.word	0x20000e2c
 800dbfc:	20000eec 	.word	0x20000eec
 800dc00:	20000e14 	.word	0x20000e14
 800dc04:	20001105 	.word	0x20001105
 800dc08:	20000e34 	.word	0x20000e34
 800dc0c:	20000f54 	.word	0x20000f54
 800dc10:	2000110a 	.word	0x2000110a
 800dc14:	2000110c 	.word	0x2000110c
 800dc18:	20000fb8 	.word	0x20000fb8
 800dc1c:	20000e24 	.word	0x20000e24
 800dc20:	20000e1c 	.word	0x20000e1c
 800dc24:	20000e20 	.word	0x20000e20
 800dc28:	20000fba 	.word	0x20000fba
 800dc2c:	20000e40 	.word	0x20000e40
 800dc30:	20000e44 	.word	0x20000e44
 800dc34:	20001108 	.word	0x20001108
 800dc38:	20000b65 	.word	0x20000b65
 800dc3c:	2000021c 	.word	0x2000021c
 800dc40:	20000fea 	.word	0x20000fea
 800dc44:	20000f4a 	.word	0x20000f4a
 800dc48:	0803f808 	.word	0x0803f808
 800dc4c:	0803f809 	.word	0x0803f809
 800dc50:	0803f80a 	.word	0x0803f80a
 800dc54:	0803f80b 	.word	0x0803f80b
 800dc58:	0803f80c 	.word	0x0803f80c
 800dc5c:	0803f80d 	.word	0x0803f80d
 800dc60:	0803f80e 	.word	0x0803f80e
 800dc64:	0803f80f 	.word	0x0803f80f
 800dc68:	0801e7f0 	.word	0x0801e7f0
 800dc6c:	0801e7f1 	.word	0x0801e7f1
 800dc70:	0801e7f2 	.word	0x0801e7f2
 800dc74:	20000fc5 	.word	0x20000fc5
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800dc78:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800dc7a:	4be4      	ldr	r3, [pc, #912]	@ (800e00c <tx_control+0x7ac>)
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	2b80      	cmp	r3, #128	@ 0x80
 800dc80:	d00e      	beq.n	800dca0 <tx_control+0x440>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800dc82:	4be3      	ldr	r3, [pc, #908]	@ (800e010 <tx_control+0x7b0>)
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d127      	bne.n	800dcda <tx_control+0x47a>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800dc8a:	4be2      	ldr	r3, [pc, #904]	@ (800e014 <tx_control+0x7b4>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800dc90:	4be1      	ldr	r3, [pc, #900]	@ (800e018 <tx_control+0x7b8>)
 800dc92:	2205      	movs	r2, #5
 800dc94:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800dc96:	4bde      	ldr	r3, [pc, #888]	@ (800e010 <tx_control+0x7b0>)
 800dc98:	2296      	movs	r2, #150	@ 0x96
 800dc9a:	0052      	lsls	r2, r2, #1
 800dc9c:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800dc9e:	e01d      	b.n	800dcdc <tx_control+0x47c>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800dca0:	46c0      	nop			@ (mov r8, r8)
 800dca2:	e000      	b.n	800dca6 <tx_control+0x446>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800dca4:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800dca6:	4bd9      	ldr	r3, [pc, #868]	@ (800e00c <tx_control+0x7ac>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	701a      	strb	r2, [r3, #0]
 800dcac:	e000      	b.n	800dcb0 <tx_control+0x450>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800dcae:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800dcb0:	4bd6      	ldr	r3, [pc, #856]	@ (800e00c <tx_control+0x7ac>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b80      	cmp	r3, #128	@ 0x80
 800dcb6:	d0f5      	beq.n	800dca4 <tx_control+0x444>
		}
		timeoutTWF = 300;
 800dcb8:	4bd5      	ldr	r3, [pc, #852]	@ (800e010 <tx_control+0x7b0>)
 800dcba:	2296      	movs	r2, #150	@ 0x96
 800dcbc:	0052      	lsls	r2, r2, #1
 800dcbe:	801a      	strh	r2, [r3, #0]
 800dcc0:	e000      	b.n	800dcc4 <tx_control+0x464>
			goto rx_tokenWiFi_02;
 800dcc2:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800dcc4:	4bd5      	ldr	r3, [pc, #852]	@ (800e01c <tx_control+0x7bc>)
 800dcc6:	221e      	movs	r2, #30
 800dcc8:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800dcca:	4bd2      	ldr	r3, [pc, #840]	@ (800e014 <tx_control+0x7b4>)
 800dccc:	2201      	movs	r2, #1
 800dcce:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800dcd0:	e004      	b.n	800dcdc <tx_control+0x47c>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800dcd2:	46c0      	nop			@ (mov r8, r8)
 800dcd4:	e002      	b.n	800dcdc <tx_control+0x47c>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	e000      	b.n	800dcdc <tx_control+0x47c>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800dcda:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800dcdc:	4bcd      	ldr	r3, [pc, #820]	@ (800e014 <tx_control+0x7b4>)
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <tx_control+0x488>
 800dce4:	f001 fe64 	bl	800f9b0 <tx_control+0x2150>
			goto tokenWiFi_OK;
 800dce8:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800dcea:	4bcd      	ldr	r3, [pc, #820]	@ (800e020 <tx_control+0x7c0>)
 800dcec:	78db      	ldrb	r3, [r3, #3]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	4053      	eors	r3, r2
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d101      	bne.n	800dcfc <tx_control+0x49c>
 800dcf8:	f000 fcca 	bl	800e690 <tx_control+0xe30>
			goto tx_control_00;
 800dcfc:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800dcfe:	4bc8      	ldr	r3, [pc, #800]	@ (800e020 <tx_control+0x7c0>)
 800dd00:	791b      	ldrb	r3, [r3, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	4053      	eors	r3, r2
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <tx_control+0x4b0>
 800dd0c:	f000 fcc2 	bl	800e694 <tx_control+0xe34>
			goto tx_control_00b;
 800dd10:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800dd12:	4bc4      	ldr	r3, [pc, #784]	@ (800e024 <tx_control+0x7c4>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2201      	movs	r2, #1
 800dd18:	4053      	eors	r3, r2
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d13a      	bne.n	800dd96 <tx_control+0x536>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800dd20:	4bc1      	ldr	r3, [pc, #772]	@ (800e028 <tx_control+0x7c8>)
 800dd22:	22f1      	movs	r2, #241	@ 0xf1
 800dd24:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800dd26:	4bba      	ldr	r3, [pc, #744]	@ (800e010 <tx_control+0x7b0>)
 800dd28:	2296      	movs	r2, #150	@ 0x96
 800dd2a:	0052      	lsls	r2, r2, #1
 800dd2c:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800dd2e:	4bbf      	ldr	r3, [pc, #764]	@ (800e02c <tx_control+0x7cc>)
 800dd30:	2296      	movs	r2, #150	@ 0x96
 800dd32:	0052      	lsls	r2, r2, #1
 800dd34:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800dd36:	4bbe      	ldr	r3, [pc, #760]	@ (800e030 <tx_control+0x7d0>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d118      	bne.n	800dd70 <tx_control+0x510>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800dd3e:	233d      	movs	r3, #61	@ 0x3d
 800dd40:	18fb      	adds	r3, r7, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	701a      	strb	r2, [r3, #0]
 800dd46:	e00a      	b.n	800dd5e <tx_control+0x4fe>
			flagsRxFirm [i]= 0;
 800dd48:	203d      	movs	r0, #61	@ 0x3d
 800dd4a:	183b      	adds	r3, r7, r0
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	4ab5      	ldr	r2, [pc, #724]	@ (800e024 <tx_control+0x7c4>)
 800dd50:	2100      	movs	r1, #0
 800dd52:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800dd54:	183b      	adds	r3, r7, r0
 800dd56:	781a      	ldrb	r2, [r3, #0]
 800dd58:	183b      	adds	r3, r7, r0
 800dd5a:	3201      	adds	r2, #1
 800dd5c:	701a      	strb	r2, [r3, #0]
 800dd5e:	233d      	movs	r3, #61	@ 0x3d
 800dd60:	18fb      	adds	r3, r7, r3
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b07      	cmp	r3, #7
 800dd66:	d9ef      	bls.n	800dd48 <tx_control+0x4e8>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800dd68:	4ba8      	ldr	r3, [pc, #672]	@ (800e00c <tx_control+0x7ac>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800dd6e:	e013      	b.n	800dd98 <tx_control+0x538>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800dd70:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800dd72:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800dd74:	4baf      	ldr	r3, [pc, #700]	@ (800e034 <tx_control+0x7d4>)
 800dd76:	2201      	movs	r2, #1
 800dd78:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800dd7a:	4bae      	ldr	r3, [pc, #696]	@ (800e034 <tx_control+0x7d4>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800dd80:	4ba8      	ldr	r3, [pc, #672]	@ (800e024 <tx_control+0x7c4>)
 800dd82:	78db      	ldrb	r3, [r3, #3]
 800dd84:	2201      	movs	r2, #1
 800dd86:	4053      	eors	r3, r2
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <tx_control+0x532>
 800dd8e:	f001 f959 	bl	800f044 <tx_control+0x17e4>
				goto rx_firmware01;
 800dd92:	f001 f82d 	bl	800edf0 <tx_control+0x1590>
			goto ask_tx_control_01;
 800dd96:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800dd98:	4b9c      	ldr	r3, [pc, #624]	@ (800e00c <tx_control+0x7ac>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b21      	cmp	r3, #33	@ 0x21
 800dd9e:	d131      	bne.n	800de04 <tx_control+0x5a4>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800dda0:	4ba1      	ldr	r3, [pc, #644]	@ (800e028 <tx_control+0x7c8>)
 800dda2:	22f1      	movs	r2, #241	@ 0xf1
 800dda4:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800dda6:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800dda8:	4ba3      	ldr	r3, [pc, #652]	@ (800e038 <tx_control+0x7d8>)
 800ddaa:	22f1      	movs	r2, #241	@ 0xf1
 800ddac:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800ddae:	4ba2      	ldr	r3, [pc, #648]	@ (800e038 <tx_control+0x7d8>)
 800ddb0:	223f      	movs	r2, #63	@ 0x3f
 800ddb2:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800ddb4:	4ba1      	ldr	r3, [pc, #644]	@ (800e03c <tx_control+0x7dc>)
 800ddb6:	781a      	ldrb	r2, [r3, #0]
 800ddb8:	4b9f      	ldr	r3, [pc, #636]	@ (800e038 <tx_control+0x7d8>)
 800ddba:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800ddbc:	4ba0      	ldr	r3, [pc, #640]	@ (800e040 <tx_control+0x7e0>)
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	4b9d      	ldr	r3, [pc, #628]	@ (800e038 <tx_control+0x7d8>)
 800ddc2:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800ddc4:	4b9f      	ldr	r3, [pc, #636]	@ (800e044 <tx_control+0x7e4>)
 800ddc6:	781a      	ldrb	r2, [r3, #0]
 800ddc8:	4b9b      	ldr	r3, [pc, #620]	@ (800e038 <tx_control+0x7d8>)
 800ddca:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800ddcc:	4b9e      	ldr	r3, [pc, #632]	@ (800e048 <tx_control+0x7e8>)
 800ddce:	227d      	movs	r2, #125	@ 0x7d
 800ddd0:	5c9a      	ldrb	r2, [r3, r2]
 800ddd2:	4b99      	ldr	r3, [pc, #612]	@ (800e038 <tx_control+0x7d8>)
 800ddd4:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800ddd6:	4b9c      	ldr	r3, [pc, #624]	@ (800e048 <tx_control+0x7e8>)
 800ddd8:	227e      	movs	r2, #126	@ 0x7e
 800ddda:	5c9a      	ldrb	r2, [r3, r2]
 800dddc:	4b96      	ldr	r3, [pc, #600]	@ (800e038 <tx_control+0x7d8>)
 800ddde:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800dde0:	4b9a      	ldr	r3, [pc, #616]	@ (800e04c <tx_control+0x7ec>)
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	4b94      	ldr	r3, [pc, #592]	@ (800e038 <tx_control+0x7d8>)
 800dde6:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800dde8:	4b99      	ldr	r3, [pc, #612]	@ (800e050 <tx_control+0x7f0>)
 800ddea:	781a      	ldrb	r2, [r3, #0]
 800ddec:	4b92      	ldr	r3, [pc, #584]	@ (800e038 <tx_control+0x7d8>)
 800ddee:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800ddf0:	4b91      	ldr	r3, [pc, #580]	@ (800e038 <tx_control+0x7d8>)
 800ddf2:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800ddf4:	4b97      	ldr	r3, [pc, #604]	@ (800e054 <tx_control+0x7f4>)
 800ddf6:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800ddf8:	233c      	movs	r3, #60	@ 0x3c
 800ddfa:	18fb      	adds	r3, r7, r3
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
 800de00:	f000 fc64 	bl	800e6cc <tx_control+0xe6c>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800de04:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800de06:	4b86      	ldr	r3, [pc, #536]	@ (800e020 <tx_control+0x7c0>)
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d148      	bne.n	800dea0 <tx_control+0x640>
		if(codeTX != 0x60){//	cp	A,#$60
 800de0e:	4b7f      	ldr	r3, [pc, #508]	@ (800e00c <tx_control+0x7ac>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b60      	cmp	r3, #96	@ 0x60
 800de14:	d11f      	bne.n	800de56 <tx_control+0x5f6>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800de16:	4b84      	ldr	r3, [pc, #528]	@ (800e028 <tx_control+0x7c8>)
 800de18:	22f1      	movs	r2, #241	@ 0xf1
 800de1a:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800de1c:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800de1e:	4b8e      	ldr	r3, [pc, #568]	@ (800e058 <tx_control+0x7f8>)
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	4b8e      	ldr	r3, [pc, #568]	@ (800e05c <tx_control+0x7fc>)
 800de24:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800de26:	4b8e      	ldr	r3, [pc, #568]	@ (800e060 <tx_control+0x800>)
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	4b8e      	ldr	r3, [pc, #568]	@ (800e064 <tx_control+0x804>)
 800de2c:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800de2e:	4b8e      	ldr	r3, [pc, #568]	@ (800e068 <tx_control+0x808>)
 800de30:	2203      	movs	r2, #3
 800de32:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800de34:	4b8d      	ldr	r3, [pc, #564]	@ (800e06c <tx_control+0x80c>)
 800de36:	4a8e      	ldr	r2, [pc, #568]	@ (800e070 <tx_control+0x810>)
 800de38:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800de3a:	4b8e      	ldr	r3, [pc, #568]	@ (800e074 <tx_control+0x814>)
 800de3c:	4a8e      	ldr	r2, [pc, #568]	@ (800e078 <tx_control+0x818>)
 800de3e:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800de40:	4b7c      	ldr	r3, [pc, #496]	@ (800e034 <tx_control+0x7d4>)
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2201      	movs	r2, #1
 800de46:	4053      	eors	r3, r2
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <tx_control+0x5f2>
 800de4e:	f000 fc84 	bl	800e75a <tx_control+0xefa>
			goto noFullFlagTXDATA;
 800de52:	f000 fc85 	bl	800e760 <tx_control+0xf00>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800de56:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800de58:	4b6c      	ldr	r3, [pc, #432]	@ (800e00c <tx_control+0x7ac>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b61      	cmp	r3, #97	@ 0x61
 800de5e:	d121      	bne.n	800dea4 <tx_control+0x644>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800de60:	4b71      	ldr	r3, [pc, #452]	@ (800e028 <tx_control+0x7c8>)
 800de62:	22f1      	movs	r2, #241	@ 0xf1
 800de64:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800de66:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800de68:	4b84      	ldr	r3, [pc, #528]	@ (800e07c <tx_control+0x81c>)
 800de6a:	781a      	ldrb	r2, [r3, #0]
 800de6c:	4b7b      	ldr	r3, [pc, #492]	@ (800e05c <tx_control+0x7fc>)
 800de6e:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800de70:	4b83      	ldr	r3, [pc, #524]	@ (800e080 <tx_control+0x820>)
 800de72:	781a      	ldrb	r2, [r3, #0]
 800de74:	4b7b      	ldr	r3, [pc, #492]	@ (800e064 <tx_control+0x804>)
 800de76:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800de78:	4b7b      	ldr	r3, [pc, #492]	@ (800e068 <tx_control+0x808>)
 800de7a:	220a      	movs	r2, #10
 800de7c:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800de7e:	4b7b      	ldr	r3, [pc, #492]	@ (800e06c <tx_control+0x80c>)
 800de80:	4a80      	ldr	r2, [pc, #512]	@ (800e084 <tx_control+0x824>)
 800de82:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800de84:	4b7b      	ldr	r3, [pc, #492]	@ (800e074 <tx_control+0x814>)
 800de86:	4a80      	ldr	r2, [pc, #512]	@ (800e088 <tx_control+0x828>)
 800de88:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800de8a:	4b6a      	ldr	r3, [pc, #424]	@ (800e034 <tx_control+0x7d4>)
 800de8c:	789b      	ldrb	r3, [r3, #2]
 800de8e:	2201      	movs	r2, #1
 800de90:	4053      	eors	r3, r2
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <tx_control+0x63c>
 800de98:	f000 fcec 	bl	800e874 <tx_control+0x1014>
			goto noFullFlagTXEVENT;
 800de9c:	f000 fced 	bl	800e87a <tx_control+0x101a>
			goto ask_tx_control_04;
 800dea0:	46c0      	nop			@ (mov r8, r8)
 800dea2:	e000      	b.n	800dea6 <tx_control+0x646>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800dea4:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800dea6:	4b59      	ldr	r3, [pc, #356]	@ (800e00c <tx_control+0x7ac>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b53      	cmp	r3, #83	@ 0x53
 800deac:	d12e      	bne.n	800df0c <tx_control+0x6ac>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800deae:	4b5e      	ldr	r3, [pc, #376]	@ (800e028 <tx_control+0x7c8>)
 800deb0:	22f1      	movs	r2, #241	@ 0xf1
 800deb2:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800deb4:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800deb6:	4b75      	ldr	r3, [pc, #468]	@ (800e08c <tx_control+0x82c>)
 800deb8:	781a      	ldrb	r2, [r3, #0]
 800deba:	4b75      	ldr	r3, [pc, #468]	@ (800e090 <tx_control+0x830>)
 800debc:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800debe:	4b75      	ldr	r3, [pc, #468]	@ (800e094 <tx_control+0x834>)
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	4b73      	ldr	r3, [pc, #460]	@ (800e090 <tx_control+0x830>)
 800dec4:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800dec6:	4b74      	ldr	r3, [pc, #464]	@ (800e098 <tx_control+0x838>)
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	4b71      	ldr	r3, [pc, #452]	@ (800e090 <tx_control+0x830>)
 800decc:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800dece:	4b73      	ldr	r3, [pc, #460]	@ (800e09c <tx_control+0x83c>)
 800ded0:	781a      	ldrb	r2, [r3, #0]
 800ded2:	4b6f      	ldr	r3, [pc, #444]	@ (800e090 <tx_control+0x830>)
 800ded4:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800ded6:	4b72      	ldr	r3, [pc, #456]	@ (800e0a0 <tx_control+0x840>)
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	0a1b      	lsrs	r3, r3, #8
 800dedc:	b29b      	uxth	r3, r3
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	4b6b      	ldr	r3, [pc, #428]	@ (800e090 <tx_control+0x830>)
 800dee2:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800dee4:	4b6e      	ldr	r3, [pc, #440]	@ (800e0a0 <tx_control+0x840>)
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	4b69      	ldr	r3, [pc, #420]	@ (800e090 <tx_control+0x830>)
 800deec:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800deee:	4b6d      	ldr	r3, [pc, #436]	@ (800e0a4 <tx_control+0x844>)
 800def0:	781a      	ldrb	r2, [r3, #0]
 800def2:	4b67      	ldr	r3, [pc, #412]	@ (800e090 <tx_control+0x830>)
 800def4:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800def6:	4b66      	ldr	r3, [pc, #408]	@ (800e090 <tx_control+0x830>)
 800def8:	2200      	movs	r2, #0
 800defa:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800defc:	4b6a      	ldr	r3, [pc, #424]	@ (800e0a8 <tx_control+0x848>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <tx_control+0x6a8>
 800df04:	f000 fd0a 	bl	800e91c <tx_control+0x10bc>
 800df08:	f000 fd01 	bl	800e90e <tx_control+0x10ae>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800df0c:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800df0e:	4b3f      	ldr	r3, [pc, #252]	@ (800e00c <tx_control+0x7ac>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b51      	cmp	r3, #81	@ 0x51
 800df14:	d125      	bne.n	800df62 <tx_control+0x702>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800df16:	4b44      	ldr	r3, [pc, #272]	@ (800e028 <tx_control+0x7c8>)
 800df18:	22f1      	movs	r2, #241	@ 0xf1
 800df1a:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800df1c:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800df1e:	4b63      	ldr	r3, [pc, #396]	@ (800e0ac <tx_control+0x84c>)
 800df20:	227b      	movs	r2, #123	@ 0x7b
 800df22:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800df24:	4b61      	ldr	r3, [pc, #388]	@ (800e0ac <tx_control+0x84c>)
 800df26:	227c      	movs	r2, #124	@ 0x7c
 800df28:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800df2a:	4b60      	ldr	r3, [pc, #384]	@ (800e0ac <tx_control+0x84c>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800df30:	4b5e      	ldr	r3, [pc, #376]	@ (800e0ac <tx_control+0x84c>)
 800df32:	2200      	movs	r2, #0
 800df34:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800df36:	4b5d      	ldr	r3, [pc, #372]	@ (800e0ac <tx_control+0x84c>)
 800df38:	2200      	movs	r2, #0
 800df3a:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800df3c:	4b5b      	ldr	r3, [pc, #364]	@ (800e0ac <tx_control+0x84c>)
 800df3e:	2201      	movs	r2, #1
 800df40:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800df42:	4b5a      	ldr	r3, [pc, #360]	@ (800e0ac <tx_control+0x84c>)
 800df44:	2204      	movs	r2, #4
 800df46:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800df48:	4b58      	ldr	r3, [pc, #352]	@ (800e0ac <tx_control+0x84c>)
 800df4a:	2280      	movs	r2, #128	@ 0x80
 800df4c:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800df4e:	4b57      	ldr	r3, [pc, #348]	@ (800e0ac <tx_control+0x84c>)
 800df50:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800df52:	4b40      	ldr	r3, [pc, #256]	@ (800e054 <tx_control+0x7f4>)
 800df54:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800df56:	2334      	movs	r3, #52	@ 0x34
 800df58:	18fb      	adds	r3, r7, r3
 800df5a:	2200      	movs	r2, #0
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	f000 fe19 	bl	800eb94 <tx_control+0x1334>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800df62:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800df64:	4b29      	ldr	r3, [pc, #164]	@ (800e00c <tx_control+0x7ac>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b50      	cmp	r3, #80	@ 0x50
 800df6a:	d112      	bne.n	800df92 <tx_control+0x732>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800df6c:	4b2e      	ldr	r3, [pc, #184]	@ (800e028 <tx_control+0x7c8>)
 800df6e:	22f1      	movs	r2, #241	@ 0xf1
 800df70:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800df72:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == findLastValue((uint32_t) &eePlantilla[eeversion1])){
 800df74:	4b4e      	ldr	r3, [pc, #312]	@ (800e0b0 <tx_control+0x850>)
 800df76:	227d      	movs	r2, #125	@ 0x7d
 800df78:	5c9b      	ldrb	r3, [r3, r2]
 800df7a:	001c      	movs	r4, r3
 800df7c:	4b4d      	ldr	r3, [pc, #308]	@ (800e0b4 <tx_control+0x854>)
 800df7e:	0018      	movs	r0, r3
 800df80:	f7f4 fe4c 	bl	8002c1c <findLastValue>
 800df84:	0003      	movs	r3, r0
 800df86:	429c      	cmp	r4, r3
 800df88:	d001      	beq.n	800df8e <tx_control+0x72e>
 800df8a:	f000 ff09 	bl	800eda0 <tx_control+0x1540>
				goto 	verifica_version2;		//jreq	verifica_version2
 800df8e:	f000 fea3 	bl	800ecd8 <tx_control+0x1478>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800df92:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800df94:	4b1d      	ldr	r3, [pc, #116]	@ (800e00c <tx_control+0x7ac>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	2b46      	cmp	r3, #70	@ 0x46
 800df9a:	d126      	bne.n	800dfea <tx_control+0x78a>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800df9c:	4b22      	ldr	r3, [pc, #136]	@ (800e028 <tx_control+0x7c8>)
 800df9e:	22f1      	movs	r2, #241	@ 0xf1
 800dfa0:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800dfa2:	46c0      	nop			@ (mov r8, r8)
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800dfa4:	4b24      	ldr	r3, [pc, #144]	@ (800e038 <tx_control+0x7d8>)
 800dfa6:	22f1      	movs	r2, #241	@ 0xf1
 800dfa8:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800dfaa:	4b23      	ldr	r3, [pc, #140]	@ (800e038 <tx_control+0x7d8>)
 800dfac:	2203      	movs	r2, #3
 800dfae:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800dfb0:	4b1c      	ldr	r3, [pc, #112]	@ (800e024 <tx_control+0x7c4>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800dfb6:	4b40      	ldr	r3, [pc, #256]	@ (800e0b8 <tx_control+0x858>)
 800dfb8:	4a1f      	ldr	r2, [pc, #124]	@ (800e038 <tx_control+0x7d8>)
 800dfba:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800dfbc:	4b3f      	ldr	r3, [pc, #252]	@ (800e0bc <tx_control+0x85c>)
 800dfbe:	4a1e      	ldr	r2, [pc, #120]	@ (800e038 <tx_control+0x7d8>)
 800dfc0:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800dfc2:	4b3f      	ldr	r3, [pc, #252]	@ (800e0c0 <tx_control+0x860>)
 800dfc4:	4a3f      	ldr	r2, [pc, #252]	@ (800e0c4 <tx_control+0x864>)
 800dfc6:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800dfc8:	4b3f      	ldr	r3, [pc, #252]	@ (800e0c8 <tx_control+0x868>)
 800dfca:	2202      	movs	r2, #2
 800dfcc:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800dfce:	4b3f      	ldr	r3, [pc, #252]	@ (800e0cc <tx_control+0x86c>)
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800dfd4:	4b3e      	ldr	r3, [pc, #248]	@ (800e0d0 <tx_control+0x870>)
 800dfd6:	2255      	movs	r2, #85	@ 0x55
 800dfd8:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800dfda:	4b0c      	ldr	r3, [pc, #48]	@ (800e00c <tx_control+0x7ac>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800dfe0:	4b13      	ldr	r3, [pc, #76]	@ (800e030 <tx_control+0x7d0>)
 800dfe2:	2205      	movs	r2, #5
 800dfe4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800dfe6:	f001 fce6 	bl	800f9b6 <tx_control+0x2156>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800dfea:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800dfec:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <tx_control+0x7ac>)
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	2b54      	cmp	r3, #84	@ 0x54
 800dff2:	d171      	bne.n	800e0d8 <tx_control+0x878>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800dff4:	4b0c      	ldr	r3, [pc, #48]	@ (800e028 <tx_control+0x7c8>)
 800dff6:	22f1      	movs	r2, #241	@ 0xf1
 800dff8:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800dffa:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800dffc:	f7f8 ff52 	bl	8006ea4 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800e000:	4b34      	ldr	r3, [pc, #208]	@ (800e0d4 <tx_control+0x874>)
 800e002:	2200      	movs	r2, #0
 800e004:	701a      	strb	r2, [r3, #0]
 800e006:	f001 f89a 	bl	800f13e <tx_control+0x18de>
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	20000e34 	.word	0x20000e34
 800e010:	20000f5c 	.word	0x20000f5c
 800e014:	20000f54 	.word	0x20000f54
 800e018:	20000ef8 	.word	0x20000ef8
 800e01c:	20000f4a 	.word	0x20000f4a
 800e020:	20000f60 	.word	0x20000f60
 800e024:	20000eec 	.word	0x20000eec
 800e028:	20000ef5 	.word	0x20000ef5
 800e02c:	2000110c 	.word	0x2000110c
 800e030:	20000ef6 	.word	0x20000ef6
 800e034:	20000e14 	.word	0x20000e14
 800e038:	20000df0 	.word	0x20000df0
 800e03c:	0801e7f4 	.word	0x0801e7f4
 800e040:	0801e7f0 	.word	0x0801e7f0
 800e044:	0801e7f1 	.word	0x0801e7f1
 800e048:	200000b8 	.word	0x200000b8
 800e04c:	0801e7f3 	.word	0x0801e7f3
 800e050:	0801e7f2 	.word	0x0801e7f2
 800e054:	20000fb8 	.word	0x20000fb8
 800e058:	20000dbd 	.word	0x20000dbd
 800e05c:	20000daa 	.word	0x20000daa
 800e060:	20000dbc 	.word	0x20000dbc
 800e064:	20000dab 	.word	0x20000dab
 800e068:	20000e41 	.word	0x20000e41
 800e06c:	20000db4 	.word	0x20000db4
 800e070:	20000c9c 	.word	0x20000c9c
 800e074:	20000db0 	.word	0x20000db0
 800e078:	0803c000 	.word	0x0803c000
 800e07c:	20000dbf 	.word	0x20000dbf
 800e080:	20000dbe 	.word	0x20000dbe
 800e084:	20000d1c 	.word	0x20000d1c
 800e088:	08037000 	.word	0x08037000
 800e08c:	20000bc0 	.word	0x20000bc0
 800e090:	20000e08 	.word	0x20000e08
 800e094:	20000bc1 	.word	0x20000bc1
 800e098:	20000bc2 	.word	0x20000bc2
 800e09c:	20000bc3 	.word	0x20000bc3
 800e0a0:	20000c64 	.word	0x20000c64
 800e0a4:	20000bde 	.word	0x20000bde
 800e0a8:	20000bb4 	.word	0x20000bb4
 800e0ac:	20000de8 	.word	0x20000de8
 800e0b0:	20000994 	.word	0x20000994
 800e0b4:	0803f07b 	.word	0x0803f07b
 800e0b8:	20000e24 	.word	0x20000e24
 800e0bc:	20000e1c 	.word	0x20000e1c
 800e0c0:	20000e20 	.word	0x20000e20
 800e0c4:	20000df1 	.word	0x20000df1
 800e0c8:	20000e40 	.word	0x20000e40
 800e0cc:	20000e2c 	.word	0x20000e2c
 800e0d0:	20000e29 	.word	0x20000e29
 800e0d4:	20000ee1 	.word	0x20000ee1
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800e0d8:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800e0da:	4bbb      	ldr	r3, [pc, #748]	@ (800e3c8 <tx_control+0xb68>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b55      	cmp	r3, #85	@ 0x55
 800e0e0:	d105      	bne.n	800e0ee <tx_control+0x88e>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e0e2:	4bba      	ldr	r3, [pc, #744]	@ (800e3cc <tx_control+0xb6c>)
 800e0e4:	22f0      	movs	r2, #240	@ 0xf0
 800e0e6:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800e0e8:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800e0ea:	f001 fc64 	bl	800f9b6 <tx_control+0x2156>
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800e0ee:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800e0f0:	4bb5      	ldr	r3, [pc, #724]	@ (800e3c8 <tx_control+0xb68>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b56      	cmp	r3, #86	@ 0x56
 800e0f6:	d132      	bne.n	800e15e <tx_control+0x8fe>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e0f8:	4bb4      	ldr	r3, [pc, #720]	@ (800e3cc <tx_control+0xb6c>)
 800e0fa:	22f0      	movs	r2, #240	@ 0xf0
 800e0fc:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800e0fe:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e100:	4bb3      	ldr	r3, [pc, #716]	@ (800e3d0 <tx_control+0xb70>)
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800e106:	4bb3      	ldr	r3, [pc, #716]	@ (800e3d4 <tx_control+0xb74>)
 800e108:	2200      	movs	r2, #0
 800e10a:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e10c:	4bb2      	ldr	r3, [pc, #712]	@ (800e3d8 <tx_control+0xb78>)
 800e10e:	2206      	movs	r2, #6
 800e110:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e112:	4bb2      	ldr	r3, [pc, #712]	@ (800e3dc <tx_control+0xb7c>)
 800e114:	2106      	movs	r1, #6
 800e116:	0018      	movs	r0, r3
 800e118:	f7f8 fe8e 	bl	8006e38 <buildChksumBloq>
			chksum_to_compare = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e120:	4bae      	ldr	r3, [pc, #696]	@ (800e3dc <tx_control+0xb7c>)
 800e122:	799b      	ldrb	r3, [r3, #6]
 800e124:	061b      	lsls	r3, r3, #24
 800e126:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e128:	4bac      	ldr	r3, [pc, #688]	@ (800e3dc <tx_control+0xb7c>)
 800e12a:	79db      	ldrb	r3, [r3, #7]
 800e12c:	041b      	lsls	r3, r3, #16
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	18d3      	adds	r3, r2, r3
 800e132:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e134:	4ba9      	ldr	r3, [pc, #676]	@ (800e3dc <tx_control+0xb7c>)
 800e136:	7a1b      	ldrb	r3, [r3, #8]
 800e138:	021b      	lsls	r3, r3, #8
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	18d3      	adds	r3, r2, r3
 800e13e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e140:	4ba6      	ldr	r3, [pc, #664]	@ (800e3dc <tx_control+0xb7c>)
 800e142:	7a5b      	ldrb	r3, [r3, #9]
 800e144:	001a      	movs	r2, r3
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	189b      	adds	r3, r3, r2
 800e14a:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e14c:	4ba0      	ldr	r3, [pc, #640]	@ (800e3d0 <tx_control+0xb70>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	429a      	cmp	r2, r3
 800e154:	d101      	bne.n	800e15a <tx_control+0x8fa>
 800e156:	f001 f85b 	bl	800f210 <tx_control+0x19b0>
				goto tx_write_status_error;
 800e15a:	f001 f911 	bl	800f380 <tx_control+0x1b20>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800e15e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800e160:	4b99      	ldr	r3, [pc, #612]	@ (800e3c8 <tx_control+0xb68>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	2b57      	cmp	r3, #87	@ 0x57
 800e166:	d10e      	bne.n	800e186 <tx_control+0x926>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e168:	4b98      	ldr	r3, [pc, #608]	@ (800e3cc <tx_control+0xb6c>)
 800e16a:	22f0      	movs	r2, #240	@ 0xf0
 800e16c:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800e16e:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800e170:	4b9b      	ldr	r3, [pc, #620]	@ (800e3e0 <tx_control+0xb80>)
 800e172:	0018      	movs	r0, r3
 800e174:	f7f4 fd52 	bl	8002c1c <findLastValue>
 800e178:	0002      	movs	r2, r0
 800e17a:	1dfb      	adds	r3, r7, #7
 800e17c:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800e17e:	2300      	movs	r3, #0
 800e180:	623b      	str	r3, [r7, #32]
 800e182:	f001 f985 	bl	800f490 <tx_control+0x1c30>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800e186:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800e188:	4b8f      	ldr	r3, [pc, #572]	@ (800e3c8 <tx_control+0xb68>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b58      	cmp	r3, #88	@ 0x58
 800e18e:	d132      	bne.n	800e1f6 <tx_control+0x996>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800e190:	4b8e      	ldr	r3, [pc, #568]	@ (800e3cc <tx_control+0xb6c>)
 800e192:	22f0      	movs	r2, #240	@ 0xf0
 800e194:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800e196:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800e198:	4b8d      	ldr	r3, [pc, #564]	@ (800e3d0 <tx_control+0xb70>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800e19e:	4b8d      	ldr	r3, [pc, #564]	@ (800e3d4 <tx_control+0xb74>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e1a4:	4b8c      	ldr	r3, [pc, #560]	@ (800e3d8 <tx_control+0xb78>)
 800e1a6:	2206      	movs	r2, #6
 800e1a8:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e1aa:	4b8c      	ldr	r3, [pc, #560]	@ (800e3dc <tx_control+0xb7c>)
 800e1ac:	2106      	movs	r1, #6
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f7f8 fe42 	bl	8006e38 <buildChksumBloq>
		chksum_to_compare = 0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60bb      	str	r3, [r7, #8]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e1b8:	4b88      	ldr	r3, [pc, #544]	@ (800e3dc <tx_control+0xb7c>)
 800e1ba:	799b      	ldrb	r3, [r3, #6]
 800e1bc:	061b      	lsls	r3, r3, #24
 800e1be:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e1c0:	4b86      	ldr	r3, [pc, #536]	@ (800e3dc <tx_control+0xb7c>)
 800e1c2:	79db      	ldrb	r3, [r3, #7]
 800e1c4:	041b      	lsls	r3, r3, #16
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	18d3      	adds	r3, r2, r3
 800e1ca:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e1cc:	4b83      	ldr	r3, [pc, #524]	@ (800e3dc <tx_control+0xb7c>)
 800e1ce:	7a1b      	ldrb	r3, [r3, #8]
 800e1d0:	021b      	lsls	r3, r3, #8
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	18d3      	adds	r3, r2, r3
 800e1d6:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e1d8:	4b80      	ldr	r3, [pc, #512]	@ (800e3dc <tx_control+0xb7c>)
 800e1da:	7a5b      	ldrb	r3, [r3, #9]
 800e1dc:	001a      	movs	r2, r3
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	189b      	adds	r3, r3, r2
 800e1e2:	60bb      	str	r3, [r7, #8]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e1e4:	4b7a      	ldr	r3, [pc, #488]	@ (800e3d0 <tx_control+0xb70>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d101      	bne.n	800e1f2 <tx_control+0x992>
 800e1ee:	f001 fa5c 	bl	800f6aa <tx_control+0x1e4a>
			goto tx_write_status_error;
 800e1f2:	f001 f8c5 	bl	800f380 <tx_control+0x1b20>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800e1f6:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800e1f8:	4b73      	ldr	r3, [pc, #460]	@ (800e3c8 <tx_control+0xb68>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b59      	cmp	r3, #89	@ 0x59
 800e1fe:	d132      	bne.n	800e266 <tx_control+0xa06>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800e200:	4b72      	ldr	r3, [pc, #456]	@ (800e3cc <tx_control+0xb6c>)
 800e202:	22f0      	movs	r2, #240	@ 0xf0
 800e204:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800e206:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e208:	4b71      	ldr	r3, [pc, #452]	@ (800e3d0 <tx_control+0xb70>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800e20e:	4b71      	ldr	r3, [pc, #452]	@ (800e3d4 <tx_control+0xb74>)
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800e214:	4b70      	ldr	r3, [pc, #448]	@ (800e3d8 <tx_control+0xb78>)
 800e216:	220a      	movs	r2, #10
 800e218:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800e21a:	4b70      	ldr	r3, [pc, #448]	@ (800e3dc <tx_control+0xb7c>)
 800e21c:	210a      	movs	r1, #10
 800e21e:	0018      	movs	r0, r3
 800e220:	f7f8 fe0a 	bl	8006e38 <buildChksumBloq>
			chksum_to_compare = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800e228:	4b6c      	ldr	r3, [pc, #432]	@ (800e3dc <tx_control+0xb7c>)
 800e22a:	7a9b      	ldrb	r3, [r3, #10]
 800e22c:	061b      	lsls	r3, r3, #24
 800e22e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800e230:	4b6a      	ldr	r3, [pc, #424]	@ (800e3dc <tx_control+0xb7c>)
 800e232:	7adb      	ldrb	r3, [r3, #11]
 800e234:	041b      	lsls	r3, r3, #16
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	18d3      	adds	r3, r2, r3
 800e23a:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800e23c:	4b67      	ldr	r3, [pc, #412]	@ (800e3dc <tx_control+0xb7c>)
 800e23e:	7b1b      	ldrb	r3, [r3, #12]
 800e240:	021b      	lsls	r3, r3, #8
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	18d3      	adds	r3, r2, r3
 800e246:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800e248:	4b64      	ldr	r3, [pc, #400]	@ (800e3dc <tx_control+0xb7c>)
 800e24a:	7b5b      	ldrb	r3, [r3, #13]
 800e24c:	001a      	movs	r2, r3
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	189b      	adds	r3, r3, r2
 800e252:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e254:	4b5e      	ldr	r3, [pc, #376]	@ (800e3d0 <tx_control+0xb70>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d101      	bne.n	800e262 <tx_control+0xa02>
 800e25e:	f001 fa41 	bl	800f6e4 <tx_control+0x1e84>
				goto tx_write_GEO_error;
 800e262:	f001 faa6 	bl	800f7b2 <tx_control+0x1f52>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800e266:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800e268:	4b57      	ldr	r3, [pc, #348]	@ (800e3c8 <tx_control+0xb68>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	2b5a      	cmp	r3, #90	@ 0x5a
 800e26e:	d000      	beq.n	800e272 <tx_control+0xa12>
 800e270:	e0dc      	b.n	800e42c <tx_control+0xbcc>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e272:	4b56      	ldr	r3, [pc, #344]	@ (800e3cc <tx_control+0xb6c>)
 800e274:	22f0      	movs	r2, #240	@ 0xf0
 800e276:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800e278:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800e27a:	4b5a      	ldr	r3, [pc, #360]	@ (800e3e4 <tx_control+0xb84>)
 800e27c:	2208      	movs	r2, #8
 800e27e:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800e280:	4b59      	ldr	r3, [pc, #356]	@ (800e3e8 <tx_control+0xb88>)
 800e282:	227c      	movs	r2, #124	@ 0x7c
 800e284:	5c9a      	ldrb	r2, [r3, r2]
 800e286:	4b59      	ldr	r3, [pc, #356]	@ (800e3ec <tx_control+0xb8c>)
 800e288:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e28a:	4b58      	ldr	r3, [pc, #352]	@ (800e3ec <tx_control+0xb8c>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e290:	4b56      	ldr	r3, [pc, #344]	@ (800e3ec <tx_control+0xb8c>)
 800e292:	2200      	movs	r2, #0
 800e294:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e296:	4b55      	ldr	r3, [pc, #340]	@ (800e3ec <tx_control+0xb8c>)
 800e298:	2200      	movs	r2, #0
 800e29a:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e29c:	4b53      	ldr	r3, [pc, #332]	@ (800e3ec <tx_control+0xb8c>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800e2a2:	4b52      	ldr	r3, [pc, #328]	@ (800e3ec <tx_control+0xb8c>)
 800e2a4:	2206      	movs	r2, #6
 800e2a6:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800e2a8:	4b4e      	ldr	r3, [pc, #312]	@ (800e3e4 <tx_control+0xb84>)
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	4b4f      	ldr	r3, [pc, #316]	@ (800e3ec <tx_control+0xb8c>)
 800e2ae:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e2b0:	4b48      	ldr	r3, [pc, #288]	@ (800e3d4 <tx_control+0xb74>)
 800e2b2:	2208      	movs	r2, #8
 800e2b4:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800e2b6:	4a4e      	ldr	r2, [pc, #312]	@ (800e3f0 <tx_control+0xb90>)
 800e2b8:	4b4c      	ldr	r3, [pc, #304]	@ (800e3ec <tx_control+0xb8c>)
 800e2ba:	0011      	movs	r1, r2
 800e2bc:	0018      	movs	r0, r3
 800e2be:	f7f8 fe09 	bl	8006ed4 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = findLastValue((uint32_t) &eeLat1);
 800e2c2:	4b4c      	ldr	r3, [pc, #304]	@ (800e3f4 <tx_control+0xb94>)
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f7f4 fca9 	bl	8002c1c <findLastValue>
 800e2ca:	0003      	movs	r3, r0
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	4b48      	ldr	r3, [pc, #288]	@ (800e3f0 <tx_control+0xb90>)
 800e2d0:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = findLastValue((uint32_t) &eeLat2);
 800e2d2:	4b49      	ldr	r3, [pc, #292]	@ (800e3f8 <tx_control+0xb98>)
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	f7f4 fca1 	bl	8002c1c <findLastValue>
 800e2da:	0003      	movs	r3, r0
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	4b44      	ldr	r3, [pc, #272]	@ (800e3f0 <tx_control+0xb90>)
 800e2e0:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = findLastValue((uint32_t) &eeLat3);
 800e2e2:	4b46      	ldr	r3, [pc, #280]	@ (800e3fc <tx_control+0xb9c>)
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	f7f4 fc99 	bl	8002c1c <findLastValue>
 800e2ea:	0003      	movs	r3, r0
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	4b40      	ldr	r3, [pc, #256]	@ (800e3f0 <tx_control+0xb90>)
 800e2f0:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = findLastValue((uint32_t) &eeLat4);
 800e2f2:	4b43      	ldr	r3, [pc, #268]	@ (800e400 <tx_control+0xba0>)
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f7f4 fc91 	bl	8002c1c <findLastValue>
 800e2fa:	0003      	movs	r3, r0
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	4b3c      	ldr	r3, [pc, #240]	@ (800e3f0 <tx_control+0xb90>)
 800e300:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= findLastValue((uint32_t) &eeLong1);
 800e302:	4b40      	ldr	r3, [pc, #256]	@ (800e404 <tx_control+0xba4>)
 800e304:	0018      	movs	r0, r3
 800e306:	f7f4 fc89 	bl	8002c1c <findLastValue>
 800e30a:	0003      	movs	r3, r0
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	4b38      	ldr	r3, [pc, #224]	@ (800e3f0 <tx_control+0xb90>)
 800e310:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= findLastValue((uint32_t) &eeLong2);
 800e312:	4b3d      	ldr	r3, [pc, #244]	@ (800e408 <tx_control+0xba8>)
 800e314:	0018      	movs	r0, r3
 800e316:	f7f4 fc81 	bl	8002c1c <findLastValue>
 800e31a:	0003      	movs	r3, r0
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b34      	ldr	r3, [pc, #208]	@ (800e3f0 <tx_control+0xb90>)
 800e320:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = findLastValue((uint32_t) &eeLong3);
 800e322:	4b3a      	ldr	r3, [pc, #232]	@ (800e40c <tx_control+0xbac>)
 800e324:	0018      	movs	r0, r3
 800e326:	f7f4 fc79 	bl	8002c1c <findLastValue>
 800e32a:	0003      	movs	r3, r0
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	4b30      	ldr	r3, [pc, #192]	@ (800e3f0 <tx_control+0xb90>)
 800e330:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = findLastValue((uint32_t) &eeLong4);
 800e332:	4b37      	ldr	r3, [pc, #220]	@ (800e410 <tx_control+0xbb0>)
 800e334:	0018      	movs	r0, r3
 800e336:	f7f4 fc71 	bl	8002c1c <findLastValue>
 800e33a:	0003      	movs	r3, r0
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	4b2c      	ldr	r3, [pc, #176]	@ (800e3f0 <tx_control+0xb90>)
 800e340:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e342:	4b23      	ldr	r3, [pc, #140]	@ (800e3d0 <tx_control+0xb70>)
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800e348:	4b22      	ldr	r3, [pc, #136]	@ (800e3d4 <tx_control+0xb74>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800e34e:	4b22      	ldr	r3, [pc, #136]	@ (800e3d8 <tx_control+0xb78>)
 800e350:	2210      	movs	r2, #16
 800e352:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800e354:	4b20      	ldr	r3, [pc, #128]	@ (800e3d8 <tx_control+0xb78>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	001a      	movs	r2, r3
 800e35a:	4b25      	ldr	r3, [pc, #148]	@ (800e3f0 <tx_control+0xb90>)
 800e35c:	0011      	movs	r1, r2
 800e35e:	0018      	movs	r0, r3
 800e360:	f7f8 fd6a 	bl	8006e38 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800e364:	4b1a      	ldr	r3, [pc, #104]	@ (800e3d0 <tx_control+0xb70>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	0e1b      	lsrs	r3, r3, #24
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	4b20      	ldr	r3, [pc, #128]	@ (800e3f0 <tx_control+0xb90>)
 800e36e:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800e370:	4b17      	ldr	r3, [pc, #92]	@ (800e3d0 <tx_control+0xb70>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	0c1b      	lsrs	r3, r3, #16
 800e376:	b2da      	uxtb	r2, r3
 800e378:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f0 <tx_control+0xb90>)
 800e37a:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800e37c:	4b14      	ldr	r3, [pc, #80]	@ (800e3d0 <tx_control+0xb70>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	0a1b      	lsrs	r3, r3, #8
 800e382:	b2da      	uxtb	r2, r3
 800e384:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f0 <tx_control+0xb90>)
 800e386:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800e388:	4b11      	ldr	r3, [pc, #68]	@ (800e3d0 <tx_control+0xb70>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	4b18      	ldr	r3, [pc, #96]	@ (800e3f0 <tx_control+0xb90>)
 800e390:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800e392:	4b20      	ldr	r3, [pc, #128]	@ (800e414 <tx_control+0xbb4>)
 800e394:	4a16      	ldr	r2, [pc, #88]	@ (800e3f0 <tx_control+0xb90>)
 800e396:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800e398:	4b1f      	ldr	r3, [pc, #124]	@ (800e418 <tx_control+0xbb8>)
 800e39a:	4a15      	ldr	r2, [pc, #84]	@ (800e3f0 <tx_control+0xb90>)
 800e39c:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800e39e:	4b1f      	ldr	r3, [pc, #124]	@ (800e41c <tx_control+0xbbc>)
 800e3a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e420 <tx_control+0xbc0>)
 800e3a2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800e3a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e4 <tx_control+0xb84>)
 800e3a6:	2214      	movs	r2, #20
 800e3a8:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e3aa:	4b1e      	ldr	r3, [pc, #120]	@ (800e424 <tx_control+0xbc4>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800e3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e424 <tx_control+0xbc4>)
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e3b6:	4b1c      	ldr	r3, [pc, #112]	@ (800e428 <tx_control+0xbc8>)
 800e3b8:	2255      	movs	r2, #85	@ 0x55
 800e3ba:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800e3bc:	4b02      	ldr	r3, [pc, #8]	@ (800e3c8 <tx_control+0xb68>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800e3c2:	f001 faf8 	bl	800f9b6 <tx_control+0x2156>
 800e3c6:	46c0      	nop			@ (mov r8, r8)
 800e3c8:	20000e34 	.word	0x20000e34
 800e3cc:	20000ef5 	.word	0x20000ef5
 800e3d0:	20000e44 	.word	0x20000e44
 800e3d4:	20000b65 	.word	0x20000b65
 800e3d8:	20000b64 	.word	0x20000b64
 800e3dc:	20000994 	.word	0x20000994
 800e3e0:	0803f803 	.word	0x0803f803
 800e3e4:	20000e40 	.word	0x20000e40
 800e3e8:	200000b8 	.word	0x200000b8
 800e3ec:	20000de8 	.word	0x20000de8
 800e3f0:	20000fb8 	.word	0x20000fb8
 800e3f4:	0803f808 	.word	0x0803f808
 800e3f8:	0803f809 	.word	0x0803f809
 800e3fc:	0803f80a 	.word	0x0803f80a
 800e400:	0803f80b 	.word	0x0803f80b
 800e404:	0803f80c 	.word	0x0803f80c
 800e408:	0803f80d 	.word	0x0803f80d
 800e40c:	0803f80e 	.word	0x0803f80e
 800e410:	0803f80f 	.word	0x0803f80f
 800e414:	20000e24 	.word	0x20000e24
 800e418:	20000e1c 	.word	0x20000e1c
 800e41c:	20000e20 	.word	0x20000e20
 800e420:	20000fcc 	.word	0x20000fcc
 800e424:	20000e2c 	.word	0x20000e2c
 800e428:	20000e29 	.word	0x20000e29
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800e42c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800e42e:	4bf1      	ldr	r3, [pc, #964]	@ (800e7f4 <tx_control+0xf94>)
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b5b      	cmp	r3, #91	@ 0x5b
 800e434:	d000      	beq.n	800e438 <tx_control+0xbd8>
 800e436:	e089      	b.n	800e54c <tx_control+0xcec>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e438:	4bef      	ldr	r3, [pc, #956]	@ (800e7f8 <tx_control+0xf98>)
 800e43a:	22f0      	movs	r2, #240	@ 0xf0
 800e43c:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800e43e:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800e440:	4bee      	ldr	r3, [pc, #952]	@ (800e7fc <tx_control+0xf9c>)
 800e442:	2204      	movs	r2, #4
 800e444:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800e446:	4bee      	ldr	r3, [pc, #952]	@ (800e800 <tx_control+0xfa0>)
 800e448:	227b      	movs	r2, #123	@ 0x7b
 800e44a:	5c9a      	ldrb	r2, [r3, r2]
 800e44c:	4bed      	ldr	r3, [pc, #948]	@ (800e804 <tx_control+0xfa4>)
 800e44e:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800e450:	4beb      	ldr	r3, [pc, #940]	@ (800e800 <tx_control+0xfa0>)
 800e452:	227c      	movs	r2, #124	@ 0x7c
 800e454:	5c9a      	ldrb	r2, [r3, r2]
 800e456:	4beb      	ldr	r3, [pc, #940]	@ (800e804 <tx_control+0xfa4>)
 800e458:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e45a:	4bea      	ldr	r3, [pc, #936]	@ (800e804 <tx_control+0xfa4>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e460:	4be8      	ldr	r3, [pc, #928]	@ (800e804 <tx_control+0xfa4>)
 800e462:	2200      	movs	r2, #0
 800e464:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e466:	4be7      	ldr	r3, [pc, #924]	@ (800e804 <tx_control+0xfa4>)
 800e468:	2200      	movs	r2, #0
 800e46a:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e46c:	4be5      	ldr	r3, [pc, #916]	@ (800e804 <tx_control+0xfa4>)
 800e46e:	2201      	movs	r2, #1
 800e470:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800e472:	4be4      	ldr	r3, [pc, #912]	@ (800e804 <tx_control+0xfa4>)
 800e474:	2207      	movs	r2, #7
 800e476:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800e478:	4be0      	ldr	r3, [pc, #896]	@ (800e7fc <tx_control+0xf9c>)
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	4be1      	ldr	r3, [pc, #900]	@ (800e804 <tx_control+0xfa4>)
 800e47e:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800e480:	4be1      	ldr	r3, [pc, #900]	@ (800e808 <tx_control+0xfa8>)
 800e482:	2201      	movs	r2, #1
 800e484:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e486:	4be1      	ldr	r3, [pc, #900]	@ (800e80c <tx_control+0xfac>)
 800e488:	2208      	movs	r2, #8
 800e48a:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800e48c:	4ae0      	ldr	r2, [pc, #896]	@ (800e810 <tx_control+0xfb0>)
 800e48e:	4bdd      	ldr	r3, [pc, #884]	@ (800e804 <tx_control+0xfa4>)
 800e490:	0011      	movs	r1, r2
 800e492:	0018      	movs	r0, r3
 800e494:	f7f8 fd1e 	bl	8006ed4 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800e498:	4bde      	ldr	r3, [pc, #888]	@ (800e814 <tx_control+0xfb4>)
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	0a1b      	lsrs	r3, r3, #8
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	4bdb      	ldr	r3, [pc, #876]	@ (800e810 <tx_control+0xfb0>)
 800e4a4:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800e4a6:	4bdb      	ldr	r3, [pc, #876]	@ (800e814 <tx_control+0xfb4>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	4bd8      	ldr	r3, [pc, #864]	@ (800e810 <tx_control+0xfb0>)
 800e4ae:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800e4b0:	4bd9      	ldr	r3, [pc, #868]	@ (800e818 <tx_control+0xfb8>)
 800e4b2:	881b      	ldrh	r3, [r3, #0]
 800e4b4:	0a1b      	lsrs	r3, r3, #8
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	4bd5      	ldr	r3, [pc, #852]	@ (800e810 <tx_control+0xfb0>)
 800e4bc:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800e4be:	4bd6      	ldr	r3, [pc, #856]	@ (800e818 <tx_control+0xfb8>)
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	4bd2      	ldr	r3, [pc, #840]	@ (800e810 <tx_control+0xfb0>)
 800e4c6:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e4c8:	4bd4      	ldr	r3, [pc, #848]	@ (800e81c <tx_control+0xfbc>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800e4ce:	4bcf      	ldr	r3, [pc, #828]	@ (800e80c <tx_control+0xfac>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800e4d4:	4bd2      	ldr	r3, [pc, #840]	@ (800e820 <tx_control+0xfc0>)
 800e4d6:	220c      	movs	r2, #12
 800e4d8:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800e4da:	4bd1      	ldr	r3, [pc, #836]	@ (800e820 <tx_control+0xfc0>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	001a      	movs	r2, r3
 800e4e0:	4bcb      	ldr	r3, [pc, #812]	@ (800e810 <tx_control+0xfb0>)
 800e4e2:	0011      	movs	r1, r2
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f7f8 fca7 	bl	8006e38 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800e4ea:	4bcc      	ldr	r3, [pc, #816]	@ (800e81c <tx_control+0xfbc>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	0e1b      	lsrs	r3, r3, #24
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	4bc7      	ldr	r3, [pc, #796]	@ (800e810 <tx_control+0xfb0>)
 800e4f4:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800e4f6:	4bc9      	ldr	r3, [pc, #804]	@ (800e81c <tx_control+0xfbc>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	0c1b      	lsrs	r3, r3, #16
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	4bc4      	ldr	r3, [pc, #784]	@ (800e810 <tx_control+0xfb0>)
 800e500:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800e502:	4bc6      	ldr	r3, [pc, #792]	@ (800e81c <tx_control+0xfbc>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	0a1b      	lsrs	r3, r3, #8
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	4bc1      	ldr	r3, [pc, #772]	@ (800e810 <tx_control+0xfb0>)
 800e50c:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800e50e:	4bc3      	ldr	r3, [pc, #780]	@ (800e81c <tx_control+0xfbc>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4bbe      	ldr	r3, [pc, #760]	@ (800e810 <tx_control+0xfb0>)
 800e516:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800e518:	4bc2      	ldr	r3, [pc, #776]	@ (800e824 <tx_control+0xfc4>)
 800e51a:	4abd      	ldr	r2, [pc, #756]	@ (800e810 <tx_control+0xfb0>)
 800e51c:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800e51e:	4bc2      	ldr	r3, [pc, #776]	@ (800e828 <tx_control+0xfc8>)
 800e520:	4abb      	ldr	r2, [pc, #748]	@ (800e810 <tx_control+0xfb0>)
 800e522:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800e524:	4bc1      	ldr	r3, [pc, #772]	@ (800e82c <tx_control+0xfcc>)
 800e526:	4ac2      	ldr	r2, [pc, #776]	@ (800e830 <tx_control+0xfd0>)
 800e528:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800e52a:	4bb4      	ldr	r3, [pc, #720]	@ (800e7fc <tx_control+0xf9c>)
 800e52c:	2210      	movs	r2, #16
 800e52e:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e530:	4bb5      	ldr	r3, [pc, #724]	@ (800e808 <tx_control+0xfa8>)
 800e532:	2200      	movs	r2, #0
 800e534:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800e536:	4bb4      	ldr	r3, [pc, #720]	@ (800e808 <tx_control+0xfa8>)
 800e538:	2201      	movs	r2, #1
 800e53a:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e53c:	4bbd      	ldr	r3, [pc, #756]	@ (800e834 <tx_control+0xfd4>)
 800e53e:	2255      	movs	r2, #85	@ 0x55
 800e540:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800e542:	4bac      	ldr	r3, [pc, #688]	@ (800e7f4 <tx_control+0xf94>)
 800e544:	2200      	movs	r2, #0
 800e546:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800e548:	f001 fa35 	bl	800f9b6 <tx_control+0x2156>
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800e54c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800e54e:	4ba9      	ldr	r3, [pc, #676]	@ (800e7f4 <tx_control+0xf94>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b5c      	cmp	r3, #92	@ 0x5c
 800e554:	d132      	bne.n	800e5bc <tx_control+0xd5c>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e556:	4ba8      	ldr	r3, [pc, #672]	@ (800e7f8 <tx_control+0xf98>)
 800e558:	22f0      	movs	r2, #240	@ 0xf0
 800e55a:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800e55c:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e55e:	4baf      	ldr	r3, [pc, #700]	@ (800e81c <tx_control+0xfbc>)
 800e560:	2200      	movs	r2, #0
 800e562:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800e564:	4ba9      	ldr	r3, [pc, #676]	@ (800e80c <tx_control+0xfac>)
 800e566:	2200      	movs	r2, #0
 800e568:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800e56a:	4bad      	ldr	r3, [pc, #692]	@ (800e820 <tx_control+0xfc0>)
 800e56c:	220b      	movs	r2, #11
 800e56e:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800e570:	4bb1      	ldr	r3, [pc, #708]	@ (800e838 <tx_control+0xfd8>)
 800e572:	210b      	movs	r1, #11
 800e574:	0018      	movs	r0, r3
 800e576:	f7f8 fc5f 	bl	8006e38 <buildChksumBloq>
			chksum_to_compare = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800e57e:	4bae      	ldr	r3, [pc, #696]	@ (800e838 <tx_control+0xfd8>)
 800e580:	7adb      	ldrb	r3, [r3, #11]
 800e582:	061b      	lsls	r3, r3, #24
 800e584:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800e586:	4bac      	ldr	r3, [pc, #688]	@ (800e838 <tx_control+0xfd8>)
 800e588:	7b1b      	ldrb	r3, [r3, #12]
 800e58a:	041b      	lsls	r3, r3, #16
 800e58c:	68ba      	ldr	r2, [r7, #8]
 800e58e:	18d3      	adds	r3, r2, r3
 800e590:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800e592:	4ba9      	ldr	r3, [pc, #676]	@ (800e838 <tx_control+0xfd8>)
 800e594:	7b5b      	ldrb	r3, [r3, #13]
 800e596:	021b      	lsls	r3, r3, #8
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	18d3      	adds	r3, r2, r3
 800e59c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800e59e:	4ba6      	ldr	r3, [pc, #664]	@ (800e838 <tx_control+0xfd8>)
 800e5a0:	7b9b      	ldrb	r3, [r3, #14]
 800e5a2:	001a      	movs	r2, r3
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	189b      	adds	r3, r3, r2
 800e5a8:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e5aa:	4b9c      	ldr	r3, [pc, #624]	@ (800e81c <tx_control+0xfbc>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d101      	bne.n	800e5b8 <tx_control+0xd58>
 800e5b4:	f001 f95e 	bl	800f874 <tx_control+0x2014>
				goto tx_timeBCD_error;
 800e5b8:	f001 f9dc 	bl	800f974 <tx_control+0x2114>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800e5bc:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800e5be:	4b8d      	ldr	r3, [pc, #564]	@ (800e7f4 <tx_control+0xf94>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b5f      	cmp	r3, #95	@ 0x5f
 800e5c4:	d142      	bne.n	800e64c <tx_control+0xdec>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e5c6:	4b8c      	ldr	r3, [pc, #560]	@ (800e7f8 <tx_control+0xf98>)
 800e5c8:	22f0      	movs	r2, #240	@ 0xf0
 800e5ca:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800e5cc:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800e5ce:	4b9b      	ldr	r3, [pc, #620]	@ (800e83c <tx_control+0xfdc>)
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800e5d4:	4b93      	ldr	r3, [pc, #588]	@ (800e824 <tx_control+0xfc4>)
 800e5d6:	4a99      	ldr	r2, [pc, #612]	@ (800e83c <tx_control+0xfdc>)
 800e5d8:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800e5da:	4b93      	ldr	r3, [pc, #588]	@ (800e828 <tx_control+0xfc8>)
 800e5dc:	4a97      	ldr	r2, [pc, #604]	@ (800e83c <tx_control+0xfdc>)
 800e5de:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800e5e0:	4b91      	ldr	r3, [pc, #580]	@ (800e828 <tx_control+0xfc8>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	4b91      	ldr	r3, [pc, #580]	@ (800e82c <tx_control+0xfcc>)
 800e5e8:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800e5ea:	4b84      	ldr	r3, [pc, #528]	@ (800e7fc <tx_control+0xf9c>)
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800e5f0:	4b83      	ldr	r3, [pc, #524]	@ (800e800 <tx_control+0xfa0>)
 800e5f2:	227b      	movs	r2, #123	@ 0x7b
 800e5f4:	5c9a      	ldrb	r2, [r3, r2]
 800e5f6:	4b83      	ldr	r3, [pc, #524]	@ (800e804 <tx_control+0xfa4>)
 800e5f8:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800e5fa:	4b81      	ldr	r3, [pc, #516]	@ (800e800 <tx_control+0xfa0>)
 800e5fc:	227c      	movs	r2, #124	@ 0x7c
 800e5fe:	5c9a      	ldrb	r2, [r3, r2]
 800e600:	4b80      	ldr	r3, [pc, #512]	@ (800e804 <tx_control+0xfa4>)
 800e602:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e604:	4b7f      	ldr	r3, [pc, #508]	@ (800e804 <tx_control+0xfa4>)
 800e606:	2200      	movs	r2, #0
 800e608:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e60a:	4b7e      	ldr	r3, [pc, #504]	@ (800e804 <tx_control+0xfa4>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e610:	4b7c      	ldr	r3, [pc, #496]	@ (800e804 <tx_control+0xfa4>)
 800e612:	2200      	movs	r2, #0
 800e614:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e616:	4b7b      	ldr	r3, [pc, #492]	@ (800e804 <tx_control+0xfa4>)
 800e618:	2201      	movs	r2, #1
 800e61a:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800e61c:	4b79      	ldr	r3, [pc, #484]	@ (800e804 <tx_control+0xfa4>)
 800e61e:	2209      	movs	r2, #9
 800e620:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800e622:	4b76      	ldr	r3, [pc, #472]	@ (800e7fc <tx_control+0xf9c>)
 800e624:	781a      	ldrb	r2, [r3, #0]
 800e626:	4b77      	ldr	r3, [pc, #476]	@ (800e804 <tx_control+0xfa4>)
 800e628:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800e62a:	4b77      	ldr	r3, [pc, #476]	@ (800e808 <tx_control+0xfa8>)
 800e62c:	2201      	movs	r2, #1
 800e62e:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e630:	4b7a      	ldr	r3, [pc, #488]	@ (800e81c <tx_control+0xfbc>)
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800e636:	4b74      	ldr	r3, [pc, #464]	@ (800e808 <tx_control+0xfa8>)
 800e638:	2200      	movs	r2, #0
 800e63a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e63c:	4b7d      	ldr	r3, [pc, #500]	@ (800e834 <tx_control+0xfd4>)
 800e63e:	2255      	movs	r2, #85	@ 0x55
 800e640:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800e642:	4b6c      	ldr	r3, [pc, #432]	@ (800e7f4 <tx_control+0xf94>)
 800e644:	2200      	movs	r2, #0
 800e646:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800e648:	f001 f9b5 	bl	800f9b6 <tx_control+0x2156>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800e64c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800e64e:	4b69      	ldr	r3, [pc, #420]	@ (800e7f4 <tx_control+0xf94>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b62      	cmp	r3, #98	@ 0x62
 800e654:	d10b      	bne.n	800e66e <tx_control+0xe0e>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e656:	4b68      	ldr	r3, [pc, #416]	@ (800e7f8 <tx_control+0xf98>)
 800e658:	22f0      	movs	r2, #240	@ 0xf0
 800e65a:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800e65c:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800e65e:	4b78      	ldr	r3, [pc, #480]	@ (800e840 <tx_control+0xfe0>)
 800e660:	2201      	movs	r2, #1
 800e662:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800e664:	4b63      	ldr	r3, [pc, #396]	@ (800e7f4 <tx_control+0xf94>)
 800e666:	2200      	movs	r2, #0
 800e668:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800e66a:	f001 f9a4 	bl	800f9b6 <tx_control+0x2156>
				goto ask_tx_control_19;
 800e66e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800e670:	4b60      	ldr	r3, [pc, #384]	@ (800e7f4 <tx_control+0xf94>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2b63      	cmp	r3, #99	@ 0x63
 800e676:	d10f      	bne.n	800e698 <tx_control+0xe38>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e678:	4b5f      	ldr	r3, [pc, #380]	@ (800e7f8 <tx_control+0xf98>)
 800e67a:	22f0      	movs	r2, #240	@ 0xf0
 800e67c:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800e67e:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800e680:	4b6f      	ldr	r3, [pc, #444]	@ (800e840 <tx_control+0xfe0>)
 800e682:	2201      	movs	r2, #1
 800e684:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800e686:	4b5b      	ldr	r3, [pc, #364]	@ (800e7f4 <tx_control+0xf94>)
 800e688:	2200      	movs	r2, #0
 800e68a:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800e68c:	f001 f993 	bl	800f9b6 <tx_control+0x2156>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800e690:	46c0      	nop			@ (mov r8, r8)
 800e692:	e002      	b.n	800e69a <tx_control+0xe3a>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800e694:	46c0      	nop			@ (mov r8, r8)
 800e696:	e000      	b.n	800e69a <tx_control+0xe3a>
				goto ask_tx_control_20;
 800e698:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800e69a:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800e69c:	4b69      	ldr	r3, [pc, #420]	@ (800e844 <tx_control+0xfe4>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <tx_control+0xe48>
 800e6a4:	f002 fa87 	bl	8010bb6 <tx_control+0x3356>
			goto tx_wifi_01;
 800e6a8:	f001 f9ab 	bl	800fa02 <tx_control+0x21a2>
	     	point_Y[i] = point_X[i];
 800e6ac:	203c      	movs	r0, #60	@ 0x3c
 800e6ae:	183b      	adds	r3, r7, r0
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6b4:	18d2      	adds	r2, r2, r3
 800e6b6:	183b      	adds	r3, r7, r0
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6bc:	18cb      	adds	r3, r1, r3
 800e6be:	7812      	ldrb	r2, [r2, #0]
 800e6c0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e6c2:	183b      	adds	r3, r7, r0
 800e6c4:	781a      	ldrb	r2, [r3, #0]
 800e6c6:	183b      	adds	r3, r7, r0
 800e6c8:	3201      	adds	r2, #1
 800e6ca:	701a      	strb	r2, [r3, #0]
 800e6cc:	233c      	movs	r3, #60	@ 0x3c
 800e6ce:	18fb      	adds	r3, r7, r3
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	2b14      	cmp	r3, #20
 800e6d4:	d9ea      	bls.n	800e6ac <tx_control+0xe4c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800e6d6:	4b51      	ldr	r3, [pc, #324]	@ (800e81c <tx_control+0xfbc>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800e6dc:	4b4c      	ldr	r3, [pc, #304]	@ (800e810 <tx_control+0xfb0>)
 800e6de:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800e6e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6e2:	2115      	movs	r1, #21
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f7f8 fba7 	bl	8006e38 <buildChksumBloq>
		asm ("nop");
 800e6ea:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800e6ec:	4b4b      	ldr	r3, [pc, #300]	@ (800e81c <tx_control+0xfbc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	0e1b      	lsrs	r3, r3, #24
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	4b46      	ldr	r3, [pc, #280]	@ (800e810 <tx_control+0xfb0>)
 800e6f6:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800e6f8:	4b48      	ldr	r3, [pc, #288]	@ (800e81c <tx_control+0xfbc>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	0c1b      	lsrs	r3, r3, #16
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	4b43      	ldr	r3, [pc, #268]	@ (800e810 <tx_control+0xfb0>)
 800e702:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800e704:	4b45      	ldr	r3, [pc, #276]	@ (800e81c <tx_control+0xfbc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	0a1b      	lsrs	r3, r3, #8
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	4b40      	ldr	r3, [pc, #256]	@ (800e810 <tx_control+0xfb0>)
 800e70e:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800e710:	4b42      	ldr	r3, [pc, #264]	@ (800e81c <tx_control+0xfbc>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	b2da      	uxtb	r2, r3
 800e716:	4b3e      	ldr	r3, [pc, #248]	@ (800e810 <tx_control+0xfb0>)
 800e718:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800e71a:	4b42      	ldr	r3, [pc, #264]	@ (800e824 <tx_control+0xfc4>)
 800e71c:	4a3c      	ldr	r2, [pc, #240]	@ (800e810 <tx_control+0xfb0>)
 800e71e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800e720:	4b41      	ldr	r3, [pc, #260]	@ (800e828 <tx_control+0xfc8>)
 800e722:	4a3b      	ldr	r2, [pc, #236]	@ (800e810 <tx_control+0xfb0>)
 800e724:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800e726:	4b41      	ldr	r3, [pc, #260]	@ (800e82c <tx_control+0xfcc>)
 800e728:	4a47      	ldr	r2, [pc, #284]	@ (800e848 <tx_control+0xfe8>)
 800e72a:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800e72c:	4b33      	ldr	r3, [pc, #204]	@ (800e7fc <tx_control+0xf9c>)
 800e72e:	2219      	movs	r2, #25
 800e730:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800e732:	4b35      	ldr	r3, [pc, #212]	@ (800e808 <tx_control+0xfa8>)
 800e734:	2201      	movs	r2, #1
 800e736:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800e738:	4b33      	ldr	r3, [pc, #204]	@ (800e808 <tx_control+0xfa8>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800e73e:	4b37      	ldr	r3, [pc, #220]	@ (800e81c <tx_control+0xfbc>)
 800e740:	2200      	movs	r2, #0
 800e742:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800e744:	4b30      	ldr	r3, [pc, #192]	@ (800e808 <tx_control+0xfa8>)
 800e746:	2201      	movs	r2, #1
 800e748:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800e74a:	4b3a      	ldr	r3, [pc, #232]	@ (800e834 <tx_control+0xfd4>)
 800e74c:	2255      	movs	r2, #85	@ 0x55
 800e74e:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800e750:	4b28      	ldr	r3, [pc, #160]	@ (800e7f4 <tx_control+0xf94>)
 800e752:	2200      	movs	r2, #0
 800e754:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800e756:	f001 f92e 	bl	800f9b6 <tx_control+0x2156>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800e75a:	4b2b      	ldr	r3, [pc, #172]	@ (800e808 <tx_control+0xfa8>)
 800e75c:	2201      	movs	r2, #1
 800e75e:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800e760:	4b26      	ldr	r3, [pc, #152]	@ (800e7fc <tx_control+0xf9c>)
 800e762:	2208      	movs	r2, #8
 800e764:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800e766:	4b39      	ldr	r3, [pc, #228]	@ (800e84c <tx_control+0xfec>)
 800e768:	2201      	movs	r2, #1
 800e76a:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800e76c:	4b38      	ldr	r3, [pc, #224]	@ (800e850 <tx_control+0xff0>)
 800e76e:	4a39      	ldr	r2, [pc, #228]	@ (800e854 <tx_control+0xff4>)
 800e770:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800e772:	4b39      	ldr	r3, [pc, #228]	@ (800e858 <tx_control+0xff8>)
 800e774:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800e776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e778:	3301      	adds	r3, #1
 800e77a:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800e77c:	4b37      	ldr	r3, [pc, #220]	@ (800e85c <tx_control+0xffc>)
 800e77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e780:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800e782:	4b37      	ldr	r3, [pc, #220]	@ (800e860 <tx_control+0x1000>)
 800e784:	2260      	movs	r2, #96	@ 0x60
 800e786:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800e788:	4b36      	ldr	r3, [pc, #216]	@ (800e864 <tx_control+0x1004>)
 800e78a:	881a      	ldrh	r2, [r3, #0]
 800e78c:	4b36      	ldr	r3, [pc, #216]	@ (800e868 <tx_control+0x1008>)
 800e78e:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800e790:	4b36      	ldr	r3, [pc, #216]	@ (800e86c <tx_control+0x100c>)
 800e792:	4a37      	ldr	r2, [pc, #220]	@ (800e870 <tx_control+0x1010>)
 800e794:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800e796:	f002 fa5f 	bl	8010c58 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800e79a:	4b19      	ldr	r3, [pc, #100]	@ (800e800 <tx_control+0xfa0>)
 800e79c:	227b      	movs	r2, #123	@ 0x7b
 800e79e:	5c9a      	ldrb	r2, [r3, r2]
 800e7a0:	4b18      	ldr	r3, [pc, #96]	@ (800e804 <tx_control+0xfa4>)
 800e7a2:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800e7a4:	4b16      	ldr	r3, [pc, #88]	@ (800e800 <tx_control+0xfa0>)
 800e7a6:	227c      	movs	r2, #124	@ 0x7c
 800e7a8:	5c9a      	ldrb	r2, [r3, r2]
 800e7aa:	4b16      	ldr	r3, [pc, #88]	@ (800e804 <tx_control+0xfa4>)
 800e7ac:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800e7ae:	4b15      	ldr	r3, [pc, #84]	@ (800e804 <tx_control+0xfa4>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800e7b4:	4b13      	ldr	r3, [pc, #76]	@ (800e804 <tx_control+0xfa4>)
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800e7ba:	4b12      	ldr	r3, [pc, #72]	@ (800e804 <tx_control+0xfa4>)
 800e7bc:	2205      	movs	r2, #5
 800e7be:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800e7c0:	4b10      	ldr	r3, [pc, #64]	@ (800e804 <tx_control+0xfa4>)
 800e7c2:	2240      	movs	r2, #64	@ 0x40
 800e7c4:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e804 <tx_control+0xfa4>)
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800e7cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e804 <tx_control+0xfa4>)
 800e7ce:	2209      	movs	r2, #9
 800e7d0:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800e7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e808 <tx_control+0xfa8>)
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800e7d8:	4b10      	ldr	r3, [pc, #64]	@ (800e81c <tx_control+0xfbc>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800e7de:	4b0a      	ldr	r3, [pc, #40]	@ (800e808 <tx_control+0xfa8>)
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800e7e4:	4b13      	ldr	r3, [pc, #76]	@ (800e834 <tx_control+0xfd4>)
 800e7e6:	2255      	movs	r2, #85	@ 0x55
 800e7e8:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800e7ea:	4b02      	ldr	r3, [pc, #8]	@ (800e7f4 <tx_control+0xf94>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800e7f0:	f001 f8e1 	bl	800f9b6 <tx_control+0x2156>
 800e7f4:	20000e34 	.word	0x20000e34
 800e7f8:	20000ef5 	.word	0x20000ef5
 800e7fc:	20000e40 	.word	0x20000e40
 800e800:	200000b8 	.word	0x200000b8
 800e804:	20000de8 	.word	0x20000de8
 800e808:	20000e2c 	.word	0x20000e2c
 800e80c:	20000b65 	.word	0x20000b65
 800e810:	20000fb8 	.word	0x20000fb8
 800e814:	20000dc0 	.word	0x20000dc0
 800e818:	20000dc2 	.word	0x20000dc2
 800e81c:	20000e44 	.word	0x20000e44
 800e820:	20000b64 	.word	0x20000b64
 800e824:	20000e24 	.word	0x20000e24
 800e828:	20000e1c 	.word	0x20000e1c
 800e82c:	20000e20 	.word	0x20000e20
 800e830:	20000fc8 	.word	0x20000fc8
 800e834:	20000e29 	.word	0x20000e29
 800e838:	20000994 	.word	0x20000994
 800e83c:	200010c1 	.word	0x200010c1
 800e840:	20000f60 	.word	0x20000f60
 800e844:	200010fc 	.word	0x200010fc
 800e848:	20000fd1 	.word	0x20000fd1
 800e84c:	20000e14 	.word	0x20000e14
 800e850:	20000e38 	.word	0x20000e38
 800e854:	0803c000 	.word	0x0803c000
 800e858:	0803efff 	.word	0x0803efff
 800e85c:	20000e3c 	.word	0x20000e3c
 800e860:	20000dad 	.word	0x20000dad
 800e864:	2000104a 	.word	0x2000104a
 800e868:	2000104e 	.word	0x2000104e
 800e86c:	20001050 	.word	0x20001050
 800e870:	0803f810 	.word	0x0803f810
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800e874:	4bcd      	ldr	r3, [pc, #820]	@ (800ebac <tx_control+0x134c>)
 800e876:	2201      	movs	r2, #1
 800e878:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800e87a:	4bcd      	ldr	r3, [pc, #820]	@ (800ebb0 <tx_control+0x1350>)
 800e87c:	2208      	movs	r2, #8
 800e87e:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800e880:	4bcc      	ldr	r3, [pc, #816]	@ (800ebb4 <tx_control+0x1354>)
 800e882:	2201      	movs	r2, #1
 800e884:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800e886:	4bcc      	ldr	r3, [pc, #816]	@ (800ebb8 <tx_control+0x1358>)
 800e888:	4acc      	ldr	r2, [pc, #816]	@ (800ebbc <tx_control+0x135c>)
 800e88a:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800e88c:	4bcc      	ldr	r3, [pc, #816]	@ (800ebc0 <tx_control+0x1360>)
 800e88e:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800e890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e892:	3301      	adds	r3, #1
 800e894:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800e896:	4bcb      	ldr	r3, [pc, #812]	@ (800ebc4 <tx_control+0x1364>)
 800e898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e89a:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800e89c:	4bca      	ldr	r3, [pc, #808]	@ (800ebc8 <tx_control+0x1368>)
 800e89e:	22a0      	movs	r2, #160	@ 0xa0
 800e8a0:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800e8a2:	4bca      	ldr	r3, [pc, #808]	@ (800ebcc <tx_control+0x136c>)
 800e8a4:	881a      	ldrh	r2, [r3, #0]
 800e8a6:	4bca      	ldr	r3, [pc, #808]	@ (800ebd0 <tx_control+0x1370>)
 800e8a8:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800e8aa:	4bca      	ldr	r3, [pc, #808]	@ (800ebd4 <tx_control+0x1374>)
 800e8ac:	4aca      	ldr	r2, [pc, #808]	@ (800ebd8 <tx_control+0x1378>)
 800e8ae:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800e8b0:	f002 f9d2 	bl	8010c58 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800e8b4:	4bc9      	ldr	r3, [pc, #804]	@ (800ebdc <tx_control+0x137c>)
 800e8b6:	227b      	movs	r2, #123	@ 0x7b
 800e8b8:	5c9a      	ldrb	r2, [r3, r2]
 800e8ba:	4bc9      	ldr	r3, [pc, #804]	@ (800ebe0 <tx_control+0x1380>)
 800e8bc:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800e8be:	4bc7      	ldr	r3, [pc, #796]	@ (800ebdc <tx_control+0x137c>)
 800e8c0:	227c      	movs	r2, #124	@ 0x7c
 800e8c2:	5c9a      	ldrb	r2, [r3, r2]
 800e8c4:	4bc6      	ldr	r3, [pc, #792]	@ (800ebe0 <tx_control+0x1380>)
 800e8c6:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e8c8:	4bc5      	ldr	r3, [pc, #788]	@ (800ebe0 <tx_control+0x1380>)
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800e8ce:	4bc4      	ldr	r3, [pc, #784]	@ (800ebe0 <tx_control+0x1380>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e8d4:	4bc2      	ldr	r3, [pc, #776]	@ (800ebe0 <tx_control+0x1380>)
 800e8d6:	2205      	movs	r2, #5
 800e8d8:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800e8da:	4bc1      	ldr	r3, [pc, #772]	@ (800ebe0 <tx_control+0x1380>)
 800e8dc:	22a0      	movs	r2, #160	@ 0xa0
 800e8de:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800e8e0:	4bbf      	ldr	r3, [pc, #764]	@ (800ebe0 <tx_control+0x1380>)
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800e8e6:	4bbe      	ldr	r3, [pc, #760]	@ (800ebe0 <tx_control+0x1380>)
 800e8e8:	220e      	movs	r2, #14
 800e8ea:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800e8ec:	4baf      	ldr	r3, [pc, #700]	@ (800ebac <tx_control+0x134c>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800e8f2:	4bbc      	ldr	r3, [pc, #752]	@ (800ebe4 <tx_control+0x1384>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800e8f8:	4bac      	ldr	r3, [pc, #688]	@ (800ebac <tx_control+0x134c>)
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e8fe:	4bba      	ldr	r3, [pc, #744]	@ (800ebe8 <tx_control+0x1388>)
 800e900:	2255      	movs	r2, #85	@ 0x55
 800e902:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800e904:	4bb9      	ldr	r3, [pc, #740]	@ (800ebec <tx_control+0x138c>)
 800e906:	2200      	movs	r2, #0
 800e908:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800e90a:	f001 f854 	bl	800f9b6 <tx_control+0x2156>
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800e90e:	4bb8      	ldr	r3, [pc, #736]	@ (800ebf0 <tx_control+0x1390>)
 800e910:	79db      	ldrb	r3, [r3, #7]
 800e912:	2201      	movs	r2, #1
 800e914:	4313      	orrs	r3, r2
 800e916:	b2da      	uxtb	r2, r3
 800e918:	4bb5      	ldr	r3, [pc, #724]	@ (800ebf0 <tx_control+0x1390>)
 800e91a:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800e91c:	4bb5      	ldr	r3, [pc, #724]	@ (800ebf4 <tx_control+0x1394>)
 800e91e:	785b      	ldrb	r3, [r3, #1]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <tx_control+0x10d2>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800e924:	4bb2      	ldr	r3, [pc, #712]	@ (800ebf0 <tx_control+0x1390>)
 800e926:	79db      	ldrb	r3, [r3, #7]
 800e928:	2202      	movs	r2, #2
 800e92a:	4313      	orrs	r3, r2
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	4bb0      	ldr	r3, [pc, #704]	@ (800ebf0 <tx_control+0x1390>)
 800e930:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800e932:	4bb1      	ldr	r3, [pc, #708]	@ (800ebf8 <tx_control+0x1398>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d006      	beq.n	800e948 <tx_control+0x10e8>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800e93a:	4bad      	ldr	r3, [pc, #692]	@ (800ebf0 <tx_control+0x1390>)
 800e93c:	79db      	ldrb	r3, [r3, #7]
 800e93e:	2204      	movs	r2, #4
 800e940:	4313      	orrs	r3, r2
 800e942:	b2da      	uxtb	r2, r3
 800e944:	4baa      	ldr	r3, [pc, #680]	@ (800ebf0 <tx_control+0x1390>)
 800e946:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800e948:	4bab      	ldr	r3, [pc, #684]	@ (800ebf8 <tx_control+0x1398>)
 800e94a:	785b      	ldrb	r3, [r3, #1]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d006      	beq.n	800e95e <tx_control+0x10fe>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800e950:	4ba7      	ldr	r3, [pc, #668]	@ (800ebf0 <tx_control+0x1390>)
 800e952:	79db      	ldrb	r3, [r3, #7]
 800e954:	2208      	movs	r2, #8
 800e956:	4313      	orrs	r3, r2
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	4ba5      	ldr	r3, [pc, #660]	@ (800ebf0 <tx_control+0x1390>)
 800e95c:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800e95e:	4ba6      	ldr	r3, [pc, #664]	@ (800ebf8 <tx_control+0x1398>)
 800e960:	789b      	ldrb	r3, [r3, #2]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d006      	beq.n	800e974 <tx_control+0x1114>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800e966:	4ba2      	ldr	r3, [pc, #648]	@ (800ebf0 <tx_control+0x1390>)
 800e968:	79db      	ldrb	r3, [r3, #7]
 800e96a:	2210      	movs	r2, #16
 800e96c:	4313      	orrs	r3, r2
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	4b9f      	ldr	r3, [pc, #636]	@ (800ebf0 <tx_control+0x1390>)
 800e972:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800e974:	4ba1      	ldr	r3, [pc, #644]	@ (800ebfc <tx_control+0x139c>)
 800e976:	78db      	ldrb	r3, [r3, #3]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d006      	beq.n	800e98a <tx_control+0x112a>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800e97c:	4b9c      	ldr	r3, [pc, #624]	@ (800ebf0 <tx_control+0x1390>)
 800e97e:	79db      	ldrb	r3, [r3, #7]
 800e980:	2220      	movs	r2, #32
 800e982:	4313      	orrs	r3, r2
 800e984:	b2da      	uxtb	r2, r3
 800e986:	4b9a      	ldr	r3, [pc, #616]	@ (800ebf0 <tx_control+0x1390>)
 800e988:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800e98a:	4b9d      	ldr	r3, [pc, #628]	@ (800ec00 <tx_control+0x13a0>)
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d006      	beq.n	800e9a0 <tx_control+0x1140>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800e992:	4b97      	ldr	r3, [pc, #604]	@ (800ebf0 <tx_control+0x1390>)
 800e994:	79db      	ldrb	r3, [r3, #7]
 800e996:	2240      	movs	r2, #64	@ 0x40
 800e998:	4313      	orrs	r3, r2
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	4b94      	ldr	r3, [pc, #592]	@ (800ebf0 <tx_control+0x1390>)
 800e99e:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800e9a0:	4b94      	ldr	r3, [pc, #592]	@ (800ebf4 <tx_control+0x1394>)
 800e9a2:	789b      	ldrb	r3, [r3, #2]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d007      	beq.n	800e9b8 <tx_control+0x1158>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800e9a8:	4b91      	ldr	r3, [pc, #580]	@ (800ebf0 <tx_control+0x1390>)
 800e9aa:	79db      	ldrb	r3, [r3, #7]
 800e9ac:	2280      	movs	r2, #128	@ 0x80
 800e9ae:	4252      	negs	r2, r2
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	4b8e      	ldr	r3, [pc, #568]	@ (800ebf0 <tx_control+0x1390>)
 800e9b6:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800e9b8:	4b8d      	ldr	r3, [pc, #564]	@ (800ebf0 <tx_control+0x1390>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800e9be:	2300      	movs	r3, #0
 800e9c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e9c2:	e011      	b.n	800e9e8 <tx_control+0x1188>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800e9c4:	4b8a      	ldr	r3, [pc, #552]	@ (800ebf0 <tx_control+0x1390>)
 800e9c6:	7a1a      	ldrb	r2, [r3, #8]
 800e9c8:	498e      	ldr	r1, [pc, #568]	@ (800ec04 <tx_control+0x13a4>)
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9cc:	18cb      	adds	r3, r1, r3
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	0019      	movs	r1, r3
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d4:	4099      	lsls	r1, r3
 800e9d6:	000b      	movs	r3, r1
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	4b84      	ldr	r3, [pc, #528]	@ (800ebf0 <tx_control+0x1390>)
 800e9e0:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800e9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ea:	2b07      	cmp	r3, #7
 800e9ec:	ddea      	ble.n	800e9c4 <tx_control+0x1164>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800e9ee:	4b80      	ldr	r3, [pc, #512]	@ (800ebf0 <tx_control+0x1390>)
 800e9f0:	7a1b      	ldrb	r3, [r3, #8]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4393      	bics	r3, r2
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	4b7d      	ldr	r3, [pc, #500]	@ (800ebf0 <tx_control+0x1390>)
 800e9fa:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800e9fc:	2337      	movs	r3, #55	@ 0x37
 800e9fe:	18fb      	adds	r3, r7, r3
 800ea00:	2200      	movs	r2, #0
 800ea02:	701a      	strb	r2, [r3, #0]
 800ea04:	e017      	b.n	800ea36 <tx_control+0x11d6>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800ea06:	4b7a      	ldr	r3, [pc, #488]	@ (800ebf0 <tx_control+0x1390>)
 800ea08:	7a5b      	ldrb	r3, [r3, #9]
 800ea0a:	b25a      	sxtb	r2, r3
 800ea0c:	2037      	movs	r0, #55	@ 0x37
 800ea0e:	183b      	adds	r3, r7, r0
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	497d      	ldr	r1, [pc, #500]	@ (800ec08 <tx_control+0x13a8>)
 800ea14:	5ccb      	ldrb	r3, [r1, r3]
 800ea16:	0019      	movs	r1, r3
 800ea18:	183b      	adds	r3, r7, r0
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	4099      	lsls	r1, r3
 800ea1e:	000b      	movs	r3, r1
 800ea20:	b25b      	sxtb	r3, r3
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b25b      	sxtb	r3, r3
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	4b71      	ldr	r3, [pc, #452]	@ (800ebf0 <tx_control+0x1390>)
 800ea2a:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800ea2c:	183b      	adds	r3, r7, r0
 800ea2e:	781a      	ldrb	r2, [r3, #0]
 800ea30:	183b      	adds	r3, r7, r0
 800ea32:	3201      	adds	r2, #1
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	2337      	movs	r3, #55	@ 0x37
 800ea38:	18fb      	adds	r3, r7, r3
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	2b07      	cmp	r3, #7
 800ea3e:	d9e2      	bls.n	800ea06 <tx_control+0x11a6>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800ea40:	4b5b      	ldr	r3, [pc, #364]	@ (800ebb0 <tx_control+0x1350>)
 800ea42:	220a      	movs	r2, #10
 800ea44:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800ea46:	4b65      	ldr	r3, [pc, #404]	@ (800ebdc <tx_control+0x137c>)
 800ea48:	227b      	movs	r2, #123	@ 0x7b
 800ea4a:	5c9a      	ldrb	r2, [r3, r2]
 800ea4c:	4b64      	ldr	r3, [pc, #400]	@ (800ebe0 <tx_control+0x1380>)
 800ea4e:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800ea50:	4b62      	ldr	r3, [pc, #392]	@ (800ebdc <tx_control+0x137c>)
 800ea52:	227c      	movs	r2, #124	@ 0x7c
 800ea54:	5c9a      	ldrb	r2, [r3, r2]
 800ea56:	4b62      	ldr	r3, [pc, #392]	@ (800ebe0 <tx_control+0x1380>)
 800ea58:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800ea5a:	4b61      	ldr	r3, [pc, #388]	@ (800ebe0 <tx_control+0x1380>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800ea60:	4b5f      	ldr	r3, [pc, #380]	@ (800ebe0 <tx_control+0x1380>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800ea66:	4b5e      	ldr	r3, [pc, #376]	@ (800ebe0 <tx_control+0x1380>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800ea6c:	4b5c      	ldr	r3, [pc, #368]	@ (800ebe0 <tx_control+0x1380>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800ea72:	4b5b      	ldr	r3, [pc, #364]	@ (800ebe0 <tx_control+0x1380>)
 800ea74:	2203      	movs	r2, #3
 800ea76:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800ea78:	4b4d      	ldr	r3, [pc, #308]	@ (800ebb0 <tx_control+0x1350>)
 800ea7a:	781a      	ldrb	r2, [r3, #0]
 800ea7c:	4b58      	ldr	r3, [pc, #352]	@ (800ebe0 <tx_control+0x1380>)
 800ea7e:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800ea80:	4b4a      	ldr	r3, [pc, #296]	@ (800ebac <tx_control+0x134c>)
 800ea82:	2201      	movs	r2, #1
 800ea84:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800ea86:	4b56      	ldr	r3, [pc, #344]	@ (800ebe0 <tx_control+0x1380>)
 800ea88:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800ea8a:	4b60      	ldr	r3, [pc, #384]	@ (800ec0c <tx_control+0x13ac>)
 800ea8c:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800ea8e:	2336      	movs	r3, #54	@ 0x36
 800ea90:	18fb      	adds	r3, r7, r3
 800ea92:	2200      	movs	r2, #0
 800ea94:	701a      	strb	r2, [r3, #0]
 800ea96:	e00f      	b.n	800eab8 <tx_control+0x1258>
			point_Y[i] = point_X[i];
 800ea98:	2036      	movs	r0, #54	@ 0x36
 800ea9a:	183b      	adds	r3, r7, r0
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaa0:	18d2      	adds	r2, r2, r3
 800eaa2:	183b      	adds	r3, r7, r0
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaa8:	18cb      	adds	r3, r1, r3
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800eaae:	183b      	adds	r3, r7, r0
 800eab0:	781a      	ldrb	r2, [r3, #0]
 800eab2:	183b      	adds	r3, r7, r0
 800eab4:	3201      	adds	r2, #1
 800eab6:	701a      	strb	r2, [r3, #0]
 800eab8:	2336      	movs	r3, #54	@ 0x36
 800eaba:	18fb      	adds	r3, r7, r3
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	2b07      	cmp	r3, #7
 800eac0:	d9ea      	bls.n	800ea98 <tx_control+0x1238>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800eac2:	4b4b      	ldr	r3, [pc, #300]	@ (800ebf0 <tx_control+0x1390>)
 800eac4:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800eac6:	4b52      	ldr	r3, [pc, #328]	@ (800ec10 <tx_control+0x13b0>)
 800eac8:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800eaca:	2335      	movs	r3, #53	@ 0x35
 800eacc:	18fb      	adds	r3, r7, r3
 800eace:	2200      	movs	r2, #0
 800ead0:	701a      	strb	r2, [r3, #0]
 800ead2:	e00f      	b.n	800eaf4 <tx_control+0x1294>
			point_Y[i] = point_X[i];
 800ead4:	2035      	movs	r0, #53	@ 0x35
 800ead6:	183b      	adds	r3, r7, r0
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eadc:	18d2      	adds	r2, r2, r3
 800eade:	183b      	adds	r3, r7, r0
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eae4:	18cb      	adds	r3, r1, r3
 800eae6:	7812      	ldrb	r2, [r2, #0]
 800eae8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800eaea:	183b      	adds	r3, r7, r0
 800eaec:	781a      	ldrb	r2, [r3, #0]
 800eaee:	183b      	adds	r3, r7, r0
 800eaf0:	3201      	adds	r2, #1
 800eaf2:	701a      	strb	r2, [r3, #0]
 800eaf4:	2335      	movs	r3, #53	@ 0x35
 800eaf6:	18fb      	adds	r3, r7, r3
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	2b09      	cmp	r3, #9
 800eafc:	d9ea      	bls.n	800ead4 <tx_control+0x1274>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800eafe:	4b39      	ldr	r3, [pc, #228]	@ (800ebe4 <tx_control+0x1384>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800eb04:	4b41      	ldr	r3, [pc, #260]	@ (800ec0c <tx_control+0x13ac>)
 800eb06:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800eb08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb0a:	2112      	movs	r1, #18
 800eb0c:	0018      	movs	r0, r3
 800eb0e:	f7f8 f993 	bl	8006e38 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800eb12:	4b34      	ldr	r3, [pc, #208]	@ (800ebe4 <tx_control+0x1384>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	0e1b      	lsrs	r3, r3, #24
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	4b3c      	ldr	r3, [pc, #240]	@ (800ec0c <tx_control+0x13ac>)
 800eb1c:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800eb1e:	4b31      	ldr	r3, [pc, #196]	@ (800ebe4 <tx_control+0x1384>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	0c1b      	lsrs	r3, r3, #16
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	4b39      	ldr	r3, [pc, #228]	@ (800ec0c <tx_control+0x13ac>)
 800eb28:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800eb2a:	4b2e      	ldr	r3, [pc, #184]	@ (800ebe4 <tx_control+0x1384>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	0a1b      	lsrs	r3, r3, #8
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	4b36      	ldr	r3, [pc, #216]	@ (800ec0c <tx_control+0x13ac>)
 800eb34:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800eb36:	4b2b      	ldr	r3, [pc, #172]	@ (800ebe4 <tx_control+0x1384>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	4b33      	ldr	r3, [pc, #204]	@ (800ec0c <tx_control+0x13ac>)
 800eb3e:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800eb40:	4b34      	ldr	r3, [pc, #208]	@ (800ec14 <tx_control+0x13b4>)
 800eb42:	4a32      	ldr	r2, [pc, #200]	@ (800ec0c <tx_control+0x13ac>)
 800eb44:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800eb46:	4b34      	ldr	r3, [pc, #208]	@ (800ec18 <tx_control+0x13b8>)
 800eb48:	4a30      	ldr	r2, [pc, #192]	@ (800ec0c <tx_control+0x13ac>)
 800eb4a:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800eb4c:	4b33      	ldr	r3, [pc, #204]	@ (800ec1c <tx_control+0x13bc>)
 800eb4e:	4a34      	ldr	r2, [pc, #208]	@ (800ec20 <tx_control+0x13c0>)
 800eb50:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800eb52:	4b17      	ldr	r3, [pc, #92]	@ (800ebb0 <tx_control+0x1350>)
 800eb54:	2216      	movs	r2, #22
 800eb56:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800eb58:	4b14      	ldr	r3, [pc, #80]	@ (800ebac <tx_control+0x134c>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800eb5e:	4b13      	ldr	r3, [pc, #76]	@ (800ebac <tx_control+0x134c>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800eb64:	4b20      	ldr	r3, [pc, #128]	@ (800ebe8 <tx_control+0x1388>)
 800eb66:	2255      	movs	r2, #85	@ 0x55
 800eb68:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800eb6a:	4b20      	ldr	r3, [pc, #128]	@ (800ebec <tx_control+0x138c>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800eb70:	f000 ff21 	bl	800f9b6 <tx_control+0x2156>
			point_Y[i] = point_X[i];
 800eb74:	2034      	movs	r0, #52	@ 0x34
 800eb76:	183b      	adds	r3, r7, r0
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb7c:	18d2      	adds	r2, r2, r3
 800eb7e:	183b      	adds	r3, r7, r0
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb84:	18cb      	adds	r3, r1, r3
 800eb86:	7812      	ldrb	r2, [r2, #0]
 800eb88:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800eb8a:	183b      	adds	r3, r7, r0
 800eb8c:	781a      	ldrb	r2, [r3, #0]
 800eb8e:	183b      	adds	r3, r7, r0
 800eb90:	3201      	adds	r2, #1
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	2334      	movs	r3, #52	@ 0x34
 800eb96:	18fb      	adds	r3, r7, r3
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b07      	cmp	r3, #7
 800eb9c:	d9ea      	bls.n	800eb74 <tx_control+0x1314>
		point_Y = &bufferTxControl[8];	 //
 800eb9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ec10 <tx_control+0x13b0>)
 800eba0:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800eba2:	2333      	movs	r3, #51	@ 0x33
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	2200      	movs	r2, #0
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	e050      	b.n	800ec4e <tx_control+0x13ee>
 800ebac:	20000e2c 	.word	0x20000e2c
 800ebb0:	20000e40 	.word	0x20000e40
 800ebb4:	20000e14 	.word	0x20000e14
 800ebb8:	20000e38 	.word	0x20000e38
 800ebbc:	08037000 	.word	0x08037000
 800ebc0:	0803bfff 	.word	0x0803bfff
 800ebc4:	20000e3c 	.word	0x20000e3c
 800ebc8:	20000dad 	.word	0x20000dad
 800ebcc:	2000104c 	.word	0x2000104c
 800ebd0:	2000104e 	.word	0x2000104e
 800ebd4:	20001050 	.word	0x20001050
 800ebd8:	0803f812 	.word	0x0803f812
 800ebdc:	200000b8 	.word	0x200000b8
 800ebe0:	20000de8 	.word	0x20000de8
 800ebe4:	20000e44 	.word	0x20000e44
 800ebe8:	20000e29 	.word	0x20000e29
 800ebec:	20000e34 	.word	0x20000e34
 800ebf0:	20000e08 	.word	0x20000e08
 800ebf4:	20000bb4 	.word	0x20000bb4
 800ebf8:	20000c4c 	.word	0x20000c4c
 800ebfc:	20000b88 	.word	0x20000b88
 800ec00:	20000bf0 	.word	0x20000bf0
 800ec04:	20000b90 	.word	0x20000b90
 800ec08:	20000b98 	.word	0x20000b98
 800ec0c:	20000fb8 	.word	0x20000fb8
 800ec10:	20000fc0 	.word	0x20000fc0
 800ec14:	20000e24 	.word	0x20000e24
 800ec18:	20000e1c 	.word	0x20000e1c
 800ec1c:	20000e20 	.word	0x20000e20
 800ec20:	20000fce 	.word	0x20000fce
			point_Y[i] = findLastValue((uint32_t) &eePlantilla[i]);
 800ec24:	2433      	movs	r4, #51	@ 0x33
 800ec26:	193b      	adds	r3, r7, r4
 800ec28:	781a      	ldrb	r2, [r3, #0]
 800ec2a:	4be7      	ldr	r3, [pc, #924]	@ (800efc8 <tx_control+0x1768>)
 800ec2c:	18d3      	adds	r3, r2, r3
 800ec2e:	0018      	movs	r0, r3
 800ec30:	f7f3 fff4 	bl	8002c1c <findLastValue>
 800ec34:	0001      	movs	r1, r0
 800ec36:	0020      	movs	r0, r4
 800ec38:	183b      	adds	r3, r7, r0
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec3e:	18d3      	adds	r3, r2, r3
 800ec40:	b2ca      	uxtb	r2, r1
 800ec42:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800ec44:	183b      	adds	r3, r7, r0
 800ec46:	781a      	ldrb	r2, [r3, #0]
 800ec48:	183b      	adds	r3, r7, r0
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	2333      	movs	r3, #51	@ 0x33
 800ec50:	18fb      	adds	r3, r7, r3
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	b25b      	sxtb	r3, r3
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dae4      	bge.n	800ec24 <tx_control+0x13c4>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ec5a:	4bdc      	ldr	r3, [pc, #880]	@ (800efcc <tx_control+0x176c>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800ec60:	4bdb      	ldr	r3, [pc, #876]	@ (800efd0 <tx_control+0x1770>)
 800ec62:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800ec64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec66:	2188      	movs	r1, #136	@ 0x88
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f7f8 f8e5 	bl	8006e38 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800ec6e:	4bd7      	ldr	r3, [pc, #860]	@ (800efcc <tx_control+0x176c>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	0e1b      	lsrs	r3, r3, #24
 800ec74:	b2d9      	uxtb	r1, r3
 800ec76:	4bd6      	ldr	r3, [pc, #856]	@ (800efd0 <tx_control+0x1770>)
 800ec78:	2288      	movs	r2, #136	@ 0x88
 800ec7a:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800ec7c:	4bd3      	ldr	r3, [pc, #844]	@ (800efcc <tx_control+0x176c>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	0c1b      	lsrs	r3, r3, #16
 800ec82:	b2d9      	uxtb	r1, r3
 800ec84:	4bd2      	ldr	r3, [pc, #840]	@ (800efd0 <tx_control+0x1770>)
 800ec86:	2289      	movs	r2, #137	@ 0x89
 800ec88:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800ec8a:	4bd0      	ldr	r3, [pc, #832]	@ (800efcc <tx_control+0x176c>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	0a1b      	lsrs	r3, r3, #8
 800ec90:	b2d9      	uxtb	r1, r3
 800ec92:	4bcf      	ldr	r3, [pc, #828]	@ (800efd0 <tx_control+0x1770>)
 800ec94:	228a      	movs	r2, #138	@ 0x8a
 800ec96:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800ec98:	4bcc      	ldr	r3, [pc, #816]	@ (800efcc <tx_control+0x176c>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	b2d9      	uxtb	r1, r3
 800ec9e:	4bcc      	ldr	r3, [pc, #816]	@ (800efd0 <tx_control+0x1770>)
 800eca0:	228b      	movs	r2, #139	@ 0x8b
 800eca2:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800eca4:	4bcb      	ldr	r3, [pc, #812]	@ (800efd4 <tx_control+0x1774>)
 800eca6:	4aca      	ldr	r2, [pc, #808]	@ (800efd0 <tx_control+0x1770>)
 800eca8:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800ecaa:	4bcb      	ldr	r3, [pc, #812]	@ (800efd8 <tx_control+0x1778>)
 800ecac:	4ac8      	ldr	r2, [pc, #800]	@ (800efd0 <tx_control+0x1770>)
 800ecae:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800ecb0:	4bca      	ldr	r3, [pc, #808]	@ (800efdc <tx_control+0x177c>)
 800ecb2:	4acb      	ldr	r2, [pc, #812]	@ (800efe0 <tx_control+0x1780>)
 800ecb4:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800ecb6:	4bcb      	ldr	r3, [pc, #812]	@ (800efe4 <tx_control+0x1784>)
 800ecb8:	228c      	movs	r2, #140	@ 0x8c
 800ecba:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800ecbc:	4bca      	ldr	r3, [pc, #808]	@ (800efe8 <tx_control+0x1788>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800ecc2:	4bc9      	ldr	r3, [pc, #804]	@ (800efe8 <tx_control+0x1788>)
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800ecc8:	4bc8      	ldr	r3, [pc, #800]	@ (800efec <tx_control+0x178c>)
 800ecca:	2255      	movs	r2, #85	@ 0x55
 800eccc:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800ecce:	4bc8      	ldr	r3, [pc, #800]	@ (800eff0 <tx_control+0x1790>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800ecd4:	f000 fe6f 	bl	800f9b6 <tx_control+0x2156>
				goto 	verifica_version2;		//jreq	verifica_version2
 800ecd8:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == findLastValue((uint32_t) &eePlantilla[eeversion2])){
 800ecda:	4bc6      	ldr	r3, [pc, #792]	@ (800eff4 <tx_control+0x1794>)
 800ecdc:	227e      	movs	r2, #126	@ 0x7e
 800ecde:	5c9b      	ldrb	r3, [r3, r2]
 800ece0:	001c      	movs	r4, r3
 800ece2:	4bc5      	ldr	r3, [pc, #788]	@ (800eff8 <tx_control+0x1798>)
 800ece4:	0018      	movs	r0, r3
 800ece6:	f7f3 ff99 	bl	8002c1c <findLastValue>
 800ecea:	0003      	movs	r3, r0
 800ecec:	429c      	cmp	r4, r3
 800ecee:	d159      	bne.n	800eda4 <tx_control+0x1544>
				goto 	verifica_version3;		//jreq	verifica_version3
 800ecf0:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800ecf2:	4bc0      	ldr	r3, [pc, #768]	@ (800eff4 <tx_control+0x1794>)
 800ecf4:	789b      	ldrb	r3, [r3, #2]
 800ecf6:	2baa      	cmp	r3, #170	@ 0xaa
 800ecf8:	d156      	bne.n	800eda8 <tx_control+0x1548>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800ecfa:	4bbe      	ldr	r3, [pc, #760]	@ (800eff4 <tx_control+0x1794>)
 800ecfc:	2243      	movs	r2, #67	@ 0x43
 800ecfe:	5c9b      	ldrb	r3, [r3, r2]
 800ed00:	2b66      	cmp	r3, #102	@ 0x66
 800ed02:	d153      	bne.n	800edac <tx_control+0x154c>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800ed04:	4bbb      	ldr	r3, [pc, #748]	@ (800eff4 <tx_control+0x1794>)
 800ed06:	2281      	movs	r2, #129	@ 0x81
 800ed08:	5c9b      	ldrb	r3, [r3, r2]
 800ed0a:	2bcc      	cmp	r3, #204	@ 0xcc
 800ed0c:	d150      	bne.n	800edb0 <tx_control+0x1550>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ed0e:	4baf      	ldr	r3, [pc, #700]	@ (800efcc <tx_control+0x176c>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800ed14:	4bb7      	ldr	r3, [pc, #732]	@ (800eff4 <tx_control+0x1794>)
 800ed16:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800ed18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed1a:	2182      	movs	r1, #130	@ 0x82
 800ed1c:	0018      	movs	r0, r3
 800ed1e:	f7f8 f88b 	bl	8006e38 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800ed26:	4bb3      	ldr	r3, [pc, #716]	@ (800eff4 <tx_control+0x1794>)
 800ed28:	2282      	movs	r2, #130	@ 0x82
 800ed2a:	5c9b      	ldrb	r3, [r3, r2]
 800ed2c:	061b      	lsls	r3, r3, #24
 800ed2e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800ed30:	4bb0      	ldr	r3, [pc, #704]	@ (800eff4 <tx_control+0x1794>)
 800ed32:	2283      	movs	r2, #131	@ 0x83
 800ed34:	5c9b      	ldrb	r3, [r3, r2]
 800ed36:	041b      	lsls	r3, r3, #16
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	18d3      	adds	r3, r2, r3
 800ed3c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800ed3e:	4bad      	ldr	r3, [pc, #692]	@ (800eff4 <tx_control+0x1794>)
 800ed40:	2284      	movs	r2, #132	@ 0x84
 800ed42:	5c9b      	ldrb	r3, [r3, r2]
 800ed44:	021b      	lsls	r3, r3, #8
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	18d3      	adds	r3, r2, r3
 800ed4a:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800ed4c:	4ba9      	ldr	r3, [pc, #676]	@ (800eff4 <tx_control+0x1794>)
 800ed4e:	2285      	movs	r2, #133	@ 0x85
 800ed50:	5c9b      	ldrb	r3, [r3, r2]
 800ed52:	001a      	movs	r2, r3
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	189b      	adds	r3, r3, r2
 800ed58:	60bb      	str	r3, [r7, #8]
			if (chksum_32_HW_LW != chksum_to_compare){
 800ed5a:	4b9c      	ldr	r3, [pc, #624]	@ (800efcc <tx_control+0x176c>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d127      	bne.n	800edb4 <tx_control+0x1554>
write_param:
 800ed64:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800ed66:	4ba5      	ldr	r3, [pc, #660]	@ (800effc <tx_control+0x179c>)
 800ed68:	2255      	movs	r2, #85	@ 0x55
 800ed6a:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800ed6c:	4ba1      	ldr	r3, [pc, #644]	@ (800eff4 <tx_control+0x1794>)
 800ed6e:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800ed70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed72:	3301      	adds	r3, #1
 800ed74:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800ed76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed78:	3301      	adds	r3, #1
 800ed7a:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800ed7c:	4ba0      	ldr	r3, [pc, #640]	@ (800f000 <tx_control+0x17a0>)
 800ed7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed80:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800ed82:	4ba0      	ldr	r3, [pc, #640]	@ (800f004 <tx_control+0x17a4>)
 800ed84:	4a90      	ldr	r2, [pc, #576]	@ (800efc8 <tx_control+0x1768>)
 800ed86:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800ed88:	f7f8 f8dc 	bl	8006f44 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800ed8c:	4b9e      	ldr	r3, [pc, #632]	@ (800f008 <tx_control+0x17a8>)
 800ed8e:	22f1      	movs	r2, #241	@ 0xf1
 800ed90:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ed92:	4b9d      	ldr	r3, [pc, #628]	@ (800f008 <tx_control+0x17a8>)
 800ed94:	223d      	movs	r2, #61	@ 0x3d
 800ed96:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800ed98:	4b93      	ldr	r3, [pc, #588]	@ (800efe8 <tx_control+0x1788>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800ed9e:	e010      	b.n	800edc2 <tx_control+0x1562>
			goto	no_writeParam;				//jp		no_writeParam
 800eda0:	46c0      	nop			@ (mov r8, r8)
 800eda2:	e008      	b.n	800edb6 <tx_control+0x1556>
			goto	no_writeParam;				//jp		no_writeParam
 800eda4:	46c0      	nop			@ (mov r8, r8)
 800eda6:	e006      	b.n	800edb6 <tx_control+0x1556>
				goto	no_writeParam;			//jrne	no_writeParam
 800eda8:	46c0      	nop			@ (mov r8, r8)
 800edaa:	e004      	b.n	800edb6 <tx_control+0x1556>
				goto	no_writeParam;			//jrne	no_writeParam
 800edac:	46c0      	nop			@ (mov r8, r8)
 800edae:	e002      	b.n	800edb6 <tx_control+0x1556>
				goto	no_writeParam;			//jrne	no_writeParam
 800edb0:	46c0      	nop			@ (mov r8, r8)
 800edb2:	e000      	b.n	800edb6 <tx_control+0x1556>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800edb4:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800edb6:	4b94      	ldr	r3, [pc, #592]	@ (800f008 <tx_control+0x17a8>)
 800edb8:	22f1      	movs	r2, #241	@ 0xf1
 800edba:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800edbc:	4b92      	ldr	r3, [pc, #584]	@ (800f008 <tx_control+0x17a8>)
 800edbe:	223e      	movs	r2, #62	@ 0x3e
 800edc0:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800edc2:	4b84      	ldr	r3, [pc, #528]	@ (800efd4 <tx_control+0x1774>)
 800edc4:	4a90      	ldr	r2, [pc, #576]	@ (800f008 <tx_control+0x17a8>)
 800edc6:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800edc8:	4b83      	ldr	r3, [pc, #524]	@ (800efd8 <tx_control+0x1778>)
 800edca:	4a8f      	ldr	r2, [pc, #572]	@ (800f008 <tx_control+0x17a8>)
 800edcc:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800edce:	4b83      	ldr	r3, [pc, #524]	@ (800efdc <tx_control+0x177c>)
 800edd0:	4a8e      	ldr	r2, [pc, #568]	@ (800f00c <tx_control+0x17ac>)
 800edd2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800edd4:	4b83      	ldr	r3, [pc, #524]	@ (800efe4 <tx_control+0x1784>)
 800edd6:	2202      	movs	r2, #2
 800edd8:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800edda:	4b83      	ldr	r3, [pc, #524]	@ (800efe8 <tx_control+0x1788>)
 800eddc:	2201      	movs	r2, #1
 800edde:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800ede0:	4b82      	ldr	r3, [pc, #520]	@ (800efec <tx_control+0x178c>)
 800ede2:	2255      	movs	r2, #85	@ 0x55
 800ede4:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800ede6:	4b82      	ldr	r3, [pc, #520]	@ (800eff0 <tx_control+0x1790>)
 800ede8:	2200      	movs	r2, #0
 800edea:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800edec:	f000 fde3 	bl	800f9b6 <tx_control+0x2156>
				goto rx_firmware01;
 800edf0:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800edf2:	4b87      	ldr	r3, [pc, #540]	@ (800f010 <tx_control+0x17b0>)
 800edf4:	785b      	ldrb	r3, [r3, #1]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d133      	bne.n	800ee62 <tx_control+0x1602>
rx_numBloqFirm:
 800edfa:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800edfc:	4b7c      	ldr	r3, [pc, #496]	@ (800eff0 <tx_control+0x1790>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2b49      	cmp	r3, #73	@ 0x49
 800ee02:	d000      	beq.n	800ee06 <tx_control+0x15a6>
 800ee04:	e192      	b.n	800f12c <tx_control+0x18cc>
				goto rx_numBloqFirm_01;
 800ee06:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = RxBuffer_Ble[2];
 800ee08:	4b7a      	ldr	r3, [pc, #488]	@ (800eff4 <tx_control+0x1794>)
 800ee0a:	789a      	ldrb	r2, [r3, #2]
 800ee0c:	4b81      	ldr	r3, [pc, #516]	@ (800f014 <tx_control+0x17b4>)
 800ee0e:	701a      	strb	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800ee10:	4b81      	ldr	r3, [pc, #516]	@ (800f018 <tx_control+0x17b8>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800ee16:	4b81      	ldr	r3, [pc, #516]	@ (800f01c <tx_control+0x17bc>)
 800ee18:	22f1      	movs	r2, #241	@ 0xf1
 800ee1a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800ee1c:	4b7f      	ldr	r3, [pc, #508]	@ (800f01c <tx_control+0x17bc>)
 800ee1e:	2207      	movs	r2, #7
 800ee20:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800ee22:	4b7b      	ldr	r3, [pc, #492]	@ (800f010 <tx_control+0x17b0>)
 800ee24:	2201      	movs	r2, #1
 800ee26:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800ee28:	4b7d      	ldr	r3, [pc, #500]	@ (800f020 <tx_control+0x17c0>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800ee2e:	4b69      	ldr	r3, [pc, #420]	@ (800efd4 <tx_control+0x1774>)
 800ee30:	4a7a      	ldr	r2, [pc, #488]	@ (800f01c <tx_control+0x17bc>)
 800ee32:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800ee34:	4b68      	ldr	r3, [pc, #416]	@ (800efd8 <tx_control+0x1778>)
 800ee36:	4a79      	ldr	r2, [pc, #484]	@ (800f01c <tx_control+0x17bc>)
 800ee38:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800ee3a:	4b68      	ldr	r3, [pc, #416]	@ (800efdc <tx_control+0x177c>)
 800ee3c:	4a79      	ldr	r2, [pc, #484]	@ (800f024 <tx_control+0x17c4>)
 800ee3e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800ee40:	4b68      	ldr	r3, [pc, #416]	@ (800efe4 <tx_control+0x1784>)
 800ee42:	2202      	movs	r2, #2
 800ee44:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800ee46:	4b68      	ldr	r3, [pc, #416]	@ (800efe8 <tx_control+0x1788>)
 800ee48:	2201      	movs	r2, #1
 800ee4a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ee4c:	4b67      	ldr	r3, [pc, #412]	@ (800efec <tx_control+0x178c>)
 800ee4e:	2255      	movs	r2, #85	@ 0x55
 800ee50:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800ee52:	4b67      	ldr	r3, [pc, #412]	@ (800eff0 <tx_control+0x1790>)
 800ee54:	2200      	movs	r2, #0
 800ee56:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;							// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800ee58:	4b73      	ldr	r3, [pc, #460]	@ (800f028 <tx_control+0x17c8>)
 800ee5a:	2205      	movs	r2, #5
 800ee5c:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800ee5e:	f000 fdaa 	bl	800f9b6 <tx_control+0x2156>
				goto rxBloqFirm;
 800ee62:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800ee64:	4b6a      	ldr	r3, [pc, #424]	@ (800f010 <tx_control+0x17b0>)
 800ee66:	789b      	ldrb	r3, [r3, #2]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <tx_control+0x1610>
 800ee6c:	f000 fda2 	bl	800f9b4 <tx_control+0x2154>
				goto rxBloqFirm_01;
 800ee70:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800ee72:	4b67      	ldr	r3, [pc, #412]	@ (800f010 <tx_control+0x17b0>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ee78:	4b54      	ldr	r3, [pc, #336]	@ (800efcc <tx_control+0x176c>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800ee7e:	4b6b      	ldr	r3, [pc, #428]	@ (800f02c <tx_control+0x17cc>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	701a      	strb	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[0]); // call	build_chksum;	/ ve calculando el checksum
 800ee84:	4b5b      	ldr	r3, [pc, #364]	@ (800eff4 <tx_control+0x1794>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	0018      	movs	r0, r3
 800ee8a:	f7f8 f847 	bl	8006f1c <build_chksum>
			wreg++;			// inc		wreg
 800ee8e:	4b67      	ldr	r3, [pc, #412]	@ (800f02c <tx_control+0x17cc>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	3301      	adds	r3, #1
 800ee94:	b2da      	uxtb	r2, r3
 800ee96:	4b65      	ldr	r3, [pc, #404]	@ (800f02c <tx_control+0x17cc>)
 800ee98:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800ee9a:	4b64      	ldr	r3, [pc, #400]	@ (800f02c <tx_control+0x17cc>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	b25b      	sxtb	r3, r3
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	db00      	blt.n	800eea6 <tx_control+0x1646>
				goto load_bloqFirm;
 800eea4:	e7ee      	b.n	800ee84 <tx_control+0x1624>
			resulh = RxBuffer_Ble[1]; // ld		resulh,a
 800eea6:	4b53      	ldr	r3, [pc, #332]	@ (800eff4 <tx_control+0x1794>)
 800eea8:	785a      	ldrb	r2, [r3, #1]
 800eeaa:	4b61      	ldr	r3, [pc, #388]	@ (800f030 <tx_control+0x17d0>)
 800eeac:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[2]; // ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800eeae:	4b51      	ldr	r3, [pc, #324]	@ (800eff4 <tx_control+0x1794>)
 800eeb0:	789a      	ldrb	r2, [r3, #2]
 800eeb2:	4b60      	ldr	r3, [pc, #384]	@ (800f034 <tx_control+0x17d4>)
 800eeb4:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[3];// ld		tempo2,a
 800eeb6:	4b4f      	ldr	r3, [pc, #316]	@ (800eff4 <tx_control+0x1794>)
 800eeb8:	78da      	ldrb	r2, [r3, #3]
 800eeba:	4b5f      	ldr	r3, [pc, #380]	@ (800f038 <tx_control+0x17d8>)
 800eebc:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[4];// ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800eebe:	4b4d      	ldr	r3, [pc, #308]	@ (800eff4 <tx_control+0x1794>)
 800eec0:	791a      	ldrb	r2, [r3, #4]
 800eec2:	4b5e      	ldr	r3, [pc, #376]	@ (800f03c <tx_control+0x17dc>)
 800eec4:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1))!=((uint16_t)(chksum_32_HW_LW & 0x0000FFFF))){// jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800eec6:	4b5c      	ldr	r3, [pc, #368]	@ (800f038 <tx_control+0x17d8>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	021b      	lsls	r3, r3, #8
 800eecc:	b21a      	sxth	r2, r3
 800eece:	4b5b      	ldr	r3, [pc, #364]	@ (800f03c <tx_control+0x17dc>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	b21b      	sxth	r3, r3
 800eed4:	4313      	orrs	r3, r2
 800eed6:	b21a      	sxth	r2, r3
 800eed8:	4b3c      	ldr	r3, [pc, #240]	@ (800efcc <tx_control+0x176c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	b21b      	sxth	r3, r3
 800eede:	429a      	cmp	r2, r3
 800eee0:	d141      	bne.n	800ef66 <tx_control+0x1706>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksum_32_HW_LW & 0xFFFF0000)>>16))){ //jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800eee2:	4b53      	ldr	r3, [pc, #332]	@ (800f030 <tx_control+0x17d0>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	021b      	lsls	r3, r3, #8
 800eee8:	b21a      	sxth	r2, r3
 800eeea:	4b52      	ldr	r3, [pc, #328]	@ (800f034 <tx_control+0x17d4>)
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	b21b      	sxth	r3, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	b21a      	sxth	r2, r3
 800eef4:	4b35      	ldr	r3, [pc, #212]	@ (800efcc <tx_control+0x176c>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	0c1b      	lsrs	r3, r3, #16
 800eefa:	b21b      	sxth	r3, r3
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d134      	bne.n	800ef6a <tx_control+0x170a>
no_inc_chksumFirm_HW:
 800ef00:	46c0      	nop			@ (mov r8, r8)
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800ef02:	4b47      	ldr	r3, [pc, #284]	@ (800f020 <tx_control+0x17c0>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	4b31      	ldr	r3, [pc, #196]	@ (800efcc <tx_control+0x176c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	18d2      	adds	r2, r2, r3
 800ef0c:	4b44      	ldr	r3, [pc, #272]	@ (800f020 <tx_control+0x17c0>)
 800ef0e:	601a      	str	r2, [r3, #0]
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800ef10:	4b3a      	ldr	r3, [pc, #232]	@ (800effc <tx_control+0x179c>)
 800ef12:	22aa      	movs	r2, #170	@ 0xaa
 800ef14:	701a      	strb	r2, [r3, #0]
			dataPointer = &RxBuffer_Ble[0];// LDW		dataPointer,X
 800ef16:	4b3a      	ldr	r3, [pc, #232]	@ (800f000 <tx_control+0x17a0>)
 800ef18:	4a36      	ldr	r2, [pc, #216]	@ (800eff4 <tx_control+0x1794>)
 800ef1a:	601a      	str	r2, [r3, #0]
			dirPointer = (128 * cntBloqFirm + eventLogger);// LDW		dirPointer,X
 800ef1c:	4b3e      	ldr	r3, [pc, #248]	@ (800f018 <tx_control+0x17b8>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	01db      	lsls	r3, r3, #7
 800ef22:	001a      	movs	r2, r3
 800ef24:	4b46      	ldr	r3, [pc, #280]	@ (800f040 <tx_control+0x17e0>)
 800ef26:	18d2      	adds	r2, r2, r3
 800ef28:	4b36      	ldr	r3, [pc, #216]	@ (800f004 <tx_control+0x17a4>)
 800ef2a:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();// call	GRABA_BLOCK;					/ graba bloque de 128bytes en FLASH
 800ef2c:	f7f8 f80a 	bl	8006f44 <GRABA_BLOCK>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800ef30:	4b39      	ldr	r3, [pc, #228]	@ (800f018 <tx_control+0x17b8>)
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	b2da      	uxtb	r2, r3
 800ef38:	4b37      	ldr	r3, [pc, #220]	@ (800f018 <tx_control+0x17b8>)
 800ef3a:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800ef3c:	4b36      	ldr	r3, [pc, #216]	@ (800f018 <tx_control+0x17b8>)
 800ef3e:	781a      	ldrb	r2, [r3, #0]
 800ef40:	4b34      	ldr	r3, [pc, #208]	@ (800f014 <tx_control+0x17b4>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d103      	bne.n	800ef50 <tx_control+0x16f0>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800ef48:	4b31      	ldr	r3, [pc, #196]	@ (800f010 <tx_control+0x17b0>)
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	70da      	strb	r2, [r3, #3]
 800ef4e:	e000      	b.n	800ef52 <tx_control+0x16f2>
				goto rxFirm_noComplete ;
 800ef50:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800ef52:	4b32      	ldr	r3, [pc, #200]	@ (800f01c <tx_control+0x17bc>)
 800ef54:	22f1      	movs	r2, #241	@ 0xf1
 800ef56:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ef58:	4b30      	ldr	r3, [pc, #192]	@ (800f01c <tx_control+0x17bc>)
 800ef5a:	223d      	movs	r2, #61	@ 0x3d
 800ef5c:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800ef5e:	4b32      	ldr	r3, [pc, #200]	@ (800f028 <tx_control+0x17c8>)
 800ef60:	2205      	movs	r2, #5
 800ef62:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800ef64:	e019      	b.n	800ef9a <tx_control+0x173a>
				goto no_writeBloqFirm;
 800ef66:	46c0      	nop			@ (mov r8, r8)
 800ef68:	e000      	b.n	800ef6c <tx_control+0x170c>
				goto no_writeBloqFirm;
 800ef6a:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800ef6c:	4b2b      	ldr	r3, [pc, #172]	@ (800f01c <tx_control+0x17bc>)
 800ef6e:	22f1      	movs	r2, #241	@ 0xf1
 800ef70:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800ef72:	4b2a      	ldr	r3, [pc, #168]	@ (800f01c <tx_control+0x17bc>)
 800ef74:	223e      	movs	r2, #62	@ 0x3e
 800ef76:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800ef78:	2300      	movs	r3, #0
 800ef7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef7c:	e007      	b.n	800ef8e <tx_control+0x172e>
				flagsRxFirm[i]=0;
 800ef7e:	4a24      	ldr	r2, [pc, #144]	@ (800f010 <tx_control+0x17b0>)
 800ef80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef82:	18d3      	adds	r3, r2, r3
 800ef84:	2200      	movs	r2, #0
 800ef86:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800ef88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef90:	2b07      	cmp	r3, #7
 800ef92:	ddf4      	ble.n	800ef7e <tx_control+0x171e>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800ef94:	4b16      	ldr	r3, [pc, #88]	@ (800eff0 <tx_control+0x1790>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800ef9a:	4b0e      	ldr	r3, [pc, #56]	@ (800efd4 <tx_control+0x1774>)
 800ef9c:	4a1f      	ldr	r2, [pc, #124]	@ (800f01c <tx_control+0x17bc>)
 800ef9e:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800efa0:	4b0d      	ldr	r3, [pc, #52]	@ (800efd8 <tx_control+0x1778>)
 800efa2:	4a1e      	ldr	r2, [pc, #120]	@ (800f01c <tx_control+0x17bc>)
 800efa4:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800efa6:	4b0d      	ldr	r3, [pc, #52]	@ (800efdc <tx_control+0x177c>)
 800efa8:	4a1e      	ldr	r2, [pc, #120]	@ (800f024 <tx_control+0x17c4>)
 800efaa:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800efac:	4b0d      	ldr	r3, [pc, #52]	@ (800efe4 <tx_control+0x1784>)
 800efae:	2202      	movs	r2, #2
 800efb0:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800efb2:	4b0d      	ldr	r3, [pc, #52]	@ (800efe8 <tx_control+0x1788>)
 800efb4:	2201      	movs	r2, #1
 800efb6:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800efb8:	4b0c      	ldr	r3, [pc, #48]	@ (800efec <tx_control+0x178c>)
 800efba:	2255      	movs	r2, #85	@ 0x55
 800efbc:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800efbe:	4b0c      	ldr	r3, [pc, #48]	@ (800eff0 <tx_control+0x1790>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;				// jp		end_tx_control
 800efc4:	f000 fcf7 	bl	800f9b6 <tx_control+0x2156>
 800efc8:	0803f000 	.word	0x0803f000
 800efcc:	20000e44 	.word	0x20000e44
 800efd0:	20000fb8 	.word	0x20000fb8
 800efd4:	20000e24 	.word	0x20000e24
 800efd8:	20000e1c 	.word	0x20000e1c
 800efdc:	20000e20 	.word	0x20000e20
 800efe0:	20001044 	.word	0x20001044
 800efe4:	20000e40 	.word	0x20000e40
 800efe8:	20000e2c 	.word	0x20000e2c
 800efec:	20000e29 	.word	0x20000e29
 800eff0:	20000e34 	.word	0x20000e34
 800eff4:	20000994 	.word	0x20000994
 800eff8:	0803f07c 	.word	0x0803f07c
 800effc:	20000d9c 	.word	0x20000d9c
 800f000:	20000da4 	.word	0x20000da4
 800f004:	20000da0 	.word	0x20000da0
 800f008:	20000df0 	.word	0x20000df0
 800f00c:	20000df1 	.word	0x20000df1
 800f010:	20000eec 	.word	0x20000eec
 800f014:	20000ee0 	.word	0x20000ee0
 800f018:	20000ee1 	.word	0x20000ee1
 800f01c:	20000dc4 	.word	0x20000dc4
 800f020:	20000ee4 	.word	0x20000ee4
 800f024:	20000dc5 	.word	0x20000dc5
 800f028:	20000ef6 	.word	0x20000ef6
 800f02c:	20000b65 	.word	0x20000b65
 800f030:	20000b57 	.word	0x20000b57
 800f034:	20000b58 	.word	0x20000b58
 800f038:	20000b5e 	.word	0x20000b5e
 800f03c:	20000b5f 	.word	0x20000b5f
 800f040:	08037000 	.word	0x08037000
			goto rxChkFirm;				// jp		rxChkFirm;
 800f044:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800f046:	4bdc      	ldr	r3, [pc, #880]	@ (800f3b8 <tx_control+0x1b58>)
 800f048:	791b      	ldrb	r3, [r3, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d171      	bne.n	800f132 <tx_control+0x18d2>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800f04e:	4bdb      	ldr	r3, [pc, #876]	@ (800f3bc <tx_control+0x1b5c>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	2b4a      	cmp	r3, #74	@ 0x4a
 800f054:	d170      	bne.n	800f138 <tx_control+0x18d8>
			resulh = RxBuffer_Ble[2];	// ld		resulh,a
 800f056:	4bda      	ldr	r3, [pc, #872]	@ (800f3c0 <tx_control+0x1b60>)
 800f058:	789a      	ldrb	r2, [r3, #2]
 800f05a:	4bda      	ldr	r3, [pc, #872]	@ (800f3c4 <tx_control+0x1b64>)
 800f05c:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[3];	// ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800f05e:	4bd8      	ldr	r3, [pc, #864]	@ (800f3c0 <tx_control+0x1b60>)
 800f060:	78da      	ldrb	r2, [r3, #3]
 800f062:	4bd9      	ldr	r3, [pc, #868]	@ (800f3c8 <tx_control+0x1b68>)
 800f064:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[4];// ld		tempo2,a
 800f066:	4bd6      	ldr	r3, [pc, #856]	@ (800f3c0 <tx_control+0x1b60>)
 800f068:	791a      	ldrb	r2, [r3, #4]
 800f06a:	4bd8      	ldr	r3, [pc, #864]	@ (800f3cc <tx_control+0x1b6c>)
 800f06c:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[5]; // ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800f06e:	4bd4      	ldr	r3, [pc, #848]	@ (800f3c0 <tx_control+0x1b60>)
 800f070:	795a      	ldrb	r2, [r3, #5]
 800f072:	4bd7      	ldr	r3, [pc, #860]	@ (800f3d0 <tx_control+0x1b70>)
 800f074:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1)) != ((uint16_t)(chksumFirm_HW_LW & 0x0000FFFF))){		// jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800f076:	4bd5      	ldr	r3, [pc, #852]	@ (800f3cc <tx_control+0x1b6c>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	021b      	lsls	r3, r3, #8
 800f07c:	b21a      	sxth	r2, r3
 800f07e:	4bd4      	ldr	r3, [pc, #848]	@ (800f3d0 <tx_control+0x1b70>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	b21b      	sxth	r3, r3
 800f084:	4313      	orrs	r3, r2
 800f086:	b21a      	sxth	r2, r3
 800f088:	4bd2      	ldr	r3, [pc, #840]	@ (800f3d4 <tx_control+0x1b74>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	429a      	cmp	r2, r3
 800f090:	d11b      	bne.n	800f0ca <tx_control+0x186a>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksumFirm_HW_LW & 0xFFFF0000)>>16))){//		jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800f092:	4bcc      	ldr	r3, [pc, #816]	@ (800f3c4 <tx_control+0x1b64>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	021b      	lsls	r3, r3, #8
 800f098:	b21a      	sxth	r2, r3
 800f09a:	4bcb      	ldr	r3, [pc, #812]	@ (800f3c8 <tx_control+0x1b68>)
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	b21b      	sxth	r3, r3
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	b21a      	sxth	r2, r3
 800f0a4:	4bcb      	ldr	r3, [pc, #812]	@ (800f3d4 <tx_control+0x1b74>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	0c1b      	lsrs	r3, r3, #16
 800f0aa:	b21b      	sxth	r3, r3
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d10e      	bne.n	800f0ce <tx_control+0x186e>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f0b0:	4bc9      	ldr	r3, [pc, #804]	@ (800f3d8 <tx_control+0x1b78>)
 800f0b2:	22f1      	movs	r2, #241	@ 0xf1
 800f0b4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f0b6:	4bc8      	ldr	r3, [pc, #800]	@ (800f3d8 <tx_control+0x1b78>)
 800f0b8:	223d      	movs	r2, #61	@ 0x3d
 800f0ba:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800f0bc:	4bbe      	ldr	r3, [pc, #760]	@ (800f3b8 <tx_control+0x1b58>)
 800f0be:	2201      	movs	r2, #1
 800f0c0:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f0c2:	4bc6      	ldr	r3, [pc, #792]	@ (800f3dc <tx_control+0x1b7c>)
 800f0c4:	2205      	movs	r2, #5
 800f0c6:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800f0c8:	e019      	b.n	800f0fe <tx_control+0x189e>
				goto rxFirmErr;
 800f0ca:	46c0      	nop			@ (mov r8, r8)
 800f0cc:	e000      	b.n	800f0d0 <tx_control+0x1870>
				goto rxFirmErr;
 800f0ce:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f0d0:	4bc1      	ldr	r3, [pc, #772]	@ (800f3d8 <tx_control+0x1b78>)
 800f0d2:	22f1      	movs	r2, #241	@ 0xf1
 800f0d4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f0d6:	4bc0      	ldr	r3, [pc, #768]	@ (800f3d8 <tx_control+0x1b78>)
 800f0d8:	223e      	movs	r2, #62	@ 0x3e
 800f0da:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f0dc:	2300      	movs	r3, #0
 800f0de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0e0:	e007      	b.n	800f0f2 <tx_control+0x1892>
				flagsRxFirm[i]=0;
 800f0e2:	4ab5      	ldr	r2, [pc, #724]	@ (800f3b8 <tx_control+0x1b58>)
 800f0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e6:	18d3      	adds	r3, r2, r3
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f4:	2b07      	cmp	r3, #7
 800f0f6:	ddf4      	ble.n	800f0e2 <tx_control+0x1882>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800f0f8:	4bb0      	ldr	r3, [pc, #704]	@ (800f3bc <tx_control+0x1b5c>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f0fe:	4bb8      	ldr	r3, [pc, #736]	@ (800f3e0 <tx_control+0x1b80>)
 800f100:	4ab5      	ldr	r2, [pc, #724]	@ (800f3d8 <tx_control+0x1b78>)
 800f102:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f104:	4bb7      	ldr	r3, [pc, #732]	@ (800f3e4 <tx_control+0x1b84>)
 800f106:	4ab4      	ldr	r2, [pc, #720]	@ (800f3d8 <tx_control+0x1b78>)
 800f108:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f10a:	4bb7      	ldr	r3, [pc, #732]	@ (800f3e8 <tx_control+0x1b88>)
 800f10c:	4ab7      	ldr	r2, [pc, #732]	@ (800f3ec <tx_control+0x1b8c>)
 800f10e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800f110:	4bb7      	ldr	r3, [pc, #732]	@ (800f3f0 <tx_control+0x1b90>)
 800f112:	2202      	movs	r2, #2
 800f114:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f116:	4bb7      	ldr	r3, [pc, #732]	@ (800f3f4 <tx_control+0x1b94>)
 800f118:	2201      	movs	r2, #1
 800f11a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800f11c:	4bb6      	ldr	r3, [pc, #728]	@ (800f3f8 <tx_control+0x1b98>)
 800f11e:	2255      	movs	r2, #85	@ 0x55
 800f120:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800f122:	4ba6      	ldr	r3, [pc, #664]	@ (800f3bc <tx_control+0x1b5c>)
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f128:	f000 fc45 	bl	800f9b6 <tx_control+0x2156>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800f12c:	46c0      	nop			@ (mov r8, r8)
 800f12e:	f000 fc42 	bl	800f9b6 <tx_control+0x2156>
				goto end_rx_firmware;
 800f132:	46c0      	nop			@ (mov r8, r8)
 800f134:	f000 fc3f 	bl	800f9b6 <tx_control+0x2156>
					goto end_rx_firmware;
 800f138:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800f13a:	f000 fc3c 	bl	800f9b6 <tx_control+0x2156>
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800f13e:	4baf      	ldr	r3, [pc, #700]	@ (800f3fc <tx_control+0x1b9c>)
 800f140:	22aa      	movs	r2, #170	@ 0xaa
 800f142:	701a      	strb	r2, [r3, #0]
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800f144:	4bae      	ldr	r3, [pc, #696]	@ (800f400 <tx_control+0x1ba0>)
 800f146:	4aaf      	ldr	r2, [pc, #700]	@ (800f404 <tx_control+0x1ba4>)
 800f148:	601a      	str	r2, [r3, #0]
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800f14a:	4baf      	ldr	r3, [pc, #700]	@ (800f408 <tx_control+0x1ba8>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	01db      	lsls	r3, r3, #7
 800f150:	001a      	movs	r2, r3
 800f152:	4bae      	ldr	r3, [pc, #696]	@ (800f40c <tx_control+0x1bac>)
 800f154:	18d2      	adds	r2, r2, r3
 800f156:	4bae      	ldr	r3, [pc, #696]	@ (800f410 <tx_control+0x1bb0>)
 800f158:	601a      	str	r2, [r3, #0]
			cntBloqFirm++; // inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f15a:	4bab      	ldr	r3, [pc, #684]	@ (800f408 <tx_control+0x1ba8>)
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	3301      	adds	r3, #1
 800f160:	b2da      	uxtb	r2, r3
 800f162:	4ba9      	ldr	r3, [pc, #676]	@ (800f408 <tx_control+0x1ba8>)
 800f164:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm!= 0){ // jrne	tx_clean_logger_loop
 800f166:	4ba8      	ldr	r3, [pc, #672]	@ (800f408 <tx_control+0x1ba8>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d000      	beq.n	800f170 <tx_control+0x1910>
				goto tx_clean_logger_loop;
 800f16e:	e7e6      	b.n	800f13e <tx_control+0x18de>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f170:	4b99      	ldr	r3, [pc, #612]	@ (800f3d8 <tx_control+0x1b78>)
 800f172:	22f1      	movs	r2, #241	@ 0xf1
 800f174:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f176:	4b98      	ldr	r3, [pc, #608]	@ (800f3d8 <tx_control+0x1b78>)
 800f178:	223d      	movs	r2, #61	@ 0x3d
 800f17a:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800f17c:	4ba5      	ldr	r3, [pc, #660]	@ (800f414 <tx_control+0x1bb4>)
 800f17e:	2200      	movs	r2, #0
 800f180:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800f182:	4ba5      	ldr	r3, [pc, #660]	@ (800f418 <tx_control+0x1bb8>)
 800f184:	2200      	movs	r2, #0
 800f186:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800f188:	4ba4      	ldr	r3, [pc, #656]	@ (800f41c <tx_control+0x1bbc>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800f18e:	4ba4      	ldr	r3, [pc, #656]	@ (800f420 <tx_control+0x1bc0>)
 800f190:	2200      	movs	r2, #0
 800f192:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800f194:	4ba3      	ldr	r3, [pc, #652]	@ (800f424 <tx_control+0x1bc4>)
 800f196:	4a9b      	ldr	r2, [pc, #620]	@ (800f404 <tx_control+0x1ba4>)
 800f198:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800f19a:	4ba3      	ldr	r3, [pc, #652]	@ (800f428 <tx_control+0x1bc8>)
 800f19c:	4aa3      	ldr	r2, [pc, #652]	@ (800f42c <tx_control+0x1bcc>)
 800f19e:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800f1a0:	4b9d      	ldr	r3, [pc, #628]	@ (800f418 <tx_control+0x1bb8>)
 800f1a2:	781a      	ldrb	r2, [r3, #0]
 800f1a4:	4ba2      	ldr	r3, [pc, #648]	@ (800f430 <tx_control+0x1bd0>)
 800f1a6:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f1a8:	f7f7 fd74 	bl	8006c94 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800f1ac:	4b9d      	ldr	r3, [pc, #628]	@ (800f424 <tx_control+0x1bc4>)
 800f1ae:	4aa1      	ldr	r2, [pc, #644]	@ (800f434 <tx_control+0x1bd4>)
 800f1b0:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800f1b2:	4b9d      	ldr	r3, [pc, #628]	@ (800f428 <tx_control+0x1bc8>)
 800f1b4:	4a95      	ldr	r2, [pc, #596]	@ (800f40c <tx_control+0x1bac>)
 800f1b6:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800f1b8:	4b99      	ldr	r3, [pc, #612]	@ (800f420 <tx_control+0x1bc0>)
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	4b9c      	ldr	r3, [pc, #624]	@ (800f430 <tx_control+0x1bd0>)
 800f1be:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f1c0:	f7f7 fd68 	bl	8006c94 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1c8:	e007      	b.n	800f1da <tx_control+0x197a>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800f1ca:	4a9b      	ldr	r2, [pc, #620]	@ (800f438 <tx_control+0x1bd8>)
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	18d3      	adds	r3, r2, r3
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	2b07      	cmp	r3, #7
 800f1de:	ddf4      	ble.n	800f1ca <tx_control+0x196a>
			goto ok_clean_logger; //jp		ok_clean_logger
 800f1e0:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800f1e2:	4b7f      	ldr	r3, [pc, #508]	@ (800f3e0 <tx_control+0x1b80>)
 800f1e4:	4a7c      	ldr	r2, [pc, #496]	@ (800f3d8 <tx_control+0x1b78>)
 800f1e6:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800f1e8:	4b7e      	ldr	r3, [pc, #504]	@ (800f3e4 <tx_control+0x1b84>)
 800f1ea:	4a7b      	ldr	r2, [pc, #492]	@ (800f3d8 <tx_control+0x1b78>)
 800f1ec:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f1ee:	4b7e      	ldr	r3, [pc, #504]	@ (800f3e8 <tx_control+0x1b88>)
 800f1f0:	4a7e      	ldr	r2, [pc, #504]	@ (800f3ec <tx_control+0x1b8c>)
 800f1f2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f1f4:	4b7e      	ldr	r3, [pc, #504]	@ (800f3f0 <tx_control+0x1b90>)
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f1fa:	4b7e      	ldr	r3, [pc, #504]	@ (800f3f4 <tx_control+0x1b94>)
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f200:	4b7d      	ldr	r3, [pc, #500]	@ (800f3f8 <tx_control+0x1b98>)
 800f202:	2255      	movs	r2, #85	@ 0x55
 800f204:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800f206:	4b6d      	ldr	r3, [pc, #436]	@ (800f3bc <tx_control+0x1b5c>)
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f20c:	f000 fbd3 	bl	800f9b6 <tx_control+0x2156>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800f210:	4b6b      	ldr	r3, [pc, #428]	@ (800f3c0 <tx_control+0x1b60>)
 800f212:	789a      	ldrb	r2, [r3, #2]
 800f214:	4b89      	ldr	r3, [pc, #548]	@ (800f43c <tx_control+0x1bdc>)
 800f216:	701a      	strb	r2, [r3, #0]
			waux = findLastValue((uint32_t)&eeEstado1);
 800f218:	4b89      	ldr	r3, [pc, #548]	@ (800f440 <tx_control+0x1be0>)
 800f21a:	0018      	movs	r0, r3
 800f21c:	f7f3 fcfe 	bl	8002c1c <findLastValue>
 800f220:	0003      	movs	r3, r0
 800f222:	b2da      	uxtb	r2, r3
 800f224:	4b87      	ldr	r3, [pc, #540]	@ (800f444 <tx_control+0x1be4>)
 800f226:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800f228:	4b84      	ldr	r3, [pc, #528]	@ (800f43c <tx_control+0x1bdc>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	001a      	movs	r2, r3
 800f22e:	2301      	movs	r3, #1
 800f230:	4013      	ands	r3, r2
 800f232:	d00d      	beq.n	800f250 <tx_control+0x19f0>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800f234:	4b83      	ldr	r3, [pc, #524]	@ (800f444 <tx_control+0x1be4>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2201      	movs	r2, #1
 800f23a:	4053      	eors	r3, r2
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	4b81      	ldr	r3, [pc, #516]	@ (800f444 <tx_control+0x1be4>)
 800f240:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f242:	4b81      	ldr	r3, [pc, #516]	@ (800f448 <tx_control+0x1be8>)
 800f244:	22fa      	movs	r2, #250	@ 0xfa
 800f246:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800f248:	4b80      	ldr	r3, [pc, #512]	@ (800f44c <tx_control+0x1bec>)
 800f24a:	2201      	movs	r2, #1
 800f24c:	701a      	strb	r2, [r3, #0]
 800f24e:	e000      	b.n	800f252 <tx_control+0x19f2>
				goto chk_est1_b1;
 800f250:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800f252:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800f254:	4b79      	ldr	r3, [pc, #484]	@ (800f43c <tx_control+0x1bdc>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	001a      	movs	r2, r3
 800f25a:	2304      	movs	r3, #4
 800f25c:	4013      	ands	r3, r2
 800f25e:	d027      	beq.n	800f2b0 <tx_control+0x1a50>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800f260:	4b7b      	ldr	r3, [pc, #492]	@ (800f450 <tx_control+0x1bf0>)
 800f262:	799b      	ldrb	r3, [r3, #6]
 800f264:	2201      	movs	r2, #1
 800f266:	4053      	eors	r3, r2
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	1e5a      	subs	r2, r3, #1
 800f26c:	4193      	sbcs	r3, r2
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	4b77      	ldr	r3, [pc, #476]	@ (800f450 <tx_control+0x1bf0>)
 800f272:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800f274:	4b73      	ldr	r3, [pc, #460]	@ (800f444 <tx_control+0x1be4>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	2204      	movs	r2, #4
 800f27a:	4393      	bics	r3, r2
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	4b71      	ldr	r3, [pc, #452]	@ (800f444 <tx_control+0x1be4>)
 800f280:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800f282:	4b73      	ldr	r3, [pc, #460]	@ (800f450 <tx_control+0x1bf0>)
 800f284:	799b      	ldrb	r3, [r3, #6]
 800f286:	2201      	movs	r2, #1
 800f288:	4053      	eors	r3, r2
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d107      	bne.n	800f2a0 <tx_control+0x1a40>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800f290:	4b6c      	ldr	r3, [pc, #432]	@ (800f444 <tx_control+0x1be4>)
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	2204      	movs	r2, #4
 800f296:	4313      	orrs	r3, r2
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	4b6a      	ldr	r3, [pc, #424]	@ (800f444 <tx_control+0x1be4>)
 800f29c:	701a      	strb	r2, [r3, #0]
 800f29e:	e000      	b.n	800f2a2 <tx_control+0x1a42>
				goto chk_est1_b2_01;
 800f2a0:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800f2a2:	4b69      	ldr	r3, [pc, #420]	@ (800f448 <tx_control+0x1be8>)
 800f2a4:	22fa      	movs	r2, #250	@ 0xfa
 800f2a6:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800f2a8:	4b68      	ldr	r3, [pc, #416]	@ (800f44c <tx_control+0x1bec>)
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	701a      	strb	r2, [r3, #0]
 800f2ae:	e000      	b.n	800f2b2 <tx_control+0x1a52>
				goto chk_est1_b3;
 800f2b0:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800f2b2:	4b62      	ldr	r3, [pc, #392]	@ (800f43c <tx_control+0x1bdc>)
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	001a      	movs	r2, r3
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	d019      	beq.n	800f2f2 <tx_control+0x1a92>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800f2be:	4b64      	ldr	r3, [pc, #400]	@ (800f450 <tx_control+0x1bf0>)
 800f2c0:	789b      	ldrb	r3, [r3, #2]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d106      	bne.n	800f2d4 <tx_control+0x1a74>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800f2c6:	4b63      	ldr	r3, [pc, #396]	@ (800f454 <tx_control+0x1bf4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800f2cc:	4b62      	ldr	r3, [pc, #392]	@ (800f458 <tx_control+0x1bf8>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800f2d2:	e00f      	b.n	800f2f4 <tx_control+0x1a94>
				goto chk_est1_b3_01;
 800f2d4:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800f2d6:	4b61      	ldr	r3, [pc, #388]	@ (800f45c <tx_control+0x1bfc>)
 800f2d8:	22f0      	movs	r2, #240	@ 0xf0
 800f2da:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800f2dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f450 <tx_control+0x1bf0>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800f2e2:	4b5b      	ldr	r3, [pc, #364]	@ (800f450 <tx_control+0x1bf0>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800f2e8:	f7f7 fc84 	bl	8006bf4 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800f2ec:	f7f7 fca0 	bl	8006c30 <load_tiempoAhorro2>
 800f2f0:	e000      	b.n	800f2f4 <tx_control+0x1a94>
				goto chk_est1_b4;
 800f2f2:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800f2f4:	4b51      	ldr	r3, [pc, #324]	@ (800f43c <tx_control+0x1bdc>)
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	001a      	movs	r2, r3
 800f2fa:	2310      	movs	r3, #16
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	d003      	beq.n	800f308 <tx_control+0x1aa8>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800f300:	4b57      	ldr	r3, [pc, #348]	@ (800f460 <tx_control+0x1c00>)
 800f302:	2201      	movs	r2, #1
 800f304:	711a      	strb	r2, [r3, #4]
 800f306:	e000      	b.n	800f30a <tx_control+0x1aaa>
				goto chk_est1_b5;
 800f308:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800f30a:	4b4c      	ldr	r3, [pc, #304]	@ (800f43c <tx_control+0x1bdc>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	001a      	movs	r2, r3
 800f310:	2320      	movs	r3, #32
 800f312:	4013      	ands	r3, r2
 800f314:	d002      	beq.n	800f31c <tx_control+0x1abc>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800f316:	f7f7 fdb3 	bl	8006e80 <ld_alarmDelay>
 800f31a:	e000      	b.n	800f31e <tx_control+0x1abe>
				goto chk_est1_b6;
 800f31c:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800f31e:	4b51      	ldr	r3, [pc, #324]	@ (800f464 <tx_control+0x1c04>)
 800f320:	225b      	movs	r2, #91	@ 0x5b
 800f322:	5c9b      	ldrb	r3, [r3, r2]
 800f324:	001a      	movs	r2, r3
 800f326:	2308      	movs	r3, #8
 800f328:	4013      	ands	r3, r2
 800f32a:	d113      	bne.n	800f354 <tx_control+0x1af4>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800f32c:	4b43      	ldr	r3, [pc, #268]	@ (800f43c <tx_control+0x1bdc>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	001a      	movs	r2, r3
 800f332:	2340      	movs	r3, #64	@ 0x40
 800f334:	4013      	ands	r3, r2
 800f336:	d00f      	beq.n	800f358 <tx_control+0x1af8>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800f338:	4b42      	ldr	r3, [pc, #264]	@ (800f444 <tx_control+0x1be4>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2240      	movs	r2, #64	@ 0x40
 800f33e:	4053      	eors	r3, r2
 800f340:	b2da      	uxtb	r2, r3
 800f342:	4b40      	ldr	r3, [pc, #256]	@ (800f444 <tx_control+0x1be4>)
 800f344:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f346:	4b40      	ldr	r3, [pc, #256]	@ (800f448 <tx_control+0x1be8>)
 800f348:	22fa      	movs	r2, #250	@ 0xfa
 800f34a:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800f34c:	4b3f      	ldr	r3, [pc, #252]	@ (800f44c <tx_control+0x1bec>)
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
 800f352:	e002      	b.n	800f35a <tx_control+0x1afa>
				goto deshTypeAct_05;
 800f354:	46c0      	nop			@ (mov r8, r8)
 800f356:	e000      	b.n	800f35a <tx_control+0x1afa>
				goto chk_est1_b7;
 800f358:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800f35a:	4b3a      	ldr	r3, [pc, #232]	@ (800f444 <tx_control+0x1be4>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	001a      	movs	r2, r3
 800f360:	4b37      	ldr	r3, [pc, #220]	@ (800f440 <tx_control+0x1be0>)
 800f362:	0019      	movs	r1, r3
 800f364:	0010      	movs	r0, r2
 800f366:	f7f7 ff07 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f36a:	4b3f      	ldr	r3, [pc, #252]	@ (800f468 <tx_control+0x1c08>)
 800f36c:	0018      	movs	r0, r3
 800f36e:	f006 fc55 	bl	8015c1c <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f372:	4b19      	ldr	r3, [pc, #100]	@ (800f3d8 <tx_control+0x1b78>)
 800f374:	22f1      	movs	r2, #241	@ 0xf1
 800f376:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f378:	4b17      	ldr	r3, [pc, #92]	@ (800f3d8 <tx_control+0x1b78>)
 800f37a:	223d      	movs	r2, #61	@ 0x3d
 800f37c:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800f37e:	e005      	b.n	800f38c <tx_control+0x1b2c>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f380:	4b15      	ldr	r3, [pc, #84]	@ (800f3d8 <tx_control+0x1b78>)
 800f382:	22f1      	movs	r2, #241	@ 0xf1
 800f384:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f386:	4b14      	ldr	r3, [pc, #80]	@ (800f3d8 <tx_control+0x1b78>)
 800f388:	223d      	movs	r2, #61	@ 0x3d
 800f38a:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f38c:	4b14      	ldr	r3, [pc, #80]	@ (800f3e0 <tx_control+0x1b80>)
 800f38e:	4a12      	ldr	r2, [pc, #72]	@ (800f3d8 <tx_control+0x1b78>)
 800f390:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f392:	4b14      	ldr	r3, [pc, #80]	@ (800f3e4 <tx_control+0x1b84>)
 800f394:	4a10      	ldr	r2, [pc, #64]	@ (800f3d8 <tx_control+0x1b78>)
 800f396:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f398:	4b13      	ldr	r3, [pc, #76]	@ (800f3e8 <tx_control+0x1b88>)
 800f39a:	4a14      	ldr	r2, [pc, #80]	@ (800f3ec <tx_control+0x1b8c>)
 800f39c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f39e:	4b14      	ldr	r3, [pc, #80]	@ (800f3f0 <tx_control+0x1b90>)
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f3a4:	4b13      	ldr	r3, [pc, #76]	@ (800f3f4 <tx_control+0x1b94>)
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f3aa:	4b13      	ldr	r3, [pc, #76]	@ (800f3f8 <tx_control+0x1b98>)
 800f3ac:	2255      	movs	r2, #85	@ 0x55
 800f3ae:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800f3b0:	4b02      	ldr	r3, [pc, #8]	@ (800f3bc <tx_control+0x1b5c>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800f3b6:	e2fe      	b.n	800f9b6 <tx_control+0x2156>
 800f3b8:	20000eec 	.word	0x20000eec
 800f3bc:	20000e34 	.word	0x20000e34
 800f3c0:	20000994 	.word	0x20000994
 800f3c4:	20000b57 	.word	0x20000b57
 800f3c8:	20000b58 	.word	0x20000b58
 800f3cc:	20000b5e 	.word	0x20000b5e
 800f3d0:	20000b5f 	.word	0x20000b5f
 800f3d4:	20000ee4 	.word	0x20000ee4
 800f3d8:	20000dc4 	.word	0x20000dc4
 800f3dc:	20000ef6 	.word	0x20000ef6
 800f3e0:	20000e24 	.word	0x20000e24
 800f3e4:	20000e1c 	.word	0x20000e1c
 800f3e8:	20000e20 	.word	0x20000e20
 800f3ec:	20000dc5 	.word	0x20000dc5
 800f3f0:	20000e40 	.word	0x20000e40
 800f3f4:	20000e2c 	.word	0x20000e2c
 800f3f8:	20000e29 	.word	0x20000e29
 800f3fc:	20000d9c 	.word	0x20000d9c
 800f400:	20000da4 	.word	0x20000da4
 800f404:	20000c9c 	.word	0x20000c9c
 800f408:	20000ee1 	.word	0x20000ee1
 800f40c:	08037000 	.word	0x08037000
 800f410:	20000da0 	.word	0x20000da0
 800f414:	20000dbc 	.word	0x20000dbc
 800f418:	20000dbd 	.word	0x20000dbd
 800f41c:	20000dbe 	.word	0x20000dbe
 800f420:	20000dbf 	.word	0x20000dbf
 800f424:	20000db4 	.word	0x20000db4
 800f428:	20000db0 	.word	0x20000db0
 800f42c:	0803c000 	.word	0x0803c000
 800f430:	20000daa 	.word	0x20000daa
 800f434:	20000d1c 	.word	0x20000d1c
 800f438:	20000ed8 	.word	0x20000ed8
 800f43c:	20000b65 	.word	0x20000b65
 800f440:	0803f803 	.word	0x0803f803
 800f444:	20000b64 	.word	0x20000b64
 800f448:	20001074 	.word	0x20001074
 800f44c:	20001075 	.word	0x20001075
 800f450:	20000c4c 	.word	0x20000c4c
 800f454:	20000c40 	.word	0x20000c40
 800f458:	20000c42 	.word	0x20000c42
 800f45c:	20000bd2 	.word	0x20000bd2
 800f460:	20001054 	.word	0x20001054
 800f464:	200000b8 	.word	0x200000b8
 800f468:	2000055c 	.word	0x2000055c
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800f46c:	1dfb      	adds	r3, r7, #7
 800f46e:	781a      	ldrb	r2, [r3, #0]
 800f470:	6a3b      	ldr	r3, [r7, #32]
 800f472:	411a      	asrs	r2, r3
 800f474:	0013      	movs	r3, r2
 800f476:	2201      	movs	r2, #1
 800f478:	4013      	ands	r3, r2
 800f47a:	1e5a      	subs	r2, r3, #1
 800f47c:	4193      	sbcs	r3, r2
 800f47e:	b2d9      	uxtb	r1, r3
 800f480:	4ada      	ldr	r2, [pc, #872]	@ (800f7ec <tx_control+0x1f8c>)
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	18d3      	adds	r3, r2, r3
 800f486:	1c0a      	adds	r2, r1, #0
 800f488:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	3301      	adds	r3, #1
 800f48e:	623b      	str	r3, [r7, #32]
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	2b07      	cmp	r3, #7
 800f494:	ddea      	ble.n	800f46c <tx_control+0x1c0c>
estado1_b1:
 800f496:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800f498:	4bd4      	ldr	r3, [pc, #848]	@ (800f7ec <tx_control+0x1f8c>)
 800f49a:	2200      	movs	r2, #0
 800f49c:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800f49e:	4bd4      	ldr	r3, [pc, #848]	@ (800f7f0 <tx_control+0x1f90>)
 800f4a0:	78db      	ldrb	r3, [r3, #3]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	4053      	eors	r3, r2
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d103      	bne.n	800f4b4 <tx_control+0x1c54>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800f4ac:	4bcf      	ldr	r3, [pc, #828]	@ (800f7ec <tx_control+0x1f8c>)
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	705a      	strb	r2, [r3, #1]
 800f4b2:	e000      	b.n	800f4b6 <tx_control+0x1c56>
			goto estado1_b2;
 800f4b4:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800f4b6:	4bcd      	ldr	r3, [pc, #820]	@ (800f7ec <tx_control+0x1f8c>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800f4bc:	4bcd      	ldr	r3, [pc, #820]	@ (800f7f4 <tx_control+0x1f94>)
 800f4be:	789b      	ldrb	r3, [r3, #2]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	4053      	eors	r3, r2
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d103      	bne.n	800f4d2 <tx_control+0x1c72>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800f4ca:	4bc8      	ldr	r3, [pc, #800]	@ (800f7ec <tx_control+0x1f8c>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	709a      	strb	r2, [r3, #2]
 800f4d0:	e000      	b.n	800f4d4 <tx_control+0x1c74>
			goto estado1_b3;
 800f4d2:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800f4d4:	4bc5      	ldr	r3, [pc, #788]	@ (800f7ec <tx_control+0x1f8c>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800f4da:	4bc7      	ldr	r3, [pc, #796]	@ (800f7f8 <tx_control+0x1f98>)
 800f4dc:	789b      	ldrb	r3, [r3, #2]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	4053      	eors	r3, r2
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d103      	bne.n	800f4f0 <tx_control+0x1c90>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800f4e8:	4bc0      	ldr	r3, [pc, #768]	@ (800f7ec <tx_control+0x1f8c>)
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	70da      	strb	r2, [r3, #3]
 800f4ee:	e000      	b.n	800f4f2 <tx_control+0x1c92>
			goto estado1_b4;
 800f4f0:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800f4f2:	4bbe      	ldr	r3, [pc, #760]	@ (800f7ec <tx_control+0x1f8c>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800f4f8:	4bc0      	ldr	r3, [pc, #768]	@ (800f7fc <tx_control+0x1f9c>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	4053      	eors	r3, r2
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d103      	bne.n	800f50e <tx_control+0x1cae>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800f506:	4bb9      	ldr	r3, [pc, #740]	@ (800f7ec <tx_control+0x1f8c>)
 800f508:	2201      	movs	r2, #1
 800f50a:	715a      	strb	r2, [r3, #5]
 800f50c:	e000      	b.n	800f510 <tx_control+0x1cb0>
			goto estado1_b6;
 800f50e:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800f510:	4bb6      	ldr	r3, [pc, #728]	@ (800f7ec <tx_control+0x1f8c>)
 800f512:	2200      	movs	r2, #0
 800f514:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800f516:	4bb7      	ldr	r3, [pc, #732]	@ (800f7f4 <tx_control+0x1f94>)
 800f518:	785b      	ldrb	r3, [r3, #1]
 800f51a:	2201      	movs	r2, #1
 800f51c:	4053      	eors	r3, r2
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d103      	bne.n	800f52c <tx_control+0x1ccc>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800f524:	4bb1      	ldr	r3, [pc, #708]	@ (800f7ec <tx_control+0x1f8c>)
 800f526:	2201      	movs	r2, #1
 800f528:	719a      	strb	r2, [r3, #6]
 800f52a:	e000      	b.n	800f52e <tx_control+0x1cce>
			goto estado1_b7;
 800f52c:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800f52e:	4bb4      	ldr	r3, [pc, #720]	@ (800f800 <tx_control+0x1fa0>)
 800f530:	2204      	movs	r2, #4
 800f532:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800f534:	4bb3      	ldr	r3, [pc, #716]	@ (800f804 <tx_control+0x1fa4>)
 800f536:	227b      	movs	r2, #123	@ 0x7b
 800f538:	5c9a      	ldrb	r2, [r3, r2]
 800f53a:	4bb3      	ldr	r3, [pc, #716]	@ (800f808 <tx_control+0x1fa8>)
 800f53c:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800f53e:	4bb1      	ldr	r3, [pc, #708]	@ (800f804 <tx_control+0x1fa4>)
 800f540:	227c      	movs	r2, #124	@ 0x7c
 800f542:	5c9a      	ldrb	r2, [r3, r2]
 800f544:	4bb0      	ldr	r3, [pc, #704]	@ (800f808 <tx_control+0x1fa8>)
 800f546:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800f548:	4baf      	ldr	r3, [pc, #700]	@ (800f808 <tx_control+0x1fa8>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800f54e:	4bae      	ldr	r3, [pc, #696]	@ (800f808 <tx_control+0x1fa8>)
 800f550:	2200      	movs	r2, #0
 800f552:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800f554:	4bac      	ldr	r3, [pc, #688]	@ (800f808 <tx_control+0x1fa8>)
 800f556:	2200      	movs	r2, #0
 800f558:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800f55a:	4bab      	ldr	r3, [pc, #684]	@ (800f808 <tx_control+0x1fa8>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800f560:	4ba9      	ldr	r3, [pc, #676]	@ (800f808 <tx_control+0x1fa8>)
 800f562:	2205      	movs	r2, #5
 800f564:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800f566:	4ba6      	ldr	r3, [pc, #664]	@ (800f800 <tx_control+0x1fa0>)
 800f568:	781a      	ldrb	r2, [r3, #0]
 800f56a:	4ba7      	ldr	r3, [pc, #668]	@ (800f808 <tx_control+0x1fa8>)
 800f56c:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800f56e:	4ba7      	ldr	r3, [pc, #668]	@ (800f80c <tx_control+0x1fac>)
 800f570:	2201      	movs	r2, #1
 800f572:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800f574:	4ba6      	ldr	r3, [pc, #664]	@ (800f810 <tx_control+0x1fb0>)
 800f576:	2208      	movs	r2, #8
 800f578:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800f57a:	4aa6      	ldr	r2, [pc, #664]	@ (800f814 <tx_control+0x1fb4>)
 800f57c:	4ba2      	ldr	r3, [pc, #648]	@ (800f808 <tx_control+0x1fa8>)
 800f57e:	0011      	movs	r1, r2
 800f580:	0018      	movs	r0, r3
 800f582:	f7f7 fca7 	bl	8006ed4 <copyVector>
		bufferTxControl[8] = 0;
 800f586:	4ba3      	ldr	r3, [pc, #652]	@ (800f814 <tx_control+0x1fb4>)
 800f588:	2200      	movs	r2, #0
 800f58a:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800f58c:	4ba1      	ldr	r3, [pc, #644]	@ (800f814 <tx_control+0x1fb4>)
 800f58e:	2200      	movs	r2, #0
 800f590:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800f592:	4ba0      	ldr	r3, [pc, #640]	@ (800f814 <tx_control+0x1fb4>)
 800f594:	2200      	movs	r2, #0
 800f596:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800f598:	4b9e      	ldr	r3, [pc, #632]	@ (800f814 <tx_control+0x1fb4>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800f59e:	2300      	movs	r3, #0
 800f5a0:	61fb      	str	r3, [r7, #28]
 800f5a2:	e03e      	b.n	800f622 <tx_control+0x1dc2>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800f5a4:	4b9b      	ldr	r3, [pc, #620]	@ (800f814 <tx_control+0x1fb4>)
 800f5a6:	7a1a      	ldrb	r2, [r3, #8]
 800f5a8:	4990      	ldr	r1, [pc, #576]	@ (800f7ec <tx_control+0x1f8c>)
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	18cb      	adds	r3, r1, r3
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	0019      	movs	r1, r3
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	4099      	lsls	r1, r3
 800f5b6:	000b      	movs	r3, r1
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	4b95      	ldr	r3, [pc, #596]	@ (800f814 <tx_control+0x1fb4>)
 800f5c0:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800f5c2:	4b94      	ldr	r3, [pc, #592]	@ (800f814 <tx_control+0x1fb4>)
 800f5c4:	7a5a      	ldrb	r2, [r3, #9]
 800f5c6:	4994      	ldr	r1, [pc, #592]	@ (800f818 <tx_control+0x1fb8>)
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	18cb      	adds	r3, r1, r3
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	4099      	lsls	r1, r3
 800f5d4:	000b      	movs	r3, r1
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	4b8d      	ldr	r3, [pc, #564]	@ (800f814 <tx_control+0x1fb4>)
 800f5de:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800f5e0:	4b8c      	ldr	r3, [pc, #560]	@ (800f814 <tx_control+0x1fb4>)
 800f5e2:	7a9a      	ldrb	r2, [r3, #10]
 800f5e4:	498d      	ldr	r1, [pc, #564]	@ (800f81c <tx_control+0x1fbc>)
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	18cb      	adds	r3, r1, r3
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	0019      	movs	r1, r3
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	4099      	lsls	r1, r3
 800f5f2:	000b      	movs	r3, r1
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	4b86      	ldr	r3, [pc, #536]	@ (800f814 <tx_control+0x1fb4>)
 800f5fc:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800f5fe:	4b85      	ldr	r3, [pc, #532]	@ (800f814 <tx_control+0x1fb4>)
 800f600:	7ada      	ldrb	r2, [r3, #11]
 800f602:	4987      	ldr	r1, [pc, #540]	@ (800f820 <tx_control+0x1fc0>)
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	18cb      	adds	r3, r1, r3
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	0019      	movs	r1, r3
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	4099      	lsls	r1, r3
 800f610:	000b      	movs	r3, r1
 800f612:	b2db      	uxtb	r3, r3
 800f614:	4313      	orrs	r3, r2
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b7e      	ldr	r3, [pc, #504]	@ (800f814 <tx_control+0x1fb4>)
 800f61a:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	3301      	adds	r3, #1
 800f620:	61fb      	str	r3, [r7, #28]
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	2b07      	cmp	r3, #7
 800f626:	ddbd      	ble.n	800f5a4 <tx_control+0x1d44>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f628:	4b7e      	ldr	r3, [pc, #504]	@ (800f824 <tx_control+0x1fc4>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800f62e:	4b78      	ldr	r3, [pc, #480]	@ (800f810 <tx_control+0x1fb0>)
 800f630:	2200      	movs	r2, #0
 800f632:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800f634:	4b7c      	ldr	r3, [pc, #496]	@ (800f828 <tx_control+0x1fc8>)
 800f636:	220c      	movs	r2, #12
 800f638:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800f63a:	4b7b      	ldr	r3, [pc, #492]	@ (800f828 <tx_control+0x1fc8>)
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	001a      	movs	r2, r3
 800f640:	4b74      	ldr	r3, [pc, #464]	@ (800f814 <tx_control+0x1fb4>)
 800f642:	0011      	movs	r1, r2
 800f644:	0018      	movs	r0, r3
 800f646:	f7f7 fbf7 	bl	8006e38 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800f64a:	4b76      	ldr	r3, [pc, #472]	@ (800f824 <tx_control+0x1fc4>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	0e1b      	lsrs	r3, r3, #24
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b70      	ldr	r3, [pc, #448]	@ (800f814 <tx_control+0x1fb4>)
 800f654:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800f656:	4b73      	ldr	r3, [pc, #460]	@ (800f824 <tx_control+0x1fc4>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	0c1b      	lsrs	r3, r3, #16
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	4b6d      	ldr	r3, [pc, #436]	@ (800f814 <tx_control+0x1fb4>)
 800f660:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800f662:	4b70      	ldr	r3, [pc, #448]	@ (800f824 <tx_control+0x1fc4>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	0a1b      	lsrs	r3, r3, #8
 800f668:	b2da      	uxtb	r2, r3
 800f66a:	4b6a      	ldr	r3, [pc, #424]	@ (800f814 <tx_control+0x1fb4>)
 800f66c:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800f66e:	4b6d      	ldr	r3, [pc, #436]	@ (800f824 <tx_control+0x1fc4>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	b2da      	uxtb	r2, r3
 800f674:	4b67      	ldr	r3, [pc, #412]	@ (800f814 <tx_control+0x1fb4>)
 800f676:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800f678:	4b6c      	ldr	r3, [pc, #432]	@ (800f82c <tx_control+0x1fcc>)
 800f67a:	4a66      	ldr	r2, [pc, #408]	@ (800f814 <tx_control+0x1fb4>)
 800f67c:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800f67e:	4b6c      	ldr	r3, [pc, #432]	@ (800f830 <tx_control+0x1fd0>)
 800f680:	4a64      	ldr	r2, [pc, #400]	@ (800f814 <tx_control+0x1fb4>)
 800f682:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800f684:	4b6b      	ldr	r3, [pc, #428]	@ (800f834 <tx_control+0x1fd4>)
 800f686:	4a6c      	ldr	r2, [pc, #432]	@ (800f838 <tx_control+0x1fd8>)
 800f688:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800f68a:	4b5d      	ldr	r3, [pc, #372]	@ (800f800 <tx_control+0x1fa0>)
 800f68c:	2210      	movs	r2, #16
 800f68e:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800f690:	4b5e      	ldr	r3, [pc, #376]	@ (800f80c <tx_control+0x1fac>)
 800f692:	2200      	movs	r2, #0
 800f694:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800f696:	4b5d      	ldr	r3, [pc, #372]	@ (800f80c <tx_control+0x1fac>)
 800f698:	2201      	movs	r2, #1
 800f69a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f69c:	4b67      	ldr	r3, [pc, #412]	@ (800f83c <tx_control+0x1fdc>)
 800f69e:	2255      	movs	r2, #85	@ 0x55
 800f6a0:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800f6a2:	4b67      	ldr	r3, [pc, #412]	@ (800f840 <tx_control+0x1fe0>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800f6a8:	e185      	b.n	800f9b6 <tx_control+0x2156>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f6aa:	4b66      	ldr	r3, [pc, #408]	@ (800f844 <tx_control+0x1fe4>)
 800f6ac:	22f1      	movs	r2, #241	@ 0xf1
 800f6ae:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f6b0:	4b64      	ldr	r3, [pc, #400]	@ (800f844 <tx_control+0x1fe4>)
 800f6b2:	223d      	movs	r2, #61	@ 0x3d
 800f6b4:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800f6b6:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800f6b8:	4b5c      	ldr	r3, [pc, #368]	@ (800f82c <tx_control+0x1fcc>)
 800f6ba:	4a62      	ldr	r2, [pc, #392]	@ (800f844 <tx_control+0x1fe4>)
 800f6bc:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800f6be:	4b5c      	ldr	r3, [pc, #368]	@ (800f830 <tx_control+0x1fd0>)
 800f6c0:	4a60      	ldr	r2, [pc, #384]	@ (800f844 <tx_control+0x1fe4>)
 800f6c2:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800f6c4:	4b5b      	ldr	r3, [pc, #364]	@ (800f834 <tx_control+0x1fd4>)
 800f6c6:	4a60      	ldr	r2, [pc, #384]	@ (800f848 <tx_control+0x1fe8>)
 800f6c8:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800f6ca:	4b4d      	ldr	r3, [pc, #308]	@ (800f800 <tx_control+0x1fa0>)
 800f6cc:	2202      	movs	r2, #2
 800f6ce:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800f6d0:	4b4e      	ldr	r3, [pc, #312]	@ (800f80c <tx_control+0x1fac>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f6d6:	4b59      	ldr	r3, [pc, #356]	@ (800f83c <tx_control+0x1fdc>)
 800f6d8:	2255      	movs	r2, #85	@ 0x55
 800f6da:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800f6dc:	4b58      	ldr	r3, [pc, #352]	@ (800f840 <tx_control+0x1fe0>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f6e2:	e168      	b.n	800f9b6 <tx_control+0x2156>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800f6e4:	4b59      	ldr	r3, [pc, #356]	@ (800f84c <tx_control+0x1fec>)
 800f6e6:	789b      	ldrb	r3, [r3, #2]
 800f6e8:	001a      	movs	r2, r3
 800f6ea:	4b59      	ldr	r3, [pc, #356]	@ (800f850 <tx_control+0x1ff0>)
 800f6ec:	0019      	movs	r1, r3
 800f6ee:	0010      	movs	r0, r2
 800f6f0:	f7f7 fd42 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f6f4:	4b57      	ldr	r3, [pc, #348]	@ (800f854 <tx_control+0x1ff4>)
 800f6f6:	0018      	movs	r0, r3
 800f6f8:	f006 fa90 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800f6fc:	4b53      	ldr	r3, [pc, #332]	@ (800f84c <tx_control+0x1fec>)
 800f6fe:	78db      	ldrb	r3, [r3, #3]
 800f700:	001a      	movs	r2, r3
 800f702:	4b55      	ldr	r3, [pc, #340]	@ (800f858 <tx_control+0x1ff8>)
 800f704:	0019      	movs	r1, r3
 800f706:	0010      	movs	r0, r2
 800f708:	f7f7 fd36 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f70c:	4b51      	ldr	r3, [pc, #324]	@ (800f854 <tx_control+0x1ff4>)
 800f70e:	0018      	movs	r0, r3
 800f710:	f006 fa84 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800f714:	4b4d      	ldr	r3, [pc, #308]	@ (800f84c <tx_control+0x1fec>)
 800f716:	791b      	ldrb	r3, [r3, #4]
 800f718:	001a      	movs	r2, r3
 800f71a:	4b50      	ldr	r3, [pc, #320]	@ (800f85c <tx_control+0x1ffc>)
 800f71c:	0019      	movs	r1, r3
 800f71e:	0010      	movs	r0, r2
 800f720:	f7f7 fd2a 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f724:	4b4b      	ldr	r3, [pc, #300]	@ (800f854 <tx_control+0x1ff4>)
 800f726:	0018      	movs	r0, r3
 800f728:	f006 fa78 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800f72c:	4b47      	ldr	r3, [pc, #284]	@ (800f84c <tx_control+0x1fec>)
 800f72e:	795b      	ldrb	r3, [r3, #5]
 800f730:	001a      	movs	r2, r3
 800f732:	4b4b      	ldr	r3, [pc, #300]	@ (800f860 <tx_control+0x2000>)
 800f734:	0019      	movs	r1, r3
 800f736:	0010      	movs	r0, r2
 800f738:	f7f7 fd1e 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f73c:	4b45      	ldr	r3, [pc, #276]	@ (800f854 <tx_control+0x1ff4>)
 800f73e:	0018      	movs	r0, r3
 800f740:	f006 fa6c 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800f744:	4b41      	ldr	r3, [pc, #260]	@ (800f84c <tx_control+0x1fec>)
 800f746:	799b      	ldrb	r3, [r3, #6]
 800f748:	001a      	movs	r2, r3
 800f74a:	4b46      	ldr	r3, [pc, #280]	@ (800f864 <tx_control+0x2004>)
 800f74c:	0019      	movs	r1, r3
 800f74e:	0010      	movs	r0, r2
 800f750:	f7f7 fd12 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f754:	4b3f      	ldr	r3, [pc, #252]	@ (800f854 <tx_control+0x1ff4>)
 800f756:	0018      	movs	r0, r3
 800f758:	f006 fa60 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800f75c:	4b3b      	ldr	r3, [pc, #236]	@ (800f84c <tx_control+0x1fec>)
 800f75e:	79db      	ldrb	r3, [r3, #7]
 800f760:	001a      	movs	r2, r3
 800f762:	4b41      	ldr	r3, [pc, #260]	@ (800f868 <tx_control+0x2008>)
 800f764:	0019      	movs	r1, r3
 800f766:	0010      	movs	r0, r2
 800f768:	f7f7 fd06 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f76c:	4b39      	ldr	r3, [pc, #228]	@ (800f854 <tx_control+0x1ff4>)
 800f76e:	0018      	movs	r0, r3
 800f770:	f006 fa54 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800f774:	4b35      	ldr	r3, [pc, #212]	@ (800f84c <tx_control+0x1fec>)
 800f776:	7a1b      	ldrb	r3, [r3, #8]
 800f778:	001a      	movs	r2, r3
 800f77a:	4b3c      	ldr	r3, [pc, #240]	@ (800f86c <tx_control+0x200c>)
 800f77c:	0019      	movs	r1, r3
 800f77e:	0010      	movs	r0, r2
 800f780:	f7f7 fcfa 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f784:	4b33      	ldr	r3, [pc, #204]	@ (800f854 <tx_control+0x1ff4>)
 800f786:	0018      	movs	r0, r3
 800f788:	f006 fa48 	bl	8015c1c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800f78c:	4b2f      	ldr	r3, [pc, #188]	@ (800f84c <tx_control+0x1fec>)
 800f78e:	7a5b      	ldrb	r3, [r3, #9]
 800f790:	001a      	movs	r2, r3
 800f792:	4b37      	ldr	r3, [pc, #220]	@ (800f870 <tx_control+0x2010>)
 800f794:	0019      	movs	r1, r3
 800f796:	0010      	movs	r0, r2
 800f798:	f7f7 fcee 	bl	8007178 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f79c:	4b2d      	ldr	r3, [pc, #180]	@ (800f854 <tx_control+0x1ff4>)
 800f79e:	0018      	movs	r0, r3
 800f7a0:	f006 fa3c 	bl	8015c1c <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f7a4:	4b27      	ldr	r3, [pc, #156]	@ (800f844 <tx_control+0x1fe4>)
 800f7a6:	22f1      	movs	r2, #241	@ 0xf1
 800f7a8:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f7aa:	4b26      	ldr	r3, [pc, #152]	@ (800f844 <tx_control+0x1fe4>)
 800f7ac:	223d      	movs	r2, #61	@ 0x3d
 800f7ae:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800f7b0:	e005      	b.n	800f7be <tx_control+0x1f5e>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f7b2:	4b24      	ldr	r3, [pc, #144]	@ (800f844 <tx_control+0x1fe4>)
 800f7b4:	22f1      	movs	r2, #241	@ 0xf1
 800f7b6:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f7b8:	4b22      	ldr	r3, [pc, #136]	@ (800f844 <tx_control+0x1fe4>)
 800f7ba:	223e      	movs	r2, #62	@ 0x3e
 800f7bc:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800f7be:	4b1b      	ldr	r3, [pc, #108]	@ (800f82c <tx_control+0x1fcc>)
 800f7c0:	4a20      	ldr	r2, [pc, #128]	@ (800f844 <tx_control+0x1fe4>)
 800f7c2:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800f7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f830 <tx_control+0x1fd0>)
 800f7c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f844 <tx_control+0x1fe4>)
 800f7c8:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800f7ca:	4b1a      	ldr	r3, [pc, #104]	@ (800f834 <tx_control+0x1fd4>)
 800f7cc:	4a1e      	ldr	r2, [pc, #120]	@ (800f848 <tx_control+0x1fe8>)
 800f7ce:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f800 <tx_control+0x1fa0>)
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800f7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f80c <tx_control+0x1fac>)
 800f7d8:	2201      	movs	r2, #1
 800f7da:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f7dc:	4b17      	ldr	r3, [pc, #92]	@ (800f83c <tx_control+0x1fdc>)
 800f7de:	2255      	movs	r2, #85	@ 0x55
 800f7e0:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800f7e2:	4b17      	ldr	r3, [pc, #92]	@ (800f840 <tx_control+0x1fe0>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f7e8:	e0e5      	b.n	800f9b6 <tx_control+0x2156>
 800f7ea:	46c0      	nop			@ (mov r8, r8)
 800f7ec:	20001054 	.word	0x20001054
 800f7f0:	20000b88 	.word	0x20000b88
 800f7f4:	20000bb4 	.word	0x20000bb4
 800f7f8:	20000c4c 	.word	0x20000c4c
 800f7fc:	20000fa8 	.word	0x20000fa8
 800f800:	20000e40 	.word	0x20000e40
 800f804:	200000b8 	.word	0x200000b8
 800f808:	20000de8 	.word	0x20000de8
 800f80c:	20000e2c 	.word	0x20000e2c
 800f810:	20000b65 	.word	0x20000b65
 800f814:	20000fb8 	.word	0x20000fb8
 800f818:	2000105c 	.word	0x2000105c
 800f81c:	20001064 	.word	0x20001064
 800f820:	2000106c 	.word	0x2000106c
 800f824:	20000e44 	.word	0x20000e44
 800f828:	20000b64 	.word	0x20000b64
 800f82c:	20000e24 	.word	0x20000e24
 800f830:	20000e1c 	.word	0x20000e1c
 800f834:	20000e20 	.word	0x20000e20
 800f838:	20000fc8 	.word	0x20000fc8
 800f83c:	20000e29 	.word	0x20000e29
 800f840:	20000e34 	.word	0x20000e34
 800f844:	20000dc4 	.word	0x20000dc4
 800f848:	20000dc5 	.word	0x20000dc5
 800f84c:	20000994 	.word	0x20000994
 800f850:	0803f808 	.word	0x0803f808
 800f854:	2000055c 	.word	0x2000055c
 800f858:	0803f809 	.word	0x0803f809
 800f85c:	0803f80a 	.word	0x0803f80a
 800f860:	0803f80b 	.word	0x0803f80b
 800f864:	0803f80c 	.word	0x0803f80c
 800f868:	0803f80d 	.word	0x0803f80d
 800f86c:	0803f80e 	.word	0x0803f80e
 800f870:	0803f80f 	.word	0x0803f80f
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800f874:	4bec      	ldr	r3, [pc, #944]	@ (800fc28 <tx_control+0x23c8>)
 800f876:	789a      	ldrb	r2, [r3, #2]
 800f878:	4bec      	ldr	r3, [pc, #944]	@ (800fc2c <tx_control+0x23cc>)
 800f87a:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800f87c:	4bea      	ldr	r3, [pc, #936]	@ (800fc28 <tx_control+0x23c8>)
 800f87e:	78da      	ldrb	r2, [r3, #3]
 800f880:	4beb      	ldr	r3, [pc, #940]	@ (800fc30 <tx_control+0x23d0>)
 800f882:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800f884:	4be8      	ldr	r3, [pc, #928]	@ (800fc28 <tx_control+0x23c8>)
 800f886:	791a      	ldrb	r2, [r3, #4]
 800f888:	4bea      	ldr	r3, [pc, #936]	@ (800fc34 <tx_control+0x23d4>)
 800f88a:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800f88c:	4be6      	ldr	r3, [pc, #920]	@ (800fc28 <tx_control+0x23c8>)
 800f88e:	795a      	ldrb	r2, [r3, #5]
 800f890:	4be9      	ldr	r3, [pc, #932]	@ (800fc38 <tx_control+0x23d8>)
 800f892:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800f894:	4be4      	ldr	r3, [pc, #912]	@ (800fc28 <tx_control+0x23c8>)
 800f896:	799a      	ldrb	r2, [r3, #6]
 800f898:	4be8      	ldr	r3, [pc, #928]	@ (800fc3c <tx_control+0x23dc>)
 800f89a:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800f89c:	4be2      	ldr	r3, [pc, #904]	@ (800fc28 <tx_control+0x23c8>)
 800f89e:	79da      	ldrb	r2, [r3, #7]
 800f8a0:	4be7      	ldr	r3, [pc, #924]	@ (800fc40 <tx_control+0x23e0>)
 800f8a2:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800f8a4:	4be0      	ldr	r3, [pc, #896]	@ (800fc28 <tx_control+0x23c8>)
 800f8a6:	7a1a      	ldrb	r2, [r3, #8]
 800f8a8:	4be6      	ldr	r3, [pc, #920]	@ (800fc44 <tx_control+0x23e4>)
 800f8aa:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800f8ac:	4be5      	ldr	r3, [pc, #916]	@ (800fc44 <tx_control+0x23e4>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	015b      	lsls	r3, r3, #5
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4be3      	ldr	r3, [pc, #908]	@ (800fc44 <tx_control+0x23e4>)
 800f8b6:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800f8b8:	4be2      	ldr	r3, [pc, #904]	@ (800fc44 <tx_control+0x23e4>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	b25b      	sxtb	r3, r3
 800f8be:	221f      	movs	r2, #31
 800f8c0:	4393      	bics	r3, r2
 800f8c2:	b25a      	sxtb	r2, r3
 800f8c4:	4bda      	ldr	r3, [pc, #872]	@ (800fc30 <tx_control+0x23d0>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	b25b      	sxtb	r3, r3
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	b25b      	sxtb	r3, r3
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	4bd7      	ldr	r3, [pc, #860]	@ (800fc30 <tx_control+0x23d0>)
 800f8d2:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800f8d4:	4bd4      	ldr	r3, [pc, #848]	@ (800fc28 <tx_control+0x23c8>)
 800f8d6:	7a5a      	ldrb	r2, [r3, #9]
 800f8d8:	4bda      	ldr	r3, [pc, #872]	@ (800fc44 <tx_control+0x23e4>)
 800f8da:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800f8dc:	4bd6      	ldr	r3, [pc, #856]	@ (800fc38 <tx_control+0x23d8>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	2240      	movs	r2, #64	@ 0x40
 800f8e2:	4393      	bics	r3, r2
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4bd4      	ldr	r3, [pc, #848]	@ (800fc38 <tx_control+0x23d8>)
 800f8e8:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800f8ea:	4bd0      	ldr	r3, [pc, #832]	@ (800fc2c <tx_control+0x23cc>)
 800f8ec:	781a      	ldrb	r2, [r3, #0]
 800f8ee:	4bd6      	ldr	r3, [pc, #856]	@ (800fc48 <tx_control+0x23e8>)
 800f8f0:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800f8f2:	4bcf      	ldr	r3, [pc, #828]	@ (800fc30 <tx_control+0x23d0>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	221f      	movs	r2, #31
 800f8f8:	4013      	ands	r3, r2
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	4bd2      	ldr	r3, [pc, #840]	@ (800fc48 <tx_control+0x23e8>)
 800f8fe:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800f900:	4bcc      	ldr	r3, [pc, #816]	@ (800fc34 <tx_control+0x23d4>)
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	4bd0      	ldr	r3, [pc, #832]	@ (800fc48 <tx_control+0x23e8>)
 800f906:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800f908:	4bc9      	ldr	r3, [pc, #804]	@ (800fc30 <tx_control+0x23d0>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	095b      	lsrs	r3, r3, #5
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	4bcd      	ldr	r3, [pc, #820]	@ (800fc48 <tx_control+0x23e8>)
 800f912:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800f914:	49cc      	ldr	r1, [pc, #816]	@ (800fc48 <tx_control+0x23e8>)
 800f916:	4bcd      	ldr	r3, [pc, #820]	@ (800fc4c <tx_control+0x23ec>)
 800f918:	2201      	movs	r2, #1
 800f91a:	0018      	movs	r0, r3
 800f91c:	f008 fa34 	bl	8017d88 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800f920:	4bc5      	ldr	r3, [pc, #788]	@ (800fc38 <tx_control+0x23d8>)
 800f922:	781a      	ldrb	r2, [r3, #0]
 800f924:	4bca      	ldr	r3, [pc, #808]	@ (800fc50 <tx_control+0x23f0>)
 800f926:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800f928:	4bc4      	ldr	r3, [pc, #784]	@ (800fc3c <tx_control+0x23dc>)
 800f92a:	781a      	ldrb	r2, [r3, #0]
 800f92c:	4bc8      	ldr	r3, [pc, #800]	@ (800fc50 <tx_control+0x23f0>)
 800f92e:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800f930:	4bc3      	ldr	r3, [pc, #780]	@ (800fc40 <tx_control+0x23e0>)
 800f932:	781a      	ldrb	r2, [r3, #0]
 800f934:	4bc6      	ldr	r3, [pc, #792]	@ (800fc50 <tx_control+0x23f0>)
 800f936:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800f938:	4bbb      	ldr	r3, [pc, #748]	@ (800fc28 <tx_control+0x23c8>)
 800f93a:	7a5a      	ldrb	r2, [r3, #9]
 800f93c:	4bc4      	ldr	r3, [pc, #784]	@ (800fc50 <tx_control+0x23f0>)
 800f93e:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f940:	4bc3      	ldr	r3, [pc, #780]	@ (800fc50 <tx_control+0x23f0>)
 800f942:	2200      	movs	r2, #0
 800f944:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f946:	4bc2      	ldr	r3, [pc, #776]	@ (800fc50 <tx_control+0x23f0>)
 800f948:	2200      	movs	r2, #0
 800f94a:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800f94c:	49c0      	ldr	r1, [pc, #768]	@ (800fc50 <tx_control+0x23f0>)
 800f94e:	4bbf      	ldr	r3, [pc, #764]	@ (800fc4c <tx_control+0x23ec>)
 800f950:	2201      	movs	r2, #1
 800f952:	0018      	movs	r0, r3
 800f954:	f008 f8f4 	bl	8017b40 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800f958:	4bb9      	ldr	r3, [pc, #740]	@ (800fc40 <tx_control+0x23e0>)
 800f95a:	781a      	ldrb	r2, [r3, #0]
 800f95c:	4bbd      	ldr	r3, [pc, #756]	@ (800fc54 <tx_control+0x23f4>)
 800f95e:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800f960:	4bbd      	ldr	r3, [pc, #756]	@ (800fc58 <tx_control+0x23f8>)
 800f962:	2201      	movs	r2, #1
 800f964:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f966:	4bbd      	ldr	r3, [pc, #756]	@ (800fc5c <tx_control+0x23fc>)
 800f968:	22f1      	movs	r2, #241	@ 0xf1
 800f96a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f96c:	4bbb      	ldr	r3, [pc, #748]	@ (800fc5c <tx_control+0x23fc>)
 800f96e:	223d      	movs	r2, #61	@ 0x3d
 800f970:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800f972:	e005      	b.n	800f980 <tx_control+0x2120>
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 800f974:	4bb9      	ldr	r3, [pc, #740]	@ (800fc5c <tx_control+0x23fc>)
 800f976:	22f1      	movs	r2, #241	@ 0xf1
 800f978:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f97a:	4bb8      	ldr	r3, [pc, #736]	@ (800fc5c <tx_control+0x23fc>)
 800f97c:	223e      	movs	r2, #62	@ 0x3e
 800f97e:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 800f980:	4bb7      	ldr	r3, [pc, #732]	@ (800fc60 <tx_control+0x2400>)
 800f982:	4ab6      	ldr	r2, [pc, #728]	@ (800fc5c <tx_control+0x23fc>)
 800f984:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f986:	4bb7      	ldr	r3, [pc, #732]	@ (800fc64 <tx_control+0x2404>)
 800f988:	4ab4      	ldr	r2, [pc, #720]	@ (800fc5c <tx_control+0x23fc>)
 800f98a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 800f98c:	4bb6      	ldr	r3, [pc, #728]	@ (800fc68 <tx_control+0x2408>)
 800f98e:	4ab7      	ldr	r2, [pc, #732]	@ (800fc6c <tx_control+0x240c>)
 800f990:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 800f992:	4bb7      	ldr	r3, [pc, #732]	@ (800fc70 <tx_control+0x2410>)
 800f994:	2202      	movs	r2, #2
 800f996:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 800f998:	4bb6      	ldr	r3, [pc, #728]	@ (800fc74 <tx_control+0x2414>)
 800f99a:	2201      	movs	r2, #1
 800f99c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f99e:	4bb6      	ldr	r3, [pc, #728]	@ (800fc78 <tx_control+0x2418>)
 800f9a0:	2255      	movs	r2, #85	@ 0x55
 800f9a2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800f9a4:	4bb5      	ldr	r3, [pc, #724]	@ (800fc7c <tx_control+0x241c>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f9aa:	e004      	b.n	800f9b6 <tx_control+0x2156>
		goto end_tx_control;
 800f9ac:	46c0      	nop			@ (mov r8, r8)
 800f9ae:	e002      	b.n	800f9b6 <tx_control+0x2156>
		goto end_tx_control;//	jp end_tx_control
 800f9b0:	46c0      	nop			@ (mov r8, r8)
 800f9b2:	e000      	b.n	800f9b6 <tx_control+0x2156>
			goto end_tx_control;		//jp		end_tx_control
 800f9b4:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 800f9b6:	4bb0      	ldr	r3, [pc, #704]	@ (800fc78 <tx_control+0x2418>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d11b      	bne.n	800f9f6 <tx_control+0x2196>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 800f9be:	4bb0      	ldr	r3, [pc, #704]	@ (800fc80 <tx_control+0x2420>)
 800f9c0:	791b      	ldrb	r3, [r3, #4]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	4053      	eors	r3, r2
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d103      	bne.n	800f9d4 <tx_control+0x2174>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 800f9cc:	4bad      	ldr	r3, [pc, #692]	@ (800fc84 <tx_control+0x2424>)
 800f9ce:	22aa      	movs	r2, #170	@ 0xaa
 800f9d0:	701a      	strb	r2, [r3, #0]
 800f9d2:	e000      	b.n	800f9d6 <tx_control+0x2176>
			goto ask_resetLoopTx;
 800f9d4:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 800f9d6:	4bac      	ldr	r3, [pc, #688]	@ (800fc88 <tx_control+0x2428>)
 800f9d8:	791b      	ldrb	r3, [r3, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d109      	bne.n	800f9f2 <tx_control+0x2192>
resetLoopTx:
 800f9de:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 800f9e0:	4ba4      	ldr	r3, [pc, #656]	@ (800fc74 <tx_control+0x2414>)
 800f9e2:	795b      	ldrb	r3, [r3, #5]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	4053      	eors	r3, r2
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d106      	bne.n	800f9fc <tx_control+0x219c>
		asm ("nop");
 800f9ee:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 800f9f0:	e7f6      	b.n	800f9e0 <tx_control+0x2180>
		asm ("nop");
 800f9f2:	46c0      	nop			@ (mov r8, r8)
 800f9f4:	e7fd      	b.n	800f9f2 <tx_control+0x2192>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 800f9f6:	46c0      	nop			@ (mov r8, r8)
 800f9f8:	f001 f8f0 	bl	8010bdc <tx_control+0x337c>
			goto no_resetLoopTx;
 800f9fc:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 800f9fe:	f001 f8ed 	bl	8010bdc <tx_control+0x337c>
			goto tx_wifi_01;
 800fa02:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 800fa04:	4ba1      	ldr	r3, [pc, #644]	@ (800fc8c <tx_control+0x242c>)
 800fa06:	789b      	ldrb	r3, [r3, #2]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d119      	bne.n	800fa40 <tx_control+0x21e0>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 800fa0c:	4ba0      	ldr	r3, [pc, #640]	@ (800fc90 <tx_control+0x2430>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 800fa12:	4b9f      	ldr	r3, [pc, #636]	@ (800fc90 <tx_control+0x2430>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 800fa18:	4b9d      	ldr	r3, [pc, #628]	@ (800fc90 <tx_control+0x2430>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 800fa1e:	4b9c      	ldr	r3, [pc, #624]	@ (800fc90 <tx_control+0x2430>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 800fa24:	4b9a      	ldr	r3, [pc, #616]	@ (800fc90 <tx_control+0x2430>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 800fa2a:	4b9a      	ldr	r3, [pc, #616]	@ (800fc94 <tx_control+0x2434>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 800fa30:	4b99      	ldr	r3, [pc, #612]	@ (800fc98 <tx_control+0x2438>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 800fa36:	4b99      	ldr	r3, [pc, #612]	@ (800fc9c <tx_control+0x243c>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 800fa3c:	f001 f8cb 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_OK;
 800fa40:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 800fa42:	4b93      	ldr	r3, [pc, #588]	@ (800fc90 <tx_control+0x2430>)
 800fa44:	2201      	movs	r2, #1
 800fa46:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 800fa48:	4b8d      	ldr	r3, [pc, #564]	@ (800fc80 <tx_control+0x2420>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	4053      	eors	r3, r2
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <tx_control+0x21fa>
 800fa56:	f001 f8b1 	bl	8010bbc <tx_control+0x335c>
			goto tx_wifi_OK_01;
 800fa5a:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 800fa5c:	4b86      	ldr	r3, [pc, #536]	@ (800fc78 <tx_control+0x2418>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <tx_control+0x2208>
 800fa64:	f001 f8ad 	bl	8010bc2 <tx_control+0x3362>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 800fa68:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 800fa6a:	4b89      	ldr	r3, [pc, #548]	@ (800fc90 <tx_control+0x2430>)
 800fa6c:	785b      	ldrb	r3, [r3, #1]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d100      	bne.n	800fa74 <tx_control+0x2214>
 800fa72:	e220      	b.n	800feb6 <tx_control+0x2656>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 800fa74:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 800fa76:	4b86      	ldr	r3, [pc, #536]	@ (800fc90 <tx_control+0x2430>)
 800fa78:	78db      	ldrb	r3, [r3, #3]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d000      	beq.n	800fa80 <tx_control+0x2220>
 800fa7e:	e154      	b.n	800fd2a <tx_control+0x24ca>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 800fa80:	4b83      	ldr	r3, [pc, #524]	@ (800fc90 <tx_control+0x2430>)
 800fa82:	2201      	movs	r2, #1
 800fa84:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 800fa86:	4b83      	ldr	r3, [pc, #524]	@ (800fc94 <tx_control+0x2434>)
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d130      	bne.n	800faf0 <tx_control+0x2290>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 800fa8e:	4b84      	ldr	r3, [pc, #528]	@ (800fca0 <tx_control+0x2440>)
 800fa90:	781a      	ldrb	r2, [r3, #0]
 800fa92:	4b84      	ldr	r3, [pc, #528]	@ (800fca4 <tx_control+0x2444>)
 800fa94:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 800fa96:	4b84      	ldr	r3, [pc, #528]	@ (800fca8 <tx_control+0x2448>)
 800fa98:	781a      	ldrb	r2, [r3, #0]
 800fa9a:	4b84      	ldr	r3, [pc, #528]	@ (800fcac <tx_control+0x244c>)
 800fa9c:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 800fa9e:	4b84      	ldr	r3, [pc, #528]	@ (800fcb0 <tx_control+0x2450>)
 800faa0:	4a84      	ldr	r2, [pc, #528]	@ (800fcb4 <tx_control+0x2454>)
 800faa2:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 800faa4:	4b84      	ldr	r3, [pc, #528]	@ (800fcb8 <tx_control+0x2458>)
 800faa6:	4a85      	ldr	r2, [pc, #532]	@ (800fcbc <tx_control+0x245c>)
 800faa8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 800faaa:	4b81      	ldr	r3, [pc, #516]	@ (800fcb0 <tx_control+0x2450>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	337e      	adds	r3, #126	@ 0x7e
 800fab0:	4a7e      	ldr	r2, [pc, #504]	@ (800fcac <tx_control+0x244c>)
 800fab2:	7812      	ldrb	r2, [r2, #0]
 800fab4:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800fab6:	4b82      	ldr	r3, [pc, #520]	@ (800fcc0 <tx_control+0x2460>)
 800fab8:	22aa      	movs	r2, #170	@ 0xaa
 800faba:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 800fabc:	4b7e      	ldr	r3, [pc, #504]	@ (800fcb8 <tx_control+0x2458>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a78      	ldr	r2, [pc, #480]	@ (800fca4 <tx_control+0x2444>)
 800fac2:	7812      	ldrb	r2, [r2, #0]
 800fac4:	01d2      	lsls	r2, r2, #7
 800fac6:	189a      	adds	r2, r3, r2
 800fac8:	4b7e      	ldr	r3, [pc, #504]	@ (800fcc4 <tx_control+0x2464>)
 800faca:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800facc:	4b78      	ldr	r3, [pc, #480]	@ (800fcb0 <tx_control+0x2450>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	4b7d      	ldr	r3, [pc, #500]	@ (800fcc8 <tx_control+0x2468>)
 800fad2:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800fad4:	f7f7 fa36 	bl	8006f44 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 800fad8:	4b7c      	ldr	r3, [pc, #496]	@ (800fccc <tx_control+0x246c>)
 800fada:	881a      	ldrh	r2, [r3, #0]
 800fadc:	4b7c      	ldr	r3, [pc, #496]	@ (800fcd0 <tx_control+0x2470>)
 800fade:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800fae0:	4b7c      	ldr	r3, [pc, #496]	@ (800fcd4 <tx_control+0x2474>)
 800fae2:	4a7d      	ldr	r2, [pc, #500]	@ (800fcd8 <tx_control+0x2478>)
 800fae4:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800fae6:	f7f7 f90f 	bl	8006d08 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 800faea:	f7f7 f947 	bl	8006d7c <save_timeUNIX>
 800faee:	e000      	b.n	800faf2 <tx_control+0x2292>
			goto tx_wifi_timeLogger_cmd;
 800faf0:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800faf2:	4b7a      	ldr	r3, [pc, #488]	@ (800fcdc <tx_control+0x247c>)
 800faf4:	2240      	movs	r2, #64	@ 0x40
 800faf6:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 800faf8:	4b78      	ldr	r3, [pc, #480]	@ (800fcdc <tx_control+0x247c>)
 800fafa:	2285      	movs	r2, #133	@ 0x85
 800fafc:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800fafe:	4b78      	ldr	r3, [pc, #480]	@ (800fce0 <tx_control+0x2480>)
 800fb00:	0018      	movs	r0, r3
 800fb02:	f7f3 f88b 	bl	8002c1c <findLastValue>
 800fb06:	0003      	movs	r3, r0
 800fb08:	b2da      	uxtb	r2, r3
 800fb0a:	4b74      	ldr	r3, [pc, #464]	@ (800fcdc <tx_control+0x247c>)
 800fb0c:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800fb0e:	4b75      	ldr	r3, [pc, #468]	@ (800fce4 <tx_control+0x2484>)
 800fb10:	0018      	movs	r0, r3
 800fb12:	f7f3 f883 	bl	8002c1c <findLastValue>
 800fb16:	0003      	movs	r3, r0
 800fb18:	b2da      	uxtb	r2, r3
 800fb1a:	4b70      	ldr	r3, [pc, #448]	@ (800fcdc <tx_control+0x247c>)
 800fb1c:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 800fb1e:	4b72      	ldr	r3, [pc, #456]	@ (800fce8 <tx_control+0x2488>)
 800fb20:	881b      	ldrh	r3, [r3, #0]
 800fb22:	0a1b      	lsrs	r3, r3, #8
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	4b6c      	ldr	r3, [pc, #432]	@ (800fcdc <tx_control+0x247c>)
 800fb2a:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800fb2c:	4b6e      	ldr	r3, [pc, #440]	@ (800fce8 <tx_control+0x2488>)
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	b2da      	uxtb	r2, r3
 800fb32:	4b6a      	ldr	r3, [pc, #424]	@ (800fcdc <tx_control+0x247c>)
 800fb34:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 800fb36:	4b6d      	ldr	r3, [pc, #436]	@ (800fcec <tx_control+0x248c>)
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	0a1b      	lsrs	r3, r3, #8
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	4b66      	ldr	r3, [pc, #408]	@ (800fcdc <tx_control+0x247c>)
 800fb42:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800fb44:	4b69      	ldr	r3, [pc, #420]	@ (800fcec <tx_control+0x248c>)
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	4b64      	ldr	r3, [pc, #400]	@ (800fcdc <tx_control+0x247c>)
 800fb4c:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = findLastValue((uint32_t) &eeLat1);
 800fb4e:	4b68      	ldr	r3, [pc, #416]	@ (800fcf0 <tx_control+0x2490>)
 800fb50:	0018      	movs	r0, r3
 800fb52:	f7f3 f863 	bl	8002c1c <findLastValue>
 800fb56:	0003      	movs	r3, r0
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	4b60      	ldr	r3, [pc, #384]	@ (800fcdc <tx_control+0x247c>)
 800fb5c:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = findLastValue((uint32_t) &eeLat2);
 800fb5e:	4b65      	ldr	r3, [pc, #404]	@ (800fcf4 <tx_control+0x2494>)
 800fb60:	0018      	movs	r0, r3
 800fb62:	f7f3 f85b 	bl	8002c1c <findLastValue>
 800fb66:	0003      	movs	r3, r0
 800fb68:	b2da      	uxtb	r2, r3
 800fb6a:	4b5c      	ldr	r3, [pc, #368]	@ (800fcdc <tx_control+0x247c>)
 800fb6c:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = findLastValue((uint32_t) &eeLat3);
 800fb6e:	4b62      	ldr	r3, [pc, #392]	@ (800fcf8 <tx_control+0x2498>)
 800fb70:	0018      	movs	r0, r3
 800fb72:	f7f3 f853 	bl	8002c1c <findLastValue>
 800fb76:	0003      	movs	r3, r0
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b58      	ldr	r3, [pc, #352]	@ (800fcdc <tx_control+0x247c>)
 800fb7c:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = findLastValue((uint32_t) &eeLat4);
 800fb7e:	4b5f      	ldr	r3, [pc, #380]	@ (800fcfc <tx_control+0x249c>)
 800fb80:	0018      	movs	r0, r3
 800fb82:	f7f3 f84b 	bl	8002c1c <findLastValue>
 800fb86:	0003      	movs	r3, r0
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	4b54      	ldr	r3, [pc, #336]	@ (800fcdc <tx_control+0x247c>)
 800fb8c:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = findLastValue((uint32_t) &eeLong1);
 800fb8e:	4b5c      	ldr	r3, [pc, #368]	@ (800fd00 <tx_control+0x24a0>)
 800fb90:	0018      	movs	r0, r3
 800fb92:	f7f3 f843 	bl	8002c1c <findLastValue>
 800fb96:	0003      	movs	r3, r0
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	4b50      	ldr	r3, [pc, #320]	@ (800fcdc <tx_control+0x247c>)
 800fb9c:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = findLastValue((uint32_t) &eeLong2);
 800fb9e:	4b59      	ldr	r3, [pc, #356]	@ (800fd04 <tx_control+0x24a4>)
 800fba0:	0018      	movs	r0, r3
 800fba2:	f7f3 f83b 	bl	8002c1c <findLastValue>
 800fba6:	0003      	movs	r3, r0
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	4b4c      	ldr	r3, [pc, #304]	@ (800fcdc <tx_control+0x247c>)
 800fbac:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = findLastValue((uint32_t) &eeLong3);
 800fbae:	4b56      	ldr	r3, [pc, #344]	@ (800fd08 <tx_control+0x24a8>)
 800fbb0:	0018      	movs	r0, r3
 800fbb2:	f7f3 f833 	bl	8002c1c <findLastValue>
 800fbb6:	0003      	movs	r3, r0
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	4b48      	ldr	r3, [pc, #288]	@ (800fcdc <tx_control+0x247c>)
 800fbbc:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = findLastValue((uint32_t) &eeLong4);
 800fbbe:	4b53      	ldr	r3, [pc, #332]	@ (800fd0c <tx_control+0x24ac>)
 800fbc0:	0018      	movs	r0, r3
 800fbc2:	f7f3 f82b 	bl	8002c1c <findLastValue>
 800fbc6:	0003      	movs	r3, r0
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	4b44      	ldr	r3, [pc, #272]	@ (800fcdc <tx_control+0x247c>)
 800fbcc:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800fbce:	4b24      	ldr	r3, [pc, #144]	@ (800fc60 <tx_control+0x2400>)
 800fbd0:	4a42      	ldr	r2, [pc, #264]	@ (800fcdc <tx_control+0x247c>)
 800fbd2:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800fbd4:	4b23      	ldr	r3, [pc, #140]	@ (800fc64 <tx_control+0x2404>)
 800fbd6:	4a41      	ldr	r2, [pc, #260]	@ (800fcdc <tx_control+0x247c>)
 800fbd8:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800fbda:	4b23      	ldr	r3, [pc, #140]	@ (800fc68 <tx_control+0x2408>)
 800fbdc:	4a4c      	ldr	r2, [pc, #304]	@ (800fd10 <tx_control+0x24b0>)
 800fbde:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800fbe0:	4b23      	ldr	r3, [pc, #140]	@ (800fc70 <tx_control+0x2410>)
 800fbe2:	2210      	movs	r2, #16
 800fbe4:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fbe6:	4b23      	ldr	r3, [pc, #140]	@ (800fc74 <tx_control+0x2414>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fbec:	4b49      	ldr	r3, [pc, #292]	@ (800fd14 <tx_control+0x24b4>)
 800fbee:	2200      	movs	r2, #0
 800fbf0:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800fbf2:	4b20      	ldr	r3, [pc, #128]	@ (800fc74 <tx_control+0x2414>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fbf8:	4b1f      	ldr	r3, [pc, #124]	@ (800fc78 <tx_control+0x2418>)
 800fbfa:	2255      	movs	r2, #85	@ 0x55
 800fbfc:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800fbfe:	4b1f      	ldr	r3, [pc, #124]	@ (800fc7c <tx_control+0x241c>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 800fc04:	4b23      	ldr	r3, [pc, #140]	@ (800fc94 <tx_control+0x2434>)
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d000      	beq.n	800fc0e <tx_control+0x23ae>
 800fc0c:	e084      	b.n	800fd18 <tx_control+0x24b8>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 800fc0e:	4b24      	ldr	r3, [pc, #144]	@ (800fca0 <tx_control+0x2440>)
 800fc10:	781a      	ldrb	r2, [r3, #0]
 800fc12:	4b21      	ldr	r3, [pc, #132]	@ (800fc98 <tx_control+0x2438>)
 800fc14:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 800fc16:	4b24      	ldr	r3, [pc, #144]	@ (800fca8 <tx_control+0x2448>)
 800fc18:	781a      	ldrb	r2, [r3, #0]
 800fc1a:	4b20      	ldr	r3, [pc, #128]	@ (800fc9c <tx_control+0x243c>)
 800fc1c:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 800fc1e:	4b1d      	ldr	r3, [pc, #116]	@ (800fc94 <tx_control+0x2434>)
 800fc20:	2200      	movs	r2, #0
 800fc22:	801a      	strh	r2, [r3, #0]
 800fc24:	e079      	b.n	800fd1a <tx_control+0x24ba>
 800fc26:	46c0      	nop			@ (mov r8, r8)
 800fc28:	20000994 	.word	0x20000994
 800fc2c:	20001080 	.word	0x20001080
 800fc30:	20001081 	.word	0x20001081
 800fc34:	20001082 	.word	0x20001082
 800fc38:	20001083 	.word	0x20001083
 800fc3c:	20001084 	.word	0x20001084
 800fc40:	20001085 	.word	0x20001085
 800fc44:	20000b64 	.word	0x20000b64
 800fc48:	2000109c 	.word	0x2000109c
 800fc4c:	20000570 	.word	0x20000570
 800fc50:	20001088 	.word	0x20001088
 800fc54:	200010f9 	.word	0x200010f9
 800fc58:	20001078 	.word	0x20001078
 800fc5c:	20000dc4 	.word	0x20000dc4
 800fc60:	20000e24 	.word	0x20000e24
 800fc64:	20000e1c 	.word	0x20000e1c
 800fc68:	20000e20 	.word	0x20000e20
 800fc6c:	20000dc5 	.word	0x20000dc5
 800fc70:	20000e40 	.word	0x20000e40
 800fc74:	20000e2c 	.word	0x20000e2c
 800fc78:	20000e29 	.word	0x20000e29
 800fc7c:	20000e34 	.word	0x20000e34
 800fc80:	20000eec 	.word	0x20000eec
 800fc84:	20000ef4 	.word	0x20000ef4
 800fc88:	20001054 	.word	0x20001054
 800fc8c:	200010fc 	.word	0x200010fc
 800fc90:	20000f60 	.word	0x20000f60
 800fc94:	20000f88 	.word	0x20000f88
 800fc98:	20000f86 	.word	0x20000f86
 800fc9c:	20000f87 	.word	0x20000f87
 800fca0:	20000dbd 	.word	0x20000dbd
 800fca4:	20000daa 	.word	0x20000daa
 800fca8:	20000dbc 	.word	0x20000dbc
 800fcac:	20000dab 	.word	0x20000dab
 800fcb0:	20000db4 	.word	0x20000db4
 800fcb4:	20000c9c 	.word	0x20000c9c
 800fcb8:	20000db0 	.word	0x20000db0
 800fcbc:	0803c000 	.word	0x0803c000
 800fcc0:	20000d9c 	.word	0x20000d9c
 800fcc4:	20000da0 	.word	0x20000da0
 800fcc8:	20000da4 	.word	0x20000da4
 800fccc:	2000104a 	.word	0x2000104a
 800fcd0:	2000104e 	.word	0x2000104e
 800fcd4:	20001050 	.word	0x20001050
 800fcd8:	0803f810 	.word	0x0803f810
 800fcdc:	20000f68 	.word	0x20000f68
 800fce0:	0803f07b 	.word	0x0803f07b
 800fce4:	0803f07c 	.word	0x0803f07c
 800fce8:	20000dc0 	.word	0x20000dc0
 800fcec:	20000dc2 	.word	0x20000dc2
 800fcf0:	0803f808 	.word	0x0803f808
 800fcf4:	0803f809 	.word	0x0803f809
 800fcf8:	0803f80a 	.word	0x0803f80a
 800fcfc:	0803f80b 	.word	0x0803f80b
 800fd00:	0803f80c 	.word	0x0803f80c
 800fd04:	0803f80d 	.word	0x0803f80d
 800fd08:	0803f80e 	.word	0x0803f80e
 800fd0c:	0803f80f 	.word	0x0803f80f
 800fd10:	20000f78 	.word	0x20000f78
 800fd14:	20000e44 	.word	0x20000e44
			goto tx_wifi_timeLogger_noInit;
 800fd18:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800fd1a:	4be4      	ldr	r3, [pc, #912]	@ (80100ac <tx_control+0x284c>)
 800fd1c:	2203      	movs	r2, #3
 800fd1e:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 800fd20:	4be3      	ldr	r3, [pc, #908]	@ (80100b0 <tx_control+0x2850>)
 800fd22:	4ae4      	ldr	r2, [pc, #912]	@ (80100b4 <tx_control+0x2854>)
 800fd24:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800fd26:	f000 ff56 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_timeLogger_01;
 800fd2a:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 800fd2c:	4be2      	ldr	r3, [pc, #904]	@ (80100b8 <tx_control+0x2858>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	2b3d      	cmp	r3, #61	@ 0x3d
 800fd32:	d00e      	beq.n	800fd52 <tx_control+0x24f2>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 800fd34:	4be0      	ldr	r3, [pc, #896]	@ (80100b8 <tx_control+0x2858>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800fd3a:	4bdc      	ldr	r3, [pc, #880]	@ (80100ac <tx_control+0x284c>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d104      	bne.n	800fd4c <tx_control+0x24ec>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 800fd42:	4bde      	ldr	r3, [pc, #888]	@ (80100bc <tx_control+0x285c>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800fd48:	f000 ff45 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 800fd4c:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800fd4e:	f000 ff42 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 800fd52:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 800fd54:	4bda      	ldr	r3, [pc, #872]	@ (80100c0 <tx_control+0x2860>)
 800fd56:	2296      	movs	r2, #150	@ 0x96
 800fd58:	0052      	lsls	r2, r2, #1
 800fd5a:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 800fd5c:	4bd9      	ldr	r3, [pc, #868]	@ (80100c4 <tx_control+0x2864>)
 800fd5e:	2296      	movs	r2, #150	@ 0x96
 800fd60:	0052      	lsls	r2, r2, #1
 800fd62:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800fd64:	4bd1      	ldr	r3, [pc, #836]	@ (80100ac <tx_control+0x284c>)
 800fd66:	2203      	movs	r2, #3
 800fd68:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 800fd6a:	4bd1      	ldr	r3, [pc, #836]	@ (80100b0 <tx_control+0x2850>)
 800fd6c:	881a      	ldrh	r2, [r3, #0]
 800fd6e:	4bd6      	ldr	r3, [pc, #856]	@ (80100c8 <tx_control+0x2868>)
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d314      	bcc.n	800fda0 <tx_control+0x2540>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 800fd76:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 800fd78:	4bd0      	ldr	r3, [pc, #832]	@ (80100bc <tx_control+0x285c>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 800fd7e:	4bcf      	ldr	r3, [pc, #828]	@ (80100bc <tx_control+0x285c>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800fd84:	4bd1      	ldr	r3, [pc, #836]	@ (80100cc <tx_control+0x286c>)
 800fd86:	220a      	movs	r2, #10
 800fd88:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 800fd8a:	4bd1      	ldr	r3, [pc, #836]	@ (80100d0 <tx_control+0x2870>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 800fd90:	4bd0      	ldr	r3, [pc, #832]	@ (80100d4 <tx_control+0x2874>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 800fd96:	4bcc      	ldr	r3, [pc, #816]	@ (80100c8 <tx_control+0x2868>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800fd9c:	f000 ff1b 	bl	8010bd6 <tx_control+0x3376>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 800fda0:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 800fda2:	4bcd      	ldr	r3, [pc, #820]	@ (80100d8 <tx_control+0x2878>)
 800fda4:	2240      	movs	r2, #64	@ 0x40
 800fda6:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 800fda8:	4bcb      	ldr	r3, [pc, #812]	@ (80100d8 <tx_control+0x2878>)
 800fdaa:	2283      	movs	r2, #131	@ 0x83
 800fdac:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800fdae:	4bca      	ldr	r3, [pc, #808]	@ (80100d8 <tx_control+0x2878>)
 800fdb0:	2203      	movs	r2, #3
 800fdb2:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800fdb4:	4bc9      	ldr	r3, [pc, #804]	@ (80100dc <tx_control+0x287c>)
 800fdb6:	0018      	movs	r0, r3
 800fdb8:	f7f2 ff30 	bl	8002c1c <findLastValue>
 800fdbc:	0003      	movs	r3, r0
 800fdbe:	b2da      	uxtb	r2, r3
 800fdc0:	4bc5      	ldr	r3, [pc, #788]	@ (80100d8 <tx_control+0x2878>)
 800fdc2:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800fdc4:	4bc6      	ldr	r3, [pc, #792]	@ (80100e0 <tx_control+0x2880>)
 800fdc6:	0018      	movs	r0, r3
 800fdc8:	f7f2 ff28 	bl	8002c1c <findLastValue>
 800fdcc:	0003      	movs	r3, r0
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	4bc1      	ldr	r3, [pc, #772]	@ (80100d8 <tx_control+0x2878>)
 800fdd2:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 800fdd4:	4bbf      	ldr	r3, [pc, #764]	@ (80100d4 <tx_control+0x2874>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d112      	bne.n	800fe02 <tx_control+0x25a2>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 800fddc:	4bbd      	ldr	r3, [pc, #756]	@ (80100d4 <tx_control+0x2874>)
 800fdde:	227e      	movs	r2, #126	@ 0x7e
 800fde0:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 800fde2:	4bbb      	ldr	r3, [pc, #748]	@ (80100d0 <tx_control+0x2870>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d103      	bne.n	800fdf2 <tx_control+0x2592>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 800fdea:	4bb9      	ldr	r3, [pc, #740]	@ (80100d0 <tx_control+0x2870>)
 800fdec:	2260      	movs	r2, #96	@ 0x60
 800fdee:	701a      	strb	r2, [r3, #0]
 800fdf0:	e000      	b.n	800fdf4 <tx_control+0x2594>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 800fdf2:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800fdf4:	4bb6      	ldr	r3, [pc, #728]	@ (80100d0 <tx_control+0x2870>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	4bb4      	ldr	r3, [pc, #720]	@ (80100d0 <tx_control+0x2870>)
 800fdfe:	701a      	strb	r2, [r3, #0]
 800fe00:	e000      	b.n	800fe04 <tx_control+0x25a4>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 800fe02:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 800fe04:	4bb7      	ldr	r3, [pc, #732]	@ (80100e4 <tx_control+0x2884>)
 800fe06:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 800fe08:	4bb1      	ldr	r3, [pc, #708]	@ (80100d0 <tx_control+0x2870>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	01db      	lsls	r3, r3, #7
 800fe0e:	4ab1      	ldr	r2, [pc, #708]	@ (80100d4 <tx_control+0x2874>)
 800fe10:	7812      	ldrb	r2, [r2, #0]
 800fe12:	189a      	adds	r2, r3, r2
 800fe14:	4bb4      	ldr	r3, [pc, #720]	@ (80100e8 <tx_control+0x2888>)
 800fe16:	18d3      	adds	r3, r2, r3
 800fe18:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 800fe1a:	4bb4      	ldr	r3, [pc, #720]	@ (80100ec <tx_control+0x288c>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 800fe20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe22:	3b01      	subs	r3, #1
 800fe24:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800fe26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800fe2c:	4ba9      	ldr	r3, [pc, #676]	@ (80100d4 <tx_control+0x2874>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	3b01      	subs	r3, #1
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	4ba7      	ldr	r3, [pc, #668]	@ (80100d4 <tx_control+0x2874>)
 800fe36:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800fe38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe3a:	2380      	movs	r3, #128	@ 0x80
 800fe3c:	025b      	lsls	r3, r3, #9
 800fe3e:	5cd2      	ldrb	r2, [r2, r3]
 800fe40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe42:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800fe44:	4ba9      	ldr	r3, [pc, #676]	@ (80100ec <tx_control+0x288c>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	4ba7      	ldr	r3, [pc, #668]	@ (80100ec <tx_control+0x288c>)
 800fe4e:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 800fe50:	4ba6      	ldr	r3, [pc, #664]	@ (80100ec <tx_control+0x288c>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	2b08      	cmp	r3, #8
 800fe56:	d800      	bhi.n	800fe5a <tx_control+0x25fa>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 800fe58:	e7e2      	b.n	800fe20 <tx_control+0x25c0>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 800fe5a:	4b9f      	ldr	r3, [pc, #636]	@ (80100d8 <tx_control+0x2878>)
 800fe5c:	7b5a      	ldrb	r2, [r3, #13]
 800fe5e:	4ba4      	ldr	r3, [pc, #656]	@ (80100f0 <tx_control+0x2890>)
 800fe60:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 800fe62:	4b9d      	ldr	r3, [pc, #628]	@ (80100d8 <tx_control+0x2878>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 800fe68:	4ba1      	ldr	r3, [pc, #644]	@ (80100f0 <tx_control+0x2890>)
 800fe6a:	781a      	ldrb	r2, [r3, #0]
 800fe6c:	4b9a      	ldr	r3, [pc, #616]	@ (80100d8 <tx_control+0x2878>)
 800fe6e:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800fe70:	4ba0      	ldr	r3, [pc, #640]	@ (80100f4 <tx_control+0x2894>)
 800fe72:	4a99      	ldr	r2, [pc, #612]	@ (80100d8 <tx_control+0x2878>)
 800fe74:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800fe76:	4ba0      	ldr	r3, [pc, #640]	@ (80100f8 <tx_control+0x2898>)
 800fe78:	4a97      	ldr	r2, [pc, #604]	@ (80100d8 <tx_control+0x2878>)
 800fe7a:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 800fe7c:	4b9f      	ldr	r3, [pc, #636]	@ (80100fc <tx_control+0x289c>)
 800fe7e:	4aa0      	ldr	r2, [pc, #640]	@ (8010100 <tx_control+0x28a0>)
 800fe80:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 800fe82:	4ba0      	ldr	r3, [pc, #640]	@ (8010104 <tx_control+0x28a4>)
 800fe84:	220f      	movs	r2, #15
 800fe86:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fe88:	4b9f      	ldr	r3, [pc, #636]	@ (8010108 <tx_control+0x28a8>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fe8e:	4b9f      	ldr	r3, [pc, #636]	@ (801010c <tx_control+0x28ac>)
 800fe90:	2200      	movs	r2, #0
 800fe92:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800fe94:	4b9c      	ldr	r3, [pc, #624]	@ (8010108 <tx_control+0x28a8>)
 800fe96:	2201      	movs	r2, #1
 800fe98:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fe9a:	4b9d      	ldr	r3, [pc, #628]	@ (8010110 <tx_control+0x28b0>)
 800fe9c:	2255      	movs	r2, #85	@ 0x55
 800fe9e:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800fea0:	4b85      	ldr	r3, [pc, #532]	@ (80100b8 <tx_control+0x2858>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 800fea6:	4b88      	ldr	r3, [pc, #544]	@ (80100c8 <tx_control+0x2868>)
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	3301      	adds	r3, #1
 800feac:	b29a      	uxth	r2, r3
 800feae:	4b86      	ldr	r3, [pc, #536]	@ (80100c8 <tx_control+0x2868>)
 800feb0:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 800feb2:	f000 fe90 	bl	8010bd6 <tx_control+0x3376>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 800feb6:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 800feb8:	4b80      	ldr	r3, [pc, #512]	@ (80100bc <tx_control+0x285c>)
 800feba:	789b      	ldrb	r3, [r3, #2]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d100      	bne.n	800fec2 <tx_control+0x2662>
 800fec0:	e211      	b.n	80102e6 <tx_control+0x2a86>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 800fec2:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 800fec4:	4b7d      	ldr	r3, [pc, #500]	@ (80100bc <tx_control+0x285c>)
 800fec6:	791b      	ldrb	r3, [r3, #4]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d000      	beq.n	800fece <tx_control+0x266e>
 800fecc:	e0d9      	b.n	8010082 <tx_control+0x2822>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 800fece:	4b7b      	ldr	r3, [pc, #492]	@ (80100bc <tx_control+0x285c>)
 800fed0:	2201      	movs	r2, #1
 800fed2:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 800fed4:	4b7c      	ldr	r3, [pc, #496]	@ (80100c8 <tx_control+0x2868>)
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d12f      	bne.n	800ff3c <tx_control+0x26dc>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800fedc:	4b8d      	ldr	r3, [pc, #564]	@ (8010114 <tx_control+0x28b4>)
 800fede:	781a      	ldrb	r2, [r3, #0]
 800fee0:	4b8d      	ldr	r3, [pc, #564]	@ (8010118 <tx_control+0x28b8>)
 800fee2:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 800fee4:	4b8d      	ldr	r3, [pc, #564]	@ (801011c <tx_control+0x28bc>)
 800fee6:	781a      	ldrb	r2, [r3, #0]
 800fee8:	4b8d      	ldr	r3, [pc, #564]	@ (8010120 <tx_control+0x28c0>)
 800feea:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 800feec:	4b8d      	ldr	r3, [pc, #564]	@ (8010124 <tx_control+0x28c4>)
 800feee:	4a8e      	ldr	r2, [pc, #568]	@ (8010128 <tx_control+0x28c8>)
 800fef0:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 800fef2:	4b8e      	ldr	r3, [pc, #568]	@ (801012c <tx_control+0x28cc>)
 800fef4:	4a8e      	ldr	r2, [pc, #568]	@ (8010130 <tx_control+0x28d0>)
 800fef6:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 800fef8:	4b89      	ldr	r3, [pc, #548]	@ (8010120 <tx_control+0x28c0>)
 800fefa:	7819      	ldrb	r1, [r3, #0]
 800fefc:	4b8a      	ldr	r3, [pc, #552]	@ (8010128 <tx_control+0x28c8>)
 800fefe:	227e      	movs	r2, #126	@ 0x7e
 800ff00:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800ff02:	4b8c      	ldr	r3, [pc, #560]	@ (8010134 <tx_control+0x28d4>)
 800ff04:	22aa      	movs	r2, #170	@ 0xaa
 800ff06:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 800ff08:	4b88      	ldr	r3, [pc, #544]	@ (801012c <tx_control+0x28cc>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a82      	ldr	r2, [pc, #520]	@ (8010118 <tx_control+0x28b8>)
 800ff0e:	7812      	ldrb	r2, [r2, #0]
 800ff10:	01d2      	lsls	r2, r2, #7
 800ff12:	189a      	adds	r2, r3, r2
 800ff14:	4b88      	ldr	r3, [pc, #544]	@ (8010138 <tx_control+0x28d8>)
 800ff16:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800ff18:	4b82      	ldr	r3, [pc, #520]	@ (8010124 <tx_control+0x28c4>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	4b87      	ldr	r3, [pc, #540]	@ (801013c <tx_control+0x28dc>)
 800ff1e:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800ff20:	f7f7 f810 	bl	8006f44 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 800ff24:	4b86      	ldr	r3, [pc, #536]	@ (8010140 <tx_control+0x28e0>)
 800ff26:	881a      	ldrh	r2, [r3, #0]
 800ff28:	4b86      	ldr	r3, [pc, #536]	@ (8010144 <tx_control+0x28e4>)
 800ff2a:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800ff2c:	4b86      	ldr	r3, [pc, #536]	@ (8010148 <tx_control+0x28e8>)
 800ff2e:	4a87      	ldr	r2, [pc, #540]	@ (801014c <tx_control+0x28ec>)
 800ff30:	601a      	str	r2, [r3, #0]
		save_cntReg();		// call	save_cntReg
 800ff32:	f7f6 fee9 	bl	8006d08 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 800ff36:	f7f6 ff21 	bl	8006d7c <save_timeUNIX>
 800ff3a:	e000      	b.n	800ff3e <tx_control+0x26de>
			goto tx_wifi_eventLogger_cmd;
 800ff3c:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800ff3e:	4b66      	ldr	r3, [pc, #408]	@ (80100d8 <tx_control+0x2878>)
 800ff40:	2240      	movs	r2, #64	@ 0x40
 800ff42:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 800ff44:	4b64      	ldr	r3, [pc, #400]	@ (80100d8 <tx_control+0x2878>)
 800ff46:	2286      	movs	r2, #134	@ 0x86
 800ff48:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800ff4a:	4b64      	ldr	r3, [pc, #400]	@ (80100dc <tx_control+0x287c>)
 800ff4c:	0018      	movs	r0, r3
 800ff4e:	f7f2 fe65 	bl	8002c1c <findLastValue>
 800ff52:	0003      	movs	r3, r0
 800ff54:	b2da      	uxtb	r2, r3
 800ff56:	4b60      	ldr	r3, [pc, #384]	@ (80100d8 <tx_control+0x2878>)
 800ff58:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800ff5a:	4b61      	ldr	r3, [pc, #388]	@ (80100e0 <tx_control+0x2880>)
 800ff5c:	0018      	movs	r0, r3
 800ff5e:	f7f2 fe5d 	bl	8002c1c <findLastValue>
 800ff62:	0003      	movs	r3, r0
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	4b5c      	ldr	r3, [pc, #368]	@ (80100d8 <tx_control+0x2878>)
 800ff68:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 800ff6a:	4b79      	ldr	r3, [pc, #484]	@ (8010150 <tx_control+0x28f0>)
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	0a1b      	lsrs	r3, r3, #8
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	4b58      	ldr	r3, [pc, #352]	@ (80100d8 <tx_control+0x2878>)
 800ff76:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800ff78:	4b75      	ldr	r3, [pc, #468]	@ (8010150 <tx_control+0x28f0>)
 800ff7a:	881b      	ldrh	r3, [r3, #0]
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	4b56      	ldr	r3, [pc, #344]	@ (80100d8 <tx_control+0x2878>)
 800ff80:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 800ff82:	4b74      	ldr	r3, [pc, #464]	@ (8010154 <tx_control+0x28f4>)
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	0a1b      	lsrs	r3, r3, #8
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	4b52      	ldr	r3, [pc, #328]	@ (80100d8 <tx_control+0x2878>)
 800ff8e:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800ff90:	4b70      	ldr	r3, [pc, #448]	@ (8010154 <tx_control+0x28f4>)
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	b2da      	uxtb	r2, r3
 800ff96:	4b50      	ldr	r3, [pc, #320]	@ (80100d8 <tx_control+0x2878>)
 800ff98:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = findLastValue((uint32_t) &eeLat1);
 800ff9a:	4b6f      	ldr	r3, [pc, #444]	@ (8010158 <tx_control+0x28f8>)
 800ff9c:	0018      	movs	r0, r3
 800ff9e:	f7f2 fe3d 	bl	8002c1c <findLastValue>
 800ffa2:	0003      	movs	r3, r0
 800ffa4:	b2da      	uxtb	r2, r3
 800ffa6:	4b4c      	ldr	r3, [pc, #304]	@ (80100d8 <tx_control+0x2878>)
 800ffa8:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = findLastValue((uint32_t) &eeLat2);
 800ffaa:	4b6c      	ldr	r3, [pc, #432]	@ (801015c <tx_control+0x28fc>)
 800ffac:	0018      	movs	r0, r3
 800ffae:	f7f2 fe35 	bl	8002c1c <findLastValue>
 800ffb2:	0003      	movs	r3, r0
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	4b48      	ldr	r3, [pc, #288]	@ (80100d8 <tx_control+0x2878>)
 800ffb8:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = findLastValue((uint32_t) &eeLat3);
 800ffba:	4b69      	ldr	r3, [pc, #420]	@ (8010160 <tx_control+0x2900>)
 800ffbc:	0018      	movs	r0, r3
 800ffbe:	f7f2 fe2d 	bl	8002c1c <findLastValue>
 800ffc2:	0003      	movs	r3, r0
 800ffc4:	b2da      	uxtb	r2, r3
 800ffc6:	4b44      	ldr	r3, [pc, #272]	@ (80100d8 <tx_control+0x2878>)
 800ffc8:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = findLastValue((uint32_t) &eeLat4);
 800ffca:	4b66      	ldr	r3, [pc, #408]	@ (8010164 <tx_control+0x2904>)
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f7f2 fe25 	bl	8002c1c <findLastValue>
 800ffd2:	0003      	movs	r3, r0
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	4b40      	ldr	r3, [pc, #256]	@ (80100d8 <tx_control+0x2878>)
 800ffd8:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = findLastValue((uint32_t) &eeLong1);
 800ffda:	4b63      	ldr	r3, [pc, #396]	@ (8010168 <tx_control+0x2908>)
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f7f2 fe1d 	bl	8002c1c <findLastValue>
 800ffe2:	0003      	movs	r3, r0
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	4b3c      	ldr	r3, [pc, #240]	@ (80100d8 <tx_control+0x2878>)
 800ffe8:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = findLastValue((uint32_t) &eeLong2);
 800ffea:	4b60      	ldr	r3, [pc, #384]	@ (801016c <tx_control+0x290c>)
 800ffec:	0018      	movs	r0, r3
 800ffee:	f7f2 fe15 	bl	8002c1c <findLastValue>
 800fff2:	0003      	movs	r3, r0
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b38      	ldr	r3, [pc, #224]	@ (80100d8 <tx_control+0x2878>)
 800fff8:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = findLastValue((uint32_t) &eeLong3);
 800fffa:	4b5d      	ldr	r3, [pc, #372]	@ (8010170 <tx_control+0x2910>)
 800fffc:	0018      	movs	r0, r3
 800fffe:	f7f2 fe0d 	bl	8002c1c <findLastValue>
 8010002:	0003      	movs	r3, r0
 8010004:	b2da      	uxtb	r2, r3
 8010006:	4b34      	ldr	r3, [pc, #208]	@ (80100d8 <tx_control+0x2878>)
 8010008:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = findLastValue((uint32_t) &eeLong4);
 801000a:	4b5a      	ldr	r3, [pc, #360]	@ (8010174 <tx_control+0x2914>)
 801000c:	0018      	movs	r0, r3
 801000e:	f7f2 fe05 	bl	8002c1c <findLastValue>
 8010012:	0003      	movs	r3, r0
 8010014:	b2da      	uxtb	r2, r3
 8010016:	4b30      	ldr	r3, [pc, #192]	@ (80100d8 <tx_control+0x2878>)
 8010018:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801001a:	4b36      	ldr	r3, [pc, #216]	@ (80100f4 <tx_control+0x2894>)
 801001c:	4a2e      	ldr	r2, [pc, #184]	@ (80100d8 <tx_control+0x2878>)
 801001e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010020:	4b35      	ldr	r3, [pc, #212]	@ (80100f8 <tx_control+0x2898>)
 8010022:	4a2d      	ldr	r2, [pc, #180]	@ (80100d8 <tx_control+0x2878>)
 8010024:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 8010026:	4b35      	ldr	r3, [pc, #212]	@ (80100fc <tx_control+0x289c>)
 8010028:	4a53      	ldr	r2, [pc, #332]	@ (8010178 <tx_control+0x2918>)
 801002a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 801002c:	4b35      	ldr	r3, [pc, #212]	@ (8010104 <tx_control+0x28a4>)
 801002e:	2210      	movs	r2, #16
 8010030:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010032:	4b35      	ldr	r3, [pc, #212]	@ (8010108 <tx_control+0x28a8>)
 8010034:	2200      	movs	r2, #0
 8010036:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010038:	4b34      	ldr	r3, [pc, #208]	@ (801010c <tx_control+0x28ac>)
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801003e:	4b32      	ldr	r3, [pc, #200]	@ (8010108 <tx_control+0x28a8>)
 8010040:	2201      	movs	r2, #1
 8010042:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010044:	4b32      	ldr	r3, [pc, #200]	@ (8010110 <tx_control+0x28b0>)
 8010046:	2255      	movs	r2, #85	@ 0x55
 8010048:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 801004a:	4b1b      	ldr	r3, [pc, #108]	@ (80100b8 <tx_control+0x2858>)
 801004c:	2200      	movs	r2, #0
 801004e:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 8010050:	4b1d      	ldr	r3, [pc, #116]	@ (80100c8 <tx_control+0x2868>)
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10b      	bne.n	8010070 <tx_control+0x2810>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 8010058:	4b2e      	ldr	r3, [pc, #184]	@ (8010114 <tx_control+0x28b4>)
 801005a:	781a      	ldrb	r2, [r3, #0]
 801005c:	4b1c      	ldr	r3, [pc, #112]	@ (80100d0 <tx_control+0x2870>)
 801005e:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 8010060:	4b2e      	ldr	r3, [pc, #184]	@ (801011c <tx_control+0x28bc>)
 8010062:	781a      	ldrb	r2, [r3, #0]
 8010064:	4b1b      	ldr	r3, [pc, #108]	@ (80100d4 <tx_control+0x2874>)
 8010066:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 8010068:	4b17      	ldr	r3, [pc, #92]	@ (80100c8 <tx_control+0x2868>)
 801006a:	2200      	movs	r2, #0
 801006c:	801a      	strh	r2, [r3, #0]
 801006e:	e000      	b.n	8010072 <tx_control+0x2812>
			goto tx_wifi_eventLogger_noInit;
 8010070:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 8010072:	4b0e      	ldr	r3, [pc, #56]	@ (80100ac <tx_control+0x284c>)
 8010074:	2203      	movs	r2, #3
 8010076:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 8010078:	4b0d      	ldr	r3, [pc, #52]	@ (80100b0 <tx_control+0x2850>)
 801007a:	4a40      	ldr	r2, [pc, #256]	@ (801017c <tx_control+0x291c>)
 801007c:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 801007e:	f000 fdaa 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 8010082:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 8010084:	4b0c      	ldr	r3, [pc, #48]	@ (80100b8 <tx_control+0x2858>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	2b3d      	cmp	r3, #61	@ 0x3d
 801008a:	d079      	beq.n	8010180 <tx_control+0x2920>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 801008c:	4b0a      	ldr	r3, [pc, #40]	@ (80100b8 <tx_control+0x2858>)
 801008e:	2200      	movs	r2, #0
 8010090:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 8010092:	4b06      	ldr	r3, [pc, #24]	@ (80100ac <tx_control+0x284c>)
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d104      	bne.n	80100a4 <tx_control+0x2844>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 801009a:	4b08      	ldr	r3, [pc, #32]	@ (80100bc <tx_control+0x285c>)
 801009c:	2200      	movs	r2, #0
 801009e:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 80100a0:	f000 fd99 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 80100a4:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 80100a6:	f000 fd96 	bl	8010bd6 <tx_control+0x3376>
 80100aa:	46c0      	nop			@ (mov r8, r8)
 80100ac:	20000f8a 	.word	0x20000f8a
 80100b0:	20001048 	.word	0x20001048
 80100b4:	0000053f 	.word	0x0000053f
 80100b8:	20000e34 	.word	0x20000e34
 80100bc:	20000f60 	.word	0x20000f60
 80100c0:	20000f5c 	.word	0x20000f5c
 80100c4:	2000110c 	.word	0x2000110c
 80100c8:	20000f88 	.word	0x20000f88
 80100cc:	20000f8b 	.word	0x20000f8b
 80100d0:	20000f86 	.word	0x20000f86
 80100d4:	20000f87 	.word	0x20000f87
 80100d8:	20000f68 	.word	0x20000f68
 80100dc:	0803f07b 	.word	0x0803f07b
 80100e0:	0803f07c 	.word	0x0803f07c
 80100e4:	20000f76 	.word	0x20000f76
 80100e8:	0803c000 	.word	0x0803c000
 80100ec:	20000b65 	.word	0x20000b65
 80100f0:	20000b64 	.word	0x20000b64
 80100f4:	20000e24 	.word	0x20000e24
 80100f8:	20000e1c 	.word	0x20000e1c
 80100fc:	20000e20 	.word	0x20000e20
 8010100:	20000f77 	.word	0x20000f77
 8010104:	20000e40 	.word	0x20000e40
 8010108:	20000e2c 	.word	0x20000e2c
 801010c:	20000e44 	.word	0x20000e44
 8010110:	20000e29 	.word	0x20000e29
 8010114:	20000dbf 	.word	0x20000dbf
 8010118:	20000daa 	.word	0x20000daa
 801011c:	20000dbe 	.word	0x20000dbe
 8010120:	20000dab 	.word	0x20000dab
 8010124:	20000db4 	.word	0x20000db4
 8010128:	20000d1c 	.word	0x20000d1c
 801012c:	20000db0 	.word	0x20000db0
 8010130:	08037000 	.word	0x08037000
 8010134:	20000d9c 	.word	0x20000d9c
 8010138:	20000da0 	.word	0x20000da0
 801013c:	20000da4 	.word	0x20000da4
 8010140:	2000104c 	.word	0x2000104c
 8010144:	2000104e 	.word	0x2000104e
 8010148:	20001050 	.word	0x20001050
 801014c:	0803f812 	.word	0x0803f812
 8010150:	20000dc0 	.word	0x20000dc0
 8010154:	20000dc2 	.word	0x20000dc2
 8010158:	0803f808 	.word	0x0803f808
 801015c:	0803f809 	.word	0x0803f809
 8010160:	0803f80a 	.word	0x0803f80a
 8010164:	0803f80b 	.word	0x0803f80b
 8010168:	0803f80c 	.word	0x0803f80c
 801016c:	0803f80d 	.word	0x0803f80d
 8010170:	0803f80e 	.word	0x0803f80e
 8010174:	0803f80f 	.word	0x0803f80f
 8010178:	20000f78 	.word	0x20000f78
 801017c:	0000059f 	.word	0x0000059f
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 8010180:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 8010182:	4bd0      	ldr	r3, [pc, #832]	@ (80104c4 <tx_control+0x2c64>)
 8010184:	2296      	movs	r2, #150	@ 0x96
 8010186:	0052      	lsls	r2, r2, #1
 8010188:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 801018a:	4bcf      	ldr	r3, [pc, #828]	@ (80104c8 <tx_control+0x2c68>)
 801018c:	2296      	movs	r2, #150	@ 0x96
 801018e:	0052      	lsls	r2, r2, #1
 8010190:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 8010192:	4bce      	ldr	r3, [pc, #824]	@ (80104cc <tx_control+0x2c6c>)
 8010194:	2203      	movs	r2, #3
 8010196:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 8010198:	4bcd      	ldr	r3, [pc, #820]	@ (80104d0 <tx_control+0x2c70>)
 801019a:	881a      	ldrh	r2, [r3, #0]
 801019c:	4bcd      	ldr	r3, [pc, #820]	@ (80104d4 <tx_control+0x2c74>)
 801019e:	881b      	ldrh	r3, [r3, #0]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d314      	bcc.n	80101ce <tx_control+0x296e>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 80101a4:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 80101a6:	4bcc      	ldr	r3, [pc, #816]	@ (80104d8 <tx_control+0x2c78>)
 80101a8:	2200      	movs	r2, #0
 80101aa:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 80101ac:	4bca      	ldr	r3, [pc, #808]	@ (80104d8 <tx_control+0x2c78>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 80101b2:	4bca      	ldr	r3, [pc, #808]	@ (80104dc <tx_control+0x2c7c>)
 80101b4:	220a      	movs	r2, #10
 80101b6:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 80101b8:	4bc9      	ldr	r3, [pc, #804]	@ (80104e0 <tx_control+0x2c80>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 80101be:	4bc9      	ldr	r3, [pc, #804]	@ (80104e4 <tx_control+0x2c84>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 80101c4:	4bc3      	ldr	r3, [pc, #780]	@ (80104d4 <tx_control+0x2c74>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 80101ca:	f000 fd04 	bl	8010bd6 <tx_control+0x3376>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 80101ce:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80101d0:	4bc5      	ldr	r3, [pc, #788]	@ (80104e8 <tx_control+0x2c88>)
 80101d2:	2240      	movs	r2, #64	@ 0x40
 80101d4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 80101d6:	4bc4      	ldr	r3, [pc, #784]	@ (80104e8 <tx_control+0x2c88>)
 80101d8:	2284      	movs	r2, #132	@ 0x84
 80101da:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 80101dc:	4bc2      	ldr	r3, [pc, #776]	@ (80104e8 <tx_control+0x2c88>)
 80101de:	2203      	movs	r2, #3
 80101e0:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 80101e2:	4bc2      	ldr	r3, [pc, #776]	@ (80104ec <tx_control+0x2c8c>)
 80101e4:	0018      	movs	r0, r3
 80101e6:	f7f2 fd19 	bl	8002c1c <findLastValue>
 80101ea:	0003      	movs	r3, r0
 80101ec:	b2da      	uxtb	r2, r3
 80101ee:	4bbe      	ldr	r3, [pc, #760]	@ (80104e8 <tx_control+0x2c88>)
 80101f0:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 80101f2:	4bbf      	ldr	r3, [pc, #764]	@ (80104f0 <tx_control+0x2c90>)
 80101f4:	0018      	movs	r0, r3
 80101f6:	f7f2 fd11 	bl	8002c1c <findLastValue>
 80101fa:	0003      	movs	r3, r0
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	4bba      	ldr	r3, [pc, #744]	@ (80104e8 <tx_control+0x2c88>)
 8010200:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 8010202:	4bb8      	ldr	r3, [pc, #736]	@ (80104e4 <tx_control+0x2c84>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d112      	bne.n	8010230 <tx_control+0x29d0>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 801020a:	4bb6      	ldr	r3, [pc, #728]	@ (80104e4 <tx_control+0x2c84>)
 801020c:	227e      	movs	r2, #126	@ 0x7e
 801020e:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 8010210:	4bb3      	ldr	r3, [pc, #716]	@ (80104e0 <tx_control+0x2c80>)
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <tx_control+0x29c0>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 8010218:	4bb1      	ldr	r3, [pc, #708]	@ (80104e0 <tx_control+0x2c80>)
 801021a:	22a0      	movs	r2, #160	@ 0xa0
 801021c:	701a      	strb	r2, [r3, #0]
 801021e:	e000      	b.n	8010222 <tx_control+0x29c2>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 8010220:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 8010222:	4baf      	ldr	r3, [pc, #700]	@ (80104e0 <tx_control+0x2c80>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	3b01      	subs	r3, #1
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4bad      	ldr	r3, [pc, #692]	@ (80104e0 <tx_control+0x2c80>)
 801022c:	701a      	strb	r2, [r3, #0]
 801022e:	e000      	b.n	8010232 <tx_control+0x29d2>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 8010230:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 8010232:	4bb0      	ldr	r3, [pc, #704]	@ (80104f4 <tx_control+0x2c94>)
 8010234:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 8010236:	4bab      	ldr	r3, [pc, #684]	@ (80104e4 <tx_control+0x2c84>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	001a      	movs	r2, r3
 801023c:	4ba8      	ldr	r3, [pc, #672]	@ (80104e0 <tx_control+0x2c80>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	01db      	lsls	r3, r3, #7
 8010242:	18d2      	adds	r2, r2, r3
 8010244:	4bac      	ldr	r3, [pc, #688]	@ (80104f8 <tx_control+0x2c98>)
 8010246:	18d3      	adds	r3, r2, r3
 8010248:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 801024a:	4bac      	ldr	r3, [pc, #688]	@ (80104fc <tx_control+0x2c9c>)
 801024c:	2200      	movs	r2, #0
 801024e:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 8010250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010252:	3b01      	subs	r3, #1
 8010254:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 8010256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010258:	3b01      	subs	r3, #1
 801025a:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 801025c:	4ba1      	ldr	r3, [pc, #644]	@ (80104e4 <tx_control+0x2c84>)
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	3b01      	subs	r3, #1
 8010262:	b2da      	uxtb	r2, r3
 8010264:	4b9f      	ldr	r3, [pc, #636]	@ (80104e4 <tx_control+0x2c84>)
 8010266:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 8010268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801026a:	2380      	movs	r3, #128	@ 0x80
 801026c:	025b      	lsls	r3, r3, #9
 801026e:	5cd2      	ldrb	r2, [r2, r3]
 8010270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010272:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 8010274:	4ba1      	ldr	r3, [pc, #644]	@ (80104fc <tx_control+0x2c9c>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	3301      	adds	r3, #1
 801027a:	b2da      	uxtb	r2, r3
 801027c:	4b9f      	ldr	r3, [pc, #636]	@ (80104fc <tx_control+0x2c9c>)
 801027e:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 8010280:	4b9e      	ldr	r3, [pc, #632]	@ (80104fc <tx_control+0x2c9c>)
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2b0d      	cmp	r3, #13
 8010286:	d800      	bhi.n	801028a <tx_control+0x2a2a>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 8010288:	e7e2      	b.n	8010250 <tx_control+0x29f0>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 801028a:	4b97      	ldr	r3, [pc, #604]	@ (80104e8 <tx_control+0x2c88>)
 801028c:	7c9a      	ldrb	r2, [r3, #18]
 801028e:	4b9c      	ldr	r3, [pc, #624]	@ (8010500 <tx_control+0x2ca0>)
 8010290:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 8010292:	4b95      	ldr	r3, [pc, #596]	@ (80104e8 <tx_control+0x2c88>)
 8010294:	2200      	movs	r2, #0
 8010296:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 8010298:	4b99      	ldr	r3, [pc, #612]	@ (8010500 <tx_control+0x2ca0>)
 801029a:	781a      	ldrb	r2, [r3, #0]
 801029c:	4b92      	ldr	r3, [pc, #584]	@ (80104e8 <tx_control+0x2c88>)
 801029e:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80102a0:	4b98      	ldr	r3, [pc, #608]	@ (8010504 <tx_control+0x2ca4>)
 80102a2:	4a91      	ldr	r2, [pc, #580]	@ (80104e8 <tx_control+0x2c88>)
 80102a4:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80102a6:	4b98      	ldr	r3, [pc, #608]	@ (8010508 <tx_control+0x2ca8>)
 80102a8:	4a8f      	ldr	r2, [pc, #572]	@ (80104e8 <tx_control+0x2c88>)
 80102aa:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 80102ac:	4b97      	ldr	r3, [pc, #604]	@ (801050c <tx_control+0x2cac>)
 80102ae:	4a98      	ldr	r2, [pc, #608]	@ (8010510 <tx_control+0x2cb0>)
 80102b0:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 80102b2:	4b98      	ldr	r3, [pc, #608]	@ (8010514 <tx_control+0x2cb4>)
 80102b4:	2214      	movs	r2, #20
 80102b6:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80102b8:	4b97      	ldr	r3, [pc, #604]	@ (8010518 <tx_control+0x2cb8>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80102be:	4b97      	ldr	r3, [pc, #604]	@ (801051c <tx_control+0x2cbc>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80102c4:	4b94      	ldr	r3, [pc, #592]	@ (8010518 <tx_control+0x2cb8>)
 80102c6:	2201      	movs	r2, #1
 80102c8:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 80102ca:	4b95      	ldr	r3, [pc, #596]	@ (8010520 <tx_control+0x2cc0>)
 80102cc:	2255      	movs	r2, #85	@ 0x55
 80102ce:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 80102d0:	4b94      	ldr	r3, [pc, #592]	@ (8010524 <tx_control+0x2cc4>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 80102d6:	4b7f      	ldr	r3, [pc, #508]	@ (80104d4 <tx_control+0x2c74>)
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	3301      	adds	r3, #1
 80102dc:	b29a      	uxth	r2, r3
 80102de:	4b7d      	ldr	r3, [pc, #500]	@ (80104d4 <tx_control+0x2c74>)
 80102e0:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 80102e2:	f000 fc78 	bl	8010bd6 <tx_control+0x3376>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 80102e6:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 80102e8:	4b7c      	ldr	r3, [pc, #496]	@ (80104dc <tx_control+0x2c7c>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d001      	beq.n	80102f4 <tx_control+0x2a94>
 80102f0:	f000 fc6a 	bl	8010bc8 <tx_control+0x3368>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 80102f4:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 80102f6:	4b8a      	ldr	r3, [pc, #552]	@ (8010520 <tx_control+0x2cc0>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d001      	beq.n	8010302 <tx_control+0x2aa2>
 80102fe:	f000 fc66 	bl	8010bce <tx_control+0x336e>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 8010302:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 8010304:	4b88      	ldr	r3, [pc, #544]	@ (8010528 <tx_control+0x2cc8>)
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d14d      	bne.n	80103a8 <tx_control+0x2b48>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 801030c:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 801030e:	4b87      	ldr	r3, [pc, #540]	@ (801052c <tx_control+0x2ccc>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d100      	bne.n	8010318 <tx_control+0x2ab8>
 8010316:	e085      	b.n	8010424 <tx_control+0x2bc4>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 8010318:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 801031a:	4b85      	ldr	r3, [pc, #532]	@ (8010530 <tx_control+0x2cd0>)
 801031c:	2240      	movs	r2, #64	@ 0x40
 801031e:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010320:	4b83      	ldr	r3, [pc, #524]	@ (8010530 <tx_control+0x2cd0>)
 8010322:	2282      	movs	r2, #130	@ 0x82
 8010324:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 8010326:	4b71      	ldr	r3, [pc, #452]	@ (80104ec <tx_control+0x2c8c>)
 8010328:	0018      	movs	r0, r3
 801032a:	f7f2 fc77 	bl	8002c1c <findLastValue>
 801032e:	0003      	movs	r3, r0
 8010330:	b2da      	uxtb	r2, r3
 8010332:	4b7f      	ldr	r3, [pc, #508]	@ (8010530 <tx_control+0x2cd0>)
 8010334:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 8010336:	4b6e      	ldr	r3, [pc, #440]	@ (80104f0 <tx_control+0x2c90>)
 8010338:	0018      	movs	r0, r3
 801033a:	f7f2 fc6f 	bl	8002c1c <findLastValue>
 801033e:	0003      	movs	r3, r0
 8010340:	b2da      	uxtb	r2, r3
 8010342:	4b7b      	ldr	r3, [pc, #492]	@ (8010530 <tx_control+0x2cd0>)
 8010344:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 8010346:	4b7b      	ldr	r3, [pc, #492]	@ (8010534 <tx_control+0x2cd4>)
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	0a1b      	lsrs	r3, r3, #8
 801034c:	b29b      	uxth	r3, r3
 801034e:	b2da      	uxtb	r2, r3
 8010350:	4b77      	ldr	r3, [pc, #476]	@ (8010530 <tx_control+0x2cd0>)
 8010352:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010354:	4b77      	ldr	r3, [pc, #476]	@ (8010534 <tx_control+0x2cd4>)
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	b2da      	uxtb	r2, r3
 801035a:	4b75      	ldr	r3, [pc, #468]	@ (8010530 <tx_control+0x2cd0>)
 801035c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 801035e:	4b76      	ldr	r3, [pc, #472]	@ (8010538 <tx_control+0x2cd8>)
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	0a1b      	lsrs	r3, r3, #8
 8010364:	b29b      	uxth	r3, r3
 8010366:	b2da      	uxtb	r2, r3
 8010368:	4b71      	ldr	r3, [pc, #452]	@ (8010530 <tx_control+0x2cd0>)
 801036a:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 801036c:	4b72      	ldr	r3, [pc, #456]	@ (8010538 <tx_control+0x2cd8>)
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	b2da      	uxtb	r2, r3
 8010372:	4b6f      	ldr	r3, [pc, #444]	@ (8010530 <tx_control+0x2cd0>)
 8010374:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 8010376:	4b6e      	ldr	r3, [pc, #440]	@ (8010530 <tx_control+0x2cd0>)
 8010378:	2201      	movs	r2, #1
 801037a:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 801037c:	4b6f      	ldr	r3, [pc, #444]	@ (801053c <tx_control+0x2cdc>)
 801037e:	781a      	ldrb	r2, [r3, #0]
 8010380:	4b6b      	ldr	r3, [pc, #428]	@ (8010530 <tx_control+0x2cd0>)
 8010382:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 8010384:	4b6e      	ldr	r3, [pc, #440]	@ (8010540 <tx_control+0x2ce0>)
 8010386:	781a      	ldrb	r2, [r3, #0]
 8010388:	4b69      	ldr	r3, [pc, #420]	@ (8010530 <tx_control+0x2cd0>)
 801038a:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 801038c:	4b6d      	ldr	r3, [pc, #436]	@ (8010544 <tx_control+0x2ce4>)
 801038e:	781a      	ldrb	r2, [r3, #0]
 8010390:	4b67      	ldr	r3, [pc, #412]	@ (8010530 <tx_control+0x2cd0>)
 8010392:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 8010394:	4b64      	ldr	r3, [pc, #400]	@ (8010528 <tx_control+0x2cc8>)
 8010396:	2201      	movs	r2, #1
 8010398:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 801039a:	4b6b      	ldr	r3, [pc, #428]	@ (8010548 <tx_control+0x2ce8>)
 801039c:	2250      	movs	r2, #80	@ 0x50
 801039e:	5c9b      	ldrb	r3, [r3, r2]
 80103a0:	001a      	movs	r2, r3
 80103a2:	4b6a      	ldr	r3, [pc, #424]	@ (801054c <tx_control+0x2cec>)
 80103a4:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 80103a6:	e040      	b.n	801042a <tx_control+0x2bca>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 80103a8:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 80103aa:	4b60      	ldr	r3, [pc, #384]	@ (801052c <tx_control+0x2ccc>)
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d13a      	bne.n	8010428 <tx_control+0x2bc8>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 80103b2:	4b66      	ldr	r3, [pc, #408]	@ (801054c <tx_control+0x2cec>)
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <tx_control+0x2b62>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 80103ba:	4b5b      	ldr	r3, [pc, #364]	@ (8010528 <tx_control+0x2cc8>)
 80103bc:	2200      	movs	r2, #0
 80103be:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 80103c0:	e033      	b.n	801042a <tx_control+0x2bca>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 80103c2:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 80103c4:	4b5b      	ldr	r3, [pc, #364]	@ (8010534 <tx_control+0x2cd4>)
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	0a1b      	lsrs	r3, r3, #8
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	4b58      	ldr	r3, [pc, #352]	@ (8010530 <tx_control+0x2cd0>)
 80103d0:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 80103d2:	4b58      	ldr	r3, [pc, #352]	@ (8010534 <tx_control+0x2cd4>)
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	4b55      	ldr	r3, [pc, #340]	@ (8010530 <tx_control+0x2cd0>)
 80103da:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 80103dc:	4b56      	ldr	r3, [pc, #344]	@ (8010538 <tx_control+0x2cd8>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	0a1b      	lsrs	r3, r3, #8
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	4b52      	ldr	r3, [pc, #328]	@ (8010530 <tx_control+0x2cd0>)
 80103e8:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 80103ea:	4b53      	ldr	r3, [pc, #332]	@ (8010538 <tx_control+0x2cd8>)
 80103ec:	881b      	ldrh	r3, [r3, #0]
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	4b4f      	ldr	r3, [pc, #316]	@ (8010530 <tx_control+0x2cd0>)
 80103f2:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 80103f4:	4b56      	ldr	r3, [pc, #344]	@ (8010550 <tx_control+0x2cf0>)
 80103f6:	781a      	ldrb	r2, [r3, #0]
 80103f8:	4b4d      	ldr	r3, [pc, #308]	@ (8010530 <tx_control+0x2cd0>)
 80103fa:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 80103fc:	4b55      	ldr	r3, [pc, #340]	@ (8010554 <tx_control+0x2cf4>)
 80103fe:	781a      	ldrb	r2, [r3, #0]
 8010400:	4b4b      	ldr	r3, [pc, #300]	@ (8010530 <tx_control+0x2cd0>)
 8010402:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010404:	4b48      	ldr	r3, [pc, #288]	@ (8010528 <tx_control+0x2cc8>)
 8010406:	2200      	movs	r2, #0
 8010408:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 801040a:	4b3e      	ldr	r3, [pc, #248]	@ (8010504 <tx_control+0x2ca4>)
 801040c:	4a52      	ldr	r2, [pc, #328]	@ (8010558 <tx_control+0x2cf8>)
 801040e:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 8010410:	4b3d      	ldr	r3, [pc, #244]	@ (8010508 <tx_control+0x2ca8>)
 8010412:	4a51      	ldr	r2, [pc, #324]	@ (8010558 <tx_control+0x2cf8>)
 8010414:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 8010416:	4b3d      	ldr	r3, [pc, #244]	@ (801050c <tx_control+0x2cac>)
 8010418:	4a50      	ldr	r2, [pc, #320]	@ (801055c <tx_control+0x2cfc>)
 801041a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 801041c:	4b3d      	ldr	r3, [pc, #244]	@ (8010514 <tx_control+0x2cb4>)
 801041e:	2212      	movs	r2, #18
 8010420:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010422:	e1d0      	b.n	80107c6 <tx_control+0x2f66>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 8010424:	46c0      	nop			@ (mov r8, r8)
 8010426:	e000      	b.n	801042a <tx_control+0x2bca>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010428:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 801042a:	4b3f      	ldr	r3, [pc, #252]	@ (8010528 <tx_control+0x2cc8>)
 801042c:	785b      	ldrb	r3, [r3, #1]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d000      	beq.n	8010434 <tx_control+0x2bd4>
 8010432:	e099      	b.n	8010568 <tx_control+0x2d08>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 8010434:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 8010436:	4b4a      	ldr	r3, [pc, #296]	@ (8010560 <tx_control+0x2d00>)
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d100      	bne.n	8010440 <tx_control+0x2be0>
 801043e:	e0c9      	b.n	80105d4 <tx_control+0x2d74>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010440:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 8010442:	4b48      	ldr	r3, [pc, #288]	@ (8010564 <tx_control+0x2d04>)
 8010444:	2240      	movs	r2, #64	@ 0x40
 8010446:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010448:	4b46      	ldr	r3, [pc, #280]	@ (8010564 <tx_control+0x2d04>)
 801044a:	2282      	movs	r2, #130	@ 0x82
 801044c:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 801044e:	4b27      	ldr	r3, [pc, #156]	@ (80104ec <tx_control+0x2c8c>)
 8010450:	0018      	movs	r0, r3
 8010452:	f7f2 fbe3 	bl	8002c1c <findLastValue>
 8010456:	0003      	movs	r3, r0
 8010458:	b2da      	uxtb	r2, r3
 801045a:	4b42      	ldr	r3, [pc, #264]	@ (8010564 <tx_control+0x2d04>)
 801045c:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 801045e:	4b24      	ldr	r3, [pc, #144]	@ (80104f0 <tx_control+0x2c90>)
 8010460:	0018      	movs	r0, r3
 8010462:	f7f2 fbdb 	bl	8002c1c <findLastValue>
 8010466:	0003      	movs	r3, r0
 8010468:	b2da      	uxtb	r2, r3
 801046a:	4b3e      	ldr	r3, [pc, #248]	@ (8010564 <tx_control+0x2d04>)
 801046c:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 801046e:	4b31      	ldr	r3, [pc, #196]	@ (8010534 <tx_control+0x2cd4>)
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	0a1b      	lsrs	r3, r3, #8
 8010474:	b29b      	uxth	r3, r3
 8010476:	b2da      	uxtb	r2, r3
 8010478:	4b3a      	ldr	r3, [pc, #232]	@ (8010564 <tx_control+0x2d04>)
 801047a:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 801047c:	4b2d      	ldr	r3, [pc, #180]	@ (8010534 <tx_control+0x2cd4>)
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	b2da      	uxtb	r2, r3
 8010482:	4b38      	ldr	r3, [pc, #224]	@ (8010564 <tx_control+0x2d04>)
 8010484:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010486:	4b2c      	ldr	r3, [pc, #176]	@ (8010538 <tx_control+0x2cd8>)
 8010488:	881b      	ldrh	r3, [r3, #0]
 801048a:	0a1b      	lsrs	r3, r3, #8
 801048c:	b29b      	uxth	r3, r3
 801048e:	b2da      	uxtb	r2, r3
 8010490:	4b34      	ldr	r3, [pc, #208]	@ (8010564 <tx_control+0x2d04>)
 8010492:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010494:	4b28      	ldr	r3, [pc, #160]	@ (8010538 <tx_control+0x2cd8>)
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	b2da      	uxtb	r2, r3
 801049a:	4b32      	ldr	r3, [pc, #200]	@ (8010564 <tx_control+0x2d04>)
 801049c:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 801049e:	4b31      	ldr	r3, [pc, #196]	@ (8010564 <tx_control+0x2d04>)
 80104a0:	2202      	movs	r2, #2
 80104a2:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 80104a4:	4b25      	ldr	r3, [pc, #148]	@ (801053c <tx_control+0x2cdc>)
 80104a6:	781a      	ldrb	r2, [r3, #0]
 80104a8:	4b2e      	ldr	r3, [pc, #184]	@ (8010564 <tx_control+0x2d04>)
 80104aa:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 80104ac:	4b24      	ldr	r3, [pc, #144]	@ (8010540 <tx_control+0x2ce0>)
 80104ae:	781a      	ldrb	r2, [r3, #0]
 80104b0:	4b2c      	ldr	r3, [pc, #176]	@ (8010564 <tx_control+0x2d04>)
 80104b2:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 80104b4:	4b23      	ldr	r3, [pc, #140]	@ (8010544 <tx_control+0x2ce4>)
 80104b6:	781a      	ldrb	r2, [r3, #0]
 80104b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010564 <tx_control+0x2d04>)
 80104ba:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 80104bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010528 <tx_control+0x2cc8>)
 80104be:	2201      	movs	r2, #1
 80104c0:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 80104c2:	e08a      	b.n	80105da <tx_control+0x2d7a>
 80104c4:	20000f5c 	.word	0x20000f5c
 80104c8:	2000110c 	.word	0x2000110c
 80104cc:	20000f8a 	.word	0x20000f8a
 80104d0:	20001048 	.word	0x20001048
 80104d4:	20000f88 	.word	0x20000f88
 80104d8:	20000f60 	.word	0x20000f60
 80104dc:	20000f8b 	.word	0x20000f8b
 80104e0:	20000f86 	.word	0x20000f86
 80104e4:	20000f87 	.word	0x20000f87
 80104e8:	20000f68 	.word	0x20000f68
 80104ec:	0803f07b 	.word	0x0803f07b
 80104f0:	0803f07c 	.word	0x0803f07c
 80104f4:	20000f7b 	.word	0x20000f7b
 80104f8:	08037000 	.word	0x08037000
 80104fc:	20000b65 	.word	0x20000b65
 8010500:	20000b64 	.word	0x20000b64
 8010504:	20000e24 	.word	0x20000e24
 8010508:	20000e1c 	.word	0x20000e1c
 801050c:	20000e20 	.word	0x20000e20
 8010510:	20000f7c 	.word	0x20000f7c
 8010514:	20000e40 	.word	0x20000e40
 8010518:	20000e2c 	.word	0x20000e2c
 801051c:	20000e44 	.word	0x20000e44
 8010520:	20000e29 	.word	0x20000e29
 8010524:	20000e34 	.word	0x20000e34
 8010528:	20000f4c 	.word	0x20000f4c
 801052c:	20000c4c 	.word	0x20000c4c
 8010530:	20000efc 	.word	0x20000efc
 8010534:	20000dc0 	.word	0x20000dc0
 8010538:	20000dc2 	.word	0x20000dc2
 801053c:	20000bc0 	.word	0x20000bc0
 8010540:	20000bc1 	.word	0x20000bc1
 8010544:	20000bde 	.word	0x20000bde
 8010548:	200000b8 	.word	0x200000b8
 801054c:	20000ee8 	.word	0x20000ee8
 8010550:	20000bc2 	.word	0x20000bc2
 8010554:	20000bc3 	.word	0x20000bc3
 8010558:	20000f38 	.word	0x20000f38
 801055c:	20000f49 	.word	0x20000f49
 8010560:	20000bb4 	.word	0x20000bb4
 8010564:	20000f10 	.word	0x20000f10
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8010568:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 801056a:	4be4      	ldr	r3, [pc, #912]	@ (80108fc <tx_control+0x309c>)
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d132      	bne.n	80105d8 <tx_control+0x2d78>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 8010572:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010574:	4be2      	ldr	r3, [pc, #904]	@ (8010900 <tx_control+0x30a0>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	0a1b      	lsrs	r3, r3, #8
 801057a:	b29b      	uxth	r3, r3
 801057c:	b2da      	uxtb	r2, r3
 801057e:	4be1      	ldr	r3, [pc, #900]	@ (8010904 <tx_control+0x30a4>)
 8010580:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010582:	4bdf      	ldr	r3, [pc, #892]	@ (8010900 <tx_control+0x30a0>)
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4bde      	ldr	r3, [pc, #888]	@ (8010904 <tx_control+0x30a4>)
 801058a:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 801058c:	4bde      	ldr	r3, [pc, #888]	@ (8010908 <tx_control+0x30a8>)
 801058e:	881b      	ldrh	r3, [r3, #0]
 8010590:	0a1b      	lsrs	r3, r3, #8
 8010592:	b29b      	uxth	r3, r3
 8010594:	b2da      	uxtb	r2, r3
 8010596:	4bdb      	ldr	r3, [pc, #876]	@ (8010904 <tx_control+0x30a4>)
 8010598:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 801059a:	4bdb      	ldr	r3, [pc, #876]	@ (8010908 <tx_control+0x30a8>)
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	b2da      	uxtb	r2, r3
 80105a0:	4bd8      	ldr	r3, [pc, #864]	@ (8010904 <tx_control+0x30a4>)
 80105a2:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 80105a4:	4bd9      	ldr	r3, [pc, #868]	@ (801090c <tx_control+0x30ac>)
 80105a6:	781a      	ldrb	r2, [r3, #0]
 80105a8:	4bd6      	ldr	r3, [pc, #856]	@ (8010904 <tx_control+0x30a4>)
 80105aa:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 80105ac:	4bd8      	ldr	r3, [pc, #864]	@ (8010910 <tx_control+0x30b0>)
 80105ae:	781a      	ldrb	r2, [r3, #0]
 80105b0:	4bd4      	ldr	r3, [pc, #848]	@ (8010904 <tx_control+0x30a4>)
 80105b2:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 80105b4:	4bd7      	ldr	r3, [pc, #860]	@ (8010914 <tx_control+0x30b4>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 80105ba:	4bd7      	ldr	r3, [pc, #860]	@ (8010918 <tx_control+0x30b8>)
 80105bc:	4ad1      	ldr	r2, [pc, #836]	@ (8010904 <tx_control+0x30a4>)
 80105be:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 80105c0:	4bd6      	ldr	r3, [pc, #856]	@ (801091c <tx_control+0x30bc>)
 80105c2:	4ad0      	ldr	r2, [pc, #832]	@ (8010904 <tx_control+0x30a4>)
 80105c4:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 80105c6:	4bd6      	ldr	r3, [pc, #856]	@ (8010920 <tx_control+0x30c0>)
 80105c8:	4ad6      	ldr	r2, [pc, #856]	@ (8010924 <tx_control+0x30c4>)
 80105ca:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 80105cc:	4bd6      	ldr	r3, [pc, #856]	@ (8010928 <tx_control+0x30c8>)
 80105ce:	2212      	movs	r2, #18
 80105d0:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 80105d2:	e0f8      	b.n	80107c6 <tx_control+0x2f66>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 80105d4:	46c0      	nop			@ (mov r8, r8)
 80105d6:	e000      	b.n	80105da <tx_control+0x2d7a>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 80105d8:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 80105da:	4bce      	ldr	r3, [pc, #824]	@ (8010914 <tx_control+0x30b4>)
 80105dc:	789b      	ldrb	r3, [r3, #2]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d13f      	bne.n	8010662 <tx_control+0x2e02>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 80105e2:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 80105e4:	4bd1      	ldr	r3, [pc, #836]	@ (801092c <tx_control+0x30cc>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b03      	cmp	r3, #3
 80105ea:	d170      	bne.n	80106ce <tx_control+0x2e6e>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 80105ec:	4bd0      	ldr	r3, [pc, #832]	@ (8010930 <tx_control+0x30d0>)
 80105ee:	0018      	movs	r0, r3
 80105f0:	f7f2 fb14 	bl	8002c1c <findLastValue>
 80105f4:	0003      	movs	r3, r0
 80105f6:	b2da      	uxtb	r2, r3
 80105f8:	4bce      	ldr	r3, [pc, #824]	@ (8010934 <tx_control+0x30d4>)
 80105fa:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 80105fc:	4bce      	ldr	r3, [pc, #824]	@ (8010938 <tx_control+0x30d8>)
 80105fe:	0018      	movs	r0, r3
 8010600:	f7f2 fb0c 	bl	8002c1c <findLastValue>
 8010604:	0003      	movs	r3, r0
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4bca      	ldr	r3, [pc, #808]	@ (8010934 <tx_control+0x30d4>)
 801060a:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 801060c:	4bbc      	ldr	r3, [pc, #752]	@ (8010900 <tx_control+0x30a0>)
 801060e:	881b      	ldrh	r3, [r3, #0]
 8010610:	0a1b      	lsrs	r3, r3, #8
 8010612:	b29b      	uxth	r3, r3
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4bc7      	ldr	r3, [pc, #796]	@ (8010934 <tx_control+0x30d4>)
 8010618:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 801061a:	4bb9      	ldr	r3, [pc, #740]	@ (8010900 <tx_control+0x30a0>)
 801061c:	881b      	ldrh	r3, [r3, #0]
 801061e:	b2da      	uxtb	r2, r3
 8010620:	4bc4      	ldr	r3, [pc, #784]	@ (8010934 <tx_control+0x30d4>)
 8010622:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010624:	4bb8      	ldr	r3, [pc, #736]	@ (8010908 <tx_control+0x30a8>)
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	0a1b      	lsrs	r3, r3, #8
 801062a:	b29b      	uxth	r3, r3
 801062c:	b2da      	uxtb	r2, r3
 801062e:	4bc1      	ldr	r3, [pc, #772]	@ (8010934 <tx_control+0x30d4>)
 8010630:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010632:	4bb5      	ldr	r3, [pc, #724]	@ (8010908 <tx_control+0x30a8>)
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	b2da      	uxtb	r2, r3
 8010638:	4bbe      	ldr	r3, [pc, #760]	@ (8010934 <tx_control+0x30d4>)
 801063a:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 801063c:	4bbd      	ldr	r3, [pc, #756]	@ (8010934 <tx_control+0x30d4>)
 801063e:	2203      	movs	r2, #3
 8010640:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 8010642:	4bbe      	ldr	r3, [pc, #760]	@ (801093c <tx_control+0x30dc>)
 8010644:	781a      	ldrb	r2, [r3, #0]
 8010646:	4bbb      	ldr	r3, [pc, #748]	@ (8010934 <tx_control+0x30d4>)
 8010648:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 801064a:	4bbd      	ldr	r3, [pc, #756]	@ (8010940 <tx_control+0x30e0>)
 801064c:	781a      	ldrb	r2, [r3, #0]
 801064e:	4bb9      	ldr	r3, [pc, #740]	@ (8010934 <tx_control+0x30d4>)
 8010650:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 8010652:	4bbc      	ldr	r3, [pc, #752]	@ (8010944 <tx_control+0x30e4>)
 8010654:	781a      	ldrb	r2, [r3, #0]
 8010656:	4bb7      	ldr	r3, [pc, #732]	@ (8010934 <tx_control+0x30d4>)
 8010658:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 801065a:	4bae      	ldr	r3, [pc, #696]	@ (8010914 <tx_control+0x30b4>)
 801065c:	2201      	movs	r2, #1
 801065e:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 8010660:	e038      	b.n	80106d4 <tx_control+0x2e74>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8010662:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 8010664:	4bb1      	ldr	r3, [pc, #708]	@ (801092c <tx_control+0x30cc>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b03      	cmp	r3, #3
 801066a:	d032      	beq.n	80106d2 <tx_control+0x2e72>
			goto power_event_WF;
		}
desh_event_end_WF:
 801066c:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 801066e:	4ba4      	ldr	r3, [pc, #656]	@ (8010900 <tx_control+0x30a0>)
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	0a1b      	lsrs	r3, r3, #8
 8010674:	b29b      	uxth	r3, r3
 8010676:	b2da      	uxtb	r2, r3
 8010678:	4bae      	ldr	r3, [pc, #696]	@ (8010934 <tx_control+0x30d4>)
 801067a:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 801067c:	4ba0      	ldr	r3, [pc, #640]	@ (8010900 <tx_control+0x30a0>)
 801067e:	881b      	ldrh	r3, [r3, #0]
 8010680:	b2da      	uxtb	r2, r3
 8010682:	4bac      	ldr	r3, [pc, #688]	@ (8010934 <tx_control+0x30d4>)
 8010684:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010686:	4ba0      	ldr	r3, [pc, #640]	@ (8010908 <tx_control+0x30a8>)
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	0a1b      	lsrs	r3, r3, #8
 801068c:	b29b      	uxth	r3, r3
 801068e:	b2da      	uxtb	r2, r3
 8010690:	4ba8      	ldr	r3, [pc, #672]	@ (8010934 <tx_control+0x30d4>)
 8010692:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010694:	4b9c      	ldr	r3, [pc, #624]	@ (8010908 <tx_control+0x30a8>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	b2da      	uxtb	r2, r3
 801069a:	4ba6      	ldr	r3, [pc, #664]	@ (8010934 <tx_control+0x30d4>)
 801069c:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 801069e:	4b9b      	ldr	r3, [pc, #620]	@ (801090c <tx_control+0x30ac>)
 80106a0:	781a      	ldrb	r2, [r3, #0]
 80106a2:	4ba4      	ldr	r3, [pc, #656]	@ (8010934 <tx_control+0x30d4>)
 80106a4:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 80106a6:	4b9a      	ldr	r3, [pc, #616]	@ (8010910 <tx_control+0x30b0>)
 80106a8:	781a      	ldrb	r2, [r3, #0]
 80106aa:	4ba2      	ldr	r3, [pc, #648]	@ (8010934 <tx_control+0x30d4>)
 80106ac:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 80106ae:	4b99      	ldr	r3, [pc, #612]	@ (8010914 <tx_control+0x30b4>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 80106b4:	4b98      	ldr	r3, [pc, #608]	@ (8010918 <tx_control+0x30b8>)
 80106b6:	4a9f      	ldr	r2, [pc, #636]	@ (8010934 <tx_control+0x30d4>)
 80106b8:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 80106ba:	4b98      	ldr	r3, [pc, #608]	@ (801091c <tx_control+0x30bc>)
 80106bc:	4a9d      	ldr	r2, [pc, #628]	@ (8010934 <tx_control+0x30d4>)
 80106be:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 80106c0:	4b97      	ldr	r3, [pc, #604]	@ (8010920 <tx_control+0x30c0>)
 80106c2:	4aa1      	ldr	r2, [pc, #644]	@ (8010948 <tx_control+0x30e8>)
 80106c4:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 80106c6:	4b98      	ldr	r3, [pc, #608]	@ (8010928 <tx_control+0x30c8>)
 80106c8:	2212      	movs	r2, #18
 80106ca:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 80106cc:	e07b      	b.n	80107c6 <tx_control+0x2f66>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 80106ce:	46c0      	nop			@ (mov r8, r8)
 80106d0:	e000      	b.n	80106d4 <tx_control+0x2e74>
			goto power_event_WF;
 80106d2:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 80106d4:	4b8f      	ldr	r3, [pc, #572]	@ (8010914 <tx_control+0x30b4>)
 80106d6:	78db      	ldrb	r3, [r3, #3]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d06d      	beq.n	80107b8 <tx_control+0x2f58>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 80106dc:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 80106de:	4b9b      	ldr	r3, [pc, #620]	@ (801094c <tx_control+0x30ec>)
 80106e0:	2240      	movs	r2, #64	@ 0x40
 80106e2:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 80106e4:	4b99      	ldr	r3, [pc, #612]	@ (801094c <tx_control+0x30ec>)
 80106e6:	2282      	movs	r2, #130	@ 0x82
 80106e8:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 80106ea:	4b91      	ldr	r3, [pc, #580]	@ (8010930 <tx_control+0x30d0>)
 80106ec:	0018      	movs	r0, r3
 80106ee:	f7f2 fa95 	bl	8002c1c <findLastValue>
 80106f2:	0003      	movs	r3, r0
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	4b95      	ldr	r3, [pc, #596]	@ (801094c <tx_control+0x30ec>)
 80106f8:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 80106fa:	4b8f      	ldr	r3, [pc, #572]	@ (8010938 <tx_control+0x30d8>)
 80106fc:	0018      	movs	r0, r3
 80106fe:	f7f2 fa8d 	bl	8002c1c <findLastValue>
 8010702:	0003      	movs	r3, r0
 8010704:	b2da      	uxtb	r2, r3
 8010706:	4b91      	ldr	r3, [pc, #580]	@ (801094c <tx_control+0x30ec>)
 8010708:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 801070a:	4b7d      	ldr	r3, [pc, #500]	@ (8010900 <tx_control+0x30a0>)
 801070c:	881b      	ldrh	r3, [r3, #0]
 801070e:	0a1b      	lsrs	r3, r3, #8
 8010710:	b29b      	uxth	r3, r3
 8010712:	b2da      	uxtb	r2, r3
 8010714:	4b8d      	ldr	r3, [pc, #564]	@ (801094c <tx_control+0x30ec>)
 8010716:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010718:	4b79      	ldr	r3, [pc, #484]	@ (8010900 <tx_control+0x30a0>)
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	b2da      	uxtb	r2, r3
 801071e:	4b8b      	ldr	r3, [pc, #556]	@ (801094c <tx_control+0x30ec>)
 8010720:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010722:	4b79      	ldr	r3, [pc, #484]	@ (8010908 <tx_control+0x30a8>)
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	0a1b      	lsrs	r3, r3, #8
 8010728:	b29b      	uxth	r3, r3
 801072a:	b2da      	uxtb	r2, r3
 801072c:	4b87      	ldr	r3, [pc, #540]	@ (801094c <tx_control+0x30ec>)
 801072e:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010730:	4b75      	ldr	r3, [pc, #468]	@ (8010908 <tx_control+0x30a8>)
 8010732:	881b      	ldrh	r3, [r3, #0]
 8010734:	b2da      	uxtb	r2, r3
 8010736:	4b85      	ldr	r3, [pc, #532]	@ (801094c <tx_control+0x30ec>)
 8010738:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 801073a:	4b84      	ldr	r3, [pc, #528]	@ (801094c <tx_control+0x30ec>)
 801073c:	2204      	movs	r2, #4
 801073e:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010740:	4b7e      	ldr	r3, [pc, #504]	@ (801093c <tx_control+0x30dc>)
 8010742:	781a      	ldrb	r2, [r3, #0]
 8010744:	4b81      	ldr	r3, [pc, #516]	@ (801094c <tx_control+0x30ec>)
 8010746:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010748:	4b7d      	ldr	r3, [pc, #500]	@ (8010940 <tx_control+0x30e0>)
 801074a:	781a      	ldrb	r2, [r3, #0]
 801074c:	4b7f      	ldr	r3, [pc, #508]	@ (801094c <tx_control+0x30ec>)
 801074e:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010750:	4b7c      	ldr	r3, [pc, #496]	@ (8010944 <tx_control+0x30e4>)
 8010752:	781a      	ldrb	r2, [r3, #0]
 8010754:	4b7d      	ldr	r3, [pc, #500]	@ (801094c <tx_control+0x30ec>)
 8010756:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010758:	4b69      	ldr	r3, [pc, #420]	@ (8010900 <tx_control+0x30a0>)
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	0a1b      	lsrs	r3, r3, #8
 801075e:	b29b      	uxth	r3, r3
 8010760:	b2da      	uxtb	r2, r3
 8010762:	4b7a      	ldr	r3, [pc, #488]	@ (801094c <tx_control+0x30ec>)
 8010764:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010766:	4b66      	ldr	r3, [pc, #408]	@ (8010900 <tx_control+0x30a0>)
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	b2da      	uxtb	r2, r3
 801076c:	4b77      	ldr	r3, [pc, #476]	@ (801094c <tx_control+0x30ec>)
 801076e:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010770:	4b65      	ldr	r3, [pc, #404]	@ (8010908 <tx_control+0x30a8>)
 8010772:	881b      	ldrh	r3, [r3, #0]
 8010774:	0a1b      	lsrs	r3, r3, #8
 8010776:	b29b      	uxth	r3, r3
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b74      	ldr	r3, [pc, #464]	@ (801094c <tx_control+0x30ec>)
 801077c:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 801077e:	4b62      	ldr	r3, [pc, #392]	@ (8010908 <tx_control+0x30a8>)
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	b2da      	uxtb	r2, r3
 8010784:	4b71      	ldr	r3, [pc, #452]	@ (801094c <tx_control+0x30ec>)
 8010786:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 8010788:	4b60      	ldr	r3, [pc, #384]	@ (801090c <tx_control+0x30ac>)
 801078a:	781a      	ldrb	r2, [r3, #0]
 801078c:	4b6f      	ldr	r3, [pc, #444]	@ (801094c <tx_control+0x30ec>)
 801078e:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 8010790:	4b5f      	ldr	r3, [pc, #380]	@ (8010910 <tx_control+0x30b0>)
 8010792:	781a      	ldrb	r2, [r3, #0]
 8010794:	4b6d      	ldr	r3, [pc, #436]	@ (801094c <tx_control+0x30ec>)
 8010796:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 8010798:	4b5e      	ldr	r3, [pc, #376]	@ (8010914 <tx_control+0x30b4>)
 801079a:	2200      	movs	r2, #0
 801079c:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 801079e:	4b5e      	ldr	r3, [pc, #376]	@ (8010918 <tx_control+0x30b8>)
 80107a0:	4a6a      	ldr	r2, [pc, #424]	@ (801094c <tx_control+0x30ec>)
 80107a2:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 80107a4:	4b5d      	ldr	r3, [pc, #372]	@ (801091c <tx_control+0x30bc>)
 80107a6:	4a69      	ldr	r2, [pc, #420]	@ (801094c <tx_control+0x30ec>)
 80107a8:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 80107aa:	4b5d      	ldr	r3, [pc, #372]	@ (8010920 <tx_control+0x30c0>)
 80107ac:	4a68      	ldr	r2, [pc, #416]	@ (8010950 <tx_control+0x30f0>)
 80107ae:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 80107b0:	4b5d      	ldr	r3, [pc, #372]	@ (8010928 <tx_control+0x30c8>)
 80107b2:	2212      	movs	r2, #18
 80107b4:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 80107b6:	e006      	b.n	80107c6 <tx_control+0x2f66>
		goto alarm_event_WF;// jra		alarm_event_WF
 80107b8:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 80107ba:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 80107bc:	4b65      	ldr	r3, [pc, #404]	@ (8010954 <tx_control+0x30f4>)
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d04b      	beq.n	801085c <tx_control+0x2ffc>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 80107c4:	e207      	b.n	8010bd6 <tx_control+0x3376>
		bufferWifiTx[0] = 0x40;
 80107c6:	4b64      	ldr	r3, [pc, #400]	@ (8010958 <tx_control+0x30f8>)
 80107c8:	2240      	movs	r2, #64	@ 0x40
 80107ca:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 80107cc:	4b62      	ldr	r3, [pc, #392]	@ (8010958 <tx_control+0x30f8>)
 80107ce:	2282      	movs	r2, #130	@ 0x82
 80107d0:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 80107d2:	4b61      	ldr	r3, [pc, #388]	@ (8010958 <tx_control+0x30f8>)
 80107d4:	2203      	movs	r2, #3
 80107d6:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
 80107d8:	4b55      	ldr	r3, [pc, #340]	@ (8010930 <tx_control+0x30d0>)
 80107da:	0018      	movs	r0, r3
 80107dc:	f7f2 fa1e 	bl	8002c1c <findLastValue>
 80107e0:	0003      	movs	r3, r0
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	4b5c      	ldr	r3, [pc, #368]	@ (8010958 <tx_control+0x30f8>)
 80107e6:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);;
 80107e8:	4b53      	ldr	r3, [pc, #332]	@ (8010938 <tx_control+0x30d8>)
 80107ea:	0018      	movs	r0, r3
 80107ec:	f7f2 fa16 	bl	8002c1c <findLastValue>
 80107f0:	0003      	movs	r3, r0
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	4b58      	ldr	r3, [pc, #352]	@ (8010958 <tx_control+0x30f8>)
 80107f6:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 80107f8:	4b58      	ldr	r3, [pc, #352]	@ (801095c <tx_control+0x30fc>)
 80107fa:	220e      	movs	r2, #14
 80107fc:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 80107fe:	4b46      	ldr	r3, [pc, #280]	@ (8010918 <tx_control+0x30b8>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3304      	adds	r3, #4
 8010804:	4a56      	ldr	r2, [pc, #344]	@ (8010960 <tx_control+0x3100>)
 8010806:	0011      	movs	r1, r2
 8010808:	0018      	movs	r0, r3
 801080a:	f7f6 fb63 	bl	8006ed4 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 801080e:	4b52      	ldr	r3, [pc, #328]	@ (8010958 <tx_control+0x30f8>)
 8010810:	7c9a      	ldrb	r2, [r3, #18]
 8010812:	4b54      	ldr	r3, [pc, #336]	@ (8010964 <tx_control+0x3104>)
 8010814:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 8010816:	4b50      	ldr	r3, [pc, #320]	@ (8010958 <tx_control+0x30f8>)
 8010818:	2200      	movs	r2, #0
 801081a:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 801081c:	4b51      	ldr	r3, [pc, #324]	@ (8010964 <tx_control+0x3104>)
 801081e:	781a      	ldrb	r2, [r3, #0]
 8010820:	4b4d      	ldr	r3, [pc, #308]	@ (8010958 <tx_control+0x30f8>)
 8010822:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 8010824:	4b3c      	ldr	r3, [pc, #240]	@ (8010918 <tx_control+0x30b8>)
 8010826:	4a4c      	ldr	r2, [pc, #304]	@ (8010958 <tx_control+0x30f8>)
 8010828:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 801082a:	4b3c      	ldr	r3, [pc, #240]	@ (801091c <tx_control+0x30bc>)
 801082c:	4a4a      	ldr	r2, [pc, #296]	@ (8010958 <tx_control+0x30f8>)
 801082e:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8010830:	4b3b      	ldr	r3, [pc, #236]	@ (8010920 <tx_control+0x30c0>)
 8010832:	4a4d      	ldr	r2, [pc, #308]	@ (8010968 <tx_control+0x3108>)
 8010834:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 8010836:	4b3c      	ldr	r3, [pc, #240]	@ (8010928 <tx_control+0x30c8>)
 8010838:	2214      	movs	r2, #20
 801083a:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 801083c:	4b4b      	ldr	r3, [pc, #300]	@ (801096c <tx_control+0x310c>)
 801083e:	2200      	movs	r2, #0
 8010840:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 8010842:	4b4b      	ldr	r3, [pc, #300]	@ (8010970 <tx_control+0x3110>)
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010848:	4b48      	ldr	r3, [pc, #288]	@ (801096c <tx_control+0x310c>)
 801084a:	2201      	movs	r2, #1
 801084c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 801084e:	4b41      	ldr	r3, [pc, #260]	@ (8010954 <tx_control+0x30f4>)
 8010850:	2255      	movs	r2, #85	@ 0x55
 8010852:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 8010854:	4b47      	ldr	r3, [pc, #284]	@ (8010974 <tx_control+0x3114>)
 8010856:	2200      	movs	r2, #0
 8010858:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 801085a:	e1bc      	b.n	8010bd6 <tx_control+0x3376>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 801085c:	4b46      	ldr	r3, [pc, #280]	@ (8010978 <tx_control+0x3118>)
 801085e:	881b      	ldrh	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d000      	beq.n	8010866 <tx_control+0x3006>
 8010864:	e1b6      	b.n	8010bd4 <tx_control+0x3374>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 8010866:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 8010868:	4b44      	ldr	r3, [pc, #272]	@ (801097c <tx_control+0x311c>)
 801086a:	2251      	movs	r2, #81	@ 0x51
 801086c:	5c9a      	ldrb	r2, [r3, r2]
 801086e:	4b3b      	ldr	r3, [pc, #236]	@ (801095c <tx_control+0x30fc>)
 8010870:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 8010872:	4b3a      	ldr	r3, [pc, #232]	@ (801095c <tx_control+0x30fc>)
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	001a      	movs	r2, r3
 8010878:	233c      	movs	r3, #60	@ 0x3c
 801087a:	4353      	muls	r3, r2
 801087c:	b29a      	uxth	r2, r3
 801087e:	4b3e      	ldr	r3, [pc, #248]	@ (8010978 <tx_control+0x3118>)
 8010880:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 8010882:	4b1e      	ldr	r3, [pc, #120]	@ (80108fc <tx_control+0x309c>)
 8010884:	781a      	ldrb	r2, [r3, #0]
 8010886:	4b3e      	ldr	r3, [pc, #248]	@ (8010980 <tx_control+0x3120>)
 8010888:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 801088a:	4b1c      	ldr	r3, [pc, #112]	@ (80108fc <tx_control+0x309c>)
 801088c:	785a      	ldrb	r2, [r3, #1]
 801088e:	4b3c      	ldr	r3, [pc, #240]	@ (8010980 <tx_control+0x3120>)
 8010890:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 8010892:	4b3b      	ldr	r3, [pc, #236]	@ (8010980 <tx_control+0x3120>)
 8010894:	2200      	movs	r2, #0
 8010896:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 8010898:	4b39      	ldr	r3, [pc, #228]	@ (8010980 <tx_control+0x3120>)
 801089a:	2200      	movs	r2, #0
 801089c:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 801089e:	4b38      	ldr	r3, [pc, #224]	@ (8010980 <tx_control+0x3120>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 80108a4:	4b36      	ldr	r3, [pc, #216]	@ (8010980 <tx_control+0x3120>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 80108aa:	4b35      	ldr	r3, [pc, #212]	@ (8010980 <tx_control+0x3120>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 80108b0:	4b33      	ldr	r3, [pc, #204]	@ (8010980 <tx_control+0x3120>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 80108b6:	4b33      	ldr	r3, [pc, #204]	@ (8010984 <tx_control+0x3124>)
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2201      	movs	r2, #1
 80108bc:	4053      	eors	r3, r2
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d103      	bne.n	80108cc <tx_control+0x306c>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 80108c4:	4b2e      	ldr	r3, [pc, #184]	@ (8010980 <tx_control+0x3120>)
 80108c6:	2201      	movs	r2, #1
 80108c8:	709a      	strb	r2, [r3, #2]
 80108ca:	e000      	b.n	80108ce <tx_control+0x306e>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 80108cc:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 80108ce:	4b2d      	ldr	r3, [pc, #180]	@ (8010984 <tx_control+0x3124>)
 80108d0:	785b      	ldrb	r3, [r3, #1]
 80108d2:	2201      	movs	r2, #1
 80108d4:	4053      	eors	r3, r2
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <tx_control+0x3084>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 80108dc:	4b28      	ldr	r3, [pc, #160]	@ (8010980 <tx_control+0x3120>)
 80108de:	2201      	movs	r2, #1
 80108e0:	70da      	strb	r2, [r3, #3]
 80108e2:	e000      	b.n	80108e6 <tx_control+0x3086>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 80108e4:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 80108e6:	4b27      	ldr	r3, [pc, #156]	@ (8010984 <tx_control+0x3124>)
 80108e8:	789b      	ldrb	r3, [r3, #2]
 80108ea:	2201      	movs	r2, #1
 80108ec:	4053      	eors	r3, r2
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d149      	bne.n	8010988 <tx_control+0x3128>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 80108f4:	4b22      	ldr	r3, [pc, #136]	@ (8010980 <tx_control+0x3120>)
 80108f6:	2201      	movs	r2, #1
 80108f8:	711a      	strb	r2, [r3, #4]
 80108fa:	e046      	b.n	801098a <tx_control+0x312a>
 80108fc:	20000bb4 	.word	0x20000bb4
 8010900:	20000dc0 	.word	0x20000dc0
 8010904:	20000f10 	.word	0x20000f10
 8010908:	20000dc2 	.word	0x20000dc2
 801090c:	20000bc2 	.word	0x20000bc2
 8010910:	20000bc3 	.word	0x20000bc3
 8010914:	20000f4c 	.word	0x20000f4c
 8010918:	20000e24 	.word	0x20000e24
 801091c:	20000e1c 	.word	0x20000e1c
 8010920:	20000e20 	.word	0x20000e20
 8010924:	20000f21 	.word	0x20000f21
 8010928:	20000e40 	.word	0x20000e40
 801092c:	20000ba8 	.word	0x20000ba8
 8010930:	0803f07b 	.word	0x0803f07b
 8010934:	20000f24 	.word	0x20000f24
 8010938:	0803f07c 	.word	0x0803f07c
 801093c:	20000bc0 	.word	0x20000bc0
 8010940:	20000bc1 	.word	0x20000bc1
 8010944:	20000bde 	.word	0x20000bde
 8010948:	20000f35 	.word	0x20000f35
 801094c:	20000f38 	.word	0x20000f38
 8010950:	20000f49 	.word	0x20000f49
 8010954:	20000e29 	.word	0x20000e29
 8010958:	20000f68 	.word	0x20000f68
 801095c:	20000b65 	.word	0x20000b65
 8010960:	20000f6d 	.word	0x20000f6d
 8010964:	20000b64 	.word	0x20000b64
 8010968:	20000f7c 	.word	0x20000f7c
 801096c:	20000e2c 	.word	0x20000e2c
 8010970:	20000e44 	.word	0x20000e44
 8010974:	20000e34 	.word	0x20000e34
 8010978:	20000f5e 	.word	0x20000f5e
 801097c:	200000b8 	.word	0x200000b8
 8010980:	20000dd0 	.word	0x20000dd0
 8010984:	20000c4c 	.word	0x20000c4c
			goto noFlag_ahorro2_TD;
 8010988:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 801098a:	4b97      	ldr	r3, [pc, #604]	@ (8010be8 <tx_control+0x3388>)
 801098c:	78db      	ldrb	r3, [r3, #3]
 801098e:	2201      	movs	r2, #1
 8010990:	4053      	eors	r3, r2
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d103      	bne.n	80109a0 <tx_control+0x3140>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 8010998:	4b94      	ldr	r3, [pc, #592]	@ (8010bec <tx_control+0x338c>)
 801099a:	2201      	movs	r2, #1
 801099c:	715a      	strb	r2, [r3, #5]
 801099e:	e000      	b.n	80109a2 <tx_control+0x3142>
			goto noFlag_nocturno_TD;
 80109a0:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 80109a2:	4b93      	ldr	r3, [pc, #588]	@ (8010bf0 <tx_control+0x3390>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2201      	movs	r2, #1
 80109a8:	4053      	eors	r3, r2
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <tx_control+0x3158>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 80109b0:	4b8e      	ldr	r3, [pc, #568]	@ (8010bec <tx_control+0x338c>)
 80109b2:	2201      	movs	r2, #1
 80109b4:	719a      	strb	r2, [r3, #6]
 80109b6:	e000      	b.n	80109ba <tx_control+0x315a>
			goto noFlag_vent_TD;
 80109b8:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 80109ba:	4b8e      	ldr	r3, [pc, #568]	@ (8010bf4 <tx_control+0x3394>)
 80109bc:	789b      	ldrb	r3, [r3, #2]
 80109be:	2201      	movs	r2, #1
 80109c0:	4053      	eors	r3, r2
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d103      	bne.n	80109d0 <tx_control+0x3170>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 80109c8:	4b88      	ldr	r3, [pc, #544]	@ (8010bec <tx_control+0x338c>)
 80109ca:	2201      	movs	r2, #1
 80109cc:	71da      	strb	r2, [r3, #7]
 80109ce:	e000      	b.n	80109d2 <tx_control+0x3172>
			goto noFlag_Aux_TD;
 80109d0:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 80109d2:	231b      	movs	r3, #27
 80109d4:	18fb      	adds	r3, r7, r3
 80109d6:	2200      	movs	r2, #0
 80109d8:	701a      	strb	r2, [r3, #0]
 80109da:	e00d      	b.n	80109f8 <tx_control+0x3198>
			alarmas2_TD[k] = (trefst2[k]);
 80109dc:	201b      	movs	r0, #27
 80109de:	183b      	adds	r3, r7, r0
 80109e0:	781a      	ldrb	r2, [r3, #0]
 80109e2:	183b      	adds	r3, r7, r0
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	4984      	ldr	r1, [pc, #528]	@ (8010bf8 <tx_control+0x3398>)
 80109e8:	5c89      	ldrb	r1, [r1, r2]
 80109ea:	4a84      	ldr	r2, [pc, #528]	@ (8010bfc <tx_control+0x339c>)
 80109ec:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 80109ee:	183b      	adds	r3, r7, r0
 80109f0:	781a      	ldrb	r2, [r3, #0]
 80109f2:	183b      	adds	r3, r7, r0
 80109f4:	3201      	adds	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	231b      	movs	r3, #27
 80109fa:	18fb      	adds	r3, r7, r3
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	2b07      	cmp	r3, #7
 8010a00:	d9ec      	bls.n	80109dc <tx_control+0x317c>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 8010a02:	4b7e      	ldr	r3, [pc, #504]	@ (8010bfc <tx_control+0x339c>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 8010a08:	4b7d      	ldr	r3, [pc, #500]	@ (8010c00 <tx_control+0x33a0>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010a0e:	2300      	movs	r3, #0
 8010a10:	617b      	str	r3, [r7, #20]
 8010a12:	e013      	b.n	8010a3c <tx_control+0x31dc>
			alarmas_TD |= (trefst[k] << k);
 8010a14:	4a7b      	ldr	r2, [pc, #492]	@ (8010c04 <tx_control+0x33a4>)
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	18d3      	adds	r3, r2, r3
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	001a      	movs	r2, r3
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	409a      	lsls	r2, r3
 8010a22:	0013      	movs	r3, r2
 8010a24:	b25a      	sxtb	r2, r3
 8010a26:	4b76      	ldr	r3, [pc, #472]	@ (8010c00 <tx_control+0x33a0>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	b25b      	sxtb	r3, r3
 8010a2c:	4313      	orrs	r3, r2
 8010a2e:	b25b      	sxtb	r3, r3
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	4b73      	ldr	r3, [pc, #460]	@ (8010c00 <tx_control+0x33a0>)
 8010a34:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	617b      	str	r3, [r7, #20]
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	2b07      	cmp	r3, #7
 8010a40:	dde8      	ble.n	8010a14 <tx_control+0x31b4>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 8010a42:	4b71      	ldr	r3, [pc, #452]	@ (8010c08 <tx_control+0x33a8>)
 8010a44:	2240      	movs	r2, #64	@ 0x40
 8010a46:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 8010a48:	4b6f      	ldr	r3, [pc, #444]	@ (8010c08 <tx_control+0x33a8>)
 8010a4a:	2281      	movs	r2, #129	@ 0x81
 8010a4c:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 8010a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8010c08 <tx_control+0x33a8>)
 8010a50:	2207      	movs	r2, #7
 8010a52:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 8010a54:	4b6d      	ldr	r3, [pc, #436]	@ (8010c0c <tx_control+0x33ac>)
 8010a56:	0018      	movs	r0, r3
 8010a58:	f7f2 f8e0 	bl	8002c1c <findLastValue>
 8010a5c:	0003      	movs	r3, r0
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	4b69      	ldr	r3, [pc, #420]	@ (8010c08 <tx_control+0x33a8>)
 8010a62:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010a64:	4b6a      	ldr	r3, [pc, #424]	@ (8010c10 <tx_control+0x33b0>)
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	0a1b      	lsrs	r3, r3, #8
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	4b66      	ldr	r3, [pc, #408]	@ (8010c08 <tx_control+0x33a8>)
 8010a70:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010a72:	4b67      	ldr	r3, [pc, #412]	@ (8010c10 <tx_control+0x33b0>)
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	4b63      	ldr	r3, [pc, #396]	@ (8010c08 <tx_control+0x33a8>)
 8010a7a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010a7c:	4b65      	ldr	r3, [pc, #404]	@ (8010c14 <tx_control+0x33b4>)
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	0a1b      	lsrs	r3, r3, #8
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	4b60      	ldr	r3, [pc, #384]	@ (8010c08 <tx_control+0x33a8>)
 8010a88:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010a8a:	4b62      	ldr	r3, [pc, #392]	@ (8010c14 <tx_control+0x33b4>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	4b5d      	ldr	r3, [pc, #372]	@ (8010c08 <tx_control+0x33a8>)
 8010a92:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 8010a94:	4b60      	ldr	r3, [pc, #384]	@ (8010c18 <tx_control+0x33b8>)
 8010a96:	781a      	ldrb	r2, [r3, #0]
 8010a98:	4b5b      	ldr	r3, [pc, #364]	@ (8010c08 <tx_control+0x33a8>)
 8010a9a:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 8010a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8010c1c <tx_control+0x33bc>)
 8010a9e:	781a      	ldrb	r2, [r3, #0]
 8010aa0:	4b59      	ldr	r3, [pc, #356]	@ (8010c08 <tx_control+0x33a8>)
 8010aa2:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 8010aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8010c20 <tx_control+0x33c0>)
 8010aa6:	781a      	ldrb	r2, [r3, #0]
 8010aa8:	4b57      	ldr	r3, [pc, #348]	@ (8010c08 <tx_control+0x33a8>)
 8010aaa:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 8010aac:	4b5d      	ldr	r3, [pc, #372]	@ (8010c24 <tx_control+0x33c4>)
 8010aae:	781a      	ldrb	r2, [r3, #0]
 8010ab0:	4b55      	ldr	r3, [pc, #340]	@ (8010c08 <tx_control+0x33a8>)
 8010ab2:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 8010ab4:	4b54      	ldr	r3, [pc, #336]	@ (8010c08 <tx_control+0x33a8>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 8010aba:	4b5b      	ldr	r3, [pc, #364]	@ (8010c28 <tx_control+0x33c8>)
 8010abc:	781a      	ldrb	r2, [r3, #0]
 8010abe:	4b52      	ldr	r3, [pc, #328]	@ (8010c08 <tx_control+0x33a8>)
 8010ac0:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 8010ac2:	4b51      	ldr	r3, [pc, #324]	@ (8010c08 <tx_control+0x33a8>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8010ac8:	2300      	movs	r3, #0
 8010aca:	613b      	str	r3, [r7, #16]
 8010acc:	e011      	b.n	8010af2 <tx_control+0x3292>
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 8010ace:	4b4e      	ldr	r3, [pc, #312]	@ (8010c08 <tx_control+0x33a8>)
 8010ad0:	7bda      	ldrb	r2, [r3, #15]
 8010ad2:	4946      	ldr	r1, [pc, #280]	@ (8010bec <tx_control+0x338c>)
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	18cb      	adds	r3, r1, r3
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	0019      	movs	r1, r3
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	4099      	lsls	r1, r3
 8010ae0:	000b      	movs	r3, r1
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	4b47      	ldr	r3, [pc, #284]	@ (8010c08 <tx_control+0x33a8>)
 8010aea:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	3301      	adds	r3, #1
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2b07      	cmp	r3, #7
 8010af6:	ddea      	ble.n	8010ace <tx_control+0x326e>
		}
		bufferWifiTx[16] =estados_TD;
 8010af8:	4b4c      	ldr	r3, [pc, #304]	@ (8010c2c <tx_control+0x33cc>)
 8010afa:	781a      	ldrb	r2, [r3, #0]
 8010afc:	4b42      	ldr	r3, [pc, #264]	@ (8010c08 <tx_control+0x33a8>)
 8010afe:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 8010b00:	4b41      	ldr	r3, [pc, #260]	@ (8010c08 <tx_control+0x33a8>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8010b06:	230f      	movs	r3, #15
 8010b08:	18fb      	adds	r3, r7, r3
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	701a      	strb	r2, [r3, #0]
 8010b0e:	e015      	b.n	8010b3c <tx_control+0x32dc>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 8010b10:	4b3d      	ldr	r3, [pc, #244]	@ (8010c08 <tx_control+0x33a8>)
 8010b12:	7c5a      	ldrb	r2, [r3, #17]
 8010b14:	200f      	movs	r0, #15
 8010b16:	183b      	adds	r3, r7, r0
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	4938      	ldr	r1, [pc, #224]	@ (8010bfc <tx_control+0x339c>)
 8010b1c:	5ccb      	ldrb	r3, [r1, r3]
 8010b1e:	0019      	movs	r1, r3
 8010b20:	183b      	adds	r3, r7, r0
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	4099      	lsls	r1, r3
 8010b26:	000b      	movs	r3, r1
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b36      	ldr	r3, [pc, #216]	@ (8010c08 <tx_control+0x33a8>)
 8010b30:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8010b32:	183b      	adds	r3, r7, r0
 8010b34:	781a      	ldrb	r2, [r3, #0]
 8010b36:	183b      	adds	r3, r7, r0
 8010b38:	3201      	adds	r2, #1
 8010b3a:	701a      	strb	r2, [r3, #0]
 8010b3c:	230f      	movs	r3, #15
 8010b3e:	18fb      	adds	r3, r7, r3
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	2b07      	cmp	r3, #7
 8010b44:	d9e4      	bls.n	8010b10 <tx_control+0x32b0>
		}

		bufferWifiTx[18] = alarmas_TD;
 8010b46:	4b2e      	ldr	r3, [pc, #184]	@ (8010c00 <tx_control+0x33a0>)
 8010b48:	781a      	ldrb	r2, [r3, #0]
 8010b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8010c08 <tx_control+0x33a8>)
 8010b4c:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 8010b4e:	4b38      	ldr	r3, [pc, #224]	@ (8010c30 <tx_control+0x33d0>)
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	0a1b      	lsrs	r3, r3, #8
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4b2b      	ldr	r3, [pc, #172]	@ (8010c08 <tx_control+0x33a8>)
 8010b5a:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 8010b5c:	4b34      	ldr	r3, [pc, #208]	@ (8010c30 <tx_control+0x33d0>)
 8010b5e:	881b      	ldrh	r3, [r3, #0]
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	4b29      	ldr	r3, [pc, #164]	@ (8010c08 <tx_control+0x33a8>)
 8010b64:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 8010b66:	4b32      	ldr	r3, [pc, #200]	@ (8010c30 <tx_control+0x33d0>)
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	0a1b      	lsrs	r3, r3, #8
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	4b25      	ldr	r3, [pc, #148]	@ (8010c08 <tx_control+0x33a8>)
 8010b72:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 8010b74:	4b2e      	ldr	r3, [pc, #184]	@ (8010c30 <tx_control+0x33d0>)
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4b23      	ldr	r3, [pc, #140]	@ (8010c08 <tx_control+0x33a8>)
 8010b7c:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8010c34 <tx_control+0x33d4>)
 8010b80:	4a21      	ldr	r2, [pc, #132]	@ (8010c08 <tx_control+0x33a8>)
 8010b82:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010b84:	4b2c      	ldr	r3, [pc, #176]	@ (8010c38 <tx_control+0x33d8>)
 8010b86:	4a20      	ldr	r2, [pc, #128]	@ (8010c08 <tx_control+0x33a8>)
 8010b88:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 8010b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8010c3c <tx_control+0x33dc>)
 8010b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8010c40 <tx_control+0x33e0>)
 8010b8e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 8010b90:	4b2c      	ldr	r3, [pc, #176]	@ (8010c44 <tx_control+0x33e4>)
 8010b92:	2217      	movs	r2, #23
 8010b94:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010b96:	4b2c      	ldr	r3, [pc, #176]	@ (8010c48 <tx_control+0x33e8>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8010c4c <tx_control+0x33ec>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010ba2:	4b29      	ldr	r3, [pc, #164]	@ (8010c48 <tx_control+0x33e8>)
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 8010ba8:	4b29      	ldr	r3, [pc, #164]	@ (8010c50 <tx_control+0x33f0>)
 8010baa:	2255      	movs	r2, #85	@ 0x55
 8010bac:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 8010bae:	4b29      	ldr	r3, [pc, #164]	@ (8010c54 <tx_control+0x33f4>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 8010bb4:	e00f      	b.n	8010bd6 <tx_control+0x3376>
		goto end_tx_wifi;//jp			end_tx_wifi
 8010bb6:	46c0      	nop			@ (mov r8, r8)
 8010bb8:	f7fe fefd 	bl	800f9b6 <tx_control+0x2156>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 8010bbc:	46c0      	nop			@ (mov r8, r8)
 8010bbe:	f7fe fefa 	bl	800f9b6 <tx_control+0x2156>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 8010bc2:	46c0      	nop			@ (mov r8, r8)
 8010bc4:	f7fe fef7 	bl	800f9b6 <tx_control+0x2156>
		goto end_tx_wifi;// jp		end_tx_wifi
 8010bc8:	46c0      	nop			@ (mov r8, r8)
 8010bca:	f7fe fef4 	bl	800f9b6 <tx_control+0x2156>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 8010bce:	46c0      	nop			@ (mov r8, r8)
 8010bd0:	f7fe fef1 	bl	800f9b6 <tx_control+0x2156>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 8010bd4:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 8010bd6:	f7fe feee 	bl	800f9b6 <tx_control+0x2156>
		goto end_tx_control_b;
 8010bda:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 8010bdc:	46c0      	nop			@ (mov r8, r8)

}
 8010bde:	46c0      	nop			@ (mov r8, r8)
 8010be0:	46bd      	mov	sp, r7
 8010be2:	b013      	add	sp, #76	@ 0x4c
 8010be4:	bd90      	pop	{r4, r7, pc}
 8010be6:	46c0      	nop			@ (mov r8, r8)
 8010be8:	20000b88 	.word	0x20000b88
 8010bec:	20000dd0 	.word	0x20000dd0
 8010bf0:	20000bf0 	.word	0x20000bf0
 8010bf4:	20000bb4 	.word	0x20000bb4
 8010bf8:	20000b90 	.word	0x20000b90
 8010bfc:	20000ddc 	.word	0x20000ddc
 8010c00:	20000de4 	.word	0x20000de4
 8010c04:	20000b98 	.word	0x20000b98
 8010c08:	20000f68 	.word	0x20000f68
 8010c0c:	0803f07c 	.word	0x0803f07c
 8010c10:	20000dc0 	.word	0x20000dc0
 8010c14:	20000dc2 	.word	0x20000dc2
 8010c18:	20000bc0 	.word	0x20000bc0
 8010c1c:	20000bc1 	.word	0x20000bc1
 8010c20:	20000bc2 	.word	0x20000bc2
 8010c24:	20000bc3 	.word	0x20000bc3
 8010c28:	20000bde 	.word	0x20000bde
 8010c2c:	20000dd8 	.word	0x20000dd8
 8010c30:	20000c64 	.word	0x20000c64
 8010c34:	20000e24 	.word	0x20000e24
 8010c38:	20000e1c 	.word	0x20000e1c
 8010c3c:	20000e20 	.word	0x20000e20
 8010c40:	20000f7f 	.word	0x20000f7f
 8010c44:	20000e40 	.word	0x20000e40
 8010c48:	20000e2c 	.word	0x20000e2c
 8010c4c:	20000e44 	.word	0x20000e44
 8010c50:	20000e29 	.word	0x20000e29
 8010c54:	20000e34 	.word	0x20000e34

08010c58 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 8010c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8010d1c <prepTXlogg_2+0xc4>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	337e      	adds	r3, #126	@ 0x7e
 8010c68:	4a2d      	ldr	r2, [pc, #180]	@ (8010d20 <prepTXlogg_2+0xc8>)
 8010c6a:	7812      	ldrb	r2, [r2, #0]
 8010c6c:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8010c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8010d24 <prepTXlogg_2+0xcc>)
 8010c70:	22aa      	movs	r2, #170	@ 0xaa
 8010c72:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 8010c74:	4b2c      	ldr	r3, [pc, #176]	@ (8010d28 <prepTXlogg_2+0xd0>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	01db      	lsls	r3, r3, #7
 8010c7a:	b29a      	uxth	r2, r3
 8010c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8010d2c <prepTXlogg_2+0xd4>)
 8010c7e:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 8010c80:	4b2b      	ldr	r3, [pc, #172]	@ (8010d30 <prepTXlogg_2+0xd8>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a29      	ldr	r2, [pc, #164]	@ (8010d2c <prepTXlogg_2+0xd4>)
 8010c86:	8812      	ldrh	r2, [r2, #0]
 8010c88:	189a      	adds	r2, r3, r2
 8010c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8010d34 <prepTXlogg_2+0xdc>)
 8010c8c:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 8010c8e:	4b23      	ldr	r3, [pc, #140]	@ (8010d1c <prepTXlogg_2+0xc4>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	4b29      	ldr	r3, [pc, #164]	@ (8010d38 <prepTXlogg_2+0xe0>)
 8010c94:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 8010c96:	f7f6 f955 	bl	8006f44 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 8010c9a:	f7f6 f86f 	bl	8006d7c <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 8010c9e:	f7f6 f833 	bl	8006d08 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 8010ca2:	4b21      	ldr	r3, [pc, #132]	@ (8010d28 <prepTXlogg_2+0xd0>)
 8010ca4:	781a      	ldrb	r2, [r3, #0]
 8010ca6:	4b25      	ldr	r3, [pc, #148]	@ (8010d3c <prepTXlogg_2+0xe4>)
 8010ca8:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 8010caa:	4b1d      	ldr	r3, [pc, #116]	@ (8010d20 <prepTXlogg_2+0xc8>)
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d006      	beq.n	8010cc0 <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 8010cb2:	4b22      	ldr	r3, [pc, #136]	@ (8010d3c <prepTXlogg_2+0xe4>)
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	4b20      	ldr	r3, [pc, #128]	@ (8010d3c <prepTXlogg_2+0xe4>)
 8010cbc:	701a      	strb	r2, [r3, #0]
 8010cbe:	e000      	b.n	8010cc2 <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 8010cc0:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 8010cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8010d3c <prepTXlogg_2+0xe4>)
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	01db      	lsls	r3, r3, #7
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	4b18      	ldr	r3, [pc, #96]	@ (8010d2c <prepTXlogg_2+0xd4>)
 8010ccc:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 8010cce:	4b18      	ldr	r3, [pc, #96]	@ (8010d30 <prepTXlogg_2+0xd8>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4a16      	ldr	r2, [pc, #88]	@ (8010d2c <prepTXlogg_2+0xd4>)
 8010cd4:	8812      	ldrh	r2, [r2, #0]
 8010cd6:	189b      	adds	r3, r3, r2
 8010cd8:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 8010cda:	4b19      	ldr	r3, [pc, #100]	@ (8010d40 <prepTXlogg_2+0xe8>)
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 8010ce0:	4b18      	ldr	r3, [pc, #96]	@ (8010d44 <prepTXlogg_2+0xec>)
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 8010ce6:	4b18      	ldr	r3, [pc, #96]	@ (8010d48 <prepTXlogg_2+0xf0>)
 8010ce8:	2201      	movs	r2, #1
 8010cea:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 8010cec:	4b15      	ldr	r3, [pc, #84]	@ (8010d44 <prepTXlogg_2+0xec>)
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	4b16      	ldr	r3, [pc, #88]	@ (8010d4c <prepTXlogg_2+0xf4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d106      	bne.n	8010d06 <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 8010cf8:	4b15      	ldr	r3, [pc, #84]	@ (8010d50 <prepTXlogg_2+0xf8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 8010cfe:	4b12      	ldr	r3, [pc, #72]	@ (8010d48 <prepTXlogg_2+0xf0>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 8010d04:	e003      	b.n	8010d0e <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 8010d06:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 8010d0e:	4b11      	ldr	r3, [pc, #68]	@ (8010d54 <prepTXlogg_2+0xfc>)
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	601a      	str	r2, [r3, #0]
			//ret
}
 8010d14:	46c0      	nop			@ (mov r8, r8)
 8010d16:	46bd      	mov	sp, r7
 8010d18:	b002      	add	sp, #8
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	20000db4 	.word	0x20000db4
 8010d20:	20000dab 	.word	0x20000dab
 8010d24:	20000d9c 	.word	0x20000d9c
 8010d28:	20000daa 	.word	0x20000daa
 8010d2c:	200008e2 	.word	0x200008e2
 8010d30:	20000db0 	.word	0x20000db0
 8010d34:	20000da0 	.word	0x20000da0
 8010d38:	20000da4 	.word	0x20000da4
 8010d3c:	200008e0 	.word	0x200008e0
 8010d40:	20000e1c 	.word	0x20000e1c
 8010d44:	20000e24 	.word	0x20000e24
 8010d48:	20000e2c 	.word	0x20000e2c
 8010d4c:	20000e38 	.word	0x20000e38
 8010d50:	20000e3c 	.word	0x20000e3c
 8010d54:	20000e20 	.word	0x20000e20

08010d58 <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8010d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8010f8c <voltmetro+0x234>)
 8010d5e:	799b      	ldrb	r3, [r3, #6]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d100      	bne.n	8010d66 <voltmetro+0xe>
 8010d64:	e0fb      	b.n	8010f5e <voltmetro+0x206>
					goto voltmetro1;
 8010d66:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 8010d68:	4b89      	ldr	r3, [pc, #548]	@ (8010f90 <voltmetro+0x238>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	4b87      	ldr	r3, [pc, #540]	@ (8010f90 <voltmetro+0x238>)
 8010d72:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 8010d74:	4b86      	ldr	r3, [pc, #536]	@ (8010f90 <voltmetro+0x238>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	2b18      	cmp	r3, #24
 8010d7a:	d800      	bhi.n	8010d7e <voltmetro+0x26>
 8010d7c:	e06f      	b.n	8010e5e <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8010d7e:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8010d80:	4b83      	ldr	r3, [pc, #524]	@ (8010f90 <voltmetro+0x238>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 8010d86:	4b83      	ldr	r3, [pc, #524]	@ (8010f94 <voltmetro+0x23c>)
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	4b83      	ldr	r3, [pc, #524]	@ (8010f98 <voltmetro+0x240>)
 8010d8c:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8010d8e:	4b82      	ldr	r3, [pc, #520]	@ (8010f98 <voltmetro+0x240>)
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	2bff      	cmp	r3, #255	@ 0xff
 8010d94:	d10a      	bne.n	8010dac <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 8010d96:	4b81      	ldr	r3, [pc, #516]	@ (8010f9c <voltmetro+0x244>)
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	2b02      	cmp	r3, #2
 8010d9c:	d019      	beq.n	8010dd2 <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 8010d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8010f9c <voltmetro+0x244>)
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	3301      	adds	r3, #1
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	4b7d      	ldr	r3, [pc, #500]	@ (8010f9c <voltmetro+0x244>)
 8010da8:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8010daa:	e05b      	b.n	8010e64 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 8010dac:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 8010dae:	4b7b      	ldr	r3, [pc, #492]	@ (8010f9c <voltmetro+0x244>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 8010db4:	4b78      	ldr	r3, [pc, #480]	@ (8010f98 <voltmetro+0x240>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	2b32      	cmp	r3, #50	@ 0x32
 8010dba:	d82a      	bhi.n	8010e12 <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 8010dbc:	4b78      	ldr	r3, [pc, #480]	@ (8010fa0 <voltmetro+0x248>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	d008      	beq.n	8010dd6 <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 8010dc4:	4b76      	ldr	r3, [pc, #472]	@ (8010fa0 <voltmetro+0x248>)
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	4b74      	ldr	r3, [pc, #464]	@ (8010fa0 <voltmetro+0x248>)
 8010dce:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8010dd0:	e048      	b.n	8010e64 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 8010dd2:	46c0      	nop			@ (mov r8, r8)
 8010dd4:	e000      	b.n	8010dd8 <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 8010dd6:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8010dd8:	4b72      	ldr	r3, [pc, #456]	@ (8010fa4 <voltmetro+0x24c>)
 8010dda:	2200      	movs	r2, #0
 8010ddc:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 8010dde:	4b72      	ldr	r3, [pc, #456]	@ (8010fa8 <voltmetro+0x250>)
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d103      	bne.n	8010dee <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 8010de6:	4b6f      	ldr	r3, [pc, #444]	@ (8010fa4 <voltmetro+0x24c>)
 8010de8:	2201      	movs	r2, #1
 8010dea:	701a      	strb	r2, [r3, #0]
 8010dec:	e000      	b.n	8010df0 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 8010dee:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 8010df0:	4b6e      	ldr	r3, [pc, #440]	@ (8010fac <voltmetro+0x254>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 8010df6:	4b6e      	ldr	r3, [pc, #440]	@ (8010fb0 <voltmetro+0x258>)
 8010df8:	2273      	movs	r2, #115	@ 0x73
 8010dfa:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 8010dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8010fb4 <voltmetro+0x25c>)
 8010dfe:	2257      	movs	r2, #87	@ 0x57
 8010e00:	5c9b      	ldrb	r3, [r3, r2]
 8010e02:	2b02      	cmp	r3, #2
 8010e04:	d103      	bne.n	8010e0e <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 8010e06:	4b6a      	ldr	r3, [pc, #424]	@ (8010fb0 <voltmetro+0x258>)
 8010e08:	22d2      	movs	r2, #210	@ 0xd2
 8010e0a:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 8010e0c:	e02a      	b.n	8010e64 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 8010e0e:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 8010e10:	e028      	b.n	8010e64 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 8010e12:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 8010e14:	4b62      	ldr	r3, [pc, #392]	@ (8010fa0 <voltmetro+0x248>)
 8010e16:	2200      	movs	r2, #0
 8010e18:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8010e1a:	4b62      	ldr	r3, [pc, #392]	@ (8010fa4 <voltmetro+0x24c>)
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8010e20:	4b62      	ldr	r3, [pc, #392]	@ (8010fac <voltmetro+0x254>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	001a      	movs	r2, r3
 8010e26:	4b5c      	ldr	r3, [pc, #368]	@ (8010f98 <voltmetro+0x240>)
 8010e28:	7819      	ldrb	r1, [r3, #0]
 8010e2a:	4b63      	ldr	r3, [pc, #396]	@ (8010fb8 <voltmetro+0x260>)
 8010e2c:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8010e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8010fac <voltmetro+0x254>)
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	3301      	adds	r3, #1
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	4b5d      	ldr	r3, [pc, #372]	@ (8010fac <voltmetro+0x254>)
 8010e38:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 8010e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8010fac <voltmetro+0x254>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b07      	cmp	r3, #7
 8010e40:	d90f      	bls.n	8010e62 <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 8010e42:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 8010e44:	4b59      	ldr	r3, [pc, #356]	@ (8010fac <voltmetro+0x254>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 8010e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8010fb8 <voltmetro+0x260>)
 8010e4c:	2108      	movs	r1, #8
 8010e4e:	0018      	movs	r0, r3
 8010e50:	f7f4 fb6e 	bl	8005530 <prom8m1b>
 8010e54:	0003      	movs	r3, r0
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	4b55      	ldr	r3, [pc, #340]	@ (8010fb0 <voltmetro+0x258>)
 8010e5a:	701a      	strb	r2, [r3, #0]
 8010e5c:	e002      	b.n	8010e64 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8010e5e:	46c0      	nop			@ (mov r8, r8)
 8010e60:	e000      	b.n	8010e64 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 8010e62:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 8010e64:	4b55      	ldr	r3, [pc, #340]	@ (8010fbc <voltmetro+0x264>)
 8010e66:	79db      	ldrb	r3, [r3, #7]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d104      	bne.n	8010e76 <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8010e6c:	4b54      	ldr	r3, [pc, #336]	@ (8010fc0 <voltmetro+0x268>)
 8010e6e:	781a      	ldrb	r2, [r3, #0]
 8010e70:	4b54      	ldr	r3, [pc, #336]	@ (8010fc4 <voltmetro+0x26c>)
 8010e72:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 8010e74:	e004      	b.n	8010e80 <voltmetro+0x128>
					goto hist_vla;
 8010e76:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 8010e78:	4b53      	ldr	r3, [pc, #332]	@ (8010fc8 <voltmetro+0x270>)
 8010e7a:	781a      	ldrb	r2, [r3, #0]
 8010e7c:	4b51      	ldr	r3, [pc, #324]	@ (8010fc4 <voltmetro+0x26c>)
 8010e7e:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8010e80:	4b50      	ldr	r3, [pc, #320]	@ (8010fc4 <voltmetro+0x26c>)
 8010e82:	781a      	ldrb	r2, [r3, #0]
 8010e84:	4b4a      	ldr	r3, [pc, #296]	@ (8010fb0 <voltmetro+0x258>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d80c      	bhi.n	8010ea6 <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8010e8c:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8010e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8010fcc <voltmetro+0x274>)
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d165      	bne.n	8010f62 <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 8010e96:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 8010e98:	4948      	ldr	r1, [pc, #288]	@ (8010fbc <voltmetro+0x264>)
 8010e9a:	4848      	ldr	r0, [pc, #288]	@ (8010fbc <voltmetro+0x264>)
 8010e9c:	2306      	movs	r3, #6
 8010e9e:	2207      	movs	r2, #7
 8010ea0:	f7fc f914 	bl	800d0cc <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 8010ea4:	e02e      	b.n	8010f04 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 8010ea6:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 8010ea8:	4b42      	ldr	r3, [pc, #264]	@ (8010fb4 <voltmetro+0x25c>)
 8010eaa:	2245      	movs	r2, #69	@ 0x45
 8010eac:	5c9a      	ldrb	r2, [r3, r2]
 8010eae:	4b47      	ldr	r3, [pc, #284]	@ (8010fcc <voltmetro+0x274>)
 8010eb0:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 8010eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8010fa8 <voltmetro+0x250>)
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d103      	bne.n	8010ec2 <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 8010eba:	4b44      	ldr	r3, [pc, #272]	@ (8010fcc <voltmetro+0x274>)
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	e000      	b.n	8010ec4 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 8010ec2:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 8010ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8010fbc <voltmetro+0x264>)
 8010ec6:	799b      	ldrb	r3, [r3, #6]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d104      	bne.n	8010ed6 <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 8010ecc:	4b40      	ldr	r3, [pc, #256]	@ (8010fd0 <voltmetro+0x278>)
 8010ece:	781a      	ldrb	r2, [r3, #0]
 8010ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8010fc4 <voltmetro+0x26c>)
 8010ed2:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 8010ed4:	e004      	b.n	8010ee0 <voltmetro+0x188>
						goto hist_vlb; //
 8010ed6:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 8010ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8010fd4 <voltmetro+0x27c>)
 8010eda:	781a      	ldrb	r2, [r3, #0]
 8010edc:	4b39      	ldr	r3, [pc, #228]	@ (8010fc4 <voltmetro+0x26c>)
 8010ede:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 8010ee0:	4b38      	ldr	r3, [pc, #224]	@ (8010fc4 <voltmetro+0x26c>)
 8010ee2:	781a      	ldrb	r2, [r3, #0]
 8010ee4:	4b32      	ldr	r3, [pc, #200]	@ (8010fb0 <voltmetro+0x258>)
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d31d      	bcc.n	8010f28 <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 8010eec:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 8010eee:	4b3a      	ldr	r3, [pc, #232]	@ (8010fd8 <voltmetro+0x280>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d137      	bne.n	8010f66 <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 8010ef6:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 8010ef8:	4930      	ldr	r1, [pc, #192]	@ (8010fbc <voltmetro+0x264>)
 8010efa:	4830      	ldr	r0, [pc, #192]	@ (8010fbc <voltmetro+0x264>)
 8010efc:	2307      	movs	r3, #7
 8010efe:	2206      	movs	r2, #6
 8010f00:	f7fc f8e4 	bl	800d0cc <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 8010f04:	4b2b      	ldr	r3, [pc, #172]	@ (8010fb4 <voltmetro+0x25c>)
 8010f06:	2263      	movs	r2, #99	@ 0x63
 8010f08:	5c9a      	ldrb	r2, [r3, r2]
 8010f0a:	4b23      	ldr	r3, [pc, #140]	@ (8010f98 <voltmetro+0x240>)
 8010f0c:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 8010f0e:	f7f5 faf1 	bl	80064f4 <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 8010f12:	4b32      	ldr	r3, [pc, #200]	@ (8010fdc <voltmetro+0x284>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	021b      	lsls	r3, r3, #8
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	4a31      	ldr	r2, [pc, #196]	@ (8010fe0 <voltmetro+0x288>)
 8010f1c:	7812      	ldrb	r2, [r2, #0]
 8010f1e:	189b      	adds	r3, r3, r2
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	4b30      	ldr	r3, [pc, #192]	@ (8010fe4 <voltmetro+0x28c>)
 8010f24:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 8010f26:	e021      	b.n	8010f6c <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8010f28:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8010f2a:	4b22      	ldr	r3, [pc, #136]	@ (8010fb4 <voltmetro+0x25c>)
 8010f2c:	2245      	movs	r2, #69	@ 0x45
 8010f2e:	5c9a      	ldrb	r2, [r3, r2]
 8010f30:	4b29      	ldr	r3, [pc, #164]	@ (8010fd8 <voltmetro+0x280>)
 8010f32:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 8010f34:	4b1c      	ldr	r3, [pc, #112]	@ (8010fa8 <voltmetro+0x250>)
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d103      	bne.n	8010f44 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8010f3c:	4b26      	ldr	r3, [pc, #152]	@ (8010fd8 <voltmetro+0x280>)
 8010f3e:	2202      	movs	r2, #2
 8010f40:	701a      	strb	r2, [r3, #0]
 8010f42:	e000      	b.n	8010f46 <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 8010f44:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 8010f46:	4b27      	ldr	r3, [pc, #156]	@ (8010fe4 <voltmetro+0x28c>)
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10d      	bne.n	8010f6a <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8010f4e:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8010f50:	491a      	ldr	r1, [pc, #104]	@ (8010fbc <voltmetro+0x264>)
 8010f52:	481a      	ldr	r0, [pc, #104]	@ (8010fbc <voltmetro+0x264>)
 8010f54:	2307      	movs	r3, #7
 8010f56:	2206      	movs	r2, #6
 8010f58:	f7fc f8d3 	bl	800d102 <Bclear_Clear_trfst>
 8010f5c:	e006      	b.n	8010f6c <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8010f5e:	46c0      	nop			@ (mov r8, r8)
 8010f60:	e004      	b.n	8010f6c <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 8010f62:	46c0      	nop			@ (mov r8, r8)
 8010f64:	e002      	b.n	8010f6c <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 8010f66:	46c0      	nop			@ (mov r8, r8)
 8010f68:	e000      	b.n	8010f6c <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8010f6a:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8010f6c:	4b07      	ldr	r3, [pc, #28]	@ (8010f8c <voltmetro+0x234>)
 8010f6e:	799b      	ldrb	r3, [r3, #6]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d106      	bne.n	8010f82 <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8010f74:	4911      	ldr	r1, [pc, #68]	@ (8010fbc <voltmetro+0x264>)
 8010f76:	4811      	ldr	r0, [pc, #68]	@ (8010fbc <voltmetro+0x264>)
 8010f78:	2307      	movs	r3, #7
 8010f7a:	2206      	movs	r2, #6
 8010f7c:	f7fc f8c1 	bl	800d102 <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8010f80:	e000      	b.n	8010f84 <voltmetro+0x22c>
						goto fin_voltmetro1;
 8010f82:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 8010f84:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 8010f86:	46c0      	nop			@ (mov r8, r8)
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20000bb4 	.word	0x20000bb4
 8010f90:	20000bdc 	.word	0x20000bdc
 8010f94:	20000b55 	.word	0x20000b55
 8010f98:	20000b65 	.word	0x20000b65
 8010f9c:	20000c3a 	.word	0x20000c3a
 8010fa0:	20000c39 	.word	0x20000c39
 8010fa4:	20000b90 	.word	0x20000b90
 8010fa8:	20000ba8 	.word	0x20000ba8
 8010fac:	20000bdd 	.word	0x20000bdd
 8010fb0:	20000bde 	.word	0x20000bde
 8010fb4:	200000b8 	.word	0x200000b8
 8010fb8:	20000c78 	.word	0x20000c78
 8010fbc:	20000b98 	.word	0x20000b98
 8010fc0:	20000c33 	.word	0x20000c33
 8010fc4:	200008e0 	.word	0x200008e0
 8010fc8:	20000c35 	.word	0x20000c35
 8010fcc:	20000b81 	.word	0x20000b81
 8010fd0:	20000c34 	.word	0x20000c34
 8010fd4:	20000c36 	.word	0x20000c36
 8010fd8:	20000b80 	.word	0x20000b80
 8010fdc:	20000b57 	.word	0x20000b57
 8010fe0:	20000b58 	.word	0x20000b58
 8010fe4:	20000b78 	.word	0x20000b78

08010fe8 <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 8010fee:	f7f6 f86d 	bl	80070cc <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 8010ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80111a4 <watch+0x1bc>)
 8010ff4:	881b      	ldrh	r3, [r3, #0]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d004      	beq.n	8011004 <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8010ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80111a8 <watch+0x1c0>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d143      	bne.n	801108a <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8011002:	e000      	b.n	8011006 <watch+0x1e>
				goto resetComMod;
 8011004:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8011006:	4b69      	ldr	r3, [pc, #420]	@ (80111ac <watch+0x1c4>)
 8011008:	2214      	movs	r2, #20
 801100a:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 801100c:	4b68      	ldr	r3, [pc, #416]	@ (80111b0 <watch+0x1c8>)
 801100e:	2200      	movs	r2, #0
 8011010:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8011012:	4b64      	ldr	r3, [pc, #400]	@ (80111a4 <watch+0x1bc>)
 8011014:	2296      	movs	r2, #150	@ 0x96
 8011016:	0052      	lsls	r2, r2, #1
 8011018:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 801101a:	4b66      	ldr	r3, [pc, #408]	@ (80111b4 <watch+0x1cc>)
 801101c:	221e      	movs	r2, #30
 801101e:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8011020:	4b63      	ldr	r3, [pc, #396]	@ (80111b0 <watch+0x1c8>)
 8011022:	2200      	movs	r2, #0
 8011024:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8011026:	4b64      	ldr	r3, [pc, #400]	@ (80111b8 <watch+0x1d0>)
 8011028:	2205      	movs	r2, #5
 801102a:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 801102c:	4b5e      	ldr	r3, [pc, #376]	@ (80111a8 <watch+0x1c0>)
 801102e:	2296      	movs	r2, #150	@ 0x96
 8011030:	0052      	lsls	r2, r2, #1
 8011032:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8011034:	4b61      	ldr	r3, [pc, #388]	@ (80111bc <watch+0x1d4>)
 8011036:	2200      	movs	r2, #0
 8011038:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 801103a:	1dfb      	adds	r3, r7, #7
 801103c:	2200      	movs	r2, #0
 801103e:	701a      	strb	r2, [r3, #0]
 8011040:	e018      	b.n	8011074 <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8011042:	1dfb      	adds	r3, r7, #7
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	4a5e      	ldr	r2, [pc, #376]	@ (80111c0 <watch+0x1d8>)
 8011048:	2100      	movs	r1, #0
 801104a:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 801104c:	1dfb      	adds	r3, r7, #7
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	4a5c      	ldr	r2, [pc, #368]	@ (80111c4 <watch+0x1dc>)
 8011052:	2100      	movs	r1, #0
 8011054:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8011056:	1dfb      	adds	r3, r7, #7
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	4a5b      	ldr	r2, [pc, #364]	@ (80111c8 <watch+0x1e0>)
 801105c:	2100      	movs	r1, #0
 801105e:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8011060:	1dfb      	adds	r3, r7, #7
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	4a59      	ldr	r2, [pc, #356]	@ (80111cc <watch+0x1e4>)
 8011066:	2100      	movs	r1, #0
 8011068:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 801106a:	1dfb      	adds	r3, r7, #7
 801106c:	781a      	ldrb	r2, [r3, #0]
 801106e:	1dfb      	adds	r3, r7, #7
 8011070:	3201      	adds	r2, #1
 8011072:	701a      	strb	r2, [r3, #0]
 8011074:	1dfb      	adds	r3, r7, #7
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b07      	cmp	r3, #7
 801107a:	d9e2      	bls.n	8011042 <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 801107c:	4b54      	ldr	r3, [pc, #336]	@ (80111d0 <watch+0x1e8>)
 801107e:	2200      	movs	r2, #0
 8011080:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8011082:	4b53      	ldr	r3, [pc, #332]	@ (80111d0 <watch+0x1e8>)
 8011084:	2200      	movs	r2, #0
 8011086:	715a      	strb	r2, [r3, #5]
 8011088:	e000      	b.n	801108c <watch+0xa4>
				goto fallas_temp;
 801108a:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 801108c:	4b51      	ldr	r3, [pc, #324]	@ (80111d4 <watch+0x1ec>)
 801108e:	2200      	movs	r2, #0
 8011090:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8011092:	4b50      	ldr	r3, [pc, #320]	@ (80111d4 <watch+0x1ec>)
 8011094:	2200      	movs	r2, #0
 8011096:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8011098:	4b4e      	ldr	r3, [pc, #312]	@ (80111d4 <watch+0x1ec>)
 801109a:	2200      	movs	r2, #0
 801109c:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 801109e:	4b4d      	ldr	r3, [pc, #308]	@ (80111d4 <watch+0x1ec>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 80110a4:	4b4b      	ldr	r3, [pc, #300]	@ (80111d4 <watch+0x1ec>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 80110aa:	4b4b      	ldr	r3, [pc, #300]	@ (80111d8 <watch+0x1f0>)
 80110ac:	785b      	ldrb	r3, [r3, #1]
 80110ae:	2201      	movs	r2, #1
 80110b0:	4053      	eors	r3, r2
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d103      	bne.n	80110c0 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 80110b8:	4b46      	ldr	r3, [pc, #280]	@ (80111d4 <watch+0x1ec>)
 80110ba:	2201      	movs	r2, #1
 80110bc:	715a      	strb	r2, [r3, #5]
 80110be:	e000      	b.n	80110c2 <watch+0xda>
					goto	jmp_watch_02;
 80110c0:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 80110c2:	4b46      	ldr	r3, [pc, #280]	@ (80111dc <watch+0x1f4>)
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d000      	beq.n	80110cc <watch+0xe4>
 80110ca:	e064      	b.n	8011196 <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 80110cc:	4b44      	ldr	r3, [pc, #272]	@ (80111e0 <watch+0x1f8>)
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2201      	movs	r2, #1
 80110d2:	4053      	eors	r3, r2
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d107      	bne.n	80110ea <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 80110da:	4b42      	ldr	r3, [pc, #264]	@ (80111e4 <watch+0x1fc>)
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d108      	bne.n	80110f4 <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 80110e2:	4b3c      	ldr	r3, [pc, #240]	@ (80111d4 <watch+0x1ec>)
 80110e4:	2201      	movs	r2, #1
 80110e6:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 80110e8:	e005      	b.n	80110f6 <watch+0x10e>
					goto	jmp_watch_03_00;
 80110ea:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 80110ec:	4b3d      	ldr	r3, [pc, #244]	@ (80111e4 <watch+0x1fc>)
 80110ee:	22a4      	movs	r2, #164	@ 0xa4
 80110f0:	701a      	strb	r2, [r3, #0]
 80110f2:	e000      	b.n	80110f6 <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 80110f4:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 80110f6:	4b3a      	ldr	r3, [pc, #232]	@ (80111e0 <watch+0x1f8>)
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d10c      	bne.n	8011118 <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 80110fe:	4b36      	ldr	r3, [pc, #216]	@ (80111d8 <watch+0x1f0>)
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d103      	bne.n	801110e <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8011106:	4b38      	ldr	r3, [pc, #224]	@ (80111e8 <watch+0x200>)
 8011108:	220f      	movs	r2, #15
 801110a:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 801110c:	e005      	b.n	801111a <watch+0x132>
					goto	jmp_watch_04;
 801110e:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8011110:	4b35      	ldr	r3, [pc, #212]	@ (80111e8 <watch+0x200>)
 8011112:	2200      	movs	r2, #0
 8011114:	701a      	strb	r2, [r3, #0]
 8011116:	e000      	b.n	801111a <watch+0x132>
					goto	jmp_watch_05;
 8011118:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 801111a:	4b31      	ldr	r3, [pc, #196]	@ (80111e0 <watch+0x1f8>)
 801111c:	785b      	ldrb	r3, [r3, #1]
 801111e:	2201      	movs	r2, #1
 8011120:	4053      	eors	r3, r2
 8011122:	b2db      	uxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	d107      	bne.n	8011138 <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8011128:	4b30      	ldr	r3, [pc, #192]	@ (80111ec <watch+0x204>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d108      	bne.n	8011142 <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8011130:	4b28      	ldr	r3, [pc, #160]	@ (80111d4 <watch+0x1ec>)
 8011132:	2201      	movs	r2, #1
 8011134:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8011136:	e005      	b.n	8011144 <watch+0x15c>
					goto	jmp_watch_07_00;
 8011138:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 801113a:	4b2c      	ldr	r3, [pc, #176]	@ (80111ec <watch+0x204>)
 801113c:	2204      	movs	r2, #4
 801113e:	701a      	strb	r2, [r3, #0]
 8011140:	e000      	b.n	8011144 <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8011142:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8011144:	4b26      	ldr	r3, [pc, #152]	@ (80111e0 <watch+0x1f8>)
 8011146:	789b      	ldrb	r3, [r3, #2]
 8011148:	2201      	movs	r2, #1
 801114a:	4053      	eors	r3, r2
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d107      	bne.n	8011162 <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8011152:	4b27      	ldr	r3, [pc, #156]	@ (80111f0 <watch+0x208>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d108      	bne.n	801116c <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 801115a:	4b1e      	ldr	r3, [pc, #120]	@ (80111d4 <watch+0x1ec>)
 801115c:	2201      	movs	r2, #1
 801115e:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8011160:	e005      	b.n	801116e <watch+0x186>
					goto	jmp_watch_11_00;
 8011162:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8011164:	4b22      	ldr	r3, [pc, #136]	@ (80111f0 <watch+0x208>)
 8011166:	220f      	movs	r2, #15
 8011168:	701a      	strb	r2, [r3, #0]
 801116a:	e000      	b.n	801116e <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 801116c:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 801116e:	4b1a      	ldr	r3, [pc, #104]	@ (80111d8 <watch+0x1f0>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	2201      	movs	r2, #1
 8011174:	4053      	eors	r3, r2
 8011176:	b2db      	uxtb	r3, r3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d107      	bne.n	801118c <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 801117c:	4b1d      	ldr	r3, [pc, #116]	@ (80111f4 <watch+0x20c>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10a      	bne.n	801119a <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8011184:	4b13      	ldr	r3, [pc, #76]	@ (80111d4 <watch+0x1ec>)
 8011186:	2201      	movs	r2, #1
 8011188:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 801118a:	e007      	b.n	801119c <watch+0x1b4>
					goto jmp_watch_12_00;
 801118c:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 801118e:	4b19      	ldr	r3, [pc, #100]	@ (80111f4 <watch+0x20c>)
 8011190:	22c5      	movs	r2, #197	@ 0xc5
 8011192:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8011194:	e002      	b.n	801119c <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8011196:	46c0      	nop			@ (mov r8, r8)
 8011198:	e000      	b.n	801119c <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 801119a:	46c0      	nop			@ (mov r8, r8)
}
 801119c:	46c0      	nop			@ (mov r8, r8)
 801119e:	46bd      	mov	sp, r7
 80111a0:	b002      	add	sp, #8
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	2000110c 	.word	0x2000110c
 80111a8:	20000f5c 	.word	0x20000f5c
 80111ac:	2000110a 	.word	0x2000110a
 80111b0:	20000f54 	.word	0x20000f54
 80111b4:	20000f4a 	.word	0x20000f4a
 80111b8:	20000ef8 	.word	0x20000ef8
 80111bc:	20000e29 	.word	0x20000e29
 80111c0:	20000e2c 	.word	0x20000e2c
 80111c4:	20000eec 	.word	0x20000eec
 80111c8:	200010fc 	.word	0x200010fc
 80111cc:	20000f60 	.word	0x20000f60
 80111d0:	20000e14 	.word	0x20000e14
 80111d4:	20000b68 	.word	0x20000b68
 80111d8:	20000bf0 	.word	0x20000bf0
 80111dc:	20000c61 	.word	0x20000c61
 80111e0:	20000bb4 	.word	0x20000bb4
 80111e4:	20000c66 	.word	0x20000c66
 80111e8:	20000b84 	.word	0x20000b84
 80111ec:	20000c67 	.word	0x20000c67
 80111f0:	20000c69 	.word	0x20000c69
 80111f4:	20000c68 	.word	0x20000c68

080111f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80111f8:	480d      	ldr	r0, [pc, #52]	@ (8011230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80111fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80111fc:	f7fa ff72 	bl	800c0e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011200:	480c      	ldr	r0, [pc, #48]	@ (8011234 <LoopForever+0x6>)
  ldr r1, =_edata
 8011202:	490d      	ldr	r1, [pc, #52]	@ (8011238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011204:	4a0d      	ldr	r2, [pc, #52]	@ (801123c <LoopForever+0xe>)
  movs r3, #0
 8011206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011208:	e002      	b.n	8011210 <LoopCopyDataInit>

0801120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801120e:	3304      	adds	r3, #4

08011210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011214:	d3f9      	bcc.n	801120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011216:	4a0a      	ldr	r2, [pc, #40]	@ (8011240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011218:	4c0a      	ldr	r4, [pc, #40]	@ (8011244 <LoopForever+0x16>)
  movs r3, #0
 801121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801121c:	e001      	b.n	8011222 <LoopFillZerobss>

0801121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011220:	3204      	adds	r2, #4

08011222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011224:	d3fb      	bcc.n	801121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011226:	f009 febd 	bl	801afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801122a:	f7f8 f923 	bl	8009474 <main>

0801122e <LoopForever>:

LoopForever:
  b LoopForever
 801122e:	e7fe      	b.n	801122e <LoopForever>
  ldr   r0, =_estack
 8011230:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8011234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011238:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 801123c:	0801b5dc 	.word	0x0801b5dc
  ldr r2, =_sbss
 8011240:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8011244:	200012f0 	.word	0x200012f0

08011248 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011248:	e7fe      	b.n	8011248 <ADC_COMP1_2_IRQHandler>

0801124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011250:	1dfb      	adds	r3, r7, #7
 8011252:	2200      	movs	r2, #0
 8011254:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011256:	2003      	movs	r0, #3
 8011258:	f000 f80e 	bl	8011278 <HAL_InitTick>
 801125c:	1e03      	subs	r3, r0, #0
 801125e:	d003      	beq.n	8011268 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8011260:	1dfb      	adds	r3, r7, #7
 8011262:	2201      	movs	r2, #1
 8011264:	701a      	strb	r2, [r3, #0]
 8011266:	e001      	b.n	801126c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011268:	f7fa fa9a 	bl	800b7a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801126c:	1dfb      	adds	r3, r7, #7
 801126e:	781b      	ldrb	r3, [r3, #0]
}
 8011270:	0018      	movs	r0, r3
 8011272:	46bd      	mov	sp, r7
 8011274:	b002      	add	sp, #8
 8011276:	bd80      	pop	{r7, pc}

08011278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011278:	b590      	push	{r4, r7, lr}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011280:	230f      	movs	r3, #15
 8011282:	18fb      	adds	r3, r7, r3
 8011284:	2200      	movs	r2, #0
 8011286:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8011288:	4b1d      	ldr	r3, [pc, #116]	@ (8011300 <HAL_InitTick+0x88>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d02b      	beq.n	80112e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8011290:	4b1c      	ldr	r3, [pc, #112]	@ (8011304 <HAL_InitTick+0x8c>)
 8011292:	681c      	ldr	r4, [r3, #0]
 8011294:	4b1a      	ldr	r3, [pc, #104]	@ (8011300 <HAL_InitTick+0x88>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	0019      	movs	r1, r3
 801129a:	23fa      	movs	r3, #250	@ 0xfa
 801129c:	0098      	lsls	r0, r3, #2
 801129e:	f7ee ff3b 	bl	8000118 <__udivsi3>
 80112a2:	0003      	movs	r3, r0
 80112a4:	0019      	movs	r1, r3
 80112a6:	0020      	movs	r0, r4
 80112a8:	f7ee ff36 	bl	8000118 <__udivsi3>
 80112ac:	0003      	movs	r3, r0
 80112ae:	0018      	movs	r0, r3
 80112b0:	f001 fab7 	bl	8012822 <HAL_SYSTICK_Config>
 80112b4:	1e03      	subs	r3, r0, #0
 80112b6:	d112      	bne.n	80112de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d80a      	bhi.n	80112d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80112be:	6879      	ldr	r1, [r7, #4]
 80112c0:	2301      	movs	r3, #1
 80112c2:	425b      	negs	r3, r3
 80112c4:	2200      	movs	r2, #0
 80112c6:	0018      	movs	r0, r3
 80112c8:	f001 fa76 	bl	80127b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80112cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011308 <HAL_InitTick+0x90>)
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	e00d      	b.n	80112f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80112d4:	230f      	movs	r3, #15
 80112d6:	18fb      	adds	r3, r7, r3
 80112d8:	2201      	movs	r2, #1
 80112da:	701a      	strb	r2, [r3, #0]
 80112dc:	e008      	b.n	80112f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80112de:	230f      	movs	r3, #15
 80112e0:	18fb      	adds	r3, r7, r3
 80112e2:	2201      	movs	r2, #1
 80112e4:	701a      	strb	r2, [r3, #0]
 80112e6:	e003      	b.n	80112f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80112e8:	230f      	movs	r3, #15
 80112ea:	18fb      	adds	r3, r7, r3
 80112ec:	2201      	movs	r2, #1
 80112ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80112f0:	230f      	movs	r3, #15
 80112f2:	18fb      	adds	r3, r7, r3
 80112f4:	781b      	ldrb	r3, [r3, #0]
}
 80112f6:	0018      	movs	r0, r3
 80112f8:	46bd      	mov	sp, r7
 80112fa:	b005      	add	sp, #20
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	46c0      	nop			@ (mov r8, r8)
 8011300:	20000268 	.word	0x20000268
 8011304:	20000250 	.word	0x20000250
 8011308:	20000264 	.word	0x20000264

0801130c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011310:	4b04      	ldr	r3, [pc, #16]	@ (8011324 <HAL_IncTick+0x18>)
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	4b04      	ldr	r3, [pc, #16]	@ (8011328 <HAL_IncTick+0x1c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	18d2      	adds	r2, r2, r3
 801131a:	4b02      	ldr	r3, [pc, #8]	@ (8011324 <HAL_IncTick+0x18>)
 801131c:	601a      	str	r2, [r3, #0]
}
 801131e:	46c0      	nop			@ (mov r8, r8)
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	20001188 	.word	0x20001188
 8011328:	20000268 	.word	0x20000268

0801132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	af00      	add	r7, sp, #0
  return uwTick;
 8011330:	4b02      	ldr	r3, [pc, #8]	@ (801133c <HAL_GetTick+0x10>)
 8011332:	681b      	ldr	r3, [r3, #0]
}
 8011334:	0018      	movs	r0, r3
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	46c0      	nop			@ (mov r8, r8)
 801133c:	20001188 	.word	0x20001188

08011340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011348:	f7ff fff0 	bl	801132c <HAL_GetTick>
 801134c:	0003      	movs	r3, r0
 801134e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	3301      	adds	r3, #1
 8011358:	d004      	beq.n	8011364 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801135a:	4b09      	ldr	r3, [pc, #36]	@ (8011380 <HAL_Delay+0x40>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	18d3      	adds	r3, r2, r3
 8011362:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011364:	46c0      	nop			@ (mov r8, r8)
 8011366:	f7ff ffe1 	bl	801132c <HAL_GetTick>
 801136a:	0002      	movs	r2, r0
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	1ad3      	subs	r3, r2, r3
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	429a      	cmp	r2, r3
 8011374:	d8f7      	bhi.n	8011366 <HAL_Delay+0x26>
  {
  }
}
 8011376:	46c0      	nop			@ (mov r8, r8)
 8011378:	46c0      	nop			@ (mov r8, r8)
 801137a:	46bd      	mov	sp, r7
 801137c:	b004      	add	sp, #16
 801137e:	bd80      	pop	{r7, pc}
 8011380:	20000268 	.word	0x20000268

08011384 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a05      	ldr	r2, [pc, #20]	@ (80113a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8011394:	401a      	ands	r2, r3
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	431a      	orrs	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	601a      	str	r2, [r3, #0]
}
 801139e:	46c0      	nop			@ (mov r8, r8)
 80113a0:	46bd      	mov	sp, r7
 80113a2:	b002      	add	sp, #8
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	46c0      	nop			@ (mov r8, r8)
 80113a8:	fe3fffff 	.word	0xfe3fffff

080113ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	23e0      	movs	r3, #224	@ 0xe0
 80113ba:	045b      	lsls	r3, r3, #17
 80113bc:	4013      	ands	r3, r2
}
 80113be:	0018      	movs	r0, r3
 80113c0:	46bd      	mov	sp, r7
 80113c2:	b002      	add	sp, #8
 80113c4:	bd80      	pop	{r7, pc}

080113c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80113c6:	b580      	push	{r7, lr}
 80113c8:	b084      	sub	sp, #16
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	60f8      	str	r0, [r7, #12]
 80113ce:	60b9      	str	r1, [r7, #8]
 80113d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	68ba      	ldr	r2, [r7, #8]
 80113d8:	2104      	movs	r1, #4
 80113da:	400a      	ands	r2, r1
 80113dc:	2107      	movs	r1, #7
 80113de:	4091      	lsls	r1, r2
 80113e0:	000a      	movs	r2, r1
 80113e2:	43d2      	mvns	r2, r2
 80113e4:	401a      	ands	r2, r3
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2104      	movs	r1, #4
 80113ea:	400b      	ands	r3, r1
 80113ec:	6879      	ldr	r1, [r7, #4]
 80113ee:	4099      	lsls	r1, r3
 80113f0:	000b      	movs	r3, r1
 80113f2:	431a      	orrs	r2, r3
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80113f8:	46c0      	nop			@ (mov r8, r8)
 80113fa:	46bd      	mov	sp, r7
 80113fc:	b004      	add	sp, #16
 80113fe:	bd80      	pop	{r7, pc}

08011400 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	695b      	ldr	r3, [r3, #20]
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	2104      	movs	r1, #4
 8011412:	400a      	ands	r2, r1
 8011414:	2107      	movs	r1, #7
 8011416:	4091      	lsls	r1, r2
 8011418:	000a      	movs	r2, r1
 801141a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	2104      	movs	r1, #4
 8011420:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011422:	40da      	lsrs	r2, r3
 8011424:	0013      	movs	r3, r2
}
 8011426:	0018      	movs	r0, r3
 8011428:	46bd      	mov	sp, r7
 801142a:	b002      	add	sp, #8
 801142c:	bd80      	pop	{r7, pc}

0801142e <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801142e:	b580      	push	{r7, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	af00      	add	r7, sp, #0
 8011434:	60f8      	str	r0, [r7, #12]
 8011436:	60b9      	str	r1, [r7, #8]
 8011438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	211f      	movs	r1, #31
 8011442:	400a      	ands	r2, r1
 8011444:	210f      	movs	r1, #15
 8011446:	4091      	lsls	r1, r2
 8011448:	000a      	movs	r2, r1
 801144a:	43d2      	mvns	r2, r2
 801144c:	401a      	ands	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	0e9b      	lsrs	r3, r3, #26
 8011452:	210f      	movs	r1, #15
 8011454:	4019      	ands	r1, r3
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	201f      	movs	r0, #31
 801145a:	4003      	ands	r3, r0
 801145c:	4099      	lsls	r1, r3
 801145e:	000b      	movs	r3, r1
 8011460:	431a      	orrs	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8011466:	46c0      	nop			@ (mov r8, r8)
 8011468:	46bd      	mov	sp, r7
 801146a:	b004      	add	sp, #16
 801146c:	bd80      	pop	{r7, pc}

0801146e <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b082      	sub	sp, #8
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	025b      	lsls	r3, r3, #9
 8011480:	0a5b      	lsrs	r3, r3, #9
 8011482:	431a      	orrs	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011488:	46c0      	nop			@ (mov r8, r8)
 801148a:	46bd      	mov	sp, r7
 801148c:	b002      	add	sp, #8
 801148e:	bd80      	pop	{r7, pc}

08011490 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	0252      	lsls	r2, r2, #9
 80114a2:	0a52      	lsrs	r2, r2, #9
 80114a4:	43d2      	mvns	r2, r2
 80114a6:	401a      	ands	r2, r3
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80114ac:	46c0      	nop			@ (mov r8, r8)
 80114ae:	46bd      	mov	sp, r7
 80114b0:	b002      	add	sp, #8
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	695b      	ldr	r3, [r3, #20]
 80114c4:	68ba      	ldr	r2, [r7, #8]
 80114c6:	0212      	lsls	r2, r2, #8
 80114c8:	43d2      	mvns	r2, r2
 80114ca:	401a      	ands	r2, r3
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	021b      	lsls	r3, r3, #8
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	400b      	ands	r3, r1
 80114d4:	4904      	ldr	r1, [pc, #16]	@ (80114e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80114d6:	400b      	ands	r3, r1
 80114d8:	431a      	orrs	r2, r3
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80114de:	46c0      	nop			@ (mov r8, r8)
 80114e0:	46bd      	mov	sp, r7
 80114e2:	b004      	add	sp, #16
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	46c0      	nop			@ (mov r8, r8)
 80114e8:	7fffff00 	.word	0x7fffff00

080114ec <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	60f8      	str	r0, [r7, #12]
 80114f4:	60b9      	str	r1, [r7, #8]
 80114f6:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	4a11      	ldr	r2, [pc, #68]	@ (8011540 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d103      	bne.n	8011508 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	330c      	adds	r3, #12
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	e009      	b.n	801151c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	33a0      	adds	r3, #160	@ 0xa0
 801150c:	0019      	movs	r1, r3
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	0d5b      	lsrs	r3, r3, #21
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	2204      	movs	r2, #4
 8011516:	4013      	ands	r3, r2
 8011518:	18cb      	adds	r3, r1, r3
 801151a:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	4908      	ldr	r1, [pc, #32]	@ (8011544 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8011524:	400a      	ands	r2, r1
 8011526:	43d2      	mvns	r2, r2
 8011528:	401a      	ands	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	68b9      	ldr	r1, [r7, #8]
 801152e:	400b      	ands	r3, r1
 8011530:	431a      	orrs	r2, r3
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8011536:	46c0      	nop			@ (mov r8, r8)
 8011538:	46bd      	mov	sp, r7
 801153a:	b006      	add	sp, #24
 801153c:	bd80      	pop	{r7, pc}
 801153e:	46c0      	nop			@ (mov r8, r8)
 8011540:	7cc00000 	.word	0x7cc00000
 8011544:	7cc7ffff 	.word	0x7cc7ffff

08011548 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	3320      	adds	r3, #32
 801155a:	0018      	movs	r0, r3
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	0d1b      	lsrs	r3, r3, #20
 8011560:	2203      	movs	r2, #3
 8011562:	401a      	ands	r2, r3
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	0d5b      	lsrs	r3, r3, #21
 8011568:	2101      	movs	r1, #1
 801156a:	400b      	ands	r3, r1
 801156c:	18d3      	adds	r3, r2, r3
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	18c3      	adds	r3, r0, r3
 8011572:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a06      	ldr	r2, [pc, #24]	@ (8011594 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 801157a:	401a      	ands	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	0419      	lsls	r1, r3, #16
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	430b      	orrs	r3, r1
 8011584:	431a      	orrs	r2, r3
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 801158a:	46c0      	nop			@ (mov r8, r8)
 801158c:	46bd      	mov	sp, r7
 801158e:	b006      	add	sp, #24
 8011590:	bd80      	pop	{r7, pc}
 8011592:	46c0      	nop			@ (mov r8, r8)
 8011594:	f000f000 	.word	0xf000f000

08011598 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	4a05      	ldr	r2, [pc, #20]	@ (80115bc <LL_ADC_EnableInternalRegulator+0x24>)
 80115a6:	4013      	ands	r3, r2
 80115a8:	2280      	movs	r2, #128	@ 0x80
 80115aa:	0552      	lsls	r2, r2, #21
 80115ac:	431a      	orrs	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80115b2:	46c0      	nop			@ (mov r8, r8)
 80115b4:	46bd      	mov	sp, r7
 80115b6:	b002      	add	sp, #8
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	46c0      	nop			@ (mov r8, r8)
 80115bc:	6fffffe8 	.word	0x6fffffe8

080115c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689a      	ldr	r2, [r3, #8]
 80115cc:	2380      	movs	r3, #128	@ 0x80
 80115ce:	055b      	lsls	r3, r3, #21
 80115d0:	401a      	ands	r2, r3
 80115d2:	2380      	movs	r3, #128	@ 0x80
 80115d4:	055b      	lsls	r3, r3, #21
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d101      	bne.n	80115de <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80115da:	2301      	movs	r3, #1
 80115dc:	e000      	b.n	80115e0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80115de:	2300      	movs	r3, #0
}
 80115e0:	0018      	movs	r0, r3
 80115e2:	46bd      	mov	sp, r7
 80115e4:	b002      	add	sp, #8
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	4a04      	ldr	r2, [pc, #16]	@ (8011608 <LL_ADC_Enable+0x20>)
 80115f6:	4013      	ands	r3, r2
 80115f8:	2201      	movs	r2, #1
 80115fa:	431a      	orrs	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8011600:	46c0      	nop			@ (mov r8, r8)
 8011602:	46bd      	mov	sp, r7
 8011604:	b002      	add	sp, #8
 8011606:	bd80      	pop	{r7, pc}
 8011608:	7fffffe8 	.word	0x7fffffe8

0801160c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	4a04      	ldr	r2, [pc, #16]	@ (801162c <LL_ADC_Disable+0x20>)
 801161a:	4013      	ands	r3, r2
 801161c:	2202      	movs	r2, #2
 801161e:	431a      	orrs	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8011624:	46c0      	nop			@ (mov r8, r8)
 8011626:	46bd      	mov	sp, r7
 8011628:	b002      	add	sp, #8
 801162a:	bd80      	pop	{r7, pc}
 801162c:	7fffffe8 	.word	0x7fffffe8

08011630 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	2201      	movs	r2, #1
 801163e:	4013      	ands	r3, r2
 8011640:	2b01      	cmp	r3, #1
 8011642:	d101      	bne.n	8011648 <LL_ADC_IsEnabled+0x18>
 8011644:	2301      	movs	r3, #1
 8011646:	e000      	b.n	801164a <LL_ADC_IsEnabled+0x1a>
 8011648:	2300      	movs	r3, #0
}
 801164a:	0018      	movs	r0, r3
 801164c:	46bd      	mov	sp, r7
 801164e:	b002      	add	sp, #8
 8011650:	bd80      	pop	{r7, pc}

08011652 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8011652:	b580      	push	{r7, lr}
 8011654:	b082      	sub	sp, #8
 8011656:	af00      	add	r7, sp, #0
 8011658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	689b      	ldr	r3, [r3, #8]
 801165e:	2202      	movs	r2, #2
 8011660:	4013      	ands	r3, r2
 8011662:	2b02      	cmp	r3, #2
 8011664:	d101      	bne.n	801166a <LL_ADC_IsDisableOngoing+0x18>
 8011666:	2301      	movs	r3, #1
 8011668:	e000      	b.n	801166c <LL_ADC_IsDisableOngoing+0x1a>
 801166a:	2300      	movs	r3, #0
}
 801166c:	0018      	movs	r0, r3
 801166e:	46bd      	mov	sp, r7
 8011670:	b002      	add	sp, #8
 8011672:	bd80      	pop	{r7, pc}

08011674 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	2204      	movs	r2, #4
 8011682:	4013      	ands	r3, r2
 8011684:	2b04      	cmp	r3, #4
 8011686:	d101      	bne.n	801168c <LL_ADC_REG_IsConversionOngoing+0x18>
 8011688:	2301      	movs	r3, #1
 801168a:	e000      	b.n	801168e <LL_ADC_REG_IsConversionOngoing+0x1a>
 801168c:	2300      	movs	r3, #0
}
 801168e:	0018      	movs	r0, r3
 8011690:	46bd      	mov	sp, r7
 8011692:	b002      	add	sp, #8
 8011694:	bd80      	pop	{r7, pc}

08011696 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2280      	movs	r2, #128	@ 0x80
 80116a2:	601a      	str	r2, [r3, #0]
}
 80116a4:	46c0      	nop			@ (mov r8, r8)
 80116a6:	46bd      	mov	sp, r7
 80116a8:	b002      	add	sp, #8
 80116aa:	bd80      	pop	{r7, pc}

080116ac <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2280      	movs	r2, #128	@ 0x80
 80116b8:	0052      	lsls	r2, r2, #1
 80116ba:	601a      	str	r2, [r3, #0]
}
 80116bc:	46c0      	nop			@ (mov r8, r8)
 80116be:	46bd      	mov	sp, r7
 80116c0:	b002      	add	sp, #8
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2280      	movs	r2, #128	@ 0x80
 80116d0:	0092      	lsls	r2, r2, #2
 80116d2:	601a      	str	r2, [r3, #0]
}
 80116d4:	46c0      	nop			@ (mov r8, r8)
 80116d6:	46bd      	mov	sp, r7
 80116d8:	b002      	add	sp, #8
 80116da:	bd80      	pop	{r7, pc}

080116dc <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	2280      	movs	r2, #128	@ 0x80
 80116ea:	431a      	orrs	r2, r3
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	605a      	str	r2, [r3, #4]
}
 80116f0:	46c0      	nop			@ (mov r8, r8)
 80116f2:	46bd      	mov	sp, r7
 80116f4:	b002      	add	sp, #8
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	2280      	movs	r2, #128	@ 0x80
 8011706:	0052      	lsls	r2, r2, #1
 8011708:	431a      	orrs	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	605a      	str	r2, [r3, #4]
}
 801170e:	46c0      	nop			@ (mov r8, r8)
 8011710:	46bd      	mov	sp, r7
 8011712:	b002      	add	sp, #8
 8011714:	bd80      	pop	{r7, pc}

08011716 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b082      	sub	sp, #8
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	2280      	movs	r2, #128	@ 0x80
 8011724:	0092      	lsls	r2, r2, #2
 8011726:	431a      	orrs	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	605a      	str	r2, [r3, #4]
}
 801172c:	46c0      	nop			@ (mov r8, r8)
 801172e:	46bd      	mov	sp, r7
 8011730:	b002      	add	sp, #8
 8011732:	bd80      	pop	{r7, pc}

08011734 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	2280      	movs	r2, #128	@ 0x80
 8011742:	4393      	bics	r3, r2
 8011744:	001a      	movs	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	605a      	str	r2, [r3, #4]
}
 801174a:	46c0      	nop			@ (mov r8, r8)
 801174c:	46bd      	mov	sp, r7
 801174e:	b002      	add	sp, #8
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	4a03      	ldr	r2, [pc, #12]	@ (8011770 <LL_ADC_DisableIT_AWD2+0x1c>)
 8011762:	401a      	ands	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	605a      	str	r2, [r3, #4]
}
 8011768:	46c0      	nop			@ (mov r8, r8)
 801176a:	46bd      	mov	sp, r7
 801176c:	b002      	add	sp, #8
 801176e:	bd80      	pop	{r7, pc}
 8011770:	fffffeff 	.word	0xfffffeff

08011774 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	4a03      	ldr	r2, [pc, #12]	@ (8011790 <LL_ADC_DisableIT_AWD3+0x1c>)
 8011782:	401a      	ands	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	605a      	str	r2, [r3, #4]
}
 8011788:	46c0      	nop			@ (mov r8, r8)
 801178a:	46bd      	mov	sp, r7
 801178c:	b002      	add	sp, #8
 801178e:	bd80      	pop	{r7, pc}
 8011790:	fffffdff 	.word	0xfffffdff

08011794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b088      	sub	sp, #32
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801179c:	231f      	movs	r3, #31
 801179e:	18fb      	adds	r3, r7, r3
 80117a0:	2200      	movs	r2, #0
 80117a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80117a4:	2300      	movs	r3, #0
 80117a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80117a8:	2300      	movs	r3, #0
 80117aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80117ac:	2300      	movs	r3, #0
 80117ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80117b6:	2301      	movs	r3, #1
 80117b8:	e17f      	b.n	8011aba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10a      	bne.n	80117d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	0018      	movs	r0, r3
 80117c6:	f7fa f80f 	bl	800b7e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2254      	movs	r2, #84	@ 0x54
 80117d4:	2100      	movs	r1, #0
 80117d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	0018      	movs	r0, r3
 80117de:	f7ff feef 	bl	80115c0 <LL_ADC_IsInternalRegulatorEnabled>
 80117e2:	1e03      	subs	r3, r0, #0
 80117e4:	d115      	bne.n	8011812 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	0018      	movs	r0, r3
 80117ec:	f7ff fed4 	bl	8011598 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80117f0:	4bb4      	ldr	r3, [pc, #720]	@ (8011ac4 <HAL_ADC_Init+0x330>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	49b4      	ldr	r1, [pc, #720]	@ (8011ac8 <HAL_ADC_Init+0x334>)
 80117f6:	0018      	movs	r0, r3
 80117f8:	f7ee fc8e 	bl	8000118 <__udivsi3>
 80117fc:	0003      	movs	r3, r0
 80117fe:	3301      	adds	r3, #1
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8011804:	e002      	b.n	801180c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	3b01      	subs	r3, #1
 801180a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f9      	bne.n	8011806 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	0018      	movs	r0, r3
 8011818:	f7ff fed2 	bl	80115c0 <LL_ADC_IsInternalRegulatorEnabled>
 801181c:	1e03      	subs	r3, r0, #0
 801181e:	d10f      	bne.n	8011840 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011824:	2210      	movs	r2, #16
 8011826:	431a      	orrs	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011830:	2201      	movs	r2, #1
 8011832:	431a      	orrs	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8011838:	231f      	movs	r3, #31
 801183a:	18fb      	adds	r3, r7, r3
 801183c:	2201      	movs	r2, #1
 801183e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	0018      	movs	r0, r3
 8011846:	f7ff ff15 	bl	8011674 <LL_ADC_REG_IsConversionOngoing>
 801184a:	0003      	movs	r3, r0
 801184c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011852:	2210      	movs	r2, #16
 8011854:	4013      	ands	r3, r2
 8011856:	d000      	beq.n	801185a <HAL_ADC_Init+0xc6>
 8011858:	e122      	b.n	8011aa0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d000      	beq.n	8011862 <HAL_ADC_Init+0xce>
 8011860:	e11e      	b.n	8011aa0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011866:	4a99      	ldr	r2, [pc, #612]	@ (8011acc <HAL_ADC_Init+0x338>)
 8011868:	4013      	ands	r3, r2
 801186a:	2202      	movs	r2, #2
 801186c:	431a      	orrs	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	0018      	movs	r0, r3
 8011878:	f7ff feda 	bl	8011630 <LL_ADC_IsEnabled>
 801187c:	1e03      	subs	r3, r0, #0
 801187e:	d000      	beq.n	8011882 <HAL_ADC_Init+0xee>
 8011880:	e0ad      	b.n	80119de <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	7e1b      	ldrb	r3, [r3, #24]
 801188a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 801188c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	7e5b      	ldrb	r3, [r3, #25]
 8011892:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8011894:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	7e9b      	ldrb	r3, [r3, #26]
 801189a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 801189c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d002      	beq.n	80118ac <HAL_ADC_Init+0x118>
 80118a6:	2380      	movs	r3, #128	@ 0x80
 80118a8:	015b      	lsls	r3, r3, #5
 80118aa:	e000      	b.n	80118ae <HAL_ADC_Init+0x11a>
 80118ac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80118ae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80118b4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	da04      	bge.n	80118c8 <HAL_ADC_Init+0x134>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	085b      	lsrs	r3, r3, #1
 80118c6:	e001      	b.n	80118cc <HAL_ADC_Init+0x138>
 80118c8:	2380      	movs	r3, #128	@ 0x80
 80118ca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80118cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	212c      	movs	r1, #44	@ 0x2c
 80118d2:	5c5b      	ldrb	r3, [r3, r1]
 80118d4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80118d6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80118d8:	69ba      	ldr	r2, [r7, #24]
 80118da:	4313      	orrs	r3, r2
 80118dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2220      	movs	r2, #32
 80118e2:	5c9b      	ldrb	r3, [r3, r2]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d115      	bne.n	8011914 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7e9b      	ldrb	r3, [r3, #26]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d105      	bne.n	80118fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	2280      	movs	r2, #128	@ 0x80
 80118f4:	0252      	lsls	r2, r2, #9
 80118f6:	4313      	orrs	r3, r2
 80118f8:	61bb      	str	r3, [r7, #24]
 80118fa:	e00b      	b.n	8011914 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011900:	2220      	movs	r2, #32
 8011902:	431a      	orrs	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801190c:	2201      	movs	r2, #1
 801190e:	431a      	orrs	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00a      	beq.n	8011932 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011920:	23e0      	movs	r3, #224	@ 0xe0
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801192a:	4313      	orrs	r3, r2
 801192c:	69ba      	ldr	r2, [r7, #24]
 801192e:	4313      	orrs	r3, r2
 8011930:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	68db      	ldr	r3, [r3, #12]
 8011938:	4a65      	ldr	r2, [pc, #404]	@ (8011ad0 <HAL_ADC_Init+0x33c>)
 801193a:	4013      	ands	r3, r2
 801193c:	0019      	movs	r1, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	69ba      	ldr	r2, [r7, #24]
 8011944:	430a      	orrs	r2, r1
 8011946:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	0f9b      	lsrs	r3, r3, #30
 801194e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8011954:	4313      	orrs	r3, r2
 8011956:	697a      	ldr	r2, [r7, #20]
 8011958:	4313      	orrs	r3, r2
 801195a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	223c      	movs	r2, #60	@ 0x3c
 8011960:	5c9b      	ldrb	r3, [r3, r2]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d111      	bne.n	801198a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	0f9b      	lsrs	r3, r3, #30
 801196c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8011972:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8011978:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 801197e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	4313      	orrs	r3, r2
 8011984:	2201      	movs	r2, #1
 8011986:	4313      	orrs	r3, r2
 8011988:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	4a50      	ldr	r2, [pc, #320]	@ (8011ad4 <HAL_ADC_Init+0x340>)
 8011992:	4013      	ands	r3, r2
 8011994:	0019      	movs	r1, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	697a      	ldr	r2, [r7, #20]
 801199c:	430a      	orrs	r2, r1
 801199e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685a      	ldr	r2, [r3, #4]
 80119a4:	23c0      	movs	r3, #192	@ 0xc0
 80119a6:	061b      	lsls	r3, r3, #24
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d018      	beq.n	80119de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80119b0:	2380      	movs	r3, #128	@ 0x80
 80119b2:	05db      	lsls	r3, r3, #23
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d012      	beq.n	80119de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80119bc:	2380      	movs	r3, #128	@ 0x80
 80119be:	061b      	lsls	r3, r3, #24
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d00c      	beq.n	80119de <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80119c4:	4b44      	ldr	r3, [pc, #272]	@ (8011ad8 <HAL_ADC_Init+0x344>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a44      	ldr	r2, [pc, #272]	@ (8011adc <HAL_ADC_Init+0x348>)
 80119ca:	4013      	ands	r3, r2
 80119cc:	0019      	movs	r1, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685a      	ldr	r2, [r3, #4]
 80119d2:	23f0      	movs	r3, #240	@ 0xf0
 80119d4:	039b      	lsls	r3, r3, #14
 80119d6:	401a      	ands	r2, r3
 80119d8:	4b3f      	ldr	r3, [pc, #252]	@ (8011ad8 <HAL_ADC_Init+0x344>)
 80119da:	430a      	orrs	r2, r1
 80119dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6818      	ldr	r0, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119e6:	001a      	movs	r2, r3
 80119e8:	2100      	movs	r1, #0
 80119ea:	f7ff fcec 	bl	80113c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119f6:	493a      	ldr	r1, [pc, #232]	@ (8011ae0 <HAL_ADC_Init+0x34c>)
 80119f8:	001a      	movs	r2, r3
 80119fa:	f7ff fce4 	bl	80113c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d109      	bne.n	8011a1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2110      	movs	r1, #16
 8011a12:	4249      	negs	r1, r1
 8011a14:	430a      	orrs	r2, r1
 8011a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8011a18:	e018      	b.n	8011a4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	691a      	ldr	r2, [r3, #16]
 8011a1e:	2380      	movs	r3, #128	@ 0x80
 8011a20:	039b      	lsls	r3, r3, #14
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d112      	bne.n	8011a4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	69db      	ldr	r3, [r3, #28]
 8011a30:	3b01      	subs	r3, #1
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	221c      	movs	r2, #28
 8011a36:	4013      	ands	r3, r2
 8011a38:	2210      	movs	r2, #16
 8011a3a:	4252      	negs	r2, r2
 8011a3c:	409a      	lsls	r2, r3
 8011a3e:	0011      	movs	r1, r2
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	430a      	orrs	r2, r1
 8011a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2100      	movs	r1, #0
 8011a52:	0018      	movs	r0, r3
 8011a54:	f7ff fcd4 	bl	8011400 <LL_ADC_GetSamplingTimeCommonChannels>
 8011a58:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d10b      	bne.n	8011a7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2200      	movs	r2, #0
 8011a66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a6c:	2203      	movs	r2, #3
 8011a6e:	4393      	bics	r3, r2
 8011a70:	2201      	movs	r2, #1
 8011a72:	431a      	orrs	r2, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8011a78:	e01c      	b.n	8011ab4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7e:	2212      	movs	r2, #18
 8011a80:	4393      	bics	r3, r2
 8011a82:	2210      	movs	r2, #16
 8011a84:	431a      	orrs	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a8e:	2201      	movs	r2, #1
 8011a90:	431a      	orrs	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8011a96:	231f      	movs	r3, #31
 8011a98:	18fb      	adds	r3, r7, r3
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8011a9e:	e009      	b.n	8011ab4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011aa4:	2210      	movs	r2, #16
 8011aa6:	431a      	orrs	r2, r3
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8011aac:	231f      	movs	r3, #31
 8011aae:	18fb      	adds	r3, r7, r3
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8011ab4:	231f      	movs	r3, #31
 8011ab6:	18fb      	adds	r3, r7, r3
 8011ab8:	781b      	ldrb	r3, [r3, #0]
}
 8011aba:	0018      	movs	r0, r3
 8011abc:	46bd      	mov	sp, r7
 8011abe:	b008      	add	sp, #32
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	46c0      	nop			@ (mov r8, r8)
 8011ac4:	20000250 	.word	0x20000250
 8011ac8:	00030d40 	.word	0x00030d40
 8011acc:	fffffefd 	.word	0xfffffefd
 8011ad0:	ffde0201 	.word	0xffde0201
 8011ad4:	1ffffc02 	.word	0x1ffffc02
 8011ad8:	40012708 	.word	0x40012708
 8011adc:	ffc3ffff 	.word	0xffc3ffff
 8011ae0:	7fffff04 	.word	0x7fffff04

08011ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8011ae4:	b590      	push	{r4, r7, lr}
 8011ae6:	b08b      	sub	sp, #44	@ 0x2c
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011aee:	2327      	movs	r3, #39	@ 0x27
 8011af0:	18fb      	adds	r3, r7, r3
 8011af2:	2200      	movs	r2, #0
 8011af4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8011af6:	2300      	movs	r3, #0
 8011af8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2254      	movs	r2, #84	@ 0x54
 8011afe:	5c9b      	ldrb	r3, [r3, r2]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d101      	bne.n	8011b08 <HAL_ADC_ConfigChannel+0x24>
 8011b04:	2302      	movs	r3, #2
 8011b06:	e141      	b.n	8011d8c <HAL_ADC_ConfigChannel+0x2a8>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2254      	movs	r2, #84	@ 0x54
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	0018      	movs	r0, r3
 8011b16:	f7ff fdad 	bl	8011674 <LL_ADC_REG_IsConversionOngoing>
 8011b1a:	1e03      	subs	r3, r0, #0
 8011b1c:	d000      	beq.n	8011b20 <HAL_ADC_ConfigChannel+0x3c>
 8011b1e:	e124      	b.n	8011d6a <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	2b02      	cmp	r3, #2
 8011b26:	d100      	bne.n	8011b2a <HAL_ADC_ConfigChannel+0x46>
 8011b28:	e0d8      	b.n	8011cdc <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	691a      	ldr	r2, [r3, #16]
 8011b2e:	2380      	movs	r3, #128	@ 0x80
 8011b30:	061b      	lsls	r3, r3, #24
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d004      	beq.n	8011b40 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011b3a:	4a96      	ldr	r2, [pc, #600]	@ (8011d94 <HAL_ADC_ConfigChannel+0x2b0>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d108      	bne.n	8011b52 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	0019      	movs	r1, r3
 8011b4a:	0010      	movs	r0, r2
 8011b4c:	f7ff fc8f 	bl	801146e <LL_ADC_REG_SetSequencerChAdd>
 8011b50:	e060      	b.n	8011c14 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	211f      	movs	r1, #31
 8011b5c:	400b      	ands	r3, r1
 8011b5e:	210f      	movs	r1, #15
 8011b60:	4099      	lsls	r1, r3
 8011b62:	000b      	movs	r3, r1
 8011b64:	43db      	mvns	r3, r3
 8011b66:	4013      	ands	r3, r2
 8011b68:	001c      	movs	r4, r3
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	025b      	lsls	r3, r3, #9
 8011b70:	0a5b      	lsrs	r3, r3, #9
 8011b72:	d105      	bne.n	8011b80 <HAL_ADC_ConfigChannel+0x9c>
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	0e9b      	lsrs	r3, r3, #26
 8011b7a:	221f      	movs	r2, #31
 8011b7c:	401a      	ands	r2, r3
 8011b7e:	e02e      	b.n	8011bde <HAL_ADC_ConfigChannel+0xfa>
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8011b86:	231f      	movs	r3, #31
 8011b88:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	085b      	lsrs	r3, r3, #1
 8011b92:	61bb      	str	r3, [r7, #24]
 8011b94:	e00e      	b.n	8011bb4 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	4013      	ands	r3, r2
 8011ba2:	693a      	ldr	r2, [r7, #16]
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	613b      	str	r3, [r7, #16]
    s--;
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	3b01      	subs	r3, #1
 8011bac:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	085b      	lsrs	r3, r3, #1
 8011bb2:	61bb      	str	r3, [r7, #24]
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d1ed      	bne.n	8011b96 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011bba:	693a      	ldr	r2, [r7, #16]
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	409a      	lsls	r2, r3
 8011bc0:	0013      	movs	r3, r2
 8011bc2:	613b      	str	r3, [r7, #16]
  return result;
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8011bce:	2320      	movs	r3, #32
 8011bd0:	e004      	b.n	8011bdc <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8011bd2:	69f8      	ldr	r0, [r7, #28]
 8011bd4:	f7ee fc54 	bl	8000480 <__clzsi2>
 8011bd8:	0003      	movs	r3, r0
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	001a      	movs	r2, r3
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	211f      	movs	r1, #31
 8011be4:	400b      	ands	r3, r1
 8011be6:	409a      	lsls	r2, r3
 8011be8:	0013      	movs	r3, r2
 8011bea:	0022      	movs	r2, r4
 8011bec:	431a      	orrs	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	089b      	lsrs	r3, r3, #2
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	69db      	ldr	r3, [r3, #28]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d808      	bhi.n	8011c14 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	6859      	ldr	r1, [r3, #4]
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	001a      	movs	r2, r3
 8011c10:	f7ff fc0d 	bl	801142e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6818      	ldr	r0, [r3, #0]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	6819      	ldr	r1, [r3, #0]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	001a      	movs	r2, r3
 8011c22:	f7ff fc47 	bl	80114b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	db00      	blt.n	8011c30 <HAL_ADC_ConfigChannel+0x14c>
 8011c2e:	e0a6      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011c30:	4b59      	ldr	r3, [pc, #356]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011c32:	0018      	movs	r0, r3
 8011c34:	f7ff fbba 	bl	80113ac <LL_ADC_GetCommonPathInternalCh>
 8011c38:	0003      	movs	r3, r0
 8011c3a:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a56      	ldr	r2, [pc, #344]	@ (8011d9c <HAL_ADC_ConfigChannel+0x2b8>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d122      	bne.n	8011c8c <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8011c46:	6a3a      	ldr	r2, [r7, #32]
 8011c48:	2380      	movs	r3, #128	@ 0x80
 8011c4a:	041b      	lsls	r3, r3, #16
 8011c4c:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011c4e:	d11d      	bne.n	8011c8c <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011c50:	6a3b      	ldr	r3, [r7, #32]
 8011c52:	2280      	movs	r2, #128	@ 0x80
 8011c54:	0412      	lsls	r2, r2, #16
 8011c56:	4313      	orrs	r3, r2
 8011c58:	4a4f      	ldr	r2, [pc, #316]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011c5a:	0019      	movs	r1, r3
 8011c5c:	0010      	movs	r0, r2
 8011c5e:	f7ff fb91 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011c62:	4b4f      	ldr	r3, [pc, #316]	@ (8011da0 <HAL_ADC_ConfigChannel+0x2bc>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	494f      	ldr	r1, [pc, #316]	@ (8011da4 <HAL_ADC_ConfigChannel+0x2c0>)
 8011c68:	0018      	movs	r0, r3
 8011c6a:	f7ee fa55 	bl	8000118 <__udivsi3>
 8011c6e:	0003      	movs	r3, r0
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	0013      	movs	r3, r2
 8011c74:	005b      	lsls	r3, r3, #1
 8011c76:	189b      	adds	r3, r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011c7c:	e002      	b.n	8011c84 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3b01      	subs	r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1f9      	bne.n	8011c7e <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011c8a:	e078      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4a45      	ldr	r2, [pc, #276]	@ (8011da8 <HAL_ADC_ConfigChannel+0x2c4>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d10e      	bne.n	8011cb4 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011c96:	6a3a      	ldr	r2, [r7, #32]
 8011c98:	2380      	movs	r3, #128	@ 0x80
 8011c9a:	045b      	lsls	r3, r3, #17
 8011c9c:	4013      	ands	r3, r2
 8011c9e:	d109      	bne.n	8011cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011ca0:	6a3b      	ldr	r3, [r7, #32]
 8011ca2:	2280      	movs	r2, #128	@ 0x80
 8011ca4:	0452      	lsls	r2, r2, #17
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011caa:	0019      	movs	r1, r3
 8011cac:	0010      	movs	r0, r2
 8011cae:	f7ff fb69 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
 8011cb2:	e064      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8011dac <HAL_ADC_ConfigChannel+0x2c8>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d15f      	bne.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011cbe:	6a3a      	ldr	r2, [r7, #32]
 8011cc0:	2380      	movs	r3, #128	@ 0x80
 8011cc2:	03db      	lsls	r3, r3, #15
 8011cc4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8011cc6:	d15a      	bne.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	2280      	movs	r2, #128	@ 0x80
 8011ccc:	03d2      	lsls	r2, r2, #15
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	4a31      	ldr	r2, [pc, #196]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011cd2:	0019      	movs	r1, r3
 8011cd4:	0010      	movs	r0, r2
 8011cd6:	f7ff fb55 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
 8011cda:	e050      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	691a      	ldr	r2, [r3, #16]
 8011ce0:	2380      	movs	r3, #128	@ 0x80
 8011ce2:	061b      	lsls	r3, r3, #24
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d004      	beq.n	8011cf2 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011cec:	4a29      	ldr	r2, [pc, #164]	@ (8011d94 <HAL_ADC_ConfigChannel+0x2b0>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d107      	bne.n	8011d02 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	0019      	movs	r1, r3
 8011cfc:	0010      	movs	r0, r2
 8011cfe:	f7ff fbc7 	bl	8011490 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	da39      	bge.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011d0a:	4b23      	ldr	r3, [pc, #140]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011d0c:	0018      	movs	r0, r3
 8011d0e:	f7ff fb4d 	bl	80113ac <LL_ADC_GetCommonPathInternalCh>
 8011d12:	0003      	movs	r3, r0
 8011d14:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4a20      	ldr	r2, [pc, #128]	@ (8011d9c <HAL_ADC_ConfigChannel+0x2b8>)
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d108      	bne.n	8011d32 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011d20:	6a3b      	ldr	r3, [r7, #32]
 8011d22:	4a23      	ldr	r2, [pc, #140]	@ (8011db0 <HAL_ADC_ConfigChannel+0x2cc>)
 8011d24:	4013      	ands	r3, r2
 8011d26:	4a1c      	ldr	r2, [pc, #112]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011d28:	0019      	movs	r1, r3
 8011d2a:	0010      	movs	r0, r2
 8011d2c:	f7ff fb2a 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
 8011d30:	e025      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a1c      	ldr	r2, [pc, #112]	@ (8011da8 <HAL_ADC_ConfigChannel+0x2c4>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d108      	bne.n	8011d4e <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8011db4 <HAL_ADC_ConfigChannel+0x2d0>)
 8011d40:	4013      	ands	r3, r2
 8011d42:	4a15      	ldr	r2, [pc, #84]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011d44:	0019      	movs	r1, r3
 8011d46:	0010      	movs	r0, r2
 8011d48:	f7ff fb1c 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
 8011d4c:	e017      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4a16      	ldr	r2, [pc, #88]	@ (8011dac <HAL_ADC_ConfigChannel+0x2c8>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d112      	bne.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	4a17      	ldr	r2, [pc, #92]	@ (8011db8 <HAL_ADC_ConfigChannel+0x2d4>)
 8011d5c:	4013      	ands	r3, r2
 8011d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8011d98 <HAL_ADC_ConfigChannel+0x2b4>)
 8011d60:	0019      	movs	r1, r3
 8011d62:	0010      	movs	r0, r2
 8011d64:	f7ff fb0e 	bl	8011384 <LL_ADC_SetCommonPathInternalCh>
 8011d68:	e009      	b.n	8011d7e <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d6e:	2220      	movs	r2, #32
 8011d70:	431a      	orrs	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8011d76:	2327      	movs	r3, #39	@ 0x27
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2254      	movs	r2, #84	@ 0x54
 8011d82:	2100      	movs	r1, #0
 8011d84:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8011d86:	2327      	movs	r3, #39	@ 0x27
 8011d88:	18fb      	adds	r3, r7, r3
 8011d8a:	781b      	ldrb	r3, [r3, #0]
}
 8011d8c:	0018      	movs	r0, r3
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	b00b      	add	sp, #44	@ 0x2c
 8011d92:	bd90      	pop	{r4, r7, pc}
 8011d94:	80000004 	.word	0x80000004
 8011d98:	40012708 	.word	0x40012708
 8011d9c:	ac000800 	.word	0xac000800
 8011da0:	20000250 	.word	0x20000250
 8011da4:	00030d40 	.word	0x00030d40
 8011da8:	b4002000 	.word	0xb4002000
 8011dac:	b0001000 	.word	0xb0001000
 8011db0:	ff7fffff 	.word	0xff7fffff
 8011db4:	feffffff 	.word	0xfeffffff
 8011db8:	ffbfffff 	.word	0xffbfffff

08011dbc <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8011dbc:	b590      	push	{r4, r7, lr}
 8011dbe:	b08f      	sub	sp, #60	@ 0x3c
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011dc6:	2337      	movs	r3, #55	@ 0x37
 8011dc8:	18fb      	adds	r3, r7, r3
 8011dca:	2200      	movs	r2, #0
 8011dcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2254      	movs	r2, #84	@ 0x54
 8011dd6:	5c9b      	ldrb	r3, [r3, r2]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d101      	bne.n	8011de0 <HAL_ADC_AnalogWDGConfig+0x24>
 8011ddc:	2302      	movs	r3, #2
 8011dde:	e195      	b.n	801210c <HAL_ADC_AnalogWDGConfig+0x350>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2254      	movs	r2, #84	@ 0x54
 8011de4:	2101      	movs	r1, #1
 8011de6:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	0018      	movs	r0, r3
 8011dee:	f7ff fc41 	bl	8011674 <LL_ADC_REG_IsConversionOngoing>
 8011df2:	1e03      	subs	r3, r0, #0
 8011df4:	d000      	beq.n	8011df8 <HAL_ADC_AnalogWDGConfig+0x3c>
 8011df6:	e156      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4ac5      	ldr	r2, [pc, #788]	@ (8012114 <HAL_ADC_AnalogWDGConfig+0x358>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d162      	bne.n	8011ec8 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	0018      	movs	r0, r3
 8011e08:	f7ff fc12 	bl	8011630 <LL_ADC_IsEnabled>
 8011e0c:	1e03      	subs	r3, r0, #0
 8011e0e:	d009      	beq.n	8011e24 <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 8011e10:	2301      	movs	r3, #1
 8011e12:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 8011e14:	2337      	movs	r3, #55	@ 0x37
 8011e16:	18fc      	adds	r4, r7, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	0018      	movs	r0, r3
 8011e1c:	f000 fa0e 	bl	801223c <ADC_Disable>
 8011e20:	0003      	movs	r3, r0
 8011e22:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	2280      	movs	r2, #128	@ 0x80
 8011e2a:	0412      	lsls	r2, r2, #16
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d011      	beq.n	8011e54 <HAL_ADC_AnalogWDGConfig+0x98>
 8011e30:	22c0      	movs	r2, #192	@ 0xc0
 8011e32:	0412      	lsls	r2, r2, #16
 8011e34:	4293      	cmp	r3, r2
 8011e36:	d115      	bne.n	8011e64 <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	4ab5      	ldr	r2, [pc, #724]	@ (8012118 <HAL_ADC_AnalogWDGConfig+0x35c>)
 8011e42:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8011e44:	22c0      	movs	r2, #192	@ 0xc0
 8011e46:	0412      	lsls	r2, r2, #16
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	49b2      	ldr	r1, [pc, #712]	@ (8012114 <HAL_ADC_AnalogWDGConfig+0x358>)
 8011e4c:	001a      	movs	r2, r3
 8011e4e:	f7ff fb4d 	bl	80114ec <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8011e52:	e00f      	b.n	8011e74 <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	4ab0      	ldr	r2, [pc, #704]	@ (801211c <HAL_ADC_AnalogWDGConfig+0x360>)
 8011e5a:	49ae      	ldr	r1, [pc, #696]	@ (8012114 <HAL_ADC_AnalogWDGConfig+0x358>)
 8011e5c:	0018      	movs	r0, r3
 8011e5e:	f7ff fb45 	bl	80114ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8011e62:	e007      	b.n	8011e74 <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	49aa      	ldr	r1, [pc, #680]	@ (8012114 <HAL_ADC_AnalogWDGConfig+0x358>)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	0018      	movs	r0, r3
 8011e6e:	f7ff fb3d 	bl	80114ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8011e72:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 8011e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d10b      	bne.n	8011e92 <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 8011e7a:	2237      	movs	r2, #55	@ 0x37
 8011e7c:	18bb      	adds	r3, r7, r2
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d106      	bne.n	8011e92 <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 8011e84:	18bc      	adds	r4, r7, r2
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	0018      	movs	r0, r3
 8011e8a:	f000 f951 	bl	8012130 <ADC_Enable>
 8011e8e:	0003      	movs	r3, r0
 8011e90:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e96:	4aa2      	ldr	r2, [pc, #648]	@ (8012120 <HAL_ADC_AnalogWDGConfig+0x364>)
 8011e98:	401a      	ands	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	0018      	movs	r0, r3
 8011ea4:	f7ff fbf7 	bl	8011696 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	7b1b      	ldrb	r3, [r3, #12]
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d105      	bne.n	8011ebc <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	0018      	movs	r0, r3
 8011eb6:	f7ff fc11 	bl	80116dc <LL_ADC_EnableIT_AWD1>
 8011eba:	e0f4      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	0018      	movs	r0, r3
 8011ec2:	f7ff fc37 	bl	8011734 <LL_ADC_DisableIT_AWD1>
 8011ec6:	e0ee      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	2280      	movs	r2, #128	@ 0x80
 8011ece:	0412      	lsls	r2, r2, #16
 8011ed0:	4293      	cmp	r3, r2
 8011ed2:	d100      	bne.n	8011ed6 <HAL_ADC_AnalogWDGConfig+0x11a>
 8011ed4:	e09b      	b.n	801200e <HAL_ADC_AnalogWDGConfig+0x252>
 8011ed6:	22c0      	movs	r2, #192	@ 0xc0
 8011ed8:	0412      	lsls	r2, r2, #16
 8011eda:	4293      	cmp	r3, r2
 8011edc:	d000      	beq.n	8011ee0 <HAL_ADC_AnalogWDGConfig+0x124>
 8011ede:	e09f      	b.n	8012020 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4a8f      	ldr	r2, [pc, #572]	@ (8012124 <HAL_ADC_AnalogWDGConfig+0x368>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d148      	bne.n	8011f7c <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	025b      	lsls	r3, r3, #9
 8011ef0:	0a5b      	lsrs	r3, r3, #9
 8011ef2:	d108      	bne.n	8011f06 <HAL_ADC_AnalogWDGConfig+0x14a>
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	0e9b      	lsrs	r3, r3, #26
 8011efa:	221f      	movs	r2, #31
 8011efc:	4013      	ands	r3, r2
 8011efe:	2201      	movs	r2, #1
 8011f00:	409a      	lsls	r2, r3
 8011f02:	0013      	movs	r3, r2
 8011f04:	e030      	b.n	8011f68 <HAL_ADC_AnalogWDGConfig+0x1ac>
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	689b      	ldr	r3, [r3, #8]
 8011f0a:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8011f0c:	231f      	movs	r3, #31
 8011f0e:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8011f10:	6a3b      	ldr	r3, [r7, #32]
 8011f12:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	085b      	lsrs	r3, r3, #1
 8011f18:	623b      	str	r3, [r7, #32]
 8011f1a:	e00e      	b.n	8011f3a <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	005b      	lsls	r3, r3, #1
 8011f20:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8011f22:	6a3b      	ldr	r3, [r7, #32]
 8011f24:	2201      	movs	r2, #1
 8011f26:	4013      	ands	r3, r2
 8011f28:	69ba      	ldr	r2, [r7, #24]
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	61bb      	str	r3, [r7, #24]
    s--;
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011f34:	6a3b      	ldr	r3, [r7, #32]
 8011f36:	085b      	lsrs	r3, r3, #1
 8011f38:	623b      	str	r3, [r7, #32]
 8011f3a:	6a3b      	ldr	r3, [r7, #32]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1ed      	bne.n	8011f1c <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011f40:	69ba      	ldr	r2, [r7, #24]
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	409a      	lsls	r2, r3
 8011f46:	0013      	movs	r3, r2
 8011f48:	61bb      	str	r3, [r7, #24]
  return result;
 8011f4a:	69bb      	ldr	r3, [r7, #24]
 8011f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d101      	bne.n	8011f58 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 8011f54:	2320      	movs	r3, #32
 8011f56:	e004      	b.n	8011f62 <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 8011f58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f5a:	f7ee fa91 	bl	8000480 <__clzsi2>
 8011f5e:	0003      	movs	r3, r0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	001a      	movs	r2, r3
 8011f64:	2301      	movs	r3, #1
 8011f66:	4093      	lsls	r3, r2
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	6812      	ldr	r2, [r2, #0]
 8011f6c:	21a0      	movs	r1, #160	@ 0xa0
 8011f6e:	5851      	ldr	r1, [r2, r1]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	6812      	ldr	r2, [r2, #0]
 8011f74:	430b      	orrs	r3, r1
 8011f76:	21a0      	movs	r1, #160	@ 0xa0
 8011f78:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8011f7a:	e05a      	b.n	8012032 <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	025b      	lsls	r3, r3, #9
 8011f82:	0a5b      	lsrs	r3, r3, #9
 8011f84:	d108      	bne.n	8011f98 <HAL_ADC_AnalogWDGConfig+0x1dc>
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	0e9b      	lsrs	r3, r3, #26
 8011f8c:	221f      	movs	r2, #31
 8011f8e:	4013      	ands	r3, r2
 8011f90:	2201      	movs	r2, #1
 8011f92:	409a      	lsls	r2, r3
 8011f94:	0013      	movs	r3, r2
 8011f96:	e030      	b.n	8011ffa <HAL_ADC_AnalogWDGConfig+0x23e>
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8011f9e:	231f      	movs	r3, #31
 8011fa0:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	085b      	lsrs	r3, r3, #1
 8011faa:	613b      	str	r3, [r7, #16]
 8011fac:	e00e      	b.n	8011fcc <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	4013      	ands	r3, r2
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	4313      	orrs	r3, r2
 8011fbe:	60bb      	str	r3, [r7, #8]
    s--;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	085b      	lsrs	r3, r3, #1
 8011fca:	613b      	str	r3, [r7, #16]
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d1ed      	bne.n	8011fae <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	409a      	lsls	r2, r3
 8011fd8:	0013      	movs	r3, r2
 8011fda:	60bb      	str	r3, [r7, #8]
  return result;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 8011fe6:	2320      	movs	r3, #32
 8011fe8:	e004      	b.n	8011ff4 <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 8011fea:	6978      	ldr	r0, [r7, #20]
 8011fec:	f7ee fa48 	bl	8000480 <__clzsi2>
 8011ff0:	0003      	movs	r3, r0
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	001a      	movs	r2, r3
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	4093      	lsls	r3, r2
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	6812      	ldr	r2, [r2, #0]
 8011ffe:	21a4      	movs	r1, #164	@ 0xa4
 8012000:	5851      	ldr	r1, [r2, r1]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	6812      	ldr	r2, [r2, #0]
 8012006:	430b      	orrs	r3, r1
 8012008:	21a4      	movs	r1, #164	@ 0xa4
 801200a:	5053      	str	r3, [r2, r1]
          break;
 801200c:	e011      	b.n	8012032 <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012016:	4a41      	ldr	r2, [pc, #260]	@ (801211c <HAL_ADC_AnalogWDGConfig+0x360>)
 8012018:	0019      	movs	r1, r3
 801201a:	f7ff fa67 	bl	80114ec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 801201e:	e008      	b.n	8012032 <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2200      	movs	r2, #0
 801202a:	0019      	movs	r1, r3
 801202c:	f7ff fa5e 	bl	80114ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012030:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	4a3b      	ldr	r2, [pc, #236]	@ (8012124 <HAL_ADC_AnalogWDGConfig+0x368>)
 8012038:	4293      	cmp	r3, r2
 801203a:	d11a      	bne.n	8012072 <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012040:	4a39      	ldr	r2, [pc, #228]	@ (8012128 <HAL_ADC_AnalogWDGConfig+0x36c>)
 8012042:	401a      	ands	r2, r3
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	0018      	movs	r0, r3
 801204e:	f7ff fb2d 	bl	80116ac <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	7b1b      	ldrb	r3, [r3, #12]
 8012056:	2b01      	cmp	r3, #1
 8012058:	d105      	bne.n	8012066 <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	0018      	movs	r0, r3
 8012060:	f7ff fb4a 	bl	80116f8 <LL_ADC_EnableIT_AWD2>
 8012064:	e01f      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	0018      	movs	r0, r3
 801206c:	f7ff fb72 	bl	8011754 <LL_ADC_DisableIT_AWD2>
 8012070:	e019      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012076:	4a2d      	ldr	r2, [pc, #180]	@ (801212c <HAL_ADC_AnalogWDGConfig+0x370>)
 8012078:	401a      	ands	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	0018      	movs	r0, r3
 8012084:	f7ff fb1e 	bl	80116c4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	7b1b      	ldrb	r3, [r3, #12]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d105      	bne.n	801209c <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	0018      	movs	r0, r3
 8012096:	f7ff fb3e 	bl	8011716 <LL_ADC_EnableIT_AWD3>
 801209a:	e004      	b.n	80120a6 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	0018      	movs	r0, r3
 80120a2:	f7ff fb67 	bl	8011774 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a1a      	ldr	r2, [pc, #104]	@ (8012114 <HAL_ADC_AnalogWDGConfig+0x358>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d118      	bne.n	80120e2 <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	691a      	ldr	r2, [r3, #16]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	08db      	lsrs	r3, r3, #3
 80120bc:	2103      	movs	r1, #3
 80120be:	400b      	ands	r3, r1
 80120c0:	005b      	lsls	r3, r3, #1
 80120c2:	409a      	lsls	r2, r3
 80120c4:	0013      	movs	r3, r2
 80120c6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	695a      	ldr	r2, [r3, #20]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	08db      	lsrs	r3, r3, #3
 80120d4:	2103      	movs	r1, #3
 80120d6:	400b      	ands	r3, r1
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	409a      	lsls	r2, r3
 80120dc:	0013      	movs	r3, r2
 80120de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80120e0:	e005      	b.n	80120ee <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	695b      	ldr	r3, [r3, #20]
 80120ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	6819      	ldr	r1, [r3, #0]
 80120f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120fa:	f7ff fa25 	bl	8011548 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2254      	movs	r2, #84	@ 0x54
 8012102:	2100      	movs	r1, #0
 8012104:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012106:	2337      	movs	r3, #55	@ 0x37
 8012108:	18fb      	adds	r3, r7, r3
 801210a:	781b      	ldrb	r3, [r3, #0]
}
 801210c:	0018      	movs	r0, r3
 801210e:	46bd      	mov	sp, r7
 8012110:	b00f      	add	sp, #60	@ 0x3c
 8012112:	bd90      	pop	{r4, r7, pc}
 8012114:	7cc00000 	.word	0x7cc00000
 8012118:	fc3fffff 	.word	0xfc3fffff
 801211c:	0087ffff 	.word	0x0087ffff
 8012120:	fffeffff 	.word	0xfffeffff
 8012124:	0017ffff 	.word	0x0017ffff
 8012128:	fffdffff 	.word	0xfffdffff
 801212c:	fffbffff 	.word	0xfffbffff

08012130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8012138:	2300      	movs	r3, #0
 801213a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	0018      	movs	r0, r3
 8012142:	f7ff fa75 	bl	8011630 <LL_ADC_IsEnabled>
 8012146:	1e03      	subs	r3, r0, #0
 8012148:	d000      	beq.n	801214c <ADC_Enable+0x1c>
 801214a:	e069      	b.n	8012220 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	689b      	ldr	r3, [r3, #8]
 8012152:	4a36      	ldr	r2, [pc, #216]	@ (801222c <ADC_Enable+0xfc>)
 8012154:	4013      	ands	r3, r2
 8012156:	d00d      	beq.n	8012174 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801215c:	2210      	movs	r2, #16
 801215e:	431a      	orrs	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012168:	2201      	movs	r2, #1
 801216a:	431a      	orrs	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8012170:	2301      	movs	r3, #1
 8012172:	e056      	b.n	8012222 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	0018      	movs	r0, r3
 801217a:	f7ff fa35 	bl	80115e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 801217e:	4b2c      	ldr	r3, [pc, #176]	@ (8012230 <ADC_Enable+0x100>)
 8012180:	0018      	movs	r0, r3
 8012182:	f7ff f913 	bl	80113ac <LL_ADC_GetCommonPathInternalCh>
 8012186:	0002      	movs	r2, r0
 8012188:	2380      	movs	r3, #128	@ 0x80
 801218a:	041b      	lsls	r3, r3, #16
 801218c:	4013      	ands	r3, r2
 801218e:	d00f      	beq.n	80121b0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012190:	4b28      	ldr	r3, [pc, #160]	@ (8012234 <ADC_Enable+0x104>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4928      	ldr	r1, [pc, #160]	@ (8012238 <ADC_Enable+0x108>)
 8012196:	0018      	movs	r0, r3
 8012198:	f7ed ffbe 	bl	8000118 <__udivsi3>
 801219c:	0003      	movs	r3, r0
 801219e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80121a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80121a2:	e002      	b.n	80121aa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	3b01      	subs	r3, #1
 80121a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1f9      	bne.n	80121a4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	7e5b      	ldrb	r3, [r3, #25]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d033      	beq.n	8012220 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80121b8:	f7ff f8b8 	bl	801132c <HAL_GetTick>
 80121bc:	0003      	movs	r3, r0
 80121be:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80121c0:	e027      	b.n	8012212 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	0018      	movs	r0, r3
 80121c8:	f7ff fa32 	bl	8011630 <LL_ADC_IsEnabled>
 80121cc:	1e03      	subs	r3, r0, #0
 80121ce:	d104      	bne.n	80121da <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	0018      	movs	r0, r3
 80121d6:	f7ff fa07 	bl	80115e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80121da:	f7ff f8a7 	bl	801132c <HAL_GetTick>
 80121de:	0002      	movs	r2, r0
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d914      	bls.n	8012212 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2201      	movs	r2, #1
 80121f0:	4013      	ands	r3, r2
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d00d      	beq.n	8012212 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121fa:	2210      	movs	r2, #16
 80121fc:	431a      	orrs	r2, r3
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012206:	2201      	movs	r2, #1
 8012208:	431a      	orrs	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 801220e:	2301      	movs	r3, #1
 8012210:	e007      	b.n	8012222 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2201      	movs	r2, #1
 801221a:	4013      	ands	r3, r2
 801221c:	2b01      	cmp	r3, #1
 801221e:	d1d0      	bne.n	80121c2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012220:	2300      	movs	r3, #0
}
 8012222:	0018      	movs	r0, r3
 8012224:	46bd      	mov	sp, r7
 8012226:	b004      	add	sp, #16
 8012228:	bd80      	pop	{r7, pc}
 801222a:	46c0      	nop			@ (mov r8, r8)
 801222c:	80000017 	.word	0x80000017
 8012230:	40012708 	.word	0x40012708
 8012234:	20000250 	.word	0x20000250
 8012238:	00030d40 	.word	0x00030d40

0801223c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	0018      	movs	r0, r3
 801224a:	f7ff fa02 	bl	8011652 <LL_ADC_IsDisableOngoing>
 801224e:	0003      	movs	r3, r0
 8012250:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	0018      	movs	r0, r3
 8012258:	f7ff f9ea 	bl	8011630 <LL_ADC_IsEnabled>
 801225c:	1e03      	subs	r3, r0, #0
 801225e:	d046      	beq.n	80122ee <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d143      	bne.n	80122ee <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	2205      	movs	r2, #5
 801226e:	4013      	ands	r3, r2
 8012270:	2b01      	cmp	r3, #1
 8012272:	d10d      	bne.n	8012290 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	0018      	movs	r0, r3
 801227a:	f7ff f9c7 	bl	801160c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2203      	movs	r2, #3
 8012284:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012286:	f7ff f851 	bl	801132c <HAL_GetTick>
 801228a:	0003      	movs	r3, r0
 801228c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801228e:	e028      	b.n	80122e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012294:	2210      	movs	r2, #16
 8012296:	431a      	orrs	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80122a0:	2201      	movs	r2, #1
 80122a2:	431a      	orrs	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80122a8:	2301      	movs	r3, #1
 80122aa:	e021      	b.n	80122f0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80122ac:	f7ff f83e 	bl	801132c <HAL_GetTick>
 80122b0:	0002      	movs	r2, r0
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	2b02      	cmp	r3, #2
 80122b8:	d913      	bls.n	80122e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	689b      	ldr	r3, [r3, #8]
 80122c0:	2201      	movs	r2, #1
 80122c2:	4013      	ands	r3, r2
 80122c4:	d00d      	beq.n	80122e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122ca:	2210      	movs	r2, #16
 80122cc:	431a      	orrs	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80122d6:	2201      	movs	r2, #1
 80122d8:	431a      	orrs	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80122de:	2301      	movs	r3, #1
 80122e0:	e006      	b.n	80122f0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	2201      	movs	r2, #1
 80122ea:	4013      	ands	r3, r2
 80122ec:	d1de      	bne.n	80122ac <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80122ee:	2300      	movs	r3, #0
}
 80122f0:	0018      	movs	r0, r3
 80122f2:	46bd      	mov	sp, r7
 80122f4:	b004      	add	sp, #16
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <LL_ADC_GetCommonClock>:
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	23f0      	movs	r3, #240	@ 0xf0
 8012306:	039b      	lsls	r3, r3, #14
 8012308:	4013      	ands	r3, r2
}
 801230a:	0018      	movs	r0, r3
 801230c:	46bd      	mov	sp, r7
 801230e:	b002      	add	sp, #8
 8012310:	bd80      	pop	{r7, pc}

08012312 <LL_ADC_GetClock>:
{
 8012312:	b580      	push	{r7, lr}
 8012314:	b082      	sub	sp, #8
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	0f9b      	lsrs	r3, r3, #30
 8012320:	079b      	lsls	r3, r3, #30
}
 8012322:	0018      	movs	r0, r3
 8012324:	46bd      	mov	sp, r7
 8012326:	b002      	add	sp, #8
 8012328:	bd80      	pop	{r7, pc}

0801232a <LL_ADC_SetCalibrationFactor>:
{
 801232a:	b580      	push	{r7, lr}
 801232c:	b082      	sub	sp, #8
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	22b4      	movs	r2, #180	@ 0xb4
 8012338:	589b      	ldr	r3, [r3, r2]
 801233a:	227f      	movs	r2, #127	@ 0x7f
 801233c:	4393      	bics	r3, r2
 801233e:	001a      	movs	r2, r3
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	431a      	orrs	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	21b4      	movs	r1, #180	@ 0xb4
 8012348:	505a      	str	r2, [r3, r1]
}
 801234a:	46c0      	nop			@ (mov r8, r8)
 801234c:	46bd      	mov	sp, r7
 801234e:	b002      	add	sp, #8
 8012350:	bd80      	pop	{r7, pc}

08012352 <LL_ADC_GetCalibrationFactor>:
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b082      	sub	sp, #8
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	22b4      	movs	r2, #180	@ 0xb4
 801235e:	589b      	ldr	r3, [r3, r2]
 8012360:	227f      	movs	r2, #127	@ 0x7f
 8012362:	4013      	ands	r3, r2
}
 8012364:	0018      	movs	r0, r3
 8012366:	46bd      	mov	sp, r7
 8012368:	b002      	add	sp, #8
 801236a:	bd80      	pop	{r7, pc}

0801236c <LL_ADC_Enable>:
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	4a04      	ldr	r2, [pc, #16]	@ (801238c <LL_ADC_Enable+0x20>)
 801237a:	4013      	ands	r3, r2
 801237c:	2201      	movs	r2, #1
 801237e:	431a      	orrs	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	609a      	str	r2, [r3, #8]
}
 8012384:	46c0      	nop			@ (mov r8, r8)
 8012386:	46bd      	mov	sp, r7
 8012388:	b002      	add	sp, #8
 801238a:	bd80      	pop	{r7, pc}
 801238c:	7fffffe8 	.word	0x7fffffe8

08012390 <LL_ADC_Disable>:
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	4a04      	ldr	r2, [pc, #16]	@ (80123b0 <LL_ADC_Disable+0x20>)
 801239e:	4013      	ands	r3, r2
 80123a0:	2202      	movs	r2, #2
 80123a2:	431a      	orrs	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	609a      	str	r2, [r3, #8]
}
 80123a8:	46c0      	nop			@ (mov r8, r8)
 80123aa:	46bd      	mov	sp, r7
 80123ac:	b002      	add	sp, #8
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	7fffffe8 	.word	0x7fffffe8

080123b4 <LL_ADC_IsEnabled>:
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	2201      	movs	r2, #1
 80123c2:	4013      	ands	r3, r2
 80123c4:	2b01      	cmp	r3, #1
 80123c6:	d101      	bne.n	80123cc <LL_ADC_IsEnabled+0x18>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e000      	b.n	80123ce <LL_ADC_IsEnabled+0x1a>
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	0018      	movs	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	b002      	add	sp, #8
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <LL_ADC_StartCalibration>:
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	4a05      	ldr	r2, [pc, #20]	@ (80123fc <LL_ADC_StartCalibration+0x24>)
 80123e6:	4013      	ands	r3, r2
 80123e8:	2280      	movs	r2, #128	@ 0x80
 80123ea:	0612      	lsls	r2, r2, #24
 80123ec:	431a      	orrs	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	609a      	str	r2, [r3, #8]
}
 80123f2:	46c0      	nop			@ (mov r8, r8)
 80123f4:	46bd      	mov	sp, r7
 80123f6:	b002      	add	sp, #8
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	46c0      	nop			@ (mov r8, r8)
 80123fc:	7fffffe8 	.word	0x7fffffe8

08012400 <LL_ADC_IsCalibrationOnGoing>:
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	0fdb      	lsrs	r3, r3, #31
 801240e:	07da      	lsls	r2, r3, #31
 8012410:	2380      	movs	r3, #128	@ 0x80
 8012412:	061b      	lsls	r3, r3, #24
 8012414:	429a      	cmp	r2, r3
 8012416:	d101      	bne.n	801241c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8012418:	2301      	movs	r3, #1
 801241a:	e000      	b.n	801241e <LL_ADC_IsCalibrationOnGoing+0x1e>
 801241c:	2300      	movs	r3, #0
}
 801241e:	0018      	movs	r0, r3
 8012420:	46bd      	mov	sp, r7
 8012422:	b002      	add	sp, #8
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8012428:	b590      	push	{r4, r7, lr}
 801242a:	b08b      	sub	sp, #44	@ 0x2c
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8012430:	2300      	movs	r3, #0
 8012432:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8012434:	2300      	movs	r3, #0
 8012436:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2254      	movs	r2, #84	@ 0x54
 801243c:	5c9b      	ldrb	r3, [r3, r2]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d101      	bne.n	8012446 <HAL_ADCEx_Calibration_Start+0x1e>
 8012442:	2302      	movs	r3, #2
 8012444:	e0de      	b.n	8012604 <HAL_ADCEx_Calibration_Start+0x1dc>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2254      	movs	r2, #84	@ 0x54
 801244a:	2101      	movs	r1, #1
 801244c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801244e:	231f      	movs	r3, #31
 8012450:	18fc      	adds	r4, r7, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	0018      	movs	r0, r3
 8012456:	f7ff fef1 	bl	801223c <ADC_Disable>
 801245a:	0003      	movs	r3, r0
 801245c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	0018      	movs	r0, r3
 8012464:	f7ff ffa6 	bl	80123b4 <LL_ADC_IsEnabled>
 8012468:	1e03      	subs	r3, r0, #0
 801246a:	d000      	beq.n	801246e <HAL_ADCEx_Calibration_Start+0x46>
 801246c:	e0bd      	b.n	80125ea <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012472:	4a66      	ldr	r2, [pc, #408]	@ (801260c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8012474:	4013      	ands	r3, r2
 8012476:	2202      	movs	r2, #2
 8012478:	431a      	orrs	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	4a62      	ldr	r2, [pc, #392]	@ (8012610 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8012486:	4013      	ands	r3, r2
 8012488:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	68da      	ldr	r2, [r3, #12]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	495f      	ldr	r1, [pc, #380]	@ (8012614 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8012496:	400a      	ands	r2, r1
 8012498:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 801249a:	2300      	movs	r3, #0
 801249c:	627b      	str	r3, [r7, #36]	@ 0x24
 801249e:	e02e      	b.n	80124fe <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	0018      	movs	r0, r3
 80124a6:	f7ff ff97 	bl	80123d8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80124aa:	e015      	b.n	80124d8 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	3301      	adds	r3, #1
 80124b0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	23ae      	movs	r3, #174	@ 0xae
 80124b6:	029b      	lsls	r3, r3, #10
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d30d      	bcc.n	80124d8 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124c0:	2212      	movs	r2, #18
 80124c2:	4393      	bics	r3, r2
 80124c4:	2210      	movs	r2, #16
 80124c6:	431a      	orrs	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2254      	movs	r2, #84	@ 0x54
 80124d0:	2100      	movs	r1, #0
 80124d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80124d4:	2301      	movs	r3, #1
 80124d6:	e095      	b.n	8012604 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	0018      	movs	r0, r3
 80124de:	f7ff ff8f 	bl	8012400 <LL_ADC_IsCalibrationOnGoing>
 80124e2:	1e03      	subs	r3, r0, #0
 80124e4:	d1e2      	bne.n	80124ac <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	0018      	movs	r0, r3
 80124ec:	f7ff ff31 	bl	8012352 <LL_ADC_GetCalibrationFactor>
 80124f0:	0002      	movs	r2, r0
 80124f2:	6a3b      	ldr	r3, [r7, #32]
 80124f4:	189b      	adds	r3, r3, r2
 80124f6:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80124f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fa:	3301      	adds	r3, #1
 80124fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80124fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012500:	2b07      	cmp	r3, #7
 8012502:	d9cd      	bls.n	80124a0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8012504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012506:	6a38      	ldr	r0, [r7, #32]
 8012508:	f7ed fe06 	bl	8000118 <__udivsi3>
 801250c:	0003      	movs	r3, r0
 801250e:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	0018      	movs	r0, r3
 8012516:	f7ff ff29 	bl	801236c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	0018      	movs	r0, r3
 8012520:	f7ff fef7 	bl	8012312 <LL_ADC_GetClock>
 8012524:	1e03      	subs	r3, r0, #0
 8012526:	d11b      	bne.n	8012560 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012528:	4b3b      	ldr	r3, [pc, #236]	@ (8012618 <HAL_ADCEx_Calibration_Start+0x1f0>)
 801252a:	0018      	movs	r0, r3
 801252c:	f7ff fee4 	bl	80122f8 <LL_ADC_GetCommonClock>
 8012530:	0003      	movs	r3, r0
 8012532:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8012534:	697a      	ldr	r2, [r7, #20]
 8012536:	23e0      	movs	r3, #224	@ 0xe0
 8012538:	035b      	lsls	r3, r3, #13
 801253a:	429a      	cmp	r2, r3
 801253c:	d310      	bcc.n	8012560 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	0c9b      	lsrs	r3, r3, #18
 8012542:	3b03      	subs	r3, #3
 8012544:	2201      	movs	r2, #1
 8012546:	409a      	lsls	r2, r3
 8012548:	0013      	movs	r3, r2
 801254a:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	085b      	lsrs	r3, r3, #1
 8012550:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8012552:	e002      	b.n	801255a <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	3b01      	subs	r3, #1
 8012558:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d1f9      	bne.n	8012554 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	6a3a      	ldr	r2, [r7, #32]
 8012566:	0011      	movs	r1, r2
 8012568:	0018      	movs	r0, r3
 801256a:	f7ff fede 	bl	801232a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	0018      	movs	r0, r3
 8012574:	f7ff ff0c 	bl	8012390 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012578:	f7fe fed8 	bl	801132c <HAL_GetTick>
 801257c:	0003      	movs	r3, r0
 801257e:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012580:	e01b      	b.n	80125ba <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8012582:	f7fe fed3 	bl	801132c <HAL_GetTick>
 8012586:	0002      	movs	r2, r0
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	2b02      	cmp	r3, #2
 801258e:	d914      	bls.n	80125ba <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	0018      	movs	r0, r3
 8012596:	f7ff ff0d 	bl	80123b4 <LL_ADC_IsEnabled>
 801259a:	1e03      	subs	r3, r0, #0
 801259c:	d00d      	beq.n	80125ba <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125a2:	2210      	movs	r2, #16
 80125a4:	431a      	orrs	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125ae:	2201      	movs	r2, #1
 80125b0:	431a      	orrs	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e024      	b.n	8012604 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	0018      	movs	r0, r3
 80125c0:	f7ff fef8 	bl	80123b4 <LL_ADC_IsEnabled>
 80125c4:	1e03      	subs	r3, r0, #0
 80125c6:	d1dc      	bne.n	8012582 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	68d9      	ldr	r1, [r3, #12]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	69ba      	ldr	r2, [r7, #24]
 80125d4:	430a      	orrs	r2, r1
 80125d6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125dc:	2203      	movs	r2, #3
 80125de:	4393      	bics	r3, r2
 80125e0:	2201      	movs	r2, #1
 80125e2:	431a      	orrs	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80125e8:	e005      	b.n	80125f6 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125ee:	2210      	movs	r2, #16
 80125f0:	431a      	orrs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2254      	movs	r2, #84	@ 0x54
 80125fa:	2100      	movs	r1, #0
 80125fc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80125fe:	231f      	movs	r3, #31
 8012600:	18fb      	adds	r3, r7, r3
 8012602:	781b      	ldrb	r3, [r3, #0]
}
 8012604:	0018      	movs	r0, r3
 8012606:	46bd      	mov	sp, r7
 8012608:	b00b      	add	sp, #44	@ 0x2c
 801260a:	bd90      	pop	{r4, r7, pc}
 801260c:	fffffefd 	.word	0xfffffefd
 8012610:	00008003 	.word	0x00008003
 8012614:	ffff7ffc 	.word	0xffff7ffc
 8012618:	40012708 	.word	0x40012708

0801261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	0002      	movs	r2, r0
 8012624:	1dfb      	adds	r3, r7, #7
 8012626:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012628:	1dfb      	adds	r3, r7, #7
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2b7f      	cmp	r3, #127	@ 0x7f
 801262e:	d809      	bhi.n	8012644 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012630:	1dfb      	adds	r3, r7, #7
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	001a      	movs	r2, r3
 8012636:	231f      	movs	r3, #31
 8012638:	401a      	ands	r2, r3
 801263a:	4b04      	ldr	r3, [pc, #16]	@ (801264c <__NVIC_EnableIRQ+0x30>)
 801263c:	2101      	movs	r1, #1
 801263e:	4091      	lsls	r1, r2
 8012640:	000a      	movs	r2, r1
 8012642:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8012644:	46c0      	nop			@ (mov r8, r8)
 8012646:	46bd      	mov	sp, r7
 8012648:	b002      	add	sp, #8
 801264a:	bd80      	pop	{r7, pc}
 801264c:	e000e100 	.word	0xe000e100

08012650 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	0002      	movs	r2, r0
 8012658:	1dfb      	adds	r3, r7, #7
 801265a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801265c:	1dfb      	adds	r3, r7, #7
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	2b7f      	cmp	r3, #127	@ 0x7f
 8012662:	d810      	bhi.n	8012686 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012664:	1dfb      	adds	r3, r7, #7
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	001a      	movs	r2, r3
 801266a:	231f      	movs	r3, #31
 801266c:	4013      	ands	r3, r2
 801266e:	4908      	ldr	r1, [pc, #32]	@ (8012690 <__NVIC_DisableIRQ+0x40>)
 8012670:	2201      	movs	r2, #1
 8012672:	409a      	lsls	r2, r3
 8012674:	0013      	movs	r3, r2
 8012676:	2280      	movs	r2, #128	@ 0x80
 8012678:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 801267a:	f3bf 8f4f 	dsb	sy
}
 801267e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8012680:	f3bf 8f6f 	isb	sy
}
 8012684:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8012686:	46c0      	nop			@ (mov r8, r8)
 8012688:	46bd      	mov	sp, r7
 801268a:	b002      	add	sp, #8
 801268c:	bd80      	pop	{r7, pc}
 801268e:	46c0      	nop			@ (mov r8, r8)
 8012690:	e000e100 	.word	0xe000e100

08012694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012694:	b590      	push	{r4, r7, lr}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	0002      	movs	r2, r0
 801269c:	6039      	str	r1, [r7, #0]
 801269e:	1dfb      	adds	r3, r7, #7
 80126a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80126a2:	1dfb      	adds	r3, r7, #7
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80126a8:	d828      	bhi.n	80126fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80126aa:	4a2f      	ldr	r2, [pc, #188]	@ (8012768 <__NVIC_SetPriority+0xd4>)
 80126ac:	1dfb      	adds	r3, r7, #7
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	b25b      	sxtb	r3, r3
 80126b2:	089b      	lsrs	r3, r3, #2
 80126b4:	33c0      	adds	r3, #192	@ 0xc0
 80126b6:	009b      	lsls	r3, r3, #2
 80126b8:	589b      	ldr	r3, [r3, r2]
 80126ba:	1dfa      	adds	r2, r7, #7
 80126bc:	7812      	ldrb	r2, [r2, #0]
 80126be:	0011      	movs	r1, r2
 80126c0:	2203      	movs	r2, #3
 80126c2:	400a      	ands	r2, r1
 80126c4:	00d2      	lsls	r2, r2, #3
 80126c6:	21ff      	movs	r1, #255	@ 0xff
 80126c8:	4091      	lsls	r1, r2
 80126ca:	000a      	movs	r2, r1
 80126cc:	43d2      	mvns	r2, r2
 80126ce:	401a      	ands	r2, r3
 80126d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	019b      	lsls	r3, r3, #6
 80126d6:	22ff      	movs	r2, #255	@ 0xff
 80126d8:	401a      	ands	r2, r3
 80126da:	1dfb      	adds	r3, r7, #7
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	0018      	movs	r0, r3
 80126e0:	2303      	movs	r3, #3
 80126e2:	4003      	ands	r3, r0
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80126e8:	481f      	ldr	r0, [pc, #124]	@ (8012768 <__NVIC_SetPriority+0xd4>)
 80126ea:	1dfb      	adds	r3, r7, #7
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	b25b      	sxtb	r3, r3
 80126f0:	089b      	lsrs	r3, r3, #2
 80126f2:	430a      	orrs	r2, r1
 80126f4:	33c0      	adds	r3, #192	@ 0xc0
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80126fa:	e031      	b.n	8012760 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80126fc:	4a1b      	ldr	r2, [pc, #108]	@ (801276c <__NVIC_SetPriority+0xd8>)
 80126fe:	1dfb      	adds	r3, r7, #7
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	0019      	movs	r1, r3
 8012704:	230f      	movs	r3, #15
 8012706:	400b      	ands	r3, r1
 8012708:	3b08      	subs	r3, #8
 801270a:	089b      	lsrs	r3, r3, #2
 801270c:	3306      	adds	r3, #6
 801270e:	009b      	lsls	r3, r3, #2
 8012710:	18d3      	adds	r3, r2, r3
 8012712:	3304      	adds	r3, #4
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	1dfa      	adds	r2, r7, #7
 8012718:	7812      	ldrb	r2, [r2, #0]
 801271a:	0011      	movs	r1, r2
 801271c:	2203      	movs	r2, #3
 801271e:	400a      	ands	r2, r1
 8012720:	00d2      	lsls	r2, r2, #3
 8012722:	21ff      	movs	r1, #255	@ 0xff
 8012724:	4091      	lsls	r1, r2
 8012726:	000a      	movs	r2, r1
 8012728:	43d2      	mvns	r2, r2
 801272a:	401a      	ands	r2, r3
 801272c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	019b      	lsls	r3, r3, #6
 8012732:	22ff      	movs	r2, #255	@ 0xff
 8012734:	401a      	ands	r2, r3
 8012736:	1dfb      	adds	r3, r7, #7
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	0018      	movs	r0, r3
 801273c:	2303      	movs	r3, #3
 801273e:	4003      	ands	r3, r0
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012744:	4809      	ldr	r0, [pc, #36]	@ (801276c <__NVIC_SetPriority+0xd8>)
 8012746:	1dfb      	adds	r3, r7, #7
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	001c      	movs	r4, r3
 801274c:	230f      	movs	r3, #15
 801274e:	4023      	ands	r3, r4
 8012750:	3b08      	subs	r3, #8
 8012752:	089b      	lsrs	r3, r3, #2
 8012754:	430a      	orrs	r2, r1
 8012756:	3306      	adds	r3, #6
 8012758:	009b      	lsls	r3, r3, #2
 801275a:	18c3      	adds	r3, r0, r3
 801275c:	3304      	adds	r3, #4
 801275e:	601a      	str	r2, [r3, #0]
}
 8012760:	46c0      	nop			@ (mov r8, r8)
 8012762:	46bd      	mov	sp, r7
 8012764:	b003      	add	sp, #12
 8012766:	bd90      	pop	{r4, r7, pc}
 8012768:	e000e100 	.word	0xe000e100
 801276c:	e000ed00 	.word	0xe000ed00

08012770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	1e5a      	subs	r2, r3, #1
 801277c:	2380      	movs	r3, #128	@ 0x80
 801277e:	045b      	lsls	r3, r3, #17
 8012780:	429a      	cmp	r2, r3
 8012782:	d301      	bcc.n	8012788 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012784:	2301      	movs	r3, #1
 8012786:	e010      	b.n	80127aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012788:	4b0a      	ldr	r3, [pc, #40]	@ (80127b4 <SysTick_Config+0x44>)
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	3a01      	subs	r2, #1
 801278e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012790:	2301      	movs	r3, #1
 8012792:	425b      	negs	r3, r3
 8012794:	2103      	movs	r1, #3
 8012796:	0018      	movs	r0, r3
 8012798:	f7ff ff7c 	bl	8012694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801279c:	4b05      	ldr	r3, [pc, #20]	@ (80127b4 <SysTick_Config+0x44>)
 801279e:	2200      	movs	r2, #0
 80127a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80127a2:	4b04      	ldr	r3, [pc, #16]	@ (80127b4 <SysTick_Config+0x44>)
 80127a4:	2207      	movs	r2, #7
 80127a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80127a8:	2300      	movs	r3, #0
}
 80127aa:	0018      	movs	r0, r3
 80127ac:	46bd      	mov	sp, r7
 80127ae:	b002      	add	sp, #8
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	46c0      	nop			@ (mov r8, r8)
 80127b4:	e000e010 	.word	0xe000e010

080127b8 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60b9      	str	r1, [r7, #8]
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	210f      	movs	r1, #15
 80127c4:	187b      	adds	r3, r7, r1
 80127c6:	1c02      	adds	r2, r0, #0
 80127c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80127ca:	68ba      	ldr	r2, [r7, #8]
 80127cc:	187b      	adds	r3, r7, r1
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	b25b      	sxtb	r3, r3
 80127d2:	0011      	movs	r1, r2
 80127d4:	0018      	movs	r0, r3
 80127d6:	f7ff ff5d 	bl	8012694 <__NVIC_SetPriority>
}
 80127da:	46c0      	nop			@ (mov r8, r8)
 80127dc:	46bd      	mov	sp, r7
 80127de:	b004      	add	sp, #16
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b082      	sub	sp, #8
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	0002      	movs	r2, r0
 80127ea:	1dfb      	adds	r3, r7, #7
 80127ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80127ee:	1dfb      	adds	r3, r7, #7
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	b25b      	sxtb	r3, r3
 80127f4:	0018      	movs	r0, r3
 80127f6:	f7ff ff11 	bl	801261c <__NVIC_EnableIRQ>
}
 80127fa:	46c0      	nop			@ (mov r8, r8)
 80127fc:	46bd      	mov	sp, r7
 80127fe:	b002      	add	sp, #8
 8012800:	bd80      	pop	{r7, pc}

08012802 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b082      	sub	sp, #8
 8012806:	af00      	add	r7, sp, #0
 8012808:	0002      	movs	r2, r0
 801280a:	1dfb      	adds	r3, r7, #7
 801280c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801280e:	1dfb      	adds	r3, r7, #7
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	b25b      	sxtb	r3, r3
 8012814:	0018      	movs	r0, r3
 8012816:	f7ff ff1b 	bl	8012650 <__NVIC_DisableIRQ>
}
 801281a:	46c0      	nop			@ (mov r8, r8)
 801281c:	46bd      	mov	sp, r7
 801281e:	b002      	add	sp, #8
 8012820:	bd80      	pop	{r7, pc}

08012822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b082      	sub	sp, #8
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	0018      	movs	r0, r3
 801282e:	f7ff ff9f 	bl	8012770 <SysTick_Config>
 8012832:	0003      	movs	r3, r0
}
 8012834:	0018      	movs	r0, r3
 8012836:	46bd      	mov	sp, r7
 8012838:	b002      	add	sp, #8
 801283a:	bd80      	pop	{r7, pc}

0801283c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801284a:	2301      	movs	r3, #1
 801284c:	e091      	b.n	8012972 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	001a      	movs	r2, r3
 8012854:	4b49      	ldr	r3, [pc, #292]	@ (801297c <HAL_DMA_Init+0x140>)
 8012856:	429a      	cmp	r2, r3
 8012858:	d810      	bhi.n	801287c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	4a48      	ldr	r2, [pc, #288]	@ (8012980 <HAL_DMA_Init+0x144>)
 8012860:	4694      	mov	ip, r2
 8012862:	4463      	add	r3, ip
 8012864:	2114      	movs	r1, #20
 8012866:	0018      	movs	r0, r3
 8012868:	f7ed fc56 	bl	8000118 <__udivsi3>
 801286c:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801286e:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a43      	ldr	r2, [pc, #268]	@ (8012984 <HAL_DMA_Init+0x148>)
 8012878:	641a      	str	r2, [r3, #64]	@ 0x40
 801287a:	e00f      	b.n	801289c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a41      	ldr	r2, [pc, #260]	@ (8012988 <HAL_DMA_Init+0x14c>)
 8012882:	4694      	mov	ip, r2
 8012884:	4463      	add	r3, ip
 8012886:	2114      	movs	r1, #20
 8012888:	0018      	movs	r0, r3
 801288a:	f7ed fc45 	bl	8000118 <__udivsi3>
 801288e:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8012890:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4a3c      	ldr	r2, [pc, #240]	@ (801298c <HAL_DMA_Init+0x150>)
 801289a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2225      	movs	r2, #37	@ 0x25
 80128a0:	2102      	movs	r1, #2
 80128a2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4938      	ldr	r1, [pc, #224]	@ (8012990 <HAL_DMA_Init+0x154>)
 80128b0:	400a      	ands	r2, r1
 80128b2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	6819      	ldr	r1, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	689a      	ldr	r2, [r3, #8]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	431a      	orrs	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	691b      	ldr	r3, [r3, #16]
 80128c8:	431a      	orrs	r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	431a      	orrs	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	699b      	ldr	r3, [r3, #24]
 80128d4:	431a      	orrs	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	69db      	ldr	r3, [r3, #28]
 80128da:	431a      	orrs	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6a1b      	ldr	r3, [r3, #32]
 80128e0:	431a      	orrs	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	430a      	orrs	r2, r1
 80128e8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	0018      	movs	r0, r3
 80128ee:	f000 fb4d 	bl	8012f8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	689a      	ldr	r2, [r3, #8]
 80128f6:	2380      	movs	r3, #128	@ 0x80
 80128f8:	01db      	lsls	r3, r3, #7
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d102      	bne.n	8012904 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801290c:	21ff      	movs	r1, #255	@ 0xff
 801290e:	400a      	ands	r2, r1
 8012910:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801291a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d011      	beq.n	8012948 <HAL_DMA_Init+0x10c>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	2b04      	cmp	r3, #4
 801292a:	d80d      	bhi.n	8012948 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	0018      	movs	r0, r3
 8012930:	f000 fb76 	bl	8013020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012944:	605a      	str	r2, [r3, #4]
 8012946:	e008      	b.n	801295a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2200      	movs	r2, #0
 8012958:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2225      	movs	r2, #37	@ 0x25
 8012964:	2101      	movs	r1, #1
 8012966:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2224      	movs	r2, #36	@ 0x24
 801296c:	2100      	movs	r1, #0
 801296e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012970:	2300      	movs	r3, #0
}
 8012972:	0018      	movs	r0, r3
 8012974:	46bd      	mov	sp, r7
 8012976:	b002      	add	sp, #8
 8012978:	bd80      	pop	{r7, pc}
 801297a:	46c0      	nop			@ (mov r8, r8)
 801297c:	40020407 	.word	0x40020407
 8012980:	bffdfff8 	.word	0xbffdfff8
 8012984:	40020000 	.word	0x40020000
 8012988:	bffdfbf8 	.word	0xbffdfbf8
 801298c:	40020400 	.word	0x40020400
 8012990:	ffff800f 	.word	0xffff800f

08012994 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d101      	bne.n	80129a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80129a2:	2301      	movs	r3, #1
 80129a4:	e07f      	b.n	8012aa6 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	2101      	movs	r1, #1
 80129b2:	438a      	bics	r2, r1
 80129b4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	001a      	movs	r2, r3
 80129bc:	4b3c      	ldr	r3, [pc, #240]	@ (8012ab0 <HAL_DMA_DeInit+0x11c>)
 80129be:	429a      	cmp	r2, r3
 80129c0:	d810      	bhi.n	80129e4 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a3b      	ldr	r2, [pc, #236]	@ (8012ab4 <HAL_DMA_DeInit+0x120>)
 80129c8:	4694      	mov	ip, r2
 80129ca:	4463      	add	r3, ip
 80129cc:	2114      	movs	r1, #20
 80129ce:	0018      	movs	r0, r3
 80129d0:	f7ed fba2 	bl	8000118 <__udivsi3>
 80129d4:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80129d6:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	4a36      	ldr	r2, [pc, #216]	@ (8012ab8 <HAL_DMA_DeInit+0x124>)
 80129e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80129e2:	e00f      	b.n	8012a04 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4a34      	ldr	r2, [pc, #208]	@ (8012abc <HAL_DMA_DeInit+0x128>)
 80129ea:	4694      	mov	ip, r2
 80129ec:	4463      	add	r3, ip
 80129ee:	2114      	movs	r1, #20
 80129f0:	0018      	movs	r0, r3
 80129f2:	f7ed fb91 	bl	8000118 <__udivsi3>
 80129f6:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80129f8:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4a2f      	ldr	r2, [pc, #188]	@ (8012ac0 <HAL_DMA_DeInit+0x12c>)
 8012a02:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a10:	221c      	movs	r2, #28
 8012a12:	401a      	ands	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a18:	2101      	movs	r1, #1
 8012a1a:	4091      	lsls	r1, r2
 8012a1c:	000a      	movs	r2, r1
 8012a1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	0018      	movs	r0, r3
 8012a24:	f000 fab2 	bl	8012f8c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012a38:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d010      	beq.n	8012a64 <HAL_DMA_DeInit+0xd0>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	2b04      	cmp	r3, #4
 8012a48:	d80c      	bhi.n	8012a64 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	f000 fae7 	bl	8013020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a56:	2200      	movs	r2, #0
 8012a58:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012a62:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2225      	movs	r2, #37	@ 0x25
 8012a98:	2100      	movs	r1, #0
 8012a9a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2224      	movs	r2, #36	@ 0x24
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012aa4:	2300      	movs	r3, #0
}
 8012aa6:	0018      	movs	r0, r3
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	b002      	add	sp, #8
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	46c0      	nop			@ (mov r8, r8)
 8012ab0:	40020407 	.word	0x40020407
 8012ab4:	bffdfff8 	.word	0xbffdfff8
 8012ab8:	40020000 	.word	0x40020000
 8012abc:	bffdfbf8 	.word	0xbffdfbf8
 8012ac0:	40020400 	.word	0x40020400

08012ac4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ad2:	2317      	movs	r3, #23
 8012ad4:	18fb      	adds	r3, r7, r3
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2224      	movs	r2, #36	@ 0x24
 8012ade:	5c9b      	ldrb	r3, [r3, r2]
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d101      	bne.n	8012ae8 <HAL_DMA_Start_IT+0x24>
 8012ae4:	2302      	movs	r3, #2
 8012ae6:	e06f      	b.n	8012bc8 <HAL_DMA_Start_IT+0x104>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2224      	movs	r2, #36	@ 0x24
 8012aec:	2101      	movs	r1, #1
 8012aee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2225      	movs	r2, #37	@ 0x25
 8012af4:	5c9b      	ldrb	r3, [r3, r2]
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d157      	bne.n	8012bac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2225      	movs	r2, #37	@ 0x25
 8012b00:	2102      	movs	r1, #2
 8012b02:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2101      	movs	r1, #1
 8012b16:	438a      	bics	r2, r1
 8012b18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	68b9      	ldr	r1, [r7, #8]
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f000 f9f7 	bl	8012f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d008      	beq.n	8012b40 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	210e      	movs	r1, #14
 8012b3a:	430a      	orrs	r2, r1
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	e00f      	b.n	8012b60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2104      	movs	r1, #4
 8012b4c:	438a      	bics	r2, r1
 8012b4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	681a      	ldr	r2, [r3, #0]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	210a      	movs	r1, #10
 8012b5c:	430a      	orrs	r2, r1
 8012b5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	2380      	movs	r3, #128	@ 0x80
 8012b68:	025b      	lsls	r3, r3, #9
 8012b6a:	4013      	ands	r3, r2
 8012b6c:	d008      	beq.n	8012b80 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b78:	2180      	movs	r1, #128	@ 0x80
 8012b7a:	0049      	lsls	r1, r1, #1
 8012b7c:	430a      	orrs	r2, r1
 8012b7e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d008      	beq.n	8012b9a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b92:	2180      	movs	r1, #128	@ 0x80
 8012b94:	0049      	lsls	r1, r1, #1
 8012b96:	430a      	orrs	r2, r1
 8012b98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2101      	movs	r1, #1
 8012ba6:	430a      	orrs	r2, r1
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	e00a      	b.n	8012bc2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2280      	movs	r2, #128	@ 0x80
 8012bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2224      	movs	r2, #36	@ 0x24
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8012bba:	2317      	movs	r3, #23
 8012bbc:	18fb      	adds	r3, r7, r3
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012bc2:	2317      	movs	r3, #23
 8012bc4:	18fb      	adds	r3, r7, r3
 8012bc6:	781b      	ldrb	r3, [r3, #0]
}
 8012bc8:	0018      	movs	r0, r3
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	b006      	add	sp, #24
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d101      	bne.n	8012be2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8012bde:	2301      	movs	r3, #1
 8012be0:	e04f      	b.n	8012c82 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2225      	movs	r2, #37	@ 0x25
 8012be6:	5c9b      	ldrb	r3, [r3, r2]
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	2b02      	cmp	r3, #2
 8012bec:	d008      	beq.n	8012c00 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2204      	movs	r2, #4
 8012bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2224      	movs	r2, #36	@ 0x24
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	e040      	b.n	8012c82 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	210e      	movs	r1, #14
 8012c0c:	438a      	bics	r2, r1
 8012c0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c1a:	491c      	ldr	r1, [pc, #112]	@ (8012c8c <HAL_DMA_Abort+0xbc>)
 8012c1c:	400a      	ands	r2, r1
 8012c1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	438a      	bics	r2, r1
 8012c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c34:	221c      	movs	r2, #28
 8012c36:	401a      	ands	r2, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c3c:	2101      	movs	r1, #1
 8012c3e:	4091      	lsls	r1, r2
 8012c40:	000a      	movs	r2, r1
 8012c42:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012c4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00c      	beq.n	8012c70 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c60:	490a      	ldr	r1, [pc, #40]	@ (8012c8c <HAL_DMA_Abort+0xbc>)
 8012c62:	400a      	ands	r2, r1
 8012c64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012c6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2225      	movs	r2, #37	@ 0x25
 8012c74:	2101      	movs	r1, #1
 8012c76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2224      	movs	r2, #36	@ 0x24
 8012c7c:	2100      	movs	r1, #0
 8012c7e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	0018      	movs	r0, r3
 8012c84:	46bd      	mov	sp, r7
 8012c86:	b002      	add	sp, #8
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	46c0      	nop			@ (mov r8, r8)
 8012c8c:	fffffeff 	.word	0xfffffeff

08012c90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c98:	210f      	movs	r1, #15
 8012c9a:	187b      	adds	r3, r7, r1
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2225      	movs	r2, #37	@ 0x25
 8012ca4:	5c9b      	ldrb	r3, [r3, r2]
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	2b02      	cmp	r3, #2
 8012caa:	d006      	beq.n	8012cba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2204      	movs	r2, #4
 8012cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012cb2:	187b      	adds	r3, r7, r1
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	701a      	strb	r2, [r3, #0]
 8012cb8:	e048      	b.n	8012d4c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	210e      	movs	r1, #14
 8012cc6:	438a      	bics	r2, r1
 8012cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	438a      	bics	r2, r1
 8012cd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ce4:	491d      	ldr	r1, [pc, #116]	@ (8012d5c <HAL_DMA_Abort_IT+0xcc>)
 8012ce6:	400a      	ands	r2, r1
 8012ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cee:	221c      	movs	r2, #28
 8012cf0:	401a      	ands	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	4091      	lsls	r1, r2
 8012cfa:	000a      	movs	r2, r1
 8012cfc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012d06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00c      	beq.n	8012d2a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d1a:	4910      	ldr	r1, [pc, #64]	@ (8012d5c <HAL_DMA_Abort_IT+0xcc>)
 8012d1c:	400a      	ands	r2, r1
 8012d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012d28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2225      	movs	r2, #37	@ 0x25
 8012d2e:	2101      	movs	r1, #1
 8012d30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2224      	movs	r2, #36	@ 0x24
 8012d36:	2100      	movs	r1, #0
 8012d38:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d004      	beq.n	8012d4c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	0010      	movs	r0, r2
 8012d4a:	4798      	blx	r3
    }
  }
  return status;
 8012d4c:	230f      	movs	r3, #15
 8012d4e:	18fb      	adds	r3, r7, r3
 8012d50:	781b      	ldrb	r3, [r3, #0]
}
 8012d52:	0018      	movs	r0, r3
 8012d54:	46bd      	mov	sp, r7
 8012d56:	b004      	add	sp, #16
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	46c0      	nop			@ (mov r8, r8)
 8012d5c:	fffffeff 	.word	0xfffffeff

08012d60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d7c:	221c      	movs	r2, #28
 8012d7e:	4013      	ands	r3, r2
 8012d80:	2204      	movs	r2, #4
 8012d82:	409a      	lsls	r2, r3
 8012d84:	0013      	movs	r3, r2
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	4013      	ands	r3, r2
 8012d8a:	d026      	beq.n	8012dda <HAL_DMA_IRQHandler+0x7a>
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	2204      	movs	r2, #4
 8012d90:	4013      	ands	r3, r2
 8012d92:	d022      	beq.n	8012dda <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2220      	movs	r2, #32
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	d107      	bne.n	8012db0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2104      	movs	r1, #4
 8012dac:	438a      	bics	r2, r1
 8012dae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012db4:	221c      	movs	r2, #28
 8012db6:	401a      	ands	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dbc:	2104      	movs	r1, #4
 8012dbe:	4091      	lsls	r1, r2
 8012dc0:	000a      	movs	r2, r1
 8012dc2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d100      	bne.n	8012dce <HAL_DMA_IRQHandler+0x6e>
 8012dcc:	e080      	b.n	8012ed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	0010      	movs	r0, r2
 8012dd6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8012dd8:	e07a      	b.n	8012ed0 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dde:	221c      	movs	r2, #28
 8012de0:	4013      	ands	r3, r2
 8012de2:	2202      	movs	r2, #2
 8012de4:	409a      	lsls	r2, r3
 8012de6:	0013      	movs	r3, r2
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	4013      	ands	r3, r2
 8012dec:	d03c      	beq.n	8012e68 <HAL_DMA_IRQHandler+0x108>
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2202      	movs	r2, #2
 8012df2:	4013      	ands	r3, r2
 8012df4:	d038      	beq.n	8012e68 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2220      	movs	r2, #32
 8012dfe:	4013      	ands	r3, r2
 8012e00:	d10b      	bne.n	8012e1a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	210a      	movs	r1, #10
 8012e0e:	438a      	bics	r2, r1
 8012e10:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2225      	movs	r2, #37	@ 0x25
 8012e16:	2101      	movs	r1, #1
 8012e18:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	001a      	movs	r2, r3
 8012e20:	4b2e      	ldr	r3, [pc, #184]	@ (8012edc <HAL_DMA_IRQHandler+0x17c>)
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d909      	bls.n	8012e3a <HAL_DMA_IRQHandler+0xda>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e2a:	221c      	movs	r2, #28
 8012e2c:	401a      	ands	r2, r3
 8012e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8012ee0 <HAL_DMA_IRQHandler+0x180>)
 8012e30:	2102      	movs	r1, #2
 8012e32:	4091      	lsls	r1, r2
 8012e34:	000a      	movs	r2, r1
 8012e36:	605a      	str	r2, [r3, #4]
 8012e38:	e008      	b.n	8012e4c <HAL_DMA_IRQHandler+0xec>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e3e:	221c      	movs	r2, #28
 8012e40:	401a      	ands	r2, r3
 8012e42:	4b28      	ldr	r3, [pc, #160]	@ (8012ee4 <HAL_DMA_IRQHandler+0x184>)
 8012e44:	2102      	movs	r1, #2
 8012e46:	4091      	lsls	r1, r2
 8012e48:	000a      	movs	r2, r1
 8012e4a:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2224      	movs	r2, #36	@ 0x24
 8012e50:	2100      	movs	r1, #0
 8012e52:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d039      	beq.n	8012ed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e60:	687a      	ldr	r2, [r7, #4]
 8012e62:	0010      	movs	r0, r2
 8012e64:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8012e66:	e033      	b.n	8012ed0 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e6c:	221c      	movs	r2, #28
 8012e6e:	4013      	ands	r3, r2
 8012e70:	2208      	movs	r2, #8
 8012e72:	409a      	lsls	r2, r3
 8012e74:	0013      	movs	r3, r2
 8012e76:	68fa      	ldr	r2, [r7, #12]
 8012e78:	4013      	ands	r3, r2
 8012e7a:	d02a      	beq.n	8012ed2 <HAL_DMA_IRQHandler+0x172>
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	2208      	movs	r2, #8
 8012e80:	4013      	ands	r3, r2
 8012e82:	d026      	beq.n	8012ed2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	210e      	movs	r1, #14
 8012e90:	438a      	bics	r2, r1
 8012e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e98:	221c      	movs	r2, #28
 8012e9a:	401a      	ands	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ea0:	2101      	movs	r1, #1
 8012ea2:	4091      	lsls	r1, r2
 8012ea4:	000a      	movs	r2, r1
 8012ea6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2225      	movs	r2, #37	@ 0x25
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2224      	movs	r2, #36	@ 0x24
 8012eba:	2100      	movs	r1, #0
 8012ebc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d005      	beq.n	8012ed2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	0010      	movs	r0, r2
 8012ece:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012ed0:	46c0      	nop			@ (mov r8, r8)
 8012ed2:	46c0      	nop			@ (mov r8, r8)
}
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	b004      	add	sp, #16
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	46c0      	nop			@ (mov r8, r8)
 8012edc:	40020080 	.word	0x40020080
 8012ee0:	40020400 	.word	0x40020400
 8012ee4:	40020000 	.word	0x40020000

08012ee8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2225      	movs	r2, #37	@ 0x25
 8012ef4:	5c9b      	ldrb	r3, [r3, r2]
 8012ef6:	b2db      	uxtb	r3, r3
}
 8012ef8:	0018      	movs	r0, r3
 8012efa:	46bd      	mov	sp, r7
 8012efc:	b002      	add	sp, #8
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8012f0c:	0018      	movs	r0, r3
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	b002      	add	sp, #8
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
 8012f20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f26:	68fa      	ldr	r2, [r7, #12]
 8012f28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012f2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d004      	beq.n	8012f3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012f3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f42:	221c      	movs	r2, #28
 8012f44:	401a      	ands	r2, r3
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f4a:	2101      	movs	r1, #1
 8012f4c:	4091      	lsls	r1, r2
 8012f4e:	000a      	movs	r2, r1
 8012f50:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	683a      	ldr	r2, [r7, #0]
 8012f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	689b      	ldr	r3, [r3, #8]
 8012f5e:	2b10      	cmp	r3, #16
 8012f60:	d108      	bne.n	8012f74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	68ba      	ldr	r2, [r7, #8]
 8012f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012f72:	e007      	b.n	8012f84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	68ba      	ldr	r2, [r7, #8]
 8012f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	60da      	str	r2, [r3, #12]
}
 8012f84:	46c0      	nop			@ (mov r8, r8)
 8012f86:	46bd      	mov	sp, r7
 8012f88:	b004      	add	sp, #16
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	001a      	movs	r2, r3
 8012f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8013010 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d814      	bhi.n	8012fca <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fa4:	089b      	lsrs	r3, r3, #2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8013014 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8012faa:	189a      	adds	r2, r3, r2
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	001a      	movs	r2, r3
 8012fb6:	23ff      	movs	r3, #255	@ 0xff
 8012fb8:	4013      	ands	r3, r2
 8012fba:	3b08      	subs	r3, #8
 8012fbc:	2114      	movs	r1, #20
 8012fbe:	0018      	movs	r0, r3
 8012fc0:	f7ed f8aa 	bl	8000118 <__udivsi3>
 8012fc4:	0003      	movs	r3, r0
 8012fc6:	60fb      	str	r3, [r7, #12]
 8012fc8:	e014      	b.n	8012ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fce:	089b      	lsrs	r3, r3, #2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4a11      	ldr	r2, [pc, #68]	@ (8013018 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8012fd4:	189a      	adds	r2, r3, r2
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	001a      	movs	r2, r3
 8012fe0:	23ff      	movs	r3, #255	@ 0xff
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	3b08      	subs	r3, #8
 8012fe6:	2114      	movs	r1, #20
 8012fe8:	0018      	movs	r0, r3
 8012fea:	f7ed f895 	bl	8000118 <__udivsi3>
 8012fee:	0003      	movs	r3, r0
 8012ff0:	3307      	adds	r3, #7
 8012ff2:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4a09      	ldr	r2, [pc, #36]	@ (801301c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8012ff8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	221f      	movs	r2, #31
 8012ffe:	4013      	ands	r3, r2
 8013000:	2201      	movs	r2, #1
 8013002:	409a      	lsls	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8013008:	46c0      	nop			@ (mov r8, r8)
 801300a:	46bd      	mov	sp, r7
 801300c:	b004      	add	sp, #16
 801300e:	bd80      	pop	{r7, pc}
 8013010:	40020407 	.word	0x40020407
 8013014:	40020800 	.word	0x40020800
 8013018:	4002081c 	.word	0x4002081c
 801301c:	40020880 	.word	0x40020880

08013020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b084      	sub	sp, #16
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	22ff      	movs	r2, #255	@ 0xff
 801302e:	4013      	ands	r3, r2
 8013030:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	4a0a      	ldr	r2, [pc, #40]	@ (8013060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013036:	4694      	mov	ip, r2
 8013038:	4463      	add	r3, ip
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	001a      	movs	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4a07      	ldr	r2, [pc, #28]	@ (8013064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013046:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	3b01      	subs	r3, #1
 801304c:	2203      	movs	r2, #3
 801304e:	4013      	ands	r3, r2
 8013050:	2201      	movs	r2, #1
 8013052:	409a      	lsls	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8013058:	46c0      	nop			@ (mov r8, r8)
 801305a:	46bd      	mov	sp, r7
 801305c:	b004      	add	sp, #16
 801305e:	bd80      	pop	{r7, pc}
 8013060:	1000823f 	.word	0x1000823f
 8013064:	40020940 	.word	0x40020940

08013068 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013068:	b5b0      	push	{r4, r5, r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	603a      	str	r2, [r7, #0]
 8013074:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013076:	4b21      	ldr	r3, [pc, #132]	@ (80130fc <HAL_FLASH_Program+0x94>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	2b01      	cmp	r3, #1
 801307c:	d101      	bne.n	8013082 <HAL_FLASH_Program+0x1a>
 801307e:	2302      	movs	r3, #2
 8013080:	e038      	b.n	80130f4 <HAL_FLASH_Program+0x8c>
 8013082:	4b1e      	ldr	r3, [pc, #120]	@ (80130fc <HAL_FLASH_Program+0x94>)
 8013084:	2201      	movs	r2, #1
 8013086:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013088:	4b1c      	ldr	r3, [pc, #112]	@ (80130fc <HAL_FLASH_Program+0x94>)
 801308a:	2200      	movs	r2, #0
 801308c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801308e:	2517      	movs	r5, #23
 8013090:	197c      	adds	r4, r7, r5
 8013092:	23fa      	movs	r3, #250	@ 0xfa
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	0018      	movs	r0, r3
 8013098:	f000 f874 	bl	8013184 <FLASH_WaitForLastOperation>
 801309c:	0003      	movs	r3, r0
 801309e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80130a0:	197b      	adds	r3, r7, r5
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d11f      	bne.n	80130e8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d106      	bne.n	80130bc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80130ae:	683a      	ldr	r2, [r7, #0]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	68b9      	ldr	r1, [r7, #8]
 80130b4:	0008      	movs	r0, r1
 80130b6:	f000 f8b3 	bl	8013220 <FLASH_Program_DoubleWord>
 80130ba:	e005      	b.n	80130c8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	0011      	movs	r1, r2
 80130c2:	0018      	movs	r0, r3
 80130c4:	f008 f904 	bl	801b2d0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80130c8:	2317      	movs	r3, #23
 80130ca:	18fc      	adds	r4, r7, r3
 80130cc:	23fa      	movs	r3, #250	@ 0xfa
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	0018      	movs	r0, r3
 80130d2:	f000 f857 	bl	8013184 <FLASH_WaitForLastOperation>
 80130d6:	0003      	movs	r3, r0
 80130d8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80130da:	4b09      	ldr	r3, [pc, #36]	@ (8013100 <HAL_FLASH_Program+0x98>)
 80130dc:	695a      	ldr	r2, [r3, #20]
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	43d9      	mvns	r1, r3
 80130e2:	4b07      	ldr	r3, [pc, #28]	@ (8013100 <HAL_FLASH_Program+0x98>)
 80130e4:	400a      	ands	r2, r1
 80130e6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80130e8:	4b04      	ldr	r3, [pc, #16]	@ (80130fc <HAL_FLASH_Program+0x94>)
 80130ea:	2200      	movs	r2, #0
 80130ec:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80130ee:	2317      	movs	r3, #23
 80130f0:	18fb      	adds	r3, r7, r3
 80130f2:	781b      	ldrb	r3, [r3, #0]
}
 80130f4:	0018      	movs	r0, r3
 80130f6:	46bd      	mov	sp, r7
 80130f8:	b006      	add	sp, #24
 80130fa:	bdb0      	pop	{r4, r5, r7, pc}
 80130fc:	2000118c 	.word	0x2000118c
 8013100:	40022000 	.word	0x40022000

08013104 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801310a:	1dfb      	adds	r3, r7, #7
 801310c:	2200      	movs	r2, #0
 801310e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013110:	4b0b      	ldr	r3, [pc, #44]	@ (8013140 <HAL_FLASH_Unlock+0x3c>)
 8013112:	695b      	ldr	r3, [r3, #20]
 8013114:	2b00      	cmp	r3, #0
 8013116:	da0c      	bge.n	8013132 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013118:	4b09      	ldr	r3, [pc, #36]	@ (8013140 <HAL_FLASH_Unlock+0x3c>)
 801311a:	4a0a      	ldr	r2, [pc, #40]	@ (8013144 <HAL_FLASH_Unlock+0x40>)
 801311c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801311e:	4b08      	ldr	r3, [pc, #32]	@ (8013140 <HAL_FLASH_Unlock+0x3c>)
 8013120:	4a09      	ldr	r2, [pc, #36]	@ (8013148 <HAL_FLASH_Unlock+0x44>)
 8013122:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013124:	4b06      	ldr	r3, [pc, #24]	@ (8013140 <HAL_FLASH_Unlock+0x3c>)
 8013126:	695b      	ldr	r3, [r3, #20]
 8013128:	2b00      	cmp	r3, #0
 801312a:	da02      	bge.n	8013132 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 801312c:	1dfb      	adds	r3, r7, #7
 801312e:	2201      	movs	r2, #1
 8013130:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8013132:	1dfb      	adds	r3, r7, #7
 8013134:	781b      	ldrb	r3, [r3, #0]
}
 8013136:	0018      	movs	r0, r3
 8013138:	46bd      	mov	sp, r7
 801313a:	b002      	add	sp, #8
 801313c:	bd80      	pop	{r7, pc}
 801313e:	46c0      	nop			@ (mov r8, r8)
 8013140:	40022000 	.word	0x40022000
 8013144:	45670123 	.word	0x45670123
 8013148:	cdef89ab 	.word	0xcdef89ab

0801314c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8013152:	1dfb      	adds	r3, r7, #7
 8013154:	2201      	movs	r2, #1
 8013156:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8013158:	4b09      	ldr	r3, [pc, #36]	@ (8013180 <HAL_FLASH_Lock+0x34>)
 801315a:	695a      	ldr	r2, [r3, #20]
 801315c:	4b08      	ldr	r3, [pc, #32]	@ (8013180 <HAL_FLASH_Lock+0x34>)
 801315e:	2180      	movs	r1, #128	@ 0x80
 8013160:	0609      	lsls	r1, r1, #24
 8013162:	430a      	orrs	r2, r1
 8013164:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8013166:	4b06      	ldr	r3, [pc, #24]	@ (8013180 <HAL_FLASH_Lock+0x34>)
 8013168:	695b      	ldr	r3, [r3, #20]
 801316a:	2b00      	cmp	r3, #0
 801316c:	da02      	bge.n	8013174 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 801316e:	1dfb      	adds	r3, r7, #7
 8013170:	2200      	movs	r2, #0
 8013172:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013174:	1dfb      	adds	r3, r7, #7
 8013176:	781b      	ldrb	r3, [r3, #0]
}
 8013178:	0018      	movs	r0, r3
 801317a:	46bd      	mov	sp, r7
 801317c:	b002      	add	sp, #8
 801317e:	bd80      	pop	{r7, pc}
 8013180:	40022000 	.word	0x40022000

08013184 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 801318c:	f7fe f8ce 	bl	801132c <HAL_GetTick>
 8013190:	0002      	movs	r2, r0
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	189b      	adds	r3, r3, r2
 8013196:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8013198:	2380      	movs	r3, #128	@ 0x80
 801319a:	025b      	lsls	r3, r3, #9
 801319c:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 801319e:	e007      	b.n	80131b0 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80131a0:	f7fe f8c4 	bl	801132c <HAL_GetTick>
 80131a4:	0002      	movs	r2, r0
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d801      	bhi.n	80131b0 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80131ac:	2303      	movs	r3, #3
 80131ae:	e02a      	b.n	8013206 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80131b0:	4b17      	ldr	r3, [pc, #92]	@ (8013210 <FLASH_WaitForLastOperation+0x8c>)
 80131b2:	691b      	ldr	r3, [r3, #16]
 80131b4:	68ba      	ldr	r2, [r7, #8]
 80131b6:	4013      	ands	r3, r2
 80131b8:	d1f2      	bne.n	80131a0 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80131ba:	4b15      	ldr	r3, [pc, #84]	@ (8013210 <FLASH_WaitForLastOperation+0x8c>)
 80131bc:	691b      	ldr	r3, [r3, #16]
 80131be:	4a15      	ldr	r2, [pc, #84]	@ (8013214 <FLASH_WaitForLastOperation+0x90>)
 80131c0:	4013      	ands	r3, r2
 80131c2:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80131c4:	4b12      	ldr	r3, [pc, #72]	@ (8013210 <FLASH_WaitForLastOperation+0x8c>)
 80131c6:	4a14      	ldr	r2, [pc, #80]	@ (8013218 <FLASH_WaitForLastOperation+0x94>)
 80131c8:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d004      	beq.n	80131da <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80131d0:	4b12      	ldr	r3, [pc, #72]	@ (801321c <FLASH_WaitForLastOperation+0x98>)
 80131d2:	68ba      	ldr	r2, [r7, #8]
 80131d4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80131d6:	2301      	movs	r3, #1
 80131d8:	e015      	b.n	8013206 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80131da:	f7fe f8a7 	bl	801132c <HAL_GetTick>
 80131de:	0002      	movs	r2, r0
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	189b      	adds	r3, r3, r2
 80131e4:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80131e6:	e007      	b.n	80131f8 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80131e8:	f7fe f8a0 	bl	801132c <HAL_GetTick>
 80131ec:	0002      	movs	r2, r0
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d801      	bhi.n	80131f8 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80131f4:	2303      	movs	r3, #3
 80131f6:	e006      	b.n	8013206 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80131f8:	4b05      	ldr	r3, [pc, #20]	@ (8013210 <FLASH_WaitForLastOperation+0x8c>)
 80131fa:	691a      	ldr	r2, [r3, #16]
 80131fc:	2380      	movs	r3, #128	@ 0x80
 80131fe:	02db      	lsls	r3, r3, #11
 8013200:	4013      	ands	r3, r2
 8013202:	d1f1      	bne.n	80131e8 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8013204:	2300      	movs	r3, #0
}
 8013206:	0018      	movs	r0, r3
 8013208:	46bd      	mov	sp, r7
 801320a:	b004      	add	sp, #16
 801320c:	bd80      	pop	{r7, pc}
 801320e:	46c0      	nop			@ (mov r8, r8)
 8013210:	40022000 	.word	0x40022000
 8013214:	000083fa 	.word	0x000083fa
 8013218:	000083fb 	.word	0x000083fb
 801321c:	2000118c 	.word	0x2000118c

08013220 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013220:	b5b0      	push	{r4, r5, r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	603a      	str	r2, [r7, #0]
 801322a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801322c:	4b0b      	ldr	r3, [pc, #44]	@ (801325c <FLASH_Program_DoubleWord+0x3c>)
 801322e:	695a      	ldr	r2, [r3, #20]
 8013230:	4b0a      	ldr	r3, [pc, #40]	@ (801325c <FLASH_Program_DoubleWord+0x3c>)
 8013232:	2101      	movs	r1, #1
 8013234:	430a      	orrs	r2, r1
 8013236:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	683a      	ldr	r2, [r7, #0]
 801323c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801323e:	f3bf 8f6f 	isb	sy
}
 8013242:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	001c      	movs	r4, r3
 8013248:	2300      	movs	r3, #0
 801324a:	001d      	movs	r5, r3
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	3304      	adds	r3, #4
 8013250:	0022      	movs	r2, r4
 8013252:	601a      	str	r2, [r3, #0]
}
 8013254:	46c0      	nop			@ (mov r8, r8)
 8013256:	46bd      	mov	sp, r7
 8013258:	b004      	add	sp, #16
 801325a:	bdb0      	pop	{r4, r5, r7, pc}
 801325c:	40022000 	.word	0x40022000

08013260 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8013260:	b5b0      	push	{r4, r5, r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801326a:	4b32      	ldr	r3, [pc, #200]	@ (8013334 <HAL_FLASHEx_Erase+0xd4>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2b01      	cmp	r3, #1
 8013270:	d101      	bne.n	8013276 <HAL_FLASHEx_Erase+0x16>
 8013272:	2302      	movs	r3, #2
 8013274:	e059      	b.n	801332a <HAL_FLASHEx_Erase+0xca>
 8013276:	4b2f      	ldr	r3, [pc, #188]	@ (8013334 <HAL_FLASHEx_Erase+0xd4>)
 8013278:	2201      	movs	r2, #1
 801327a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801327c:	4b2d      	ldr	r3, [pc, #180]	@ (8013334 <HAL_FLASHEx_Erase+0xd4>)
 801327e:	2200      	movs	r2, #0
 8013280:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013282:	250f      	movs	r5, #15
 8013284:	197c      	adds	r4, r7, r5
 8013286:	23fa      	movs	r3, #250	@ 0xfa
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	0018      	movs	r0, r3
 801328c:	f7ff ff7a 	bl	8013184 <FLASH_WaitForLastOperation>
 8013290:	0003      	movs	r3, r0
 8013292:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013294:	002c      	movs	r4, r5
 8013296:	193b      	adds	r3, r7, r4
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d13f      	bne.n	801331e <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2201      	movs	r2, #1
 80132a2:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b04      	cmp	r3, #4
 80132aa:	d10a      	bne.n	80132c2 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80132ac:	f000 f846 	bl	801333c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80132b0:	193c      	adds	r4, r7, r4
 80132b2:	23fa      	movs	r3, #250	@ 0xfa
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	0018      	movs	r0, r3
 80132b8:	f7ff ff64 	bl	8013184 <FLASH_WaitForLastOperation>
 80132bc:	0003      	movs	r3, r0
 80132be:	7023      	strb	r3, [r4, #0]
 80132c0:	e02d      	b.n	801331e <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2201      	movs	r2, #1
 80132c6:	4252      	negs	r2, r2
 80132c8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	689b      	ldr	r3, [r3, #8]
 80132ce:	60bb      	str	r3, [r7, #8]
 80132d0:	e017      	b.n	8013302 <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	0018      	movs	r0, r3
 80132d6:	f000 f841 	bl	801335c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80132da:	250f      	movs	r5, #15
 80132dc:	197c      	adds	r4, r7, r5
 80132de:	23fa      	movs	r3, #250	@ 0xfa
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	0018      	movs	r0, r3
 80132e4:	f7ff ff4e 	bl	8013184 <FLASH_WaitForLastOperation>
 80132e8:	0003      	movs	r3, r0
 80132ea:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80132ec:	197b      	adds	r3, r7, r5
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	601a      	str	r2, [r3, #0]
          break;
 80132fa:	e00a      	b.n	8013312 <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	3301      	adds	r3, #1
 8013300:	60bb      	str	r3, [r7, #8]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	689a      	ldr	r2, [r3, #8]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	18d3      	adds	r3, r2, r3
 801330c:	68ba      	ldr	r2, [r7, #8]
 801330e:	429a      	cmp	r2, r3
 8013310:	d3df      	bcc.n	80132d2 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8013312:	4b09      	ldr	r3, [pc, #36]	@ (8013338 <HAL_FLASHEx_Erase+0xd8>)
 8013314:	695a      	ldr	r2, [r3, #20]
 8013316:	4b08      	ldr	r3, [pc, #32]	@ (8013338 <HAL_FLASHEx_Erase+0xd8>)
 8013318:	2102      	movs	r1, #2
 801331a:	438a      	bics	r2, r1
 801331c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801331e:	4b05      	ldr	r3, [pc, #20]	@ (8013334 <HAL_FLASHEx_Erase+0xd4>)
 8013320:	2200      	movs	r2, #0
 8013322:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8013324:	230f      	movs	r3, #15
 8013326:	18fb      	adds	r3, r7, r3
 8013328:	781b      	ldrb	r3, [r3, #0]
}
 801332a:	0018      	movs	r0, r3
 801332c:	46bd      	mov	sp, r7
 801332e:	b004      	add	sp, #16
 8013330:	bdb0      	pop	{r4, r5, r7, pc}
 8013332:	46c0      	nop			@ (mov r8, r8)
 8013334:	2000118c 	.word	0x2000118c
 8013338:	40022000 	.word	0x40022000

0801333c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 8013340:	4b04      	ldr	r3, [pc, #16]	@ (8013354 <FLASH_MassErase+0x18>)
 8013342:	695a      	ldr	r2, [r3, #20]
 8013344:	4b03      	ldr	r3, [pc, #12]	@ (8013354 <FLASH_MassErase+0x18>)
 8013346:	4904      	ldr	r1, [pc, #16]	@ (8013358 <FLASH_MassErase+0x1c>)
 8013348:	430a      	orrs	r2, r1
 801334a:	615a      	str	r2, [r3, #20]
}
 801334c:	46c0      	nop			@ (mov r8, r8)
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	46c0      	nop			@ (mov r8, r8)
 8013354:	40022000 	.word	0x40022000
 8013358:	00010004 	.word	0x00010004

0801335c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8013364:	4b08      	ldr	r3, [pc, #32]	@ (8013388 <FLASH_PageErase+0x2c>)
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	4a08      	ldr	r2, [pc, #32]	@ (801338c <FLASH_PageErase+0x30>)
 801336a:	4013      	ands	r3, r2
 801336c:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	00da      	lsls	r2, r3, #3
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	431a      	orrs	r2, r3
 8013376:	4b04      	ldr	r3, [pc, #16]	@ (8013388 <FLASH_PageErase+0x2c>)
 8013378:	4905      	ldr	r1, [pc, #20]	@ (8013390 <FLASH_PageErase+0x34>)
 801337a:	430a      	orrs	r2, r1
 801337c:	615a      	str	r2, [r3, #20]
}
 801337e:	46c0      	nop			@ (mov r8, r8)
 8013380:	46bd      	mov	sp, r7
 8013382:	b004      	add	sp, #16
 8013384:	bd80      	pop	{r7, pc}
 8013386:	46c0      	nop			@ (mov r8, r8)
 8013388:	40022000 	.word	0x40022000
 801338c:	fffffc07 	.word	0xfffffc07
 8013390:	00010002 	.word	0x00010002

08013394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801339e:	2300      	movs	r3, #0
 80133a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80133a2:	e153      	b.n	801364c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2101      	movs	r1, #1
 80133aa:	697a      	ldr	r2, [r7, #20]
 80133ac:	4091      	lsls	r1, r2
 80133ae:	000a      	movs	r2, r1
 80133b0:	4013      	ands	r3, r2
 80133b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d100      	bne.n	80133bc <HAL_GPIO_Init+0x28>
 80133ba:	e144      	b.n	8013646 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	2203      	movs	r2, #3
 80133c2:	4013      	ands	r3, r2
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d005      	beq.n	80133d4 <HAL_GPIO_Init+0x40>
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	2203      	movs	r2, #3
 80133ce:	4013      	ands	r3, r2
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d130      	bne.n	8013436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	689b      	ldr	r3, [r3, #8]
 80133d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	005b      	lsls	r3, r3, #1
 80133de:	2203      	movs	r2, #3
 80133e0:	409a      	lsls	r2, r3
 80133e2:	0013      	movs	r3, r2
 80133e4:	43da      	mvns	r2, r3
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	4013      	ands	r3, r2
 80133ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	68da      	ldr	r2, [r3, #12]
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	409a      	lsls	r2, r3
 80133f6:	0013      	movs	r3, r2
 80133f8:	693a      	ldr	r2, [r7, #16]
 80133fa:	4313      	orrs	r3, r2
 80133fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801340a:	2201      	movs	r2, #1
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	409a      	lsls	r2, r3
 8013410:	0013      	movs	r3, r2
 8013412:	43da      	mvns	r2, r3
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	4013      	ands	r3, r2
 8013418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	091b      	lsrs	r3, r3, #4
 8013420:	2201      	movs	r2, #1
 8013422:	401a      	ands	r2, r3
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	409a      	lsls	r2, r3
 8013428:	0013      	movs	r3, r2
 801342a:	693a      	ldr	r2, [r7, #16]
 801342c:	4313      	orrs	r3, r2
 801342e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	693a      	ldr	r2, [r7, #16]
 8013434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	2203      	movs	r2, #3
 801343c:	4013      	ands	r3, r2
 801343e:	2b03      	cmp	r3, #3
 8013440:	d017      	beq.n	8013472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	2203      	movs	r2, #3
 801344e:	409a      	lsls	r2, r3
 8013450:	0013      	movs	r3, r2
 8013452:	43da      	mvns	r2, r3
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	4013      	ands	r3, r2
 8013458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	689a      	ldr	r2, [r3, #8]
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	409a      	lsls	r2, r3
 8013464:	0013      	movs	r3, r2
 8013466:	693a      	ldr	r2, [r7, #16]
 8013468:	4313      	orrs	r3, r2
 801346a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	693a      	ldr	r2, [r7, #16]
 8013470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	2203      	movs	r2, #3
 8013478:	4013      	ands	r3, r2
 801347a:	2b02      	cmp	r3, #2
 801347c:	d123      	bne.n	80134c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	08da      	lsrs	r2, r3, #3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	3208      	adds	r2, #8
 8013486:	0092      	lsls	r2, r2, #2
 8013488:	58d3      	ldr	r3, [r2, r3]
 801348a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	2207      	movs	r2, #7
 8013490:	4013      	ands	r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	220f      	movs	r2, #15
 8013496:	409a      	lsls	r2, r3
 8013498:	0013      	movs	r3, r2
 801349a:	43da      	mvns	r2, r3
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	4013      	ands	r3, r2
 80134a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	691a      	ldr	r2, [r3, #16]
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	2107      	movs	r1, #7
 80134aa:	400b      	ands	r3, r1
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	409a      	lsls	r2, r3
 80134b0:	0013      	movs	r3, r2
 80134b2:	693a      	ldr	r2, [r7, #16]
 80134b4:	4313      	orrs	r3, r2
 80134b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	08da      	lsrs	r2, r3, #3
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	3208      	adds	r2, #8
 80134c0:	0092      	lsls	r2, r2, #2
 80134c2:	6939      	ldr	r1, [r7, #16]
 80134c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	2203      	movs	r2, #3
 80134d2:	409a      	lsls	r2, r3
 80134d4:	0013      	movs	r3, r2
 80134d6:	43da      	mvns	r2, r3
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	4013      	ands	r3, r2
 80134dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	2203      	movs	r2, #3
 80134e4:	401a      	ands	r2, r3
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	005b      	lsls	r3, r3, #1
 80134ea:	409a      	lsls	r2, r3
 80134ec:	0013      	movs	r3, r2
 80134ee:	693a      	ldr	r2, [r7, #16]
 80134f0:	4313      	orrs	r3, r2
 80134f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	693a      	ldr	r2, [r7, #16]
 80134f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	685a      	ldr	r2, [r3, #4]
 80134fe:	23c0      	movs	r3, #192	@ 0xc0
 8013500:	029b      	lsls	r3, r3, #10
 8013502:	4013      	ands	r3, r2
 8013504:	d100      	bne.n	8013508 <HAL_GPIO_Init+0x174>
 8013506:	e09e      	b.n	8013646 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8013508:	4a56      	ldr	r2, [pc, #344]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	089b      	lsrs	r3, r3, #2
 801350e:	3318      	adds	r3, #24
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	589b      	ldr	r3, [r3, r2]
 8013514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	2203      	movs	r2, #3
 801351a:	4013      	ands	r3, r2
 801351c:	00db      	lsls	r3, r3, #3
 801351e:	220f      	movs	r2, #15
 8013520:	409a      	lsls	r2, r3
 8013522:	0013      	movs	r3, r2
 8013524:	43da      	mvns	r2, r3
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	4013      	ands	r3, r2
 801352a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	23a0      	movs	r3, #160	@ 0xa0
 8013530:	05db      	lsls	r3, r3, #23
 8013532:	429a      	cmp	r2, r3
 8013534:	d01f      	beq.n	8013576 <HAL_GPIO_Init+0x1e2>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4a4b      	ldr	r2, [pc, #300]	@ (8013668 <HAL_GPIO_Init+0x2d4>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d019      	beq.n	8013572 <HAL_GPIO_Init+0x1de>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4a4a      	ldr	r2, [pc, #296]	@ (801366c <HAL_GPIO_Init+0x2d8>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d013      	beq.n	801356e <HAL_GPIO_Init+0x1da>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	4a49      	ldr	r2, [pc, #292]	@ (8013670 <HAL_GPIO_Init+0x2dc>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d00d      	beq.n	801356a <HAL_GPIO_Init+0x1d6>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4a48      	ldr	r2, [pc, #288]	@ (8013674 <HAL_GPIO_Init+0x2e0>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d007      	beq.n	8013566 <HAL_GPIO_Init+0x1d2>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4a47      	ldr	r2, [pc, #284]	@ (8013678 <HAL_GPIO_Init+0x2e4>)
 801355a:	4293      	cmp	r3, r2
 801355c:	d101      	bne.n	8013562 <HAL_GPIO_Init+0x1ce>
 801355e:	2305      	movs	r3, #5
 8013560:	e00a      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 8013562:	2306      	movs	r3, #6
 8013564:	e008      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 8013566:	2304      	movs	r3, #4
 8013568:	e006      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 801356a:	2303      	movs	r3, #3
 801356c:	e004      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 801356e:	2302      	movs	r3, #2
 8013570:	e002      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 8013572:	2301      	movs	r3, #1
 8013574:	e000      	b.n	8013578 <HAL_GPIO_Init+0x1e4>
 8013576:	2300      	movs	r3, #0
 8013578:	697a      	ldr	r2, [r7, #20]
 801357a:	2103      	movs	r1, #3
 801357c:	400a      	ands	r2, r1
 801357e:	00d2      	lsls	r2, r2, #3
 8013580:	4093      	lsls	r3, r2
 8013582:	693a      	ldr	r2, [r7, #16]
 8013584:	4313      	orrs	r3, r2
 8013586:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8013588:	4936      	ldr	r1, [pc, #216]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	089b      	lsrs	r3, r3, #2
 801358e:	3318      	adds	r3, #24
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	693a      	ldr	r2, [r7, #16]
 8013594:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013596:	4b33      	ldr	r3, [pc, #204]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	43da      	mvns	r2, r3
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	4013      	ands	r3, r2
 80135a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	2380      	movs	r3, #128	@ 0x80
 80135ac:	035b      	lsls	r3, r3, #13
 80135ae:	4013      	ands	r3, r2
 80135b0:	d003      	beq.n	80135ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80135b2:	693a      	ldr	r2, [r7, #16]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	4313      	orrs	r3, r2
 80135b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80135ba:	4b2a      	ldr	r3, [pc, #168]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 80135bc:	693a      	ldr	r2, [r7, #16]
 80135be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80135c0:	4b28      	ldr	r3, [pc, #160]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	43da      	mvns	r2, r3
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	4013      	ands	r3, r2
 80135ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	685a      	ldr	r2, [r3, #4]
 80135d4:	2380      	movs	r3, #128	@ 0x80
 80135d6:	039b      	lsls	r3, r3, #14
 80135d8:	4013      	ands	r3, r2
 80135da:	d003      	beq.n	80135e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80135dc:	693a      	ldr	r2, [r7, #16]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	4313      	orrs	r3, r2
 80135e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80135e4:	4b1f      	ldr	r3, [pc, #124]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80135ea:	4a1e      	ldr	r2, [pc, #120]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 80135ec:	2384      	movs	r3, #132	@ 0x84
 80135ee:	58d3      	ldr	r3, [r2, r3]
 80135f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	43da      	mvns	r2, r3
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	4013      	ands	r3, r2
 80135fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	685a      	ldr	r2, [r3, #4]
 8013600:	2380      	movs	r3, #128	@ 0x80
 8013602:	029b      	lsls	r3, r3, #10
 8013604:	4013      	ands	r3, r2
 8013606:	d003      	beq.n	8013610 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8013608:	693a      	ldr	r2, [r7, #16]
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4313      	orrs	r3, r2
 801360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013610:	4914      	ldr	r1, [pc, #80]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 8013612:	2284      	movs	r2, #132	@ 0x84
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8013618:	4a12      	ldr	r2, [pc, #72]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 801361a:	2380      	movs	r3, #128	@ 0x80
 801361c:	58d3      	ldr	r3, [r2, r3]
 801361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	43da      	mvns	r2, r3
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	4013      	ands	r3, r2
 8013628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	685a      	ldr	r2, [r3, #4]
 801362e:	2380      	movs	r3, #128	@ 0x80
 8013630:	025b      	lsls	r3, r3, #9
 8013632:	4013      	ands	r3, r2
 8013634:	d003      	beq.n	801363e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8013636:	693a      	ldr	r2, [r7, #16]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	4313      	orrs	r3, r2
 801363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801363e:	4909      	ldr	r1, [pc, #36]	@ (8013664 <HAL_GPIO_Init+0x2d0>)
 8013640:	2280      	movs	r2, #128	@ 0x80
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	3301      	adds	r3, #1
 801364a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	40da      	lsrs	r2, r3
 8013654:	1e13      	subs	r3, r2, #0
 8013656:	d000      	beq.n	801365a <HAL_GPIO_Init+0x2c6>
 8013658:	e6a4      	b.n	80133a4 <HAL_GPIO_Init+0x10>
  }
}
 801365a:	46c0      	nop			@ (mov r8, r8)
 801365c:	46c0      	nop			@ (mov r8, r8)
 801365e:	46bd      	mov	sp, r7
 8013660:	b006      	add	sp, #24
 8013662:	bd80      	pop	{r7, pc}
 8013664:	40021800 	.word	0x40021800
 8013668:	50000400 	.word	0x50000400
 801366c:	50000800 	.word	0x50000800
 8013670:	50000c00 	.word	0x50000c00
 8013674:	50001000 	.word	0x50001000
 8013678:	50001400 	.word	0x50001400

0801367c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013686:	2300      	movs	r3, #0
 8013688:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801368a:	e0c0      	b.n	801380e <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801368c:	2201      	movs	r2, #1
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	409a      	lsls	r2, r3
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	4013      	ands	r3, r2
 8013696:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d100      	bne.n	80136a0 <HAL_GPIO_DeInit+0x24>
 801369e:	e0b3      	b.n	8013808 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80136a0:	4a60      	ldr	r2, [pc, #384]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	089b      	lsrs	r3, r3, #2
 80136a6:	3318      	adds	r3, #24
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	589b      	ldr	r3, [r3, r2]
 80136ac:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	2203      	movs	r2, #3
 80136b2:	4013      	ands	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	220f      	movs	r2, #15
 80136b8:	409a      	lsls	r2, r3
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	4013      	ands	r3, r2
 80136be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	23a0      	movs	r3, #160	@ 0xa0
 80136c4:	05db      	lsls	r3, r3, #23
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d01f      	beq.n	801370a <HAL_GPIO_DeInit+0x8e>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4a56      	ldr	r2, [pc, #344]	@ (8013828 <HAL_GPIO_DeInit+0x1ac>)
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d019      	beq.n	8013706 <HAL_GPIO_DeInit+0x8a>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4a55      	ldr	r2, [pc, #340]	@ (801382c <HAL_GPIO_DeInit+0x1b0>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d013      	beq.n	8013702 <HAL_GPIO_DeInit+0x86>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	4a54      	ldr	r2, [pc, #336]	@ (8013830 <HAL_GPIO_DeInit+0x1b4>)
 80136de:	4293      	cmp	r3, r2
 80136e0:	d00d      	beq.n	80136fe <HAL_GPIO_DeInit+0x82>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4a53      	ldr	r2, [pc, #332]	@ (8013834 <HAL_GPIO_DeInit+0x1b8>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d007      	beq.n	80136fa <HAL_GPIO_DeInit+0x7e>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4a52      	ldr	r2, [pc, #328]	@ (8013838 <HAL_GPIO_DeInit+0x1bc>)
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d101      	bne.n	80136f6 <HAL_GPIO_DeInit+0x7a>
 80136f2:	2305      	movs	r3, #5
 80136f4:	e00a      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 80136f6:	2306      	movs	r3, #6
 80136f8:	e008      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 80136fa:	2304      	movs	r3, #4
 80136fc:	e006      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 80136fe:	2303      	movs	r3, #3
 8013700:	e004      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 8013702:	2302      	movs	r3, #2
 8013704:	e002      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 8013706:	2301      	movs	r3, #1
 8013708:	e000      	b.n	801370c <HAL_GPIO_DeInit+0x90>
 801370a:	2300      	movs	r3, #0
 801370c:	697a      	ldr	r2, [r7, #20]
 801370e:	2103      	movs	r1, #3
 8013710:	400a      	ands	r2, r1
 8013712:	00d2      	lsls	r2, r2, #3
 8013714:	4093      	lsls	r3, r2
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	429a      	cmp	r2, r3
 801371a:	d136      	bne.n	801378a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801371c:	4a41      	ldr	r2, [pc, #260]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 801371e:	2380      	movs	r3, #128	@ 0x80
 8013720:	58d3      	ldr	r3, [r2, r3]
 8013722:	693a      	ldr	r2, [r7, #16]
 8013724:	43d2      	mvns	r2, r2
 8013726:	493f      	ldr	r1, [pc, #252]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 8013728:	4013      	ands	r3, r2
 801372a:	2280      	movs	r2, #128	@ 0x80
 801372c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801372e:	4a3d      	ldr	r2, [pc, #244]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 8013730:	2384      	movs	r3, #132	@ 0x84
 8013732:	58d3      	ldr	r3, [r2, r3]
 8013734:	693a      	ldr	r2, [r7, #16]
 8013736:	43d2      	mvns	r2, r2
 8013738:	493a      	ldr	r1, [pc, #232]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 801373a:	4013      	ands	r3, r2
 801373c:	2284      	movs	r2, #132	@ 0x84
 801373e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8013740:	4b38      	ldr	r3, [pc, #224]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 8013742:	685a      	ldr	r2, [r3, #4]
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	43d9      	mvns	r1, r3
 8013748:	4b36      	ldr	r3, [pc, #216]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 801374a:	400a      	ands	r2, r1
 801374c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801374e:	4b35      	ldr	r3, [pc, #212]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	43d9      	mvns	r1, r3
 8013756:	4b33      	ldr	r3, [pc, #204]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 8013758:	400a      	ands	r2, r1
 801375a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	2203      	movs	r2, #3
 8013760:	4013      	ands	r3, r2
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	220f      	movs	r2, #15
 8013766:	409a      	lsls	r2, r3
 8013768:	0013      	movs	r3, r2
 801376a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 801376c:	4a2d      	ldr	r2, [pc, #180]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	089b      	lsrs	r3, r3, #2
 8013772:	3318      	adds	r3, #24
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	589a      	ldr	r2, [r3, r2]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	43d9      	mvns	r1, r3
 801377c:	4829      	ldr	r0, [pc, #164]	@ (8013824 <HAL_GPIO_DeInit+0x1a8>)
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	089b      	lsrs	r3, r3, #2
 8013782:	400a      	ands	r2, r1
 8013784:	3318      	adds	r3, #24
 8013786:	009b      	lsls	r3, r3, #2
 8013788:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	005b      	lsls	r3, r3, #1
 8013792:	2103      	movs	r1, #3
 8013794:	4099      	lsls	r1, r3
 8013796:	000b      	movs	r3, r1
 8013798:	431a      	orrs	r2, r3
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	08da      	lsrs	r2, r3, #3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	3208      	adds	r2, #8
 80137a6:	0092      	lsls	r2, r2, #2
 80137a8:	58d3      	ldr	r3, [r2, r3]
 80137aa:	697a      	ldr	r2, [r7, #20]
 80137ac:	2107      	movs	r1, #7
 80137ae:	400a      	ands	r2, r1
 80137b0:	0092      	lsls	r2, r2, #2
 80137b2:	210f      	movs	r1, #15
 80137b4:	4091      	lsls	r1, r2
 80137b6:	000a      	movs	r2, r1
 80137b8:	43d1      	mvns	r1, r2
 80137ba:	697a      	ldr	r2, [r7, #20]
 80137bc:	08d2      	lsrs	r2, r2, #3
 80137be:	4019      	ands	r1, r3
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	3208      	adds	r2, #8
 80137c4:	0092      	lsls	r2, r2, #2
 80137c6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	689b      	ldr	r3, [r3, #8]
 80137cc:	697a      	ldr	r2, [r7, #20]
 80137ce:	0052      	lsls	r2, r2, #1
 80137d0:	2103      	movs	r1, #3
 80137d2:	4091      	lsls	r1, r2
 80137d4:	000a      	movs	r2, r1
 80137d6:	43d2      	mvns	r2, r2
 80137d8:	401a      	ands	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	2101      	movs	r1, #1
 80137e4:	697a      	ldr	r2, [r7, #20]
 80137e6:	4091      	lsls	r1, r2
 80137e8:	000a      	movs	r2, r1
 80137ea:	43d2      	mvns	r2, r2
 80137ec:	401a      	ands	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	697a      	ldr	r2, [r7, #20]
 80137f8:	0052      	lsls	r2, r2, #1
 80137fa:	2103      	movs	r1, #3
 80137fc:	4091      	lsls	r1, r2
 80137fe:	000a      	movs	r2, r1
 8013800:	43d2      	mvns	r2, r2
 8013802:	401a      	ands	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	60da      	str	r2, [r3, #12]
    }

    position++;
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	3301      	adds	r3, #1
 801380c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801380e:	683a      	ldr	r2, [r7, #0]
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	40da      	lsrs	r2, r3
 8013814:	1e13      	subs	r3, r2, #0
 8013816:	d000      	beq.n	801381a <HAL_GPIO_DeInit+0x19e>
 8013818:	e738      	b.n	801368c <HAL_GPIO_DeInit+0x10>
  }
}
 801381a:	46c0      	nop			@ (mov r8, r8)
 801381c:	46c0      	nop			@ (mov r8, r8)
 801381e:	46bd      	mov	sp, r7
 8013820:	b006      	add	sp, #24
 8013822:	bd80      	pop	{r7, pc}
 8013824:	40021800 	.word	0x40021800
 8013828:	50000400 	.word	0x50000400
 801382c:	50000800 	.word	0x50000800
 8013830:	50000c00 	.word	0x50000c00
 8013834:	50001000 	.word	0x50001000
 8013838:	50001400 	.word	0x50001400

0801383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	000a      	movs	r2, r1
 8013846:	1cbb      	adds	r3, r7, #2
 8013848:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	691b      	ldr	r3, [r3, #16]
 801384e:	1cba      	adds	r2, r7, #2
 8013850:	8812      	ldrh	r2, [r2, #0]
 8013852:	4013      	ands	r3, r2
 8013854:	d004      	beq.n	8013860 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8013856:	230f      	movs	r3, #15
 8013858:	18fb      	adds	r3, r7, r3
 801385a:	2201      	movs	r2, #1
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	e003      	b.n	8013868 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013860:	230f      	movs	r3, #15
 8013862:	18fb      	adds	r3, r7, r3
 8013864:	2200      	movs	r2, #0
 8013866:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8013868:	230f      	movs	r3, #15
 801386a:	18fb      	adds	r3, r7, r3
 801386c:	781b      	ldrb	r3, [r3, #0]
}
 801386e:	0018      	movs	r0, r3
 8013870:	46bd      	mov	sp, r7
 8013872:	b004      	add	sp, #16
 8013874:	bd80      	pop	{r7, pc}

08013876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013876:	b580      	push	{r7, lr}
 8013878:	b082      	sub	sp, #8
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
 801387e:	0008      	movs	r0, r1
 8013880:	0011      	movs	r1, r2
 8013882:	1cbb      	adds	r3, r7, #2
 8013884:	1c02      	adds	r2, r0, #0
 8013886:	801a      	strh	r2, [r3, #0]
 8013888:	1c7b      	adds	r3, r7, #1
 801388a:	1c0a      	adds	r2, r1, #0
 801388c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801388e:	1c7b      	adds	r3, r7, #1
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d004      	beq.n	80138a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013896:	1cbb      	adds	r3, r7, #2
 8013898:	881a      	ldrh	r2, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801389e:	e003      	b.n	80138a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80138a0:	1cbb      	adds	r3, r7, #2
 80138a2:	881a      	ldrh	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80138a8:	46c0      	nop			@ (mov r8, r8)
 80138aa:	46bd      	mov	sp, r7
 80138ac:	b002      	add	sp, #8
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	000a      	movs	r2, r1
 80138ba:	1cbb      	adds	r3, r7, #2
 80138bc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80138c4:	1cbb      	adds	r3, r7, #2
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	4013      	ands	r3, r2
 80138cc:	041a      	lsls	r2, r3, #16
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	43db      	mvns	r3, r3
 80138d2:	1cb9      	adds	r1, r7, #2
 80138d4:	8809      	ldrh	r1, [r1, #0]
 80138d6:	400b      	ands	r3, r1
 80138d8:	431a      	orrs	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	619a      	str	r2, [r3, #24]
}
 80138de:	46c0      	nop			@ (mov r8, r8)
 80138e0:	46bd      	mov	sp, r7
 80138e2:	b004      	add	sp, #16
 80138e4:	bd80      	pop	{r7, pc}
	...

080138e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	0002      	movs	r2, r0
 80138f0:	1dbb      	adds	r3, r7, #6
 80138f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80138f4:	4b10      	ldr	r3, [pc, #64]	@ (8013938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	1dba      	adds	r2, r7, #6
 80138fa:	8812      	ldrh	r2, [r2, #0]
 80138fc:	4013      	ands	r3, r2
 80138fe:	d008      	beq.n	8013912 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8013900:	4b0d      	ldr	r3, [pc, #52]	@ (8013938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013902:	1dba      	adds	r2, r7, #6
 8013904:	8812      	ldrh	r2, [r2, #0]
 8013906:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8013908:	1dbb      	adds	r3, r7, #6
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	0018      	movs	r0, r3
 801390e:	f000 f815 	bl	801393c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8013912:	4b09      	ldr	r3, [pc, #36]	@ (8013938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	1dba      	adds	r2, r7, #6
 8013918:	8812      	ldrh	r2, [r2, #0]
 801391a:	4013      	ands	r3, r2
 801391c:	d008      	beq.n	8013930 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801391e:	4b06      	ldr	r3, [pc, #24]	@ (8013938 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013920:	1dba      	adds	r2, r7, #6
 8013922:	8812      	ldrh	r2, [r2, #0]
 8013924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8013926:	1dbb      	adds	r3, r7, #6
 8013928:	881b      	ldrh	r3, [r3, #0]
 801392a:	0018      	movs	r0, r3
 801392c:	f000 f810 	bl	8013950 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8013930:	46c0      	nop			@ (mov r8, r8)
 8013932:	46bd      	mov	sp, r7
 8013934:	b002      	add	sp, #8
 8013936:	bd80      	pop	{r7, pc}
 8013938:	40021800 	.word	0x40021800

0801393c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	0002      	movs	r2, r0
 8013944:	1dbb      	adds	r3, r7, #6
 8013946:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8013948:	46c0      	nop			@ (mov r8, r8)
 801394a:	46bd      	mov	sp, r7
 801394c:	b002      	add	sp, #8
 801394e:	bd80      	pop	{r7, pc}

08013950 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	af00      	add	r7, sp, #0
 8013956:	0002      	movs	r2, r0
 8013958:	1dbb      	adds	r3, r7, #6
 801395a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 801395c:	46c0      	nop			@ (mov r8, r8)
 801395e:	46bd      	mov	sp, r7
 8013960:	b002      	add	sp, #8
 8013962:	bd80      	pop	{r7, pc}

08013964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d101      	bne.n	8013976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	e08f      	b.n	8013a96 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2241      	movs	r2, #65	@ 0x41
 801397a:	5c9b      	ldrb	r3, [r3, r2]
 801397c:	b2db      	uxtb	r3, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	d107      	bne.n	8013992 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2240      	movs	r2, #64	@ 0x40
 8013986:	2100      	movs	r1, #0
 8013988:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	0018      	movs	r0, r3
 801398e:	f7f7 ffc1 	bl	800b914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2241      	movs	r2, #65	@ 0x41
 8013996:	2124      	movs	r1, #36	@ 0x24
 8013998:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2101      	movs	r1, #1
 80139a6:	438a      	bics	r2, r1
 80139a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	685a      	ldr	r2, [r3, #4]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	493b      	ldr	r1, [pc, #236]	@ (8013aa0 <HAL_I2C_Init+0x13c>)
 80139b4:	400a      	ands	r2, r1
 80139b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	689a      	ldr	r2, [r3, #8]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	4938      	ldr	r1, [pc, #224]	@ (8013aa4 <HAL_I2C_Init+0x140>)
 80139c4:	400a      	ands	r2, r1
 80139c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d108      	bne.n	80139e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	689a      	ldr	r2, [r3, #8]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2180      	movs	r1, #128	@ 0x80
 80139da:	0209      	lsls	r1, r1, #8
 80139dc:	430a      	orrs	r2, r1
 80139de:	609a      	str	r2, [r3, #8]
 80139e0:	e007      	b.n	80139f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	689a      	ldr	r2, [r3, #8]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	2184      	movs	r1, #132	@ 0x84
 80139ec:	0209      	lsls	r1, r1, #8
 80139ee:	430a      	orrs	r2, r1
 80139f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	d109      	bne.n	8013a0e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	685a      	ldr	r2, [r3, #4]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2180      	movs	r1, #128	@ 0x80
 8013a06:	0109      	lsls	r1, r1, #4
 8013a08:	430a      	orrs	r2, r1
 8013a0a:	605a      	str	r2, [r3, #4]
 8013a0c:	e007      	b.n	8013a1e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4923      	ldr	r1, [pc, #140]	@ (8013aa8 <HAL_I2C_Init+0x144>)
 8013a1a:	400a      	ands	r2, r1
 8013a1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	685a      	ldr	r2, [r3, #4]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	4920      	ldr	r1, [pc, #128]	@ (8013aac <HAL_I2C_Init+0x148>)
 8013a2a:	430a      	orrs	r2, r1
 8013a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	68da      	ldr	r2, [r3, #12]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	491a      	ldr	r1, [pc, #104]	@ (8013aa4 <HAL_I2C_Init+0x140>)
 8013a3a:	400a      	ands	r2, r1
 8013a3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	691a      	ldr	r2, [r3, #16]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	695b      	ldr	r3, [r3, #20]
 8013a46:	431a      	orrs	r2, r3
 8013a48:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	699b      	ldr	r3, [r3, #24]
 8013a4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	430a      	orrs	r2, r1
 8013a56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	69d9      	ldr	r1, [r3, #28]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a1a      	ldr	r2, [r3, #32]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	430a      	orrs	r2, r1
 8013a66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2101      	movs	r1, #1
 8013a74:	430a      	orrs	r2, r1
 8013a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2241      	movs	r2, #65	@ 0x41
 8013a82:	2120      	movs	r1, #32
 8013a84:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2242      	movs	r2, #66	@ 0x42
 8013a90:	2100      	movs	r1, #0
 8013a92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	0018      	movs	r0, r3
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	b002      	add	sp, #8
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	46c0      	nop			@ (mov r8, r8)
 8013aa0:	f0ffffff 	.word	0xf0ffffff
 8013aa4:	ffff7fff 	.word	0xffff7fff
 8013aa8:	fffff7ff 	.word	0xfffff7ff
 8013aac:	02008000 	.word	0x02008000

08013ab0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d101      	bne.n	8013ac2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	e022      	b.n	8013b08 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2241      	movs	r2, #65	@ 0x41
 8013ac6:	2124      	movs	r1, #36	@ 0x24
 8013ac8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	438a      	bics	r2, r1
 8013ad8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	0018      	movs	r0, r3
 8013ade:	f7f7 ffdf 	bl	800baa0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2241      	movs	r2, #65	@ 0x41
 8013aec:	2100      	movs	r1, #0
 8013aee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2200      	movs	r2, #0
 8013af4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2242      	movs	r2, #66	@ 0x42
 8013afa:	2100      	movs	r1, #0
 8013afc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2240      	movs	r2, #64	@ 0x40
 8013b02:	2100      	movs	r1, #0
 8013b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013b06:	2300      	movs	r3, #0
}
 8013b08:	0018      	movs	r0, r3
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	b002      	add	sp, #8
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8013b10:	b5b0      	push	{r4, r5, r7, lr}
 8013b12:	b088      	sub	sp, #32
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	0008      	movs	r0, r1
 8013b1a:	607a      	str	r2, [r7, #4]
 8013b1c:	0019      	movs	r1, r3
 8013b1e:	230a      	movs	r3, #10
 8013b20:	18fb      	adds	r3, r7, r3
 8013b22:	1c02      	adds	r2, r0, #0
 8013b24:	801a      	strh	r2, [r3, #0]
 8013b26:	2308      	movs	r3, #8
 8013b28:	18fb      	adds	r3, r7, r3
 8013b2a:	1c0a      	adds	r2, r1, #0
 8013b2c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2241      	movs	r2, #65	@ 0x41
 8013b32:	5c9b      	ldrb	r3, [r3, r2]
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	2b20      	cmp	r3, #32
 8013b38:	d000      	beq.n	8013b3c <HAL_I2C_Master_Transmit_DMA+0x2c>
 8013b3a:	e0dd      	b.n	8013cf8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	699a      	ldr	r2, [r3, #24]
 8013b42:	2380      	movs	r3, #128	@ 0x80
 8013b44:	021b      	lsls	r3, r3, #8
 8013b46:	401a      	ands	r2, r3
 8013b48:	2380      	movs	r3, #128	@ 0x80
 8013b4a:	021b      	lsls	r3, r3, #8
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d101      	bne.n	8013b54 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8013b50:	2302      	movs	r3, #2
 8013b52:	e0d2      	b.n	8013cfa <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2240      	movs	r2, #64	@ 0x40
 8013b58:	5c9b      	ldrb	r3, [r3, r2]
 8013b5a:	2b01      	cmp	r3, #1
 8013b5c:	d101      	bne.n	8013b62 <HAL_I2C_Master_Transmit_DMA+0x52>
 8013b5e:	2302      	movs	r3, #2
 8013b60:	e0cb      	b.n	8013cfa <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2240      	movs	r2, #64	@ 0x40
 8013b66:	2101      	movs	r1, #1
 8013b68:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2241      	movs	r2, #65	@ 0x41
 8013b6e:	2121      	movs	r1, #33	@ 0x21
 8013b70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2242      	movs	r2, #66	@ 0x42
 8013b76:	2110      	movs	r1, #16
 8013b78:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2208      	movs	r2, #8
 8013b8a:	18ba      	adds	r2, r7, r2
 8013b8c:	8812      	ldrh	r2, [r2, #0]
 8013b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	4a5c      	ldr	r2, [pc, #368]	@ (8013d04 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8013b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	4a5b      	ldr	r2, [pc, #364]	@ (8013d08 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8013b9a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	2bff      	cmp	r3, #255	@ 0xff
 8013ba4:	d906      	bls.n	8013bb4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	22ff      	movs	r2, #255	@ 0xff
 8013baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013bac:	2380      	movs	r3, #128	@ 0x80
 8013bae:	045b      	lsls	r3, r3, #17
 8013bb0:	617b      	str	r3, [r7, #20]
 8013bb2:	e007      	b.n	8013bc4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013bbe:	2380      	movs	r3, #128	@ 0x80
 8013bc0:	049b      	lsls	r3, r3, #18
 8013bc2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d100      	bne.n	8013bce <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013bcc:	e078      	b.n	8013cc0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d023      	beq.n	8013c1e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bda:	4a4c      	ldr	r2, [pc, #304]	@ (8013d0c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013be2:	4a4b      	ldr	r2, [pc, #300]	@ (8013d10 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013be4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bea:	2200      	movs	r2, #0
 8013bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013bfa:	6879      	ldr	r1, [r7, #4]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3328      	adds	r3, #40	@ 0x28
 8013c02:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013c08:	2513      	movs	r5, #19
 8013c0a:	197c      	adds	r4, r7, r5
 8013c0c:	f7fe ff5a 	bl	8012ac4 <HAL_DMA_Start_IT>
 8013c10:	0003      	movs	r3, r0
 8013c12:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013c14:	197b      	adds	r3, r7, r5
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d13d      	bne.n	8013c98 <HAL_I2C_Master_Transmit_DMA+0x188>
 8013c1c:	e013      	b.n	8013c46 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2241      	movs	r2, #65	@ 0x41
 8013c22:	2120      	movs	r1, #32
 8013c24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2242      	movs	r2, #66	@ 0x42
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c32:	2280      	movs	r2, #128	@ 0x80
 8013c34:	431a      	orrs	r2, r3
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2240      	movs	r2, #64	@ 0x40
 8013c3e:	2100      	movs	r1, #0
 8013c40:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013c42:	2301      	movs	r3, #1
 8013c44:	e059      	b.n	8013cfa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c4a:	b2da      	uxtb	r2, r3
 8013c4c:	697c      	ldr	r4, [r7, #20]
 8013c4e:	230a      	movs	r3, #10
 8013c50:	18fb      	adds	r3, r7, r3
 8013c52:	8819      	ldrh	r1, [r3, #0]
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	4b2f      	ldr	r3, [pc, #188]	@ (8013d14 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013c58:	9300      	str	r3, [sp, #0]
 8013c5a:	0023      	movs	r3, r4
 8013c5c:	f001 fd94 	bl	8015788 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2240      	movs	r2, #64	@ 0x40
 8013c76:	2100      	movs	r1, #0
 8013c78:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2110      	movs	r1, #16
 8013c7e:	0018      	movs	r0, r3
 8013c80:	f001 fdbc 	bl	80157fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2180      	movs	r1, #128	@ 0x80
 8013c90:	01c9      	lsls	r1, r1, #7
 8013c92:	430a      	orrs	r2, r1
 8013c94:	601a      	str	r2, [r3, #0]
 8013c96:	e02d      	b.n	8013cf4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	2241      	movs	r2, #65	@ 0x41
 8013c9c:	2120      	movs	r1, #32
 8013c9e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2242      	movs	r2, #66	@ 0x42
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cac:	2210      	movs	r2, #16
 8013cae:	431a      	orrs	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2240      	movs	r2, #64	@ 0x40
 8013cb8:	2100      	movs	r1, #0
 8013cba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	e01c      	b.n	8013cfa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	4a15      	ldr	r2, [pc, #84]	@ (8013d18 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cca:	b2da      	uxtb	r2, r3
 8013ccc:	2380      	movs	r3, #128	@ 0x80
 8013cce:	049c      	lsls	r4, r3, #18
 8013cd0:	230a      	movs	r3, #10
 8013cd2:	18fb      	adds	r3, r7, r3
 8013cd4:	8819      	ldrh	r1, [r3, #0]
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8013d14 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	0023      	movs	r3, r4
 8013cde:	f001 fd53 	bl	8015788 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2240      	movs	r2, #64	@ 0x40
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2101      	movs	r1, #1
 8013cee:	0018      	movs	r0, r3
 8013cf0:	f001 fd84 	bl	80157fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e000      	b.n	8013cfa <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013cf8:	2302      	movs	r3, #2
  }
}
 8013cfa:	0018      	movs	r0, r3
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	b006      	add	sp, #24
 8013d00:	bdb0      	pop	{r4, r5, r7, pc}
 8013d02:	46c0      	nop			@ (mov r8, r8)
 8013d04:	ffff0000 	.word	0xffff0000
 8013d08:	0801452d 	.word	0x0801452d
 8013d0c:	080155d9 	.word	0x080155d9
 8013d10:	08015719 	.word	0x08015719
 8013d14:	80002000 	.word	0x80002000
 8013d18:	080140d9 	.word	0x080140d9

08013d1c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013d1c:	b5b0      	push	{r4, r5, r7, lr}
 8013d1e:	b088      	sub	sp, #32
 8013d20:	af02      	add	r7, sp, #8
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	0008      	movs	r0, r1
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	0019      	movs	r1, r3
 8013d2a:	230a      	movs	r3, #10
 8013d2c:	18fb      	adds	r3, r7, r3
 8013d2e:	1c02      	adds	r2, r0, #0
 8013d30:	801a      	strh	r2, [r3, #0]
 8013d32:	2308      	movs	r3, #8
 8013d34:	18fb      	adds	r3, r7, r3
 8013d36:	1c0a      	adds	r2, r1, #0
 8013d38:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2241      	movs	r2, #65	@ 0x41
 8013d3e:	5c9b      	ldrb	r3, [r3, r2]
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	2b20      	cmp	r3, #32
 8013d44:	d000      	beq.n	8013d48 <HAL_I2C_Master_Receive_DMA+0x2c>
 8013d46:	e0dd      	b.n	8013f04 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	699a      	ldr	r2, [r3, #24]
 8013d4e:	2380      	movs	r3, #128	@ 0x80
 8013d50:	021b      	lsls	r3, r3, #8
 8013d52:	401a      	ands	r2, r3
 8013d54:	2380      	movs	r3, #128	@ 0x80
 8013d56:	021b      	lsls	r3, r3, #8
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d101      	bne.n	8013d60 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8013d5c:	2302      	movs	r3, #2
 8013d5e:	e0d2      	b.n	8013f06 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2240      	movs	r2, #64	@ 0x40
 8013d64:	5c9b      	ldrb	r3, [r3, r2]
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d101      	bne.n	8013d6e <HAL_I2C_Master_Receive_DMA+0x52>
 8013d6a:	2302      	movs	r3, #2
 8013d6c:	e0cb      	b.n	8013f06 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	2240      	movs	r2, #64	@ 0x40
 8013d72:	2101      	movs	r1, #1
 8013d74:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2241      	movs	r2, #65	@ 0x41
 8013d7a:	2122      	movs	r1, #34	@ 0x22
 8013d7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2242      	movs	r2, #66	@ 0x42
 8013d82:	2110      	movs	r1, #16
 8013d84:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2208      	movs	r2, #8
 8013d96:	18ba      	adds	r2, r7, r2
 8013d98:	8812      	ldrh	r2, [r2, #0]
 8013d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8013f10 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8013da0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	4a5b      	ldr	r2, [pc, #364]	@ (8013f14 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013da6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	2bff      	cmp	r3, #255	@ 0xff
 8013db0:	d906      	bls.n	8013dc0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	22ff      	movs	r2, #255	@ 0xff
 8013db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013db8:	2380      	movs	r3, #128	@ 0x80
 8013dba:	045b      	lsls	r3, r3, #17
 8013dbc:	617b      	str	r3, [r7, #20]
 8013dbe:	e007      	b.n	8013dd0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013dca:	2380      	movs	r3, #128	@ 0x80
 8013dcc:	049b      	lsls	r3, r3, #18
 8013dce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d100      	bne.n	8013dda <HAL_I2C_Master_Receive_DMA+0xbe>
 8013dd8:	e078      	b.n	8013ecc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d023      	beq.n	8013e2a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013de6:	4a4c      	ldr	r2, [pc, #304]	@ (8013f18 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013de8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dee:	4a4b      	ldr	r2, [pc, #300]	@ (8013f1c <HAL_I2C_Master_Receive_DMA+0x200>)
 8013df0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013df6:	2200      	movs	r2, #0
 8013df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dfe:	2200      	movs	r2, #0
 8013e00:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	3324      	adds	r3, #36	@ 0x24
 8013e0c:	0019      	movs	r1, r3
 8013e0e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013e14:	2513      	movs	r5, #19
 8013e16:	197c      	adds	r4, r7, r5
 8013e18:	f7fe fe54 	bl	8012ac4 <HAL_DMA_Start_IT>
 8013e1c:	0003      	movs	r3, r0
 8013e1e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013e20:	197b      	adds	r3, r7, r5
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d13d      	bne.n	8013ea4 <HAL_I2C_Master_Receive_DMA+0x188>
 8013e28:	e013      	b.n	8013e52 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	2241      	movs	r2, #65	@ 0x41
 8013e2e:	2120      	movs	r1, #32
 8013e30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2242      	movs	r2, #66	@ 0x42
 8013e36:	2100      	movs	r1, #0
 8013e38:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e3e:	2280      	movs	r2, #128	@ 0x80
 8013e40:	431a      	orrs	r2, r3
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2240      	movs	r2, #64	@ 0x40
 8013e4a:	2100      	movs	r1, #0
 8013e4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e059      	b.n	8013f06 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e56:	b2da      	uxtb	r2, r3
 8013e58:	697c      	ldr	r4, [r7, #20]
 8013e5a:	230a      	movs	r3, #10
 8013e5c:	18fb      	adds	r3, r7, r3
 8013e5e:	8819      	ldrh	r1, [r3, #0]
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	4b2f      	ldr	r3, [pc, #188]	@ (8013f20 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013e64:	9300      	str	r3, [sp, #0]
 8013e66:	0023      	movs	r3, r4
 8013e68:	f001 fc8e 	bl	8015788 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2240      	movs	r2, #64	@ 0x40
 8013e82:	2100      	movs	r1, #0
 8013e84:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2110      	movs	r1, #16
 8013e8a:	0018      	movs	r0, r3
 8013e8c:	f001 fcb6 	bl	80157fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	681a      	ldr	r2, [r3, #0]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2180      	movs	r1, #128	@ 0x80
 8013e9c:	0209      	lsls	r1, r1, #8
 8013e9e:	430a      	orrs	r2, r1
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	e02d      	b.n	8013f00 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2241      	movs	r2, #65	@ 0x41
 8013ea8:	2120      	movs	r1, #32
 8013eaa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2242      	movs	r2, #66	@ 0x42
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eb8:	2210      	movs	r2, #16
 8013eba:	431a      	orrs	r2, r3
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	2240      	movs	r2, #64	@ 0x40
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	e01c      	b.n	8013f06 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4a15      	ldr	r2, [pc, #84]	@ (8013f24 <HAL_I2C_Master_Receive_DMA+0x208>)
 8013ed0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ed6:	b2da      	uxtb	r2, r3
 8013ed8:	2380      	movs	r3, #128	@ 0x80
 8013eda:	049c      	lsls	r4, r3, #18
 8013edc:	230a      	movs	r3, #10
 8013ede:	18fb      	adds	r3, r7, r3
 8013ee0:	8819      	ldrh	r1, [r3, #0]
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8013f20 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	0023      	movs	r3, r4
 8013eea:	f001 fc4d 	bl	8015788 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2240      	movs	r2, #64	@ 0x40
 8013ef2:	2100      	movs	r1, #0
 8013ef4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2102      	movs	r1, #2
 8013efa:	0018      	movs	r0, r3
 8013efc:	f001 fc7e 	bl	80157fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013f00:	2300      	movs	r3, #0
 8013f02:	e000      	b.n	8013f06 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013f04:	2302      	movs	r3, #2
  }
}
 8013f06:	0018      	movs	r0, r3
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	b006      	add	sp, #24
 8013f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f0e:	46c0      	nop			@ (mov r8, r8)
 8013f10:	ffff0000 	.word	0xffff0000
 8013f14:	0801452d 	.word	0x0801452d
 8013f18:	08015679 	.word	0x08015679
 8013f1c:	08015719 	.word	0x08015719
 8013f20:	80002400 	.word	0x80002400
 8013f24:	080140d9 	.word	0x080140d9

08013f28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	699b      	ldr	r3, [r3, #24]
 8013f36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d005      	beq.n	8013f54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	68f9      	ldr	r1, [r7, #12]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	4798      	blx	r3
  }
}
 8013f54:	46c0      	nop			@ (mov r8, r8)
 8013f56:	46bd      	mov	sp, r7
 8013f58:	b004      	add	sp, #16
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	699b      	ldr	r3, [r3, #24]
 8013f6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013f74:	697a      	ldr	r2, [r7, #20]
 8013f76:	2380      	movs	r3, #128	@ 0x80
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4013      	ands	r3, r2
 8013f7c:	d00e      	beq.n	8013f9c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	2280      	movs	r2, #128	@ 0x80
 8013f82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013f84:	d00a      	beq.n	8013f9c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	431a      	orrs	r2, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	2280      	movs	r2, #128	@ 0x80
 8013f98:	0052      	lsls	r2, r2, #1
 8013f9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013f9c:	697a      	ldr	r2, [r7, #20]
 8013f9e:	2380      	movs	r3, #128	@ 0x80
 8013fa0:	00db      	lsls	r3, r3, #3
 8013fa2:	4013      	ands	r3, r2
 8013fa4:	d00e      	beq.n	8013fc4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	2280      	movs	r2, #128	@ 0x80
 8013faa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013fac:	d00a      	beq.n	8013fc4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fb2:	2208      	movs	r2, #8
 8013fb4:	431a      	orrs	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	2280      	movs	r2, #128	@ 0x80
 8013fc0:	00d2      	lsls	r2, r2, #3
 8013fc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013fc4:	697a      	ldr	r2, [r7, #20]
 8013fc6:	2380      	movs	r3, #128	@ 0x80
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	4013      	ands	r3, r2
 8013fcc:	d00e      	beq.n	8013fec <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	2280      	movs	r2, #128	@ 0x80
 8013fd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013fd4:	d00a      	beq.n	8013fec <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fda:	2202      	movs	r2, #2
 8013fdc:	431a      	orrs	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2280      	movs	r2, #128	@ 0x80
 8013fe8:	0092      	lsls	r2, r2, #2
 8013fea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ff0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	220b      	movs	r2, #11
 8013ff6:	4013      	ands	r3, r2
 8013ff8:	d005      	beq.n	8014006 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8013ffa:	68fa      	ldr	r2, [r7, #12]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	0011      	movs	r1, r2
 8014000:	0018      	movs	r0, r3
 8014002:	f001 f99b 	bl	801533c <I2C_ITError>
  }
}
 8014006:	46c0      	nop			@ (mov r8, r8)
 8014008:	46bd      	mov	sp, r7
 801400a:	b006      	add	sp, #24
 801400c:	bd80      	pop	{r7, pc}

0801400e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b082      	sub	sp, #8
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014016:	46c0      	nop			@ (mov r8, r8)
 8014018:	46bd      	mov	sp, r7
 801401a:	b002      	add	sp, #8
 801401c:	bd80      	pop	{r7, pc}

0801401e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801401e:	b580      	push	{r7, lr}
 8014020:	b082      	sub	sp, #8
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014026:	46c0      	nop			@ (mov r8, r8)
 8014028:	46bd      	mov	sp, r7
 801402a:	b002      	add	sp, #8
 801402c:	bd80      	pop	{r7, pc}

0801402e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801402e:	b580      	push	{r7, lr}
 8014030:	b082      	sub	sp, #8
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014036:	46c0      	nop			@ (mov r8, r8)
 8014038:	46bd      	mov	sp, r7
 801403a:	b002      	add	sp, #8
 801403c:	bd80      	pop	{r7, pc}

0801403e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801403e:	b580      	push	{r7, lr}
 8014040:	b082      	sub	sp, #8
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014046:	46c0      	nop			@ (mov r8, r8)
 8014048:	46bd      	mov	sp, r7
 801404a:	b002      	add	sp, #8
 801404c:	bd80      	pop	{r7, pc}

0801404e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
 8014056:	0008      	movs	r0, r1
 8014058:	0011      	movs	r1, r2
 801405a:	1cfb      	adds	r3, r7, #3
 801405c:	1c02      	adds	r2, r0, #0
 801405e:	701a      	strb	r2, [r3, #0]
 8014060:	003b      	movs	r3, r7
 8014062:	1c0a      	adds	r2, r1, #0
 8014064:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014066:	46c0      	nop			@ (mov r8, r8)
 8014068:	46bd      	mov	sp, r7
 801406a:	b002      	add	sp, #8
 801406c:	bd80      	pop	{r7, pc}

0801406e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b082      	sub	sp, #8
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8014076:	46c0      	nop			@ (mov r8, r8)
 8014078:	46bd      	mov	sp, r7
 801407a:	b002      	add	sp, #8
 801407c:	bd80      	pop	{r7, pc}

0801407e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801407e:	b580      	push	{r7, lr}
 8014080:	b082      	sub	sp, #8
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014086:	46c0      	nop			@ (mov r8, r8)
 8014088:	46bd      	mov	sp, r7
 801408a:	b002      	add	sp, #8
 801408c:	bd80      	pop	{r7, pc}

0801408e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801408e:	b580      	push	{r7, lr}
 8014090:	b082      	sub	sp, #8
 8014092:	af00      	add	r7, sp, #0
 8014094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014096:	46c0      	nop			@ (mov r8, r8)
 8014098:	46bd      	mov	sp, r7
 801409a:	b002      	add	sp, #8
 801409c:	bd80      	pop	{r7, pc}

0801409e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b082      	sub	sp, #8
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80140a6:	46c0      	nop			@ (mov r8, r8)
 80140a8:	46bd      	mov	sp, r7
 80140aa:	b002      	add	sp, #8
 80140ac:	bd80      	pop	{r7, pc}

080140ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b082      	sub	sp, #8
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80140b6:	46c0      	nop			@ (mov r8, r8)
 80140b8:	46bd      	mov	sp, r7
 80140ba:	b002      	add	sp, #8
 80140bc:	bd80      	pop	{r7, pc}

080140be <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b082      	sub	sp, #8
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2241      	movs	r2, #65	@ 0x41
 80140ca:	5c9b      	ldrb	r3, [r3, r2]
 80140cc:	b2db      	uxtb	r3, r3
}
 80140ce:	0018      	movs	r0, r3
 80140d0:	46bd      	mov	sp, r7
 80140d2:	b002      	add	sp, #8
 80140d4:	bd80      	pop	{r7, pc}
	...

080140d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80140d8:	b590      	push	{r4, r7, lr}
 80140da:	b089      	sub	sp, #36	@ 0x24
 80140dc:	af02      	add	r7, sp, #8
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2240      	movs	r2, #64	@ 0x40
 80140ec:	5c9b      	ldrb	r3, [r3, r2]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d101      	bne.n	80140f6 <I2C_Master_ISR_IT+0x1e>
 80140f2:	2302      	movs	r3, #2
 80140f4:	e113      	b.n	801431e <I2C_Master_ISR_IT+0x246>
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2240      	movs	r2, #64	@ 0x40
 80140fa:	2101      	movs	r1, #1
 80140fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	2210      	movs	r2, #16
 8014102:	4013      	ands	r3, r2
 8014104:	d012      	beq.n	801412c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2210      	movs	r2, #16
 801410a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801410c:	d00e      	beq.n	801412c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2210      	movs	r2, #16
 8014114:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801411a:	2204      	movs	r2, #4
 801411c:	431a      	orrs	r2, r3
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	0018      	movs	r0, r3
 8014126:	f001 fa34 	bl	8015592 <I2C_Flush_TXDR>
 801412a:	e0e5      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	2204      	movs	r2, #4
 8014130:	4013      	ands	r3, r2
 8014132:	d021      	beq.n	8014178 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2204      	movs	r2, #4
 8014138:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801413a:	d01d      	beq.n	8014178 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	2204      	movs	r2, #4
 8014140:	4393      	bics	r3, r2
 8014142:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801414e:	b2d2      	uxtb	r2, r2
 8014150:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014160:	3b01      	subs	r3, #1
 8014162:	b29a      	uxth	r2, r3
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801416c:	b29b      	uxth	r3, r3
 801416e:	3b01      	subs	r3, #1
 8014170:	b29a      	uxth	r2, r3
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014176:	e0bf      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2202      	movs	r2, #2
 801417c:	4013      	ands	r3, r2
 801417e:	d01c      	beq.n	80141ba <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2202      	movs	r2, #2
 8014184:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014186:	d018      	beq.n	80141ba <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801418c:	781a      	ldrb	r2, [r3, #0]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014198:	1c5a      	adds	r2, r3, #1
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141a2:	3b01      	subs	r3, #1
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	3b01      	subs	r3, #1
 80141b2:	b29a      	uxth	r2, r3
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80141b8:	e09e      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	2280      	movs	r2, #128	@ 0x80
 80141be:	4013      	ands	r3, r2
 80141c0:	d100      	bne.n	80141c4 <I2C_Master_ISR_IT+0xec>
 80141c2:	e069      	b.n	8014298 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2240      	movs	r2, #64	@ 0x40
 80141c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80141ca:	d065      	beq.n	8014298 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d04a      	beq.n	801426c <I2C_Master_ISR_IT+0x194>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d146      	bne.n	801426c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	2112      	movs	r1, #18
 80141e8:	187b      	adds	r3, r7, r1
 80141ea:	0592      	lsls	r2, r2, #22
 80141ec:	0d92      	lsrs	r2, r2, #22
 80141ee:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	2bff      	cmp	r3, #255	@ 0xff
 80141f8:	d910      	bls.n	801421c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	22ff      	movs	r2, #255	@ 0xff
 80141fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014204:	b2da      	uxtb	r2, r3
 8014206:	2380      	movs	r3, #128	@ 0x80
 8014208:	045c      	lsls	r4, r3, #17
 801420a:	187b      	adds	r3, r7, r1
 801420c:	8819      	ldrh	r1, [r3, #0]
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	2300      	movs	r3, #0
 8014212:	9300      	str	r3, [sp, #0]
 8014214:	0023      	movs	r3, r4
 8014216:	f001 fab7 	bl	8015788 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801421a:	e03c      	b.n	8014296 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014220:	b29a      	uxth	r2, r3
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801422a:	4a3f      	ldr	r2, [pc, #252]	@ (8014328 <I2C_Master_ISR_IT+0x250>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d00e      	beq.n	801424e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014234:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801423a:	2312      	movs	r3, #18
 801423c:	18fb      	adds	r3, r7, r3
 801423e:	8819      	ldrh	r1, [r3, #0]
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	2300      	movs	r3, #0
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	0023      	movs	r3, r4
 8014248:	f001 fa9e 	bl	8015788 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801424c:	e023      	b.n	8014296 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014252:	b2da      	uxtb	r2, r3
 8014254:	2380      	movs	r3, #128	@ 0x80
 8014256:	049c      	lsls	r4, r3, #18
 8014258:	2312      	movs	r3, #18
 801425a:	18fb      	adds	r3, r7, r3
 801425c:	8819      	ldrh	r1, [r3, #0]
 801425e:	68f8      	ldr	r0, [r7, #12]
 8014260:	2300      	movs	r3, #0
 8014262:	9300      	str	r3, [sp, #0]
 8014264:	0023      	movs	r3, r4
 8014266:	f001 fa8f 	bl	8015788 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801426a:	e014      	b.n	8014296 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	685a      	ldr	r2, [r3, #4]
 8014272:	2380      	movs	r3, #128	@ 0x80
 8014274:	049b      	lsls	r3, r3, #18
 8014276:	401a      	ands	r2, r3
 8014278:	2380      	movs	r3, #128	@ 0x80
 801427a:	049b      	lsls	r3, r3, #18
 801427c:	429a      	cmp	r2, r3
 801427e:	d004      	beq.n	801428a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	0018      	movs	r0, r3
 8014284:	f000 fd06 	bl	8014c94 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014288:	e036      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2140      	movs	r1, #64	@ 0x40
 801428e:	0018      	movs	r0, r3
 8014290:	f001 f854 	bl	801533c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014294:	e030      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
 8014296:	e02f      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	2240      	movs	r2, #64	@ 0x40
 801429c:	4013      	ands	r3, r2
 801429e:	d02b      	beq.n	80142f8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2240      	movs	r2, #64	@ 0x40
 80142a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80142a6:	d027      	beq.n	80142f8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d11d      	bne.n	80142ee <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	685a      	ldr	r2, [r3, #4]
 80142b8:	2380      	movs	r3, #128	@ 0x80
 80142ba:	049b      	lsls	r3, r3, #18
 80142bc:	401a      	ands	r2, r3
 80142be:	2380      	movs	r3, #128	@ 0x80
 80142c0:	049b      	lsls	r3, r3, #18
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d018      	beq.n	80142f8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ca:	4a17      	ldr	r2, [pc, #92]	@ (8014328 <I2C_Master_ISR_IT+0x250>)
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d109      	bne.n	80142e4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	685a      	ldr	r2, [r3, #4]
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	2180      	movs	r1, #128	@ 0x80
 80142dc:	01c9      	lsls	r1, r1, #7
 80142de:	430a      	orrs	r2, r1
 80142e0:	605a      	str	r2, [r3, #4]
 80142e2:	e009      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	0018      	movs	r0, r3
 80142e8:	f000 fcd4 	bl	8014c94 <I2C_ITMasterSeqCplt>
 80142ec:	e004      	b.n	80142f8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2140      	movs	r1, #64	@ 0x40
 80142f2:	0018      	movs	r0, r3
 80142f4:	f001 f822 	bl	801533c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	2220      	movs	r2, #32
 80142fc:	4013      	ands	r3, r2
 80142fe:	d009      	beq.n	8014314 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2220      	movs	r2, #32
 8014304:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014306:	d005      	beq.n	8014314 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8014308:	697a      	ldr	r2, [r7, #20]
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	0011      	movs	r1, r2
 801430e:	0018      	movs	r0, r3
 8014310:	f000 fd66 	bl	8014de0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	2240      	movs	r2, #64	@ 0x40
 8014318:	2100      	movs	r1, #0
 801431a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801431c:	2300      	movs	r3, #0
}
 801431e:	0018      	movs	r0, r3
 8014320:	46bd      	mov	sp, r7
 8014322:	b007      	add	sp, #28
 8014324:	bd90      	pop	{r4, r7, pc}
 8014326:	46c0      	nop			@ (mov r8, r8)
 8014328:	ffff0000 	.word	0xffff0000

0801432c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b086      	sub	sp, #24
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801433c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2240      	movs	r2, #64	@ 0x40
 8014346:	5c9b      	ldrb	r3, [r3, r2]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d101      	bne.n	8014350 <I2C_Slave_ISR_IT+0x24>
 801434c:	2302      	movs	r3, #2
 801434e:	e0e7      	b.n	8014520 <I2C_Slave_ISR_IT+0x1f4>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2240      	movs	r2, #64	@ 0x40
 8014354:	2101      	movs	r1, #1
 8014356:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	2220      	movs	r2, #32
 801435c:	4013      	ands	r3, r2
 801435e:	d00a      	beq.n	8014376 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2220      	movs	r2, #32
 8014364:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014366:	d006      	beq.n	8014376 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8014368:	693a      	ldr	r2, [r7, #16]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	0011      	movs	r1, r2
 801436e:	0018      	movs	r0, r3
 8014370:	f000 fe04 	bl	8014f7c <I2C_ITSlaveCplt>
 8014374:	e0cf      	b.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	2210      	movs	r2, #16
 801437a:	4013      	ands	r3, r2
 801437c:	d052      	beq.n	8014424 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2210      	movs	r2, #16
 8014382:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014384:	d04e      	beq.n	8014424 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801438a:	b29b      	uxth	r3, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	d12d      	bne.n	80143ec <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	2241      	movs	r2, #65	@ 0x41
 8014394:	5c9b      	ldrb	r3, [r3, r2]
 8014396:	b2db      	uxtb	r3, r3
 8014398:	2b28      	cmp	r3, #40	@ 0x28
 801439a:	d10b      	bne.n	80143b4 <I2C_Slave_ISR_IT+0x88>
 801439c:	697a      	ldr	r2, [r7, #20]
 801439e:	2380      	movs	r3, #128	@ 0x80
 80143a0:	049b      	lsls	r3, r3, #18
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d106      	bne.n	80143b4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80143a6:	693a      	ldr	r2, [r7, #16]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	0011      	movs	r1, r2
 80143ac:	0018      	movs	r0, r3
 80143ae:	f000 ff6d 	bl	801528c <I2C_ITListenCplt>
 80143b2:	e036      	b.n	8014422 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2241      	movs	r2, #65	@ 0x41
 80143b8:	5c9b      	ldrb	r3, [r3, r2]
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	2b29      	cmp	r3, #41	@ 0x29
 80143be:	d110      	bne.n	80143e2 <I2C_Slave_ISR_IT+0xb6>
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	4a59      	ldr	r2, [pc, #356]	@ (8014528 <I2C_Slave_ISR_IT+0x1fc>)
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d00c      	beq.n	80143e2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	2210      	movs	r2, #16
 80143ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	0018      	movs	r0, r3
 80143d4:	f001 f8dd 	bl	8015592 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	0018      	movs	r0, r3
 80143dc:	f000 fc9c 	bl	8014d18 <I2C_ITSlaveSeqCplt>
 80143e0:	e01f      	b.n	8014422 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2210      	movs	r2, #16
 80143e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80143ea:	e091      	b.n	8014510 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2210      	movs	r2, #16
 80143f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143f8:	2204      	movs	r2, #4
 80143fa:	431a      	orrs	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d005      	beq.n	8014412 <I2C_Slave_ISR_IT+0xe6>
 8014406:	697a      	ldr	r2, [r7, #20]
 8014408:	2380      	movs	r3, #128	@ 0x80
 801440a:	045b      	lsls	r3, r3, #17
 801440c:	429a      	cmp	r2, r3
 801440e:	d000      	beq.n	8014412 <I2C_Slave_ISR_IT+0xe6>
 8014410:	e07e      	b.n	8014510 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	0011      	movs	r1, r2
 801441a:	0018      	movs	r0, r3
 801441c:	f000 ff8e 	bl	801533c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014420:	e076      	b.n	8014510 <I2C_Slave_ISR_IT+0x1e4>
 8014422:	e075      	b.n	8014510 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	2204      	movs	r2, #4
 8014428:	4013      	ands	r3, r2
 801442a:	d02f      	beq.n	801448c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2204      	movs	r2, #4
 8014430:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014432:	d02b      	beq.n	801448c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014438:	b29b      	uxth	r3, r3
 801443a:	2b00      	cmp	r3, #0
 801443c:	d018      	beq.n	8014470 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014448:	b2d2      	uxtb	r2, r2
 801444a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014450:	1c5a      	adds	r2, r3, #1
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801445a:	3b01      	subs	r3, #1
 801445c:	b29a      	uxth	r2, r3
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014466:	b29b      	uxth	r3, r3
 8014468:	3b01      	subs	r3, #1
 801446a:	b29a      	uxth	r2, r3
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014474:	b29b      	uxth	r3, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d14c      	bne.n	8014514 <I2C_Slave_ISR_IT+0x1e8>
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	4a2a      	ldr	r2, [pc, #168]	@ (8014528 <I2C_Slave_ISR_IT+0x1fc>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d048      	beq.n	8014514 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	0018      	movs	r0, r3
 8014486:	f000 fc47 	bl	8014d18 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801448a:	e043      	b.n	8014514 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	2208      	movs	r2, #8
 8014490:	4013      	ands	r3, r2
 8014492:	d00a      	beq.n	80144aa <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2208      	movs	r2, #8
 8014498:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801449a:	d006      	beq.n	80144aa <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801449c:	693a      	ldr	r2, [r7, #16]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	0011      	movs	r1, r2
 80144a2:	0018      	movs	r0, r3
 80144a4:	f000 fb52 	bl	8014b4c <I2C_ITAddrCplt>
 80144a8:	e035      	b.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	2202      	movs	r2, #2
 80144ae:	4013      	ands	r3, r2
 80144b0:	d031      	beq.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2202      	movs	r2, #2
 80144b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80144b8:	d02d      	beq.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144be:	b29b      	uxth	r3, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d018      	beq.n	80144f6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144c8:	781a      	ldrb	r2, [r3, #0]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144d4:	1c5a      	adds	r2, r3, #1
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144de:	b29b      	uxth	r3, r3
 80144e0:	3b01      	subs	r3, #1
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144ec:	3b01      	subs	r3, #1
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80144f4:	e00f      	b.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80144f6:	697a      	ldr	r2, [r7, #20]
 80144f8:	2380      	movs	r3, #128	@ 0x80
 80144fa:	045b      	lsls	r3, r3, #17
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d002      	beq.n	8014506 <I2C_Slave_ISR_IT+0x1da>
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d107      	bne.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	0018      	movs	r0, r3
 801450a:	f000 fc05 	bl	8014d18 <I2C_ITSlaveSeqCplt>
 801450e:	e002      	b.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8014510:	46c0      	nop			@ (mov r8, r8)
 8014512:	e000      	b.n	8014516 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8014514:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2240      	movs	r2, #64	@ 0x40
 801451a:	2100      	movs	r1, #0
 801451c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801451e:	2300      	movs	r3, #0
}
 8014520:	0018      	movs	r0, r3
 8014522:	46bd      	mov	sp, r7
 8014524:	b006      	add	sp, #24
 8014526:	bd80      	pop	{r7, pc}
 8014528:	ffff0000 	.word	0xffff0000

0801452c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b089      	sub	sp, #36	@ 0x24
 8014530:	af02      	add	r7, sp, #8
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2240      	movs	r2, #64	@ 0x40
 801453c:	5c9b      	ldrb	r3, [r3, r2]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d101      	bne.n	8014546 <I2C_Master_ISR_DMA+0x1a>
 8014542:	2302      	movs	r3, #2
 8014544:	e0e7      	b.n	8014716 <I2C_Master_ISR_DMA+0x1ea>
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	2240      	movs	r2, #64	@ 0x40
 801454a:	2101      	movs	r1, #1
 801454c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	2210      	movs	r2, #16
 8014552:	4013      	ands	r3, r2
 8014554:	d017      	beq.n	8014586 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2210      	movs	r2, #16
 801455a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801455c:	d013      	beq.n	8014586 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	2210      	movs	r2, #16
 8014564:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801456a:	2204      	movs	r2, #4
 801456c:	431a      	orrs	r2, r3
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2120      	movs	r1, #32
 8014576:	0018      	movs	r0, r3
 8014578:	f001 f940 	bl	80157fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	0018      	movs	r0, r3
 8014580:	f001 f807 	bl	8015592 <I2C_Flush_TXDR>
 8014584:	e0c2      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	2280      	movs	r2, #128	@ 0x80
 801458a:	4013      	ands	r3, r2
 801458c:	d100      	bne.n	8014590 <I2C_Master_ISR_DMA+0x64>
 801458e:	e07c      	b.n	801468a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2240      	movs	r2, #64	@ 0x40
 8014594:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014596:	d100      	bne.n	801459a <I2C_Master_ISR_DMA+0x6e>
 8014598:	e077      	b.n	801468a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	681a      	ldr	r2, [r3, #0]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2140      	movs	r1, #64	@ 0x40
 80145a6:	438a      	bics	r2, r1
 80145a8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d055      	beq.n	8014660 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	2312      	movs	r3, #18
 80145be:	18fb      	adds	r3, r7, r3
 80145c0:	0592      	lsls	r2, r2, #22
 80145c2:	0d92      	lsrs	r2, r2, #22
 80145c4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145ca:	b29b      	uxth	r3, r3
 80145cc:	2bff      	cmp	r3, #255	@ 0xff
 80145ce:	d906      	bls.n	80145de <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	22ff      	movs	r2, #255	@ 0xff
 80145d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80145d6:	2380      	movs	r3, #128	@ 0x80
 80145d8:	045b      	lsls	r3, r3, #17
 80145da:	617b      	str	r3, [r7, #20]
 80145dc:	e010      	b.n	8014600 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ec:	4a4c      	ldr	r2, [pc, #304]	@ (8014720 <I2C_Master_ISR_DMA+0x1f4>)
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d003      	beq.n	80145fa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145f6:	617b      	str	r3, [r7, #20]
 80145f8:	e002      	b.n	8014600 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80145fa:	2380      	movs	r3, #128	@ 0x80
 80145fc:	049b      	lsls	r3, r3, #18
 80145fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014604:	b2da      	uxtb	r2, r3
 8014606:	697c      	ldr	r4, [r7, #20]
 8014608:	2312      	movs	r3, #18
 801460a:	18fb      	adds	r3, r7, r3
 801460c:	8819      	ldrh	r1, [r3, #0]
 801460e:	68f8      	ldr	r0, [r7, #12]
 8014610:	2300      	movs	r3, #0
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	0023      	movs	r3, r4
 8014616:	f001 f8b7 	bl	8015788 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801461e:	b29a      	uxth	r2, r3
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	b29a      	uxth	r2, r3
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2241      	movs	r2, #65	@ 0x41
 8014630:	5c9b      	ldrb	r3, [r3, r2]
 8014632:	b2db      	uxtb	r3, r3
 8014634:	2b22      	cmp	r3, #34	@ 0x22
 8014636:	d109      	bne.n	801464c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2180      	movs	r1, #128	@ 0x80
 8014644:	0209      	lsls	r1, r1, #8
 8014646:	430a      	orrs	r2, r1
 8014648:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801464a:	e05f      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2180      	movs	r1, #128	@ 0x80
 8014658:	01c9      	lsls	r1, r1, #7
 801465a:	430a      	orrs	r2, r1
 801465c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801465e:	e055      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	685a      	ldr	r2, [r3, #4]
 8014666:	2380      	movs	r3, #128	@ 0x80
 8014668:	049b      	lsls	r3, r3, #18
 801466a:	401a      	ands	r2, r3
 801466c:	2380      	movs	r3, #128	@ 0x80
 801466e:	049b      	lsls	r3, r3, #18
 8014670:	429a      	cmp	r2, r3
 8014672:	d004      	beq.n	801467e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	0018      	movs	r0, r3
 8014678:	f000 fb0c 	bl	8014c94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801467c:	e046      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2140      	movs	r1, #64	@ 0x40
 8014682:	0018      	movs	r0, r3
 8014684:	f000 fe5a 	bl	801533c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014688:	e040      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	2240      	movs	r2, #64	@ 0x40
 801468e:	4013      	ands	r3, r2
 8014690:	d02c      	beq.n	80146ec <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2240      	movs	r2, #64	@ 0x40
 8014696:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014698:	d028      	beq.n	80146ec <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801469e:	b29b      	uxth	r3, r3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d11d      	bne.n	80146e0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	685a      	ldr	r2, [r3, #4]
 80146aa:	2380      	movs	r3, #128	@ 0x80
 80146ac:	049b      	lsls	r3, r3, #18
 80146ae:	401a      	ands	r2, r3
 80146b0:	2380      	movs	r3, #128	@ 0x80
 80146b2:	049b      	lsls	r3, r3, #18
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d028      	beq.n	801470a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146bc:	4a18      	ldr	r2, [pc, #96]	@ (8014720 <I2C_Master_ISR_DMA+0x1f4>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	d109      	bne.n	80146d6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	685a      	ldr	r2, [r3, #4]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2180      	movs	r1, #128	@ 0x80
 80146ce:	01c9      	lsls	r1, r1, #7
 80146d0:	430a      	orrs	r2, r1
 80146d2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80146d4:	e019      	b.n	801470a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	0018      	movs	r0, r3
 80146da:	f000 fadb 	bl	8014c94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80146de:	e014      	b.n	801470a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2140      	movs	r1, #64	@ 0x40
 80146e4:	0018      	movs	r0, r3
 80146e6:	f000 fe29 	bl	801533c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80146ea:	e00e      	b.n	801470a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	2220      	movs	r2, #32
 80146f0:	4013      	ands	r3, r2
 80146f2:	d00b      	beq.n	801470c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2220      	movs	r2, #32
 80146f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80146fa:	d007      	beq.n	801470c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	0011      	movs	r1, r2
 8014702:	0018      	movs	r0, r3
 8014704:	f000 fb6c 	bl	8014de0 <I2C_ITMasterCplt>
 8014708:	e000      	b.n	801470c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801470a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2240      	movs	r2, #64	@ 0x40
 8014710:	2100      	movs	r1, #0
 8014712:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014714:	2300      	movs	r3, #0
}
 8014716:	0018      	movs	r0, r3
 8014718:	46bd      	mov	sp, r7
 801471a:	b007      	add	sp, #28
 801471c:	bd90      	pop	{r4, r7, pc}
 801471e:	46c0      	nop			@ (mov r8, r8)
 8014720:	ffff0000 	.word	0xffff0000

08014724 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8014724:	b590      	push	{r4, r7, lr}
 8014726:	b089      	sub	sp, #36	@ 0x24
 8014728:	af02      	add	r7, sp, #8
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014730:	4b90      	ldr	r3, [pc, #576]	@ (8014974 <I2C_Mem_ISR_DMA+0x250>)
 8014732:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2240      	movs	r2, #64	@ 0x40
 8014738:	5c9b      	ldrb	r3, [r3, r2]
 801473a:	2b01      	cmp	r3, #1
 801473c:	d101      	bne.n	8014742 <I2C_Mem_ISR_DMA+0x1e>
 801473e:	2302      	movs	r3, #2
 8014740:	e113      	b.n	801496a <I2C_Mem_ISR_DMA+0x246>
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2240      	movs	r2, #64	@ 0x40
 8014746:	2101      	movs	r1, #1
 8014748:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2210      	movs	r2, #16
 801474e:	4013      	ands	r3, r2
 8014750:	d017      	beq.n	8014782 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2210      	movs	r2, #16
 8014756:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014758:	d013      	beq.n	8014782 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2210      	movs	r2, #16
 8014760:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014766:	2204      	movs	r2, #4
 8014768:	431a      	orrs	r2, r3
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2120      	movs	r1, #32
 8014772:	0018      	movs	r0, r3
 8014774:	f001 f842 	bl	80157fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	0018      	movs	r0, r3
 801477c:	f000 ff09 	bl	8015592 <I2C_Flush_TXDR>
 8014780:	e0ee      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	2202      	movs	r2, #2
 8014786:	4013      	ands	r3, r2
 8014788:	d00d      	beq.n	80147a6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2202      	movs	r2, #2
 801478e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014790:	d009      	beq.n	80147a6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68fa      	ldr	r2, [r7, #12]
 8014798:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801479a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2201      	movs	r2, #1
 80147a0:	4252      	negs	r2, r2
 80147a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80147a4:	e0dc      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	2280      	movs	r2, #128	@ 0x80
 80147aa:	4013      	ands	r3, r2
 80147ac:	d063      	beq.n	8014876 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2240      	movs	r2, #64	@ 0x40
 80147b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80147b4:	d05f      	beq.n	8014876 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2101      	movs	r1, #1
 80147ba:	0018      	movs	r0, r3
 80147bc:	f001 f8a8 	bl	8015910 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	2110      	movs	r1, #16
 80147c4:	0018      	movs	r0, r3
 80147c6:	f001 f819 	bl	80157fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d04a      	beq.n	801486a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147d8:	b29b      	uxth	r3, r3
 80147da:	2bff      	cmp	r3, #255	@ 0xff
 80147dc:	d910      	bls.n	8014800 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	22ff      	movs	r2, #255	@ 0xff
 80147e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147e8:	b299      	uxth	r1, r3
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80147ee:	b2da      	uxtb	r2, r3
 80147f0:	2380      	movs	r3, #128	@ 0x80
 80147f2:	045b      	lsls	r3, r3, #17
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	2400      	movs	r4, #0
 80147f8:	9400      	str	r4, [sp, #0]
 80147fa:	f000 ffc5 	bl	8015788 <I2C_TransferConfig>
 80147fe:	e011      	b.n	8014824 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014804:	b29a      	uxth	r2, r3
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801480e:	b299      	uxth	r1, r3
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014814:	b2da      	uxtb	r2, r3
 8014816:	2380      	movs	r3, #128	@ 0x80
 8014818:	049b      	lsls	r3, r3, #18
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	2400      	movs	r4, #0
 801481e:	9400      	str	r4, [sp, #0]
 8014820:	f000 ffb2 	bl	8015788 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014828:	b29a      	uxth	r2, r3
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	b29a      	uxth	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	2241      	movs	r2, #65	@ 0x41
 801483a:	5c9b      	ldrb	r3, [r3, r2]
 801483c:	b2db      	uxtb	r3, r3
 801483e:	2b22      	cmp	r3, #34	@ 0x22
 8014840:	d109      	bne.n	8014856 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	681a      	ldr	r2, [r3, #0]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2180      	movs	r1, #128	@ 0x80
 801484e:	0209      	lsls	r1, r1, #8
 8014850:	430a      	orrs	r2, r1
 8014852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014854:	e084      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2180      	movs	r1, #128	@ 0x80
 8014862:	01c9      	lsls	r1, r1, #7
 8014864:	430a      	orrs	r2, r1
 8014866:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014868:	e07a      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2140      	movs	r1, #64	@ 0x40
 801486e:	0018      	movs	r0, r3
 8014870:	f000 fd64 	bl	801533c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014874:	e074      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	2240      	movs	r2, #64	@ 0x40
 801487a:	4013      	ands	r3, r2
 801487c:	d062      	beq.n	8014944 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2240      	movs	r2, #64	@ 0x40
 8014882:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014884:	d05e      	beq.n	8014944 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2101      	movs	r1, #1
 801488a:	0018      	movs	r0, r3
 801488c:	f001 f840 	bl	8015910 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2110      	movs	r1, #16
 8014894:	0018      	movs	r0, r3
 8014896:	f000 ffb1 	bl	80157fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2241      	movs	r2, #65	@ 0x41
 801489e:	5c9b      	ldrb	r3, [r3, r2]
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	2b22      	cmp	r3, #34	@ 0x22
 80148a4:	d101      	bne.n	80148aa <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80148a6:	4b34      	ldr	r3, [pc, #208]	@ (8014978 <I2C_Mem_ISR_DMA+0x254>)
 80148a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	2bff      	cmp	r3, #255	@ 0xff
 80148b2:	d911      	bls.n	80148d8 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	22ff      	movs	r2, #255	@ 0xff
 80148b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148be:	b299      	uxth	r1, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148c4:	b2da      	uxtb	r2, r3
 80148c6:	2380      	movs	r3, #128	@ 0x80
 80148c8:	045c      	lsls	r4, r3, #17
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	0023      	movs	r3, r4
 80148d2:	f000 ff59 	bl	8015788 <I2C_TransferConfig>
 80148d6:	e012      	b.n	80148fe <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148dc:	b29a      	uxth	r2, r3
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148e6:	b299      	uxth	r1, r3
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148ec:	b2da      	uxtb	r2, r3
 80148ee:	2380      	movs	r3, #128	@ 0x80
 80148f0:	049c      	lsls	r4, r3, #18
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	0023      	movs	r3, r4
 80148fa:	f000 ff45 	bl	8015788 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014902:	b29a      	uxth	r2, r3
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014908:	1ad3      	subs	r3, r2, r3
 801490a:	b29a      	uxth	r2, r3
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2241      	movs	r2, #65	@ 0x41
 8014914:	5c9b      	ldrb	r3, [r3, r2]
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b22      	cmp	r3, #34	@ 0x22
 801491a:	d109      	bne.n	8014930 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	2180      	movs	r1, #128	@ 0x80
 8014928:	0209      	lsls	r1, r1, #8
 801492a:	430a      	orrs	r2, r1
 801492c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801492e:	e017      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2180      	movs	r1, #128	@ 0x80
 801493c:	01c9      	lsls	r1, r1, #7
 801493e:	430a      	orrs	r2, r1
 8014940:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014942:	e00d      	b.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	2220      	movs	r2, #32
 8014948:	4013      	ands	r3, r2
 801494a:	d009      	beq.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2220      	movs	r2, #32
 8014950:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014952:	d005      	beq.n	8014960 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	0011      	movs	r1, r2
 801495a:	0018      	movs	r0, r3
 801495c:	f000 fa40 	bl	8014de0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2240      	movs	r2, #64	@ 0x40
 8014964:	2100      	movs	r1, #0
 8014966:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014968:	2300      	movs	r3, #0
}
 801496a:	0018      	movs	r0, r3
 801496c:	46bd      	mov	sp, r7
 801496e:	b007      	add	sp, #28
 8014970:	bd90      	pop	{r4, r7, pc}
 8014972:	46c0      	nop			@ (mov r8, r8)
 8014974:	80002000 	.word	0x80002000
 8014978:	80002400 	.word	0x80002400

0801497c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b088      	sub	sp, #32
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801498c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801498e:	2300      	movs	r3, #0
 8014990:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2240      	movs	r2, #64	@ 0x40
 8014996:	5c9b      	ldrb	r3, [r3, r2]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d101      	bne.n	80149a0 <I2C_Slave_ISR_DMA+0x24>
 801499c:	2302      	movs	r3, #2
 801499e:	e0ce      	b.n	8014b3e <I2C_Slave_ISR_DMA+0x1c2>
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2240      	movs	r2, #64	@ 0x40
 80149a4:	2101      	movs	r1, #1
 80149a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	2220      	movs	r2, #32
 80149ac:	4013      	ands	r3, r2
 80149ae:	d00a      	beq.n	80149c6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2220      	movs	r2, #32
 80149b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80149b6:	d006      	beq.n	80149c6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	0011      	movs	r1, r2
 80149be:	0018      	movs	r0, r3
 80149c0:	f000 fadc 	bl	8014f7c <I2C_ITSlaveCplt>
 80149c4:	e0b6      	b.n	8014b34 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	2210      	movs	r2, #16
 80149ca:	4013      	ands	r3, r2
 80149cc:	d100      	bne.n	80149d0 <I2C_Slave_ISR_DMA+0x54>
 80149ce:	e0a3      	b.n	8014b18 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2210      	movs	r2, #16
 80149d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80149d6:	d100      	bne.n	80149da <I2C_Slave_ISR_DMA+0x5e>
 80149d8:	e09e      	b.n	8014b18 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	2380      	movs	r3, #128	@ 0x80
 80149de:	01db      	lsls	r3, r3, #7
 80149e0:	4013      	ands	r3, r2
 80149e2:	d105      	bne.n	80149f0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	2380      	movs	r3, #128	@ 0x80
 80149e8:	021b      	lsls	r3, r3, #8
 80149ea:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80149ec:	d100      	bne.n	80149f0 <I2C_Slave_ISR_DMA+0x74>
 80149ee:	e08c      	b.n	8014b0a <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00c      	beq.n	8014a12 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	2380      	movs	r3, #128	@ 0x80
 80149fc:	021b      	lsls	r3, r3, #8
 80149fe:	4013      	ands	r3, r2
 8014a00:	d007      	beq.n	8014a12 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00c      	beq.n	8014a34 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	2380      	movs	r3, #128	@ 0x80
 8014a1e:	01db      	lsls	r3, r3, #7
 8014a20:	4013      	ands	r3, r2
 8014a22:	d007      	beq.n	8014a34 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8014a30:	2301      	movs	r3, #1
 8014a32:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	2b01      	cmp	r3, #1
 8014a38:	d12d      	bne.n	8014a96 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2241      	movs	r2, #65	@ 0x41
 8014a3e:	5c9b      	ldrb	r3, [r3, r2]
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	2b28      	cmp	r3, #40	@ 0x28
 8014a44:	d10b      	bne.n	8014a5e <I2C_Slave_ISR_DMA+0xe2>
 8014a46:	69ba      	ldr	r2, [r7, #24]
 8014a48:	2380      	movs	r3, #128	@ 0x80
 8014a4a:	049b      	lsls	r3, r3, #18
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d106      	bne.n	8014a5e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014a50:	68ba      	ldr	r2, [r7, #8]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	0011      	movs	r1, r2
 8014a56:	0018      	movs	r0, r3
 8014a58:	f000 fc18 	bl	801528c <I2C_ITListenCplt>
 8014a5c:	e054      	b.n	8014b08 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2241      	movs	r2, #65	@ 0x41
 8014a62:	5c9b      	ldrb	r3, [r3, r2]
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	2b29      	cmp	r3, #41	@ 0x29
 8014a68:	d110      	bne.n	8014a8c <I2C_Slave_ISR_DMA+0x110>
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	4a36      	ldr	r2, [pc, #216]	@ (8014b48 <I2C_Slave_ISR_DMA+0x1cc>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d00c      	beq.n	8014a8c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	2210      	movs	r2, #16
 8014a78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	0018      	movs	r0, r3
 8014a7e:	f000 fd88 	bl	8015592 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	0018      	movs	r0, r3
 8014a86:	f000 f947 	bl	8014d18 <I2C_ITSlaveSeqCplt>
 8014a8a:	e03d      	b.n	8014b08 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2210      	movs	r2, #16
 8014a92:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8014a94:	e03e      	b.n	8014b14 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2210      	movs	r2, #16
 8014a9c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014aa2:	2204      	movs	r2, #4
 8014aa4:	431a      	orrs	r2, r3
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8014aaa:	2317      	movs	r3, #23
 8014aac:	18fb      	adds	r3, r7, r3
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	2141      	movs	r1, #65	@ 0x41
 8014ab2:	5c52      	ldrb	r2, [r2, r1]
 8014ab4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d004      	beq.n	8014ac6 <I2C_Slave_ISR_DMA+0x14a>
 8014abc:	69ba      	ldr	r2, [r7, #24]
 8014abe:	2380      	movs	r3, #128	@ 0x80
 8014ac0:	045b      	lsls	r3, r3, #17
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d126      	bne.n	8014b14 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014ac6:	2217      	movs	r2, #23
 8014ac8:	18bb      	adds	r3, r7, r2
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	2b21      	cmp	r3, #33	@ 0x21
 8014ace:	d003      	beq.n	8014ad8 <I2C_Slave_ISR_DMA+0x15c>
 8014ad0:	18bb      	adds	r3, r7, r2
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b29      	cmp	r3, #41	@ 0x29
 8014ad6:	d103      	bne.n	8014ae0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	2221      	movs	r2, #33	@ 0x21
 8014adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ade:	e00b      	b.n	8014af8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014ae0:	2217      	movs	r2, #23
 8014ae2:	18bb      	adds	r3, r7, r2
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	2b22      	cmp	r3, #34	@ 0x22
 8014ae8:	d003      	beq.n	8014af2 <I2C_Slave_ISR_DMA+0x176>
 8014aea:	18bb      	adds	r3, r7, r2
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8014af0:	d102      	bne.n	8014af8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2222      	movs	r2, #34	@ 0x22
 8014af6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	0011      	movs	r1, r2
 8014b00:	0018      	movs	r0, r3
 8014b02:	f000 fc1b 	bl	801533c <I2C_ITError>
      if (treatdmanack == 1U)
 8014b06:	e005      	b.n	8014b14 <I2C_Slave_ISR_DMA+0x198>
 8014b08:	e004      	b.n	8014b14 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2210      	movs	r2, #16
 8014b10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014b12:	e00f      	b.n	8014b34 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8014b14:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014b16:	e00d      	b.n	8014b34 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	2208      	movs	r2, #8
 8014b1c:	4013      	ands	r3, r2
 8014b1e:	d009      	beq.n	8014b34 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2208      	movs	r2, #8
 8014b24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014b26:	d005      	beq.n	8014b34 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8014b28:	68ba      	ldr	r2, [r7, #8]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	0011      	movs	r1, r2
 8014b2e:	0018      	movs	r0, r3
 8014b30:	f000 f80c 	bl	8014b4c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2240      	movs	r2, #64	@ 0x40
 8014b38:	2100      	movs	r1, #0
 8014b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	0018      	movs	r0, r3
 8014b40:	46bd      	mov	sp, r7
 8014b42:	b008      	add	sp, #32
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	46c0      	nop			@ (mov r8, r8)
 8014b48:	ffff0000 	.word	0xffff0000

08014b4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014b4c:	b5b0      	push	{r4, r5, r7, lr}
 8014b4e:	b084      	sub	sp, #16
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2241      	movs	r2, #65	@ 0x41
 8014b5a:	5c9b      	ldrb	r3, [r3, r2]
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	001a      	movs	r2, r3
 8014b60:	2328      	movs	r3, #40	@ 0x28
 8014b62:	4013      	ands	r3, r2
 8014b64:	2b28      	cmp	r3, #40	@ 0x28
 8014b66:	d000      	beq.n	8014b6a <I2C_ITAddrCplt+0x1e>
 8014b68:	e088      	b.n	8014c7c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	699b      	ldr	r3, [r3, #24]
 8014b70:	0c1b      	lsrs	r3, r3, #16
 8014b72:	b2da      	uxtb	r2, r3
 8014b74:	250f      	movs	r5, #15
 8014b76:	197b      	adds	r3, r7, r5
 8014b78:	2101      	movs	r1, #1
 8014b7a:	400a      	ands	r2, r1
 8014b7c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	699b      	ldr	r3, [r3, #24]
 8014b84:	0c1b      	lsrs	r3, r3, #16
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	200c      	movs	r0, #12
 8014b8a:	183b      	adds	r3, r7, r0
 8014b8c:	21fe      	movs	r1, #254	@ 0xfe
 8014b8e:	400a      	ands	r2, r1
 8014b90:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	b29a      	uxth	r2, r3
 8014b9a:	240a      	movs	r4, #10
 8014b9c:	193b      	adds	r3, r7, r4
 8014b9e:	0592      	lsls	r2, r2, #22
 8014ba0:	0d92      	lsrs	r2, r2, #22
 8014ba2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	68db      	ldr	r3, [r3, #12]
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	2308      	movs	r3, #8
 8014bae:	18fb      	adds	r3, r7, r3
 8014bb0:	21fe      	movs	r1, #254	@ 0xfe
 8014bb2:	400a      	ands	r2, r1
 8014bb4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	2b02      	cmp	r3, #2
 8014bbc:	d148      	bne.n	8014c50 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8014bbe:	0021      	movs	r1, r4
 8014bc0:	187b      	adds	r3, r7, r1
 8014bc2:	881b      	ldrh	r3, [r3, #0]
 8014bc4:	09db      	lsrs	r3, r3, #7
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	183b      	adds	r3, r7, r0
 8014bca:	881b      	ldrh	r3, [r3, #0]
 8014bcc:	4053      	eors	r3, r2
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	001a      	movs	r2, r3
 8014bd2:	2306      	movs	r3, #6
 8014bd4:	4013      	ands	r3, r2
 8014bd6:	d120      	bne.n	8014c1a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8014bd8:	183b      	adds	r3, r7, r0
 8014bda:	187a      	adds	r2, r7, r1
 8014bdc:	8812      	ldrh	r2, [r2, #0]
 8014bde:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014be4:	1c5a      	adds	r2, r3, #1
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014bee:	2b02      	cmp	r3, #2
 8014bf0:	d14c      	bne.n	8014c8c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	2208      	movs	r2, #8
 8014bfe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2240      	movs	r2, #64	@ 0x40
 8014c04:	2100      	movs	r1, #0
 8014c06:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014c08:	183b      	adds	r3, r7, r0
 8014c0a:	881a      	ldrh	r2, [r3, #0]
 8014c0c:	197b      	adds	r3, r7, r5
 8014c0e:	7819      	ldrb	r1, [r3, #0]
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	0018      	movs	r0, r3
 8014c14:	f7ff fa1b 	bl	801404e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014c18:	e038      	b.n	8014c8c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8014c1a:	240c      	movs	r4, #12
 8014c1c:	193b      	adds	r3, r7, r4
 8014c1e:	2208      	movs	r2, #8
 8014c20:	18ba      	adds	r2, r7, r2
 8014c22:	8812      	ldrh	r2, [r2, #0]
 8014c24:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014c26:	2380      	movs	r3, #128	@ 0x80
 8014c28:	021a      	lsls	r2, r3, #8
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	0011      	movs	r1, r2
 8014c2e:	0018      	movs	r0, r3
 8014c30:	f000 fe6e 	bl	8015910 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2240      	movs	r2, #64	@ 0x40
 8014c38:	2100      	movs	r1, #0
 8014c3a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014c3c:	193b      	adds	r3, r7, r4
 8014c3e:	881a      	ldrh	r2, [r3, #0]
 8014c40:	230f      	movs	r3, #15
 8014c42:	18fb      	adds	r3, r7, r3
 8014c44:	7819      	ldrb	r1, [r3, #0]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	0018      	movs	r0, r3
 8014c4a:	f7ff fa00 	bl	801404e <HAL_I2C_AddrCallback>
}
 8014c4e:	e01d      	b.n	8014c8c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014c50:	2380      	movs	r3, #128	@ 0x80
 8014c52:	021a      	lsls	r2, r3, #8
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	0011      	movs	r1, r2
 8014c58:	0018      	movs	r0, r3
 8014c5a:	f000 fe59 	bl	8015910 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2240      	movs	r2, #64	@ 0x40
 8014c62:	2100      	movs	r1, #0
 8014c64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014c66:	230c      	movs	r3, #12
 8014c68:	18fb      	adds	r3, r7, r3
 8014c6a:	881a      	ldrh	r2, [r3, #0]
 8014c6c:	230f      	movs	r3, #15
 8014c6e:	18fb      	adds	r3, r7, r3
 8014c70:	7819      	ldrb	r1, [r3, #0]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	0018      	movs	r0, r3
 8014c76:	f7ff f9ea 	bl	801404e <HAL_I2C_AddrCallback>
}
 8014c7a:	e007      	b.n	8014c8c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2208      	movs	r2, #8
 8014c82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2240      	movs	r2, #64	@ 0x40
 8014c88:	2100      	movs	r1, #0
 8014c8a:	5499      	strb	r1, [r3, r2]
}
 8014c8c:	46c0      	nop			@ (mov r8, r8)
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	b004      	add	sp, #16
 8014c92:	bdb0      	pop	{r4, r5, r7, pc}

08014c94 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2242      	movs	r2, #66	@ 0x42
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2241      	movs	r2, #65	@ 0x41
 8014ca8:	5c9b      	ldrb	r3, [r3, r2]
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	2b21      	cmp	r3, #33	@ 0x21
 8014cae:	d117      	bne.n	8014ce0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2241      	movs	r2, #65	@ 0x41
 8014cb4:	2120      	movs	r1, #32
 8014cb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2211      	movs	r2, #17
 8014cbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2101      	movs	r1, #1
 8014cc8:	0018      	movs	r0, r3
 8014cca:	f000 fe21 	bl	8015910 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2240      	movs	r2, #64	@ 0x40
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	0018      	movs	r0, r3
 8014cda:	f7ff f998 	bl	801400e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014cde:	e016      	b.n	8014d0e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2241      	movs	r2, #65	@ 0x41
 8014ce4:	2120      	movs	r1, #32
 8014ce6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2212      	movs	r2, #18
 8014cec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2102      	movs	r1, #2
 8014cf8:	0018      	movs	r0, r3
 8014cfa:	f000 fe09 	bl	8015910 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2240      	movs	r2, #64	@ 0x40
 8014d02:	2100      	movs	r1, #0
 8014d04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	0018      	movs	r0, r3
 8014d0a:	f7ff f988 	bl	801401e <HAL_I2C_MasterRxCpltCallback>
}
 8014d0e:	46c0      	nop			@ (mov r8, r8)
 8014d10:	46bd      	mov	sp, r7
 8014d12:	b002      	add	sp, #8
 8014d14:	bd80      	pop	{r7, pc}
	...

08014d18 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2242      	movs	r2, #66	@ 0x42
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014d30:	68fa      	ldr	r2, [r7, #12]
 8014d32:	2380      	movs	r3, #128	@ 0x80
 8014d34:	01db      	lsls	r3, r3, #7
 8014d36:	4013      	ands	r3, r2
 8014d38:	d008      	beq.n	8014d4c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4924      	ldr	r1, [pc, #144]	@ (8014dd8 <I2C_ITSlaveSeqCplt+0xc0>)
 8014d46:	400a      	ands	r2, r1
 8014d48:	601a      	str	r2, [r3, #0]
 8014d4a:	e00c      	b.n	8014d66 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	2380      	movs	r3, #128	@ 0x80
 8014d50:	021b      	lsls	r3, r3, #8
 8014d52:	4013      	ands	r3, r2
 8014d54:	d007      	beq.n	8014d66 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	491e      	ldr	r1, [pc, #120]	@ (8014ddc <I2C_ITSlaveSeqCplt+0xc4>)
 8014d62:	400a      	ands	r2, r1
 8014d64:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2241      	movs	r2, #65	@ 0x41
 8014d6a:	5c9b      	ldrb	r3, [r3, r2]
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	2b29      	cmp	r3, #41	@ 0x29
 8014d70:	d114      	bne.n	8014d9c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2241      	movs	r2, #65	@ 0x41
 8014d76:	2128      	movs	r1, #40	@ 0x28
 8014d78:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2221      	movs	r2, #33	@ 0x21
 8014d7e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2101      	movs	r1, #1
 8014d84:	0018      	movs	r0, r3
 8014d86:	f000 fdc3 	bl	8015910 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2240      	movs	r2, #64	@ 0x40
 8014d8e:	2100      	movs	r1, #0
 8014d90:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	0018      	movs	r0, r3
 8014d96:	f7ff f94a 	bl	801402e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014d9a:	e019      	b.n	8014dd0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2241      	movs	r2, #65	@ 0x41
 8014da0:	5c9b      	ldrb	r3, [r3, r2]
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014da6:	d113      	bne.n	8014dd0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2241      	movs	r2, #65	@ 0x41
 8014dac:	2128      	movs	r1, #40	@ 0x28
 8014dae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2222      	movs	r2, #34	@ 0x22
 8014db4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2102      	movs	r1, #2
 8014dba:	0018      	movs	r0, r3
 8014dbc:	f000 fda8 	bl	8015910 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2240      	movs	r2, #64	@ 0x40
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	0018      	movs	r0, r3
 8014dcc:	f7ff f937 	bl	801403e <HAL_I2C_SlaveRxCpltCallback>
}
 8014dd0:	46c0      	nop			@ (mov r8, r8)
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	b004      	add	sp, #16
 8014dd6:	bd80      	pop	{r7, pc}
 8014dd8:	ffffbfff 	.word	0xffffbfff
 8014ddc:	ffff7fff 	.word	0xffff7fff

08014de0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b086      	sub	sp, #24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	2220      	movs	r2, #32
 8014df4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2241      	movs	r2, #65	@ 0x41
 8014dfa:	5c9b      	ldrb	r3, [r3, r2]
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	2b21      	cmp	r3, #33	@ 0x21
 8014e00:	d108      	bne.n	8014e14 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2101      	movs	r1, #1
 8014e06:	0018      	movs	r0, r3
 8014e08:	f000 fd82 	bl	8015910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2211      	movs	r2, #17
 8014e10:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e12:	e00d      	b.n	8014e30 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2241      	movs	r2, #65	@ 0x41
 8014e18:	5c9b      	ldrb	r3, [r3, r2]
 8014e1a:	b2db      	uxtb	r3, r3
 8014e1c:	2b22      	cmp	r3, #34	@ 0x22
 8014e1e:	d107      	bne.n	8014e30 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2102      	movs	r1, #2
 8014e24:	0018      	movs	r0, r3
 8014e26:	f000 fd73 	bl	8015910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2212      	movs	r2, #18
 8014e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	685a      	ldr	r2, [r3, #4]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	494e      	ldr	r1, [pc, #312]	@ (8014f74 <I2C_ITMasterCplt+0x194>)
 8014e3c:	400a      	ands	r2, r1
 8014e3e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4a4b      	ldr	r2, [pc, #300]	@ (8014f78 <I2C_ITMasterCplt+0x198>)
 8014e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2210      	movs	r2, #16
 8014e50:	4013      	ands	r3, r2
 8014e52:	d009      	beq.n	8014e68 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2210      	movs	r2, #16
 8014e5a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e60:	2204      	movs	r2, #4
 8014e62:	431a      	orrs	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2241      	movs	r2, #65	@ 0x41
 8014e6c:	5c9b      	ldrb	r3, [r3, r2]
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	2b60      	cmp	r3, #96	@ 0x60
 8014e72:	d109      	bne.n	8014e88 <I2C_ITMasterCplt+0xa8>
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	2204      	movs	r2, #4
 8014e78:	4013      	ands	r3, r2
 8014e7a:	d005      	beq.n	8014e88 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8014e86:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	0018      	movs	r0, r3
 8014e8c:	f000 fb81 	bl	8015592 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e94:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2241      	movs	r2, #65	@ 0x41
 8014e9a:	5c9b      	ldrb	r3, [r3, r2]
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b60      	cmp	r3, #96	@ 0x60
 8014ea0:	d002      	beq.n	8014ea8 <I2C_ITMasterCplt+0xc8>
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d007      	beq.n	8014eb8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	0011      	movs	r1, r2
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	f000 fa43 	bl	801533c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014eb6:	e058      	b.n	8014f6a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2241      	movs	r2, #65	@ 0x41
 8014ebc:	5c9b      	ldrb	r3, [r3, r2]
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b21      	cmp	r3, #33	@ 0x21
 8014ec2:	d126      	bne.n	8014f12 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2241      	movs	r2, #65	@ 0x41
 8014ec8:	2120      	movs	r1, #32
 8014eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2200      	movs	r2, #0
 8014ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2242      	movs	r2, #66	@ 0x42
 8014ed6:	5c9b      	ldrb	r3, [r3, r2]
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	2b40      	cmp	r3, #64	@ 0x40
 8014edc:	d10c      	bne.n	8014ef8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	2242      	movs	r2, #66	@ 0x42
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2240      	movs	r2, #64	@ 0x40
 8014eea:	2100      	movs	r1, #0
 8014eec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	0018      	movs	r0, r3
 8014ef2:	f7ff f8c4 	bl	801407e <HAL_I2C_MemTxCpltCallback>
}
 8014ef6:	e038      	b.n	8014f6a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2242      	movs	r2, #66	@ 0x42
 8014efc:	2100      	movs	r1, #0
 8014efe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2240      	movs	r2, #64	@ 0x40
 8014f04:	2100      	movs	r1, #0
 8014f06:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	0018      	movs	r0, r3
 8014f0c:	f7ff f87f 	bl	801400e <HAL_I2C_MasterTxCpltCallback>
}
 8014f10:	e02b      	b.n	8014f6a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2241      	movs	r2, #65	@ 0x41
 8014f16:	5c9b      	ldrb	r3, [r3, r2]
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	2b22      	cmp	r3, #34	@ 0x22
 8014f1c:	d125      	bne.n	8014f6a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2241      	movs	r2, #65	@ 0x41
 8014f22:	2120      	movs	r1, #32
 8014f24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2242      	movs	r2, #66	@ 0x42
 8014f30:	5c9b      	ldrb	r3, [r3, r2]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b40      	cmp	r3, #64	@ 0x40
 8014f36:	d10c      	bne.n	8014f52 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2242      	movs	r2, #66	@ 0x42
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2240      	movs	r2, #64	@ 0x40
 8014f44:	2100      	movs	r1, #0
 8014f46:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	f7ff f89f 	bl	801408e <HAL_I2C_MemRxCpltCallback>
}
 8014f50:	e00b      	b.n	8014f6a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2242      	movs	r2, #66	@ 0x42
 8014f56:	2100      	movs	r1, #0
 8014f58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2240      	movs	r2, #64	@ 0x40
 8014f5e:	2100      	movs	r1, #0
 8014f60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	0018      	movs	r0, r3
 8014f66:	f7ff f85a 	bl	801401e <HAL_I2C_MasterRxCpltCallback>
}
 8014f6a:	46c0      	nop			@ (mov r8, r8)
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	b006      	add	sp, #24
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	46c0      	nop			@ (mov r8, r8)
 8014f74:	fe00e800 	.word	0xfe00e800
 8014f78:	ffff0000 	.word	0xffff0000

08014f7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f96:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014f98:	200b      	movs	r0, #11
 8014f9a:	183b      	adds	r3, r7, r0
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	2141      	movs	r1, #65	@ 0x41
 8014fa0:	5c52      	ldrb	r2, [r2, r1]
 8014fa2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2220      	movs	r2, #32
 8014faa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014fac:	183b      	adds	r3, r7, r0
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	2b21      	cmp	r3, #33	@ 0x21
 8014fb2:	d003      	beq.n	8014fbc <I2C_ITSlaveCplt+0x40>
 8014fb4:	183b      	adds	r3, r7, r0
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	2b29      	cmp	r3, #41	@ 0x29
 8014fba:	d109      	bne.n	8014fd0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8014fbc:	4aac      	ldr	r2, [pc, #688]	@ (8015270 <I2C_ITSlaveCplt+0x2f4>)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	0011      	movs	r1, r2
 8014fc2:	0018      	movs	r0, r3
 8014fc4:	f000 fca4 	bl	8015910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2221      	movs	r2, #33	@ 0x21
 8014fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8014fce:	e020      	b.n	8015012 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014fd0:	220b      	movs	r2, #11
 8014fd2:	18bb      	adds	r3, r7, r2
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	2b22      	cmp	r3, #34	@ 0x22
 8014fd8:	d003      	beq.n	8014fe2 <I2C_ITSlaveCplt+0x66>
 8014fda:	18bb      	adds	r3, r7, r2
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fe0:	d109      	bne.n	8014ff6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014fe2:	4aa4      	ldr	r2, [pc, #656]	@ (8015274 <I2C_ITSlaveCplt+0x2f8>)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	0011      	movs	r1, r2
 8014fe8:	0018      	movs	r0, r3
 8014fea:	f000 fc91 	bl	8015910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2222      	movs	r2, #34	@ 0x22
 8014ff2:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ff4:	e00d      	b.n	8015012 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8014ff6:	230b      	movs	r3, #11
 8014ff8:	18fb      	adds	r3, r7, r3
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	2b28      	cmp	r3, #40	@ 0x28
 8014ffe:	d108      	bne.n	8015012 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8015000:	4a9d      	ldr	r2, [pc, #628]	@ (8015278 <I2C_ITSlaveCplt+0x2fc>)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	0011      	movs	r1, r2
 8015006:	0018      	movs	r0, r3
 8015008:	f000 fc82 	bl	8015910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	685a      	ldr	r2, [r3, #4]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2180      	movs	r1, #128	@ 0x80
 801501e:	0209      	lsls	r1, r1, #8
 8015020:	430a      	orrs	r2, r1
 8015022:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	685a      	ldr	r2, [r3, #4]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	4993      	ldr	r1, [pc, #588]	@ (801527c <I2C_ITSlaveCplt+0x300>)
 8015030:	400a      	ands	r2, r1
 8015032:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	0018      	movs	r0, r3
 8015038:	f000 faab 	bl	8015592 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801503c:	693a      	ldr	r2, [r7, #16]
 801503e:	2380      	movs	r3, #128	@ 0x80
 8015040:	01db      	lsls	r3, r3, #7
 8015042:	4013      	ands	r3, r2
 8015044:	d013      	beq.n	801506e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	498b      	ldr	r1, [pc, #556]	@ (8015280 <I2C_ITSlaveCplt+0x304>)
 8015052:	400a      	ands	r2, r1
 8015054:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801505a:	2b00      	cmp	r3, #0
 801505c:	d01f      	beq.n	801509e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	b29a      	uxth	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801506c:	e017      	b.n	801509e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801506e:	693a      	ldr	r2, [r7, #16]
 8015070:	2380      	movs	r3, #128	@ 0x80
 8015072:	021b      	lsls	r3, r3, #8
 8015074:	4013      	ands	r3, r2
 8015076:	d012      	beq.n	801509e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	681a      	ldr	r2, [r3, #0]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	4980      	ldr	r1, [pc, #512]	@ (8015284 <I2C_ITSlaveCplt+0x308>)
 8015084:	400a      	ands	r2, r1
 8015086:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801508c:	2b00      	cmp	r3, #0
 801508e:	d006      	beq.n	801509e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	b29a      	uxth	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2204      	movs	r2, #4
 80150a2:	4013      	ands	r3, r2
 80150a4:	d020      	beq.n	80150e8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	2204      	movs	r2, #4
 80150aa:	4393      	bics	r3, r2
 80150ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150b8:	b2d2      	uxtb	r2, r2
 80150ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150c0:	1c5a      	adds	r2, r3, #1
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d00c      	beq.n	80150e8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150d2:	3b01      	subs	r3, #1
 80150d4:	b29a      	uxth	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150de:	b29b      	uxth	r3, r3
 80150e0:	3b01      	subs	r3, #1
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d005      	beq.n	80150fe <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150f6:	2204      	movs	r2, #4
 80150f8:	431a      	orrs	r2, r3
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	2210      	movs	r2, #16
 8015102:	4013      	ands	r3, r2
 8015104:	d04f      	beq.n	80151a6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	2210      	movs	r2, #16
 801510a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801510c:	d04b      	beq.n	80151a6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015112:	b29b      	uxth	r3, r3
 8015114:	2b00      	cmp	r3, #0
 8015116:	d12d      	bne.n	8015174 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2241      	movs	r2, #65	@ 0x41
 801511c:	5c9b      	ldrb	r3, [r3, r2]
 801511e:	b2db      	uxtb	r3, r3
 8015120:	2b28      	cmp	r3, #40	@ 0x28
 8015122:	d10b      	bne.n	801513c <I2C_ITSlaveCplt+0x1c0>
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	2380      	movs	r3, #128	@ 0x80
 8015128:	049b      	lsls	r3, r3, #18
 801512a:	429a      	cmp	r2, r3
 801512c:	d106      	bne.n	801513c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801512e:	697a      	ldr	r2, [r7, #20]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	0011      	movs	r1, r2
 8015134:	0018      	movs	r0, r3
 8015136:	f000 f8a9 	bl	801528c <I2C_ITListenCplt>
 801513a:	e034      	b.n	80151a6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2241      	movs	r2, #65	@ 0x41
 8015140:	5c9b      	ldrb	r3, [r3, r2]
 8015142:	b2db      	uxtb	r3, r3
 8015144:	2b29      	cmp	r3, #41	@ 0x29
 8015146:	d110      	bne.n	801516a <I2C_ITSlaveCplt+0x1ee>
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	4a4f      	ldr	r2, [pc, #316]	@ (8015288 <I2C_ITSlaveCplt+0x30c>)
 801514c:	4293      	cmp	r3, r2
 801514e:	d00c      	beq.n	801516a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2210      	movs	r2, #16
 8015156:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	0018      	movs	r0, r3
 801515c:	f000 fa19 	bl	8015592 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	0018      	movs	r0, r3
 8015164:	f7ff fdd8 	bl	8014d18 <I2C_ITSlaveSeqCplt>
 8015168:	e01d      	b.n	80151a6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2210      	movs	r2, #16
 8015170:	61da      	str	r2, [r3, #28]
 8015172:	e018      	b.n	80151a6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2210      	movs	r2, #16
 801517a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015180:	2204      	movs	r2, #4
 8015182:	431a      	orrs	r2, r3
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d004      	beq.n	8015198 <I2C_ITSlaveCplt+0x21c>
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	2380      	movs	r3, #128	@ 0x80
 8015192:	045b      	lsls	r3, r3, #17
 8015194:	429a      	cmp	r2, r3
 8015196:	d106      	bne.n	80151a6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	0011      	movs	r1, r2
 80151a0:	0018      	movs	r0, r3
 80151a2:	f000 f8cb 	bl	801533c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2242      	movs	r2, #66	@ 0x42
 80151aa:	2100      	movs	r1, #0
 80151ac:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2200      	movs	r2, #0
 80151b2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d013      	beq.n	80151e4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	0011      	movs	r1, r2
 80151c4:	0018      	movs	r0, r3
 80151c6:	f000 f8b9 	bl	801533c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2241      	movs	r2, #65	@ 0x41
 80151ce:	5c9b      	ldrb	r3, [r3, r2]
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b28      	cmp	r3, #40	@ 0x28
 80151d4:	d147      	bne.n	8015266 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80151d6:	697a      	ldr	r2, [r7, #20]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	0011      	movs	r1, r2
 80151dc:	0018      	movs	r0, r3
 80151de:	f000 f855 	bl	801528c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80151e2:	e040      	b.n	8015266 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151e8:	4a27      	ldr	r2, [pc, #156]	@ (8015288 <I2C_ITSlaveCplt+0x30c>)
 80151ea:	4293      	cmp	r3, r2
 80151ec:	d016      	beq.n	801521c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	0018      	movs	r0, r3
 80151f2:	f7ff fd91 	bl	8014d18 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4a23      	ldr	r2, [pc, #140]	@ (8015288 <I2C_ITSlaveCplt+0x30c>)
 80151fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2241      	movs	r2, #65	@ 0x41
 8015200:	2120      	movs	r1, #32
 8015202:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2200      	movs	r2, #0
 8015208:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2240      	movs	r2, #64	@ 0x40
 801520e:	2100      	movs	r1, #0
 8015210:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	0018      	movs	r0, r3
 8015216:	f7fe ff2a 	bl	801406e <HAL_I2C_ListenCpltCallback>
}
 801521a:	e024      	b.n	8015266 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2241      	movs	r2, #65	@ 0x41
 8015220:	5c9b      	ldrb	r3, [r3, r2]
 8015222:	b2db      	uxtb	r3, r3
 8015224:	2b22      	cmp	r3, #34	@ 0x22
 8015226:	d10f      	bne.n	8015248 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2241      	movs	r2, #65	@ 0x41
 801522c:	2120      	movs	r1, #32
 801522e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2240      	movs	r2, #64	@ 0x40
 801523a:	2100      	movs	r1, #0
 801523c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	0018      	movs	r0, r3
 8015242:	f7fe fefc 	bl	801403e <HAL_I2C_SlaveRxCpltCallback>
}
 8015246:	e00e      	b.n	8015266 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2241      	movs	r2, #65	@ 0x41
 801524c:	2120      	movs	r1, #32
 801524e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2200      	movs	r2, #0
 8015254:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2240      	movs	r2, #64	@ 0x40
 801525a:	2100      	movs	r1, #0
 801525c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	0018      	movs	r0, r3
 8015262:	f7fe fee4 	bl	801402e <HAL_I2C_SlaveTxCpltCallback>
}
 8015266:	46c0      	nop			@ (mov r8, r8)
 8015268:	46bd      	mov	sp, r7
 801526a:	b006      	add	sp, #24
 801526c:	bd80      	pop	{r7, pc}
 801526e:	46c0      	nop			@ (mov r8, r8)
 8015270:	00008001 	.word	0x00008001
 8015274:	00008002 	.word	0x00008002
 8015278:	00008003 	.word	0x00008003
 801527c:	fe00e800 	.word	0xfe00e800
 8015280:	ffffbfff 	.word	0xffffbfff
 8015284:	ffff7fff 	.word	0xffff7fff
 8015288:	ffff0000 	.word	0xffff0000

0801528c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	4a26      	ldr	r2, [pc, #152]	@ (8015334 <I2C_ITListenCplt+0xa8>)
 801529a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2200      	movs	r2, #0
 80152a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2241      	movs	r2, #65	@ 0x41
 80152a6:	2120      	movs	r1, #32
 80152a8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2242      	movs	r2, #66	@ 0x42
 80152ae:	2100      	movs	r1, #0
 80152b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2200      	movs	r2, #0
 80152b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	2204      	movs	r2, #4
 80152bc:	4013      	ands	r3, r2
 80152be:	d022      	beq.n	8015306 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ca:	b2d2      	uxtb	r2, r2
 80152cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152d2:	1c5a      	adds	r2, r3, #1
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d012      	beq.n	8015306 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152e4:	3b01      	subs	r3, #1
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	3b01      	subs	r3, #1
 80152f4:	b29a      	uxth	r2, r3
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152fe:	2204      	movs	r2, #4
 8015300:	431a      	orrs	r2, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8015306:	4a0c      	ldr	r2, [pc, #48]	@ (8015338 <I2C_ITListenCplt+0xac>)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	0011      	movs	r1, r2
 801530c:	0018      	movs	r0, r3
 801530e:	f000 faff 	bl	8015910 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	2210      	movs	r2, #16
 8015318:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2240      	movs	r2, #64	@ 0x40
 801531e:	2100      	movs	r1, #0
 8015320:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	0018      	movs	r0, r3
 8015326:	f7fe fea2 	bl	801406e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801532a:	46c0      	nop			@ (mov r8, r8)
 801532c:	46bd      	mov	sp, r7
 801532e:	b002      	add	sp, #8
 8015330:	bd80      	pop	{r7, pc}
 8015332:	46c0      	nop			@ (mov r8, r8)
 8015334:	ffff0000 	.word	0xffff0000
 8015338:	00008003 	.word	0x00008003

0801533c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015346:	200f      	movs	r0, #15
 8015348:	183b      	adds	r3, r7, r0
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	2141      	movs	r1, #65	@ 0x41
 801534e:	5c52      	ldrb	r2, [r2, r1]
 8015350:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2242      	movs	r2, #66	@ 0x42
 8015356:	2100      	movs	r1, #0
 8015358:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	4a72      	ldr	r2, [pc, #456]	@ (8015528 <I2C_ITError+0x1ec>)
 801535e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2200      	movs	r2, #0
 8015364:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	431a      	orrs	r2, r3
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8015372:	183b      	adds	r3, r7, r0
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	2b28      	cmp	r3, #40	@ 0x28
 8015378:	d007      	beq.n	801538a <I2C_ITError+0x4e>
 801537a:	183b      	adds	r3, r7, r0
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	2b29      	cmp	r3, #41	@ 0x29
 8015380:	d003      	beq.n	801538a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8015382:	183b      	adds	r3, r7, r0
 8015384:	781b      	ldrb	r3, [r3, #0]
 8015386:	2b2a      	cmp	r3, #42	@ 0x2a
 8015388:	d10c      	bne.n	80153a4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2103      	movs	r1, #3
 801538e:	0018      	movs	r0, r3
 8015390:	f000 fabe 	bl	8015910 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2241      	movs	r2, #65	@ 0x41
 8015398:	2128      	movs	r1, #40	@ 0x28
 801539a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	4a63      	ldr	r2, [pc, #396]	@ (801552c <I2C_ITError+0x1f0>)
 80153a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80153a2:	e032      	b.n	801540a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80153a4:	4a62      	ldr	r2, [pc, #392]	@ (8015530 <I2C_ITError+0x1f4>)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	0011      	movs	r1, r2
 80153aa:	0018      	movs	r0, r3
 80153ac:	f000 fab0 	bl	8015910 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	0018      	movs	r0, r3
 80153b4:	f000 f8ed 	bl	8015592 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2241      	movs	r2, #65	@ 0x41
 80153bc:	5c9b      	ldrb	r3, [r3, r2]
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b60      	cmp	r3, #96	@ 0x60
 80153c2:	d01f      	beq.n	8015404 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2241      	movs	r2, #65	@ 0x41
 80153c8:	2120      	movs	r1, #32
 80153ca:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	699b      	ldr	r3, [r3, #24]
 80153d2:	2220      	movs	r2, #32
 80153d4:	4013      	ands	r3, r2
 80153d6:	2b20      	cmp	r3, #32
 80153d8:	d114      	bne.n	8015404 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	699b      	ldr	r3, [r3, #24]
 80153e0:	2210      	movs	r2, #16
 80153e2:	4013      	ands	r3, r2
 80153e4:	2b10      	cmp	r3, #16
 80153e6:	d109      	bne.n	80153fc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2210      	movs	r2, #16
 80153ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153f4:	2204      	movs	r2, #4
 80153f6:	431a      	orrs	r2, r3
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2220      	movs	r2, #32
 8015402:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801540e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015414:	2b00      	cmp	r3, #0
 8015416:	d03b      	beq.n	8015490 <I2C_ITError+0x154>
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	2b11      	cmp	r3, #17
 801541c:	d002      	beq.n	8015424 <I2C_ITError+0xe8>
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	2b21      	cmp	r3, #33	@ 0x21
 8015422:	d135      	bne.n	8015490 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	2380      	movs	r3, #128	@ 0x80
 801542c:	01db      	lsls	r3, r3, #7
 801542e:	401a      	ands	r2, r3
 8015430:	2380      	movs	r3, #128	@ 0x80
 8015432:	01db      	lsls	r3, r3, #7
 8015434:	429a      	cmp	r2, r3
 8015436:	d107      	bne.n	8015448 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	493c      	ldr	r1, [pc, #240]	@ (8015534 <I2C_ITError+0x1f8>)
 8015444:	400a      	ands	r2, r1
 8015446:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801544c:	0018      	movs	r0, r3
 801544e:	f7fd fd4b 	bl	8012ee8 <HAL_DMA_GetState>
 8015452:	0003      	movs	r3, r0
 8015454:	2b01      	cmp	r3, #1
 8015456:	d016      	beq.n	8015486 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801545c:	4a36      	ldr	r2, [pc, #216]	@ (8015538 <I2C_ITError+0x1fc>)
 801545e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2240      	movs	r2, #64	@ 0x40
 8015464:	2100      	movs	r1, #0
 8015466:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801546c:	0018      	movs	r0, r3
 801546e:	f7fd fc0f 	bl	8012c90 <HAL_DMA_Abort_IT>
 8015472:	1e03      	subs	r3, r0, #0
 8015474:	d051      	beq.n	801551a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801547a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015480:	0018      	movs	r0, r3
 8015482:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015484:	e049      	b.n	801551a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	0018      	movs	r0, r3
 801548a:	f000 f859 	bl	8015540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801548e:	e044      	b.n	801551a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015494:	2b00      	cmp	r3, #0
 8015496:	d03b      	beq.n	8015510 <I2C_ITError+0x1d4>
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	2b12      	cmp	r3, #18
 801549c:	d002      	beq.n	80154a4 <I2C_ITError+0x168>
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	2b22      	cmp	r3, #34	@ 0x22
 80154a2:	d135      	bne.n	8015510 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	2380      	movs	r3, #128	@ 0x80
 80154ac:	021b      	lsls	r3, r3, #8
 80154ae:	401a      	ands	r2, r3
 80154b0:	2380      	movs	r3, #128	@ 0x80
 80154b2:	021b      	lsls	r3, r3, #8
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d107      	bne.n	80154c8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	491e      	ldr	r1, [pc, #120]	@ (801553c <I2C_ITError+0x200>)
 80154c4:	400a      	ands	r2, r1
 80154c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154cc:	0018      	movs	r0, r3
 80154ce:	f7fd fd0b 	bl	8012ee8 <HAL_DMA_GetState>
 80154d2:	0003      	movs	r3, r0
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d016      	beq.n	8015506 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154dc:	4a16      	ldr	r2, [pc, #88]	@ (8015538 <I2C_ITError+0x1fc>)
 80154de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2240      	movs	r2, #64	@ 0x40
 80154e4:	2100      	movs	r1, #0
 80154e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154ec:	0018      	movs	r0, r3
 80154ee:	f7fd fbcf 	bl	8012c90 <HAL_DMA_Abort_IT>
 80154f2:	1e03      	subs	r3, r0, #0
 80154f4:	d013      	beq.n	801551e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015500:	0018      	movs	r0, r3
 8015502:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015504:	e00b      	b.n	801551e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	0018      	movs	r0, r3
 801550a:	f000 f819 	bl	8015540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801550e:	e006      	b.n	801551e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	0018      	movs	r0, r3
 8015514:	f000 f814 	bl	8015540 <I2C_TreatErrorCallback>
  }
}
 8015518:	e002      	b.n	8015520 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801551a:	46c0      	nop			@ (mov r8, r8)
 801551c:	e000      	b.n	8015520 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801551e:	46c0      	nop			@ (mov r8, r8)
}
 8015520:	46c0      	nop			@ (mov r8, r8)
 8015522:	46bd      	mov	sp, r7
 8015524:	b004      	add	sp, #16
 8015526:	bd80      	pop	{r7, pc}
 8015528:	ffff0000 	.word	0xffff0000
 801552c:	0801432d 	.word	0x0801432d
 8015530:	00008003 	.word	0x00008003
 8015534:	ffffbfff 	.word	0xffffbfff
 8015538:	0801574b 	.word	0x0801574b
 801553c:	ffff7fff 	.word	0xffff7fff

08015540 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2241      	movs	r2, #65	@ 0x41
 801554c:	5c9b      	ldrb	r3, [r3, r2]
 801554e:	b2db      	uxtb	r3, r3
 8015550:	2b60      	cmp	r3, #96	@ 0x60
 8015552:	d10f      	bne.n	8015574 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2241      	movs	r2, #65	@ 0x41
 8015558:	2120      	movs	r1, #32
 801555a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2200      	movs	r2, #0
 8015560:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2240      	movs	r2, #64	@ 0x40
 8015566:	2100      	movs	r1, #0
 8015568:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	0018      	movs	r0, r3
 801556e:	f7fe fd9e 	bl	80140ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015572:	e00a      	b.n	801558a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2200      	movs	r2, #0
 8015578:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2240      	movs	r2, #64	@ 0x40
 801557e:	2100      	movs	r1, #0
 8015580:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	0018      	movs	r0, r3
 8015586:	f7fe fd8a 	bl	801409e <HAL_I2C_ErrorCallback>
}
 801558a:	46c0      	nop			@ (mov r8, r8)
 801558c:	46bd      	mov	sp, r7
 801558e:	b002      	add	sp, #8
 8015590:	bd80      	pop	{r7, pc}

08015592 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015592:	b580      	push	{r7, lr}
 8015594:	b082      	sub	sp, #8
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	699b      	ldr	r3, [r3, #24]
 80155a0:	2202      	movs	r2, #2
 80155a2:	4013      	ands	r3, r2
 80155a4:	2b02      	cmp	r3, #2
 80155a6:	d103      	bne.n	80155b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2200      	movs	r2, #0
 80155ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	699b      	ldr	r3, [r3, #24]
 80155b6:	2201      	movs	r2, #1
 80155b8:	4013      	ands	r3, r2
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d007      	beq.n	80155ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	699a      	ldr	r2, [r3, #24]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2101      	movs	r1, #1
 80155ca:	430a      	orrs	r2, r1
 80155cc:	619a      	str	r2, [r3, #24]
  }
}
 80155ce:	46c0      	nop			@ (mov r8, r8)
 80155d0:	46bd      	mov	sp, r7
 80155d2:	b002      	add	sp, #8
 80155d4:	bd80      	pop	{r7, pc}
	...

080155d8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	681a      	ldr	r2, [r3, #0]
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4920      	ldr	r1, [pc, #128]	@ (8015674 <I2C_DMAMasterTransmitCplt+0x9c>)
 80155f2:	400a      	ands	r2, r1
 80155f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d105      	bne.n	801560c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2120      	movs	r1, #32
 8015604:	0018      	movs	r0, r3
 8015606:	f000 f8f9 	bl	80157fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801560a:	e02e      	b.n	801566a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015610:	68fa      	ldr	r2, [r7, #12]
 8015612:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015614:	189a      	adds	r2, r3, r2
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801561e:	b29b      	uxth	r3, r3
 8015620:	2bff      	cmp	r3, #255	@ 0xff
 8015622:	d903      	bls.n	801562c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	22ff      	movs	r2, #255	@ 0xff
 8015628:	851a      	strh	r2, [r3, #40]	@ 0x28
 801562a:	e004      	b.n	8015636 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015630:	b29a      	uxth	r2, r3
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801563e:	0019      	movs	r1, r3
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	3328      	adds	r3, #40	@ 0x28
 8015646:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801564c:	f7fd fa3a 	bl	8012ac4 <HAL_DMA_Start_IT>
 8015650:	1e03      	subs	r3, r0, #0
 8015652:	d005      	beq.n	8015660 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2110      	movs	r1, #16
 8015658:	0018      	movs	r0, r3
 801565a:	f7ff fe6f 	bl	801533c <I2C_ITError>
}
 801565e:	e004      	b.n	801566a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2140      	movs	r1, #64	@ 0x40
 8015664:	0018      	movs	r0, r3
 8015666:	f000 f8c9 	bl	80157fc <I2C_Enable_IRQ>
}
 801566a:	46c0      	nop			@ (mov r8, r8)
 801566c:	46bd      	mov	sp, r7
 801566e:	b004      	add	sp, #16
 8015670:	bd80      	pop	{r7, pc}
 8015672:	46c0      	nop			@ (mov r8, r8)
 8015674:	ffffbfff 	.word	0xffffbfff

08015678 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015684:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	4920      	ldr	r1, [pc, #128]	@ (8015714 <I2C_DMAMasterReceiveCplt+0x9c>)
 8015692:	400a      	ands	r2, r1
 8015694:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801569a:	b29b      	uxth	r3, r3
 801569c:	2b00      	cmp	r3, #0
 801569e:	d105      	bne.n	80156ac <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2120      	movs	r1, #32
 80156a4:	0018      	movs	r0, r3
 80156a6:	f000 f8a9 	bl	80157fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80156aa:	e02e      	b.n	801570a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156b0:	68fa      	ldr	r2, [r7, #12]
 80156b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80156b4:	189a      	adds	r2, r3, r2
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156be:	b29b      	uxth	r3, r3
 80156c0:	2bff      	cmp	r3, #255	@ 0xff
 80156c2:	d903      	bls.n	80156cc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	22ff      	movs	r2, #255	@ 0xff
 80156c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80156ca:	e004      	b.n	80156d6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	3324      	adds	r3, #36	@ 0x24
 80156e0:	0019      	movs	r1, r3
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156e6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80156ec:	f7fd f9ea 	bl	8012ac4 <HAL_DMA_Start_IT>
 80156f0:	1e03      	subs	r3, r0, #0
 80156f2:	d005      	beq.n	8015700 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	2110      	movs	r1, #16
 80156f8:	0018      	movs	r0, r3
 80156fa:	f7ff fe1f 	bl	801533c <I2C_ITError>
}
 80156fe:	e004      	b.n	801570a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2140      	movs	r1, #64	@ 0x40
 8015704:	0018      	movs	r0, r3
 8015706:	f000 f879 	bl	80157fc <I2C_Enable_IRQ>
}
 801570a:	46c0      	nop			@ (mov r8, r8)
 801570c:	46bd      	mov	sp, r7
 801570e:	b004      	add	sp, #16
 8015710:	bd80      	pop	{r7, pc}
 8015712:	46c0      	nop			@ (mov r8, r8)
 8015714:	ffff7fff 	.word	0xffff7fff

08015718 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015724:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	685a      	ldr	r2, [r3, #4]
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	2180      	movs	r1, #128	@ 0x80
 8015732:	0209      	lsls	r1, r1, #8
 8015734:	430a      	orrs	r2, r1
 8015736:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2110      	movs	r1, #16
 801573c:	0018      	movs	r0, r3
 801573e:	f7ff fdfd 	bl	801533c <I2C_ITError>
}
 8015742:	46c0      	nop			@ (mov r8, r8)
 8015744:	46bd      	mov	sp, r7
 8015746:	b004      	add	sp, #16
 8015748:	bd80      	pop	{r7, pc}

0801574a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801574a:	b580      	push	{r7, lr}
 801574c:	b084      	sub	sp, #16
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015756:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801575c:	2b00      	cmp	r3, #0
 801575e:	d003      	beq.n	8015768 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015764:	2200      	movs	r2, #0
 8015766:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801576c:	2b00      	cmp	r3, #0
 801576e:	d003      	beq.n	8015778 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015774:	2200      	movs	r2, #0
 8015776:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	0018      	movs	r0, r3
 801577c:	f7ff fee0 	bl	8015540 <I2C_TreatErrorCallback>
}
 8015780:	46c0      	nop			@ (mov r8, r8)
 8015782:	46bd      	mov	sp, r7
 8015784:	b004      	add	sp, #16
 8015786:	bd80      	pop	{r7, pc}

08015788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8015788:	b590      	push	{r4, r7, lr}
 801578a:	b087      	sub	sp, #28
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	0008      	movs	r0, r1
 8015792:	0011      	movs	r1, r2
 8015794:	607b      	str	r3, [r7, #4]
 8015796:	240a      	movs	r4, #10
 8015798:	193b      	adds	r3, r7, r4
 801579a:	1c02      	adds	r2, r0, #0
 801579c:	801a      	strh	r2, [r3, #0]
 801579e:	2009      	movs	r0, #9
 80157a0:	183b      	adds	r3, r7, r0
 80157a2:	1c0a      	adds	r2, r1, #0
 80157a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80157a6:	193b      	adds	r3, r7, r4
 80157a8:	881b      	ldrh	r3, [r3, #0]
 80157aa:	059b      	lsls	r3, r3, #22
 80157ac:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80157ae:	183b      	adds	r3, r7, r0
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	0419      	lsls	r1, r3, #16
 80157b4:	23ff      	movs	r3, #255	@ 0xff
 80157b6:	041b      	lsls	r3, r3, #16
 80157b8:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80157ba:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80157c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c2:	4313      	orrs	r3, r2
 80157c4:	005b      	lsls	r3, r3, #1
 80157c6:	085b      	lsrs	r3, r3, #1
 80157c8:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157d2:	0d51      	lsrs	r1, r2, #21
 80157d4:	2280      	movs	r2, #128	@ 0x80
 80157d6:	00d2      	lsls	r2, r2, #3
 80157d8:	400a      	ands	r2, r1
 80157da:	4907      	ldr	r1, [pc, #28]	@ (80157f8 <I2C_TransferConfig+0x70>)
 80157dc:	430a      	orrs	r2, r1
 80157de:	43d2      	mvns	r2, r2
 80157e0:	401a      	ands	r2, r3
 80157e2:	0011      	movs	r1, r2
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	430a      	orrs	r2, r1
 80157ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80157ee:	46c0      	nop			@ (mov r8, r8)
 80157f0:	46bd      	mov	sp, r7
 80157f2:	b007      	add	sp, #28
 80157f4:	bd90      	pop	{r4, r7, pc}
 80157f6:	46c0      	nop			@ (mov r8, r8)
 80157f8:	03ff63ff 	.word	0x03ff63ff

080157fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	000a      	movs	r2, r1
 8015806:	1cbb      	adds	r3, r7, #2
 8015808:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801580a:	2300      	movs	r3, #0
 801580c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015812:	4b3c      	ldr	r3, [pc, #240]	@ (8015904 <I2C_Enable_IRQ+0x108>)
 8015814:	429a      	cmp	r2, r3
 8015816:	d035      	beq.n	8015884 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801581c:	4b3a      	ldr	r3, [pc, #232]	@ (8015908 <I2C_Enable_IRQ+0x10c>)
 801581e:	429a      	cmp	r2, r3
 8015820:	d030      	beq.n	8015884 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015826:	4b39      	ldr	r3, [pc, #228]	@ (801590c <I2C_Enable_IRQ+0x110>)
 8015828:	429a      	cmp	r2, r3
 801582a:	d02b      	beq.n	8015884 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801582c:	1cbb      	adds	r3, r7, #2
 801582e:	2200      	movs	r2, #0
 8015830:	5e9b      	ldrsh	r3, [r3, r2]
 8015832:	2b00      	cmp	r3, #0
 8015834:	da03      	bge.n	801583e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	22b8      	movs	r2, #184	@ 0xb8
 801583a:	4313      	orrs	r3, r2
 801583c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801583e:	1cbb      	adds	r3, r7, #2
 8015840:	881b      	ldrh	r3, [r3, #0]
 8015842:	2201      	movs	r2, #1
 8015844:	4013      	ands	r3, r2
 8015846:	d003      	beq.n	8015850 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	22f2      	movs	r2, #242	@ 0xf2
 801584c:	4313      	orrs	r3, r2
 801584e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015850:	1cbb      	adds	r3, r7, #2
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	2202      	movs	r2, #2
 8015856:	4013      	ands	r3, r2
 8015858:	d003      	beq.n	8015862 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	22f4      	movs	r2, #244	@ 0xf4
 801585e:	4313      	orrs	r3, r2
 8015860:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015862:	1cbb      	adds	r3, r7, #2
 8015864:	881b      	ldrh	r3, [r3, #0]
 8015866:	2b10      	cmp	r3, #16
 8015868:	d103      	bne.n	8015872 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2290      	movs	r2, #144	@ 0x90
 801586e:	4313      	orrs	r3, r2
 8015870:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015872:	1cbb      	adds	r3, r7, #2
 8015874:	881b      	ldrh	r3, [r3, #0]
 8015876:	2b20      	cmp	r3, #32
 8015878:	d137      	bne.n	80158ea <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2220      	movs	r2, #32
 801587e:	4313      	orrs	r3, r2
 8015880:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015882:	e032      	b.n	80158ea <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015884:	1cbb      	adds	r3, r7, #2
 8015886:	2200      	movs	r2, #0
 8015888:	5e9b      	ldrsh	r3, [r3, r2]
 801588a:	2b00      	cmp	r3, #0
 801588c:	da03      	bge.n	8015896 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	22b8      	movs	r2, #184	@ 0xb8
 8015892:	4313      	orrs	r3, r2
 8015894:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8015896:	1cbb      	adds	r3, r7, #2
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	2201      	movs	r2, #1
 801589c:	4013      	ands	r3, r2
 801589e:	d003      	beq.n	80158a8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	22f2      	movs	r2, #242	@ 0xf2
 80158a4:	4313      	orrs	r3, r2
 80158a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80158a8:	1cbb      	adds	r3, r7, #2
 80158aa:	881b      	ldrh	r3, [r3, #0]
 80158ac:	2202      	movs	r2, #2
 80158ae:	4013      	ands	r3, r2
 80158b0:	d003      	beq.n	80158ba <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	22f4      	movs	r2, #244	@ 0xf4
 80158b6:	4313      	orrs	r3, r2
 80158b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80158ba:	1cbb      	adds	r3, r7, #2
 80158bc:	881b      	ldrh	r3, [r3, #0]
 80158be:	2b10      	cmp	r3, #16
 80158c0:	d103      	bne.n	80158ca <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2290      	movs	r2, #144	@ 0x90
 80158c6:	4313      	orrs	r3, r2
 80158c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80158ca:	1cbb      	adds	r3, r7, #2
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	2b20      	cmp	r3, #32
 80158d0:	d103      	bne.n	80158da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2260      	movs	r2, #96	@ 0x60
 80158d6:	4313      	orrs	r3, r2
 80158d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80158da:	1cbb      	adds	r3, r7, #2
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	2b40      	cmp	r3, #64	@ 0x40
 80158e0:	d103      	bne.n	80158ea <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2240      	movs	r2, #64	@ 0x40
 80158e6:	4313      	orrs	r3, r2
 80158e8:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	6819      	ldr	r1, [r3, #0]
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	430a      	orrs	r2, r1
 80158f8:	601a      	str	r2, [r3, #0]
}
 80158fa:	46c0      	nop			@ (mov r8, r8)
 80158fc:	46bd      	mov	sp, r7
 80158fe:	b004      	add	sp, #16
 8015900:	bd80      	pop	{r7, pc}
 8015902:	46c0      	nop			@ (mov r8, r8)
 8015904:	0801452d 	.word	0x0801452d
 8015908:	0801497d 	.word	0x0801497d
 801590c:	08014725 	.word	0x08014725

08015910 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	000a      	movs	r2, r1
 801591a:	1cbb      	adds	r3, r7, #2
 801591c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801591e:	2300      	movs	r3, #0
 8015920:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8015922:	1cbb      	adds	r3, r7, #2
 8015924:	881b      	ldrh	r3, [r3, #0]
 8015926:	2201      	movs	r2, #1
 8015928:	4013      	ands	r3, r2
 801592a:	d010      	beq.n	801594e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2242      	movs	r2, #66	@ 0x42
 8015930:	4313      	orrs	r3, r2
 8015932:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	2241      	movs	r2, #65	@ 0x41
 8015938:	5c9b      	ldrb	r3, [r3, r2]
 801593a:	b2db      	uxtb	r3, r3
 801593c:	001a      	movs	r2, r3
 801593e:	2328      	movs	r3, #40	@ 0x28
 8015940:	4013      	ands	r3, r2
 8015942:	2b28      	cmp	r3, #40	@ 0x28
 8015944:	d003      	beq.n	801594e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	22b0      	movs	r2, #176	@ 0xb0
 801594a:	4313      	orrs	r3, r2
 801594c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801594e:	1cbb      	adds	r3, r7, #2
 8015950:	881b      	ldrh	r3, [r3, #0]
 8015952:	2202      	movs	r2, #2
 8015954:	4013      	ands	r3, r2
 8015956:	d010      	beq.n	801597a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	2244      	movs	r2, #68	@ 0x44
 801595c:	4313      	orrs	r3, r2
 801595e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2241      	movs	r2, #65	@ 0x41
 8015964:	5c9b      	ldrb	r3, [r3, r2]
 8015966:	b2db      	uxtb	r3, r3
 8015968:	001a      	movs	r2, r3
 801596a:	2328      	movs	r3, #40	@ 0x28
 801596c:	4013      	ands	r3, r2
 801596e:	2b28      	cmp	r3, #40	@ 0x28
 8015970:	d003      	beq.n	801597a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	22b0      	movs	r2, #176	@ 0xb0
 8015976:	4313      	orrs	r3, r2
 8015978:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801597a:	1cbb      	adds	r3, r7, #2
 801597c:	2200      	movs	r2, #0
 801597e:	5e9b      	ldrsh	r3, [r3, r2]
 8015980:	2b00      	cmp	r3, #0
 8015982:	da03      	bge.n	801598c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	22b8      	movs	r2, #184	@ 0xb8
 8015988:	4313      	orrs	r3, r2
 801598a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801598c:	1cbb      	adds	r3, r7, #2
 801598e:	881b      	ldrh	r3, [r3, #0]
 8015990:	2b10      	cmp	r3, #16
 8015992:	d103      	bne.n	801599c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2290      	movs	r2, #144	@ 0x90
 8015998:	4313      	orrs	r3, r2
 801599a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801599c:	1cbb      	adds	r3, r7, #2
 801599e:	881b      	ldrh	r3, [r3, #0]
 80159a0:	2b20      	cmp	r3, #32
 80159a2:	d103      	bne.n	80159ac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2220      	movs	r2, #32
 80159a8:	4313      	orrs	r3, r2
 80159aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80159ac:	1cbb      	adds	r3, r7, #2
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	2b40      	cmp	r3, #64	@ 0x40
 80159b2:	d103      	bne.n	80159bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2240      	movs	r2, #64	@ 0x40
 80159b8:	4313      	orrs	r3, r2
 80159ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	43d9      	mvns	r1, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	400a      	ands	r2, r1
 80159cc:	601a      	str	r2, [r3, #0]
}
 80159ce:	46c0      	nop			@ (mov r8, r8)
 80159d0:	46bd      	mov	sp, r7
 80159d2:	b004      	add	sp, #16
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2241      	movs	r2, #65	@ 0x41
 80159e6:	5c9b      	ldrb	r3, [r3, r2]
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	2b20      	cmp	r3, #32
 80159ec:	d138      	bne.n	8015a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2240      	movs	r2, #64	@ 0x40
 80159f2:	5c9b      	ldrb	r3, [r3, r2]
 80159f4:	2b01      	cmp	r3, #1
 80159f6:	d101      	bne.n	80159fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80159f8:	2302      	movs	r3, #2
 80159fa:	e032      	b.n	8015a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2240      	movs	r2, #64	@ 0x40
 8015a00:	2101      	movs	r1, #1
 8015a02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2241      	movs	r2, #65	@ 0x41
 8015a08:	2124      	movs	r1, #36	@ 0x24
 8015a0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2101      	movs	r1, #1
 8015a18:	438a      	bics	r2, r1
 8015a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	4911      	ldr	r1, [pc, #68]	@ (8015a6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8015a28:	400a      	ands	r2, r1
 8015a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	6819      	ldr	r1, [r3, #0]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	683a      	ldr	r2, [r7, #0]
 8015a38:	430a      	orrs	r2, r1
 8015a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2101      	movs	r1, #1
 8015a48:	430a      	orrs	r2, r1
 8015a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2241      	movs	r2, #65	@ 0x41
 8015a50:	2120      	movs	r1, #32
 8015a52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2240      	movs	r2, #64	@ 0x40
 8015a58:	2100      	movs	r1, #0
 8015a5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	e000      	b.n	8015a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015a60:	2302      	movs	r3, #2
  }
}
 8015a62:	0018      	movs	r0, r3
 8015a64:	46bd      	mov	sp, r7
 8015a66:	b002      	add	sp, #8
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	46c0      	nop			@ (mov r8, r8)
 8015a6c:	ffffefff 	.word	0xffffefff

08015a70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2241      	movs	r2, #65	@ 0x41
 8015a7e:	5c9b      	ldrb	r3, [r3, r2]
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b20      	cmp	r3, #32
 8015a84:	d139      	bne.n	8015afa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2240      	movs	r2, #64	@ 0x40
 8015a8a:	5c9b      	ldrb	r3, [r3, r2]
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d101      	bne.n	8015a94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8015a90:	2302      	movs	r3, #2
 8015a92:	e033      	b.n	8015afc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2240      	movs	r2, #64	@ 0x40
 8015a98:	2101      	movs	r1, #1
 8015a9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2241      	movs	r2, #65	@ 0x41
 8015aa0:	2124      	movs	r1, #36	@ 0x24
 8015aa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2101      	movs	r1, #1
 8015ab0:	438a      	bics	r2, r1
 8015ab2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	4a11      	ldr	r2, [pc, #68]	@ (8015b04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8015ac0:	4013      	ands	r3, r2
 8015ac2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	021b      	lsls	r3, r3, #8
 8015ac8:	68fa      	ldr	r2, [r7, #12]
 8015aca:	4313      	orrs	r3, r2
 8015acc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	68fa      	ldr	r2, [r7, #12]
 8015ad4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2101      	movs	r1, #1
 8015ae2:	430a      	orrs	r2, r1
 8015ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2241      	movs	r2, #65	@ 0x41
 8015aea:	2120      	movs	r1, #32
 8015aec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2240      	movs	r2, #64	@ 0x40
 8015af2:	2100      	movs	r1, #0
 8015af4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015af6:	2300      	movs	r3, #0
 8015af8:	e000      	b.n	8015afc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015afa:	2302      	movs	r3, #2
  }
}
 8015afc:	0018      	movs	r0, r3
 8015afe:	46bd      	mov	sp, r7
 8015b00:	b004      	add	sp, #16
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	fffff0ff 	.word	0xfffff0ff

08015b08 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015b16:	2301      	movs	r3, #1
 8015b18:	e06d      	b.n	8015bf6 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	0018      	movs	r0, r3
 8015b1e:	f000 f875 	bl	8015c0c <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	4a36      	ldr	r2, [pc, #216]	@ (8015c00 <HAL_IWDG_Init+0xf8>)
 8015b28:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4a35      	ldr	r2, [pc, #212]	@ (8015c04 <HAL_IWDG_Init+0xfc>)
 8015b30:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	6852      	ldr	r2, [r2, #4]
 8015b3a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	687a      	ldr	r2, [r7, #4]
 8015b42:	6892      	ldr	r2, [r2, #8]
 8015b44:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8015b46:	f7fb fbf1 	bl	801132c <HAL_GetTick>
 8015b4a:	0003      	movs	r3, r0
 8015b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8015b4e:	e00e      	b.n	8015b6e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015b50:	f7fb fbec 	bl	801132c <HAL_GetTick>
 8015b54:	0002      	movs	r2, r0
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	1ad3      	subs	r3, r2, r3
 8015b5a:	2b21      	cmp	r3, #33	@ 0x21
 8015b5c:	d907      	bls.n	8015b6e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	2202      	movs	r2, #2
 8015b66:	4013      	ands	r3, r2
 8015b68:	d001      	beq.n	8015b6e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8015b6a:	2303      	movs	r3, #3
 8015b6c:	e043      	b.n	8015bf6 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	68db      	ldr	r3, [r3, #12]
 8015b74:	2202      	movs	r2, #2
 8015b76:	4013      	ands	r3, r2
 8015b78:	d1ea      	bne.n	8015b50 <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	691b      	ldr	r3, [r3, #16]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d105      	bne.n	8015b8e <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	2280      	movs	r2, #128	@ 0x80
 8015b88:	01d2      	lsls	r2, r2, #7
 8015b8a:	615a      	str	r2, [r3, #20]
 8015b8c:	e007      	b.n	8015b9e <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	691a      	ldr	r2, [r3, #16]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	21c0      	movs	r1, #192	@ 0xc0
 8015b98:	0209      	lsls	r1, r1, #8
 8015b9a:	430a      	orrs	r2, r1
 8015b9c:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015b9e:	f7fb fbc5 	bl	801132c <HAL_GetTick>
 8015ba2:	0003      	movs	r3, r0
 8015ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015ba6:	e00e      	b.n	8015bc6 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015ba8:	f7fb fbc0 	bl	801132c <HAL_GetTick>
 8015bac:	0002      	movs	r2, r0
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	1ad3      	subs	r3, r2, r3
 8015bb2:	2b21      	cmp	r3, #33	@ 0x21
 8015bb4:	d907      	bls.n	8015bc6 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	68db      	ldr	r3, [r3, #12]
 8015bbc:	220f      	movs	r2, #15
 8015bbe:	4013      	ands	r3, r2
 8015bc0:	d001      	beq.n	8015bc6 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 8015bc2:	2303      	movs	r3, #3
 8015bc4:	e017      	b.n	8015bf6 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	220f      	movs	r2, #15
 8015bce:	4013      	ands	r3, r2
 8015bd0:	d1ea      	bne.n	8015ba8 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	691a      	ldr	r2, [r3, #16]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	68db      	ldr	r3, [r3, #12]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d005      	beq.n	8015bec <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	687a      	ldr	r2, [r7, #4]
 8015be6:	68d2      	ldr	r2, [r2, #12]
 8015be8:	611a      	str	r2, [r3, #16]
 8015bea:	e003      	b.n	8015bf4 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	4a05      	ldr	r2, [pc, #20]	@ (8015c08 <HAL_IWDG_Init+0x100>)
 8015bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	b004      	add	sp, #16
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	46c0      	nop			@ (mov r8, r8)
 8015c00:	0000cccc 	.word	0x0000cccc
 8015c04:	00005555 	.word	0x00005555
 8015c08:	0000aaaa 	.word	0x0000aaaa

08015c0c <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8015c14:	46c0      	nop			@ (mov r8, r8)
 8015c16:	46bd      	mov	sp, r7
 8015c18:	b002      	add	sp, #8
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b082      	sub	sp, #8
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	4a03      	ldr	r2, [pc, #12]	@ (8015c38 <HAL_IWDG_Refresh+0x1c>)
 8015c2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	0018      	movs	r0, r3
 8015c30:	46bd      	mov	sp, r7
 8015c32:	b002      	add	sp, #8
 8015c34:	bd80      	pop	{r7, pc}
 8015c36:	46c0      	nop			@ (mov r8, r8)
 8015c38:	0000aaaa 	.word	0x0000aaaa

08015c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	2380      	movs	r3, #128	@ 0x80
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d137      	bne.n	8015cbe <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8015c4e:	4b27      	ldr	r3, [pc, #156]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	23c0      	movs	r3, #192	@ 0xc0
 8015c54:	00db      	lsls	r3, r3, #3
 8015c56:	401a      	ands	r2, r3
 8015c58:	2380      	movs	r3, #128	@ 0x80
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d040      	beq.n	8015ce2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8015c60:	4b22      	ldr	r3, [pc, #136]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	4a22      	ldr	r2, [pc, #136]	@ (8015cf0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8015c66:	401a      	ands	r2, r3
 8015c68:	4b20      	ldr	r3, [pc, #128]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015c6a:	2180      	movs	r1, #128	@ 0x80
 8015c6c:	0089      	lsls	r1, r1, #2
 8015c6e:	430a      	orrs	r2, r1
 8015c70:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8015c72:	4b20      	ldr	r3, [pc, #128]	@ (8015cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2232      	movs	r2, #50	@ 0x32
 8015c78:	4353      	muls	r3, r2
 8015c7a:	491f      	ldr	r1, [pc, #124]	@ (8015cf8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8015c7c:	0018      	movs	r0, r3
 8015c7e:	f7ea fa4b 	bl	8000118 <__udivsi3>
 8015c82:	0003      	movs	r3, r0
 8015c84:	3301      	adds	r3, #1
 8015c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015c88:	e002      	b.n	8015c90 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015c90:	4b16      	ldr	r3, [pc, #88]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015c92:	695a      	ldr	r2, [r3, #20]
 8015c94:	2380      	movs	r3, #128	@ 0x80
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	401a      	ands	r2, r3
 8015c9a:	2380      	movs	r3, #128	@ 0x80
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d102      	bne.n	8015ca8 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1f0      	bne.n	8015c8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8015ca8:	4b10      	ldr	r3, [pc, #64]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015caa:	695a      	ldr	r2, [r3, #20]
 8015cac:	2380      	movs	r3, #128	@ 0x80
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	401a      	ands	r2, r3
 8015cb2:	2380      	movs	r3, #128	@ 0x80
 8015cb4:	00db      	lsls	r3, r3, #3
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d113      	bne.n	8015ce2 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8015cba:	2303      	movs	r3, #3
 8015cbc:	e012      	b.n	8015ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8015cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	23c0      	movs	r3, #192	@ 0xc0
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	401a      	ands	r2, r3
 8015cc8:	2380      	movs	r3, #128	@ 0x80
 8015cca:	00db      	lsls	r3, r3, #3
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d008      	beq.n	8015ce2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8015cd0:	4b06      	ldr	r3, [pc, #24]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	4a06      	ldr	r2, [pc, #24]	@ (8015cf0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8015cd6:	401a      	ands	r2, r3
 8015cd8:	4b04      	ldr	r3, [pc, #16]	@ (8015cec <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015cda:	2180      	movs	r1, #128	@ 0x80
 8015cdc:	00c9      	lsls	r1, r1, #3
 8015cde:	430a      	orrs	r2, r1
 8015ce0:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	0018      	movs	r0, r3
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	b004      	add	sp, #16
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	40007000 	.word	0x40007000
 8015cf0:	fffff9ff 	.word	0xfffff9ff
 8015cf4:	20000250 	.word	0x20000250
 8015cf8:	000f4240 	.word	0x000f4240

08015cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8015d00:	4b03      	ldr	r3, [pc, #12]	@ (8015d10 <HAL_PWREx_GetVoltageRange+0x14>)
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	23c0      	movs	r3, #192	@ 0xc0
 8015d06:	00db      	lsls	r3, r3, #3
 8015d08:	4013      	ands	r3, r2
}
 8015d0a:	0018      	movs	r0, r3
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}
 8015d10:	40007000 	.word	0x40007000

08015d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015d14:	b5b0      	push	{r4, r5, r7, lr}
 8015d16:	b088      	sub	sp, #32
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015d1c:	4bc9      	ldr	r3, [pc, #804]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	2238      	movs	r2, #56	@ 0x38
 8015d22:	4013      	ands	r3, r2
 8015d24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015d26:	4bc7      	ldr	r3, [pc, #796]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	2203      	movs	r2, #3
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2210      	movs	r2, #16
 8015d36:	4013      	ands	r3, r2
 8015d38:	d100      	bne.n	8015d3c <HAL_RCC_OscConfig+0x28>
 8015d3a:	e0ef      	b.n	8015f1c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d007      	beq.n	8015d52 <HAL_RCC_OscConfig+0x3e>
 8015d42:	69bb      	ldr	r3, [r7, #24]
 8015d44:	2b18      	cmp	r3, #24
 8015d46:	d000      	beq.n	8015d4a <HAL_RCC_OscConfig+0x36>
 8015d48:	e093      	b.n	8015e72 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d000      	beq.n	8015d52 <HAL_RCC_OscConfig+0x3e>
 8015d50:	e08f      	b.n	8015e72 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015d52:	4bbc      	ldr	r3, [pc, #752]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2202      	movs	r2, #2
 8015d58:	4013      	ands	r3, r2
 8015d5a:	d006      	beq.n	8015d6a <HAL_RCC_OscConfig+0x56>
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	69db      	ldr	r3, [r3, #28]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d102      	bne.n	8015d6a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8015d64:	2301      	movs	r3, #1
 8015d66:	f000 fbf2 	bl	801654e <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d6e:	4bb5      	ldr	r3, [pc, #724]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2108      	movs	r1, #8
 8015d74:	400b      	ands	r3, r1
 8015d76:	d004      	beq.n	8015d82 <HAL_RCC_OscConfig+0x6e>
 8015d78:	4bb2      	ldr	r3, [pc, #712]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	21f0      	movs	r1, #240	@ 0xf0
 8015d7e:	400b      	ands	r3, r1
 8015d80:	e005      	b.n	8015d8e <HAL_RCC_OscConfig+0x7a>
 8015d82:	49b0      	ldr	r1, [pc, #704]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015d84:	2394      	movs	r3, #148	@ 0x94
 8015d86:	58cb      	ldr	r3, [r1, r3]
 8015d88:	091b      	lsrs	r3, r3, #4
 8015d8a:	21f0      	movs	r1, #240	@ 0xf0
 8015d8c:	400b      	ands	r3, r1
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d225      	bcs.n	8015dde <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d96:	0018      	movs	r0, r3
 8015d98:	f000 fd90 	bl	80168bc <RCC_SetFlashLatencyFromMSIRange>
 8015d9c:	1e03      	subs	r3, r0, #0
 8015d9e:	d002      	beq.n	8015da6 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8015da0:	2301      	movs	r3, #1
 8015da2:	f000 fbd4 	bl	801654e <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015da6:	4ba7      	ldr	r3, [pc, #668]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	4ba6      	ldr	r3, [pc, #664]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dac:	2108      	movs	r1, #8
 8015dae:	430a      	orrs	r2, r1
 8015db0:	601a      	str	r2, [r3, #0]
 8015db2:	4ba4      	ldr	r3, [pc, #656]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	22f0      	movs	r2, #240	@ 0xf0
 8015db8:	4393      	bics	r3, r2
 8015dba:	0019      	movs	r1, r3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015dc0:	4ba0      	ldr	r3, [pc, #640]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dc2:	430a      	orrs	r2, r1
 8015dc4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015dc6:	4b9f      	ldr	r3, [pc, #636]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	4a9f      	ldr	r2, [pc, #636]	@ (8016048 <HAL_RCC_OscConfig+0x334>)
 8015dcc:	4013      	ands	r3, r2
 8015dce:	0019      	movs	r1, r3
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a1b      	ldr	r3, [r3, #32]
 8015dd4:	021a      	lsls	r2, r3, #8
 8015dd6:	4b9b      	ldr	r3, [pc, #620]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dd8:	430a      	orrs	r2, r1
 8015dda:	605a      	str	r2, [r3, #4]
 8015ddc:	e027      	b.n	8015e2e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015dde:	4b99      	ldr	r3, [pc, #612]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015de0:	681a      	ldr	r2, [r3, #0]
 8015de2:	4b98      	ldr	r3, [pc, #608]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015de4:	2108      	movs	r1, #8
 8015de6:	430a      	orrs	r2, r1
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	4b96      	ldr	r3, [pc, #600]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	22f0      	movs	r2, #240	@ 0xf0
 8015df0:	4393      	bics	r3, r2
 8015df2:	0019      	movs	r1, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015df8:	4b92      	ldr	r3, [pc, #584]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015dfa:	430a      	orrs	r2, r1
 8015dfc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015dfe:	4b91      	ldr	r3, [pc, #580]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	4a91      	ldr	r2, [pc, #580]	@ (8016048 <HAL_RCC_OscConfig+0x334>)
 8015e04:	4013      	ands	r3, r2
 8015e06:	0019      	movs	r1, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6a1b      	ldr	r3, [r3, #32]
 8015e0c:	021a      	lsls	r2, r3, #8
 8015e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015e10:	430a      	orrs	r2, r1
 8015e12:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d109      	bne.n	8015e2e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e1e:	0018      	movs	r0, r3
 8015e20:	f000 fd4c 	bl	80168bc <RCC_SetFlashLatencyFromMSIRange>
 8015e24:	1e03      	subs	r3, r0, #0
 8015e26:	d002      	beq.n	8015e2e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	f000 fb90 	bl	801654e <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015e2e:	f000 fc87 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 8015e32:	0001      	movs	r1, r0
 8015e34:	4b83      	ldr	r3, [pc, #524]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015e36:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015e38:	0a1b      	lsrs	r3, r3, #8
 8015e3a:	220f      	movs	r2, #15
 8015e3c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015e3e:	4a83      	ldr	r2, [pc, #524]	@ (801604c <HAL_RCC_OscConfig+0x338>)
 8015e40:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015e42:	001a      	movs	r2, r3
 8015e44:	231f      	movs	r3, #31
 8015e46:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015e48:	000a      	movs	r2, r1
 8015e4a:	40da      	lsrs	r2, r3
 8015e4c:	4b80      	ldr	r3, [pc, #512]	@ (8016050 <HAL_RCC_OscConfig+0x33c>)
 8015e4e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8015e50:	4b80      	ldr	r3, [pc, #512]	@ (8016054 <HAL_RCC_OscConfig+0x340>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	250f      	movs	r5, #15
 8015e56:	197c      	adds	r4, r7, r5
 8015e58:	0018      	movs	r0, r3
 8015e5a:	f7fb fa0d 	bl	8011278 <HAL_InitTick>
 8015e5e:	0003      	movs	r3, r0
 8015e60:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8015e62:	197b      	adds	r3, r7, r5
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d057      	beq.n	8015f1a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8015e6a:	197b      	adds	r3, r7, r5
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	f000 fb6e 	bl	801654e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	69db      	ldr	r3, [r3, #28]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d035      	beq.n	8015ee6 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015e7a:	4b72      	ldr	r3, [pc, #456]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	4b71      	ldr	r3, [pc, #452]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015e80:	2101      	movs	r1, #1
 8015e82:	430a      	orrs	r2, r1
 8015e84:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015e86:	f7fb fa51 	bl	801132c <HAL_GetTick>
 8015e8a:	0003      	movs	r3, r0
 8015e8c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015e8e:	e009      	b.n	8015ea4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015e90:	f7fb fa4c 	bl	801132c <HAL_GetTick>
 8015e94:	0002      	movs	r2, r0
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	2b02      	cmp	r3, #2
 8015e9c:	d902      	bls.n	8015ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015e9e:	2303      	movs	r3, #3
 8015ea0:	f000 fb55 	bl	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015ea4:	4b67      	ldr	r3, [pc, #412]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2202      	movs	r2, #2
 8015eaa:	4013      	ands	r3, r2
 8015eac:	d0f0      	beq.n	8015e90 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015eae:	4b65      	ldr	r3, [pc, #404]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015eb0:	681a      	ldr	r2, [r3, #0]
 8015eb2:	4b64      	ldr	r3, [pc, #400]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015eb4:	2108      	movs	r1, #8
 8015eb6:	430a      	orrs	r2, r1
 8015eb8:	601a      	str	r2, [r3, #0]
 8015eba:	4b62      	ldr	r3, [pc, #392]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	22f0      	movs	r2, #240	@ 0xf0
 8015ec0:	4393      	bics	r3, r2
 8015ec2:	0019      	movs	r1, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015eca:	430a      	orrs	r2, r1
 8015ecc:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015ece:	4b5d      	ldr	r3, [pc, #372]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	4a5d      	ldr	r2, [pc, #372]	@ (8016048 <HAL_RCC_OscConfig+0x334>)
 8015ed4:	4013      	ands	r3, r2
 8015ed6:	0019      	movs	r1, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6a1b      	ldr	r3, [r3, #32]
 8015edc:	021a      	lsls	r2, r3, #8
 8015ede:	4b59      	ldr	r3, [pc, #356]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015ee0:	430a      	orrs	r2, r1
 8015ee2:	605a      	str	r2, [r3, #4]
 8015ee4:	e01a      	b.n	8015f1c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015ee6:	4b57      	ldr	r3, [pc, #348]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	4b56      	ldr	r3, [pc, #344]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015eec:	2101      	movs	r1, #1
 8015eee:	438a      	bics	r2, r1
 8015ef0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015ef2:	f7fb fa1b 	bl	801132c <HAL_GetTick>
 8015ef6:	0003      	movs	r3, r0
 8015ef8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015efa:	e008      	b.n	8015f0e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015efc:	f7fb fa16 	bl	801132c <HAL_GetTick>
 8015f00:	0002      	movs	r2, r0
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	1ad3      	subs	r3, r2, r3
 8015f06:	2b02      	cmp	r3, #2
 8015f08:	d901      	bls.n	8015f0e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8015f0a:	2303      	movs	r3, #3
 8015f0c:	e31f      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	2202      	movs	r2, #2
 8015f14:	4013      	ands	r3, r2
 8015f16:	d1f1      	bne.n	8015efc <HAL_RCC_OscConfig+0x1e8>
 8015f18:	e000      	b.n	8015f1c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015f1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2201      	movs	r2, #1
 8015f22:	4013      	ands	r3, r2
 8015f24:	d100      	bne.n	8015f28 <HAL_RCC_OscConfig+0x214>
 8015f26:	e065      	b.n	8015ff4 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	2b10      	cmp	r3, #16
 8015f2c:	d005      	beq.n	8015f3a <HAL_RCC_OscConfig+0x226>
 8015f2e:	69bb      	ldr	r3, [r7, #24]
 8015f30:	2b18      	cmp	r3, #24
 8015f32:	d10e      	bne.n	8015f52 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	2b03      	cmp	r3, #3
 8015f38:	d10b      	bne.n	8015f52 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015f3a:	4b42      	ldr	r3, [pc, #264]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	2380      	movs	r3, #128	@ 0x80
 8015f40:	029b      	lsls	r3, r3, #10
 8015f42:	4013      	ands	r3, r2
 8015f44:	d055      	beq.n	8015ff2 <HAL_RCC_OscConfig+0x2de>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d151      	bne.n	8015ff2 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e2fd      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	685a      	ldr	r2, [r3, #4]
 8015f56:	2380      	movs	r3, #128	@ 0x80
 8015f58:	025b      	lsls	r3, r3, #9
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d107      	bne.n	8015f6e <HAL_RCC_OscConfig+0x25a>
 8015f5e:	4b39      	ldr	r3, [pc, #228]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	4b38      	ldr	r3, [pc, #224]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f64:	2180      	movs	r1, #128	@ 0x80
 8015f66:	0249      	lsls	r1, r1, #9
 8015f68:	430a      	orrs	r2, r1
 8015f6a:	601a      	str	r2, [r3, #0]
 8015f6c:	e013      	b.n	8015f96 <HAL_RCC_OscConfig+0x282>
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	685a      	ldr	r2, [r3, #4]
 8015f72:	23a0      	movs	r3, #160	@ 0xa0
 8015f74:	02db      	lsls	r3, r3, #11
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d107      	bne.n	8015f8a <HAL_RCC_OscConfig+0x276>
 8015f7a:	4b32      	ldr	r3, [pc, #200]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	4b31      	ldr	r3, [pc, #196]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f80:	21a0      	movs	r1, #160	@ 0xa0
 8015f82:	02c9      	lsls	r1, r1, #11
 8015f84:	430a      	orrs	r2, r1
 8015f86:	601a      	str	r2, [r3, #0]
 8015f88:	e005      	b.n	8015f96 <HAL_RCC_OscConfig+0x282>
 8015f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015f90:	4931      	ldr	r1, [pc, #196]	@ (8016058 <HAL_RCC_OscConfig+0x344>)
 8015f92:	400a      	ands	r2, r1
 8015f94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d014      	beq.n	8015fc8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f9e:	f7fb f9c5 	bl	801132c <HAL_GetTick>
 8015fa2:	0003      	movs	r3, r0
 8015fa4:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015fa6:	e008      	b.n	8015fba <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015fa8:	f7fb f9c0 	bl	801132c <HAL_GetTick>
 8015fac:	0002      	movs	r2, r0
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	1ad3      	subs	r3, r2, r3
 8015fb2:	2b64      	cmp	r3, #100	@ 0x64
 8015fb4:	d901      	bls.n	8015fba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8015fb6:	2303      	movs	r3, #3
 8015fb8:	e2c9      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015fba:	4b22      	ldr	r3, [pc, #136]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	2380      	movs	r3, #128	@ 0x80
 8015fc0:	029b      	lsls	r3, r3, #10
 8015fc2:	4013      	ands	r3, r2
 8015fc4:	d0f0      	beq.n	8015fa8 <HAL_RCC_OscConfig+0x294>
 8015fc6:	e015      	b.n	8015ff4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015fc8:	f7fb f9b0 	bl	801132c <HAL_GetTick>
 8015fcc:	0003      	movs	r3, r0
 8015fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015fd0:	e008      	b.n	8015fe4 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015fd2:	f7fb f9ab 	bl	801132c <HAL_GetTick>
 8015fd6:	0002      	movs	r2, r0
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	1ad3      	subs	r3, r2, r3
 8015fdc:	2b64      	cmp	r3, #100	@ 0x64
 8015fde:	d901      	bls.n	8015fe4 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	e2b4      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015fe4:	4b17      	ldr	r3, [pc, #92]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	2380      	movs	r3, #128	@ 0x80
 8015fea:	029b      	lsls	r3, r3, #10
 8015fec:	4013      	ands	r3, r2
 8015fee:	d1f0      	bne.n	8015fd2 <HAL_RCC_OscConfig+0x2be>
 8015ff0:	e000      	b.n	8015ff4 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015ff2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2202      	movs	r2, #2
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	d100      	bne.n	8016000 <HAL_RCC_OscConfig+0x2ec>
 8015ffe:	e074      	b.n	80160ea <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	2b08      	cmp	r3, #8
 8016004:	d005      	beq.n	8016012 <HAL_RCC_OscConfig+0x2fe>
 8016006:	69bb      	ldr	r3, [r7, #24]
 8016008:	2b18      	cmp	r3, #24
 801600a:	d129      	bne.n	8016060 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	2b02      	cmp	r3, #2
 8016010:	d126      	bne.n	8016060 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016012:	4b0c      	ldr	r3, [pc, #48]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	2380      	movs	r3, #128	@ 0x80
 8016018:	00db      	lsls	r3, r3, #3
 801601a:	4013      	ands	r3, r2
 801601c:	d005      	beq.n	801602a <HAL_RCC_OscConfig+0x316>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d101      	bne.n	801602a <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8016026:	2301      	movs	r3, #1
 8016028:	e291      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801602a:	4b06      	ldr	r3, [pc, #24]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	4a0b      	ldr	r2, [pc, #44]	@ (801605c <HAL_RCC_OscConfig+0x348>)
 8016030:	4013      	ands	r3, r2
 8016032:	0019      	movs	r1, r3
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	691b      	ldr	r3, [r3, #16]
 8016038:	061a      	lsls	r2, r3, #24
 801603a:	4b02      	ldr	r3, [pc, #8]	@ (8016044 <HAL_RCC_OscConfig+0x330>)
 801603c:	430a      	orrs	r2, r1
 801603e:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016040:	e053      	b.n	80160ea <HAL_RCC_OscConfig+0x3d6>
 8016042:	46c0      	nop			@ (mov r8, r8)
 8016044:	40021000 	.word	0x40021000
 8016048:	ffff00ff 	.word	0xffff00ff
 801604c:	0801b484 	.word	0x0801b484
 8016050:	20000250 	.word	0x20000250
 8016054:	20000264 	.word	0x20000264
 8016058:	fffaffff 	.word	0xfffaffff
 801605c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	68db      	ldr	r3, [r3, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d026      	beq.n	80160b6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016068:	4bc7      	ldr	r3, [pc, #796]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801606a:	681a      	ldr	r2, [r3, #0]
 801606c:	4bc6      	ldr	r3, [pc, #792]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801606e:	2180      	movs	r1, #128	@ 0x80
 8016070:	0049      	lsls	r1, r1, #1
 8016072:	430a      	orrs	r2, r1
 8016074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016076:	f7fb f959 	bl	801132c <HAL_GetTick>
 801607a:	0003      	movs	r3, r0
 801607c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801607e:	e008      	b.n	8016092 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8016080:	f7fb f954 	bl	801132c <HAL_GetTick>
 8016084:	0002      	movs	r2, r0
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	1ad3      	subs	r3, r2, r3
 801608a:	2b02      	cmp	r3, #2
 801608c:	d901      	bls.n	8016092 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 801608e:	2303      	movs	r3, #3
 8016090:	e25d      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016092:	4bbd      	ldr	r3, [pc, #756]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	2380      	movs	r3, #128	@ 0x80
 8016098:	00db      	lsls	r3, r3, #3
 801609a:	4013      	ands	r3, r2
 801609c:	d0f0      	beq.n	8016080 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801609e:	4bba      	ldr	r3, [pc, #744]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	4aba      	ldr	r2, [pc, #744]	@ (801638c <HAL_RCC_OscConfig+0x678>)
 80160a4:	4013      	ands	r3, r2
 80160a6:	0019      	movs	r1, r3
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	691b      	ldr	r3, [r3, #16]
 80160ac:	061a      	lsls	r2, r3, #24
 80160ae:	4bb6      	ldr	r3, [pc, #728]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80160b0:	430a      	orrs	r2, r1
 80160b2:	605a      	str	r2, [r3, #4]
 80160b4:	e019      	b.n	80160ea <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80160b6:	4bb4      	ldr	r3, [pc, #720]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	4bb3      	ldr	r3, [pc, #716]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80160bc:	49b4      	ldr	r1, [pc, #720]	@ (8016390 <HAL_RCC_OscConfig+0x67c>)
 80160be:	400a      	ands	r2, r1
 80160c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80160c2:	f7fb f933 	bl	801132c <HAL_GetTick>
 80160c6:	0003      	movs	r3, r0
 80160c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80160ca:	e008      	b.n	80160de <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80160cc:	f7fb f92e 	bl	801132c <HAL_GetTick>
 80160d0:	0002      	movs	r2, r0
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	1ad3      	subs	r3, r2, r3
 80160d6:	2b02      	cmp	r3, #2
 80160d8:	d901      	bls.n	80160de <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 80160da:	2303      	movs	r3, #3
 80160dc:	e237      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80160de:	4baa      	ldr	r3, [pc, #680]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	2380      	movs	r3, #128	@ 0x80
 80160e4:	00db      	lsls	r3, r3, #3
 80160e6:	4013      	ands	r3, r2
 80160e8:	d1f0      	bne.n	80160cc <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	2208      	movs	r2, #8
 80160f0:	4013      	ands	r3, r2
 80160f2:	d051      	beq.n	8016198 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	695b      	ldr	r3, [r3, #20]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d031      	beq.n	8016160 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	699b      	ldr	r3, [r3, #24]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d108      	bne.n	8016116 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016104:	4aa0      	ldr	r2, [pc, #640]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016106:	2394      	movs	r3, #148	@ 0x94
 8016108:	58d3      	ldr	r3, [r2, r3]
 801610a:	499f      	ldr	r1, [pc, #636]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801610c:	2204      	movs	r2, #4
 801610e:	4393      	bics	r3, r2
 8016110:	2294      	movs	r2, #148	@ 0x94
 8016112:	508b      	str	r3, [r1, r2]
 8016114:	e007      	b.n	8016126 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016116:	4a9c      	ldr	r2, [pc, #624]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016118:	2394      	movs	r3, #148	@ 0x94
 801611a:	58d3      	ldr	r3, [r2, r3]
 801611c:	499a      	ldr	r1, [pc, #616]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801611e:	2204      	movs	r2, #4
 8016120:	4313      	orrs	r3, r2
 8016122:	2294      	movs	r2, #148	@ 0x94
 8016124:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016126:	4a98      	ldr	r2, [pc, #608]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016128:	2394      	movs	r3, #148	@ 0x94
 801612a:	58d3      	ldr	r3, [r2, r3]
 801612c:	4996      	ldr	r1, [pc, #600]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801612e:	2201      	movs	r2, #1
 8016130:	4313      	orrs	r3, r2
 8016132:	2294      	movs	r2, #148	@ 0x94
 8016134:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016136:	f7fb f8f9 	bl	801132c <HAL_GetTick>
 801613a:	0003      	movs	r3, r0
 801613c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801613e:	e008      	b.n	8016152 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016140:	f7fb f8f4 	bl	801132c <HAL_GetTick>
 8016144:	0002      	movs	r2, r0
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	1ad3      	subs	r3, r2, r3
 801614a:	2b11      	cmp	r3, #17
 801614c:	d901      	bls.n	8016152 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 801614e:	2303      	movs	r3, #3
 8016150:	e1fd      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016152:	4a8d      	ldr	r2, [pc, #564]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016154:	2394      	movs	r3, #148	@ 0x94
 8016156:	58d3      	ldr	r3, [r2, r3]
 8016158:	2202      	movs	r2, #2
 801615a:	4013      	ands	r3, r2
 801615c:	d0f0      	beq.n	8016140 <HAL_RCC_OscConfig+0x42c>
 801615e:	e01b      	b.n	8016198 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016160:	4a89      	ldr	r2, [pc, #548]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016162:	2394      	movs	r3, #148	@ 0x94
 8016164:	58d3      	ldr	r3, [r2, r3]
 8016166:	4988      	ldr	r1, [pc, #544]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016168:	2201      	movs	r2, #1
 801616a:	4393      	bics	r3, r2
 801616c:	2294      	movs	r2, #148	@ 0x94
 801616e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016170:	f7fb f8dc 	bl	801132c <HAL_GetTick>
 8016174:	0003      	movs	r3, r0
 8016176:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016178:	e008      	b.n	801618c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801617a:	f7fb f8d7 	bl	801132c <HAL_GetTick>
 801617e:	0002      	movs	r2, r0
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	1ad3      	subs	r3, r2, r3
 8016184:	2b11      	cmp	r3, #17
 8016186:	d901      	bls.n	801618c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8016188:	2303      	movs	r3, #3
 801618a:	e1e0      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801618c:	4a7e      	ldr	r2, [pc, #504]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801618e:	2394      	movs	r3, #148	@ 0x94
 8016190:	58d3      	ldr	r3, [r2, r3]
 8016192:	2202      	movs	r2, #2
 8016194:	4013      	ands	r3, r2
 8016196:	d1f0      	bne.n	801617a <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2204      	movs	r2, #4
 801619e:	4013      	ands	r3, r2
 80161a0:	d100      	bne.n	80161a4 <HAL_RCC_OscConfig+0x490>
 80161a2:	e10d      	b.n	80163c0 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80161a4:	201f      	movs	r0, #31
 80161a6:	183b      	adds	r3, r7, r0
 80161a8:	2200      	movs	r2, #0
 80161aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80161ac:	4b76      	ldr	r3, [pc, #472]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80161ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80161b0:	2380      	movs	r3, #128	@ 0x80
 80161b2:	055b      	lsls	r3, r3, #21
 80161b4:	4013      	ands	r3, r2
 80161b6:	d110      	bne.n	80161da <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80161b8:	4b73      	ldr	r3, [pc, #460]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80161ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80161bc:	4b72      	ldr	r3, [pc, #456]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80161be:	2180      	movs	r1, #128	@ 0x80
 80161c0:	0549      	lsls	r1, r1, #21
 80161c2:	430a      	orrs	r2, r1
 80161c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80161c6:	4b70      	ldr	r3, [pc, #448]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80161c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80161ca:	2380      	movs	r3, #128	@ 0x80
 80161cc:	055b      	lsls	r3, r3, #21
 80161ce:	4013      	ands	r3, r2
 80161d0:	60bb      	str	r3, [r7, #8]
 80161d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80161d4:	183b      	adds	r3, r7, r0
 80161d6:	2201      	movs	r2, #1
 80161d8:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80161da:	4b6e      	ldr	r3, [pc, #440]	@ (8016394 <HAL_RCC_OscConfig+0x680>)
 80161dc:	681a      	ldr	r2, [r3, #0]
 80161de:	2380      	movs	r3, #128	@ 0x80
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4013      	ands	r3, r2
 80161e4:	d11a      	bne.n	801621c <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80161e6:	4b6b      	ldr	r3, [pc, #428]	@ (8016394 <HAL_RCC_OscConfig+0x680>)
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	4b6a      	ldr	r3, [pc, #424]	@ (8016394 <HAL_RCC_OscConfig+0x680>)
 80161ec:	2180      	movs	r1, #128	@ 0x80
 80161ee:	0049      	lsls	r1, r1, #1
 80161f0:	430a      	orrs	r2, r1
 80161f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80161f4:	f7fb f89a 	bl	801132c <HAL_GetTick>
 80161f8:	0003      	movs	r3, r0
 80161fa:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80161fc:	e008      	b.n	8016210 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80161fe:	f7fb f895 	bl	801132c <HAL_GetTick>
 8016202:	0002      	movs	r2, r0
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	1ad3      	subs	r3, r2, r3
 8016208:	2b02      	cmp	r3, #2
 801620a:	d901      	bls.n	8016210 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801620c:	2303      	movs	r3, #3
 801620e:	e19e      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016210:	4b60      	ldr	r3, [pc, #384]	@ (8016394 <HAL_RCC_OscConfig+0x680>)
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	2380      	movs	r3, #128	@ 0x80
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	4013      	ands	r3, r2
 801621a:	d0f0      	beq.n	80161fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	2201      	movs	r2, #1
 8016222:	4013      	ands	r3, r2
 8016224:	d01e      	beq.n	8016264 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	689b      	ldr	r3, [r3, #8]
 801622a:	2204      	movs	r2, #4
 801622c:	4013      	ands	r3, r2
 801622e:	d010      	beq.n	8016252 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016230:	4a55      	ldr	r2, [pc, #340]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016232:	2390      	movs	r3, #144	@ 0x90
 8016234:	58d3      	ldr	r3, [r2, r3]
 8016236:	4954      	ldr	r1, [pc, #336]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016238:	2204      	movs	r2, #4
 801623a:	4313      	orrs	r3, r2
 801623c:	2290      	movs	r2, #144	@ 0x90
 801623e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016240:	4a51      	ldr	r2, [pc, #324]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016242:	2390      	movs	r3, #144	@ 0x90
 8016244:	58d3      	ldr	r3, [r2, r3]
 8016246:	4950      	ldr	r1, [pc, #320]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016248:	2201      	movs	r2, #1
 801624a:	4313      	orrs	r3, r2
 801624c:	2290      	movs	r2, #144	@ 0x90
 801624e:	508b      	str	r3, [r1, r2]
 8016250:	e018      	b.n	8016284 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016252:	4a4d      	ldr	r2, [pc, #308]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016254:	2390      	movs	r3, #144	@ 0x90
 8016256:	58d3      	ldr	r3, [r2, r3]
 8016258:	494b      	ldr	r1, [pc, #300]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801625a:	2201      	movs	r2, #1
 801625c:	4313      	orrs	r3, r2
 801625e:	2290      	movs	r2, #144	@ 0x90
 8016260:	508b      	str	r3, [r1, r2]
 8016262:	e00f      	b.n	8016284 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016264:	4a48      	ldr	r2, [pc, #288]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016266:	2390      	movs	r3, #144	@ 0x90
 8016268:	58d3      	ldr	r3, [r2, r3]
 801626a:	4947      	ldr	r1, [pc, #284]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801626c:	2201      	movs	r2, #1
 801626e:	4393      	bics	r3, r2
 8016270:	2290      	movs	r2, #144	@ 0x90
 8016272:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016274:	4a44      	ldr	r2, [pc, #272]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016276:	2390      	movs	r3, #144	@ 0x90
 8016278:	58d3      	ldr	r3, [r2, r3]
 801627a:	4943      	ldr	r1, [pc, #268]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801627c:	2204      	movs	r2, #4
 801627e:	4393      	bics	r3, r2
 8016280:	2290      	movs	r2, #144	@ 0x90
 8016282:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	689b      	ldr	r3, [r3, #8]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d04f      	beq.n	801632c <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801628c:	f7fb f84e 	bl	801132c <HAL_GetTick>
 8016290:	0003      	movs	r3, r0
 8016292:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016294:	e009      	b.n	80162aa <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016296:	f7fb f849 	bl	801132c <HAL_GetTick>
 801629a:	0002      	movs	r2, r0
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	1ad3      	subs	r3, r2, r3
 80162a0:	4a3d      	ldr	r2, [pc, #244]	@ (8016398 <HAL_RCC_OscConfig+0x684>)
 80162a2:	4293      	cmp	r3, r2
 80162a4:	d901      	bls.n	80162aa <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 80162a6:	2303      	movs	r3, #3
 80162a8:	e151      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80162aa:	4a37      	ldr	r2, [pc, #220]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162ac:	2390      	movs	r3, #144	@ 0x90
 80162ae:	58d3      	ldr	r3, [r2, r3]
 80162b0:	2202      	movs	r2, #2
 80162b2:	4013      	ands	r3, r2
 80162b4:	d0ef      	beq.n	8016296 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	689b      	ldr	r3, [r3, #8]
 80162ba:	2280      	movs	r2, #128	@ 0x80
 80162bc:	4013      	ands	r3, r2
 80162be:	d01a      	beq.n	80162f6 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80162c0:	4a31      	ldr	r2, [pc, #196]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162c2:	2390      	movs	r3, #144	@ 0x90
 80162c4:	58d3      	ldr	r3, [r2, r3]
 80162c6:	4930      	ldr	r1, [pc, #192]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162c8:	2280      	movs	r2, #128	@ 0x80
 80162ca:	4313      	orrs	r3, r2
 80162cc:	2290      	movs	r2, #144	@ 0x90
 80162ce:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80162d0:	e009      	b.n	80162e6 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80162d2:	f7fb f82b 	bl	801132c <HAL_GetTick>
 80162d6:	0002      	movs	r2, r0
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	1ad3      	subs	r3, r2, r3
 80162dc:	4a2e      	ldr	r2, [pc, #184]	@ (8016398 <HAL_RCC_OscConfig+0x684>)
 80162de:	4293      	cmp	r3, r2
 80162e0:	d901      	bls.n	80162e6 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 80162e2:	2303      	movs	r3, #3
 80162e4:	e133      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80162e6:	4a28      	ldr	r2, [pc, #160]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162e8:	2390      	movs	r3, #144	@ 0x90
 80162ea:	58d2      	ldr	r2, [r2, r3]
 80162ec:	2380      	movs	r3, #128	@ 0x80
 80162ee:	011b      	lsls	r3, r3, #4
 80162f0:	4013      	ands	r3, r2
 80162f2:	d0ee      	beq.n	80162d2 <HAL_RCC_OscConfig+0x5be>
 80162f4:	e059      	b.n	80163aa <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80162f6:	4a24      	ldr	r2, [pc, #144]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162f8:	2390      	movs	r3, #144	@ 0x90
 80162fa:	58d3      	ldr	r3, [r2, r3]
 80162fc:	4922      	ldr	r1, [pc, #136]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 80162fe:	2280      	movs	r2, #128	@ 0x80
 8016300:	4393      	bics	r3, r2
 8016302:	2290      	movs	r2, #144	@ 0x90
 8016304:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016306:	e009      	b.n	801631c <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016308:	f7fb f810 	bl	801132c <HAL_GetTick>
 801630c:	0002      	movs	r2, r0
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	1ad3      	subs	r3, r2, r3
 8016312:	4a21      	ldr	r2, [pc, #132]	@ (8016398 <HAL_RCC_OscConfig+0x684>)
 8016314:	4293      	cmp	r3, r2
 8016316:	d901      	bls.n	801631c <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8016318:	2303      	movs	r3, #3
 801631a:	e118      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801631c:	4a1a      	ldr	r2, [pc, #104]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801631e:	2390      	movs	r3, #144	@ 0x90
 8016320:	58d2      	ldr	r2, [r2, r3]
 8016322:	2380      	movs	r3, #128	@ 0x80
 8016324:	011b      	lsls	r3, r3, #4
 8016326:	4013      	ands	r3, r2
 8016328:	d1ee      	bne.n	8016308 <HAL_RCC_OscConfig+0x5f4>
 801632a:	e03e      	b.n	80163aa <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801632c:	f7fa fffe 	bl	801132c <HAL_GetTick>
 8016330:	0003      	movs	r3, r0
 8016332:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016334:	e009      	b.n	801634a <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016336:	f7fa fff9 	bl	801132c <HAL_GetTick>
 801633a:	0002      	movs	r2, r0
 801633c:	693b      	ldr	r3, [r7, #16]
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	4a15      	ldr	r2, [pc, #84]	@ (8016398 <HAL_RCC_OscConfig+0x684>)
 8016342:	4293      	cmp	r3, r2
 8016344:	d901      	bls.n	801634a <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8016346:	2303      	movs	r3, #3
 8016348:	e101      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801634a:	4a0f      	ldr	r2, [pc, #60]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801634c:	2390      	movs	r3, #144	@ 0x90
 801634e:	58d3      	ldr	r3, [r2, r3]
 8016350:	2202      	movs	r2, #2
 8016352:	4013      	ands	r3, r2
 8016354:	d1ef      	bne.n	8016336 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8016356:	4a0c      	ldr	r2, [pc, #48]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016358:	2390      	movs	r3, #144	@ 0x90
 801635a:	58d3      	ldr	r3, [r2, r3]
 801635c:	2280      	movs	r2, #128	@ 0x80
 801635e:	4013      	ands	r3, r2
 8016360:	d023      	beq.n	80163aa <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8016362:	4a09      	ldr	r2, [pc, #36]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 8016364:	2390      	movs	r3, #144	@ 0x90
 8016366:	58d3      	ldr	r3, [r2, r3]
 8016368:	4907      	ldr	r1, [pc, #28]	@ (8016388 <HAL_RCC_OscConfig+0x674>)
 801636a:	2280      	movs	r2, #128	@ 0x80
 801636c:	4393      	bics	r3, r2
 801636e:	2290      	movs	r2, #144	@ 0x90
 8016370:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016372:	e013      	b.n	801639c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016374:	f7fa ffda 	bl	801132c <HAL_GetTick>
 8016378:	0002      	movs	r2, r0
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	1ad3      	subs	r3, r2, r3
 801637e:	4a06      	ldr	r2, [pc, #24]	@ (8016398 <HAL_RCC_OscConfig+0x684>)
 8016380:	4293      	cmp	r3, r2
 8016382:	d90b      	bls.n	801639c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8016384:	2303      	movs	r3, #3
 8016386:	e0e2      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
 8016388:	40021000 	.word	0x40021000
 801638c:	80ffffff 	.word	0x80ffffff
 8016390:	fffffeff 	.word	0xfffffeff
 8016394:	40007000 	.word	0x40007000
 8016398:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801639c:	4a6e      	ldr	r2, [pc, #440]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801639e:	2390      	movs	r3, #144	@ 0x90
 80163a0:	58d2      	ldr	r2, [r2, r3]
 80163a2:	2380      	movs	r3, #128	@ 0x80
 80163a4:	011b      	lsls	r3, r3, #4
 80163a6:	4013      	ands	r3, r2
 80163a8:	d1e4      	bne.n	8016374 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80163aa:	231f      	movs	r3, #31
 80163ac:	18fb      	adds	r3, r7, r3
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d105      	bne.n	80163c0 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80163b4:	4b68      	ldr	r3, [pc, #416]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80163b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80163b8:	4b67      	ldr	r3, [pc, #412]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80163ba:	4968      	ldr	r1, [pc, #416]	@ (801655c <HAL_RCC_OscConfig+0x848>)
 80163bc:	400a      	ands	r2, r1
 80163be:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2220      	movs	r2, #32
 80163c6:	4013      	ands	r3, r2
 80163c8:	d03c      	beq.n	8016444 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d01c      	beq.n	801640c <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80163d2:	4a61      	ldr	r2, [pc, #388]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80163d4:	2398      	movs	r3, #152	@ 0x98
 80163d6:	58d3      	ldr	r3, [r2, r3]
 80163d8:	495f      	ldr	r1, [pc, #380]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80163da:	2201      	movs	r2, #1
 80163dc:	4313      	orrs	r3, r2
 80163de:	2298      	movs	r2, #152	@ 0x98
 80163e0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80163e2:	f7fa ffa3 	bl	801132c <HAL_GetTick>
 80163e6:	0003      	movs	r3, r0
 80163e8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80163ea:	e008      	b.n	80163fe <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80163ec:	f7fa ff9e 	bl	801132c <HAL_GetTick>
 80163f0:	0002      	movs	r2, r0
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	1ad3      	subs	r3, r2, r3
 80163f6:	2b02      	cmp	r3, #2
 80163f8:	d901      	bls.n	80163fe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 80163fa:	2303      	movs	r3, #3
 80163fc:	e0a7      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80163fe:	4a56      	ldr	r2, [pc, #344]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016400:	2398      	movs	r3, #152	@ 0x98
 8016402:	58d3      	ldr	r3, [r2, r3]
 8016404:	2202      	movs	r2, #2
 8016406:	4013      	ands	r3, r2
 8016408:	d0f0      	beq.n	80163ec <HAL_RCC_OscConfig+0x6d8>
 801640a:	e01b      	b.n	8016444 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801640c:	4a52      	ldr	r2, [pc, #328]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801640e:	2398      	movs	r3, #152	@ 0x98
 8016410:	58d3      	ldr	r3, [r2, r3]
 8016412:	4951      	ldr	r1, [pc, #324]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016414:	2201      	movs	r2, #1
 8016416:	4393      	bics	r3, r2
 8016418:	2298      	movs	r2, #152	@ 0x98
 801641a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801641c:	f7fa ff86 	bl	801132c <HAL_GetTick>
 8016420:	0003      	movs	r3, r0
 8016422:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8016424:	e008      	b.n	8016438 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016426:	f7fa ff81 	bl	801132c <HAL_GetTick>
 801642a:	0002      	movs	r2, r0
 801642c:	693b      	ldr	r3, [r7, #16]
 801642e:	1ad3      	subs	r3, r2, r3
 8016430:	2b02      	cmp	r3, #2
 8016432:	d901      	bls.n	8016438 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8016434:	2303      	movs	r3, #3
 8016436:	e08a      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8016438:	4a47      	ldr	r2, [pc, #284]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801643a:	2398      	movs	r3, #152	@ 0x98
 801643c:	58d3      	ldr	r3, [r2, r3]
 801643e:	2202      	movs	r2, #2
 8016440:	4013      	ands	r3, r2
 8016442:	d1f0      	bne.n	8016426 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016448:	2b00      	cmp	r3, #0
 801644a:	d100      	bne.n	801644e <HAL_RCC_OscConfig+0x73a>
 801644c:	e07e      	b.n	801654c <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801644e:	4b42      	ldr	r3, [pc, #264]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016450:	689b      	ldr	r3, [r3, #8]
 8016452:	2238      	movs	r2, #56	@ 0x38
 8016454:	4013      	ands	r3, r2
 8016456:	2b18      	cmp	r3, #24
 8016458:	d100      	bne.n	801645c <HAL_RCC_OscConfig+0x748>
 801645a:	e075      	b.n	8016548 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016460:	2b02      	cmp	r3, #2
 8016462:	d156      	bne.n	8016512 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016464:	4b3c      	ldr	r3, [pc, #240]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	4b3b      	ldr	r3, [pc, #236]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801646a:	493d      	ldr	r1, [pc, #244]	@ (8016560 <HAL_RCC_OscConfig+0x84c>)
 801646c:	400a      	ands	r2, r1
 801646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016470:	f7fa ff5c 	bl	801132c <HAL_GetTick>
 8016474:	0003      	movs	r3, r0
 8016476:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016478:	e008      	b.n	801648c <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801647a:	f7fa ff57 	bl	801132c <HAL_GetTick>
 801647e:	0002      	movs	r2, r0
 8016480:	693b      	ldr	r3, [r7, #16]
 8016482:	1ad3      	subs	r3, r2, r3
 8016484:	2b02      	cmp	r3, #2
 8016486:	d901      	bls.n	801648c <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8016488:	2303      	movs	r3, #3
 801648a:	e060      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801648c:	4b32      	ldr	r3, [pc, #200]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	2380      	movs	r3, #128	@ 0x80
 8016492:	049b      	lsls	r3, r3, #18
 8016494:	4013      	ands	r3, r2
 8016496:	d1f0      	bne.n	801647a <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8016498:	4b2f      	ldr	r3, [pc, #188]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	4a31      	ldr	r2, [pc, #196]	@ (8016564 <HAL_RCC_OscConfig+0x850>)
 801649e:	4013      	ands	r3, r2
 80164a0:	0019      	movs	r1, r3
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80164aa:	431a      	orrs	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164b0:	021b      	lsls	r3, r3, #8
 80164b2:	431a      	orrs	r2, r3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80164b8:	431a      	orrs	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164be:	431a      	orrs	r2, r3
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164c4:	431a      	orrs	r2, r3
 80164c6:	4b24      	ldr	r3, [pc, #144]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80164c8:	430a      	orrs	r2, r1
 80164ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 80164cc:	4b22      	ldr	r3, [pc, #136]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80164ce:	68da      	ldr	r2, [r3, #12]
 80164d0:	4b21      	ldr	r3, [pc, #132]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80164d2:	2180      	movs	r1, #128	@ 0x80
 80164d4:	0549      	lsls	r1, r1, #21
 80164d6:	430a      	orrs	r2, r1
 80164d8:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80164da:	4b1f      	ldr	r3, [pc, #124]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80164dc:	681a      	ldr	r2, [r3, #0]
 80164de:	4b1e      	ldr	r3, [pc, #120]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 80164e0:	2180      	movs	r1, #128	@ 0x80
 80164e2:	0449      	lsls	r1, r1, #17
 80164e4:	430a      	orrs	r2, r1
 80164e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80164e8:	f7fa ff20 	bl	801132c <HAL_GetTick>
 80164ec:	0003      	movs	r3, r0
 80164ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80164f0:	e008      	b.n	8016504 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80164f2:	f7fa ff1b 	bl	801132c <HAL_GetTick>
 80164f6:	0002      	movs	r2, r0
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	1ad3      	subs	r3, r2, r3
 80164fc:	2b02      	cmp	r3, #2
 80164fe:	d901      	bls.n	8016504 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8016500:	2303      	movs	r3, #3
 8016502:	e024      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016504:	4b14      	ldr	r3, [pc, #80]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	2380      	movs	r3, #128	@ 0x80
 801650a:	049b      	lsls	r3, r3, #18
 801650c:	4013      	ands	r3, r2
 801650e:	d0f0      	beq.n	80164f2 <HAL_RCC_OscConfig+0x7de>
 8016510:	e01c      	b.n	801654c <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016512:	4b11      	ldr	r3, [pc, #68]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	4b10      	ldr	r3, [pc, #64]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 8016518:	4911      	ldr	r1, [pc, #68]	@ (8016560 <HAL_RCC_OscConfig+0x84c>)
 801651a:	400a      	ands	r2, r1
 801651c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801651e:	f7fa ff05 	bl	801132c <HAL_GetTick>
 8016522:	0003      	movs	r3, r0
 8016524:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016526:	e008      	b.n	801653a <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016528:	f7fa ff00 	bl	801132c <HAL_GetTick>
 801652c:	0002      	movs	r2, r0
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	2b02      	cmp	r3, #2
 8016534:	d901      	bls.n	801653a <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8016536:	2303      	movs	r3, #3
 8016538:	e009      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801653a:	4b07      	ldr	r3, [pc, #28]	@ (8016558 <HAL_RCC_OscConfig+0x844>)
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	2380      	movs	r3, #128	@ 0x80
 8016540:	049b      	lsls	r3, r3, #18
 8016542:	4013      	ands	r3, r2
 8016544:	d1f0      	bne.n	8016528 <HAL_RCC_OscConfig+0x814>
 8016546:	e001      	b.n	801654c <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8016548:	2301      	movs	r3, #1
 801654a:	e000      	b.n	801654e <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 801654c:	2300      	movs	r3, #0
}
 801654e:	0018      	movs	r0, r3
 8016550:	46bd      	mov	sp, r7
 8016552:	b008      	add	sp, #32
 8016554:	bdb0      	pop	{r4, r5, r7, pc}
 8016556:	46c0      	nop			@ (mov r8, r8)
 8016558:	40021000 	.word	0x40021000
 801655c:	efffffff 	.word	0xefffffff
 8016560:	feffffff 	.word	0xfeffffff
 8016564:	11c1808c 	.word	0x11c1808c

08016568 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8016568:	b5b0      	push	{r4, r5, r7, lr}
 801656a:	b084      	sub	sp, #16
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016572:	4b6c      	ldr	r3, [pc, #432]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2207      	movs	r2, #7
 8016578:	4013      	ands	r3, r2
 801657a:	683a      	ldr	r2, [r7, #0]
 801657c:	429a      	cmp	r2, r3
 801657e:	d911      	bls.n	80165a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016580:	4b68      	ldr	r3, [pc, #416]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	2207      	movs	r2, #7
 8016586:	4393      	bics	r3, r2
 8016588:	0019      	movs	r1, r3
 801658a:	4b66      	ldr	r3, [pc, #408]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 801658c:	683a      	ldr	r2, [r7, #0]
 801658e:	430a      	orrs	r2, r1
 8016590:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016592:	4b64      	ldr	r3, [pc, #400]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2207      	movs	r2, #7
 8016598:	4013      	ands	r3, r2
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	429a      	cmp	r2, r3
 801659e:	d001      	beq.n	80165a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80165a0:	2301      	movs	r3, #1
 80165a2:	e0bb      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2201      	movs	r2, #1
 80165aa:	4013      	ands	r3, r2
 80165ac:	d100      	bne.n	80165b0 <HAL_RCC_ClockConfig+0x48>
 80165ae:	e064      	b.n	801667a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	2b03      	cmp	r3, #3
 80165b6:	d107      	bne.n	80165c8 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80165b8:	4b5b      	ldr	r3, [pc, #364]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80165ba:	681a      	ldr	r2, [r3, #0]
 80165bc:	2380      	movs	r3, #128	@ 0x80
 80165be:	049b      	lsls	r3, r3, #18
 80165c0:	4013      	ands	r3, r2
 80165c2:	d138      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 80165c4:	2301      	movs	r3, #1
 80165c6:	e0a9      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d107      	bne.n	80165e0 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80165d0:	4b55      	ldr	r3, [pc, #340]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	2380      	movs	r3, #128	@ 0x80
 80165d6:	029b      	lsls	r3, r3, #10
 80165d8:	4013      	ands	r3, r2
 80165da:	d12c      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80165dc:	2301      	movs	r3, #1
 80165de:	e09d      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d106      	bne.n	80165f6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80165e8:	4b4f      	ldr	r3, [pc, #316]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	2202      	movs	r2, #2
 80165ee:	4013      	ands	r3, r2
 80165f0:	d121      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80165f2:	2301      	movs	r3, #1
 80165f4:	e092      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	2b01      	cmp	r3, #1
 80165fc:	d107      	bne.n	801660e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80165fe:	4b4a      	ldr	r3, [pc, #296]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	2380      	movs	r3, #128	@ 0x80
 8016604:	00db      	lsls	r3, r3, #3
 8016606:	4013      	ands	r3, r2
 8016608:	d115      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801660a:	2301      	movs	r3, #1
 801660c:	e086      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	2b04      	cmp	r3, #4
 8016614:	d107      	bne.n	8016626 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016616:	4a44      	ldr	r2, [pc, #272]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016618:	2394      	movs	r3, #148	@ 0x94
 801661a:	58d3      	ldr	r3, [r2, r3]
 801661c:	2202      	movs	r2, #2
 801661e:	4013      	ands	r3, r2
 8016620:	d109      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016622:	2301      	movs	r3, #1
 8016624:	e07a      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016626:	4a40      	ldr	r2, [pc, #256]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016628:	2390      	movs	r3, #144	@ 0x90
 801662a:	58d3      	ldr	r3, [r2, r3]
 801662c:	2202      	movs	r2, #2
 801662e:	4013      	ands	r3, r2
 8016630:	d101      	bne.n	8016636 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016632:	2301      	movs	r3, #1
 8016634:	e072      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8016636:	4b3c      	ldr	r3, [pc, #240]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016638:	689b      	ldr	r3, [r3, #8]
 801663a:	2207      	movs	r2, #7
 801663c:	4393      	bics	r3, r2
 801663e:	0019      	movs	r1, r3
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	685a      	ldr	r2, [r3, #4]
 8016644:	4b38      	ldr	r3, [pc, #224]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016646:	430a      	orrs	r2, r1
 8016648:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801664a:	f7fa fe6f 	bl	801132c <HAL_GetTick>
 801664e:	0003      	movs	r3, r0
 8016650:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016652:	e009      	b.n	8016668 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016654:	f7fa fe6a 	bl	801132c <HAL_GetTick>
 8016658:	0002      	movs	r2, r0
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	1ad3      	subs	r3, r2, r3
 801665e:	4a33      	ldr	r2, [pc, #204]	@ (801672c <HAL_RCC_ClockConfig+0x1c4>)
 8016660:	4293      	cmp	r3, r2
 8016662:	d901      	bls.n	8016668 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8016664:	2303      	movs	r3, #3
 8016666:	e059      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016668:	4b2f      	ldr	r3, [pc, #188]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 801666a:	689b      	ldr	r3, [r3, #8]
 801666c:	2238      	movs	r2, #56	@ 0x38
 801666e:	401a      	ands	r2, r3
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	685b      	ldr	r3, [r3, #4]
 8016674:	00db      	lsls	r3, r3, #3
 8016676:	429a      	cmp	r2, r3
 8016678:	d1ec      	bne.n	8016654 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2202      	movs	r2, #2
 8016680:	4013      	ands	r3, r2
 8016682:	d009      	beq.n	8016698 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016684:	4b28      	ldr	r3, [pc, #160]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016686:	689b      	ldr	r3, [r3, #8]
 8016688:	4a29      	ldr	r2, [pc, #164]	@ (8016730 <HAL_RCC_ClockConfig+0x1c8>)
 801668a:	4013      	ands	r3, r2
 801668c:	0019      	movs	r1, r3
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	689a      	ldr	r2, [r3, #8]
 8016692:	4b25      	ldr	r3, [pc, #148]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 8016694:	430a      	orrs	r2, r1
 8016696:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016698:	4b22      	ldr	r3, [pc, #136]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	2207      	movs	r2, #7
 801669e:	4013      	ands	r3, r2
 80166a0:	683a      	ldr	r2, [r7, #0]
 80166a2:	429a      	cmp	r2, r3
 80166a4:	d211      	bcs.n	80166ca <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80166a6:	4b1f      	ldr	r3, [pc, #124]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	2207      	movs	r2, #7
 80166ac:	4393      	bics	r3, r2
 80166ae:	0019      	movs	r1, r3
 80166b0:	4b1c      	ldr	r3, [pc, #112]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 80166b2:	683a      	ldr	r2, [r7, #0]
 80166b4:	430a      	orrs	r2, r1
 80166b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80166b8:	4b1a      	ldr	r3, [pc, #104]	@ (8016724 <HAL_RCC_ClockConfig+0x1bc>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2207      	movs	r2, #7
 80166be:	4013      	ands	r3, r2
 80166c0:	683a      	ldr	r2, [r7, #0]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d001      	beq.n	80166ca <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80166c6:	2301      	movs	r3, #1
 80166c8:	e028      	b.n	801671c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2204      	movs	r2, #4
 80166d0:	4013      	ands	r3, r2
 80166d2:	d009      	beq.n	80166e8 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80166d4:	4b14      	ldr	r3, [pc, #80]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80166d6:	689b      	ldr	r3, [r3, #8]
 80166d8:	4a16      	ldr	r2, [pc, #88]	@ (8016734 <HAL_RCC_ClockConfig+0x1cc>)
 80166da:	4013      	ands	r3, r2
 80166dc:	0019      	movs	r1, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	68da      	ldr	r2, [r3, #12]
 80166e2:	4b11      	ldr	r3, [pc, #68]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80166e4:	430a      	orrs	r2, r1
 80166e6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80166e8:	f000 f82a 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 80166ec:	0001      	movs	r1, r0
 80166ee:	4b0e      	ldr	r3, [pc, #56]	@ (8016728 <HAL_RCC_ClockConfig+0x1c0>)
 80166f0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80166f2:	0a1b      	lsrs	r3, r3, #8
 80166f4:	220f      	movs	r2, #15
 80166f6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80166f8:	4a0f      	ldr	r2, [pc, #60]	@ (8016738 <HAL_RCC_ClockConfig+0x1d0>)
 80166fa:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80166fc:	001a      	movs	r2, r3
 80166fe:	231f      	movs	r3, #31
 8016700:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016702:	000a      	movs	r2, r1
 8016704:	40da      	lsrs	r2, r3
 8016706:	4b0d      	ldr	r3, [pc, #52]	@ (801673c <HAL_RCC_ClockConfig+0x1d4>)
 8016708:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 801670a:	250b      	movs	r5, #11
 801670c:	197c      	adds	r4, r7, r5
 801670e:	2003      	movs	r0, #3
 8016710:	f7fa fdb2 	bl	8011278 <HAL_InitTick>
 8016714:	0003      	movs	r3, r0
 8016716:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8016718:	197b      	adds	r3, r7, r5
 801671a:	781b      	ldrb	r3, [r3, #0]
}
 801671c:	0018      	movs	r0, r3
 801671e:	46bd      	mov	sp, r7
 8016720:	b004      	add	sp, #16
 8016722:	bdb0      	pop	{r4, r5, r7, pc}
 8016724:	40022000 	.word	0x40022000
 8016728:	40021000 	.word	0x40021000
 801672c:	00001388 	.word	0x00001388
 8016730:	fffff0ff 	.word	0xfffff0ff
 8016734:	ffff8fff 	.word	0xffff8fff
 8016738:	0801b484 	.word	0x0801b484
 801673c:	20000250 	.word	0x20000250

08016740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b08a      	sub	sp, #40	@ 0x28
 8016744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8016746:	2300      	movs	r3, #0
 8016748:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 801674a:	2300      	movs	r3, #0
 801674c:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801674e:	4b46      	ldr	r3, [pc, #280]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 8016750:	689b      	ldr	r3, [r3, #8]
 8016752:	2238      	movs	r2, #56	@ 0x38
 8016754:	4013      	ands	r3, r2
 8016756:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016758:	4b43      	ldr	r3, [pc, #268]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	2203      	movs	r2, #3
 801675e:	4013      	ands	r3, r2
 8016760:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d005      	beq.n	8016774 <HAL_RCC_GetSysClockFreq+0x34>
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	2b18      	cmp	r3, #24
 801676c:	d125      	bne.n	80167ba <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	2b01      	cmp	r3, #1
 8016772:	d122      	bne.n	80167ba <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016774:	4b3c      	ldr	r3, [pc, #240]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2208      	movs	r2, #8
 801677a:	4013      	ands	r3, r2
 801677c:	d107      	bne.n	801678e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 801677e:	4a3a      	ldr	r2, [pc, #232]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 8016780:	2394      	movs	r3, #148	@ 0x94
 8016782:	58d3      	ldr	r3, [r2, r3]
 8016784:	0a1b      	lsrs	r3, r3, #8
 8016786:	220f      	movs	r2, #15
 8016788:	4013      	ands	r3, r2
 801678a:	627b      	str	r3, [r7, #36]	@ 0x24
 801678c:	e005      	b.n	801679a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801678e:	4b36      	ldr	r3, [pc, #216]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	091b      	lsrs	r3, r3, #4
 8016794:	220f      	movs	r2, #15
 8016796:	4013      	ands	r3, r2
 8016798:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 801679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801679c:	2b0b      	cmp	r3, #11
 801679e:	d901      	bls.n	80167a4 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80167a0:	2300      	movs	r3, #0
 80167a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80167a4:	4b31      	ldr	r3, [pc, #196]	@ (801686c <HAL_RCC_GetSysClockFreq+0x12c>)
 80167a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80167a8:	0092      	lsls	r2, r2, #2
 80167aa:	58d3      	ldr	r3, [r2, r3]
 80167ac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d11b      	bne.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80167b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80167b8:	e018      	b.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	2b08      	cmp	r3, #8
 80167be:	d102      	bne.n	80167c6 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80167c0:	4b2b      	ldr	r3, [pc, #172]	@ (8016870 <HAL_RCC_GetSysClockFreq+0x130>)
 80167c2:	623b      	str	r3, [r7, #32]
 80167c4:	e012      	b.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	2b10      	cmp	r3, #16
 80167ca:	d102      	bne.n	80167d2 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80167cc:	4b29      	ldr	r3, [pc, #164]	@ (8016874 <HAL_RCC_GetSysClockFreq+0x134>)
 80167ce:	623b      	str	r3, [r7, #32]
 80167d0:	e00c      	b.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80167d2:	69bb      	ldr	r3, [r7, #24]
 80167d4:	2b20      	cmp	r3, #32
 80167d6:	d103      	bne.n	80167e0 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80167d8:	23fa      	movs	r3, #250	@ 0xfa
 80167da:	01db      	lsls	r3, r3, #7
 80167dc:	623b      	str	r3, [r7, #32]
 80167de:	e005      	b.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80167e0:	69bb      	ldr	r3, [r7, #24]
 80167e2:	2b28      	cmp	r3, #40	@ 0x28
 80167e4:	d102      	bne.n	80167ec <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80167e6:	2380      	movs	r3, #128	@ 0x80
 80167e8:	021b      	lsls	r3, r3, #8
 80167ea:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80167ec:	69bb      	ldr	r3, [r7, #24]
 80167ee:	2b18      	cmp	r3, #24
 80167f0:	d135      	bne.n	801685e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80167f2:	4b1d      	ldr	r3, [pc, #116]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 80167f4:	68db      	ldr	r3, [r3, #12]
 80167f6:	2203      	movs	r2, #3
 80167f8:	4013      	ands	r3, r2
 80167fa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80167fc:	4b1a      	ldr	r3, [pc, #104]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	091b      	lsrs	r3, r3, #4
 8016802:	2207      	movs	r2, #7
 8016804:	4013      	ands	r3, r2
 8016806:	3301      	adds	r3, #1
 8016808:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	2b02      	cmp	r3, #2
 801680e:	d003      	beq.n	8016818 <HAL_RCC_GetSysClockFreq+0xd8>
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	2b03      	cmp	r3, #3
 8016814:	d003      	beq.n	801681e <HAL_RCC_GetSysClockFreq+0xde>
 8016816:	e005      	b.n	8016824 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8016818:	4b15      	ldr	r3, [pc, #84]	@ (8016870 <HAL_RCC_GetSysClockFreq+0x130>)
 801681a:	61fb      	str	r3, [r7, #28]
        break;
 801681c:	e005      	b.n	801682a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 801681e:	4b15      	ldr	r3, [pc, #84]	@ (8016874 <HAL_RCC_GetSysClockFreq+0x134>)
 8016820:	61fb      	str	r3, [r7, #28]
        break;
 8016822:	e002      	b.n	801682a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8016824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016826:	61fb      	str	r3, [r7, #28]
        break;
 8016828:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 801682a:	4b0f      	ldr	r3, [pc, #60]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 801682c:	68db      	ldr	r3, [r3, #12]
 801682e:	0a1b      	lsrs	r3, r3, #8
 8016830:	227f      	movs	r2, #127	@ 0x7f
 8016832:	4013      	ands	r3, r2
 8016834:	69fa      	ldr	r2, [r7, #28]
 8016836:	4353      	muls	r3, r2
 8016838:	68f9      	ldr	r1, [r7, #12]
 801683a:	0018      	movs	r0, r3
 801683c:	f7e9 fc6c 	bl	8000118 <__udivsi3>
 8016840:	0003      	movs	r3, r0
 8016842:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8016844:	4b08      	ldr	r3, [pc, #32]	@ (8016868 <HAL_RCC_GetSysClockFreq+0x128>)
 8016846:	68db      	ldr	r3, [r3, #12]
 8016848:	0f5b      	lsrs	r3, r3, #29
 801684a:	2207      	movs	r2, #7
 801684c:	4013      	ands	r3, r2
 801684e:	3301      	adds	r3, #1
 8016850:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8016852:	6879      	ldr	r1, [r7, #4]
 8016854:	68b8      	ldr	r0, [r7, #8]
 8016856:	f7e9 fc5f 	bl	8000118 <__udivsi3>
 801685a:	0003      	movs	r3, r0
 801685c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 801685e:	6a3b      	ldr	r3, [r7, #32]
}
 8016860:	0018      	movs	r0, r3
 8016862:	46bd      	mov	sp, r7
 8016864:	b00a      	add	sp, #40	@ 0x28
 8016866:	bd80      	pop	{r7, pc}
 8016868:	40021000 	.word	0x40021000
 801686c:	0801b49c 	.word	0x0801b49c
 8016870:	00f42400 	.word	0x00f42400
 8016874:	003d0900 	.word	0x003d0900

08016878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801687c:	4b02      	ldr	r3, [pc, #8]	@ (8016888 <HAL_RCC_GetHCLKFreq+0x10>)
 801687e:	681b      	ldr	r3, [r3, #0]
}
 8016880:	0018      	movs	r0, r3
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	46c0      	nop			@ (mov r8, r8)
 8016888:	20000250 	.word	0x20000250

0801688c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8016890:	f7ff fff2 	bl	8016878 <HAL_RCC_GetHCLKFreq>
 8016894:	0001      	movs	r1, r0
 8016896:	4b07      	ldr	r3, [pc, #28]	@ (80168b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016898:	689b      	ldr	r3, [r3, #8]
 801689a:	0b1b      	lsrs	r3, r3, #12
 801689c:	2207      	movs	r2, #7
 801689e:	4013      	ands	r3, r2
 80168a0:	4a05      	ldr	r2, [pc, #20]	@ (80168b8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80168a2:	5cd3      	ldrb	r3, [r2, r3]
 80168a4:	001a      	movs	r2, r3
 80168a6:	231f      	movs	r3, #31
 80168a8:	4013      	ands	r3, r2
 80168aa:	40d9      	lsrs	r1, r3
 80168ac:	000b      	movs	r3, r1
}
 80168ae:	0018      	movs	r0, r3
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	40021000 	.word	0x40021000
 80168b8:	0801b494 	.word	0x0801b494

080168bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b086      	sub	sp, #24
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80168c4:	2300      	movs	r3, #0
 80168c6:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80168c8:	4b2f      	ldr	r3, [pc, #188]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80168ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80168cc:	2380      	movs	r3, #128	@ 0x80
 80168ce:	055b      	lsls	r3, r3, #21
 80168d0:	4013      	ands	r3, r2
 80168d2:	d004      	beq.n	80168de <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80168d4:	f7ff fa12 	bl	8015cfc <HAL_PWREx_GetVoltageRange>
 80168d8:	0003      	movs	r3, r0
 80168da:	617b      	str	r3, [r7, #20]
 80168dc:	e017      	b.n	801690e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80168de:	4b2a      	ldr	r3, [pc, #168]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80168e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80168e2:	4b29      	ldr	r3, [pc, #164]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80168e4:	2180      	movs	r1, #128	@ 0x80
 80168e6:	0549      	lsls	r1, r1, #21
 80168e8:	430a      	orrs	r2, r1
 80168ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80168ec:	4b26      	ldr	r3, [pc, #152]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80168ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80168f0:	2380      	movs	r3, #128	@ 0x80
 80168f2:	055b      	lsls	r3, r3, #21
 80168f4:	4013      	ands	r3, r2
 80168f6:	60fb      	str	r3, [r7, #12]
 80168f8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80168fa:	f7ff f9ff 	bl	8015cfc <HAL_PWREx_GetVoltageRange>
 80168fe:	0003      	movs	r3, r0
 8016900:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8016902:	4b21      	ldr	r3, [pc, #132]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016904:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016906:	4b20      	ldr	r3, [pc, #128]	@ (8016988 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016908:	4920      	ldr	r1, [pc, #128]	@ (801698c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 801690a:	400a      	ands	r2, r1
 801690c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801690e:	697a      	ldr	r2, [r7, #20]
 8016910:	2380      	movs	r3, #128	@ 0x80
 8016912:	009b      	lsls	r3, r3, #2
 8016914:	429a      	cmp	r2, r3
 8016916:	d111      	bne.n	801693c <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2b80      	cmp	r3, #128	@ 0x80
 801691c:	d91c      	bls.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2bb0      	cmp	r3, #176	@ 0xb0
 8016922:	d902      	bls.n	801692a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8016924:	2302      	movs	r3, #2
 8016926:	613b      	str	r3, [r7, #16]
 8016928:	e016      	b.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2b90      	cmp	r3, #144	@ 0x90
 801692e:	d902      	bls.n	8016936 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8016930:	2301      	movs	r3, #1
 8016932:	613b      	str	r3, [r7, #16]
 8016934:	e010      	b.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8016936:	2300      	movs	r3, #0
 8016938:	613b      	str	r3, [r7, #16]
 801693a:	e00d      	b.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016940:	d902      	bls.n	8016948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8016942:	2302      	movs	r3, #2
 8016944:	613b      	str	r3, [r7, #16]
 8016946:	e007      	b.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2b70      	cmp	r3, #112	@ 0x70
 801694c:	d102      	bne.n	8016954 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 801694e:	2301      	movs	r3, #1
 8016950:	613b      	str	r3, [r7, #16]
 8016952:	e001      	b.n	8016958 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8016954:	2300      	movs	r3, #0
 8016956:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8016958:	4b0d      	ldr	r3, [pc, #52]	@ (8016990 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	2207      	movs	r2, #7
 801695e:	4393      	bics	r3, r2
 8016960:	0019      	movs	r1, r3
 8016962:	4b0b      	ldr	r3, [pc, #44]	@ (8016990 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8016964:	693a      	ldr	r2, [r7, #16]
 8016966:	430a      	orrs	r2, r1
 8016968:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801696a:	4b09      	ldr	r3, [pc, #36]	@ (8016990 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	2207      	movs	r2, #7
 8016970:	4013      	ands	r3, r2
 8016972:	693a      	ldr	r2, [r7, #16]
 8016974:	429a      	cmp	r2, r3
 8016976:	d001      	beq.n	801697c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8016978:	2301      	movs	r3, #1
 801697a:	e000      	b.n	801697e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 801697c:	2300      	movs	r3, #0
}
 801697e:	0018      	movs	r0, r3
 8016980:	46bd      	mov	sp, r7
 8016982:	b006      	add	sp, #24
 8016984:	bd80      	pop	{r7, pc}
 8016986:	46c0      	nop			@ (mov r8, r8)
 8016988:	40021000 	.word	0x40021000
 801698c:	efffffff 	.word	0xefffffff
 8016990:	40022000 	.word	0x40022000

08016994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b086      	sub	sp, #24
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801699c:	2313      	movs	r3, #19
 801699e:	18fb      	adds	r3, r7, r3
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80169a4:	2312      	movs	r3, #18
 80169a6:	18fb      	adds	r3, r7, r3
 80169a8:	2200      	movs	r2, #0
 80169aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681a      	ldr	r2, [r3, #0]
 80169b0:	2380      	movs	r3, #128	@ 0x80
 80169b2:	021b      	lsls	r3, r3, #8
 80169b4:	4013      	ands	r3, r2
 80169b6:	d100      	bne.n	80169ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80169b8:	e0b7      	b.n	8016b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80169ba:	2011      	movs	r0, #17
 80169bc:	183b      	adds	r3, r7, r0
 80169be:	2200      	movs	r2, #0
 80169c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80169c2:	4b4c      	ldr	r3, [pc, #304]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80169c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80169c6:	2380      	movs	r3, #128	@ 0x80
 80169c8:	055b      	lsls	r3, r3, #21
 80169ca:	4013      	ands	r3, r2
 80169cc:	d110      	bne.n	80169f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80169ce:	4b49      	ldr	r3, [pc, #292]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80169d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80169d2:	4b48      	ldr	r3, [pc, #288]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80169d4:	2180      	movs	r1, #128	@ 0x80
 80169d6:	0549      	lsls	r1, r1, #21
 80169d8:	430a      	orrs	r2, r1
 80169da:	659a      	str	r2, [r3, #88]	@ 0x58
 80169dc:	4b45      	ldr	r3, [pc, #276]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80169de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80169e0:	2380      	movs	r3, #128	@ 0x80
 80169e2:	055b      	lsls	r3, r3, #21
 80169e4:	4013      	ands	r3, r2
 80169e6:	60bb      	str	r3, [r7, #8]
 80169e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80169ea:	183b      	adds	r3, r7, r0
 80169ec:	2201      	movs	r2, #1
 80169ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80169f0:	4b41      	ldr	r3, [pc, #260]	@ (8016af8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80169f2:	681a      	ldr	r2, [r3, #0]
 80169f4:	4b40      	ldr	r3, [pc, #256]	@ (8016af8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80169f6:	2180      	movs	r1, #128	@ 0x80
 80169f8:	0049      	lsls	r1, r1, #1
 80169fa:	430a      	orrs	r2, r1
 80169fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80169fe:	f7fa fc95 	bl	801132c <HAL_GetTick>
 8016a02:	0003      	movs	r3, r0
 8016a04:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8016a06:	e00b      	b.n	8016a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016a08:	f7fa fc90 	bl	801132c <HAL_GetTick>
 8016a0c:	0002      	movs	r2, r0
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	2b02      	cmp	r3, #2
 8016a14:	d904      	bls.n	8016a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8016a16:	2313      	movs	r3, #19
 8016a18:	18fb      	adds	r3, r7, r3
 8016a1a:	2203      	movs	r2, #3
 8016a1c:	701a      	strb	r2, [r3, #0]
        break;
 8016a1e:	e005      	b.n	8016a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8016a20:	4b35      	ldr	r3, [pc, #212]	@ (8016af8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8016a22:	681a      	ldr	r2, [r3, #0]
 8016a24:	2380      	movs	r3, #128	@ 0x80
 8016a26:	005b      	lsls	r3, r3, #1
 8016a28:	4013      	ands	r3, r2
 8016a2a:	d0ed      	beq.n	8016a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8016a2c:	2313      	movs	r3, #19
 8016a2e:	18fb      	adds	r3, r7, r3
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d168      	bne.n	8016b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8016a36:	4a2f      	ldr	r2, [pc, #188]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a38:	2390      	movs	r3, #144	@ 0x90
 8016a3a:	58d2      	ldr	r2, [r2, r3]
 8016a3c:	23c0      	movs	r3, #192	@ 0xc0
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	4013      	ands	r3, r2
 8016a42:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d01f      	beq.n	8016a8a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a4e:	697a      	ldr	r2, [r7, #20]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d01a      	beq.n	8016a8a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8016a54:	4a27      	ldr	r2, [pc, #156]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a56:	2390      	movs	r3, #144	@ 0x90
 8016a58:	58d3      	ldr	r3, [r2, r3]
 8016a5a:	4a28      	ldr	r2, [pc, #160]	@ (8016afc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8016a5c:	4013      	ands	r3, r2
 8016a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016a60:	4a24      	ldr	r2, [pc, #144]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a62:	2390      	movs	r3, #144	@ 0x90
 8016a64:	58d3      	ldr	r3, [r2, r3]
 8016a66:	4923      	ldr	r1, [pc, #140]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a68:	2280      	movs	r2, #128	@ 0x80
 8016a6a:	0252      	lsls	r2, r2, #9
 8016a6c:	4313      	orrs	r3, r2
 8016a6e:	2290      	movs	r2, #144	@ 0x90
 8016a70:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016a72:	4a20      	ldr	r2, [pc, #128]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a74:	2390      	movs	r3, #144	@ 0x90
 8016a76:	58d3      	ldr	r3, [r2, r3]
 8016a78:	491e      	ldr	r1, [pc, #120]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a7a:	4a21      	ldr	r2, [pc, #132]	@ (8016b00 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8016a7c:	4013      	ands	r3, r2
 8016a7e:	2290      	movs	r2, #144	@ 0x90
 8016a80:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8016a82:	491c      	ldr	r1, [pc, #112]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016a84:	2290      	movs	r2, #144	@ 0x90
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	4013      	ands	r3, r2
 8016a90:	d017      	beq.n	8016ac2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016a92:	f7fa fc4b 	bl	801132c <HAL_GetTick>
 8016a96:	0003      	movs	r3, r0
 8016a98:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016a9a:	e00c      	b.n	8016ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016a9c:	f7fa fc46 	bl	801132c <HAL_GetTick>
 8016aa0:	0002      	movs	r2, r0
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	1ad3      	subs	r3, r2, r3
 8016aa6:	4a17      	ldr	r2, [pc, #92]	@ (8016b04 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d904      	bls.n	8016ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8016aac:	2313      	movs	r3, #19
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	2203      	movs	r2, #3
 8016ab2:	701a      	strb	r2, [r3, #0]
            break;
 8016ab4:	e005      	b.n	8016ac2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016ab8:	2390      	movs	r3, #144	@ 0x90
 8016aba:	58d3      	ldr	r3, [r2, r3]
 8016abc:	2202      	movs	r2, #2
 8016abe:	4013      	ands	r3, r2
 8016ac0:	d0ec      	beq.n	8016a9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8016ac2:	2313      	movs	r3, #19
 8016ac4:	18fb      	adds	r3, r7, r3
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d10b      	bne.n	8016ae4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016acc:	4a09      	ldr	r2, [pc, #36]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016ace:	2390      	movs	r3, #144	@ 0x90
 8016ad0:	58d3      	ldr	r3, [r2, r3]
 8016ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8016afc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8016ad4:	401a      	ands	r2, r3
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ada:	4906      	ldr	r1, [pc, #24]	@ (8016af4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016adc:	4313      	orrs	r3, r2
 8016ade:	2290      	movs	r2, #144	@ 0x90
 8016ae0:	508b      	str	r3, [r1, r2]
 8016ae2:	e017      	b.n	8016b14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8016ae4:	2312      	movs	r3, #18
 8016ae6:	18fb      	adds	r3, r7, r3
 8016ae8:	2213      	movs	r2, #19
 8016aea:	18ba      	adds	r2, r7, r2
 8016aec:	7812      	ldrb	r2, [r2, #0]
 8016aee:	701a      	strb	r2, [r3, #0]
 8016af0:	e010      	b.n	8016b14 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8016af2:	46c0      	nop			@ (mov r8, r8)
 8016af4:	40021000 	.word	0x40021000
 8016af8:	40007000 	.word	0x40007000
 8016afc:	fffffcff 	.word	0xfffffcff
 8016b00:	fffeffff 	.word	0xfffeffff
 8016b04:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016b08:	2312      	movs	r3, #18
 8016b0a:	18fb      	adds	r3, r7, r3
 8016b0c:	2213      	movs	r2, #19
 8016b0e:	18ba      	adds	r2, r7, r2
 8016b10:	7812      	ldrb	r2, [r2, #0]
 8016b12:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016b14:	2311      	movs	r3, #17
 8016b16:	18fb      	adds	r3, r7, r3
 8016b18:	781b      	ldrb	r3, [r3, #0]
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d105      	bne.n	8016b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016b1e:	4ba4      	ldr	r3, [pc, #656]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016b22:	4ba3      	ldr	r3, [pc, #652]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b24:	49a3      	ldr	r1, [pc, #652]	@ (8016db4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8016b26:	400a      	ands	r2, r1
 8016b28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2201      	movs	r2, #1
 8016b30:	4013      	ands	r3, r2
 8016b32:	d00b      	beq.n	8016b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8016b34:	4a9e      	ldr	r2, [pc, #632]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b36:	2388      	movs	r3, #136	@ 0x88
 8016b38:	58d3      	ldr	r3, [r2, r3]
 8016b3a:	2203      	movs	r2, #3
 8016b3c:	4393      	bics	r3, r2
 8016b3e:	001a      	movs	r2, r3
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	685b      	ldr	r3, [r3, #4]
 8016b44:	499a      	ldr	r1, [pc, #616]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b46:	4313      	orrs	r3, r2
 8016b48:	2288      	movs	r2, #136	@ 0x88
 8016b4a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2202      	movs	r2, #2
 8016b52:	4013      	ands	r3, r2
 8016b54:	d00b      	beq.n	8016b6e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8016b56:	4a96      	ldr	r2, [pc, #600]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b58:	2388      	movs	r3, #136	@ 0x88
 8016b5a:	58d3      	ldr	r3, [r2, r3]
 8016b5c:	220c      	movs	r2, #12
 8016b5e:	4393      	bics	r3, r2
 8016b60:	001a      	movs	r2, r3
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	689b      	ldr	r3, [r3, #8]
 8016b66:	4992      	ldr	r1, [pc, #584]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b68:	4313      	orrs	r3, r2
 8016b6a:	2288      	movs	r2, #136	@ 0x88
 8016b6c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2210      	movs	r2, #16
 8016b74:	4013      	ands	r3, r2
 8016b76:	d00a      	beq.n	8016b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016b78:	4a8d      	ldr	r2, [pc, #564]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b7a:	2388      	movs	r3, #136	@ 0x88
 8016b7c:	58d3      	ldr	r3, [r2, r3]
 8016b7e:	4a8e      	ldr	r2, [pc, #568]	@ (8016db8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8016b80:	401a      	ands	r2, r3
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	695b      	ldr	r3, [r3, #20]
 8016b86:	498a      	ldr	r1, [pc, #552]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b88:	4313      	orrs	r3, r2
 8016b8a:	2288      	movs	r2, #136	@ 0x88
 8016b8c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2208      	movs	r2, #8
 8016b94:	4013      	ands	r3, r2
 8016b96:	d00a      	beq.n	8016bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8016b98:	4a85      	ldr	r2, [pc, #532]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b9a:	2388      	movs	r3, #136	@ 0x88
 8016b9c:	58d3      	ldr	r3, [r2, r3]
 8016b9e:	4a87      	ldr	r2, [pc, #540]	@ (8016dbc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8016ba0:	401a      	ands	r2, r3
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	691b      	ldr	r3, [r3, #16]
 8016ba6:	4982      	ldr	r1, [pc, #520]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ba8:	4313      	orrs	r3, r2
 8016baa:	2288      	movs	r2, #136	@ 0x88
 8016bac:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2204      	movs	r2, #4
 8016bb4:	4013      	ands	r3, r2
 8016bb6:	d00b      	beq.n	8016bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8016bb8:	4a7d      	ldr	r2, [pc, #500]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bba:	2388      	movs	r3, #136	@ 0x88
 8016bbc:	58d3      	ldr	r3, [r2, r3]
 8016bbe:	22c0      	movs	r2, #192	@ 0xc0
 8016bc0:	4393      	bics	r3, r2
 8016bc2:	001a      	movs	r2, r3
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	4979      	ldr	r1, [pc, #484]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	2288      	movs	r2, #136	@ 0x88
 8016bce:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	2220      	movs	r2, #32
 8016bd6:	4013      	ands	r3, r2
 8016bd8:	d00a      	beq.n	8016bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8016bda:	4a75      	ldr	r2, [pc, #468]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bdc:	2388      	movs	r3, #136	@ 0x88
 8016bde:	58d3      	ldr	r3, [r2, r3]
 8016be0:	4a77      	ldr	r2, [pc, #476]	@ (8016dc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8016be2:	401a      	ands	r2, r3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	699b      	ldr	r3, [r3, #24]
 8016be8:	4971      	ldr	r1, [pc, #452]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bea:	4313      	orrs	r3, r2
 8016bec:	2288      	movs	r2, #136	@ 0x88
 8016bee:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2240      	movs	r2, #64	@ 0x40
 8016bf6:	4013      	ands	r3, r2
 8016bf8:	d00a      	beq.n	8016c10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8016bfa:	4a6d      	ldr	r2, [pc, #436]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bfc:	2388      	movs	r3, #136	@ 0x88
 8016bfe:	58d3      	ldr	r3, [r2, r3]
 8016c00:	4a70      	ldr	r2, [pc, #448]	@ (8016dc4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8016c02:	401a      	ands	r2, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	69db      	ldr	r3, [r3, #28]
 8016c08:	4969      	ldr	r1, [pc, #420]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c0a:	4313      	orrs	r3, r2
 8016c0c:	2288      	movs	r2, #136	@ 0x88
 8016c0e:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2280      	movs	r2, #128	@ 0x80
 8016c16:	4013      	ands	r3, r2
 8016c18:	d00a      	beq.n	8016c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016c1a:	4a65      	ldr	r2, [pc, #404]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c1c:	2388      	movs	r3, #136	@ 0x88
 8016c1e:	58d3      	ldr	r3, [r2, r3]
 8016c20:	4a69      	ldr	r2, [pc, #420]	@ (8016dc8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8016c22:	401a      	ands	r2, r3
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6a1b      	ldr	r3, [r3, #32]
 8016c28:	4961      	ldr	r1, [pc, #388]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c2a:	4313      	orrs	r3, r2
 8016c2c:	2288      	movs	r2, #136	@ 0x88
 8016c2e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	2380      	movs	r3, #128	@ 0x80
 8016c36:	005b      	lsls	r3, r3, #1
 8016c38:	4013      	ands	r3, r2
 8016c3a:	d00a      	beq.n	8016c52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c3e:	2388      	movs	r3, #136	@ 0x88
 8016c40:	58d3      	ldr	r3, [r2, r3]
 8016c42:	4a62      	ldr	r2, [pc, #392]	@ (8016dcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8016c44:	401a      	ands	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c4a:	4959      	ldr	r1, [pc, #356]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c4c:	4313      	orrs	r3, r2
 8016c4e:	2288      	movs	r2, #136	@ 0x88
 8016c50:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681a      	ldr	r2, [r3, #0]
 8016c56:	2380      	movs	r3, #128	@ 0x80
 8016c58:	009b      	lsls	r3, r3, #2
 8016c5a:	4013      	ands	r3, r2
 8016c5c:	d00a      	beq.n	8016c74 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8016c5e:	4a54      	ldr	r2, [pc, #336]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c60:	2388      	movs	r3, #136	@ 0x88
 8016c62:	58d3      	ldr	r3, [r2, r3]
 8016c64:	4a5a      	ldr	r2, [pc, #360]	@ (8016dd0 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8016c66:	401a      	ands	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c6c:	4950      	ldr	r1, [pc, #320]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c6e:	4313      	orrs	r3, r2
 8016c70:	2288      	movs	r2, #136	@ 0x88
 8016c72:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	2380      	movs	r3, #128	@ 0x80
 8016c7a:	01db      	lsls	r3, r3, #7
 8016c7c:	4013      	ands	r3, r2
 8016c7e:	d017      	beq.n	8016cb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016c84:	2380      	movs	r3, #128	@ 0x80
 8016c86:	055b      	lsls	r3, r3, #21
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d106      	bne.n	8016c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8016c8c:	4b48      	ldr	r3, [pc, #288]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c8e:	68da      	ldr	r2, [r3, #12]
 8016c90:	4b47      	ldr	r3, [pc, #284]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c92:	2180      	movs	r1, #128	@ 0x80
 8016c94:	0249      	lsls	r1, r1, #9
 8016c96:	430a      	orrs	r2, r1
 8016c98:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016c9a:	4a45      	ldr	r2, [pc, #276]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016c9c:	2388      	movs	r3, #136	@ 0x88
 8016c9e:	58d3      	ldr	r3, [r2, r3]
 8016ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8016dd4 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8016ca2:	401a      	ands	r2, r3
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ca8:	4941      	ldr	r1, [pc, #260]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016caa:	4313      	orrs	r3, r2
 8016cac:	2288      	movs	r2, #136	@ 0x88
 8016cae:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681a      	ldr	r2, [r3, #0]
 8016cb4:	2380      	movs	r3, #128	@ 0x80
 8016cb6:	015b      	lsls	r3, r3, #5
 8016cb8:	4013      	ands	r3, r2
 8016cba:	d017      	beq.n	8016cec <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016cc0:	2380      	movs	r3, #128	@ 0x80
 8016cc2:	051b      	lsls	r3, r3, #20
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d106      	bne.n	8016cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016cc8:	4b39      	ldr	r3, [pc, #228]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016cca:	68da      	ldr	r2, [r3, #12]
 8016ccc:	4b38      	ldr	r3, [pc, #224]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016cce:	2180      	movs	r1, #128	@ 0x80
 8016cd0:	0449      	lsls	r1, r1, #17
 8016cd2:	430a      	orrs	r2, r1
 8016cd4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016cd6:	4a36      	ldr	r2, [pc, #216]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016cd8:	2388      	movs	r3, #136	@ 0x88
 8016cda:	58d3      	ldr	r3, [r2, r3]
 8016cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8016dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8016cde:	401a      	ands	r2, r3
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ce4:	4932      	ldr	r1, [pc, #200]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ce6:	4313      	orrs	r3, r2
 8016ce8:	2288      	movs	r2, #136	@ 0x88
 8016cea:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	2380      	movs	r3, #128	@ 0x80
 8016cf2:	019b      	lsls	r3, r3, #6
 8016cf4:	4013      	ands	r3, r2
 8016cf6:	d017      	beq.n	8016d28 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016cfc:	2380      	movs	r3, #128	@ 0x80
 8016cfe:	051b      	lsls	r3, r3, #20
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d106      	bne.n	8016d12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016d04:	4b2a      	ldr	r3, [pc, #168]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d06:	68da      	ldr	r2, [r3, #12]
 8016d08:	4b29      	ldr	r3, [pc, #164]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d0a:	2180      	movs	r1, #128	@ 0x80
 8016d0c:	0449      	lsls	r1, r1, #17
 8016d0e:	430a      	orrs	r2, r1
 8016d10:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016d12:	4a27      	ldr	r2, [pc, #156]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d14:	2388      	movs	r3, #136	@ 0x88
 8016d16:	58d3      	ldr	r3, [r2, r3]
 8016d18:	4a2f      	ldr	r2, [pc, #188]	@ (8016dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8016d1a:	401a      	ands	r2, r3
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d20:	4923      	ldr	r1, [pc, #140]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d22:	4313      	orrs	r3, r2
 8016d24:	2288      	movs	r2, #136	@ 0x88
 8016d26:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	2380      	movs	r3, #128	@ 0x80
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	4013      	ands	r3, r2
 8016d32:	d017      	beq.n	8016d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016d38:	2380      	movs	r3, #128	@ 0x80
 8016d3a:	045b      	lsls	r3, r3, #17
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d106      	bne.n	8016d4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016d40:	4b1b      	ldr	r3, [pc, #108]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d42:	68da      	ldr	r2, [r3, #12]
 8016d44:	4b1a      	ldr	r3, [pc, #104]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d46:	2180      	movs	r1, #128	@ 0x80
 8016d48:	0449      	lsls	r1, r1, #17
 8016d4a:	430a      	orrs	r2, r1
 8016d4c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8016d4e:	4a18      	ldr	r2, [pc, #96]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d50:	2388      	movs	r3, #136	@ 0x88
 8016d52:	58d3      	ldr	r3, [r2, r3]
 8016d54:	4a21      	ldr	r2, [pc, #132]	@ (8016ddc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016d56:	401a      	ands	r2, r3
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d5c:	4914      	ldr	r1, [pc, #80]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d5e:	4313      	orrs	r3, r2
 8016d60:	2288      	movs	r2, #136	@ 0x88
 8016d62:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681a      	ldr	r2, [r3, #0]
 8016d68:	2380      	movs	r3, #128	@ 0x80
 8016d6a:	011b      	lsls	r3, r3, #4
 8016d6c:	4013      	ands	r3, r2
 8016d6e:	d017      	beq.n	8016da0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016d74:	2380      	movs	r3, #128	@ 0x80
 8016d76:	049b      	lsls	r3, r3, #18
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d106      	bne.n	8016d8a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d7e:	68da      	ldr	r2, [r3, #12]
 8016d80:	4b0b      	ldr	r3, [pc, #44]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d82:	2180      	movs	r1, #128	@ 0x80
 8016d84:	0449      	lsls	r1, r1, #17
 8016d86:	430a      	orrs	r2, r1
 8016d88:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8016d8a:	4a09      	ldr	r2, [pc, #36]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d8c:	2388      	movs	r3, #136	@ 0x88
 8016d8e:	58d3      	ldr	r3, [r2, r3]
 8016d90:	4a12      	ldr	r2, [pc, #72]	@ (8016ddc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016d92:	401a      	ands	r2, r3
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d98:	4905      	ldr	r1, [pc, #20]	@ (8016db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016d9a:	4313      	orrs	r3, r2
 8016d9c:	2288      	movs	r2, #136	@ 0x88
 8016d9e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8016da0:	2312      	movs	r3, #18
 8016da2:	18fb      	adds	r3, r7, r3
 8016da4:	781b      	ldrb	r3, [r3, #0]
}
 8016da6:	0018      	movs	r0, r3
 8016da8:	46bd      	mov	sp, r7
 8016daa:	b006      	add	sp, #24
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	46c0      	nop			@ (mov r8, r8)
 8016db0:	40021000 	.word	0x40021000
 8016db4:	efffffff 	.word	0xefffffff
 8016db8:	fffff3ff 	.word	0xfffff3ff
 8016dbc:	fffffcff 	.word	0xfffffcff
 8016dc0:	ffffcfff 	.word	0xffffcfff
 8016dc4:	fffcffff 	.word	0xfffcffff
 8016dc8:	fff3ffff 	.word	0xfff3ffff
 8016dcc:	ffcfffff 	.word	0xffcfffff
 8016dd0:	ff3fffff 	.word	0xff3fffff
 8016dd4:	cfffffff 	.word	0xcfffffff
 8016dd8:	f3ffffff 	.word	0xf3ffffff
 8016ddc:	feffffff 	.word	0xfeffffff

08016de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8016de0:	b590      	push	{r4, r7, lr}
 8016de2:	b089      	sub	sp, #36	@ 0x24
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8016de8:	2300      	movs	r3, #0
 8016dea:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	2380      	movs	r3, #128	@ 0x80
 8016df0:	021b      	lsls	r3, r3, #8
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d154      	bne.n	8016ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8016df6:	4ad5      	ldr	r2, [pc, #852]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016df8:	2390      	movs	r3, #144	@ 0x90
 8016dfa:	58d2      	ldr	r2, [r2, r3]
 8016dfc:	23c0      	movs	r3, #192	@ 0xc0
 8016dfe:	009b      	lsls	r3, r3, #2
 8016e00:	4013      	ands	r3, r2
 8016e02:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	23c0      	movs	r3, #192	@ 0xc0
 8016e08:	009b      	lsls	r3, r3, #2
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d039      	beq.n	8016e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8016e0e:	697a      	ldr	r2, [r7, #20]
 8016e10:	23c0      	movs	r3, #192	@ 0xc0
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d901      	bls.n	8016e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8016e18:	f000 fd1a 	bl	8017850 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8016e1c:	697a      	ldr	r2, [r7, #20]
 8016e1e:	2380      	movs	r3, #128	@ 0x80
 8016e20:	005b      	lsls	r3, r3, #1
 8016e22:	429a      	cmp	r2, r3
 8016e24:	d006      	beq.n	8016e34 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8016e26:	697a      	ldr	r2, [r7, #20]
 8016e28:	2380      	movs	r3, #128	@ 0x80
 8016e2a:	009b      	lsls	r3, r3, #2
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d00f      	beq.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8016e30:	f000 fd0e 	bl	8017850 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016e34:	4ac5      	ldr	r2, [pc, #788]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e36:	2390      	movs	r3, #144	@ 0x90
 8016e38:	58d3      	ldr	r3, [r2, r3]
 8016e3a:	2202      	movs	r2, #2
 8016e3c:	4013      	ands	r3, r2
 8016e3e:	2b02      	cmp	r3, #2
 8016e40:	d001      	beq.n	8016e46 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8016e42:	f000 fd07 	bl	8017854 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8016e46:	2380      	movs	r3, #128	@ 0x80
 8016e48:	021b      	lsls	r3, r3, #8
 8016e4a:	61fb      	str	r3, [r7, #28]
        break;
 8016e4c:	f000 fd02 	bl	8017854 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8016e50:	4abe      	ldr	r2, [pc, #760]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e52:	2394      	movs	r3, #148	@ 0x94
 8016e54:	58d3      	ldr	r3, [r2, r3]
 8016e56:	2202      	movs	r2, #2
 8016e58:	4013      	ands	r3, r2
 8016e5a:	2b02      	cmp	r3, #2
 8016e5c:	d001      	beq.n	8016e62 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8016e5e:	f000 fcfb 	bl	8017858 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8016e62:	4aba      	ldr	r2, [pc, #744]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e64:	2394      	movs	r3, #148	@ 0x94
 8016e66:	58d3      	ldr	r3, [r2, r3]
 8016e68:	2204      	movs	r2, #4
 8016e6a:	4013      	ands	r3, r2
 8016e6c:	2b04      	cmp	r3, #4
 8016e6e:	d103      	bne.n	8016e78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8016e70:	23fa      	movs	r3, #250	@ 0xfa
 8016e72:	61fb      	str	r3, [r7, #28]
        break;
 8016e74:	f000 fcf0 	bl	8017858 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8016e78:	23fa      	movs	r3, #250	@ 0xfa
 8016e7a:	01db      	lsls	r3, r3, #7
 8016e7c:	61fb      	str	r3, [r7, #28]
        break;
 8016e7e:	f000 fceb 	bl	8017858 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016e82:	4bb2      	ldr	r3, [pc, #712]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e84:	681a      	ldr	r2, [r3, #0]
 8016e86:	2380      	movs	r3, #128	@ 0x80
 8016e88:	029b      	lsls	r3, r3, #10
 8016e8a:	401a      	ands	r2, r3
 8016e8c:	2380      	movs	r3, #128	@ 0x80
 8016e8e:	029b      	lsls	r3, r3, #10
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d001      	beq.n	8016e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8016e94:	f000 fce2 	bl	801785c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8016e98:	4bad      	ldr	r3, [pc, #692]	@ (8017150 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8016e9a:	61fb      	str	r3, [r7, #28]
        break;
 8016e9c:	f000 fcde 	bl	801785c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8016ea0:	687a      	ldr	r2, [r7, #4]
 8016ea2:	2380      	movs	r3, #128	@ 0x80
 8016ea4:	029b      	lsls	r3, r3, #10
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d100      	bne.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8016eaa:	e11a      	b.n	80170e2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	2380      	movs	r3, #128	@ 0x80
 8016eb0:	029b      	lsls	r3, r3, #10
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d901      	bls.n	8016eba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8016eb6:	f000 fcd3 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	2380      	movs	r3, #128	@ 0x80
 8016ebe:	025b      	lsls	r3, r3, #9
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d100      	bne.n	8016ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8016ec4:	e10d      	b.n	80170e2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016ec6:	687a      	ldr	r2, [r7, #4]
 8016ec8:	2380      	movs	r3, #128	@ 0x80
 8016eca:	025b      	lsls	r3, r3, #9
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d901      	bls.n	8016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8016ed0:	f000 fcc6 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	2380      	movs	r3, #128	@ 0x80
 8016ed8:	01db      	lsls	r3, r3, #7
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d100      	bne.n	8016ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8016ede:	e1eb      	b.n	80172b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	2380      	movs	r3, #128	@ 0x80
 8016ee4:	01db      	lsls	r3, r3, #7
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d901      	bls.n	8016eee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8016eea:	f000 fcb9 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016eee:	687a      	ldr	r2, [r7, #4]
 8016ef0:	2380      	movs	r3, #128	@ 0x80
 8016ef2:	019b      	lsls	r3, r3, #6
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d101      	bne.n	8016efc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8016ef8:	f000 fc50 	bl	801779c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	2380      	movs	r3, #128	@ 0x80
 8016f00:	019b      	lsls	r3, r3, #6
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d901      	bls.n	8016f0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8016f06:	f000 fcab 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	2380      	movs	r3, #128	@ 0x80
 8016f0e:	015b      	lsls	r3, r3, #5
 8016f10:	429a      	cmp	r2, r3
 8016f12:	d101      	bne.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8016f14:	f000 fbe2 	bl	80176dc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8016f18:	687a      	ldr	r2, [r7, #4]
 8016f1a:	2380      	movs	r3, #128	@ 0x80
 8016f1c:	015b      	lsls	r3, r3, #5
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d901      	bls.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8016f22:	f000 fc9d 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	2380      	movs	r3, #128	@ 0x80
 8016f2a:	011b      	lsls	r3, r3, #4
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d101      	bne.n	8016f34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8016f30:	f000 fba9 	bl	8017686 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8016f34:	687a      	ldr	r2, [r7, #4]
 8016f36:	2380      	movs	r3, #128	@ 0x80
 8016f38:	011b      	lsls	r3, r3, #4
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d901      	bls.n	8016f42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8016f3e:	f000 fc8f 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	2380      	movs	r3, #128	@ 0x80
 8016f46:	00db      	lsls	r3, r3, #3
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d101      	bne.n	8016f50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8016f4c:	f000 fb70 	bl	8017630 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	2380      	movs	r3, #128	@ 0x80
 8016f54:	00db      	lsls	r3, r3, #3
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d901      	bls.n	8016f5e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8016f5a:	f000 fc81 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	2380      	movs	r3, #128	@ 0x80
 8016f62:	009b      	lsls	r3, r3, #2
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d100      	bne.n	8016f6a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8016f68:	e305      	b.n	8017576 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	2380      	movs	r3, #128	@ 0x80
 8016f6e:	009b      	lsls	r3, r3, #2
 8016f70:	429a      	cmp	r2, r3
 8016f72:	d901      	bls.n	8016f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8016f74:	f000 fc74 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	2380      	movs	r3, #128	@ 0x80
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	d100      	bne.n	8016f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8016f82:	e29b      	b.n	80174bc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8016f84:	687a      	ldr	r2, [r7, #4]
 8016f86:	2380      	movs	r3, #128	@ 0x80
 8016f88:	005b      	lsls	r3, r3, #1
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	d901      	bls.n	8016f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8016f8e:	f000 fc67 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2b80      	cmp	r3, #128	@ 0x80
 8016f96:	d100      	bne.n	8016f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8016f98:	e22f      	b.n	80173fa <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b80      	cmp	r3, #128	@ 0x80
 8016f9e:	d901      	bls.n	8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8016fa0:	f000 fc5e 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2b20      	cmp	r3, #32
 8016fa8:	d80f      	bhi.n	8016fca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d101      	bne.n	8016fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8016fb0:	f000 fc56 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2b20      	cmp	r3, #32
 8016fb8:	d901      	bls.n	8016fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8016fba:	f000 fc51 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	009a      	lsls	r2, r3, #2
 8016fc2:	4b64      	ldr	r3, [pc, #400]	@ (8017154 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8016fc4:	18d3      	adds	r3, r2, r3
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	469f      	mov	pc, r3
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2b40      	cmp	r3, #64	@ 0x40
 8016fce:	d100      	bne.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8016fd0:	e1df      	b.n	8017392 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8016fd2:	f000 fc45 	bl	8017860 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016fd6:	4a5d      	ldr	r2, [pc, #372]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016fd8:	2388      	movs	r3, #136	@ 0x88
 8016fda:	58d3      	ldr	r3, [r2, r3]
 8016fdc:	2203      	movs	r2, #3
 8016fde:	4013      	ands	r3, r2
 8016fe0:	617b      	str	r3, [r7, #20]
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	2b03      	cmp	r3, #3
 8016fe6:	d025      	beq.n	8017034 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	2b03      	cmp	r3, #3
 8016fec:	d82d      	bhi.n	801704a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	2b02      	cmp	r3, #2
 8016ff2:	d013      	beq.n	801701c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	2b02      	cmp	r3, #2
 8016ff8:	d827      	bhi.n	801704a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016ffa:	697b      	ldr	r3, [r7, #20]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d003      	beq.n	8017008 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d005      	beq.n	8017012 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8017006:	e020      	b.n	801704a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017008:	f7ff fc40 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 801700c:	0003      	movs	r3, r0
 801700e:	61fb      	str	r3, [r7, #28]
            break;
 8017010:	e022      	b.n	8017058 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8017012:	f7ff fb95 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 8017016:	0003      	movs	r3, r0
 8017018:	61fb      	str	r3, [r7, #28]
            break;
 801701a:	e01d      	b.n	8017058 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801701c:	4b4b      	ldr	r3, [pc, #300]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	2380      	movs	r3, #128	@ 0x80
 8017022:	00db      	lsls	r3, r3, #3
 8017024:	401a      	ands	r2, r3
 8017026:	2380      	movs	r3, #128	@ 0x80
 8017028:	00db      	lsls	r3, r3, #3
 801702a:	429a      	cmp	r2, r3
 801702c:	d110      	bne.n	8017050 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 801702e:	4b4a      	ldr	r3, [pc, #296]	@ (8017158 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8017030:	61fb      	str	r3, [r7, #28]
            break;
 8017032:	e00d      	b.n	8017050 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017034:	4a45      	ldr	r2, [pc, #276]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017036:	2390      	movs	r3, #144	@ 0x90
 8017038:	58d3      	ldr	r3, [r2, r3]
 801703a:	2202      	movs	r2, #2
 801703c:	4013      	ands	r3, r2
 801703e:	2b02      	cmp	r3, #2
 8017040:	d109      	bne.n	8017056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8017042:	2380      	movs	r3, #128	@ 0x80
 8017044:	021b      	lsls	r3, r3, #8
 8017046:	61fb      	str	r3, [r7, #28]
            break;
 8017048:	e005      	b.n	8017056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 801704a:	46c0      	nop			@ (mov r8, r8)
 801704c:	f000 fc09 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017050:	46c0      	nop			@ (mov r8, r8)
 8017052:	f000 fc06 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017056:	46c0      	nop			@ (mov r8, r8)
        break;
 8017058:	f000 fc03 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 801705c:	4a3b      	ldr	r2, [pc, #236]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801705e:	2388      	movs	r3, #136	@ 0x88
 8017060:	58d3      	ldr	r3, [r2, r3]
 8017062:	220c      	movs	r2, #12
 8017064:	4013      	ands	r3, r2
 8017066:	617b      	str	r3, [r7, #20]
 8017068:	697b      	ldr	r3, [r7, #20]
 801706a:	2b0c      	cmp	r3, #12
 801706c:	d025      	beq.n	80170ba <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	2b0c      	cmp	r3, #12
 8017072:	d82d      	bhi.n	80170d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	2b08      	cmp	r3, #8
 8017078:	d013      	beq.n	80170a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	2b08      	cmp	r3, #8
 801707e:	d827      	bhi.n	80170d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017080:	697b      	ldr	r3, [r7, #20]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d003      	beq.n	801708e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8017086:	697b      	ldr	r3, [r7, #20]
 8017088:	2b04      	cmp	r3, #4
 801708a:	d005      	beq.n	8017098 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 801708c:	e020      	b.n	80170d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 801708e:	f7ff fbfd 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 8017092:	0003      	movs	r3, r0
 8017094:	61fb      	str	r3, [r7, #28]
            break;
 8017096:	e022      	b.n	80170de <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8017098:	f7ff fb52 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 801709c:	0003      	movs	r3, r0
 801709e:	61fb      	str	r3, [r7, #28]
            break;
 80170a0:	e01d      	b.n	80170de <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80170a2:	4b2a      	ldr	r3, [pc, #168]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	2380      	movs	r3, #128	@ 0x80
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	401a      	ands	r2, r3
 80170ac:	2380      	movs	r3, #128	@ 0x80
 80170ae:	00db      	lsls	r3, r3, #3
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d110      	bne.n	80170d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80170b4:	4b28      	ldr	r3, [pc, #160]	@ (8017158 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80170b6:	61fb      	str	r3, [r7, #28]
            break;
 80170b8:	e00d      	b.n	80170d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80170ba:	4a24      	ldr	r2, [pc, #144]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80170bc:	2390      	movs	r3, #144	@ 0x90
 80170be:	58d3      	ldr	r3, [r2, r3]
 80170c0:	2202      	movs	r2, #2
 80170c2:	4013      	ands	r3, r2
 80170c4:	2b02      	cmp	r3, #2
 80170c6:	d109      	bne.n	80170dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 80170c8:	2380      	movs	r3, #128	@ 0x80
 80170ca:	021b      	lsls	r3, r3, #8
 80170cc:	61fb      	str	r3, [r7, #28]
            break;
 80170ce:	e005      	b.n	80170dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 80170d0:	46c0      	nop			@ (mov r8, r8)
 80170d2:	f000 fbc6 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80170d6:	46c0      	nop			@ (mov r8, r8)
 80170d8:	f000 fbc3 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80170dc:	46c0      	nop			@ (mov r8, r8)
        break;
 80170de:	f000 fbc0 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 80170e2:	f7ff fbd3 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80170e6:	0003      	movs	r3, r0
 80170e8:	61fb      	str	r3, [r7, #28]
        break;
 80170ea:	f000 fbba 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80170ee:	4a17      	ldr	r2, [pc, #92]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80170f0:	2388      	movs	r3, #136	@ 0x88
 80170f2:	58d2      	ldr	r2, [r2, r3]
 80170f4:	23c0      	movs	r3, #192	@ 0xc0
 80170f6:	011b      	lsls	r3, r3, #4
 80170f8:	4013      	ands	r3, r2
 80170fa:	617b      	str	r3, [r7, #20]
 80170fc:	697a      	ldr	r2, [r7, #20]
 80170fe:	23c0      	movs	r3, #192	@ 0xc0
 8017100:	011b      	lsls	r3, r3, #4
 8017102:	429a      	cmp	r2, r3
 8017104:	d036      	beq.n	8017174 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8017106:	697a      	ldr	r2, [r7, #20]
 8017108:	23c0      	movs	r3, #192	@ 0xc0
 801710a:	011b      	lsls	r3, r3, #4
 801710c:	429a      	cmp	r2, r3
 801710e:	d83c      	bhi.n	801718a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017110:	697a      	ldr	r2, [r7, #20]
 8017112:	2380      	movs	r3, #128	@ 0x80
 8017114:	011b      	lsls	r3, r3, #4
 8017116:	429a      	cmp	r2, r3
 8017118:	d020      	beq.n	801715c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 801711a:	697a      	ldr	r2, [r7, #20]
 801711c:	2380      	movs	r3, #128	@ 0x80
 801711e:	011b      	lsls	r3, r3, #4
 8017120:	429a      	cmp	r2, r3
 8017122:	d832      	bhi.n	801718a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d005      	beq.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 801712a:	697a      	ldr	r2, [r7, #20]
 801712c:	2380      	movs	r3, #128	@ 0x80
 801712e:	00db      	lsls	r3, r3, #3
 8017130:	429a      	cmp	r2, r3
 8017132:	d005      	beq.n	8017140 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8017134:	e029      	b.n	801718a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017136:	f7ff fba9 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 801713a:	0003      	movs	r3, r0
 801713c:	61fb      	str	r3, [r7, #28]
            break;
 801713e:	e02b      	b.n	8017198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8017140:	f7ff fafe 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 8017144:	0003      	movs	r3, r0
 8017146:	61fb      	str	r3, [r7, #28]
            break;
 8017148:	e026      	b.n	8017198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 801714a:	46c0      	nop			@ (mov r8, r8)
 801714c:	40021000 	.word	0x40021000
 8017150:	0001e848 	.word	0x0001e848
 8017154:	0801b4cc 	.word	0x0801b4cc
 8017158:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801715c:	4bbb      	ldr	r3, [pc, #748]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801715e:	681a      	ldr	r2, [r3, #0]
 8017160:	2380      	movs	r3, #128	@ 0x80
 8017162:	00db      	lsls	r3, r3, #3
 8017164:	401a      	ands	r2, r3
 8017166:	2380      	movs	r3, #128	@ 0x80
 8017168:	00db      	lsls	r3, r3, #3
 801716a:	429a      	cmp	r2, r3
 801716c:	d110      	bne.n	8017190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 801716e:	4bb8      	ldr	r3, [pc, #736]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017170:	61fb      	str	r3, [r7, #28]
            break;
 8017172:	e00d      	b.n	8017190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017174:	4ab5      	ldr	r2, [pc, #724]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017176:	2390      	movs	r3, #144	@ 0x90
 8017178:	58d3      	ldr	r3, [r2, r3]
 801717a:	2202      	movs	r2, #2
 801717c:	4013      	ands	r3, r2
 801717e:	2b02      	cmp	r3, #2
 8017180:	d109      	bne.n	8017196 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8017182:	2380      	movs	r3, #128	@ 0x80
 8017184:	021b      	lsls	r3, r3, #8
 8017186:	61fb      	str	r3, [r7, #28]
            break;
 8017188:	e005      	b.n	8017196 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 801718a:	46c0      	nop			@ (mov r8, r8)
 801718c:	f000 fb69 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017190:	46c0      	nop			@ (mov r8, r8)
 8017192:	f000 fb66 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017196:	46c0      	nop			@ (mov r8, r8)
        break;
 8017198:	f000 fb63 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 801719c:	4aab      	ldr	r2, [pc, #684]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801719e:	2388      	movs	r3, #136	@ 0x88
 80171a0:	58d2      	ldr	r2, [r2, r3]
 80171a2:	23c0      	movs	r3, #192	@ 0xc0
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	4013      	ands	r3, r2
 80171a8:	617b      	str	r3, [r7, #20]
 80171aa:	697a      	ldr	r2, [r7, #20]
 80171ac:	23c0      	movs	r3, #192	@ 0xc0
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d02d      	beq.n	8017210 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80171b4:	697a      	ldr	r2, [r7, #20]
 80171b6:	23c0      	movs	r3, #192	@ 0xc0
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d833      	bhi.n	8017226 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80171be:	697a      	ldr	r2, [r7, #20]
 80171c0:	2380      	movs	r3, #128	@ 0x80
 80171c2:	009b      	lsls	r3, r3, #2
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d017      	beq.n	80171f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80171c8:	697a      	ldr	r2, [r7, #20]
 80171ca:	2380      	movs	r3, #128	@ 0x80
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d829      	bhi.n	8017226 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d005      	beq.n	80171e4 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80171d8:	697a      	ldr	r2, [r7, #20]
 80171da:	2380      	movs	r3, #128	@ 0x80
 80171dc:	005b      	lsls	r3, r3, #1
 80171de:	429a      	cmp	r2, r3
 80171e0:	d005      	beq.n	80171ee <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80171e2:	e020      	b.n	8017226 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 80171e4:	f7ff fb52 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80171e8:	0003      	movs	r3, r0
 80171ea:	61fb      	str	r3, [r7, #28]
            break;
 80171ec:	e022      	b.n	8017234 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 80171ee:	f7ff faa7 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 80171f2:	0003      	movs	r3, r0
 80171f4:	61fb      	str	r3, [r7, #28]
            break;
 80171f6:	e01d      	b.n	8017234 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80171f8:	4b94      	ldr	r3, [pc, #592]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	2380      	movs	r3, #128	@ 0x80
 80171fe:	00db      	lsls	r3, r3, #3
 8017200:	401a      	ands	r2, r3
 8017202:	2380      	movs	r3, #128	@ 0x80
 8017204:	00db      	lsls	r3, r3, #3
 8017206:	429a      	cmp	r2, r3
 8017208:	d110      	bne.n	801722c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 801720a:	4b91      	ldr	r3, [pc, #580]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801720c:	61fb      	str	r3, [r7, #28]
            break;
 801720e:	e00d      	b.n	801722c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017210:	4a8e      	ldr	r2, [pc, #568]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017212:	2390      	movs	r3, #144	@ 0x90
 8017214:	58d3      	ldr	r3, [r2, r3]
 8017216:	2202      	movs	r2, #2
 8017218:	4013      	ands	r3, r2
 801721a:	2b02      	cmp	r3, #2
 801721c:	d109      	bne.n	8017232 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 801721e:	2380      	movs	r3, #128	@ 0x80
 8017220:	021b      	lsls	r3, r3, #8
 8017222:	61fb      	str	r3, [r7, #28]
            break;
 8017224:	e005      	b.n	8017232 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8017226:	46c0      	nop			@ (mov r8, r8)
 8017228:	f000 fb1b 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801722c:	46c0      	nop			@ (mov r8, r8)
 801722e:	f000 fb18 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017232:	46c0      	nop			@ (mov r8, r8)
        break;
 8017234:	f000 fb15 	bl	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8017238:	4a84      	ldr	r2, [pc, #528]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801723a:	2388      	movs	r3, #136	@ 0x88
 801723c:	58d3      	ldr	r3, [r2, r3]
 801723e:	22c0      	movs	r2, #192	@ 0xc0
 8017240:	4013      	ands	r3, r2
 8017242:	617b      	str	r3, [r7, #20]
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	2bc0      	cmp	r3, #192	@ 0xc0
 8017248:	d025      	beq.n	8017296 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 801724a:	697b      	ldr	r3, [r7, #20]
 801724c:	2bc0      	cmp	r3, #192	@ 0xc0
 801724e:	d82d      	bhi.n	80172ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	2b80      	cmp	r3, #128	@ 0x80
 8017254:	d013      	beq.n	801727e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	2b80      	cmp	r3, #128	@ 0x80
 801725a:	d827      	bhi.n	80172ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d003      	beq.n	801726a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	2b40      	cmp	r3, #64	@ 0x40
 8017266:	d005      	beq.n	8017274 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8017268:	e020      	b.n	80172ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 801726a:	f7ff fb0f 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 801726e:	0003      	movs	r3, r0
 8017270:	61fb      	str	r3, [r7, #28]
            break;
 8017272:	e020      	b.n	80172b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8017274:	f7ff fa64 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 8017278:	0003      	movs	r3, r0
 801727a:	61fb      	str	r3, [r7, #28]
            break;
 801727c:	e01b      	b.n	80172b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801727e:	4b73      	ldr	r3, [pc, #460]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017280:	681a      	ldr	r2, [r3, #0]
 8017282:	2380      	movs	r3, #128	@ 0x80
 8017284:	00db      	lsls	r3, r3, #3
 8017286:	401a      	ands	r2, r3
 8017288:	2380      	movs	r3, #128	@ 0x80
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	429a      	cmp	r2, r3
 801728e:	d10f      	bne.n	80172b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8017290:	4b6f      	ldr	r3, [pc, #444]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017292:	61fb      	str	r3, [r7, #28]
            break;
 8017294:	e00c      	b.n	80172b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017296:	4a6d      	ldr	r2, [pc, #436]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017298:	2390      	movs	r3, #144	@ 0x90
 801729a:	58d3      	ldr	r3, [r2, r3]
 801729c:	2202      	movs	r2, #2
 801729e:	4013      	ands	r3, r2
 80172a0:	2b02      	cmp	r3, #2
 80172a2:	d107      	bne.n	80172b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 80172a4:	2380      	movs	r3, #128	@ 0x80
 80172a6:	021b      	lsls	r3, r3, #8
 80172a8:	61fb      	str	r3, [r7, #28]
            break;
 80172aa:	e003      	b.n	80172b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 80172ac:	46c0      	nop			@ (mov r8, r8)
 80172ae:	e2d8      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80172b0:	46c0      	nop			@ (mov r8, r8)
 80172b2:	e2d6      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80172b4:	46c0      	nop			@ (mov r8, r8)
        break;
 80172b6:	e2d4      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80172b8:	4a64      	ldr	r2, [pc, #400]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80172ba:	2388      	movs	r3, #136	@ 0x88
 80172bc:	58d2      	ldr	r2, [r2, r3]
 80172be:	23c0      	movs	r3, #192	@ 0xc0
 80172c0:	059b      	lsls	r3, r3, #22
 80172c2:	4013      	ands	r3, r2
 80172c4:	617b      	str	r3, [r7, #20]
 80172c6:	697a      	ldr	r2, [r7, #20]
 80172c8:	2380      	movs	r3, #128	@ 0x80
 80172ca:	059b      	lsls	r3, r3, #22
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d012      	beq.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80172d0:	697a      	ldr	r2, [r7, #20]
 80172d2:	2380      	movs	r3, #128	@ 0x80
 80172d4:	059b      	lsls	r3, r3, #22
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d825      	bhi.n	8017326 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80172da:	697b      	ldr	r3, [r7, #20]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d005      	beq.n	80172ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80172e0:	697a      	ldr	r2, [r7, #20]
 80172e2:	2380      	movs	r3, #128	@ 0x80
 80172e4:	055b      	lsls	r3, r3, #21
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d014      	beq.n	8017314 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 80172ea:	e01c      	b.n	8017326 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 80172ec:	f7ff fa28 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 80172f0:	0003      	movs	r3, r0
 80172f2:	61fb      	str	r3, [r7, #28]
            break;
 80172f4:	e018      	b.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80172f6:	4b55      	ldr	r3, [pc, #340]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	2380      	movs	r3, #128	@ 0x80
 80172fc:	00db      	lsls	r3, r3, #3
 80172fe:	401a      	ands	r2, r3
 8017300:	2380      	movs	r3, #128	@ 0x80
 8017302:	00db      	lsls	r3, r3, #3
 8017304:	429a      	cmp	r2, r3
 8017306:	d102      	bne.n	801730e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8017308:	4b51      	ldr	r3, [pc, #324]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801730a:	61fb      	str	r3, [r7, #28]
            break;
 801730c:	e00c      	b.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 801730e:	2300      	movs	r3, #0
 8017310:	61fb      	str	r3, [r7, #28]
            break;
 8017312:	e009      	b.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017314:	2408      	movs	r4, #8
 8017316:	193b      	adds	r3, r7, r4
 8017318:	0018      	movs	r0, r3
 801731a:	f000 faad 	bl	8017878 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 801731e:	193b      	adds	r3, r7, r4
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	61fb      	str	r3, [r7, #28]
            break;
 8017324:	e000      	b.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8017326:	46c0      	nop			@ (mov r8, r8)
        break;
 8017328:	e29b      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 801732a:	4a48      	ldr	r2, [pc, #288]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801732c:	2388      	movs	r3, #136	@ 0x88
 801732e:	58d2      	ldr	r2, [r2, r3]
 8017330:	23c0      	movs	r3, #192	@ 0xc0
 8017332:	019b      	lsls	r3, r3, #6
 8017334:	4013      	ands	r3, r2
 8017336:	617b      	str	r3, [r7, #20]
 8017338:	697a      	ldr	r2, [r7, #20]
 801733a:	2380      	movs	r3, #128	@ 0x80
 801733c:	019b      	lsls	r3, r3, #6
 801733e:	429a      	cmp	r2, r3
 8017340:	d017      	beq.n	8017372 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8017342:	697a      	ldr	r2, [r7, #20]
 8017344:	2380      	movs	r3, #128	@ 0x80
 8017346:	019b      	lsls	r3, r3, #6
 8017348:	429a      	cmp	r2, r3
 801734a:	d81e      	bhi.n	801738a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d005      	beq.n	801735e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8017352:	697a      	ldr	r2, [r7, #20]
 8017354:	2380      	movs	r3, #128	@ 0x80
 8017356:	015b      	lsls	r3, r3, #5
 8017358:	429a      	cmp	r2, r3
 801735a:	d005      	beq.n	8017368 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 801735c:	e015      	b.n	801738a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 801735e:	f7ff fa95 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 8017362:	0003      	movs	r3, r0
 8017364:	61fb      	str	r3, [r7, #28]
            break;
 8017366:	e013      	b.n	8017390 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8017368:	f7ff f9ea 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 801736c:	0003      	movs	r3, r0
 801736e:	61fb      	str	r3, [r7, #28]
            break;
 8017370:	e00e      	b.n	8017390 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017372:	4b36      	ldr	r3, [pc, #216]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	2380      	movs	r3, #128	@ 0x80
 8017378:	00db      	lsls	r3, r3, #3
 801737a:	401a      	ands	r2, r3
 801737c:	2380      	movs	r3, #128	@ 0x80
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	429a      	cmp	r2, r3
 8017382:	d104      	bne.n	801738e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8017384:	4b32      	ldr	r3, [pc, #200]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017386:	61fb      	str	r3, [r7, #28]
            break;
 8017388:	e001      	b.n	801738e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 801738a:	46c0      	nop			@ (mov r8, r8)
 801738c:	e269      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801738e:	46c0      	nop			@ (mov r8, r8)
        break;
 8017390:	e267      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8017392:	4a2e      	ldr	r2, [pc, #184]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017394:	2388      	movs	r3, #136	@ 0x88
 8017396:	58d2      	ldr	r2, [r2, r3]
 8017398:	23c0      	movs	r3, #192	@ 0xc0
 801739a:	029b      	lsls	r3, r3, #10
 801739c:	4013      	ands	r3, r2
 801739e:	617b      	str	r3, [r7, #20]
 80173a0:	697a      	ldr	r2, [r7, #20]
 80173a2:	2380      	movs	r3, #128	@ 0x80
 80173a4:	029b      	lsls	r3, r3, #10
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d017      	beq.n	80173da <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 80173aa:	697a      	ldr	r2, [r7, #20]
 80173ac:	2380      	movs	r3, #128	@ 0x80
 80173ae:	029b      	lsls	r3, r3, #10
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d81e      	bhi.n	80173f2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d005      	beq.n	80173c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80173ba:	697a      	ldr	r2, [r7, #20]
 80173bc:	2380      	movs	r3, #128	@ 0x80
 80173be:	025b      	lsls	r3, r3, #9
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d005      	beq.n	80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 80173c4:	e015      	b.n	80173f2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 80173c6:	f7ff fa61 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80173ca:	0003      	movs	r3, r0
 80173cc:	61fb      	str	r3, [r7, #28]
            break;
 80173ce:	e013      	b.n	80173f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 80173d0:	f7ff f9b6 	bl	8016740 <HAL_RCC_GetSysClockFreq>
 80173d4:	0003      	movs	r3, r0
 80173d6:	61fb      	str	r3, [r7, #28]
            break;
 80173d8:	e00e      	b.n	80173f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80173da:	4b1c      	ldr	r3, [pc, #112]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	2380      	movs	r3, #128	@ 0x80
 80173e0:	00db      	lsls	r3, r3, #3
 80173e2:	401a      	ands	r2, r3
 80173e4:	2380      	movs	r3, #128	@ 0x80
 80173e6:	00db      	lsls	r3, r3, #3
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d104      	bne.n	80173f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 80173ec:	4b18      	ldr	r3, [pc, #96]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80173ee:	61fb      	str	r3, [r7, #28]
            break;
 80173f0:	e001      	b.n	80173f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 80173f2:	46c0      	nop			@ (mov r8, r8)
 80173f4:	e235      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80173f6:	46c0      	nop			@ (mov r8, r8)
        break;
 80173f8:	e233      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80173fa:	4a14      	ldr	r2, [pc, #80]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80173fc:	2388      	movs	r3, #136	@ 0x88
 80173fe:	58d2      	ldr	r2, [r2, r3]
 8017400:	23c0      	movs	r3, #192	@ 0xc0
 8017402:	031b      	lsls	r3, r3, #12
 8017404:	4013      	ands	r3, r2
 8017406:	617b      	str	r3, [r7, #20]
 8017408:	697a      	ldr	r2, [r7, #20]
 801740a:	23c0      	movs	r3, #192	@ 0xc0
 801740c:	031b      	lsls	r3, r3, #12
 801740e:	429a      	cmp	r2, r3
 8017410:	d041      	beq.n	8017496 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8017412:	697a      	ldr	r2, [r7, #20]
 8017414:	23c0      	movs	r3, #192	@ 0xc0
 8017416:	031b      	lsls	r3, r3, #12
 8017418:	429a      	cmp	r2, r3
 801741a:	d847      	bhi.n	80174ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 801741c:	697a      	ldr	r2, [r7, #20]
 801741e:	2380      	movs	r3, #128	@ 0x80
 8017420:	031b      	lsls	r3, r3, #12
 8017422:	429a      	cmp	r2, r3
 8017424:	d02b      	beq.n	801747e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8017426:	697a      	ldr	r2, [r7, #20]
 8017428:	2380      	movs	r3, #128	@ 0x80
 801742a:	031b      	lsls	r3, r3, #12
 801742c:	429a      	cmp	r2, r3
 801742e:	d83d      	bhi.n	80174ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d005      	beq.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8017436:	697a      	ldr	r2, [r7, #20]
 8017438:	2380      	movs	r3, #128	@ 0x80
 801743a:	02db      	lsls	r3, r3, #11
 801743c:	429a      	cmp	r2, r3
 801743e:	d009      	beq.n	8017454 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8017440:	e034      	b.n	80174ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017442:	f7ff fa23 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 8017446:	0003      	movs	r3, r0
 8017448:	61fb      	str	r3, [r7, #28]
            break;
 801744a:	e036      	b.n	80174ba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 801744c:	40021000 	.word	0x40021000
 8017450:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017454:	4abd      	ldr	r2, [pc, #756]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017456:	2394      	movs	r3, #148	@ 0x94
 8017458:	58d3      	ldr	r3, [r2, r3]
 801745a:	2202      	movs	r2, #2
 801745c:	4013      	ands	r3, r2
 801745e:	2b02      	cmp	r3, #2
 8017460:	d126      	bne.n	80174b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017462:	4aba      	ldr	r2, [pc, #744]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017464:	2394      	movs	r3, #148	@ 0x94
 8017466:	58d3      	ldr	r3, [r2, r3]
 8017468:	2204      	movs	r2, #4
 801746a:	4013      	ands	r3, r2
 801746c:	2b04      	cmp	r3, #4
 801746e:	d102      	bne.n	8017476 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8017470:	23fa      	movs	r3, #250	@ 0xfa
 8017472:	61fb      	str	r3, [r7, #28]
            break;
 8017474:	e01c      	b.n	80174b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8017476:	23fa      	movs	r3, #250	@ 0xfa
 8017478:	01db      	lsls	r3, r3, #7
 801747a:	61fb      	str	r3, [r7, #28]
            break;
 801747c:	e018      	b.n	80174b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801747e:	4bb3      	ldr	r3, [pc, #716]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017480:	681a      	ldr	r2, [r3, #0]
 8017482:	2380      	movs	r3, #128	@ 0x80
 8017484:	00db      	lsls	r3, r3, #3
 8017486:	401a      	ands	r2, r3
 8017488:	2380      	movs	r3, #128	@ 0x80
 801748a:	00db      	lsls	r3, r3, #3
 801748c:	429a      	cmp	r2, r3
 801748e:	d111      	bne.n	80174b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8017490:	4baf      	ldr	r3, [pc, #700]	@ (8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8017492:	61fb      	str	r3, [r7, #28]
            break;
 8017494:	e00e      	b.n	80174b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017496:	4aad      	ldr	r2, [pc, #692]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017498:	2390      	movs	r3, #144	@ 0x90
 801749a:	58d3      	ldr	r3, [r2, r3]
 801749c:	2202      	movs	r2, #2
 801749e:	4013      	ands	r3, r2
 80174a0:	2b02      	cmp	r3, #2
 80174a2:	d109      	bne.n	80174b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 80174a4:	2380      	movs	r3, #128	@ 0x80
 80174a6:	021b      	lsls	r3, r3, #8
 80174a8:	61fb      	str	r3, [r7, #28]
            break;
 80174aa:	e005      	b.n	80174b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 80174ac:	46c0      	nop			@ (mov r8, r8)
 80174ae:	e1d8      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80174b0:	46c0      	nop			@ (mov r8, r8)
 80174b2:	e1d6      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80174b4:	46c0      	nop			@ (mov r8, r8)
 80174b6:	e1d4      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80174b8:	46c0      	nop			@ (mov r8, r8)
        break;
 80174ba:	e1d2      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80174bc:	4aa3      	ldr	r2, [pc, #652]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80174be:	2388      	movs	r3, #136	@ 0x88
 80174c0:	58d2      	ldr	r2, [r2, r3]
 80174c2:	23c0      	movs	r3, #192	@ 0xc0
 80174c4:	039b      	lsls	r3, r3, #14
 80174c6:	4013      	ands	r3, r2
 80174c8:	617b      	str	r3, [r7, #20]
 80174ca:	697a      	ldr	r2, [r7, #20]
 80174cc:	23c0      	movs	r3, #192	@ 0xc0
 80174ce:	039b      	lsls	r3, r3, #14
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d03d      	beq.n	8017550 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80174d4:	697a      	ldr	r2, [r7, #20]
 80174d6:	23c0      	movs	r3, #192	@ 0xc0
 80174d8:	039b      	lsls	r3, r3, #14
 80174da:	429a      	cmp	r2, r3
 80174dc:	d843      	bhi.n	8017566 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80174de:	697a      	ldr	r2, [r7, #20]
 80174e0:	2380      	movs	r3, #128	@ 0x80
 80174e2:	039b      	lsls	r3, r3, #14
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d027      	beq.n	8017538 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 80174e8:	697a      	ldr	r2, [r7, #20]
 80174ea:	2380      	movs	r3, #128	@ 0x80
 80174ec:	039b      	lsls	r3, r3, #14
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d839      	bhi.n	8017566 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d005      	beq.n	8017504 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80174f8:	697a      	ldr	r2, [r7, #20]
 80174fa:	2380      	movs	r3, #128	@ 0x80
 80174fc:	035b      	lsls	r3, r3, #13
 80174fe:	429a      	cmp	r2, r3
 8017500:	d005      	beq.n	801750e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8017502:	e030      	b.n	8017566 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017504:	f7ff f9c2 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 8017508:	0003      	movs	r3, r0
 801750a:	61fb      	str	r3, [r7, #28]
            break;
 801750c:	e032      	b.n	8017574 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801750e:	4a8f      	ldr	r2, [pc, #572]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017510:	2394      	movs	r3, #148	@ 0x94
 8017512:	58d3      	ldr	r3, [r2, r3]
 8017514:	2202      	movs	r2, #2
 8017516:	4013      	ands	r3, r2
 8017518:	2b02      	cmp	r3, #2
 801751a:	d126      	bne.n	801756a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 801751c:	4a8b      	ldr	r2, [pc, #556]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801751e:	2394      	movs	r3, #148	@ 0x94
 8017520:	58d3      	ldr	r3, [r2, r3]
 8017522:	2204      	movs	r2, #4
 8017524:	4013      	ands	r3, r2
 8017526:	2b04      	cmp	r3, #4
 8017528:	d102      	bne.n	8017530 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 801752a:	23fa      	movs	r3, #250	@ 0xfa
 801752c:	61fb      	str	r3, [r7, #28]
            break;
 801752e:	e01c      	b.n	801756a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8017530:	23fa      	movs	r3, #250	@ 0xfa
 8017532:	01db      	lsls	r3, r3, #7
 8017534:	61fb      	str	r3, [r7, #28]
            break;
 8017536:	e018      	b.n	801756a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017538:	4b84      	ldr	r3, [pc, #528]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	2380      	movs	r3, #128	@ 0x80
 801753e:	00db      	lsls	r3, r3, #3
 8017540:	401a      	ands	r2, r3
 8017542:	2380      	movs	r3, #128	@ 0x80
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	429a      	cmp	r2, r3
 8017548:	d111      	bne.n	801756e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 801754a:	4b81      	ldr	r3, [pc, #516]	@ (8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 801754c:	61fb      	str	r3, [r7, #28]
            break;
 801754e:	e00e      	b.n	801756e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017550:	4a7e      	ldr	r2, [pc, #504]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017552:	2390      	movs	r3, #144	@ 0x90
 8017554:	58d3      	ldr	r3, [r2, r3]
 8017556:	2202      	movs	r2, #2
 8017558:	4013      	ands	r3, r2
 801755a:	2b02      	cmp	r3, #2
 801755c:	d109      	bne.n	8017572 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 801755e:	2380      	movs	r3, #128	@ 0x80
 8017560:	021b      	lsls	r3, r3, #8
 8017562:	61fb      	str	r3, [r7, #28]
            break;
 8017564:	e005      	b.n	8017572 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8017566:	46c0      	nop			@ (mov r8, r8)
 8017568:	e17b      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801756a:	46c0      	nop			@ (mov r8, r8)
 801756c:	e179      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801756e:	46c0      	nop			@ (mov r8, r8)
 8017570:	e177      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017572:	46c0      	nop			@ (mov r8, r8)
        break;
 8017574:	e175      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8017576:	4a75      	ldr	r2, [pc, #468]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017578:	2388      	movs	r3, #136	@ 0x88
 801757a:	58d2      	ldr	r2, [r2, r3]
 801757c:	23c0      	movs	r3, #192	@ 0xc0
 801757e:	041b      	lsls	r3, r3, #16
 8017580:	4013      	ands	r3, r2
 8017582:	617b      	str	r3, [r7, #20]
 8017584:	697a      	ldr	r2, [r7, #20]
 8017586:	23c0      	movs	r3, #192	@ 0xc0
 8017588:	041b      	lsls	r3, r3, #16
 801758a:	429a      	cmp	r2, r3
 801758c:	d03d      	beq.n	801760a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 801758e:	697a      	ldr	r2, [r7, #20]
 8017590:	23c0      	movs	r3, #192	@ 0xc0
 8017592:	041b      	lsls	r3, r3, #16
 8017594:	429a      	cmp	r2, r3
 8017596:	d843      	bhi.n	8017620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8017598:	697a      	ldr	r2, [r7, #20]
 801759a:	2380      	movs	r3, #128	@ 0x80
 801759c:	041b      	lsls	r3, r3, #16
 801759e:	429a      	cmp	r2, r3
 80175a0:	d027      	beq.n	80175f2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80175a2:	697a      	ldr	r2, [r7, #20]
 80175a4:	2380      	movs	r3, #128	@ 0x80
 80175a6:	041b      	lsls	r3, r3, #16
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d839      	bhi.n	8017620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d005      	beq.n	80175be <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80175b2:	697a      	ldr	r2, [r7, #20]
 80175b4:	2380      	movs	r3, #128	@ 0x80
 80175b6:	03db      	lsls	r3, r3, #15
 80175b8:	429a      	cmp	r2, r3
 80175ba:	d005      	beq.n	80175c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 80175bc:	e030      	b.n	8017620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 80175be:	f7ff f965 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80175c2:	0003      	movs	r3, r0
 80175c4:	61fb      	str	r3, [r7, #28]
            break;
 80175c6:	e032      	b.n	801762e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80175c8:	4a60      	ldr	r2, [pc, #384]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80175ca:	2394      	movs	r3, #148	@ 0x94
 80175cc:	58d3      	ldr	r3, [r2, r3]
 80175ce:	2202      	movs	r2, #2
 80175d0:	4013      	ands	r3, r2
 80175d2:	2b02      	cmp	r3, #2
 80175d4:	d126      	bne.n	8017624 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80175d6:	4a5d      	ldr	r2, [pc, #372]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80175d8:	2394      	movs	r3, #148	@ 0x94
 80175da:	58d3      	ldr	r3, [r2, r3]
 80175dc:	2204      	movs	r2, #4
 80175de:	4013      	ands	r3, r2
 80175e0:	2b04      	cmp	r3, #4
 80175e2:	d102      	bne.n	80175ea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 80175e4:	23fa      	movs	r3, #250	@ 0xfa
 80175e6:	61fb      	str	r3, [r7, #28]
            break;
 80175e8:	e01c      	b.n	8017624 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 80175ea:	23fa      	movs	r3, #250	@ 0xfa
 80175ec:	01db      	lsls	r3, r3, #7
 80175ee:	61fb      	str	r3, [r7, #28]
            break;
 80175f0:	e018      	b.n	8017624 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80175f2:	4b56      	ldr	r3, [pc, #344]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80175f4:	681a      	ldr	r2, [r3, #0]
 80175f6:	2380      	movs	r3, #128	@ 0x80
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	401a      	ands	r2, r3
 80175fc:	2380      	movs	r3, #128	@ 0x80
 80175fe:	00db      	lsls	r3, r3, #3
 8017600:	429a      	cmp	r2, r3
 8017602:	d111      	bne.n	8017628 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8017604:	4b52      	ldr	r3, [pc, #328]	@ (8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8017606:	61fb      	str	r3, [r7, #28]
            break;
 8017608:	e00e      	b.n	8017628 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801760a:	4a50      	ldr	r2, [pc, #320]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801760c:	2390      	movs	r3, #144	@ 0x90
 801760e:	58d3      	ldr	r3, [r2, r3]
 8017610:	2202      	movs	r2, #2
 8017612:	4013      	ands	r3, r2
 8017614:	2b02      	cmp	r3, #2
 8017616:	d109      	bne.n	801762c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8017618:	2380      	movs	r3, #128	@ 0x80
 801761a:	021b      	lsls	r3, r3, #8
 801761c:	61fb      	str	r3, [r7, #28]
            break;
 801761e:	e005      	b.n	801762c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8017620:	46c0      	nop			@ (mov r8, r8)
 8017622:	e11e      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017624:	46c0      	nop			@ (mov r8, r8)
 8017626:	e11c      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017628:	46c0      	nop			@ (mov r8, r8)
 801762a:	e11a      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801762c:	46c0      	nop			@ (mov r8, r8)
        break;
 801762e:	e118      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8017630:	4a46      	ldr	r2, [pc, #280]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017632:	2388      	movs	r3, #136	@ 0x88
 8017634:	58d2      	ldr	r2, [r2, r3]
 8017636:	2380      	movs	r3, #128	@ 0x80
 8017638:	045b      	lsls	r3, r3, #17
 801763a:	4013      	ands	r3, r2
 801763c:	617b      	str	r3, [r7, #20]
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d005      	beq.n	8017650 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8017644:	697a      	ldr	r2, [r7, #20]
 8017646:	2380      	movs	r3, #128	@ 0x80
 8017648:	045b      	lsls	r3, r3, #17
 801764a:	429a      	cmp	r2, r3
 801764c:	d011      	beq.n	8017672 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 801764e:	e019      	b.n	8017684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8017650:	4b3e      	ldr	r3, [pc, #248]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017652:	689a      	ldr	r2, [r3, #8]
 8017654:	23e0      	movs	r3, #224	@ 0xe0
 8017656:	01db      	lsls	r3, r3, #7
 8017658:	4013      	ands	r3, r2
 801765a:	d104      	bne.n	8017666 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 801765c:	f7ff f916 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 8017660:	0003      	movs	r3, r0
 8017662:	61fb      	str	r3, [r7, #28]
            break;
 8017664:	e00e      	b.n	8017684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8017666:	f7ff f911 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 801766a:	0003      	movs	r3, r0
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	61fb      	str	r3, [r7, #28]
            break;
 8017670:	e008      	b.n	8017684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017672:	2408      	movs	r4, #8
 8017674:	193b      	adds	r3, r7, r4
 8017676:	0018      	movs	r0, r3
 8017678:	f000 f8fe 	bl	8017878 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801767c:	193b      	adds	r3, r7, r4
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	61fb      	str	r3, [r7, #28]
            break;
 8017682:	46c0      	nop			@ (mov r8, r8)
        break;
 8017684:	e0ed      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8017686:	4a31      	ldr	r2, [pc, #196]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017688:	2388      	movs	r3, #136	@ 0x88
 801768a:	58d2      	ldr	r2, [r2, r3]
 801768c:	2380      	movs	r3, #128	@ 0x80
 801768e:	049b      	lsls	r3, r3, #18
 8017690:	4013      	ands	r3, r2
 8017692:	617b      	str	r3, [r7, #20]
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d005      	beq.n	80176a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 801769a:	697a      	ldr	r2, [r7, #20]
 801769c:	2380      	movs	r3, #128	@ 0x80
 801769e:	049b      	lsls	r3, r3, #18
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d011      	beq.n	80176c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80176a4:	e019      	b.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80176a6:	4b29      	ldr	r3, [pc, #164]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80176a8:	689a      	ldr	r2, [r3, #8]
 80176aa:	23e0      	movs	r3, #224	@ 0xe0
 80176ac:	01db      	lsls	r3, r3, #7
 80176ae:	4013      	ands	r3, r2
 80176b0:	d104      	bne.n	80176bc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80176b2:	f7ff f8eb 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80176b6:	0003      	movs	r3, r0
 80176b8:	61fb      	str	r3, [r7, #28]
            break;
 80176ba:	e00e      	b.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80176bc:	f7ff f8e6 	bl	801688c <HAL_RCC_GetPCLK1Freq>
 80176c0:	0003      	movs	r3, r0
 80176c2:	005b      	lsls	r3, r3, #1
 80176c4:	61fb      	str	r3, [r7, #28]
            break;
 80176c6:	e008      	b.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80176c8:	2408      	movs	r4, #8
 80176ca:	193b      	adds	r3, r7, r4
 80176cc:	0018      	movs	r0, r3
 80176ce:	f000 f8d3 	bl	8017878 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80176d2:	193b      	adds	r3, r7, r4
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	61fb      	str	r3, [r7, #28]
            break;
 80176d8:	46c0      	nop			@ (mov r8, r8)
        break;
 80176da:	e0c2      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80176dc:	4a1b      	ldr	r2, [pc, #108]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80176de:	2388      	movs	r3, #136	@ 0x88
 80176e0:	58d2      	ldr	r2, [r2, r3]
 80176e2:	23c0      	movs	r3, #192	@ 0xc0
 80176e4:	051b      	lsls	r3, r3, #20
 80176e6:	4013      	ands	r3, r2
 80176e8:	617b      	str	r3, [r7, #20]
 80176ea:	697a      	ldr	r2, [r7, #20]
 80176ec:	23c0      	movs	r3, #192	@ 0xc0
 80176ee:	051b      	lsls	r3, r3, #20
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d017      	beq.n	8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80176f4:	697a      	ldr	r2, [r7, #20]
 80176f6:	23c0      	movs	r3, #192	@ 0xc0
 80176f8:	051b      	lsls	r3, r3, #20
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d84a      	bhi.n	8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80176fe:	697a      	ldr	r2, [r7, #20]
 8017700:	2380      	movs	r3, #128	@ 0x80
 8017702:	051b      	lsls	r3, r3, #20
 8017704:	429a      	cmp	r2, r3
 8017706:	d039      	beq.n	801777c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8017708:	697a      	ldr	r2, [r7, #20]
 801770a:	2380      	movs	r3, #128	@ 0x80
 801770c:	051b      	lsls	r3, r3, #20
 801770e:	429a      	cmp	r2, r3
 8017710:	d840      	bhi.n	8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d03a      	beq.n	801778e <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8017718:	697a      	ldr	r2, [r7, #20]
 801771a:	2380      	movs	r3, #128	@ 0x80
 801771c:	04db      	lsls	r3, r3, #19
 801771e:	429a      	cmp	r2, r3
 8017720:	d003      	beq.n	801772a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8017722:	e037      	b.n	8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8017724:	4b0b      	ldr	r3, [pc, #44]	@ (8017754 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8017726:	61fb      	str	r3, [r7, #28]
            break;
 8017728:	e037      	b.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801772a:	4b08      	ldr	r3, [pc, #32]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2202      	movs	r2, #2
 8017730:	4013      	ands	r3, r2
 8017732:	2b02      	cmp	r3, #2
 8017734:	d130      	bne.n	8017798 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8017736:	4b05      	ldr	r3, [pc, #20]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	2208      	movs	r2, #8
 801773c:	4013      	ands	r3, r2
 801773e:	d00b      	beq.n	8017758 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8017740:	4b02      	ldr	r3, [pc, #8]	@ (801774c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	091b      	lsrs	r3, r3, #4
 8017746:	220f      	movs	r2, #15
 8017748:	4013      	ands	r3, r2
 801774a:	e00b      	b.n	8017764 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 801774c:	40021000 	.word	0x40021000
 8017750:	00f42400 	.word	0x00f42400
 8017754:	02dc6c00 	.word	0x02dc6c00
 8017758:	4a44      	ldr	r2, [pc, #272]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801775a:	2394      	movs	r3, #148	@ 0x94
 801775c:	58d3      	ldr	r3, [r2, r3]
 801775e:	0a1b      	lsrs	r3, r3, #8
 8017760:	220f      	movs	r2, #15
 8017762:	4013      	ands	r3, r2
 8017764:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8017766:	69bb      	ldr	r3, [r7, #24]
 8017768:	2b0b      	cmp	r3, #11
 801776a:	d901      	bls.n	8017770 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 801776c:	230b      	movs	r3, #11
 801776e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8017770:	4b3f      	ldr	r3, [pc, #252]	@ (8017870 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8017772:	69ba      	ldr	r2, [r7, #24]
 8017774:	0092      	lsls	r2, r2, #2
 8017776:	58d3      	ldr	r3, [r2, r3]
 8017778:	61fb      	str	r3, [r7, #28]
            break;
 801777a:	e00d      	b.n	8017798 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801777c:	2408      	movs	r4, #8
 801777e:	193b      	adds	r3, r7, r4
 8017780:	0018      	movs	r0, r3
 8017782:	f000 f879 	bl	8017878 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8017786:	193b      	adds	r3, r7, r4
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	61fb      	str	r3, [r7, #28]
            break;
 801778c:	e005      	b.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 801778e:	2300      	movs	r3, #0
 8017790:	61fb      	str	r3, [r7, #28]
            break;
 8017792:	e002      	b.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8017794:	46c0      	nop			@ (mov r8, r8)
 8017796:	e064      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017798:	46c0      	nop			@ (mov r8, r8)
        break;
 801779a:	e062      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801779c:	4a33      	ldr	r2, [pc, #204]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801779e:	2388      	movs	r3, #136	@ 0x88
 80177a0:	58d2      	ldr	r2, [r2, r3]
 80177a2:	23c0      	movs	r3, #192	@ 0xc0
 80177a4:	051b      	lsls	r3, r3, #20
 80177a6:	4013      	ands	r3, r2
 80177a8:	617b      	str	r3, [r7, #20]
 80177aa:	697a      	ldr	r2, [r7, #20]
 80177ac:	23c0      	movs	r3, #192	@ 0xc0
 80177ae:	051b      	lsls	r3, r3, #20
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d017      	beq.n	80177e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80177b4:	697a      	ldr	r2, [r7, #20]
 80177b6:	23c0      	movs	r3, #192	@ 0xc0
 80177b8:	051b      	lsls	r3, r3, #20
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d844      	bhi.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80177be:	697a      	ldr	r2, [r7, #20]
 80177c0:	2380      	movs	r3, #128	@ 0x80
 80177c2:	051b      	lsls	r3, r3, #20
 80177c4:	429a      	cmp	r2, r3
 80177c6:	d033      	beq.n	8017830 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80177c8:	697a      	ldr	r2, [r7, #20]
 80177ca:	2380      	movs	r3, #128	@ 0x80
 80177cc:	051b      	lsls	r3, r3, #20
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d83a      	bhi.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d034      	beq.n	8017842 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80177d8:	697a      	ldr	r2, [r7, #20]
 80177da:	2380      	movs	r3, #128	@ 0x80
 80177dc:	04db      	lsls	r3, r3, #19
 80177de:	429a      	cmp	r2, r3
 80177e0:	d003      	beq.n	80177ea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 80177e2:	e031      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 80177e4:	4b23      	ldr	r3, [pc, #140]	@ (8017874 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 80177e6:	61fb      	str	r3, [r7, #28]
            break;
 80177e8:	e031      	b.n	801784e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80177ea:	4b20      	ldr	r3, [pc, #128]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	2202      	movs	r2, #2
 80177f0:	4013      	ands	r3, r2
 80177f2:	2b02      	cmp	r3, #2
 80177f4:	d12a      	bne.n	801784c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80177f6:	4b1d      	ldr	r3, [pc, #116]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	2208      	movs	r2, #8
 80177fc:	4013      	ands	r3, r2
 80177fe:	d005      	beq.n	801780c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8017800:	4b1a      	ldr	r3, [pc, #104]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	091b      	lsrs	r3, r3, #4
 8017806:	220f      	movs	r2, #15
 8017808:	4013      	ands	r3, r2
 801780a:	e005      	b.n	8017818 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 801780c:	4a17      	ldr	r2, [pc, #92]	@ (801786c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801780e:	2394      	movs	r3, #148	@ 0x94
 8017810:	58d3      	ldr	r3, [r2, r3]
 8017812:	0a1b      	lsrs	r3, r3, #8
 8017814:	220f      	movs	r2, #15
 8017816:	4013      	ands	r3, r2
 8017818:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	2b0b      	cmp	r3, #11
 801781e:	d901      	bls.n	8017824 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8017820:	230b      	movs	r3, #11
 8017822:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8017824:	4b12      	ldr	r3, [pc, #72]	@ (8017870 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8017826:	69ba      	ldr	r2, [r7, #24]
 8017828:	0092      	lsls	r2, r2, #2
 801782a:	58d3      	ldr	r3, [r2, r3]
 801782c:	61fb      	str	r3, [r7, #28]
            break;
 801782e:	e00d      	b.n	801784c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017830:	2408      	movs	r4, #8
 8017832:	193b      	adds	r3, r7, r4
 8017834:	0018      	movs	r0, r3
 8017836:	f000 f81f 	bl	8017878 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801783a:	193b      	adds	r3, r7, r4
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	61fb      	str	r3, [r7, #28]
            break;
 8017840:	e005      	b.n	801784e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8017842:	2300      	movs	r3, #0
 8017844:	61fb      	str	r3, [r7, #28]
            break;
 8017846:	e002      	b.n	801784e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8017848:	46c0      	nop			@ (mov r8, r8)
 801784a:	e00a      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801784c:	46c0      	nop			@ (mov r8, r8)
        break;
 801784e:	e008      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017850:	46c0      	nop			@ (mov r8, r8)
 8017852:	e006      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017854:	46c0      	nop			@ (mov r8, r8)
 8017856:	e004      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017858:	46c0      	nop			@ (mov r8, r8)
 801785a:	e002      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801785c:	46c0      	nop			@ (mov r8, r8)
 801785e:	e000      	b.n	8017862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017860:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8017862:	69fb      	ldr	r3, [r7, #28]
}
 8017864:	0018      	movs	r0, r3
 8017866:	46bd      	mov	sp, r7
 8017868:	b009      	add	sp, #36	@ 0x24
 801786a:	bd90      	pop	{r4, r7, pc}
 801786c:	40021000 	.word	0x40021000
 8017870:	0801b49c 	.word	0x0801b49c
 8017874:	02dc6c00 	.word	0x02dc6c00

08017878 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b088      	sub	sp, #32
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017880:	4b58      	ldr	r3, [pc, #352]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	0a1b      	lsrs	r3, r3, #8
 8017886:	227f      	movs	r2, #127	@ 0x7f
 8017888:	4013      	ands	r3, r2
 801788a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801788c:	4b55      	ldr	r3, [pc, #340]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	2203      	movs	r2, #3
 8017892:	4013      	ands	r3, r2
 8017894:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8017896:	4b53      	ldr	r3, [pc, #332]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017898:	68db      	ldr	r3, [r3, #12]
 801789a:	091b      	lsrs	r3, r3, #4
 801789c:	2207      	movs	r2, #7
 801789e:	4013      	ands	r3, r2
 80178a0:	3301      	adds	r3, #1
 80178a2:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80178a4:	4b4f      	ldr	r3, [pc, #316]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	2208      	movs	r2, #8
 80178aa:	4013      	ands	r3, r2
 80178ac:	d005      	beq.n	80178ba <HAL_RCCEx_GetPLLClockFreq+0x42>
 80178ae:	4b4d      	ldr	r3, [pc, #308]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	091b      	lsrs	r3, r3, #4
 80178b4:	220f      	movs	r2, #15
 80178b6:	4013      	ands	r3, r2
 80178b8:	e005      	b.n	80178c6 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80178ba:	4a4a      	ldr	r2, [pc, #296]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80178bc:	2394      	movs	r3, #148	@ 0x94
 80178be:	58d3      	ldr	r3, [r2, r3]
 80178c0:	0a1b      	lsrs	r3, r3, #8
 80178c2:	220f      	movs	r2, #15
 80178c4:	4013      	ands	r3, r2
 80178c6:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	2b0b      	cmp	r3, #11
 80178cc:	d901      	bls.n	80178d2 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80178ce:	230b      	movs	r3, #11
 80178d0:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	2b03      	cmp	r3, #3
 80178d6:	d020      	beq.n	801791a <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	2b03      	cmp	r3, #3
 80178dc:	d827      	bhi.n	801792e <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	2b01      	cmp	r3, #1
 80178e2:	d00c      	beq.n	80178fe <HAL_RCCEx_GetPLLClockFreq+0x86>
 80178e4:	693b      	ldr	r3, [r7, #16]
 80178e6:	2b02      	cmp	r3, #2
 80178e8:	d121      	bne.n	801792e <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80178ea:	68f9      	ldr	r1, [r7, #12]
 80178ec:	483e      	ldr	r0, [pc, #248]	@ (80179e8 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80178ee:	f7e8 fc13 	bl	8000118 <__udivsi3>
 80178f2:	0003      	movs	r3, r0
 80178f4:	001a      	movs	r2, r3
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	4353      	muls	r3, r2
 80178fa:	61fb      	str	r3, [r7, #28]
      break;
 80178fc:	e025      	b.n	801794a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80178fe:	4b3b      	ldr	r3, [pc, #236]	@ (80179ec <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8017900:	69ba      	ldr	r2, [r7, #24]
 8017902:	0092      	lsls	r2, r2, #2
 8017904:	58d3      	ldr	r3, [r2, r3]
 8017906:	68f9      	ldr	r1, [r7, #12]
 8017908:	0018      	movs	r0, r3
 801790a:	f7e8 fc05 	bl	8000118 <__udivsi3>
 801790e:	0003      	movs	r3, r0
 8017910:	001a      	movs	r2, r3
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	4353      	muls	r3, r2
 8017916:	61fb      	str	r3, [r7, #28]
      break;
 8017918:	e017      	b.n	801794a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 801791a:	68f9      	ldr	r1, [r7, #12]
 801791c:	4834      	ldr	r0, [pc, #208]	@ (80179f0 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 801791e:	f7e8 fbfb 	bl	8000118 <__udivsi3>
 8017922:	0003      	movs	r3, r0
 8017924:	001a      	movs	r2, r3
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	4353      	muls	r3, r2
 801792a:	61fb      	str	r3, [r7, #28]
      break;
 801792c:	e00d      	b.n	801794a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801792e:	4b2f      	ldr	r3, [pc, #188]	@ (80179ec <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8017930:	69ba      	ldr	r2, [r7, #24]
 8017932:	0092      	lsls	r2, r2, #2
 8017934:	58d3      	ldr	r3, [r2, r3]
 8017936:	68f9      	ldr	r1, [r7, #12]
 8017938:	0018      	movs	r0, r3
 801793a:	f7e8 fbed 	bl	8000118 <__udivsi3>
 801793e:	0003      	movs	r3, r0
 8017940:	001a      	movs	r2, r3
 8017942:	697b      	ldr	r3, [r7, #20]
 8017944:	4353      	muls	r3, r2
 8017946:	61fb      	str	r3, [r7, #28]
      break;
 8017948:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 801794a:	4b26      	ldr	r3, [pc, #152]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801794c:	68da      	ldr	r2, [r3, #12]
 801794e:	2380      	movs	r3, #128	@ 0x80
 8017950:	025b      	lsls	r3, r3, #9
 8017952:	4013      	ands	r3, r2
 8017954:	d00e      	beq.n	8017974 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8017956:	4b23      	ldr	r3, [pc, #140]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017958:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 801795a:	0c5b      	lsrs	r3, r3, #17
 801795c:	221f      	movs	r2, #31
 801795e:	4013      	ands	r3, r2
 8017960:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8017962:	0019      	movs	r1, r3
 8017964:	69f8      	ldr	r0, [r7, #28]
 8017966:	f7e8 fbd7 	bl	8000118 <__udivsi3>
 801796a:	0003      	movs	r3, r0
 801796c:	001a      	movs	r2, r3
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	601a      	str	r2, [r3, #0]
 8017972:	e002      	b.n	801797a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2200      	movs	r2, #0
 8017978:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 801797a:	4b1a      	ldr	r3, [pc, #104]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801797c:	68da      	ldr	r2, [r3, #12]
 801797e:	2380      	movs	r3, #128	@ 0x80
 8017980:	045b      	lsls	r3, r3, #17
 8017982:	4013      	ands	r3, r2
 8017984:	d00e      	beq.n	80179a4 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8017986:	4b17      	ldr	r3, [pc, #92]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017988:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 801798a:	0e5b      	lsrs	r3, r3, #25
 801798c:	2207      	movs	r2, #7
 801798e:	4013      	ands	r3, r2
 8017990:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8017992:	0019      	movs	r1, r3
 8017994:	69f8      	ldr	r0, [r7, #28]
 8017996:	f7e8 fbbf 	bl	8000118 <__udivsi3>
 801799a:	0003      	movs	r3, r0
 801799c:	001a      	movs	r2, r3
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	605a      	str	r2, [r3, #4]
 80179a2:	e002      	b.n	80179aa <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2200      	movs	r2, #0
 80179a8:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80179aa:	4b0e      	ldr	r3, [pc, #56]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80179ac:	68da      	ldr	r2, [r3, #12]
 80179ae:	2380      	movs	r3, #128	@ 0x80
 80179b0:	055b      	lsls	r3, r3, #21
 80179b2:	4013      	ands	r3, r2
 80179b4:	d00e      	beq.n	80179d4 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80179b6:	4b0b      	ldr	r3, [pc, #44]	@ (80179e4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80179b8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80179ba:	0f5b      	lsrs	r3, r3, #29
 80179bc:	2207      	movs	r2, #7
 80179be:	4013      	ands	r3, r2
 80179c0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80179c2:	0019      	movs	r1, r3
 80179c4:	69f8      	ldr	r0, [r7, #28]
 80179c6:	f7e8 fba7 	bl	8000118 <__udivsi3>
 80179ca:	0003      	movs	r3, r0
 80179cc:	001a      	movs	r2, r3
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80179d2:	e002      	b.n	80179da <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2200      	movs	r2, #0
 80179d8:	609a      	str	r2, [r3, #8]
}
 80179da:	46c0      	nop			@ (mov r8, r8)
 80179dc:	46bd      	mov	sp, r7
 80179de:	b008      	add	sp, #32
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	46c0      	nop			@ (mov r8, r8)
 80179e4:	40021000 	.word	0x40021000
 80179e8:	00f42400 	.word	0x00f42400
 80179ec:	0801b49c 	.word	0x0801b49c
 80179f0:	003d0900 	.word	0x003d0900

080179f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80179fc:	210f      	movs	r1, #15
 80179fe:	187b      	adds	r3, r7, r1
 8017a00:	2201      	movs	r2, #1
 8017a02:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d100      	bne.n	8017a0c <HAL_RTC_Init+0x18>
 8017a0a:	e08b      	b.n	8017b24 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8017a0c:	187b      	adds	r3, r7, r1
 8017a0e:	2200      	movs	r2, #0
 8017a10:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	222d      	movs	r2, #45	@ 0x2d
 8017a16:	5c9b      	ldrb	r3, [r3, r2]
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d107      	bne.n	8017a2e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	222c      	movs	r2, #44	@ 0x2c
 8017a22:	2100      	movs	r1, #0
 8017a24:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	0018      	movs	r0, r3
 8017a2a:	f7f4 f86f 	bl	800bb0c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	222d      	movs	r2, #45	@ 0x2d
 8017a32:	2102      	movs	r1, #2
 8017a34:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017a36:	4b3f      	ldr	r3, [pc, #252]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a38:	22ca      	movs	r2, #202	@ 0xca
 8017a3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8017a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a3e:	2253      	movs	r2, #83	@ 0x53
 8017a40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	0018      	movs	r0, r3
 8017a46:	f000 fab9 	bl	8017fbc <RTC_EnterInitMode>
 8017a4a:	1e03      	subs	r3, r0, #0
 8017a4c:	d00b      	beq.n	8017a66 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017a4e:	4b39      	ldr	r3, [pc, #228]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a50:	22ff      	movs	r2, #255	@ 0xff
 8017a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	222d      	movs	r2, #45	@ 0x2d
 8017a58:	2104      	movs	r1, #4
 8017a5a:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8017a5c:	230f      	movs	r3, #15
 8017a5e:	18fb      	adds	r3, r7, r3
 8017a60:	2201      	movs	r2, #1
 8017a62:	701a      	strb	r2, [r3, #0]
 8017a64:	e05e      	b.n	8017b24 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8017a66:	4b33      	ldr	r3, [pc, #204]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a68:	699a      	ldr	r2, [r3, #24]
 8017a6a:	4b32      	ldr	r3, [pc, #200]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a6c:	4932      	ldr	r1, [pc, #200]	@ (8017b38 <HAL_RTC_Init+0x144>)
 8017a6e:	400a      	ands	r2, r1
 8017a70:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8017a72:	4b30      	ldr	r3, [pc, #192]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a74:	6999      	ldr	r1, [r3, #24]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	685a      	ldr	r2, [r3, #4]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	691b      	ldr	r3, [r3, #16]
 8017a7e:	431a      	orrs	r2, r3
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	699b      	ldr	r3, [r3, #24]
 8017a84:	431a      	orrs	r2, r3
 8017a86:	4b2b      	ldr	r3, [pc, #172]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a88:	430a      	orrs	r2, r1
 8017a8a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	68d9      	ldr	r1, [r3, #12]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	689b      	ldr	r3, [r3, #8]
 8017a94:	041a      	lsls	r2, r3, #16
 8017a96:	4b27      	ldr	r3, [pc, #156]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a98:	430a      	orrs	r2, r1
 8017a9a:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8017a9c:	4b25      	ldr	r3, [pc, #148]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	4a26      	ldr	r2, [pc, #152]	@ (8017b3c <HAL_RTC_Init+0x148>)
 8017aa2:	4013      	ands	r3, r2
 8017aa4:	0019      	movs	r1, r3
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017aae:	431a      	orrs	r2, r3
 8017ab0:	4b20      	ldr	r3, [pc, #128]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017ab2:	430a      	orrs	r2, r1
 8017ab4:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017ab8:	68da      	ldr	r2, [r3, #12]
 8017aba:	4b1e      	ldr	r3, [pc, #120]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017abc:	2180      	movs	r1, #128	@ 0x80
 8017abe:	438a      	bics	r2, r1
 8017ac0:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017ac4:	699b      	ldr	r3, [r3, #24]
 8017ac6:	2220      	movs	r2, #32
 8017ac8:	4013      	ands	r3, r2
 8017aca:	d110      	bne.n	8017aee <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	0018      	movs	r0, r3
 8017ad0:	f000 fa4e 	bl	8017f70 <HAL_RTC_WaitForSynchro>
 8017ad4:	1e03      	subs	r3, r0, #0
 8017ad6:	d00a      	beq.n	8017aee <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017ad8:	4b16      	ldr	r3, [pc, #88]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017ada:	22ff      	movs	r2, #255	@ 0xff
 8017adc:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	222d      	movs	r2, #45	@ 0x2d
 8017ae2:	2104      	movs	r1, #4
 8017ae4:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8017ae6:	230f      	movs	r3, #15
 8017ae8:	18fb      	adds	r3, r7, r3
 8017aea:	2201      	movs	r2, #1
 8017aec:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8017aee:	230f      	movs	r3, #15
 8017af0:	18fb      	adds	r3, r7, r3
 8017af2:	781b      	ldrb	r3, [r3, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d115      	bne.n	8017b24 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8017af8:	4b0e      	ldr	r3, [pc, #56]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017afa:	699b      	ldr	r3, [r3, #24]
 8017afc:	00db      	lsls	r3, r3, #3
 8017afe:	08d9      	lsrs	r1, r3, #3
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6a1a      	ldr	r2, [r3, #32]
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	69db      	ldr	r3, [r3, #28]
 8017b08:	431a      	orrs	r2, r3
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	695b      	ldr	r3, [r3, #20]
 8017b0e:	431a      	orrs	r2, r3
 8017b10:	4b08      	ldr	r3, [pc, #32]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017b12:	430a      	orrs	r2, r1
 8017b14:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017b16:	4b07      	ldr	r3, [pc, #28]	@ (8017b34 <HAL_RTC_Init+0x140>)
 8017b18:	22ff      	movs	r2, #255	@ 0xff
 8017b1a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	222d      	movs	r2, #45	@ 0x2d
 8017b20:	2101      	movs	r1, #1
 8017b22:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8017b24:	230f      	movs	r3, #15
 8017b26:	18fb      	adds	r3, r7, r3
 8017b28:	781b      	ldrb	r3, [r3, #0]
}
 8017b2a:	0018      	movs	r0, r3
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	b004      	add	sp, #16
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	46c0      	nop			@ (mov r8, r8)
 8017b34:	40002800 	.word	0x40002800
 8017b38:	fb8fffbf 	.word	0xfb8fffbf
 8017b3c:	ffffe0ff 	.word	0xffffe0ff

08017b40 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017b40:	b590      	push	{r4, r7, lr}
 8017b42:	b087      	sub	sp, #28
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	60f8      	str	r0, [r7, #12]
 8017b48:	60b9      	str	r1, [r7, #8]
 8017b4a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	222c      	movs	r2, #44	@ 0x2c
 8017b50:	5c9b      	ldrb	r3, [r3, r2]
 8017b52:	2b01      	cmp	r3, #1
 8017b54:	d101      	bne.n	8017b5a <HAL_RTC_SetTime+0x1a>
 8017b56:	2302      	movs	r3, #2
 8017b58:	e0a7      	b.n	8017caa <HAL_RTC_SetTime+0x16a>
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	222c      	movs	r2, #44	@ 0x2c
 8017b5e:	2101      	movs	r1, #1
 8017b60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	222d      	movs	r2, #45	@ 0x2d
 8017b66:	2102      	movs	r1, #2
 8017b68:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017b6a:	4b52      	ldr	r3, [pc, #328]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017b6c:	22ca      	movs	r2, #202	@ 0xca
 8017b6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8017b70:	4b50      	ldr	r3, [pc, #320]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017b72:	2253      	movs	r2, #83	@ 0x53
 8017b74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	0018      	movs	r0, r3
 8017b7a:	f000 fa1f 	bl	8017fbc <RTC_EnterInitMode>
 8017b7e:	1e03      	subs	r3, r0, #0
 8017b80:	d00c      	beq.n	8017b9c <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017b82:	4b4c      	ldr	r3, [pc, #304]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017b84:	22ff      	movs	r2, #255	@ 0xff
 8017b86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	222d      	movs	r2, #45	@ 0x2d
 8017b8c:	2104      	movs	r1, #4
 8017b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	222c      	movs	r2, #44	@ 0x2c
 8017b94:	2100      	movs	r1, #0
 8017b96:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e086      	b.n	8017caa <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8017b9c:	4b45      	ldr	r3, [pc, #276]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017b9e:	68da      	ldr	r2, [r3, #12]
 8017ba0:	23c0      	movs	r3, #192	@ 0xc0
 8017ba2:	009b      	lsls	r3, r3, #2
 8017ba4:	401a      	ands	r2, r3
 8017ba6:	2380      	movs	r3, #128	@ 0x80
 8017ba8:	005b      	lsls	r3, r3, #1
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d053      	beq.n	8017c56 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d124      	bne.n	8017bfe <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8017bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017bb6:	699b      	ldr	r3, [r3, #24]
 8017bb8:	2240      	movs	r2, #64	@ 0x40
 8017bba:	4013      	ands	r3, r2
 8017bbc:	d102      	bne.n	8017bc4 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	0018      	movs	r0, r3
 8017bca:	f000 fa23 	bl	8018014 <RTC_ByteToBcd2>
 8017bce:	0003      	movs	r3, r0
 8017bd0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	785b      	ldrb	r3, [r3, #1]
 8017bd6:	0018      	movs	r0, r3
 8017bd8:	f000 fa1c 	bl	8018014 <RTC_ByteToBcd2>
 8017bdc:	0003      	movs	r3, r0
 8017bde:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017be0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	789b      	ldrb	r3, [r3, #2]
 8017be6:	0018      	movs	r0, r3
 8017be8:	f000 fa14 	bl	8018014 <RTC_ByteToBcd2>
 8017bec:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017bee:	0022      	movs	r2, r4
 8017bf0:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	78db      	ldrb	r3, [r3, #3]
 8017bf6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	617b      	str	r3, [r7, #20]
 8017bfc:	e016      	b.n	8017c2c <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8017bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c00:	699b      	ldr	r3, [r3, #24]
 8017c02:	2240      	movs	r2, #64	@ 0x40
 8017c04:	4013      	ands	r3, r2
 8017c06:	d102      	bne.n	8017c0e <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	781b      	ldrb	r3, [r3, #0]
 8017c12:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	785b      	ldrb	r3, [r3, #1]
 8017c18:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017c1a:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8017c1c:	68ba      	ldr	r2, [r7, #8]
 8017c1e:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017c20:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	78db      	ldrb	r3, [r3, #3]
 8017c26:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017c28:	4313      	orrs	r3, r2
 8017c2a:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8017c2c:	4b21      	ldr	r3, [pc, #132]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c2e:	697a      	ldr	r2, [r7, #20]
 8017c30:	4921      	ldr	r1, [pc, #132]	@ (8017cb8 <HAL_RTC_SetTime+0x178>)
 8017c32:	400a      	ands	r2, r1
 8017c34:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8017c36:	4b1f      	ldr	r3, [pc, #124]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c38:	699a      	ldr	r2, [r3, #24]
 8017c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c3c:	491f      	ldr	r1, [pc, #124]	@ (8017cbc <HAL_RTC_SetTime+0x17c>)
 8017c3e:	400a      	ands	r2, r1
 8017c40:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8017c42:	4b1c      	ldr	r3, [pc, #112]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c44:	6999      	ldr	r1, [r3, #24]
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	68da      	ldr	r2, [r3, #12]
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	691b      	ldr	r3, [r3, #16]
 8017c4e:	431a      	orrs	r2, r3
 8017c50:	4b18      	ldr	r3, [pc, #96]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c52:	430a      	orrs	r2, r1
 8017c54:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017c56:	4b17      	ldr	r3, [pc, #92]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c58:	68da      	ldr	r2, [r3, #12]
 8017c5a:	4b16      	ldr	r3, [pc, #88]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c5c:	2180      	movs	r1, #128	@ 0x80
 8017c5e:	438a      	bics	r2, r1
 8017c60:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017c62:	4b14      	ldr	r3, [pc, #80]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c64:	699b      	ldr	r3, [r3, #24]
 8017c66:	2220      	movs	r2, #32
 8017c68:	4013      	ands	r3, r2
 8017c6a:	d112      	bne.n	8017c92 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	0018      	movs	r0, r3
 8017c70:	f000 f97e 	bl	8017f70 <HAL_RTC_WaitForSynchro>
 8017c74:	1e03      	subs	r3, r0, #0
 8017c76:	d00c      	beq.n	8017c92 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017c78:	4b0e      	ldr	r3, [pc, #56]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c7a:	22ff      	movs	r2, #255	@ 0xff
 8017c7c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	222d      	movs	r2, #45	@ 0x2d
 8017c82:	2104      	movs	r1, #4
 8017c84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	222c      	movs	r2, #44	@ 0x2c
 8017c8a:	2100      	movs	r1, #0
 8017c8c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017c8e:	2301      	movs	r3, #1
 8017c90:	e00b      	b.n	8017caa <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017c92:	4b08      	ldr	r3, [pc, #32]	@ (8017cb4 <HAL_RTC_SetTime+0x174>)
 8017c94:	22ff      	movs	r2, #255	@ 0xff
 8017c96:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	222d      	movs	r2, #45	@ 0x2d
 8017c9c:	2101      	movs	r1, #1
 8017c9e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	222c      	movs	r2, #44	@ 0x2c
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017ca8:	2300      	movs	r3, #0
  }
}
 8017caa:	0018      	movs	r0, r3
 8017cac:	46bd      	mov	sp, r7
 8017cae:	b007      	add	sp, #28
 8017cb0:	bd90      	pop	{r4, r7, pc}
 8017cb2:	46c0      	nop			@ (mov r8, r8)
 8017cb4:	40002800 	.word	0x40002800
 8017cb8:	007f7f7f 	.word	0x007f7f7f
 8017cbc:	fffbffff 	.word	0xfffbffff

08017cc0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b086      	sub	sp, #24
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8017ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8017d80 <HAL_RTC_GetTime+0xc0>)
 8017cce:	689a      	ldr	r2, [r3, #8]
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8017cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8017d80 <HAL_RTC_GetTime+0xc0>)
 8017cd6:	68da      	ldr	r2, [r3, #12]
 8017cd8:	23c0      	movs	r3, #192	@ 0xc0
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	401a      	ands	r2, r3
 8017cde:	2380      	movs	r3, #128	@ 0x80
 8017ce0:	005b      	lsls	r3, r3, #1
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d047      	beq.n	8017d76 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8017ce6:	4b26      	ldr	r3, [pc, #152]	@ (8017d80 <HAL_RTC_GetTime+0xc0>)
 8017ce8:	691b      	ldr	r3, [r3, #16]
 8017cea:	045b      	lsls	r3, r3, #17
 8017cec:	0c5a      	lsrs	r2, r3, #17
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8017cf2:	4b23      	ldr	r3, [pc, #140]	@ (8017d80 <HAL_RTC_GetTime+0xc0>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4a23      	ldr	r2, [pc, #140]	@ (8017d84 <HAL_RTC_GetTime+0xc4>)
 8017cf8:	4013      	ands	r3, r2
 8017cfa:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8017cfc:	697b      	ldr	r3, [r7, #20]
 8017cfe:	0c1b      	lsrs	r3, r3, #16
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	223f      	movs	r2, #63	@ 0x3f
 8017d04:	4013      	ands	r3, r2
 8017d06:	b2da      	uxtb	r2, r3
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	0a1b      	lsrs	r3, r3, #8
 8017d10:	b2db      	uxtb	r3, r3
 8017d12:	227f      	movs	r2, #127	@ 0x7f
 8017d14:	4013      	ands	r3, r2
 8017d16:	b2da      	uxtb	r2, r3
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8017d1c:	697b      	ldr	r3, [r7, #20]
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	227f      	movs	r2, #127	@ 0x7f
 8017d22:	4013      	ands	r3, r2
 8017d24:	b2da      	uxtb	r2, r3
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8017d2a:	697b      	ldr	r3, [r7, #20]
 8017d2c:	0d9b      	lsrs	r3, r3, #22
 8017d2e:	b2db      	uxtb	r3, r3
 8017d30:	2201      	movs	r2, #1
 8017d32:	4013      	ands	r3, r2
 8017d34:	b2da      	uxtb	r2, r3
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d11a      	bne.n	8017d76 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	781b      	ldrb	r3, [r3, #0]
 8017d44:	0018      	movs	r0, r3
 8017d46:	f000 f98d 	bl	8018064 <RTC_Bcd2ToByte>
 8017d4a:	0003      	movs	r3, r0
 8017d4c:	001a      	movs	r2, r3
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	785b      	ldrb	r3, [r3, #1]
 8017d56:	0018      	movs	r0, r3
 8017d58:	f000 f984 	bl	8018064 <RTC_Bcd2ToByte>
 8017d5c:	0003      	movs	r3, r0
 8017d5e:	001a      	movs	r2, r3
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	789b      	ldrb	r3, [r3, #2]
 8017d68:	0018      	movs	r0, r3
 8017d6a:	f000 f97b 	bl	8018064 <RTC_Bcd2ToByte>
 8017d6e:	0003      	movs	r3, r0
 8017d70:	001a      	movs	r2, r3
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8017d76:	2300      	movs	r3, #0
}
 8017d78:	0018      	movs	r0, r3
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	b006      	add	sp, #24
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	40002800 	.word	0x40002800
 8017d84:	007f7f7f 	.word	0x007f7f7f

08017d88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017d88:	b590      	push	{r4, r7, lr}
 8017d8a:	b087      	sub	sp, #28
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	222c      	movs	r2, #44	@ 0x2c
 8017d98:	5c9b      	ldrb	r3, [r3, r2]
 8017d9a:	2b01      	cmp	r3, #1
 8017d9c:	d101      	bne.n	8017da2 <HAL_RTC_SetDate+0x1a>
 8017d9e:	2302      	movs	r3, #2
 8017da0:	e090      	b.n	8017ec4 <HAL_RTC_SetDate+0x13c>
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	222c      	movs	r2, #44	@ 0x2c
 8017da6:	2101      	movs	r1, #1
 8017da8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	222d      	movs	r2, #45	@ 0x2d
 8017dae:	2102      	movs	r1, #2
 8017db0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10e      	bne.n	8017dd6 <HAL_RTC_SetDate+0x4e>
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	785b      	ldrb	r3, [r3, #1]
 8017dbc:	001a      	movs	r2, r3
 8017dbe:	2310      	movs	r3, #16
 8017dc0:	4013      	ands	r3, r2
 8017dc2:	d008      	beq.n	8017dd6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	785b      	ldrb	r3, [r3, #1]
 8017dc8:	2210      	movs	r2, #16
 8017dca:	4393      	bics	r3, r2
 8017dcc:	b2db      	uxtb	r3, r3
 8017dce:	330a      	adds	r3, #10
 8017dd0:	b2da      	uxtb	r2, r3
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d11c      	bne.n	8017e16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	78db      	ldrb	r3, [r3, #3]
 8017de0:	0018      	movs	r0, r3
 8017de2:	f000 f917 	bl	8018014 <RTC_ByteToBcd2>
 8017de6:	0003      	movs	r3, r0
 8017de8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	785b      	ldrb	r3, [r3, #1]
 8017dee:	0018      	movs	r0, r3
 8017df0:	f000 f910 	bl	8018014 <RTC_ByteToBcd2>
 8017df4:	0003      	movs	r3, r0
 8017df6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017df8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	789b      	ldrb	r3, [r3, #2]
 8017dfe:	0018      	movs	r0, r3
 8017e00:	f000 f908 	bl	8018014 <RTC_ByteToBcd2>
 8017e04:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8017e06:	0022      	movs	r2, r4
 8017e08:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017e10:	4313      	orrs	r3, r2
 8017e12:	617b      	str	r3, [r7, #20]
 8017e14:	e00e      	b.n	8017e34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	78db      	ldrb	r3, [r3, #3]
 8017e1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	785b      	ldrb	r3, [r3, #1]
 8017e20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017e22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8017e24:	68ba      	ldr	r2, [r7, #8]
 8017e26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017e28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017e30:	4313      	orrs	r3, r2
 8017e32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017e34:	4b25      	ldr	r3, [pc, #148]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e36:	22ca      	movs	r2, #202	@ 0xca
 8017e38:	625a      	str	r2, [r3, #36]	@ 0x24
 8017e3a:	4b24      	ldr	r3, [pc, #144]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e3c:	2253      	movs	r2, #83	@ 0x53
 8017e3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	0018      	movs	r0, r3
 8017e44:	f000 f8ba 	bl	8017fbc <RTC_EnterInitMode>
 8017e48:	1e03      	subs	r3, r0, #0
 8017e4a:	d00c      	beq.n	8017e66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e4e:	22ff      	movs	r2, #255	@ 0xff
 8017e50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	222d      	movs	r2, #45	@ 0x2d
 8017e56:	2104      	movs	r1, #4
 8017e58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	222c      	movs	r2, #44	@ 0x2c
 8017e5e:	2100      	movs	r1, #0
 8017e60:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017e62:	2301      	movs	r3, #1
 8017e64:	e02e      	b.n	8017ec4 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8017e66:	4b19      	ldr	r3, [pc, #100]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e68:	697a      	ldr	r2, [r7, #20]
 8017e6a:	4919      	ldr	r1, [pc, #100]	@ (8017ed0 <HAL_RTC_SetDate+0x148>)
 8017e6c:	400a      	ands	r2, r1
 8017e6e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017e70:	4b16      	ldr	r3, [pc, #88]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e72:	68da      	ldr	r2, [r3, #12]
 8017e74:	4b15      	ldr	r3, [pc, #84]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e76:	2180      	movs	r1, #128	@ 0x80
 8017e78:	438a      	bics	r2, r1
 8017e7a:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017e7c:	4b13      	ldr	r3, [pc, #76]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e7e:	699b      	ldr	r3, [r3, #24]
 8017e80:	2220      	movs	r2, #32
 8017e82:	4013      	ands	r3, r2
 8017e84:	d112      	bne.n	8017eac <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	0018      	movs	r0, r3
 8017e8a:	f000 f871 	bl	8017f70 <HAL_RTC_WaitForSynchro>
 8017e8e:	1e03      	subs	r3, r0, #0
 8017e90:	d00c      	beq.n	8017eac <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017e92:	4b0e      	ldr	r3, [pc, #56]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017e94:	22ff      	movs	r2, #255	@ 0xff
 8017e96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	222d      	movs	r2, #45	@ 0x2d
 8017e9c:	2104      	movs	r1, #4
 8017e9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	222c      	movs	r2, #44	@ 0x2c
 8017ea4:	2100      	movs	r1, #0
 8017ea6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	e00b      	b.n	8017ec4 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017eac:	4b07      	ldr	r3, [pc, #28]	@ (8017ecc <HAL_RTC_SetDate+0x144>)
 8017eae:	22ff      	movs	r2, #255	@ 0xff
 8017eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	222d      	movs	r2, #45	@ 0x2d
 8017eb6:	2101      	movs	r1, #1
 8017eb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	222c      	movs	r2, #44	@ 0x2c
 8017ebe:	2100      	movs	r1, #0
 8017ec0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017ec2:	2300      	movs	r3, #0
  }
}
 8017ec4:	0018      	movs	r0, r3
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	b007      	add	sp, #28
 8017eca:	bd90      	pop	{r4, r7, pc}
 8017ecc:	40002800 	.word	0x40002800
 8017ed0:	00ffff3f 	.word	0x00ffff3f

08017ed4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b086      	sub	sp, #24
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8017ee0:	4b21      	ldr	r3, [pc, #132]	@ (8017f68 <HAL_RTC_GetDate+0x94>)
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	4a21      	ldr	r2, [pc, #132]	@ (8017f6c <HAL_RTC_GetDate+0x98>)
 8017ee6:	4013      	ands	r3, r2
 8017ee8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8017eea:	697b      	ldr	r3, [r7, #20]
 8017eec:	0c1b      	lsrs	r3, r3, #16
 8017eee:	b2da      	uxtb	r2, r3
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	0a1b      	lsrs	r3, r3, #8
 8017ef8:	b2db      	uxtb	r3, r3
 8017efa:	221f      	movs	r2, #31
 8017efc:	4013      	ands	r3, r2
 8017efe:	b2da      	uxtb	r2, r3
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	223f      	movs	r2, #63	@ 0x3f
 8017f0a:	4013      	ands	r3, r2
 8017f0c:	b2da      	uxtb	r2, r3
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	0b5b      	lsrs	r3, r3, #13
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	2207      	movs	r2, #7
 8017f1a:	4013      	ands	r3, r2
 8017f1c:	b2da      	uxtb	r2, r3
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d11a      	bne.n	8017f5e <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	78db      	ldrb	r3, [r3, #3]
 8017f2c:	0018      	movs	r0, r3
 8017f2e:	f000 f899 	bl	8018064 <RTC_Bcd2ToByte>
 8017f32:	0003      	movs	r3, r0
 8017f34:	001a      	movs	r2, r3
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	785b      	ldrb	r3, [r3, #1]
 8017f3e:	0018      	movs	r0, r3
 8017f40:	f000 f890 	bl	8018064 <RTC_Bcd2ToByte>
 8017f44:	0003      	movs	r3, r0
 8017f46:	001a      	movs	r2, r3
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8017f4c:	68bb      	ldr	r3, [r7, #8]
 8017f4e:	789b      	ldrb	r3, [r3, #2]
 8017f50:	0018      	movs	r0, r3
 8017f52:	f000 f887 	bl	8018064 <RTC_Bcd2ToByte>
 8017f56:	0003      	movs	r3, r0
 8017f58:	001a      	movs	r2, r3
 8017f5a:	68bb      	ldr	r3, [r7, #8]
 8017f5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8017f5e:	2300      	movs	r3, #0
}
 8017f60:	0018      	movs	r0, r3
 8017f62:	46bd      	mov	sp, r7
 8017f64:	b006      	add	sp, #24
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	40002800 	.word	0x40002800
 8017f6c:	00ffff3f 	.word	0x00ffff3f

08017f70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b084      	sub	sp, #16
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8017f78:	4b0f      	ldr	r3, [pc, #60]	@ (8017fb8 <HAL_RTC_WaitForSynchro+0x48>)
 8017f7a:	68da      	ldr	r2, [r3, #12]
 8017f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8017fb8 <HAL_RTC_WaitForSynchro+0x48>)
 8017f7e:	2120      	movs	r1, #32
 8017f80:	438a      	bics	r2, r1
 8017f82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8017f84:	f7f9 f9d2 	bl	801132c <HAL_GetTick>
 8017f88:	0003      	movs	r3, r0
 8017f8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017f8c:	e00a      	b.n	8017fa4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017f8e:	f7f9 f9cd 	bl	801132c <HAL_GetTick>
 8017f92:	0002      	movs	r2, r0
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	1ad2      	subs	r2, r2, r3
 8017f98:	23fa      	movs	r3, #250	@ 0xfa
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d901      	bls.n	8017fa4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8017fa0:	2303      	movs	r3, #3
 8017fa2:	e005      	b.n	8017fb0 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017fa4:	4b04      	ldr	r3, [pc, #16]	@ (8017fb8 <HAL_RTC_WaitForSynchro+0x48>)
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	2220      	movs	r2, #32
 8017faa:	4013      	ands	r3, r2
 8017fac:	d0ef      	beq.n	8017f8e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8017fae:	2300      	movs	r3, #0
}
 8017fb0:	0018      	movs	r0, r3
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	b004      	add	sp, #16
 8017fb6:	bd80      	pop	{r7, pc}
 8017fb8:	40002800 	.word	0x40002800

08017fbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017fc4:	4b12      	ldr	r3, [pc, #72]	@ (8018010 <RTC_EnterInitMode+0x54>)
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	2240      	movs	r2, #64	@ 0x40
 8017fca:	4013      	ands	r3, r2
 8017fcc:	d11a      	bne.n	8018004 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017fce:	4b10      	ldr	r3, [pc, #64]	@ (8018010 <RTC_EnterInitMode+0x54>)
 8017fd0:	68da      	ldr	r2, [r3, #12]
 8017fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8018010 <RTC_EnterInitMode+0x54>)
 8017fd4:	2180      	movs	r1, #128	@ 0x80
 8017fd6:	430a      	orrs	r2, r1
 8017fd8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8017fda:	f7f9 f9a7 	bl	801132c <HAL_GetTick>
 8017fde:	0003      	movs	r3, r0
 8017fe0:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017fe2:	e00a      	b.n	8017ffa <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8017fe4:	f7f9 f9a2 	bl	801132c <HAL_GetTick>
 8017fe8:	0002      	movs	r2, r0
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	1ad2      	subs	r2, r2, r3
 8017fee:	23fa      	movs	r3, #250	@ 0xfa
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	d901      	bls.n	8017ffa <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8017ff6:	2303      	movs	r3, #3
 8017ff8:	e005      	b.n	8018006 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017ffa:	4b05      	ldr	r3, [pc, #20]	@ (8018010 <RTC_EnterInitMode+0x54>)
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	2240      	movs	r2, #64	@ 0x40
 8018000:	4013      	ands	r3, r2
 8018002:	d0ef      	beq.n	8017fe4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8018004:	2300      	movs	r3, #0
}
 8018006:	0018      	movs	r0, r3
 8018008:	46bd      	mov	sp, r7
 801800a:	b004      	add	sp, #16
 801800c:	bd80      	pop	{r7, pc}
 801800e:	46c0      	nop			@ (mov r8, r8)
 8018010:	40002800 	.word	0x40002800

08018014 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b084      	sub	sp, #16
 8018018:	af00      	add	r7, sp, #0
 801801a:	0002      	movs	r2, r0
 801801c:	1dfb      	adds	r3, r7, #7
 801801e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018020:	2300      	movs	r3, #0
 8018022:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8018024:	230b      	movs	r3, #11
 8018026:	18fb      	adds	r3, r7, r3
 8018028:	1dfa      	adds	r2, r7, #7
 801802a:	7812      	ldrb	r2, [r2, #0]
 801802c:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 801802e:	e008      	b.n	8018042 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	3301      	adds	r3, #1
 8018034:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8018036:	220b      	movs	r2, #11
 8018038:	18bb      	adds	r3, r7, r2
 801803a:	18ba      	adds	r2, r7, r2
 801803c:	7812      	ldrb	r2, [r2, #0]
 801803e:	3a0a      	subs	r2, #10
 8018040:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8018042:	210b      	movs	r1, #11
 8018044:	187b      	adds	r3, r7, r1
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	2b09      	cmp	r3, #9
 801804a:	d8f1      	bhi.n	8018030 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	b2db      	uxtb	r3, r3
 8018050:	011b      	lsls	r3, r3, #4
 8018052:	b2da      	uxtb	r2, r3
 8018054:	187b      	adds	r3, r7, r1
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	4313      	orrs	r3, r2
 801805a:	b2db      	uxtb	r3, r3
}
 801805c:	0018      	movs	r0, r3
 801805e:	46bd      	mov	sp, r7
 8018060:	b004      	add	sp, #16
 8018062:	bd80      	pop	{r7, pc}

08018064 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b084      	sub	sp, #16
 8018068:	af00      	add	r7, sp, #0
 801806a:	0002      	movs	r2, r0
 801806c:	1dfb      	adds	r3, r7, #7
 801806e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8018070:	1dfb      	adds	r3, r7, #7
 8018072:	781b      	ldrb	r3, [r3, #0]
 8018074:	091b      	lsrs	r3, r3, #4
 8018076:	b2db      	uxtb	r3, r3
 8018078:	001a      	movs	r2, r3
 801807a:	0013      	movs	r3, r2
 801807c:	009b      	lsls	r3, r3, #2
 801807e:	189b      	adds	r3, r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	b2da      	uxtb	r2, r3
 8018088:	1dfb      	adds	r3, r7, #7
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	210f      	movs	r1, #15
 801808e:	400b      	ands	r3, r1
 8018090:	b2db      	uxtb	r3, r3
 8018092:	18d3      	adds	r3, r2, r3
 8018094:	b2db      	uxtb	r3, r3
}
 8018096:	0018      	movs	r0, r3
 8018098:	46bd      	mov	sp, r7
 801809a:	b004      	add	sp, #16
 801809c:	bd80      	pop	{r7, pc}
	...

080180a0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b086      	sub	sp, #24
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	60f8      	str	r0, [r7, #12]
 80180a8:	60b9      	str	r1, [r7, #8]
 80180aa:	607a      	str	r2, [r7, #4]
 80180ac:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	222c      	movs	r2, #44	@ 0x2c
 80180b2:	5c9b      	ldrb	r3, [r3, r2]
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d101      	bne.n	80180bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80180b8:	2302      	movs	r3, #2
 80180ba:	e088      	b.n	80181ce <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	222c      	movs	r2, #44	@ 0x2c
 80180c0:	2101      	movs	r1, #1
 80180c2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	222d      	movs	r2, #45	@ 0x2d
 80180c8:	2102      	movs	r1, #2
 80180ca:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 80180cc:	4b42      	ldr	r3, [pc, #264]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80180ce:	699a      	ldr	r2, [r3, #24]
 80180d0:	2380      	movs	r3, #128	@ 0x80
 80180d2:	00db      	lsls	r3, r3, #3
 80180d4:	4013      	ands	r3, r2
 80180d6:	d01c      	beq.n	8018112 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 80180d8:	f7f9 f928 	bl	801132c <HAL_GetTick>
 80180dc:	0003      	movs	r3, r0
 80180de:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 80180e0:	e012      	b.n	8018108 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80180e2:	f7f9 f923 	bl	801132c <HAL_GetTick>
 80180e6:	0002      	movs	r2, r0
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	1ad2      	subs	r2, r2, r3
 80180ec:	23fa      	movs	r3, #250	@ 0xfa
 80180ee:	009b      	lsls	r3, r3, #2
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d909      	bls.n	8018108 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	222d      	movs	r2, #45	@ 0x2d
 80180f8:	2103      	movs	r1, #3
 80180fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	222c      	movs	r2, #44	@ 0x2c
 8018100:	2100      	movs	r1, #0
 8018102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018104:	2303      	movs	r3, #3
 8018106:	e062      	b.n	80181ce <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8018108:	4b33      	ldr	r3, [pc, #204]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801810a:	68db      	ldr	r3, [r3, #12]
 801810c:	2204      	movs	r2, #4
 801810e:	4013      	ands	r3, r2
 8018110:	d1e7      	bne.n	80180e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8018112:	4b31      	ldr	r3, [pc, #196]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018114:	699a      	ldr	r2, [r3, #24]
 8018116:	4b30      	ldr	r3, [pc, #192]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018118:	4930      	ldr	r1, [pc, #192]	@ (80181dc <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 801811a:	400a      	ands	r2, r1
 801811c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 801811e:	4b2e      	ldr	r3, [pc, #184]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018120:	2204      	movs	r2, #4
 8018122:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8018124:	f7f9 f902 	bl	801132c <HAL_GetTick>
 8018128:	0003      	movs	r3, r0
 801812a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801812c:	e015      	b.n	801815a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801812e:	f7f9 f8fd 	bl	801132c <HAL_GetTick>
 8018132:	0002      	movs	r2, r0
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	1ad2      	subs	r2, r2, r3
 8018138:	23fa      	movs	r3, #250	@ 0xfa
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	429a      	cmp	r2, r3
 801813e:	d90c      	bls.n	801815a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018140:	4b25      	ldr	r3, [pc, #148]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018142:	22ff      	movs	r2, #255	@ 0xff
 8018144:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	222d      	movs	r2, #45	@ 0x2d
 801814a:	2103      	movs	r1, #3
 801814c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	222c      	movs	r2, #44	@ 0x2c
 8018152:	2100      	movs	r1, #0
 8018154:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018156:	2303      	movs	r3, #3
 8018158:	e039      	b.n	80181ce <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801815a:	4b1f      	ldr	r3, [pc, #124]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801815c:	68db      	ldr	r3, [r3, #12]
 801815e:	2204      	movs	r2, #4
 8018160:	4013      	ands	r3, r2
 8018162:	d0e4      	beq.n	801812e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	0419      	lsls	r1, r3, #16
 8018168:	4b1b      	ldr	r3, [pc, #108]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801816a:	68ba      	ldr	r2, [r7, #8]
 801816c:	430a      	orrs	r2, r1
 801816e:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8018170:	4b19      	ldr	r3, [pc, #100]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018172:	699b      	ldr	r3, [r3, #24]
 8018174:	2207      	movs	r2, #7
 8018176:	4393      	bics	r3, r2
 8018178:	0019      	movs	r1, r3
 801817a:	4b17      	ldr	r3, [pc, #92]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801817c:	687a      	ldr	r2, [r7, #4]
 801817e:	430a      	orrs	r2, r1
 8018180:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d009      	beq.n	801819c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8018188:	4a15      	ldr	r2, [pc, #84]	@ (80181e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 801818a:	2384      	movs	r3, #132	@ 0x84
 801818c:	58d3      	ldr	r3, [r2, r3]
 801818e:	4914      	ldr	r1, [pc, #80]	@ (80181e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8018190:	2280      	movs	r2, #128	@ 0x80
 8018192:	0552      	lsls	r2, r2, #21
 8018194:	4313      	orrs	r3, r2
 8018196:	2284      	movs	r2, #132	@ 0x84
 8018198:	508b      	str	r3, [r1, r2]
 801819a:	e008      	b.n	80181ae <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801819c:	4a10      	ldr	r2, [pc, #64]	@ (80181e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 801819e:	2380      	movs	r3, #128	@ 0x80
 80181a0:	58d3      	ldr	r3, [r2, r3]
 80181a2:	490f      	ldr	r1, [pc, #60]	@ (80181e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80181a4:	2280      	movs	r2, #128	@ 0x80
 80181a6:	0552      	lsls	r2, r2, #21
 80181a8:	4313      	orrs	r3, r2
 80181aa:	2280      	movs	r2, #128	@ 0x80
 80181ac:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80181ae:	4b0a      	ldr	r3, [pc, #40]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80181b0:	699a      	ldr	r2, [r3, #24]
 80181b2:	4b09      	ldr	r3, [pc, #36]	@ (80181d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80181b4:	2188      	movs	r1, #136	@ 0x88
 80181b6:	01c9      	lsls	r1, r1, #7
 80181b8:	430a      	orrs	r2, r1
 80181ba:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	222d      	movs	r2, #45	@ 0x2d
 80181c0:	2101      	movs	r1, #1
 80181c2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	222c      	movs	r2, #44	@ 0x2c
 80181c8:	2100      	movs	r1, #0
 80181ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80181cc:	2300      	movs	r3, #0
}
 80181ce:	0018      	movs	r0, r3
 80181d0:	46bd      	mov	sp, r7
 80181d2:	b006      	add	sp, #24
 80181d4:	bd80      	pop	{r7, pc}
 80181d6:	46c0      	nop			@ (mov r8, r8)
 80181d8:	40002800 	.word	0x40002800
 80181dc:	fffffbff 	.word	0xfffffbff
 80181e0:	40021800 	.word	0x40021800

080181e4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b082      	sub	sp, #8
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	222c      	movs	r2, #44	@ 0x2c
 80181f0:	5c9b      	ldrb	r3, [r3, r2]
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d101      	bne.n	80181fa <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80181f6:	2302      	movs	r3, #2
 80181f8:	e016      	b.n	8018228 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	222c      	movs	r2, #44	@ 0x2c
 80181fe:	2101      	movs	r1, #1
 8018200:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	222d      	movs	r2, #45	@ 0x2d
 8018206:	2102      	movs	r1, #2
 8018208:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 801820a:	4b09      	ldr	r3, [pc, #36]	@ (8018230 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 801820c:	699a      	ldr	r2, [r3, #24]
 801820e:	4b08      	ldr	r3, [pc, #32]	@ (8018230 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8018210:	4908      	ldr	r1, [pc, #32]	@ (8018234 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8018212:	400a      	ands	r2, r1
 8018214:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	222d      	movs	r2, #45	@ 0x2d
 801821a:	2101      	movs	r1, #1
 801821c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	222c      	movs	r2, #44	@ 0x2c
 8018222:	2100      	movs	r1, #0
 8018224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018226:	2300      	movs	r3, #0
}
 8018228:	0018      	movs	r0, r3
 801822a:	46bd      	mov	sp, r7
 801822c:	b002      	add	sp, #8
 801822e:	bd80      	pop	{r7, pc}
 8018230:	40002800 	.word	0x40002800
 8018234:	ffffbbff 	.word	0xffffbbff

08018238 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b082      	sub	sp, #8
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8018240:	4b09      	ldr	r3, [pc, #36]	@ (8018268 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8018242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018244:	2204      	movs	r2, #4
 8018246:	4013      	ands	r3, r2
 8018248:	d006      	beq.n	8018258 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 801824a:	4b07      	ldr	r3, [pc, #28]	@ (8018268 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 801824c:	2204      	movs	r2, #4
 801824e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	0018      	movs	r0, r3
 8018254:	f000 f80a 	bl	801826c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	222d      	movs	r2, #45	@ 0x2d
 801825c:	2101      	movs	r1, #1
 801825e:	5499      	strb	r1, [r3, r2]
}
 8018260:	46c0      	nop			@ (mov r8, r8)
 8018262:	46bd      	mov	sp, r7
 8018264:	b002      	add	sp, #8
 8018266:	bd80      	pop	{r7, pc}
 8018268:	40002800 	.word	0x40002800

0801826c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8018274:	46c0      	nop			@ (mov r8, r8)
 8018276:	46bd      	mov	sp, r7
 8018278:	b002      	add	sp, #8
 801827a:	bd80      	pop	{r7, pc}

0801827c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b082      	sub	sp, #8
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d101      	bne.n	801828e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801828a:	2301      	movs	r3, #1
 801828c:	e04a      	b.n	8018324 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	223d      	movs	r2, #61	@ 0x3d
 8018292:	5c9b      	ldrb	r3, [r3, r2]
 8018294:	b2db      	uxtb	r3, r3
 8018296:	2b00      	cmp	r3, #0
 8018298:	d107      	bne.n	80182aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	223c      	movs	r2, #60	@ 0x3c
 801829e:	2100      	movs	r1, #0
 80182a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	0018      	movs	r0, r3
 80182a6:	f7f3 fc79 	bl	800bb9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	223d      	movs	r2, #61	@ 0x3d
 80182ae:	2102      	movs	r1, #2
 80182b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681a      	ldr	r2, [r3, #0]
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	3304      	adds	r3, #4
 80182ba:	0019      	movs	r1, r3
 80182bc:	0010      	movs	r0, r2
 80182be:	f000 fbd9 	bl	8018a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2248      	movs	r2, #72	@ 0x48
 80182c6:	2101      	movs	r1, #1
 80182c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	223e      	movs	r2, #62	@ 0x3e
 80182ce:	2101      	movs	r1, #1
 80182d0:	5499      	strb	r1, [r3, r2]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	223f      	movs	r2, #63	@ 0x3f
 80182d6:	2101      	movs	r1, #1
 80182d8:	5499      	strb	r1, [r3, r2]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	2240      	movs	r2, #64	@ 0x40
 80182de:	2101      	movs	r1, #1
 80182e0:	5499      	strb	r1, [r3, r2]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2241      	movs	r2, #65	@ 0x41
 80182e6:	2101      	movs	r1, #1
 80182e8:	5499      	strb	r1, [r3, r2]
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2242      	movs	r2, #66	@ 0x42
 80182ee:	2101      	movs	r1, #1
 80182f0:	5499      	strb	r1, [r3, r2]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2243      	movs	r2, #67	@ 0x43
 80182f6:	2101      	movs	r1, #1
 80182f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2244      	movs	r2, #68	@ 0x44
 80182fe:	2101      	movs	r1, #1
 8018300:	5499      	strb	r1, [r3, r2]
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2245      	movs	r2, #69	@ 0x45
 8018306:	2101      	movs	r1, #1
 8018308:	5499      	strb	r1, [r3, r2]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2246      	movs	r2, #70	@ 0x46
 801830e:	2101      	movs	r1, #1
 8018310:	5499      	strb	r1, [r3, r2]
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2247      	movs	r2, #71	@ 0x47
 8018316:	2101      	movs	r1, #1
 8018318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	223d      	movs	r2, #61	@ 0x3d
 801831e:	2101      	movs	r1, #1
 8018320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018322:	2300      	movs	r3, #0
}
 8018324:	0018      	movs	r0, r3
 8018326:	46bd      	mov	sp, r7
 8018328:	b002      	add	sp, #8
 801832a:	bd80      	pop	{r7, pc}

0801832c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d101      	bne.n	801833e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801833a:	2301      	movs	r3, #1
 801833c:	e04a      	b.n	80183d4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	223d      	movs	r2, #61	@ 0x3d
 8018342:	5c9b      	ldrb	r3, [r3, r2]
 8018344:	b2db      	uxtb	r3, r3
 8018346:	2b00      	cmp	r3, #0
 8018348:	d107      	bne.n	801835a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	223c      	movs	r2, #60	@ 0x3c
 801834e:	2100      	movs	r1, #0
 8018350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	0018      	movs	r0, r3
 8018356:	f000 f841 	bl	80183dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	223d      	movs	r2, #61	@ 0x3d
 801835e:	2102      	movs	r1, #2
 8018360:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681a      	ldr	r2, [r3, #0]
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	3304      	adds	r3, #4
 801836a:	0019      	movs	r1, r3
 801836c:	0010      	movs	r0, r2
 801836e:	f000 fb81 	bl	8018a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2248      	movs	r2, #72	@ 0x48
 8018376:	2101      	movs	r1, #1
 8018378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	223e      	movs	r2, #62	@ 0x3e
 801837e:	2101      	movs	r1, #1
 8018380:	5499      	strb	r1, [r3, r2]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	223f      	movs	r2, #63	@ 0x3f
 8018386:	2101      	movs	r1, #1
 8018388:	5499      	strb	r1, [r3, r2]
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2240      	movs	r2, #64	@ 0x40
 801838e:	2101      	movs	r1, #1
 8018390:	5499      	strb	r1, [r3, r2]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2241      	movs	r2, #65	@ 0x41
 8018396:	2101      	movs	r1, #1
 8018398:	5499      	strb	r1, [r3, r2]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2242      	movs	r2, #66	@ 0x42
 801839e:	2101      	movs	r1, #1
 80183a0:	5499      	strb	r1, [r3, r2]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2243      	movs	r2, #67	@ 0x43
 80183a6:	2101      	movs	r1, #1
 80183a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2244      	movs	r2, #68	@ 0x44
 80183ae:	2101      	movs	r1, #1
 80183b0:	5499      	strb	r1, [r3, r2]
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	2245      	movs	r2, #69	@ 0x45
 80183b6:	2101      	movs	r1, #1
 80183b8:	5499      	strb	r1, [r3, r2]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2246      	movs	r2, #70	@ 0x46
 80183be:	2101      	movs	r1, #1
 80183c0:	5499      	strb	r1, [r3, r2]
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	2247      	movs	r2, #71	@ 0x47
 80183c6:	2101      	movs	r1, #1
 80183c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	223d      	movs	r2, #61	@ 0x3d
 80183ce:	2101      	movs	r1, #1
 80183d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80183d2:	2300      	movs	r3, #0
}
 80183d4:	0018      	movs	r0, r3
 80183d6:	46bd      	mov	sp, r7
 80183d8:	b002      	add	sp, #8
 80183da:	bd80      	pop	{r7, pc}

080183dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b082      	sub	sp, #8
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80183e4:	46c0      	nop			@ (mov r8, r8)
 80183e6:	46bd      	mov	sp, r7
 80183e8:	b002      	add	sp, #8
 80183ea:	bd80      	pop	{r7, pc}

080183ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b084      	sub	sp, #16
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
 80183f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d108      	bne.n	801840e <HAL_TIM_PWM_Start+0x22>
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	223e      	movs	r2, #62	@ 0x3e
 8018400:	5c9b      	ldrb	r3, [r3, r2]
 8018402:	b2db      	uxtb	r3, r3
 8018404:	3b01      	subs	r3, #1
 8018406:	1e5a      	subs	r2, r3, #1
 8018408:	4193      	sbcs	r3, r2
 801840a:	b2db      	uxtb	r3, r3
 801840c:	e037      	b.n	801847e <HAL_TIM_PWM_Start+0x92>
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	2b04      	cmp	r3, #4
 8018412:	d108      	bne.n	8018426 <HAL_TIM_PWM_Start+0x3a>
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	223f      	movs	r2, #63	@ 0x3f
 8018418:	5c9b      	ldrb	r3, [r3, r2]
 801841a:	b2db      	uxtb	r3, r3
 801841c:	3b01      	subs	r3, #1
 801841e:	1e5a      	subs	r2, r3, #1
 8018420:	4193      	sbcs	r3, r2
 8018422:	b2db      	uxtb	r3, r3
 8018424:	e02b      	b.n	801847e <HAL_TIM_PWM_Start+0x92>
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	2b08      	cmp	r3, #8
 801842a:	d108      	bne.n	801843e <HAL_TIM_PWM_Start+0x52>
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2240      	movs	r2, #64	@ 0x40
 8018430:	5c9b      	ldrb	r3, [r3, r2]
 8018432:	b2db      	uxtb	r3, r3
 8018434:	3b01      	subs	r3, #1
 8018436:	1e5a      	subs	r2, r3, #1
 8018438:	4193      	sbcs	r3, r2
 801843a:	b2db      	uxtb	r3, r3
 801843c:	e01f      	b.n	801847e <HAL_TIM_PWM_Start+0x92>
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	2b0c      	cmp	r3, #12
 8018442:	d108      	bne.n	8018456 <HAL_TIM_PWM_Start+0x6a>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2241      	movs	r2, #65	@ 0x41
 8018448:	5c9b      	ldrb	r3, [r3, r2]
 801844a:	b2db      	uxtb	r3, r3
 801844c:	3b01      	subs	r3, #1
 801844e:	1e5a      	subs	r2, r3, #1
 8018450:	4193      	sbcs	r3, r2
 8018452:	b2db      	uxtb	r3, r3
 8018454:	e013      	b.n	801847e <HAL_TIM_PWM_Start+0x92>
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	2b10      	cmp	r3, #16
 801845a:	d108      	bne.n	801846e <HAL_TIM_PWM_Start+0x82>
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2242      	movs	r2, #66	@ 0x42
 8018460:	5c9b      	ldrb	r3, [r3, r2]
 8018462:	b2db      	uxtb	r3, r3
 8018464:	3b01      	subs	r3, #1
 8018466:	1e5a      	subs	r2, r3, #1
 8018468:	4193      	sbcs	r3, r2
 801846a:	b2db      	uxtb	r3, r3
 801846c:	e007      	b.n	801847e <HAL_TIM_PWM_Start+0x92>
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	2243      	movs	r2, #67	@ 0x43
 8018472:	5c9b      	ldrb	r3, [r3, r2]
 8018474:	b2db      	uxtb	r3, r3
 8018476:	3b01      	subs	r3, #1
 8018478:	1e5a      	subs	r2, r3, #1
 801847a:	4193      	sbcs	r3, r2
 801847c:	b2db      	uxtb	r3, r3
 801847e:	2b00      	cmp	r3, #0
 8018480:	d001      	beq.n	8018486 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8018482:	2301      	movs	r3, #1
 8018484:	e086      	b.n	8018594 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d104      	bne.n	8018496 <HAL_TIM_PWM_Start+0xaa>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	223e      	movs	r2, #62	@ 0x3e
 8018490:	2102      	movs	r1, #2
 8018492:	5499      	strb	r1, [r3, r2]
 8018494:	e023      	b.n	80184de <HAL_TIM_PWM_Start+0xf2>
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	2b04      	cmp	r3, #4
 801849a:	d104      	bne.n	80184a6 <HAL_TIM_PWM_Start+0xba>
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	223f      	movs	r2, #63	@ 0x3f
 80184a0:	2102      	movs	r1, #2
 80184a2:	5499      	strb	r1, [r3, r2]
 80184a4:	e01b      	b.n	80184de <HAL_TIM_PWM_Start+0xf2>
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	2b08      	cmp	r3, #8
 80184aa:	d104      	bne.n	80184b6 <HAL_TIM_PWM_Start+0xca>
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2240      	movs	r2, #64	@ 0x40
 80184b0:	2102      	movs	r1, #2
 80184b2:	5499      	strb	r1, [r3, r2]
 80184b4:	e013      	b.n	80184de <HAL_TIM_PWM_Start+0xf2>
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	2b0c      	cmp	r3, #12
 80184ba:	d104      	bne.n	80184c6 <HAL_TIM_PWM_Start+0xda>
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2241      	movs	r2, #65	@ 0x41
 80184c0:	2102      	movs	r1, #2
 80184c2:	5499      	strb	r1, [r3, r2]
 80184c4:	e00b      	b.n	80184de <HAL_TIM_PWM_Start+0xf2>
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	2b10      	cmp	r3, #16
 80184ca:	d104      	bne.n	80184d6 <HAL_TIM_PWM_Start+0xea>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2242      	movs	r2, #66	@ 0x42
 80184d0:	2102      	movs	r1, #2
 80184d2:	5499      	strb	r1, [r3, r2]
 80184d4:	e003      	b.n	80184de <HAL_TIM_PWM_Start+0xf2>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2243      	movs	r2, #67	@ 0x43
 80184da:	2102      	movs	r1, #2
 80184dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	6839      	ldr	r1, [r7, #0]
 80184e4:	2201      	movs	r2, #1
 80184e6:	0018      	movs	r0, r3
 80184e8:	f000 fe7a 	bl	80191e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	4a2a      	ldr	r2, [pc, #168]	@ (801859c <HAL_TIM_PWM_Start+0x1b0>)
 80184f2:	4293      	cmp	r3, r2
 80184f4:	d009      	beq.n	801850a <HAL_TIM_PWM_Start+0x11e>
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	4a29      	ldr	r2, [pc, #164]	@ (80185a0 <HAL_TIM_PWM_Start+0x1b4>)
 80184fc:	4293      	cmp	r3, r2
 80184fe:	d004      	beq.n	801850a <HAL_TIM_PWM_Start+0x11e>
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	4a27      	ldr	r2, [pc, #156]	@ (80185a4 <HAL_TIM_PWM_Start+0x1b8>)
 8018506:	4293      	cmp	r3, r2
 8018508:	d101      	bne.n	801850e <HAL_TIM_PWM_Start+0x122>
 801850a:	2301      	movs	r3, #1
 801850c:	e000      	b.n	8018510 <HAL_TIM_PWM_Start+0x124>
 801850e:	2300      	movs	r3, #0
 8018510:	2b00      	cmp	r3, #0
 8018512:	d008      	beq.n	8018526 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2180      	movs	r1, #128	@ 0x80
 8018520:	0209      	lsls	r1, r1, #8
 8018522:	430a      	orrs	r2, r1
 8018524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	4a1c      	ldr	r2, [pc, #112]	@ (801859c <HAL_TIM_PWM_Start+0x1b0>)
 801852c:	4293      	cmp	r3, r2
 801852e:	d00f      	beq.n	8018550 <HAL_TIM_PWM_Start+0x164>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681a      	ldr	r2, [r3, #0]
 8018534:	2380      	movs	r3, #128	@ 0x80
 8018536:	05db      	lsls	r3, r3, #23
 8018538:	429a      	cmp	r2, r3
 801853a:	d009      	beq.n	8018550 <HAL_TIM_PWM_Start+0x164>
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4a19      	ldr	r2, [pc, #100]	@ (80185a8 <HAL_TIM_PWM_Start+0x1bc>)
 8018542:	4293      	cmp	r3, r2
 8018544:	d004      	beq.n	8018550 <HAL_TIM_PWM_Start+0x164>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4a15      	ldr	r2, [pc, #84]	@ (80185a0 <HAL_TIM_PWM_Start+0x1b4>)
 801854c:	4293      	cmp	r3, r2
 801854e:	d116      	bne.n	801857e <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	689b      	ldr	r3, [r3, #8]
 8018556:	4a15      	ldr	r2, [pc, #84]	@ (80185ac <HAL_TIM_PWM_Start+0x1c0>)
 8018558:	4013      	ands	r3, r2
 801855a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2b06      	cmp	r3, #6
 8018560:	d016      	beq.n	8018590 <HAL_TIM_PWM_Start+0x1a4>
 8018562:	68fa      	ldr	r2, [r7, #12]
 8018564:	2380      	movs	r3, #128	@ 0x80
 8018566:	025b      	lsls	r3, r3, #9
 8018568:	429a      	cmp	r2, r3
 801856a:	d011      	beq.n	8018590 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	2101      	movs	r1, #1
 8018578:	430a      	orrs	r2, r1
 801857a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801857c:	e008      	b.n	8018590 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	681a      	ldr	r2, [r3, #0]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2101      	movs	r1, #1
 801858a:	430a      	orrs	r2, r1
 801858c:	601a      	str	r2, [r3, #0]
 801858e:	e000      	b.n	8018592 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018590:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8018592:	2300      	movs	r3, #0
}
 8018594:	0018      	movs	r0, r3
 8018596:	46bd      	mov	sp, r7
 8018598:	b004      	add	sp, #16
 801859a:	bd80      	pop	{r7, pc}
 801859c:	40012c00 	.word	0x40012c00
 80185a0:	40014000 	.word	0x40014000
 80185a4:	40014400 	.word	0x40014400
 80185a8:	40000400 	.word	0x40000400
 80185ac:	00010007 	.word	0x00010007

080185b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	6839      	ldr	r1, [r7, #0]
 80185c0:	2200      	movs	r2, #0
 80185c2:	0018      	movs	r0, r3
 80185c4:	f000 fe0c 	bl	80191e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4a35      	ldr	r2, [pc, #212]	@ (80186a4 <HAL_TIM_PWM_Stop+0xf4>)
 80185ce:	4293      	cmp	r3, r2
 80185d0:	d009      	beq.n	80185e6 <HAL_TIM_PWM_Stop+0x36>
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	4a34      	ldr	r2, [pc, #208]	@ (80186a8 <HAL_TIM_PWM_Stop+0xf8>)
 80185d8:	4293      	cmp	r3, r2
 80185da:	d004      	beq.n	80185e6 <HAL_TIM_PWM_Stop+0x36>
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a32      	ldr	r2, [pc, #200]	@ (80186ac <HAL_TIM_PWM_Stop+0xfc>)
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d101      	bne.n	80185ea <HAL_TIM_PWM_Stop+0x3a>
 80185e6:	2301      	movs	r3, #1
 80185e8:	e000      	b.n	80185ec <HAL_TIM_PWM_Stop+0x3c>
 80185ea:	2300      	movs	r3, #0
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d013      	beq.n	8018618 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	6a1b      	ldr	r3, [r3, #32]
 80185f6:	4a2e      	ldr	r2, [pc, #184]	@ (80186b0 <HAL_TIM_PWM_Stop+0x100>)
 80185f8:	4013      	ands	r3, r2
 80185fa:	d10d      	bne.n	8018618 <HAL_TIM_PWM_Stop+0x68>
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	6a1b      	ldr	r3, [r3, #32]
 8018602:	4a2c      	ldr	r2, [pc, #176]	@ (80186b4 <HAL_TIM_PWM_Stop+0x104>)
 8018604:	4013      	ands	r3, r2
 8018606:	d107      	bne.n	8018618 <HAL_TIM_PWM_Stop+0x68>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	4929      	ldr	r1, [pc, #164]	@ (80186b8 <HAL_TIM_PWM_Stop+0x108>)
 8018614:	400a      	ands	r2, r1
 8018616:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	6a1b      	ldr	r3, [r3, #32]
 801861e:	4a24      	ldr	r2, [pc, #144]	@ (80186b0 <HAL_TIM_PWM_Stop+0x100>)
 8018620:	4013      	ands	r3, r2
 8018622:	d10d      	bne.n	8018640 <HAL_TIM_PWM_Stop+0x90>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	6a1b      	ldr	r3, [r3, #32]
 801862a:	4a22      	ldr	r2, [pc, #136]	@ (80186b4 <HAL_TIM_PWM_Stop+0x104>)
 801862c:	4013      	ands	r3, r2
 801862e:	d107      	bne.n	8018640 <HAL_TIM_PWM_Stop+0x90>
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	681a      	ldr	r2, [r3, #0]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2101      	movs	r1, #1
 801863c:	438a      	bics	r2, r1
 801863e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d104      	bne.n	8018650 <HAL_TIM_PWM_Stop+0xa0>
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	223e      	movs	r2, #62	@ 0x3e
 801864a:	2101      	movs	r1, #1
 801864c:	5499      	strb	r1, [r3, r2]
 801864e:	e023      	b.n	8018698 <HAL_TIM_PWM_Stop+0xe8>
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	2b04      	cmp	r3, #4
 8018654:	d104      	bne.n	8018660 <HAL_TIM_PWM_Stop+0xb0>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	223f      	movs	r2, #63	@ 0x3f
 801865a:	2101      	movs	r1, #1
 801865c:	5499      	strb	r1, [r3, r2]
 801865e:	e01b      	b.n	8018698 <HAL_TIM_PWM_Stop+0xe8>
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	2b08      	cmp	r3, #8
 8018664:	d104      	bne.n	8018670 <HAL_TIM_PWM_Stop+0xc0>
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2240      	movs	r2, #64	@ 0x40
 801866a:	2101      	movs	r1, #1
 801866c:	5499      	strb	r1, [r3, r2]
 801866e:	e013      	b.n	8018698 <HAL_TIM_PWM_Stop+0xe8>
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	2b0c      	cmp	r3, #12
 8018674:	d104      	bne.n	8018680 <HAL_TIM_PWM_Stop+0xd0>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2241      	movs	r2, #65	@ 0x41
 801867a:	2101      	movs	r1, #1
 801867c:	5499      	strb	r1, [r3, r2]
 801867e:	e00b      	b.n	8018698 <HAL_TIM_PWM_Stop+0xe8>
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	2b10      	cmp	r3, #16
 8018684:	d104      	bne.n	8018690 <HAL_TIM_PWM_Stop+0xe0>
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	2242      	movs	r2, #66	@ 0x42
 801868a:	2101      	movs	r1, #1
 801868c:	5499      	strb	r1, [r3, r2]
 801868e:	e003      	b.n	8018698 <HAL_TIM_PWM_Stop+0xe8>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2243      	movs	r2, #67	@ 0x43
 8018694:	2101      	movs	r1, #1
 8018696:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8018698:	2300      	movs	r3, #0
}
 801869a:	0018      	movs	r0, r3
 801869c:	46bd      	mov	sp, r7
 801869e:	b002      	add	sp, #8
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	46c0      	nop			@ (mov r8, r8)
 80186a4:	40012c00 	.word	0x40012c00
 80186a8:	40014000 	.word	0x40014000
 80186ac:	40014400 	.word	0x40014400
 80186b0:	00001111 	.word	0x00001111
 80186b4:	00000444 	.word	0x00000444
 80186b8:	ffff7fff 	.word	0xffff7fff

080186bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b086      	sub	sp, #24
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	60f8      	str	r0, [r7, #12]
 80186c4:	60b9      	str	r1, [r7, #8]
 80186c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80186c8:	2317      	movs	r3, #23
 80186ca:	18fb      	adds	r3, r7, r3
 80186cc:	2200      	movs	r2, #0
 80186ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	223c      	movs	r2, #60	@ 0x3c
 80186d4:	5c9b      	ldrb	r3, [r3, r2]
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d101      	bne.n	80186de <HAL_TIM_PWM_ConfigChannel+0x22>
 80186da:	2302      	movs	r3, #2
 80186dc:	e0e5      	b.n	80188aa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	223c      	movs	r2, #60	@ 0x3c
 80186e2:	2101      	movs	r1, #1
 80186e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2b14      	cmp	r3, #20
 80186ea:	d900      	bls.n	80186ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80186ec:	e0d1      	b.n	8018892 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	009a      	lsls	r2, r3, #2
 80186f2:	4b70      	ldr	r3, [pc, #448]	@ (80188b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	68ba      	ldr	r2, [r7, #8]
 8018700:	0011      	movs	r1, r2
 8018702:	0018      	movs	r0, r3
 8018704:	f000 fa34 	bl	8018b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	699a      	ldr	r2, [r3, #24]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	2108      	movs	r1, #8
 8018714:	430a      	orrs	r2, r1
 8018716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	699a      	ldr	r2, [r3, #24]
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	2104      	movs	r1, #4
 8018724:	438a      	bics	r2, r1
 8018726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	6999      	ldr	r1, [r3, #24]
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	691a      	ldr	r2, [r3, #16]
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	430a      	orrs	r2, r1
 8018738:	619a      	str	r2, [r3, #24]
      break;
 801873a:	e0af      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	68ba      	ldr	r2, [r7, #8]
 8018742:	0011      	movs	r1, r2
 8018744:	0018      	movs	r0, r3
 8018746:	f000 fa93 	bl	8018c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	699a      	ldr	r2, [r3, #24]
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2180      	movs	r1, #128	@ 0x80
 8018756:	0109      	lsls	r1, r1, #4
 8018758:	430a      	orrs	r2, r1
 801875a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	699a      	ldr	r2, [r3, #24]
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	4954      	ldr	r1, [pc, #336]	@ (80188b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8018768:	400a      	ands	r2, r1
 801876a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	6999      	ldr	r1, [r3, #24]
 8018772:	68bb      	ldr	r3, [r7, #8]
 8018774:	691b      	ldr	r3, [r3, #16]
 8018776:	021a      	lsls	r2, r3, #8
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	430a      	orrs	r2, r1
 801877e:	619a      	str	r2, [r3, #24]
      break;
 8018780:	e08c      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	68ba      	ldr	r2, [r7, #8]
 8018788:	0011      	movs	r1, r2
 801878a:	0018      	movs	r0, r3
 801878c:	f000 faee 	bl	8018d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	69da      	ldr	r2, [r3, #28]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2108      	movs	r1, #8
 801879c:	430a      	orrs	r2, r1
 801879e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	69da      	ldr	r2, [r3, #28]
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	2104      	movs	r1, #4
 80187ac:	438a      	bics	r2, r1
 80187ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	69d9      	ldr	r1, [r3, #28]
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	691a      	ldr	r2, [r3, #16]
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	430a      	orrs	r2, r1
 80187c0:	61da      	str	r2, [r3, #28]
      break;
 80187c2:	e06b      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	68ba      	ldr	r2, [r7, #8]
 80187ca:	0011      	movs	r1, r2
 80187cc:	0018      	movs	r0, r3
 80187ce:	f000 fb4f 	bl	8018e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	69da      	ldr	r2, [r3, #28]
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	2180      	movs	r1, #128	@ 0x80
 80187de:	0109      	lsls	r1, r1, #4
 80187e0:	430a      	orrs	r2, r1
 80187e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	69da      	ldr	r2, [r3, #28]
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	4932      	ldr	r1, [pc, #200]	@ (80188b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80187f0:	400a      	ands	r2, r1
 80187f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	69d9      	ldr	r1, [r3, #28]
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	691b      	ldr	r3, [r3, #16]
 80187fe:	021a      	lsls	r2, r3, #8
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	430a      	orrs	r2, r1
 8018806:	61da      	str	r2, [r3, #28]
      break;
 8018808:	e048      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	68ba      	ldr	r2, [r7, #8]
 8018810:	0011      	movs	r1, r2
 8018812:	0018      	movs	r0, r3
 8018814:	f000 fb90 	bl	8018f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	2108      	movs	r1, #8
 8018824:	430a      	orrs	r2, r1
 8018826:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	2104      	movs	r1, #4
 8018834:	438a      	bics	r2, r1
 8018836:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	691a      	ldr	r2, [r3, #16]
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	430a      	orrs	r2, r1
 8018848:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801884a:	e027      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	68ba      	ldr	r2, [r7, #8]
 8018852:	0011      	movs	r1, r2
 8018854:	0018      	movs	r0, r3
 8018856:	f000 fbc9 	bl	8018fec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	2180      	movs	r1, #128	@ 0x80
 8018866:	0109      	lsls	r1, r1, #4
 8018868:	430a      	orrs	r2, r1
 801886a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	4910      	ldr	r1, [pc, #64]	@ (80188b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8018878:	400a      	ands	r2, r1
 801887a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	691b      	ldr	r3, [r3, #16]
 8018886:	021a      	lsls	r2, r3, #8
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	430a      	orrs	r2, r1
 801888e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8018890:	e004      	b.n	801889c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8018892:	2317      	movs	r3, #23
 8018894:	18fb      	adds	r3, r7, r3
 8018896:	2201      	movs	r2, #1
 8018898:	701a      	strb	r2, [r3, #0]
      break;
 801889a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	223c      	movs	r2, #60	@ 0x3c
 80188a0:	2100      	movs	r1, #0
 80188a2:	5499      	strb	r1, [r3, r2]

  return status;
 80188a4:	2317      	movs	r3, #23
 80188a6:	18fb      	adds	r3, r7, r3
 80188a8:	781b      	ldrb	r3, [r3, #0]
}
 80188aa:	0018      	movs	r0, r3
 80188ac:	46bd      	mov	sp, r7
 80188ae:	b006      	add	sp, #24
 80188b0:	bd80      	pop	{r7, pc}
 80188b2:	46c0      	nop			@ (mov r8, r8)
 80188b4:	0801b550 	.word	0x0801b550
 80188b8:	fffffbff 	.word	0xfffffbff

080188bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b084      	sub	sp, #16
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80188c6:	230f      	movs	r3, #15
 80188c8:	18fb      	adds	r3, r7, r3
 80188ca:	2200      	movs	r2, #0
 80188cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	223c      	movs	r2, #60	@ 0x3c
 80188d2:	5c9b      	ldrb	r3, [r3, r2]
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d101      	bne.n	80188dc <HAL_TIM_ConfigClockSource+0x20>
 80188d8:	2302      	movs	r3, #2
 80188da:	e0c0      	b.n	8018a5e <HAL_TIM_ConfigClockSource+0x1a2>
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	223c      	movs	r2, #60	@ 0x3c
 80188e0:	2101      	movs	r1, #1
 80188e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	223d      	movs	r2, #61	@ 0x3d
 80188e8:	2102      	movs	r1, #2
 80188ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	689b      	ldr	r3, [r3, #8]
 80188f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	4a5c      	ldr	r2, [pc, #368]	@ (8018a68 <HAL_TIM_ConfigClockSource+0x1ac>)
 80188f8:	4013      	ands	r3, r2
 80188fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	4a5b      	ldr	r2, [pc, #364]	@ (8018a6c <HAL_TIM_ConfigClockSource+0x1b0>)
 8018900:	4013      	ands	r3, r2
 8018902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	68ba      	ldr	r2, [r7, #8]
 801890a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	4a57      	ldr	r2, [pc, #348]	@ (8018a70 <HAL_TIM_ConfigClockSource+0x1b4>)
 8018912:	4293      	cmp	r3, r2
 8018914:	d100      	bne.n	8018918 <HAL_TIM_ConfigClockSource+0x5c>
 8018916:	e088      	b.n	8018a2a <HAL_TIM_ConfigClockSource+0x16e>
 8018918:	4a55      	ldr	r2, [pc, #340]	@ (8018a70 <HAL_TIM_ConfigClockSource+0x1b4>)
 801891a:	4293      	cmp	r3, r2
 801891c:	d900      	bls.n	8018920 <HAL_TIM_ConfigClockSource+0x64>
 801891e:	e08d      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 8018920:	2280      	movs	r2, #128	@ 0x80
 8018922:	0192      	lsls	r2, r2, #6
 8018924:	4293      	cmp	r3, r2
 8018926:	d03c      	beq.n	80189a2 <HAL_TIM_ConfigClockSource+0xe6>
 8018928:	2280      	movs	r2, #128	@ 0x80
 801892a:	0192      	lsls	r2, r2, #6
 801892c:	4293      	cmp	r3, r2
 801892e:	d900      	bls.n	8018932 <HAL_TIM_ConfigClockSource+0x76>
 8018930:	e084      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 8018932:	2280      	movs	r2, #128	@ 0x80
 8018934:	0152      	lsls	r2, r2, #5
 8018936:	4293      	cmp	r3, r2
 8018938:	d100      	bne.n	801893c <HAL_TIM_ConfigClockSource+0x80>
 801893a:	e084      	b.n	8018a46 <HAL_TIM_ConfigClockSource+0x18a>
 801893c:	2280      	movs	r2, #128	@ 0x80
 801893e:	0152      	lsls	r2, r2, #5
 8018940:	4293      	cmp	r3, r2
 8018942:	d900      	bls.n	8018946 <HAL_TIM_ConfigClockSource+0x8a>
 8018944:	e07a      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 8018946:	2b70      	cmp	r3, #112	@ 0x70
 8018948:	d014      	beq.n	8018974 <HAL_TIM_ConfigClockSource+0xb8>
 801894a:	d900      	bls.n	801894e <HAL_TIM_ConfigClockSource+0x92>
 801894c:	e076      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 801894e:	2b60      	cmp	r3, #96	@ 0x60
 8018950:	d04b      	beq.n	80189ea <HAL_TIM_ConfigClockSource+0x12e>
 8018952:	d900      	bls.n	8018956 <HAL_TIM_ConfigClockSource+0x9a>
 8018954:	e072      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 8018956:	2b50      	cmp	r3, #80	@ 0x50
 8018958:	d037      	beq.n	80189ca <HAL_TIM_ConfigClockSource+0x10e>
 801895a:	d900      	bls.n	801895e <HAL_TIM_ConfigClockSource+0xa2>
 801895c:	e06e      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 801895e:	2b40      	cmp	r3, #64	@ 0x40
 8018960:	d053      	beq.n	8018a0a <HAL_TIM_ConfigClockSource+0x14e>
 8018962:	d86b      	bhi.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 8018964:	2b20      	cmp	r3, #32
 8018966:	d060      	beq.n	8018a2a <HAL_TIM_ConfigClockSource+0x16e>
 8018968:	d868      	bhi.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
 801896a:	2b00      	cmp	r3, #0
 801896c:	d05d      	beq.n	8018a2a <HAL_TIM_ConfigClockSource+0x16e>
 801896e:	2b10      	cmp	r3, #16
 8018970:	d05b      	beq.n	8018a2a <HAL_TIM_ConfigClockSource+0x16e>
 8018972:	e063      	b.n	8018a3c <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8018980:	683b      	ldr	r3, [r7, #0]
 8018982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8018984:	f000 fc0c 	bl	80191a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	689b      	ldr	r3, [r3, #8]
 801898e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	2277      	movs	r2, #119	@ 0x77
 8018994:	4313      	orrs	r3, r2
 8018996:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	68ba      	ldr	r2, [r7, #8]
 801899e:	609a      	str	r2, [r3, #8]
      break;
 80189a0:	e052      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80189a6:	683b      	ldr	r3, [r7, #0]
 80189a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80189b2:	f000 fbf5 	bl	80191a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	689a      	ldr	r2, [r3, #8]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2180      	movs	r1, #128	@ 0x80
 80189c2:	01c9      	lsls	r1, r1, #7
 80189c4:	430a      	orrs	r2, r1
 80189c6:	609a      	str	r2, [r3, #8]
      break;
 80189c8:	e03e      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80189d2:	683b      	ldr	r3, [r7, #0]
 80189d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80189d6:	001a      	movs	r2, r3
 80189d8:	f000 fb66 	bl	80190a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	2150      	movs	r1, #80	@ 0x50
 80189e2:	0018      	movs	r0, r3
 80189e4:	f000 fbc0 	bl	8019168 <TIM_ITRx_SetConfig>
      break;
 80189e8:	e02e      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80189f6:	001a      	movs	r2, r3
 80189f8:	f000 fb84 	bl	8019104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2160      	movs	r1, #96	@ 0x60
 8018a02:	0018      	movs	r0, r3
 8018a04:	f000 fbb0 	bl	8019168 <TIM_ITRx_SetConfig>
      break;
 8018a08:	e01e      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8018a0e:	683b      	ldr	r3, [r7, #0]
 8018a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8018a16:	001a      	movs	r2, r3
 8018a18:	f000 fb46 	bl	80190a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2140      	movs	r1, #64	@ 0x40
 8018a22:	0018      	movs	r0, r3
 8018a24:	f000 fba0 	bl	8019168 <TIM_ITRx_SetConfig>
      break;
 8018a28:	e00e      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681a      	ldr	r2, [r3, #0]
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	0019      	movs	r1, r3
 8018a34:	0010      	movs	r0, r2
 8018a36:	f000 fb97 	bl	8019168 <TIM_ITRx_SetConfig>
      break;
 8018a3a:	e005      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 8018a3c:	230f      	movs	r3, #15
 8018a3e:	18fb      	adds	r3, r7, r3
 8018a40:	2201      	movs	r2, #1
 8018a42:	701a      	strb	r2, [r3, #0]
      break;
 8018a44:	e000      	b.n	8018a48 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8018a46:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	223d      	movs	r2, #61	@ 0x3d
 8018a4c:	2101      	movs	r1, #1
 8018a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	223c      	movs	r2, #60	@ 0x3c
 8018a54:	2100      	movs	r1, #0
 8018a56:	5499      	strb	r1, [r3, r2]

  return status;
 8018a58:	230f      	movs	r3, #15
 8018a5a:	18fb      	adds	r3, r7, r3
 8018a5c:	781b      	ldrb	r3, [r3, #0]
}
 8018a5e:	0018      	movs	r0, r3
 8018a60:	46bd      	mov	sp, r7
 8018a62:	b004      	add	sp, #16
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	46c0      	nop			@ (mov r8, r8)
 8018a68:	ffceff88 	.word	0xffceff88
 8018a6c:	ffff00ff 	.word	0xffff00ff
 8018a70:	00100030 	.word	0x00100030

08018a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	4a35      	ldr	r2, [pc, #212]	@ (8018b5c <TIM_Base_SetConfig+0xe8>)
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	d008      	beq.n	8018a9e <TIM_Base_SetConfig+0x2a>
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	2380      	movs	r3, #128	@ 0x80
 8018a90:	05db      	lsls	r3, r3, #23
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d003      	beq.n	8018a9e <TIM_Base_SetConfig+0x2a>
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	4a31      	ldr	r2, [pc, #196]	@ (8018b60 <TIM_Base_SetConfig+0xec>)
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d108      	bne.n	8018ab0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	2270      	movs	r2, #112	@ 0x70
 8018aa2:	4393      	bics	r3, r2
 8018aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	68fa      	ldr	r2, [r7, #12]
 8018aac:	4313      	orrs	r3, r2
 8018aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8018b5c <TIM_Base_SetConfig+0xe8>)
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	d010      	beq.n	8018ada <TIM_Base_SetConfig+0x66>
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	2380      	movs	r3, #128	@ 0x80
 8018abc:	05db      	lsls	r3, r3, #23
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d00b      	beq.n	8018ada <TIM_Base_SetConfig+0x66>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	4a26      	ldr	r2, [pc, #152]	@ (8018b60 <TIM_Base_SetConfig+0xec>)
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	d007      	beq.n	8018ada <TIM_Base_SetConfig+0x66>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	4a25      	ldr	r2, [pc, #148]	@ (8018b64 <TIM_Base_SetConfig+0xf0>)
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d003      	beq.n	8018ada <TIM_Base_SetConfig+0x66>
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	4a24      	ldr	r2, [pc, #144]	@ (8018b68 <TIM_Base_SetConfig+0xf4>)
 8018ad6:	4293      	cmp	r3, r2
 8018ad8:	d108      	bne.n	8018aec <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	4a23      	ldr	r2, [pc, #140]	@ (8018b6c <TIM_Base_SetConfig+0xf8>)
 8018ade:	4013      	ands	r3, r2
 8018ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	68fa      	ldr	r2, [r7, #12]
 8018ae8:	4313      	orrs	r3, r2
 8018aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	2280      	movs	r2, #128	@ 0x80
 8018af0:	4393      	bics	r3, r2
 8018af2:	001a      	movs	r2, r3
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	695b      	ldr	r3, [r3, #20]
 8018af8:	4313      	orrs	r3, r2
 8018afa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	68fa      	ldr	r2, [r7, #12]
 8018b00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	689a      	ldr	r2, [r3, #8]
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	4a11      	ldr	r2, [pc, #68]	@ (8018b5c <TIM_Base_SetConfig+0xe8>)
 8018b16:	4293      	cmp	r3, r2
 8018b18:	d007      	beq.n	8018b2a <TIM_Base_SetConfig+0xb6>
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	4a11      	ldr	r2, [pc, #68]	@ (8018b64 <TIM_Base_SetConfig+0xf0>)
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	d003      	beq.n	8018b2a <TIM_Base_SetConfig+0xb6>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	4a10      	ldr	r2, [pc, #64]	@ (8018b68 <TIM_Base_SetConfig+0xf4>)
 8018b26:	4293      	cmp	r3, r2
 8018b28:	d103      	bne.n	8018b32 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018b2a:	683b      	ldr	r3, [r7, #0]
 8018b2c:	691a      	ldr	r2, [r3, #16]
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	2201      	movs	r2, #1
 8018b36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	691b      	ldr	r3, [r3, #16]
 8018b3c:	2201      	movs	r2, #1
 8018b3e:	4013      	ands	r3, r2
 8018b40:	2b01      	cmp	r3, #1
 8018b42:	d106      	bne.n	8018b52 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	691b      	ldr	r3, [r3, #16]
 8018b48:	2201      	movs	r2, #1
 8018b4a:	4393      	bics	r3, r2
 8018b4c:	001a      	movs	r2, r3
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	611a      	str	r2, [r3, #16]
  }
}
 8018b52:	46c0      	nop			@ (mov r8, r8)
 8018b54:	46bd      	mov	sp, r7
 8018b56:	b004      	add	sp, #16
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	46c0      	nop			@ (mov r8, r8)
 8018b5c:	40012c00 	.word	0x40012c00
 8018b60:	40000400 	.word	0x40000400
 8018b64:	40014000 	.word	0x40014000
 8018b68:	40014400 	.word	0x40014400
 8018b6c:	fffffcff 	.word	0xfffffcff

08018b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b086      	sub	sp, #24
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
 8018b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6a1b      	ldr	r3, [r3, #32]
 8018b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6a1b      	ldr	r3, [r3, #32]
 8018b84:	2201      	movs	r2, #1
 8018b86:	4393      	bics	r3, r2
 8018b88:	001a      	movs	r2, r3
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	699b      	ldr	r3, [r3, #24]
 8018b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8018c58 <TIM_OC1_SetConfig+0xe8>)
 8018b9e:	4013      	ands	r3, r2
 8018ba0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	2203      	movs	r2, #3
 8018ba6:	4393      	bics	r3, r2
 8018ba8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018baa:	683b      	ldr	r3, [r7, #0]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	68fa      	ldr	r2, [r7, #12]
 8018bb0:	4313      	orrs	r3, r2
 8018bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	2202      	movs	r2, #2
 8018bb8:	4393      	bics	r3, r2
 8018bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	689b      	ldr	r3, [r3, #8]
 8018bc0:	697a      	ldr	r2, [r7, #20]
 8018bc2:	4313      	orrs	r3, r2
 8018bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	4a24      	ldr	r2, [pc, #144]	@ (8018c5c <TIM_OC1_SetConfig+0xec>)
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	d007      	beq.n	8018bde <TIM_OC1_SetConfig+0x6e>
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	4a23      	ldr	r2, [pc, #140]	@ (8018c60 <TIM_OC1_SetConfig+0xf0>)
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	d003      	beq.n	8018bde <TIM_OC1_SetConfig+0x6e>
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	4a22      	ldr	r2, [pc, #136]	@ (8018c64 <TIM_OC1_SetConfig+0xf4>)
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d10c      	bne.n	8018bf8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	2208      	movs	r2, #8
 8018be2:	4393      	bics	r3, r2
 8018be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8018be6:	683b      	ldr	r3, [r7, #0]
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	697a      	ldr	r2, [r7, #20]
 8018bec:	4313      	orrs	r3, r2
 8018bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	2204      	movs	r2, #4
 8018bf4:	4393      	bics	r3, r2
 8018bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	4a18      	ldr	r2, [pc, #96]	@ (8018c5c <TIM_OC1_SetConfig+0xec>)
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	d007      	beq.n	8018c10 <TIM_OC1_SetConfig+0xa0>
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	4a17      	ldr	r2, [pc, #92]	@ (8018c60 <TIM_OC1_SetConfig+0xf0>)
 8018c04:	4293      	cmp	r3, r2
 8018c06:	d003      	beq.n	8018c10 <TIM_OC1_SetConfig+0xa0>
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	4a16      	ldr	r2, [pc, #88]	@ (8018c64 <TIM_OC1_SetConfig+0xf4>)
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d111      	bne.n	8018c34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	4a15      	ldr	r2, [pc, #84]	@ (8018c68 <TIM_OC1_SetConfig+0xf8>)
 8018c14:	4013      	ands	r3, r2
 8018c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8018c18:	693b      	ldr	r3, [r7, #16]
 8018c1a:	4a14      	ldr	r2, [pc, #80]	@ (8018c6c <TIM_OC1_SetConfig+0xfc>)
 8018c1c:	4013      	ands	r3, r2
 8018c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	695b      	ldr	r3, [r3, #20]
 8018c24:	693a      	ldr	r2, [r7, #16]
 8018c26:	4313      	orrs	r3, r2
 8018c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	699b      	ldr	r3, [r3, #24]
 8018c2e:	693a      	ldr	r2, [r7, #16]
 8018c30:	4313      	orrs	r3, r2
 8018c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	693a      	ldr	r2, [r7, #16]
 8018c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	68fa      	ldr	r2, [r7, #12]
 8018c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	685a      	ldr	r2, [r3, #4]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	697a      	ldr	r2, [r7, #20]
 8018c4c:	621a      	str	r2, [r3, #32]
}
 8018c4e:	46c0      	nop			@ (mov r8, r8)
 8018c50:	46bd      	mov	sp, r7
 8018c52:	b006      	add	sp, #24
 8018c54:	bd80      	pop	{r7, pc}
 8018c56:	46c0      	nop			@ (mov r8, r8)
 8018c58:	fffeff8f 	.word	0xfffeff8f
 8018c5c:	40012c00 	.word	0x40012c00
 8018c60:	40014000 	.word	0x40014000
 8018c64:	40014400 	.word	0x40014400
 8018c68:	fffffeff 	.word	0xfffffeff
 8018c6c:	fffffdff 	.word	0xfffffdff

08018c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b086      	sub	sp, #24
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6a1b      	ldr	r3, [r3, #32]
 8018c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6a1b      	ldr	r3, [r3, #32]
 8018c84:	2210      	movs	r2, #16
 8018c86:	4393      	bics	r3, r2
 8018c88:	001a      	movs	r2, r3
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	685b      	ldr	r3, [r3, #4]
 8018c92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	699b      	ldr	r3, [r3, #24]
 8018c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8018d50 <TIM_OC2_SetConfig+0xe0>)
 8018c9e:	4013      	ands	r3, r2
 8018ca0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8018d54 <TIM_OC2_SetConfig+0xe4>)
 8018ca6:	4013      	ands	r3, r2
 8018ca8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	021b      	lsls	r3, r3, #8
 8018cb0:	68fa      	ldr	r2, [r7, #12]
 8018cb2:	4313      	orrs	r3, r2
 8018cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	2220      	movs	r2, #32
 8018cba:	4393      	bics	r3, r2
 8018cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	689b      	ldr	r3, [r3, #8]
 8018cc2:	011b      	lsls	r3, r3, #4
 8018cc4:	697a      	ldr	r2, [r7, #20]
 8018cc6:	4313      	orrs	r3, r2
 8018cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	4a22      	ldr	r2, [pc, #136]	@ (8018d58 <TIM_OC2_SetConfig+0xe8>)
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	d10d      	bne.n	8018cee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8018cd2:	697b      	ldr	r3, [r7, #20]
 8018cd4:	2280      	movs	r2, #128	@ 0x80
 8018cd6:	4393      	bics	r3, r2
 8018cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	011b      	lsls	r3, r3, #4
 8018ce0:	697a      	ldr	r2, [r7, #20]
 8018ce2:	4313      	orrs	r3, r2
 8018ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	2240      	movs	r2, #64	@ 0x40
 8018cea:	4393      	bics	r3, r2
 8018cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	4a19      	ldr	r2, [pc, #100]	@ (8018d58 <TIM_OC2_SetConfig+0xe8>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d007      	beq.n	8018d06 <TIM_OC2_SetConfig+0x96>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4a18      	ldr	r2, [pc, #96]	@ (8018d5c <TIM_OC2_SetConfig+0xec>)
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d003      	beq.n	8018d06 <TIM_OC2_SetConfig+0x96>
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	4a17      	ldr	r2, [pc, #92]	@ (8018d60 <TIM_OC2_SetConfig+0xf0>)
 8018d02:	4293      	cmp	r3, r2
 8018d04:	d113      	bne.n	8018d2e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8018d06:	693b      	ldr	r3, [r7, #16]
 8018d08:	4a16      	ldr	r2, [pc, #88]	@ (8018d64 <TIM_OC2_SetConfig+0xf4>)
 8018d0a:	4013      	ands	r3, r2
 8018d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	4a15      	ldr	r2, [pc, #84]	@ (8018d68 <TIM_OC2_SetConfig+0xf8>)
 8018d12:	4013      	ands	r3, r2
 8018d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	695b      	ldr	r3, [r3, #20]
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	693a      	ldr	r2, [r7, #16]
 8018d1e:	4313      	orrs	r3, r2
 8018d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	699b      	ldr	r3, [r3, #24]
 8018d26:	009b      	lsls	r3, r3, #2
 8018d28:	693a      	ldr	r2, [r7, #16]
 8018d2a:	4313      	orrs	r3, r2
 8018d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	693a      	ldr	r2, [r7, #16]
 8018d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	68fa      	ldr	r2, [r7, #12]
 8018d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	685a      	ldr	r2, [r3, #4]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	697a      	ldr	r2, [r7, #20]
 8018d46:	621a      	str	r2, [r3, #32]
}
 8018d48:	46c0      	nop			@ (mov r8, r8)
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	b006      	add	sp, #24
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	feff8fff 	.word	0xfeff8fff
 8018d54:	fffffcff 	.word	0xfffffcff
 8018d58:	40012c00 	.word	0x40012c00
 8018d5c:	40014000 	.word	0x40014000
 8018d60:	40014400 	.word	0x40014400
 8018d64:	fffffbff 	.word	0xfffffbff
 8018d68:	fffff7ff 	.word	0xfffff7ff

08018d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b086      	sub	sp, #24
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	6a1b      	ldr	r3, [r3, #32]
 8018d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6a1b      	ldr	r3, [r3, #32]
 8018d80:	4a31      	ldr	r2, [pc, #196]	@ (8018e48 <TIM_OC3_SetConfig+0xdc>)
 8018d82:	401a      	ands	r2, r3
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	685b      	ldr	r3, [r3, #4]
 8018d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	69db      	ldr	r3, [r3, #28]
 8018d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	4a2d      	ldr	r2, [pc, #180]	@ (8018e4c <TIM_OC3_SetConfig+0xe0>)
 8018d98:	4013      	ands	r3, r2
 8018d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	2203      	movs	r2, #3
 8018da0:	4393      	bics	r3, r2
 8018da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	4313      	orrs	r3, r2
 8018dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	4a27      	ldr	r2, [pc, #156]	@ (8018e50 <TIM_OC3_SetConfig+0xe4>)
 8018db2:	4013      	ands	r3, r2
 8018db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	689b      	ldr	r3, [r3, #8]
 8018dba:	021b      	lsls	r3, r3, #8
 8018dbc:	697a      	ldr	r2, [r7, #20]
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	4a23      	ldr	r2, [pc, #140]	@ (8018e54 <TIM_OC3_SetConfig+0xe8>)
 8018dc6:	4293      	cmp	r3, r2
 8018dc8:	d10d      	bne.n	8018de6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	4a22      	ldr	r2, [pc, #136]	@ (8018e58 <TIM_OC3_SetConfig+0xec>)
 8018dce:	4013      	ands	r3, r2
 8018dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	021b      	lsls	r3, r3, #8
 8018dd8:	697a      	ldr	r2, [r7, #20]
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	4a1e      	ldr	r2, [pc, #120]	@ (8018e5c <TIM_OC3_SetConfig+0xf0>)
 8018de2:	4013      	ands	r3, r2
 8018de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	4a1a      	ldr	r2, [pc, #104]	@ (8018e54 <TIM_OC3_SetConfig+0xe8>)
 8018dea:	4293      	cmp	r3, r2
 8018dec:	d007      	beq.n	8018dfe <TIM_OC3_SetConfig+0x92>
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	4a1b      	ldr	r2, [pc, #108]	@ (8018e60 <TIM_OC3_SetConfig+0xf4>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d003      	beq.n	8018dfe <TIM_OC3_SetConfig+0x92>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	4a1a      	ldr	r2, [pc, #104]	@ (8018e64 <TIM_OC3_SetConfig+0xf8>)
 8018dfa:	4293      	cmp	r3, r2
 8018dfc:	d113      	bne.n	8018e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8018dfe:	693b      	ldr	r3, [r7, #16]
 8018e00:	4a19      	ldr	r2, [pc, #100]	@ (8018e68 <TIM_OC3_SetConfig+0xfc>)
 8018e02:	4013      	ands	r3, r2
 8018e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	4a18      	ldr	r2, [pc, #96]	@ (8018e6c <TIM_OC3_SetConfig+0x100>)
 8018e0a:	4013      	ands	r3, r2
 8018e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	695b      	ldr	r3, [r3, #20]
 8018e12:	011b      	lsls	r3, r3, #4
 8018e14:	693a      	ldr	r2, [r7, #16]
 8018e16:	4313      	orrs	r3, r2
 8018e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	699b      	ldr	r3, [r3, #24]
 8018e1e:	011b      	lsls	r3, r3, #4
 8018e20:	693a      	ldr	r2, [r7, #16]
 8018e22:	4313      	orrs	r3, r2
 8018e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	693a      	ldr	r2, [r7, #16]
 8018e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	68fa      	ldr	r2, [r7, #12]
 8018e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	685a      	ldr	r2, [r3, #4]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	621a      	str	r2, [r3, #32]
}
 8018e40:	46c0      	nop			@ (mov r8, r8)
 8018e42:	46bd      	mov	sp, r7
 8018e44:	b006      	add	sp, #24
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	fffffeff 	.word	0xfffffeff
 8018e4c:	fffeff8f 	.word	0xfffeff8f
 8018e50:	fffffdff 	.word	0xfffffdff
 8018e54:	40012c00 	.word	0x40012c00
 8018e58:	fffff7ff 	.word	0xfffff7ff
 8018e5c:	fffffbff 	.word	0xfffffbff
 8018e60:	40014000 	.word	0x40014000
 8018e64:	40014400 	.word	0x40014400
 8018e68:	ffffefff 	.word	0xffffefff
 8018e6c:	ffffdfff 	.word	0xffffdfff

08018e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b086      	sub	sp, #24
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6a1b      	ldr	r3, [r3, #32]
 8018e7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6a1b      	ldr	r3, [r3, #32]
 8018e84:	4a24      	ldr	r2, [pc, #144]	@ (8018f18 <TIM_OC4_SetConfig+0xa8>)
 8018e86:	401a      	ands	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	685b      	ldr	r3, [r3, #4]
 8018e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	69db      	ldr	r3, [r3, #28]
 8018e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	4a20      	ldr	r2, [pc, #128]	@ (8018f1c <TIM_OC4_SetConfig+0xac>)
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8018f20 <TIM_OC4_SetConfig+0xb0>)
 8018ea4:	4013      	ands	r3, r2
 8018ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018ea8:	683b      	ldr	r3, [r7, #0]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	021b      	lsls	r3, r3, #8
 8018eae:	68fa      	ldr	r2, [r7, #12]
 8018eb0:	4313      	orrs	r3, r2
 8018eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8018f24 <TIM_OC4_SetConfig+0xb4>)
 8018eb8:	4013      	ands	r3, r2
 8018eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	689b      	ldr	r3, [r3, #8]
 8018ec0:	031b      	lsls	r3, r3, #12
 8018ec2:	693a      	ldr	r2, [r7, #16]
 8018ec4:	4313      	orrs	r3, r2
 8018ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	4a17      	ldr	r2, [pc, #92]	@ (8018f28 <TIM_OC4_SetConfig+0xb8>)
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d007      	beq.n	8018ee0 <TIM_OC4_SetConfig+0x70>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	4a16      	ldr	r2, [pc, #88]	@ (8018f2c <TIM_OC4_SetConfig+0xbc>)
 8018ed4:	4293      	cmp	r3, r2
 8018ed6:	d003      	beq.n	8018ee0 <TIM_OC4_SetConfig+0x70>
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	4a15      	ldr	r2, [pc, #84]	@ (8018f30 <TIM_OC4_SetConfig+0xc0>)
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d109      	bne.n	8018ef4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	4a14      	ldr	r2, [pc, #80]	@ (8018f34 <TIM_OC4_SetConfig+0xc4>)
 8018ee4:	4013      	ands	r3, r2
 8018ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	695b      	ldr	r3, [r3, #20]
 8018eec:	019b      	lsls	r3, r3, #6
 8018eee:	697a      	ldr	r2, [r7, #20]
 8018ef0:	4313      	orrs	r3, r2
 8018ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	697a      	ldr	r2, [r7, #20]
 8018ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	68fa      	ldr	r2, [r7, #12]
 8018efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	685a      	ldr	r2, [r3, #4]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	693a      	ldr	r2, [r7, #16]
 8018f0c:	621a      	str	r2, [r3, #32]
}
 8018f0e:	46c0      	nop			@ (mov r8, r8)
 8018f10:	46bd      	mov	sp, r7
 8018f12:	b006      	add	sp, #24
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	46c0      	nop			@ (mov r8, r8)
 8018f18:	ffffefff 	.word	0xffffefff
 8018f1c:	feff8fff 	.word	0xfeff8fff
 8018f20:	fffffcff 	.word	0xfffffcff
 8018f24:	ffffdfff 	.word	0xffffdfff
 8018f28:	40012c00 	.word	0x40012c00
 8018f2c:	40014000 	.word	0x40014000
 8018f30:	40014400 	.word	0x40014400
 8018f34:	ffffbfff 	.word	0xffffbfff

08018f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b086      	sub	sp, #24
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	6a1b      	ldr	r3, [r3, #32]
 8018f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	6a1b      	ldr	r3, [r3, #32]
 8018f4c:	4a21      	ldr	r2, [pc, #132]	@ (8018fd4 <TIM_OC5_SetConfig+0x9c>)
 8018f4e:	401a      	ands	r2, r3
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	4a1d      	ldr	r2, [pc, #116]	@ (8018fd8 <TIM_OC5_SetConfig+0xa0>)
 8018f64:	4013      	ands	r3, r2
 8018f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	4313      	orrs	r3, r2
 8018f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	4a19      	ldr	r2, [pc, #100]	@ (8018fdc <TIM_OC5_SetConfig+0xa4>)
 8018f76:	4013      	ands	r3, r2
 8018f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	689b      	ldr	r3, [r3, #8]
 8018f7e:	041b      	lsls	r3, r3, #16
 8018f80:	693a      	ldr	r2, [r7, #16]
 8018f82:	4313      	orrs	r3, r2
 8018f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	4a15      	ldr	r2, [pc, #84]	@ (8018fe0 <TIM_OC5_SetConfig+0xa8>)
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	d007      	beq.n	8018f9e <TIM_OC5_SetConfig+0x66>
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	4a14      	ldr	r2, [pc, #80]	@ (8018fe4 <TIM_OC5_SetConfig+0xac>)
 8018f92:	4293      	cmp	r3, r2
 8018f94:	d003      	beq.n	8018f9e <TIM_OC5_SetConfig+0x66>
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	4a13      	ldr	r2, [pc, #76]	@ (8018fe8 <TIM_OC5_SetConfig+0xb0>)
 8018f9a:	4293      	cmp	r3, r2
 8018f9c:	d109      	bne.n	8018fb2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8018fd4 <TIM_OC5_SetConfig+0x9c>)
 8018fa2:	4013      	ands	r3, r2
 8018fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	695b      	ldr	r3, [r3, #20]
 8018faa:	021b      	lsls	r3, r3, #8
 8018fac:	697a      	ldr	r2, [r7, #20]
 8018fae:	4313      	orrs	r3, r2
 8018fb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	697a      	ldr	r2, [r7, #20]
 8018fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	68fa      	ldr	r2, [r7, #12]
 8018fbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8018fbe:	683b      	ldr	r3, [r7, #0]
 8018fc0:	685a      	ldr	r2, [r3, #4]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	693a      	ldr	r2, [r7, #16]
 8018fca:	621a      	str	r2, [r3, #32]
}
 8018fcc:	46c0      	nop			@ (mov r8, r8)
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	b006      	add	sp, #24
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	fffeffff 	.word	0xfffeffff
 8018fd8:	fffeff8f 	.word	0xfffeff8f
 8018fdc:	fffdffff 	.word	0xfffdffff
 8018fe0:	40012c00 	.word	0x40012c00
 8018fe4:	40014000 	.word	0x40014000
 8018fe8:	40014400 	.word	0x40014400

08018fec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b086      	sub	sp, #24
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6a1b      	ldr	r3, [r3, #32]
 8018ffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6a1b      	ldr	r3, [r3, #32]
 8019000:	4a22      	ldr	r2, [pc, #136]	@ (801908c <TIM_OC6_SetConfig+0xa0>)
 8019002:	401a      	ands	r2, r3
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	685b      	ldr	r3, [r3, #4]
 801900c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	4a1e      	ldr	r2, [pc, #120]	@ (8019090 <TIM_OC6_SetConfig+0xa4>)
 8019018:	4013      	ands	r3, r2
 801901a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	021b      	lsls	r3, r3, #8
 8019022:	68fa      	ldr	r2, [r7, #12]
 8019024:	4313      	orrs	r3, r2
 8019026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	4a1a      	ldr	r2, [pc, #104]	@ (8019094 <TIM_OC6_SetConfig+0xa8>)
 801902c:	4013      	ands	r3, r2
 801902e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	689b      	ldr	r3, [r3, #8]
 8019034:	051b      	lsls	r3, r3, #20
 8019036:	693a      	ldr	r2, [r7, #16]
 8019038:	4313      	orrs	r3, r2
 801903a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	4a16      	ldr	r2, [pc, #88]	@ (8019098 <TIM_OC6_SetConfig+0xac>)
 8019040:	4293      	cmp	r3, r2
 8019042:	d007      	beq.n	8019054 <TIM_OC6_SetConfig+0x68>
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	4a15      	ldr	r2, [pc, #84]	@ (801909c <TIM_OC6_SetConfig+0xb0>)
 8019048:	4293      	cmp	r3, r2
 801904a:	d003      	beq.n	8019054 <TIM_OC6_SetConfig+0x68>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	4a14      	ldr	r2, [pc, #80]	@ (80190a0 <TIM_OC6_SetConfig+0xb4>)
 8019050:	4293      	cmp	r3, r2
 8019052:	d109      	bne.n	8019068 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	4a13      	ldr	r2, [pc, #76]	@ (80190a4 <TIM_OC6_SetConfig+0xb8>)
 8019058:	4013      	ands	r3, r2
 801905a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	695b      	ldr	r3, [r3, #20]
 8019060:	029b      	lsls	r3, r3, #10
 8019062:	697a      	ldr	r2, [r7, #20]
 8019064:	4313      	orrs	r3, r2
 8019066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	697a      	ldr	r2, [r7, #20]
 801906c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	68fa      	ldr	r2, [r7, #12]
 8019072:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	685a      	ldr	r2, [r3, #4]
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	693a      	ldr	r2, [r7, #16]
 8019080:	621a      	str	r2, [r3, #32]
}
 8019082:	46c0      	nop			@ (mov r8, r8)
 8019084:	46bd      	mov	sp, r7
 8019086:	b006      	add	sp, #24
 8019088:	bd80      	pop	{r7, pc}
 801908a:	46c0      	nop			@ (mov r8, r8)
 801908c:	ffefffff 	.word	0xffefffff
 8019090:	feff8fff 	.word	0xfeff8fff
 8019094:	ffdfffff 	.word	0xffdfffff
 8019098:	40012c00 	.word	0x40012c00
 801909c:	40014000 	.word	0x40014000
 80190a0:	40014400 	.word	0x40014400
 80190a4:	fffbffff 	.word	0xfffbffff

080190a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b086      	sub	sp, #24
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	60f8      	str	r0, [r7, #12]
 80190b0:	60b9      	str	r1, [r7, #8]
 80190b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	6a1b      	ldr	r3, [r3, #32]
 80190b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	6a1b      	ldr	r3, [r3, #32]
 80190be:	2201      	movs	r2, #1
 80190c0:	4393      	bics	r3, r2
 80190c2:	001a      	movs	r2, r3
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	699b      	ldr	r3, [r3, #24]
 80190cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80190ce:	693b      	ldr	r3, [r7, #16]
 80190d0:	22f0      	movs	r2, #240	@ 0xf0
 80190d2:	4393      	bics	r3, r2
 80190d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	011b      	lsls	r3, r3, #4
 80190da:	693a      	ldr	r2, [r7, #16]
 80190dc:	4313      	orrs	r3, r2
 80190de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	220a      	movs	r2, #10
 80190e4:	4393      	bics	r3, r2
 80190e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80190e8:	697a      	ldr	r2, [r7, #20]
 80190ea:	68bb      	ldr	r3, [r7, #8]
 80190ec:	4313      	orrs	r3, r2
 80190ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	693a      	ldr	r2, [r7, #16]
 80190f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	697a      	ldr	r2, [r7, #20]
 80190fa:	621a      	str	r2, [r3, #32]
}
 80190fc:	46c0      	nop			@ (mov r8, r8)
 80190fe:	46bd      	mov	sp, r7
 8019100:	b006      	add	sp, #24
 8019102:	bd80      	pop	{r7, pc}

08019104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b086      	sub	sp, #24
 8019108:	af00      	add	r7, sp, #0
 801910a:	60f8      	str	r0, [r7, #12]
 801910c:	60b9      	str	r1, [r7, #8]
 801910e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	6a1b      	ldr	r3, [r3, #32]
 8019114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	6a1b      	ldr	r3, [r3, #32]
 801911a:	2210      	movs	r2, #16
 801911c:	4393      	bics	r3, r2
 801911e:	001a      	movs	r2, r3
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	699b      	ldr	r3, [r3, #24]
 8019128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	4a0d      	ldr	r2, [pc, #52]	@ (8019164 <TIM_TI2_ConfigInputStage+0x60>)
 801912e:	4013      	ands	r3, r2
 8019130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	031b      	lsls	r3, r3, #12
 8019136:	693a      	ldr	r2, [r7, #16]
 8019138:	4313      	orrs	r3, r2
 801913a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	22a0      	movs	r2, #160	@ 0xa0
 8019140:	4393      	bics	r3, r2
 8019142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	011b      	lsls	r3, r3, #4
 8019148:	697a      	ldr	r2, [r7, #20]
 801914a:	4313      	orrs	r3, r2
 801914c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	693a      	ldr	r2, [r7, #16]
 8019152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	697a      	ldr	r2, [r7, #20]
 8019158:	621a      	str	r2, [r3, #32]
}
 801915a:	46c0      	nop			@ (mov r8, r8)
 801915c:	46bd      	mov	sp, r7
 801915e:	b006      	add	sp, #24
 8019160:	bd80      	pop	{r7, pc}
 8019162:	46c0      	nop			@ (mov r8, r8)
 8019164:	ffff0fff 	.word	0xffff0fff

08019168 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	689b      	ldr	r3, [r3, #8]
 8019176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	4a08      	ldr	r2, [pc, #32]	@ (801919c <TIM_ITRx_SetConfig+0x34>)
 801917c:	4013      	ands	r3, r2
 801917e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019180:	683a      	ldr	r2, [r7, #0]
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	4313      	orrs	r3, r2
 8019186:	2207      	movs	r2, #7
 8019188:	4313      	orrs	r3, r2
 801918a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	68fa      	ldr	r2, [r7, #12]
 8019190:	609a      	str	r2, [r3, #8]
}
 8019192:	46c0      	nop			@ (mov r8, r8)
 8019194:	46bd      	mov	sp, r7
 8019196:	b004      	add	sp, #16
 8019198:	bd80      	pop	{r7, pc}
 801919a:	46c0      	nop			@ (mov r8, r8)
 801919c:	ffcfff8f 	.word	0xffcfff8f

080191a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b086      	sub	sp, #24
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	60b9      	str	r1, [r7, #8]
 80191aa:	607a      	str	r2, [r7, #4]
 80191ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	689b      	ldr	r3, [r3, #8]
 80191b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	4a09      	ldr	r2, [pc, #36]	@ (80191dc <TIM_ETR_SetConfig+0x3c>)
 80191b8:	4013      	ands	r3, r2
 80191ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	021a      	lsls	r2, r3, #8
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	431a      	orrs	r2, r3
 80191c4:	68bb      	ldr	r3, [r7, #8]
 80191c6:	4313      	orrs	r3, r2
 80191c8:	697a      	ldr	r2, [r7, #20]
 80191ca:	4313      	orrs	r3, r2
 80191cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	697a      	ldr	r2, [r7, #20]
 80191d2:	609a      	str	r2, [r3, #8]
}
 80191d4:	46c0      	nop			@ (mov r8, r8)
 80191d6:	46bd      	mov	sp, r7
 80191d8:	b006      	add	sp, #24
 80191da:	bd80      	pop	{r7, pc}
 80191dc:	ffff00ff 	.word	0xffff00ff

080191e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b086      	sub	sp, #24
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80191ec:	68bb      	ldr	r3, [r7, #8]
 80191ee:	221f      	movs	r2, #31
 80191f0:	4013      	ands	r3, r2
 80191f2:	2201      	movs	r2, #1
 80191f4:	409a      	lsls	r2, r3
 80191f6:	0013      	movs	r3, r2
 80191f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	6a1b      	ldr	r3, [r3, #32]
 80191fe:	697a      	ldr	r2, [r7, #20]
 8019200:	43d2      	mvns	r2, r2
 8019202:	401a      	ands	r2, r3
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	6a1a      	ldr	r2, [r3, #32]
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	211f      	movs	r1, #31
 8019210:	400b      	ands	r3, r1
 8019212:	6879      	ldr	r1, [r7, #4]
 8019214:	4099      	lsls	r1, r3
 8019216:	000b      	movs	r3, r1
 8019218:	431a      	orrs	r2, r3
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	621a      	str	r2, [r3, #32]
}
 801921e:	46c0      	nop			@ (mov r8, r8)
 8019220:	46bd      	mov	sp, r7
 8019222:	b006      	add	sp, #24
 8019224:	bd80      	pop	{r7, pc}
	...

08019228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	223c      	movs	r2, #60	@ 0x3c
 8019236:	5c9b      	ldrb	r3, [r3, r2]
 8019238:	2b01      	cmp	r3, #1
 801923a:	d101      	bne.n	8019240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801923c:	2302      	movs	r3, #2
 801923e:	e055      	b.n	80192ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	223c      	movs	r2, #60	@ 0x3c
 8019244:	2101      	movs	r1, #1
 8019246:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	223d      	movs	r2, #61	@ 0x3d
 801924c:	2102      	movs	r1, #2
 801924e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	689b      	ldr	r3, [r3, #8]
 801925e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	4a23      	ldr	r2, [pc, #140]	@ (80192f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8019266:	4293      	cmp	r3, r2
 8019268:	d108      	bne.n	801927c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	4a22      	ldr	r2, [pc, #136]	@ (80192f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801926e:	4013      	ands	r3, r2
 8019270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	68fa      	ldr	r2, [r7, #12]
 8019278:	4313      	orrs	r3, r2
 801927a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	2270      	movs	r2, #112	@ 0x70
 8019280:	4393      	bics	r3, r2
 8019282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	68fa      	ldr	r2, [r7, #12]
 801928a:	4313      	orrs	r3, r2
 801928c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	68fa      	ldr	r2, [r7, #12]
 8019294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	4a16      	ldr	r2, [pc, #88]	@ (80192f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801929c:	4293      	cmp	r3, r2
 801929e:	d00f      	beq.n	80192c0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681a      	ldr	r2, [r3, #0]
 80192a4:	2380      	movs	r3, #128	@ 0x80
 80192a6:	05db      	lsls	r3, r3, #23
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d009      	beq.n	80192c0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	4a12      	ldr	r2, [pc, #72]	@ (80192fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d004      	beq.n	80192c0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4a11      	ldr	r2, [pc, #68]	@ (8019300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80192bc:	4293      	cmp	r3, r2
 80192be:	d10c      	bne.n	80192da <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80192c0:	68bb      	ldr	r3, [r7, #8]
 80192c2:	2280      	movs	r2, #128	@ 0x80
 80192c4:	4393      	bics	r3, r2
 80192c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	689b      	ldr	r3, [r3, #8]
 80192cc:	68ba      	ldr	r2, [r7, #8]
 80192ce:	4313      	orrs	r3, r2
 80192d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	68ba      	ldr	r2, [r7, #8]
 80192d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	223d      	movs	r2, #61	@ 0x3d
 80192de:	2101      	movs	r1, #1
 80192e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	223c      	movs	r2, #60	@ 0x3c
 80192e6:	2100      	movs	r1, #0
 80192e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80192ea:	2300      	movs	r3, #0
}
 80192ec:	0018      	movs	r0, r3
 80192ee:	46bd      	mov	sp, r7
 80192f0:	b004      	add	sp, #16
 80192f2:	bd80      	pop	{r7, pc}
 80192f4:	40012c00 	.word	0x40012c00
 80192f8:	ff0fffff 	.word	0xff0fffff
 80192fc:	40000400 	.word	0x40000400
 8019300:	40014000 	.word	0x40014000

08019304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d101      	bne.n	8019316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019312:	2301      	movs	r3, #1
 8019314:	e046      	b.n	80193a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2288      	movs	r2, #136	@ 0x88
 801931a:	589b      	ldr	r3, [r3, r2]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d107      	bne.n	8019330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2284      	movs	r2, #132	@ 0x84
 8019324:	2100      	movs	r1, #0
 8019326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	0018      	movs	r0, r3
 801932c:	f7f2 fca6 	bl	800bc7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2288      	movs	r2, #136	@ 0x88
 8019334:	2124      	movs	r1, #36	@ 0x24
 8019336:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	681a      	ldr	r2, [r3, #0]
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	2101      	movs	r1, #1
 8019344:	438a      	bics	r2, r1
 8019346:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801934c:	2b00      	cmp	r3, #0
 801934e:	d003      	beq.n	8019358 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	0018      	movs	r0, r3
 8019354:	f000 ff2a 	bl	801a1ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	0018      	movs	r0, r3
 801935c:	f000 fd54 	bl	8019e08 <UART_SetConfig>
 8019360:	0003      	movs	r3, r0
 8019362:	2b01      	cmp	r3, #1
 8019364:	d101      	bne.n	801936a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8019366:	2301      	movs	r3, #1
 8019368:	e01c      	b.n	80193a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	685a      	ldr	r2, [r3, #4]
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	490d      	ldr	r1, [pc, #52]	@ (80193ac <HAL_UART_Init+0xa8>)
 8019376:	400a      	ands	r2, r1
 8019378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	689a      	ldr	r2, [r3, #8]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	212a      	movs	r1, #42	@ 0x2a
 8019386:	438a      	bics	r2, r1
 8019388:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	2101      	movs	r1, #1
 8019396:	430a      	orrs	r2, r1
 8019398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	0018      	movs	r0, r3
 801939e:	f000 ffb9 	bl	801a314 <UART_CheckIdleState>
 80193a2:	0003      	movs	r3, r0
}
 80193a4:	0018      	movs	r0, r3
 80193a6:	46bd      	mov	sp, r7
 80193a8:	b002      	add	sp, #8
 80193aa:	bd80      	pop	{r7, pc}
 80193ac:	ffffb7ff 	.word	0xffffb7ff

080193b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b088      	sub	sp, #32
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	1dbb      	adds	r3, r7, #6
 80193bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	2288      	movs	r2, #136	@ 0x88
 80193c2:	589b      	ldr	r3, [r3, r2]
 80193c4:	2b20      	cmp	r3, #32
 80193c6:	d000      	beq.n	80193ca <HAL_UART_Transmit_DMA+0x1a>
 80193c8:	e079      	b.n	80194be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d003      	beq.n	80193d8 <HAL_UART_Transmit_DMA+0x28>
 80193d0:	1dbb      	adds	r3, r7, #6
 80193d2:	881b      	ldrh	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d101      	bne.n	80193dc <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80193d8:	2301      	movs	r3, #1
 80193da:	e071      	b.n	80194c0 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	689a      	ldr	r2, [r3, #8]
 80193e0:	2380      	movs	r3, #128	@ 0x80
 80193e2:	015b      	lsls	r3, r3, #5
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d109      	bne.n	80193fc <HAL_UART_Transmit_DMA+0x4c>
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	691b      	ldr	r3, [r3, #16]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d105      	bne.n	80193fc <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	2201      	movs	r2, #1
 80193f4:	4013      	ands	r3, r2
 80193f6:	d001      	beq.n	80193fc <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80193f8:	2301      	movs	r3, #1
 80193fa:	e061      	b.n	80194c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	68ba      	ldr	r2, [r7, #8]
 8019400:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	1dba      	adds	r2, r7, #6
 8019406:	2154      	movs	r1, #84	@ 0x54
 8019408:	8812      	ldrh	r2, [r2, #0]
 801940a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	1dba      	adds	r2, r7, #6
 8019410:	2156      	movs	r1, #86	@ 0x56
 8019412:	8812      	ldrh	r2, [r2, #0]
 8019414:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	2290      	movs	r2, #144	@ 0x90
 801941a:	2100      	movs	r1, #0
 801941c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	2288      	movs	r2, #136	@ 0x88
 8019422:	2121      	movs	r1, #33	@ 0x21
 8019424:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801942a:	2b00      	cmp	r3, #0
 801942c:	d028      	beq.n	8019480 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019432:	4a25      	ldr	r2, [pc, #148]	@ (80194c8 <HAL_UART_Transmit_DMA+0x118>)
 8019434:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801943a:	4a24      	ldr	r2, [pc, #144]	@ (80194cc <HAL_UART_Transmit_DMA+0x11c>)
 801943c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019442:	4a23      	ldr	r2, [pc, #140]	@ (80194d0 <HAL_UART_Transmit_DMA+0x120>)
 8019444:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801944a:	2200      	movs	r2, #0
 801944c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019456:	0019      	movs	r1, r3
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	3328      	adds	r3, #40	@ 0x28
 801945e:	001a      	movs	r2, r3
 8019460:	1dbb      	adds	r3, r7, #6
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	f7f9 fb2e 	bl	8012ac4 <HAL_DMA_Start_IT>
 8019468:	1e03      	subs	r3, r0, #0
 801946a:	d009      	beq.n	8019480 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2290      	movs	r2, #144	@ 0x90
 8019470:	2110      	movs	r1, #16
 8019472:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	2288      	movs	r2, #136	@ 0x88
 8019478:	2120      	movs	r1, #32
 801947a:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 801947c:	2301      	movs	r3, #1
 801947e:	e01f      	b.n	80194c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2240      	movs	r2, #64	@ 0x40
 8019486:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019488:	f3ef 8310 	mrs	r3, PRIMASK
 801948c:	613b      	str	r3, [r7, #16]
  return(result);
 801948e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019490:	61fb      	str	r3, [r7, #28]
 8019492:	2301      	movs	r3, #1
 8019494:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	f383 8810 	msr	PRIMASK, r3
}
 801949c:	46c0      	nop			@ (mov r8, r8)
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	689a      	ldr	r2, [r3, #8]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	2180      	movs	r1, #128	@ 0x80
 80194aa:	430a      	orrs	r2, r1
 80194ac:	609a      	str	r2, [r3, #8]
 80194ae:	69fb      	ldr	r3, [r7, #28]
 80194b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	f383 8810 	msr	PRIMASK, r3
}
 80194b8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80194ba:	2300      	movs	r3, #0
 80194bc:	e000      	b.n	80194c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80194be:	2302      	movs	r3, #2
  }
}
 80194c0:	0018      	movs	r0, r3
 80194c2:	46bd      	mov	sp, r7
 80194c4:	b008      	add	sp, #32
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	0801a7e1 	.word	0x0801a7e1
 80194cc:	0801a879 	.word	0x0801a879
 80194d0:	0801aa0b 	.word	0x0801aa0b

080194d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b088      	sub	sp, #32
 80194d8:	af00      	add	r7, sp, #0
 80194da:	60f8      	str	r0, [r7, #12]
 80194dc:	60b9      	str	r1, [r7, #8]
 80194de:	1dbb      	adds	r3, r7, #6
 80194e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	228c      	movs	r2, #140	@ 0x8c
 80194e6:	589b      	ldr	r3, [r3, r2]
 80194e8:	2b20      	cmp	r3, #32
 80194ea:	d154      	bne.n	8019596 <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d003      	beq.n	80194fa <HAL_UART_Receive_DMA+0x26>
 80194f2:	1dbb      	adds	r3, r7, #6
 80194f4:	881b      	ldrh	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d101      	bne.n	80194fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80194fa:	2301      	movs	r3, #1
 80194fc:	e04c      	b.n	8019598 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	689a      	ldr	r2, [r3, #8]
 8019502:	2380      	movs	r3, #128	@ 0x80
 8019504:	015b      	lsls	r3, r3, #5
 8019506:	429a      	cmp	r2, r3
 8019508:	d109      	bne.n	801951e <HAL_UART_Receive_DMA+0x4a>
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	691b      	ldr	r3, [r3, #16]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d105      	bne.n	801951e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	2201      	movs	r2, #1
 8019516:	4013      	ands	r3, r2
 8019518:	d001      	beq.n	801951e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801951a:	2301      	movs	r3, #1
 801951c:	e03c      	b.n	8019598 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	2200      	movs	r2, #0
 8019522:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	4a1d      	ldr	r2, [pc, #116]	@ (80195a0 <HAL_UART_Receive_DMA+0xcc>)
 801952a:	4293      	cmp	r3, r2
 801952c:	d02a      	beq.n	8019584 <HAL_UART_Receive_DMA+0xb0>
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	4a1c      	ldr	r2, [pc, #112]	@ (80195a4 <HAL_UART_Receive_DMA+0xd0>)
 8019534:	4293      	cmp	r3, r2
 8019536:	d025      	beq.n	8019584 <HAL_UART_Receive_DMA+0xb0>
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	4a1a      	ldr	r2, [pc, #104]	@ (80195a8 <HAL_UART_Receive_DMA+0xd4>)
 801953e:	4293      	cmp	r3, r2
 8019540:	d020      	beq.n	8019584 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	685a      	ldr	r2, [r3, #4]
 8019548:	2380      	movs	r3, #128	@ 0x80
 801954a:	041b      	lsls	r3, r3, #16
 801954c:	4013      	ands	r3, r2
 801954e:	d019      	beq.n	8019584 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019550:	f3ef 8310 	mrs	r3, PRIMASK
 8019554:	613b      	str	r3, [r7, #16]
  return(result);
 8019556:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019558:	61fb      	str	r3, [r7, #28]
 801955a:	2301      	movs	r3, #1
 801955c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	f383 8810 	msr	PRIMASK, r3
}
 8019564:	46c0      	nop			@ (mov r8, r8)
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	681a      	ldr	r2, [r3, #0]
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2180      	movs	r1, #128	@ 0x80
 8019572:	04c9      	lsls	r1, r1, #19
 8019574:	430a      	orrs	r2, r1
 8019576:	601a      	str	r2, [r3, #0]
 8019578:	69fb      	ldr	r3, [r7, #28]
 801957a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	f383 8810 	msr	PRIMASK, r3
}
 8019582:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019584:	1dbb      	adds	r3, r7, #6
 8019586:	881a      	ldrh	r2, [r3, #0]
 8019588:	68b9      	ldr	r1, [r7, #8]
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	0018      	movs	r0, r3
 801958e:	f000 ffdb 	bl	801a548 <UART_Start_Receive_DMA>
 8019592:	0003      	movs	r3, r0
 8019594:	e000      	b.n	8019598 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8019596:	2302      	movs	r3, #2
  }
}
 8019598:	0018      	movs	r0, r3
 801959a:	46bd      	mov	sp, r7
 801959c:	b008      	add	sp, #32
 801959e:	bd80      	pop	{r7, pc}
 80195a0:	40008000 	.word	0x40008000
 80195a4:	40008400 	.word	0x40008400
 80195a8:	40008c00 	.word	0x40008c00

080195ac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b092      	sub	sp, #72	@ 0x48
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80195b4:	f3ef 8310 	mrs	r3, PRIMASK
 80195b8:	623b      	str	r3, [r7, #32]
  return(result);
 80195ba:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80195bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80195be:	2301      	movs	r3, #1
 80195c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195c4:	f383 8810 	msr	PRIMASK, r3
}
 80195c8:	46c0      	nop			@ (mov r8, r8)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	681a      	ldr	r2, [r3, #0]
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	494d      	ldr	r1, [pc, #308]	@ (801970c <HAL_UART_AbortReceive+0x160>)
 80195d6:	400a      	ands	r2, r1
 80195d8:	601a      	str	r2, [r3, #0]
 80195da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195e0:	f383 8810 	msr	PRIMASK, r3
}
 80195e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80195e6:	f3ef 8310 	mrs	r3, PRIMASK
 80195ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80195ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80195ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80195f0:	2301      	movs	r3, #1
 80195f2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195f6:	f383 8810 	msr	PRIMASK, r3
}
 80195fa:	46c0      	nop			@ (mov r8, r8)
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	689a      	ldr	r2, [r3, #8]
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4942      	ldr	r1, [pc, #264]	@ (8019710 <HAL_UART_AbortReceive+0x164>)
 8019608:	400a      	ands	r2, r1
 801960a:	609a      	str	r2, [r3, #8]
 801960c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801960e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019612:	f383 8810 	msr	PRIMASK, r3
}
 8019616:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801961c:	2b01      	cmp	r3, #1
 801961e:	d118      	bne.n	8019652 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019620:	f3ef 8310 	mrs	r3, PRIMASK
 8019624:	617b      	str	r3, [r7, #20]
  return(result);
 8019626:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8019628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801962a:	2301      	movs	r3, #1
 801962c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801962e:	69bb      	ldr	r3, [r7, #24]
 8019630:	f383 8810 	msr	PRIMASK, r3
}
 8019634:	46c0      	nop			@ (mov r8, r8)
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	681a      	ldr	r2, [r3, #0]
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2110      	movs	r1, #16
 8019642:	438a      	bics	r2, r1
 8019644:	601a      	str	r2, [r3, #0]
 8019646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801964a:	69fb      	ldr	r3, [r7, #28]
 801964c:	f383 8810 	msr	PRIMASK, r3
}
 8019650:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	689b      	ldr	r3, [r3, #8]
 8019658:	2240      	movs	r2, #64	@ 0x40
 801965a:	4013      	ands	r3, r2
 801965c:	2b40      	cmp	r3, #64	@ 0x40
 801965e:	d139      	bne.n	80196d4 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019660:	f3ef 8310 	mrs	r3, PRIMASK
 8019664:	60bb      	str	r3, [r7, #8]
  return(result);
 8019666:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019668:	63bb      	str	r3, [r7, #56]	@ 0x38
 801966a:	2301      	movs	r3, #1
 801966c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	f383 8810 	msr	PRIMASK, r3
}
 8019674:	46c0      	nop			@ (mov r8, r8)
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	689a      	ldr	r2, [r3, #8]
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	2140      	movs	r1, #64	@ 0x40
 8019682:	438a      	bics	r2, r1
 8019684:	609a      	str	r2, [r3, #8]
 8019686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	f383 8810 	msr	PRIMASK, r3
}
 8019690:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2280      	movs	r2, #128	@ 0x80
 8019696:	589b      	ldr	r3, [r3, r2]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d01b      	beq.n	80196d4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2280      	movs	r2, #128	@ 0x80
 80196a0:	589b      	ldr	r3, [r3, r2]
 80196a2:	2200      	movs	r2, #0
 80196a4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	2280      	movs	r2, #128	@ 0x80
 80196aa:	589b      	ldr	r3, [r3, r2]
 80196ac:	0018      	movs	r0, r3
 80196ae:	f7f9 fa8f 	bl	8012bd0 <HAL_DMA_Abort>
 80196b2:	1e03      	subs	r3, r0, #0
 80196b4:	d00e      	beq.n	80196d4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2280      	movs	r2, #128	@ 0x80
 80196ba:	589b      	ldr	r3, [r3, r2]
 80196bc:	0018      	movs	r0, r3
 80196be:	f7f9 fc1f 	bl	8012f00 <HAL_DMA_GetError>
 80196c2:	0003      	movs	r3, r0
 80196c4:	2b20      	cmp	r3, #32
 80196c6:	d105      	bne.n	80196d4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2290      	movs	r2, #144	@ 0x90
 80196cc:	2110      	movs	r1, #16
 80196ce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80196d0:	2303      	movs	r3, #3
 80196d2:	e017      	b.n	8019704 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	225e      	movs	r2, #94	@ 0x5e
 80196d8:	2100      	movs	r1, #0
 80196da:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	220f      	movs	r2, #15
 80196e2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	699a      	ldr	r2, [r3, #24]
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	2108      	movs	r1, #8
 80196f0:	430a      	orrs	r2, r1
 80196f2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	228c      	movs	r2, #140	@ 0x8c
 80196f8:	2120      	movs	r1, #32
 80196fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2200      	movs	r2, #0
 8019700:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8019702:	2300      	movs	r3, #0
}
 8019704:	0018      	movs	r0, r3
 8019706:	46bd      	mov	sp, r7
 8019708:	b012      	add	sp, #72	@ 0x48
 801970a:	bd80      	pop	{r7, pc}
 801970c:	fffffedf 	.word	0xfffffedf
 8019710:	effffffe 	.word	0xeffffffe

08019714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019714:	b5b0      	push	{r4, r5, r7, lr}
 8019716:	b0aa      	sub	sp, #168	@ 0xa8
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	69db      	ldr	r3, [r3, #28]
 8019722:	22a4      	movs	r2, #164	@ 0xa4
 8019724:	18b9      	adds	r1, r7, r2
 8019726:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	20a0      	movs	r0, #160	@ 0xa0
 8019730:	1839      	adds	r1, r7, r0
 8019732:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	689b      	ldr	r3, [r3, #8]
 801973a:	249c      	movs	r4, #156	@ 0x9c
 801973c:	1939      	adds	r1, r7, r4
 801973e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019740:	0011      	movs	r1, r2
 8019742:	18bb      	adds	r3, r7, r2
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	4aa2      	ldr	r2, [pc, #648]	@ (80199d0 <HAL_UART_IRQHandler+0x2bc>)
 8019748:	4013      	ands	r3, r2
 801974a:	2298      	movs	r2, #152	@ 0x98
 801974c:	18bd      	adds	r5, r7, r2
 801974e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8019750:	18bb      	adds	r3, r7, r2
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d11a      	bne.n	801978e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019758:	187b      	adds	r3, r7, r1
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	2220      	movs	r2, #32
 801975e:	4013      	ands	r3, r2
 8019760:	d015      	beq.n	801978e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019762:	183b      	adds	r3, r7, r0
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2220      	movs	r2, #32
 8019768:	4013      	ands	r3, r2
 801976a:	d105      	bne.n	8019778 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801976c:	193b      	adds	r3, r7, r4
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	2380      	movs	r3, #128	@ 0x80
 8019772:	055b      	lsls	r3, r3, #21
 8019774:	4013      	ands	r3, r2
 8019776:	d00a      	beq.n	801978e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801977c:	2b00      	cmp	r3, #0
 801977e:	d100      	bne.n	8019782 <HAL_UART_IRQHandler+0x6e>
 8019780:	e2fb      	b.n	8019d7a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019786:	687a      	ldr	r2, [r7, #4]
 8019788:	0010      	movs	r0, r2
 801978a:	4798      	blx	r3
      }
      return;
 801978c:	e2f5      	b.n	8019d7a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801978e:	2398      	movs	r3, #152	@ 0x98
 8019790:	18fb      	adds	r3, r7, r3
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d100      	bne.n	801979a <HAL_UART_IRQHandler+0x86>
 8019798:	e122      	b.n	80199e0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801979a:	239c      	movs	r3, #156	@ 0x9c
 801979c:	18fb      	adds	r3, r7, r3
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a8c      	ldr	r2, [pc, #560]	@ (80199d4 <HAL_UART_IRQHandler+0x2c0>)
 80197a2:	4013      	ands	r3, r2
 80197a4:	d106      	bne.n	80197b4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80197a6:	23a0      	movs	r3, #160	@ 0xa0
 80197a8:	18fb      	adds	r3, r7, r3
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4a8a      	ldr	r2, [pc, #552]	@ (80199d8 <HAL_UART_IRQHandler+0x2c4>)
 80197ae:	4013      	ands	r3, r2
 80197b0:	d100      	bne.n	80197b4 <HAL_UART_IRQHandler+0xa0>
 80197b2:	e115      	b.n	80199e0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80197b4:	23a4      	movs	r3, #164	@ 0xa4
 80197b6:	18fb      	adds	r3, r7, r3
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	2201      	movs	r2, #1
 80197bc:	4013      	ands	r3, r2
 80197be:	d012      	beq.n	80197e6 <HAL_UART_IRQHandler+0xd2>
 80197c0:	23a0      	movs	r3, #160	@ 0xa0
 80197c2:	18fb      	adds	r3, r7, r3
 80197c4:	681a      	ldr	r2, [r3, #0]
 80197c6:	2380      	movs	r3, #128	@ 0x80
 80197c8:	005b      	lsls	r3, r3, #1
 80197ca:	4013      	ands	r3, r2
 80197cc:	d00b      	beq.n	80197e6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2201      	movs	r2, #1
 80197d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	2290      	movs	r2, #144	@ 0x90
 80197da:	589b      	ldr	r3, [r3, r2]
 80197dc:	2201      	movs	r2, #1
 80197de:	431a      	orrs	r2, r3
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	2190      	movs	r1, #144	@ 0x90
 80197e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80197e6:	23a4      	movs	r3, #164	@ 0xa4
 80197e8:	18fb      	adds	r3, r7, r3
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	2202      	movs	r2, #2
 80197ee:	4013      	ands	r3, r2
 80197f0:	d011      	beq.n	8019816 <HAL_UART_IRQHandler+0x102>
 80197f2:	239c      	movs	r3, #156	@ 0x9c
 80197f4:	18fb      	adds	r3, r7, r3
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	2201      	movs	r2, #1
 80197fa:	4013      	ands	r3, r2
 80197fc:	d00b      	beq.n	8019816 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	2202      	movs	r2, #2
 8019804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2290      	movs	r2, #144	@ 0x90
 801980a:	589b      	ldr	r3, [r3, r2]
 801980c:	2204      	movs	r2, #4
 801980e:	431a      	orrs	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2190      	movs	r1, #144	@ 0x90
 8019814:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019816:	23a4      	movs	r3, #164	@ 0xa4
 8019818:	18fb      	adds	r3, r7, r3
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	2204      	movs	r2, #4
 801981e:	4013      	ands	r3, r2
 8019820:	d011      	beq.n	8019846 <HAL_UART_IRQHandler+0x132>
 8019822:	239c      	movs	r3, #156	@ 0x9c
 8019824:	18fb      	adds	r3, r7, r3
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2201      	movs	r2, #1
 801982a:	4013      	ands	r3, r2
 801982c:	d00b      	beq.n	8019846 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	2204      	movs	r2, #4
 8019834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	2290      	movs	r2, #144	@ 0x90
 801983a:	589b      	ldr	r3, [r3, r2]
 801983c:	2202      	movs	r2, #2
 801983e:	431a      	orrs	r2, r3
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	2190      	movs	r1, #144	@ 0x90
 8019844:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019846:	23a4      	movs	r3, #164	@ 0xa4
 8019848:	18fb      	adds	r3, r7, r3
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2208      	movs	r2, #8
 801984e:	4013      	ands	r3, r2
 8019850:	d017      	beq.n	8019882 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019852:	23a0      	movs	r3, #160	@ 0xa0
 8019854:	18fb      	adds	r3, r7, r3
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	2220      	movs	r2, #32
 801985a:	4013      	ands	r3, r2
 801985c:	d105      	bne.n	801986a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801985e:	239c      	movs	r3, #156	@ 0x9c
 8019860:	18fb      	adds	r3, r7, r3
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4a5b      	ldr	r2, [pc, #364]	@ (80199d4 <HAL_UART_IRQHandler+0x2c0>)
 8019866:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019868:	d00b      	beq.n	8019882 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	2208      	movs	r2, #8
 8019870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	2290      	movs	r2, #144	@ 0x90
 8019876:	589b      	ldr	r3, [r3, r2]
 8019878:	2208      	movs	r2, #8
 801987a:	431a      	orrs	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	2190      	movs	r1, #144	@ 0x90
 8019880:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019882:	23a4      	movs	r3, #164	@ 0xa4
 8019884:	18fb      	adds	r3, r7, r3
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	2380      	movs	r3, #128	@ 0x80
 801988a:	011b      	lsls	r3, r3, #4
 801988c:	4013      	ands	r3, r2
 801988e:	d013      	beq.n	80198b8 <HAL_UART_IRQHandler+0x1a4>
 8019890:	23a0      	movs	r3, #160	@ 0xa0
 8019892:	18fb      	adds	r3, r7, r3
 8019894:	681a      	ldr	r2, [r3, #0]
 8019896:	2380      	movs	r3, #128	@ 0x80
 8019898:	04db      	lsls	r3, r3, #19
 801989a:	4013      	ands	r3, r2
 801989c:	d00c      	beq.n	80198b8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	2280      	movs	r2, #128	@ 0x80
 80198a4:	0112      	lsls	r2, r2, #4
 80198a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	2290      	movs	r2, #144	@ 0x90
 80198ac:	589b      	ldr	r3, [r3, r2]
 80198ae:	2220      	movs	r2, #32
 80198b0:	431a      	orrs	r2, r3
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2190      	movs	r1, #144	@ 0x90
 80198b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2290      	movs	r2, #144	@ 0x90
 80198bc:	589b      	ldr	r3, [r3, r2]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d100      	bne.n	80198c4 <HAL_UART_IRQHandler+0x1b0>
 80198c2:	e25c      	b.n	8019d7e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80198c4:	23a4      	movs	r3, #164	@ 0xa4
 80198c6:	18fb      	adds	r3, r7, r3
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2220      	movs	r2, #32
 80198cc:	4013      	ands	r3, r2
 80198ce:	d015      	beq.n	80198fc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80198d0:	23a0      	movs	r3, #160	@ 0xa0
 80198d2:	18fb      	adds	r3, r7, r3
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	2220      	movs	r2, #32
 80198d8:	4013      	ands	r3, r2
 80198da:	d106      	bne.n	80198ea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80198dc:	239c      	movs	r3, #156	@ 0x9c
 80198de:	18fb      	adds	r3, r7, r3
 80198e0:	681a      	ldr	r2, [r3, #0]
 80198e2:	2380      	movs	r3, #128	@ 0x80
 80198e4:	055b      	lsls	r3, r3, #21
 80198e6:	4013      	ands	r3, r2
 80198e8:	d008      	beq.n	80198fc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d004      	beq.n	80198fc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80198f6:	687a      	ldr	r2, [r7, #4]
 80198f8:	0010      	movs	r0, r2
 80198fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2290      	movs	r2, #144	@ 0x90
 8019900:	589b      	ldr	r3, [r3, r2]
 8019902:	2194      	movs	r1, #148	@ 0x94
 8019904:	187a      	adds	r2, r7, r1
 8019906:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	689b      	ldr	r3, [r3, #8]
 801990e:	2240      	movs	r2, #64	@ 0x40
 8019910:	4013      	ands	r3, r2
 8019912:	2b40      	cmp	r3, #64	@ 0x40
 8019914:	d004      	beq.n	8019920 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019916:	187b      	adds	r3, r7, r1
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2228      	movs	r2, #40	@ 0x28
 801991c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801991e:	d04c      	beq.n	80199ba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	0018      	movs	r0, r3
 8019924:	f000 fef6 	bl	801a714 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	689b      	ldr	r3, [r3, #8]
 801992e:	2240      	movs	r2, #64	@ 0x40
 8019930:	4013      	ands	r3, r2
 8019932:	2b40      	cmp	r3, #64	@ 0x40
 8019934:	d13c      	bne.n	80199b0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019936:	f3ef 8310 	mrs	r3, PRIMASK
 801993a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801993c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801993e:	2090      	movs	r0, #144	@ 0x90
 8019940:	183a      	adds	r2, r7, r0
 8019942:	6013      	str	r3, [r2, #0]
 8019944:	2301      	movs	r3, #1
 8019946:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801994a:	f383 8810 	msr	PRIMASK, r3
}
 801994e:	46c0      	nop			@ (mov r8, r8)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	689a      	ldr	r2, [r3, #8]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	2140      	movs	r1, #64	@ 0x40
 801995c:	438a      	bics	r2, r1
 801995e:	609a      	str	r2, [r3, #8]
 8019960:	183b      	adds	r3, r7, r0
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019968:	f383 8810 	msr	PRIMASK, r3
}
 801996c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2280      	movs	r2, #128	@ 0x80
 8019972:	589b      	ldr	r3, [r3, r2]
 8019974:	2b00      	cmp	r3, #0
 8019976:	d016      	beq.n	80199a6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2280      	movs	r2, #128	@ 0x80
 801997c:	589b      	ldr	r3, [r3, r2]
 801997e:	4a17      	ldr	r2, [pc, #92]	@ (80199dc <HAL_UART_IRQHandler+0x2c8>)
 8019980:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2280      	movs	r2, #128	@ 0x80
 8019986:	589b      	ldr	r3, [r3, r2]
 8019988:	0018      	movs	r0, r3
 801998a:	f7f9 f981 	bl	8012c90 <HAL_DMA_Abort_IT>
 801998e:	1e03      	subs	r3, r0, #0
 8019990:	d01c      	beq.n	80199cc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	2280      	movs	r2, #128	@ 0x80
 8019996:	589b      	ldr	r3, [r3, r2]
 8019998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801999a:	687a      	ldr	r2, [r7, #4]
 801999c:	2180      	movs	r1, #128	@ 0x80
 801999e:	5852      	ldr	r2, [r2, r1]
 80199a0:	0010      	movs	r0, r2
 80199a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80199a4:	e012      	b.n	80199cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	0018      	movs	r0, r3
 80199aa:	f000 fa19 	bl	8019de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80199ae:	e00d      	b.n	80199cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	0018      	movs	r0, r3
 80199b4:	f000 fa14 	bl	8019de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80199b8:	e008      	b.n	80199cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	0018      	movs	r0, r3
 80199be:	f000 fa0f 	bl	8019de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2290      	movs	r2, #144	@ 0x90
 80199c6:	2100      	movs	r1, #0
 80199c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80199ca:	e1d8      	b.n	8019d7e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80199cc:	46c0      	nop			@ (mov r8, r8)
    return;
 80199ce:	e1d6      	b.n	8019d7e <HAL_UART_IRQHandler+0x66a>
 80199d0:	0000080f 	.word	0x0000080f
 80199d4:	10000001 	.word	0x10000001
 80199d8:	04000120 	.word	0x04000120
 80199dc:	0801aa91 	.word	0x0801aa91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199e4:	2b01      	cmp	r3, #1
 80199e6:	d000      	beq.n	80199ea <HAL_UART_IRQHandler+0x2d6>
 80199e8:	e15d      	b.n	8019ca6 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80199ea:	23a4      	movs	r3, #164	@ 0xa4
 80199ec:	18fb      	adds	r3, r7, r3
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	2210      	movs	r2, #16
 80199f2:	4013      	ands	r3, r2
 80199f4:	d100      	bne.n	80199f8 <HAL_UART_IRQHandler+0x2e4>
 80199f6:	e156      	b.n	8019ca6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80199f8:	23a0      	movs	r3, #160	@ 0xa0
 80199fa:	18fb      	adds	r3, r7, r3
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	2210      	movs	r2, #16
 8019a00:	4013      	ands	r3, r2
 8019a02:	d100      	bne.n	8019a06 <HAL_UART_IRQHandler+0x2f2>
 8019a04:	e14f      	b.n	8019ca6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	2210      	movs	r2, #16
 8019a0c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	689b      	ldr	r3, [r3, #8]
 8019a14:	2240      	movs	r2, #64	@ 0x40
 8019a16:	4013      	ands	r3, r2
 8019a18:	2b40      	cmp	r3, #64	@ 0x40
 8019a1a:	d000      	beq.n	8019a1e <HAL_UART_IRQHandler+0x30a>
 8019a1c:	e0c3      	b.n	8019ba6 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	2280      	movs	r2, #128	@ 0x80
 8019a22:	589b      	ldr	r3, [r3, r2]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	685a      	ldr	r2, [r3, #4]
 8019a28:	217e      	movs	r1, #126	@ 0x7e
 8019a2a:	187b      	adds	r3, r7, r1
 8019a2c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8019a2e:	187b      	adds	r3, r7, r1
 8019a30:	881b      	ldrh	r3, [r3, #0]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d100      	bne.n	8019a38 <HAL_UART_IRQHandler+0x324>
 8019a36:	e097      	b.n	8019b68 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	225c      	movs	r2, #92	@ 0x5c
 8019a3c:	5a9b      	ldrh	r3, [r3, r2]
 8019a3e:	187a      	adds	r2, r7, r1
 8019a40:	8812      	ldrh	r2, [r2, #0]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d300      	bcc.n	8019a48 <HAL_UART_IRQHandler+0x334>
 8019a46:	e08f      	b.n	8019b68 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	187a      	adds	r2, r7, r1
 8019a4c:	215e      	movs	r1, #94	@ 0x5e
 8019a4e:	8812      	ldrh	r2, [r2, #0]
 8019a50:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2280      	movs	r2, #128	@ 0x80
 8019a56:	589b      	ldr	r3, [r3, r2]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	2220      	movs	r2, #32
 8019a5e:	4013      	ands	r3, r2
 8019a60:	d170      	bne.n	8019b44 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019a62:	f3ef 8310 	mrs	r3, PRIMASK
 8019a66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a72:	f383 8810 	msr	PRIMASK, r3
}
 8019a76:	46c0      	nop			@ (mov r8, r8)
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	681a      	ldr	r2, [r3, #0]
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	49c4      	ldr	r1, [pc, #784]	@ (8019d94 <HAL_UART_IRQHandler+0x680>)
 8019a84:	400a      	ands	r2, r1
 8019a86:	601a      	str	r2, [r3, #0]
 8019a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a8e:	f383 8810 	msr	PRIMASK, r3
}
 8019a92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019a94:	f3ef 8310 	mrs	r3, PRIMASK
 8019a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8019a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019aa4:	f383 8810 	msr	PRIMASK, r3
}
 8019aa8:	46c0      	nop			@ (mov r8, r8)
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	689a      	ldr	r2, [r3, #8]
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	2101      	movs	r1, #1
 8019ab6:	438a      	bics	r2, r1
 8019ab8:	609a      	str	r2, [r3, #8]
 8019aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019abc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ac0:	f383 8810 	msr	PRIMASK, r3
}
 8019ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8019aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8019acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019ace:	673b      	str	r3, [r7, #112]	@ 0x70
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ad6:	f383 8810 	msr	PRIMASK, r3
}
 8019ada:	46c0      	nop			@ (mov r8, r8)
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	689a      	ldr	r2, [r3, #8]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	2140      	movs	r1, #64	@ 0x40
 8019ae8:	438a      	bics	r2, r1
 8019aea:	609a      	str	r2, [r3, #8]
 8019aec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019aee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019af2:	f383 8810 	msr	PRIMASK, r3
}
 8019af6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	228c      	movs	r2, #140	@ 0x8c
 8019afc:	2120      	movs	r1, #32
 8019afe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2200      	movs	r2, #0
 8019b04:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019b06:	f3ef 8310 	mrs	r3, PRIMASK
 8019b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8019b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019b10:	2301      	movs	r3, #1
 8019b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b16:	f383 8810 	msr	PRIMASK, r3
}
 8019b1a:	46c0      	nop			@ (mov r8, r8)
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	681a      	ldr	r2, [r3, #0]
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2110      	movs	r1, #16
 8019b28:	438a      	bics	r2, r1
 8019b2a:	601a      	str	r2, [r3, #0]
 8019b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b32:	f383 8810 	msr	PRIMASK, r3
}
 8019b36:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2280      	movs	r2, #128	@ 0x80
 8019b3c:	589b      	ldr	r3, [r3, r2]
 8019b3e:	0018      	movs	r0, r3
 8019b40:	f7f9 f846 	bl	8012bd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2202      	movs	r2, #2
 8019b48:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	225c      	movs	r2, #92	@ 0x5c
 8019b4e:	5a9a      	ldrh	r2, [r3, r2]
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	215e      	movs	r1, #94	@ 0x5e
 8019b54:	5a5b      	ldrh	r3, [r3, r1]
 8019b56:	b29b      	uxth	r3, r3
 8019b58:	1ad3      	subs	r3, r2, r3
 8019b5a:	b29a      	uxth	r2, r3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	0011      	movs	r1, r2
 8019b60:	0018      	movs	r0, r3
 8019b62:	f000 f945 	bl	8019df0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8019b66:	e10c      	b.n	8019d82 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	225c      	movs	r2, #92	@ 0x5c
 8019b6c:	5a9b      	ldrh	r3, [r3, r2]
 8019b6e:	227e      	movs	r2, #126	@ 0x7e
 8019b70:	18ba      	adds	r2, r7, r2
 8019b72:	8812      	ldrh	r2, [r2, #0]
 8019b74:	429a      	cmp	r2, r3
 8019b76:	d000      	beq.n	8019b7a <HAL_UART_IRQHandler+0x466>
 8019b78:	e103      	b.n	8019d82 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2280      	movs	r2, #128	@ 0x80
 8019b7e:	589b      	ldr	r3, [r3, r2]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2220      	movs	r2, #32
 8019b86:	4013      	ands	r3, r2
 8019b88:	2b20      	cmp	r3, #32
 8019b8a:	d000      	beq.n	8019b8e <HAL_UART_IRQHandler+0x47a>
 8019b8c:	e0f9      	b.n	8019d82 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	2202      	movs	r2, #2
 8019b92:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	225c      	movs	r2, #92	@ 0x5c
 8019b98:	5a9a      	ldrh	r2, [r3, r2]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	0011      	movs	r1, r2
 8019b9e:	0018      	movs	r0, r3
 8019ba0:	f000 f926 	bl	8019df0 <HAL_UARTEx_RxEventCallback>
      return;
 8019ba4:	e0ed      	b.n	8019d82 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	225c      	movs	r2, #92	@ 0x5c
 8019baa:	5a99      	ldrh	r1, [r3, r2]
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	225e      	movs	r2, #94	@ 0x5e
 8019bb0:	5a9b      	ldrh	r3, [r3, r2]
 8019bb2:	b29a      	uxth	r2, r3
 8019bb4:	208e      	movs	r0, #142	@ 0x8e
 8019bb6:	183b      	adds	r3, r7, r0
 8019bb8:	1a8a      	subs	r2, r1, r2
 8019bba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	225e      	movs	r2, #94	@ 0x5e
 8019bc0:	5a9b      	ldrh	r3, [r3, r2]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d100      	bne.n	8019bca <HAL_UART_IRQHandler+0x4b6>
 8019bc8:	e0dd      	b.n	8019d86 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8019bca:	183b      	adds	r3, r7, r0
 8019bcc:	881b      	ldrh	r3, [r3, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d100      	bne.n	8019bd4 <HAL_UART_IRQHandler+0x4c0>
 8019bd2:	e0d8      	b.n	8019d86 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8019bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019bda:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019bdc:	2488      	movs	r4, #136	@ 0x88
 8019bde:	193a      	adds	r2, r7, r4
 8019be0:	6013      	str	r3, [r2, #0]
 8019be2:	2301      	movs	r3, #1
 8019be4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019be6:	693b      	ldr	r3, [r7, #16]
 8019be8:	f383 8810 	msr	PRIMASK, r3
}
 8019bec:	46c0      	nop			@ (mov r8, r8)
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	4967      	ldr	r1, [pc, #412]	@ (8019d98 <HAL_UART_IRQHandler+0x684>)
 8019bfa:	400a      	ands	r2, r1
 8019bfc:	601a      	str	r2, [r3, #0]
 8019bfe:	193b      	adds	r3, r7, r4
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c04:	697b      	ldr	r3, [r7, #20]
 8019c06:	f383 8810 	msr	PRIMASK, r3
}
 8019c0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8019c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8019c12:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019c14:	2484      	movs	r4, #132	@ 0x84
 8019c16:	193a      	adds	r2, r7, r4
 8019c18:	6013      	str	r3, [r2, #0]
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c1e:	69fb      	ldr	r3, [r7, #28]
 8019c20:	f383 8810 	msr	PRIMASK, r3
}
 8019c24:	46c0      	nop			@ (mov r8, r8)
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	689a      	ldr	r2, [r3, #8]
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	495a      	ldr	r1, [pc, #360]	@ (8019d9c <HAL_UART_IRQHandler+0x688>)
 8019c32:	400a      	ands	r2, r1
 8019c34:	609a      	str	r2, [r3, #8]
 8019c36:	193b      	adds	r3, r7, r4
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c3c:	6a3b      	ldr	r3, [r7, #32]
 8019c3e:	f383 8810 	msr	PRIMASK, r3
}
 8019c42:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	228c      	movs	r2, #140	@ 0x8c
 8019c48:	2120      	movs	r1, #32
 8019c4a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	2200      	movs	r2, #0
 8019c50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2200      	movs	r2, #0
 8019c56:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019c58:	f3ef 8310 	mrs	r3, PRIMASK
 8019c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019c60:	2480      	movs	r4, #128	@ 0x80
 8019c62:	193a      	adds	r2, r7, r4
 8019c64:	6013      	str	r3, [r2, #0]
 8019c66:	2301      	movs	r3, #1
 8019c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c6c:	f383 8810 	msr	PRIMASK, r3
}
 8019c70:	46c0      	nop			@ (mov r8, r8)
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	2110      	movs	r1, #16
 8019c7e:	438a      	bics	r2, r1
 8019c80:	601a      	str	r2, [r3, #0]
 8019c82:	193b      	adds	r3, r7, r4
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c8a:	f383 8810 	msr	PRIMASK, r3
}
 8019c8e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2202      	movs	r2, #2
 8019c94:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8019c96:	183b      	adds	r3, r7, r0
 8019c98:	881a      	ldrh	r2, [r3, #0]
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	0011      	movs	r1, r2
 8019c9e:	0018      	movs	r0, r3
 8019ca0:	f000 f8a6 	bl	8019df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8019ca4:	e06f      	b.n	8019d86 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8019ca6:	23a4      	movs	r3, #164	@ 0xa4
 8019ca8:	18fb      	adds	r3, r7, r3
 8019caa:	681a      	ldr	r2, [r3, #0]
 8019cac:	2380      	movs	r3, #128	@ 0x80
 8019cae:	035b      	lsls	r3, r3, #13
 8019cb0:	4013      	ands	r3, r2
 8019cb2:	d010      	beq.n	8019cd6 <HAL_UART_IRQHandler+0x5c2>
 8019cb4:	239c      	movs	r3, #156	@ 0x9c
 8019cb6:	18fb      	adds	r3, r7, r3
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	2380      	movs	r3, #128	@ 0x80
 8019cbc:	03db      	lsls	r3, r3, #15
 8019cbe:	4013      	ands	r3, r2
 8019cc0:	d009      	beq.n	8019cd6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	2280      	movs	r2, #128	@ 0x80
 8019cc8:	0352      	lsls	r2, r2, #13
 8019cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	0018      	movs	r0, r3
 8019cd0:	f000 ff1d 	bl	801ab0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019cd4:	e05a      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8019cd6:	23a4      	movs	r3, #164	@ 0xa4
 8019cd8:	18fb      	adds	r3, r7, r3
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2280      	movs	r2, #128	@ 0x80
 8019cde:	4013      	ands	r3, r2
 8019ce0:	d016      	beq.n	8019d10 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8019ce2:	23a0      	movs	r3, #160	@ 0xa0
 8019ce4:	18fb      	adds	r3, r7, r3
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	2280      	movs	r2, #128	@ 0x80
 8019cea:	4013      	ands	r3, r2
 8019cec:	d106      	bne.n	8019cfc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8019cee:	239c      	movs	r3, #156	@ 0x9c
 8019cf0:	18fb      	adds	r3, r7, r3
 8019cf2:	681a      	ldr	r2, [r3, #0]
 8019cf4:	2380      	movs	r3, #128	@ 0x80
 8019cf6:	041b      	lsls	r3, r3, #16
 8019cf8:	4013      	ands	r3, r2
 8019cfa:	d009      	beq.n	8019d10 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d042      	beq.n	8019d8a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	0010      	movs	r0, r2
 8019d0c:	4798      	blx	r3
    }
    return;
 8019d0e:	e03c      	b.n	8019d8a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8019d10:	23a4      	movs	r3, #164	@ 0xa4
 8019d12:	18fb      	adds	r3, r7, r3
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	2240      	movs	r2, #64	@ 0x40
 8019d18:	4013      	ands	r3, r2
 8019d1a:	d00a      	beq.n	8019d32 <HAL_UART_IRQHandler+0x61e>
 8019d1c:	23a0      	movs	r3, #160	@ 0xa0
 8019d1e:	18fb      	adds	r3, r7, r3
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	2240      	movs	r2, #64	@ 0x40
 8019d24:	4013      	ands	r3, r2
 8019d26:	d004      	beq.n	8019d32 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	0018      	movs	r0, r3
 8019d2c:	f000 fec3 	bl	801aab6 <UART_EndTransmit_IT>
    return;
 8019d30:	e02c      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8019d32:	23a4      	movs	r3, #164	@ 0xa4
 8019d34:	18fb      	adds	r3, r7, r3
 8019d36:	681a      	ldr	r2, [r3, #0]
 8019d38:	2380      	movs	r3, #128	@ 0x80
 8019d3a:	041b      	lsls	r3, r3, #16
 8019d3c:	4013      	ands	r3, r2
 8019d3e:	d00b      	beq.n	8019d58 <HAL_UART_IRQHandler+0x644>
 8019d40:	23a0      	movs	r3, #160	@ 0xa0
 8019d42:	18fb      	adds	r3, r7, r3
 8019d44:	681a      	ldr	r2, [r3, #0]
 8019d46:	2380      	movs	r3, #128	@ 0x80
 8019d48:	05db      	lsls	r3, r3, #23
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	d004      	beq.n	8019d58 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	0018      	movs	r0, r3
 8019d52:	f000 feec 	bl	801ab2e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019d56:	e019      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8019d58:	23a4      	movs	r3, #164	@ 0xa4
 8019d5a:	18fb      	adds	r3, r7, r3
 8019d5c:	681a      	ldr	r2, [r3, #0]
 8019d5e:	2380      	movs	r3, #128	@ 0x80
 8019d60:	045b      	lsls	r3, r3, #17
 8019d62:	4013      	ands	r3, r2
 8019d64:	d012      	beq.n	8019d8c <HAL_UART_IRQHandler+0x678>
 8019d66:	23a0      	movs	r3, #160	@ 0xa0
 8019d68:	18fb      	adds	r3, r7, r3
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	da0d      	bge.n	8019d8c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	0018      	movs	r0, r3
 8019d74:	f000 fed3 	bl	801ab1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019d78:	e008      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
      return;
 8019d7a:	46c0      	nop			@ (mov r8, r8)
 8019d7c:	e006      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
    return;
 8019d7e:	46c0      	nop			@ (mov r8, r8)
 8019d80:	e004      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
      return;
 8019d82:	46c0      	nop			@ (mov r8, r8)
 8019d84:	e002      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
      return;
 8019d86:	46c0      	nop			@ (mov r8, r8)
 8019d88:	e000      	b.n	8019d8c <HAL_UART_IRQHandler+0x678>
    return;
 8019d8a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	b02a      	add	sp, #168	@ 0xa8
 8019d90:	bdb0      	pop	{r4, r5, r7, pc}
 8019d92:	46c0      	nop			@ (mov r8, r8)
 8019d94:	fffffeff 	.word	0xfffffeff
 8019d98:	fffffedf 	.word	0xfffffedf
 8019d9c:	effffffe 	.word	0xeffffffe

08019da0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8019da8:	46c0      	nop			@ (mov r8, r8)
 8019daa:	46bd      	mov	sp, r7
 8019dac:	b002      	add	sp, #8
 8019dae:	bd80      	pop	{r7, pc}

08019db0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8019db8:	46c0      	nop			@ (mov r8, r8)
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	b002      	add	sp, #8
 8019dbe:	bd80      	pop	{r7, pc}

08019dc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8019dc8:	46c0      	nop			@ (mov r8, r8)
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	b002      	add	sp, #8
 8019dce:	bd80      	pop	{r7, pc}

08019dd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b082      	sub	sp, #8
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8019dd8:	46c0      	nop			@ (mov r8, r8)
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	b002      	add	sp, #8
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8019de8:	46c0      	nop			@ (mov r8, r8)
 8019dea:	46bd      	mov	sp, r7
 8019dec:	b002      	add	sp, #8
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b082      	sub	sp, #8
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	000a      	movs	r2, r1
 8019dfa:	1cbb      	adds	r3, r7, #2
 8019dfc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8019dfe:	46c0      	nop			@ (mov r8, r8)
 8019e00:	46bd      	mov	sp, r7
 8019e02:	b002      	add	sp, #8
 8019e04:	bd80      	pop	{r7, pc}
	...

08019e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019e08:	b5b0      	push	{r4, r5, r7, lr}
 8019e0a:	b092      	sub	sp, #72	@ 0x48
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8019e10:	231f      	movs	r3, #31
 8019e12:	2220      	movs	r2, #32
 8019e14:	189b      	adds	r3, r3, r2
 8019e16:	19db      	adds	r3, r3, r7
 8019e18:	2200      	movs	r2, #0
 8019e1a:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8019e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	4ac8      	ldr	r2, [pc, #800]	@ (801a144 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e24:	689a      	ldr	r2, [r3, #8]
 8019e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e28:	691b      	ldr	r3, [r3, #16]
 8019e2a:	431a      	orrs	r2, r3
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e2e:	695b      	ldr	r3, [r3, #20]
 8019e30:	431a      	orrs	r2, r3
 8019e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e34:	69db      	ldr	r3, [r3, #28]
 8019e36:	4313      	orrs	r3, r2
 8019e38:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	4ac1      	ldr	r2, [pc, #772]	@ (801a148 <UART_SetConfig+0x340>)
 8019e42:	4013      	ands	r3, r2
 8019e44:	0019      	movs	r1, r3
 8019e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e48:	681a      	ldr	r2, [r3, #0]
 8019e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e4c:	430b      	orrs	r3, r1
 8019e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	4abd      	ldr	r2, [pc, #756]	@ (801a14c <UART_SetConfig+0x344>)
 8019e58:	4013      	ands	r3, r2
 8019e5a:	0018      	movs	r0, r3
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e5e:	68d9      	ldr	r1, [r3, #12]
 8019e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e62:	681a      	ldr	r2, [r3, #0]
 8019e64:	0003      	movs	r3, r0
 8019e66:	430b      	orrs	r3, r1
 8019e68:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6c:	699b      	ldr	r3, [r3, #24]
 8019e6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	4ab3      	ldr	r2, [pc, #716]	@ (801a144 <UART_SetConfig+0x33c>)
 8019e76:	4293      	cmp	r3, r2
 8019e78:	d00e      	beq.n	8019e98 <UART_SetConfig+0x90>
 8019e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4ab4      	ldr	r2, [pc, #720]	@ (801a150 <UART_SetConfig+0x348>)
 8019e80:	4293      	cmp	r3, r2
 8019e82:	d009      	beq.n	8019e98 <UART_SetConfig+0x90>
 8019e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	4ab2      	ldr	r2, [pc, #712]	@ (801a154 <UART_SetConfig+0x34c>)
 8019e8a:	4293      	cmp	r3, r2
 8019e8c:	d004      	beq.n	8019e98 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e90:	6a1b      	ldr	r3, [r3, #32]
 8019e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e94:	4313      	orrs	r3, r2
 8019e96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	689b      	ldr	r3, [r3, #8]
 8019e9e:	4aae      	ldr	r2, [pc, #696]	@ (801a158 <UART_SetConfig+0x350>)
 8019ea0:	4013      	ands	r3, r2
 8019ea2:	0019      	movs	r1, r3
 8019ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019eaa:	430b      	orrs	r3, r1
 8019eac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019eb4:	220f      	movs	r2, #15
 8019eb6:	4393      	bics	r3, r2
 8019eb8:	0018      	movs	r0, r3
 8019eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ebc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8019ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ec0:	681a      	ldr	r2, [r3, #0]
 8019ec2:	0003      	movs	r3, r0
 8019ec4:	430b      	orrs	r3, r1
 8019ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	4aa3      	ldr	r2, [pc, #652]	@ (801a15c <UART_SetConfig+0x354>)
 8019ece:	4293      	cmp	r3, r2
 8019ed0:	d102      	bne.n	8019ed8 <UART_SetConfig+0xd0>
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ed6:	e033      	b.n	8019f40 <UART_SetConfig+0x138>
 8019ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	4aa0      	ldr	r2, [pc, #640]	@ (801a160 <UART_SetConfig+0x358>)
 8019ede:	4293      	cmp	r3, r2
 8019ee0:	d102      	bne.n	8019ee8 <UART_SetConfig+0xe0>
 8019ee2:	2302      	movs	r3, #2
 8019ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ee6:	e02b      	b.n	8019f40 <UART_SetConfig+0x138>
 8019ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	4a9d      	ldr	r2, [pc, #628]	@ (801a164 <UART_SetConfig+0x35c>)
 8019eee:	4293      	cmp	r3, r2
 8019ef0:	d103      	bne.n	8019efa <UART_SetConfig+0xf2>
 8019ef2:	2380      	movs	r3, #128	@ 0x80
 8019ef4:	025b      	lsls	r3, r3, #9
 8019ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ef8:	e022      	b.n	8019f40 <UART_SetConfig+0x138>
 8019efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	4a9a      	ldr	r2, [pc, #616]	@ (801a168 <UART_SetConfig+0x360>)
 8019f00:	4293      	cmp	r3, r2
 8019f02:	d103      	bne.n	8019f0c <UART_SetConfig+0x104>
 8019f04:	2380      	movs	r3, #128	@ 0x80
 8019f06:	029b      	lsls	r3, r3, #10
 8019f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f0a:	e019      	b.n	8019f40 <UART_SetConfig+0x138>
 8019f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4a8c      	ldr	r2, [pc, #560]	@ (801a144 <UART_SetConfig+0x33c>)
 8019f12:	4293      	cmp	r3, r2
 8019f14:	d102      	bne.n	8019f1c <UART_SetConfig+0x114>
 8019f16:	2310      	movs	r3, #16
 8019f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f1a:	e011      	b.n	8019f40 <UART_SetConfig+0x138>
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	4a8b      	ldr	r2, [pc, #556]	@ (801a150 <UART_SetConfig+0x348>)
 8019f22:	4293      	cmp	r3, r2
 8019f24:	d102      	bne.n	8019f2c <UART_SetConfig+0x124>
 8019f26:	2308      	movs	r3, #8
 8019f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f2a:	e009      	b.n	8019f40 <UART_SetConfig+0x138>
 8019f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	4a88      	ldr	r2, [pc, #544]	@ (801a154 <UART_SetConfig+0x34c>)
 8019f32:	4293      	cmp	r3, r2
 8019f34:	d102      	bne.n	8019f3c <UART_SetConfig+0x134>
 8019f36:	2304      	movs	r3, #4
 8019f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f3a:	e001      	b.n	8019f40 <UART_SetConfig+0x138>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	4a7f      	ldr	r2, [pc, #508]	@ (801a144 <UART_SetConfig+0x33c>)
 8019f46:	4293      	cmp	r3, r2
 8019f48:	d00a      	beq.n	8019f60 <UART_SetConfig+0x158>
 8019f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	4a80      	ldr	r2, [pc, #512]	@ (801a150 <UART_SetConfig+0x348>)
 8019f50:	4293      	cmp	r3, r2
 8019f52:	d005      	beq.n	8019f60 <UART_SetConfig+0x158>
 8019f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	4a7e      	ldr	r2, [pc, #504]	@ (801a154 <UART_SetConfig+0x34c>)
 8019f5a:	4293      	cmp	r3, r2
 8019f5c:	d000      	beq.n	8019f60 <UART_SetConfig+0x158>
 8019f5e:	e06f      	b.n	801a040 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f62:	0018      	movs	r0, r3
 8019f64:	f7fc ff3c 	bl	8016de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8019f68:	0003      	movs	r3, r0
 8019f6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8019f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d100      	bne.n	8019f74 <UART_SetConfig+0x16c>
 8019f72:	e103      	b.n	801a17c <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019f78:	4b7c      	ldr	r3, [pc, #496]	@ (801a16c <UART_SetConfig+0x364>)
 8019f7a:	0052      	lsls	r2, r2, #1
 8019f7c:	5ad3      	ldrh	r3, [r2, r3]
 8019f7e:	0019      	movs	r1, r3
 8019f80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019f82:	f7e6 f8c9 	bl	8000118 <__udivsi3>
 8019f86:	0003      	movs	r3, r0
 8019f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8c:	685a      	ldr	r2, [r3, #4]
 8019f8e:	0013      	movs	r3, r2
 8019f90:	005b      	lsls	r3, r3, #1
 8019f92:	189b      	adds	r3, r3, r2
 8019f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019f96:	429a      	cmp	r2, r3
 8019f98:	d305      	bcc.n	8019fa6 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d906      	bls.n	8019fb4 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8019fa6:	231f      	movs	r3, #31
 8019fa8:	2220      	movs	r2, #32
 8019faa:	189b      	adds	r3, r3, r2
 8019fac:	19db      	adds	r3, r3, r7
 8019fae:	2201      	movs	r2, #1
 8019fb0:	701a      	strb	r2, [r3, #0]
 8019fb2:	e044      	b.n	801a03e <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fb6:	61bb      	str	r3, [r7, #24]
 8019fb8:	2300      	movs	r3, #0
 8019fba:	61fb      	str	r3, [r7, #28]
 8019fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019fc0:	4b6a      	ldr	r3, [pc, #424]	@ (801a16c <UART_SetConfig+0x364>)
 8019fc2:	0052      	lsls	r2, r2, #1
 8019fc4:	5ad3      	ldrh	r3, [r2, r3]
 8019fc6:	613b      	str	r3, [r7, #16]
 8019fc8:	2300      	movs	r3, #0
 8019fca:	617b      	str	r3, [r7, #20]
 8019fcc:	693a      	ldr	r2, [r7, #16]
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	69b8      	ldr	r0, [r7, #24]
 8019fd2:	69f9      	ldr	r1, [r7, #28]
 8019fd4:	f7e6 fa72 	bl	80004bc <__aeabi_uldivmod>
 8019fd8:	0002      	movs	r2, r0
 8019fda:	000b      	movs	r3, r1
 8019fdc:	0e11      	lsrs	r1, r2, #24
 8019fde:	021d      	lsls	r5, r3, #8
 8019fe0:	430d      	orrs	r5, r1
 8019fe2:	0214      	lsls	r4, r2, #8
 8019fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	085b      	lsrs	r3, r3, #1
 8019fea:	60bb      	str	r3, [r7, #8]
 8019fec:	2300      	movs	r3, #0
 8019fee:	60fb      	str	r3, [r7, #12]
 8019ff0:	68b8      	ldr	r0, [r7, #8]
 8019ff2:	68f9      	ldr	r1, [r7, #12]
 8019ff4:	1900      	adds	r0, r0, r4
 8019ff6:	4169      	adcs	r1, r5
 8019ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ffa:	685b      	ldr	r3, [r3, #4]
 8019ffc:	603b      	str	r3, [r7, #0]
 8019ffe:	2300      	movs	r3, #0
 801a000:	607b      	str	r3, [r7, #4]
 801a002:	683a      	ldr	r2, [r7, #0]
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	f7e6 fa59 	bl	80004bc <__aeabi_uldivmod>
 801a00a:	0002      	movs	r2, r0
 801a00c:	000b      	movs	r3, r1
 801a00e:	0013      	movs	r3, r2
 801a010:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a012:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a014:	23c0      	movs	r3, #192	@ 0xc0
 801a016:	009b      	lsls	r3, r3, #2
 801a018:	429a      	cmp	r2, r3
 801a01a:	d309      	bcc.n	801a030 <UART_SetConfig+0x228>
 801a01c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a01e:	2380      	movs	r3, #128	@ 0x80
 801a020:	035b      	lsls	r3, r3, #13
 801a022:	429a      	cmp	r2, r3
 801a024:	d204      	bcs.n	801a030 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 801a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a02c:	60da      	str	r2, [r3, #12]
 801a02e:	e006      	b.n	801a03e <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 801a030:	231f      	movs	r3, #31
 801a032:	2220      	movs	r2, #32
 801a034:	189b      	adds	r3, r3, r2
 801a036:	19db      	adds	r3, r3, r7
 801a038:	2201      	movs	r2, #1
 801a03a:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 801a03c:	e09e      	b.n	801a17c <UART_SetConfig+0x374>
 801a03e:	e09d      	b.n	801a17c <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a042:	69da      	ldr	r2, [r3, #28]
 801a044:	2380      	movs	r3, #128	@ 0x80
 801a046:	021b      	lsls	r3, r3, #8
 801a048:	429a      	cmp	r2, r3
 801a04a:	d14c      	bne.n	801a0e6 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a04c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a04e:	0018      	movs	r0, r3
 801a050:	f7fc fec6 	bl	8016de0 <HAL_RCCEx_GetPeriphCLKFreq>
 801a054:	0003      	movs	r3, r0
 801a056:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d100      	bne.n	801a060 <UART_SetConfig+0x258>
 801a05e:	e08d      	b.n	801a17c <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a064:	4b41      	ldr	r3, [pc, #260]	@ (801a16c <UART_SetConfig+0x364>)
 801a066:	0052      	lsls	r2, r2, #1
 801a068:	5ad3      	ldrh	r3, [r2, r3]
 801a06a:	0019      	movs	r1, r3
 801a06c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a06e:	f7e6 f853 	bl	8000118 <__udivsi3>
 801a072:	0003      	movs	r3, r0
 801a074:	005a      	lsls	r2, r3, #1
 801a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a078:	685b      	ldr	r3, [r3, #4]
 801a07a:	085b      	lsrs	r3, r3, #1
 801a07c:	18d2      	adds	r2, r2, r3
 801a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a080:	685b      	ldr	r3, [r3, #4]
 801a082:	0019      	movs	r1, r3
 801a084:	0010      	movs	r0, r2
 801a086:	f7e6 f847 	bl	8000118 <__udivsi3>
 801a08a:	0003      	movs	r3, r0
 801a08c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a090:	2b0f      	cmp	r3, #15
 801a092:	d921      	bls.n	801a0d8 <UART_SetConfig+0x2d0>
 801a094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a096:	2380      	movs	r3, #128	@ 0x80
 801a098:	025b      	lsls	r3, r3, #9
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d21c      	bcs.n	801a0d8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0a0:	b29a      	uxth	r2, r3
 801a0a2:	2012      	movs	r0, #18
 801a0a4:	2420      	movs	r4, #32
 801a0a6:	1903      	adds	r3, r0, r4
 801a0a8:	19db      	adds	r3, r3, r7
 801a0aa:	210f      	movs	r1, #15
 801a0ac:	438a      	bics	r2, r1
 801a0ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0b2:	085b      	lsrs	r3, r3, #1
 801a0b4:	b29b      	uxth	r3, r3
 801a0b6:	2207      	movs	r2, #7
 801a0b8:	4013      	ands	r3, r2
 801a0ba:	b299      	uxth	r1, r3
 801a0bc:	1903      	adds	r3, r0, r4
 801a0be:	19db      	adds	r3, r3, r7
 801a0c0:	1902      	adds	r2, r0, r4
 801a0c2:	19d2      	adds	r2, r2, r7
 801a0c4:	8812      	ldrh	r2, [r2, #0]
 801a0c6:	430a      	orrs	r2, r1
 801a0c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	1902      	adds	r2, r0, r4
 801a0d0:	19d2      	adds	r2, r2, r7
 801a0d2:	8812      	ldrh	r2, [r2, #0]
 801a0d4:	60da      	str	r2, [r3, #12]
 801a0d6:	e051      	b.n	801a17c <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 801a0d8:	231f      	movs	r3, #31
 801a0da:	2220      	movs	r2, #32
 801a0dc:	189b      	adds	r3, r3, r2
 801a0de:	19db      	adds	r3, r3, r7
 801a0e0:	2201      	movs	r2, #1
 801a0e2:	701a      	strb	r2, [r3, #0]
 801a0e4:	e04a      	b.n	801a17c <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a0e8:	0018      	movs	r0, r3
 801a0ea:	f7fc fe79 	bl	8016de0 <HAL_RCCEx_GetPeriphCLKFreq>
 801a0ee:	0003      	movs	r3, r0
 801a0f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 801a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d041      	beq.n	801a17c <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a0fc:	4b1b      	ldr	r3, [pc, #108]	@ (801a16c <UART_SetConfig+0x364>)
 801a0fe:	0052      	lsls	r2, r2, #1
 801a100:	5ad3      	ldrh	r3, [r2, r3]
 801a102:	0019      	movs	r1, r3
 801a104:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a106:	f7e6 f807 	bl	8000118 <__udivsi3>
 801a10a:	0003      	movs	r3, r0
 801a10c:	001a      	movs	r2, r3
 801a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	085b      	lsrs	r3, r3, #1
 801a114:	18d2      	adds	r2, r2, r3
 801a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a118:	685b      	ldr	r3, [r3, #4]
 801a11a:	0019      	movs	r1, r3
 801a11c:	0010      	movs	r0, r2
 801a11e:	f7e5 fffb 	bl	8000118 <__udivsi3>
 801a122:	0003      	movs	r3, r0
 801a124:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a128:	2b0f      	cmp	r3, #15
 801a12a:	d921      	bls.n	801a170 <UART_SetConfig+0x368>
 801a12c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a12e:	2380      	movs	r3, #128	@ 0x80
 801a130:	025b      	lsls	r3, r3, #9
 801a132:	429a      	cmp	r2, r3
 801a134:	d21c      	bcs.n	801a170 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a138:	b29a      	uxth	r2, r3
 801a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	60da      	str	r2, [r3, #12]
 801a140:	e01c      	b.n	801a17c <UART_SetConfig+0x374>
 801a142:	46c0      	nop			@ (mov r8, r8)
 801a144:	40008000 	.word	0x40008000
 801a148:	cfff69f3 	.word	0xcfff69f3
 801a14c:	ffffcfff 	.word	0xffffcfff
 801a150:	40008400 	.word	0x40008400
 801a154:	40008c00 	.word	0x40008c00
 801a158:	11fff4ff 	.word	0x11fff4ff
 801a15c:	40013800 	.word	0x40013800
 801a160:	40004400 	.word	0x40004400
 801a164:	40004800 	.word	0x40004800
 801a168:	40004c00 	.word	0x40004c00
 801a16c:	0801b5a4 	.word	0x0801b5a4
      }
      else
      {
        ret = HAL_ERROR;
 801a170:	231f      	movs	r3, #31
 801a172:	2220      	movs	r2, #32
 801a174:	189b      	adds	r3, r3, r2
 801a176:	19db      	adds	r3, r3, r7
 801a178:	2201      	movs	r2, #1
 801a17a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a17e:	226a      	movs	r2, #106	@ 0x6a
 801a180:	2101      	movs	r1, #1
 801a182:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 801a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a186:	2268      	movs	r2, #104	@ 0x68
 801a188:	2101      	movs	r1, #1
 801a18a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a18e:	2200      	movs	r2, #0
 801a190:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a194:	2200      	movs	r2, #0
 801a196:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a198:	231f      	movs	r3, #31
 801a19a:	2220      	movs	r2, #32
 801a19c:	189b      	adds	r3, r3, r2
 801a19e:	19db      	adds	r3, r3, r7
 801a1a0:	781b      	ldrb	r3, [r3, #0]
}
 801a1a2:	0018      	movs	r0, r3
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	b012      	add	sp, #72	@ 0x48
 801a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a1aa:	46c0      	nop			@ (mov r8, r8)

0801a1ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a1b8:	2208      	movs	r2, #8
 801a1ba:	4013      	ands	r3, r2
 801a1bc:	d00b      	beq.n	801a1d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	4a4a      	ldr	r2, [pc, #296]	@ (801a2f0 <UART_AdvFeatureConfig+0x144>)
 801a1c6:	4013      	ands	r3, r2
 801a1c8:	0019      	movs	r1, r3
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	430a      	orrs	r2, r1
 801a1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a1da:	2201      	movs	r2, #1
 801a1dc:	4013      	ands	r3, r2
 801a1de:	d00b      	beq.n	801a1f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	685b      	ldr	r3, [r3, #4]
 801a1e6:	4a43      	ldr	r2, [pc, #268]	@ (801a2f4 <UART_AdvFeatureConfig+0x148>)
 801a1e8:	4013      	ands	r3, r2
 801a1ea:	0019      	movs	r1, r3
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	430a      	orrs	r2, r1
 801a1f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a1fc:	2202      	movs	r2, #2
 801a1fe:	4013      	ands	r3, r2
 801a200:	d00b      	beq.n	801a21a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	685b      	ldr	r3, [r3, #4]
 801a208:	4a3b      	ldr	r2, [pc, #236]	@ (801a2f8 <UART_AdvFeatureConfig+0x14c>)
 801a20a:	4013      	ands	r3, r2
 801a20c:	0019      	movs	r1, r3
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	430a      	orrs	r2, r1
 801a218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a21e:	2204      	movs	r2, #4
 801a220:	4013      	ands	r3, r2
 801a222:	d00b      	beq.n	801a23c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	685b      	ldr	r3, [r3, #4]
 801a22a:	4a34      	ldr	r2, [pc, #208]	@ (801a2fc <UART_AdvFeatureConfig+0x150>)
 801a22c:	4013      	ands	r3, r2
 801a22e:	0019      	movs	r1, r3
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	430a      	orrs	r2, r1
 801a23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a240:	2210      	movs	r2, #16
 801a242:	4013      	ands	r3, r2
 801a244:	d00b      	beq.n	801a25e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	689b      	ldr	r3, [r3, #8]
 801a24c:	4a2c      	ldr	r2, [pc, #176]	@ (801a300 <UART_AdvFeatureConfig+0x154>)
 801a24e:	4013      	ands	r3, r2
 801a250:	0019      	movs	r1, r3
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	430a      	orrs	r2, r1
 801a25c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a262:	2220      	movs	r2, #32
 801a264:	4013      	ands	r3, r2
 801a266:	d00b      	beq.n	801a280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	689b      	ldr	r3, [r3, #8]
 801a26e:	4a25      	ldr	r2, [pc, #148]	@ (801a304 <UART_AdvFeatureConfig+0x158>)
 801a270:	4013      	ands	r3, r2
 801a272:	0019      	movs	r1, r3
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	430a      	orrs	r2, r1
 801a27e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a284:	2240      	movs	r2, #64	@ 0x40
 801a286:	4013      	ands	r3, r2
 801a288:	d01d      	beq.n	801a2c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	685b      	ldr	r3, [r3, #4]
 801a290:	4a1d      	ldr	r2, [pc, #116]	@ (801a308 <UART_AdvFeatureConfig+0x15c>)
 801a292:	4013      	ands	r3, r2
 801a294:	0019      	movs	r1, r3
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	430a      	orrs	r2, r1
 801a2a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a2a6:	2380      	movs	r3, #128	@ 0x80
 801a2a8:	035b      	lsls	r3, r3, #13
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	d10b      	bne.n	801a2c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	4a15      	ldr	r2, [pc, #84]	@ (801a30c <UART_AdvFeatureConfig+0x160>)
 801a2b6:	4013      	ands	r3, r2
 801a2b8:	0019      	movs	r1, r3
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	430a      	orrs	r2, r1
 801a2c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2ca:	2280      	movs	r2, #128	@ 0x80
 801a2cc:	4013      	ands	r3, r2
 801a2ce:	d00b      	beq.n	801a2e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	685b      	ldr	r3, [r3, #4]
 801a2d6:	4a0e      	ldr	r2, [pc, #56]	@ (801a310 <UART_AdvFeatureConfig+0x164>)
 801a2d8:	4013      	ands	r3, r2
 801a2da:	0019      	movs	r1, r3
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	430a      	orrs	r2, r1
 801a2e6:	605a      	str	r2, [r3, #4]
  }
}
 801a2e8:	46c0      	nop			@ (mov r8, r8)
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	b002      	add	sp, #8
 801a2ee:	bd80      	pop	{r7, pc}
 801a2f0:	ffff7fff 	.word	0xffff7fff
 801a2f4:	fffdffff 	.word	0xfffdffff
 801a2f8:	fffeffff 	.word	0xfffeffff
 801a2fc:	fffbffff 	.word	0xfffbffff
 801a300:	ffffefff 	.word	0xffffefff
 801a304:	ffffdfff 	.word	0xffffdfff
 801a308:	ffefffff 	.word	0xffefffff
 801a30c:	ff9fffff 	.word	0xff9fffff
 801a310:	fff7ffff 	.word	0xfff7ffff

0801a314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a314:	b580      	push	{r7, lr}
 801a316:	b092      	sub	sp, #72	@ 0x48
 801a318:	af02      	add	r7, sp, #8
 801a31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	2290      	movs	r2, #144	@ 0x90
 801a320:	2100      	movs	r1, #0
 801a322:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a324:	f7f7 f802 	bl	801132c <HAL_GetTick>
 801a328:	0003      	movs	r3, r0
 801a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	2208      	movs	r2, #8
 801a334:	4013      	ands	r3, r2
 801a336:	2b08      	cmp	r3, #8
 801a338:	d12d      	bne.n	801a396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a33c:	2280      	movs	r2, #128	@ 0x80
 801a33e:	0391      	lsls	r1, r2, #14
 801a340:	6878      	ldr	r0, [r7, #4]
 801a342:	4a47      	ldr	r2, [pc, #284]	@ (801a460 <UART_CheckIdleState+0x14c>)
 801a344:	9200      	str	r2, [sp, #0]
 801a346:	2200      	movs	r2, #0
 801a348:	f000 f88e 	bl	801a468 <UART_WaitOnFlagUntilTimeout>
 801a34c:	1e03      	subs	r3, r0, #0
 801a34e:	d022      	beq.n	801a396 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a350:	f3ef 8310 	mrs	r3, PRIMASK
 801a354:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a358:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a35a:	2301      	movs	r3, #1
 801a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a360:	f383 8810 	msr	PRIMASK, r3
}
 801a364:	46c0      	nop			@ (mov r8, r8)
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	681a      	ldr	r2, [r3, #0]
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	2180      	movs	r1, #128	@ 0x80
 801a372:	438a      	bics	r2, r1
 801a374:	601a      	str	r2, [r3, #0]
 801a376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a37c:	f383 8810 	msr	PRIMASK, r3
}
 801a380:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	2288      	movs	r2, #136	@ 0x88
 801a386:	2120      	movs	r1, #32
 801a388:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2284      	movs	r2, #132	@ 0x84
 801a38e:	2100      	movs	r1, #0
 801a390:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a392:	2303      	movs	r3, #3
 801a394:	e060      	b.n	801a458 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2204      	movs	r2, #4
 801a39e:	4013      	ands	r3, r2
 801a3a0:	2b04      	cmp	r3, #4
 801a3a2:	d146      	bne.n	801a432 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a3a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a3a6:	2280      	movs	r2, #128	@ 0x80
 801a3a8:	03d1      	lsls	r1, r2, #15
 801a3aa:	6878      	ldr	r0, [r7, #4]
 801a3ac:	4a2c      	ldr	r2, [pc, #176]	@ (801a460 <UART_CheckIdleState+0x14c>)
 801a3ae:	9200      	str	r2, [sp, #0]
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	f000 f859 	bl	801a468 <UART_WaitOnFlagUntilTimeout>
 801a3b6:	1e03      	subs	r3, r0, #0
 801a3b8:	d03b      	beq.n	801a432 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a3ba:	f3ef 8310 	mrs	r3, PRIMASK
 801a3be:	60fb      	str	r3, [r7, #12]
  return(result);
 801a3c0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3c8:	693b      	ldr	r3, [r7, #16]
 801a3ca:	f383 8810 	msr	PRIMASK, r3
}
 801a3ce:	46c0      	nop			@ (mov r8, r8)
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	681a      	ldr	r2, [r3, #0]
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	4922      	ldr	r1, [pc, #136]	@ (801a464 <UART_CheckIdleState+0x150>)
 801a3dc:	400a      	ands	r2, r1
 801a3de:	601a      	str	r2, [r3, #0]
 801a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3e4:	697b      	ldr	r3, [r7, #20]
 801a3e6:	f383 8810 	msr	PRIMASK, r3
}
 801a3ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a3ec:	f3ef 8310 	mrs	r3, PRIMASK
 801a3f0:	61bb      	str	r3, [r7, #24]
  return(result);
 801a3f2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a3f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	f383 8810 	msr	PRIMASK, r3
}
 801a400:	46c0      	nop			@ (mov r8, r8)
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	689a      	ldr	r2, [r3, #8]
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	2101      	movs	r1, #1
 801a40e:	438a      	bics	r2, r1
 801a410:	609a      	str	r2, [r3, #8]
 801a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a414:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a416:	6a3b      	ldr	r3, [r7, #32]
 801a418:	f383 8810 	msr	PRIMASK, r3
}
 801a41c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	228c      	movs	r2, #140	@ 0x8c
 801a422:	2120      	movs	r1, #32
 801a424:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2284      	movs	r2, #132	@ 0x84
 801a42a:	2100      	movs	r1, #0
 801a42c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a42e:	2303      	movs	r3, #3
 801a430:	e012      	b.n	801a458 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2288      	movs	r2, #136	@ 0x88
 801a436:	2120      	movs	r1, #32
 801a438:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	228c      	movs	r2, #140	@ 0x8c
 801a43e:	2120      	movs	r1, #32
 801a440:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	2200      	movs	r2, #0
 801a446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2200      	movs	r2, #0
 801a44c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2284      	movs	r2, #132	@ 0x84
 801a452:	2100      	movs	r1, #0
 801a454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a456:	2300      	movs	r3, #0
}
 801a458:	0018      	movs	r0, r3
 801a45a:	46bd      	mov	sp, r7
 801a45c:	b010      	add	sp, #64	@ 0x40
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	01ffffff 	.word	0x01ffffff
 801a464:	fffffedf 	.word	0xfffffedf

0801a468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	60f8      	str	r0, [r7, #12]
 801a470:	60b9      	str	r1, [r7, #8]
 801a472:	603b      	str	r3, [r7, #0]
 801a474:	1dfb      	adds	r3, r7, #7
 801a476:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a478:	e051      	b.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a47a:	69bb      	ldr	r3, [r7, #24]
 801a47c:	3301      	adds	r3, #1
 801a47e:	d04e      	beq.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a480:	f7f6 ff54 	bl	801132c <HAL_GetTick>
 801a484:	0002      	movs	r2, r0
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	1ad3      	subs	r3, r2, r3
 801a48a:	69ba      	ldr	r2, [r7, #24]
 801a48c:	429a      	cmp	r2, r3
 801a48e:	d302      	bcc.n	801a496 <UART_WaitOnFlagUntilTimeout+0x2e>
 801a490:	69bb      	ldr	r3, [r7, #24]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d101      	bne.n	801a49a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801a496:	2303      	movs	r3, #3
 801a498:	e051      	b.n	801a53e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	2204      	movs	r2, #4
 801a4a2:	4013      	ands	r3, r2
 801a4a4:	d03b      	beq.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	2b80      	cmp	r3, #128	@ 0x80
 801a4aa:	d038      	beq.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	2b40      	cmp	r3, #64	@ 0x40
 801a4b0:	d035      	beq.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	69db      	ldr	r3, [r3, #28]
 801a4b8:	2208      	movs	r2, #8
 801a4ba:	4013      	ands	r3, r2
 801a4bc:	2b08      	cmp	r3, #8
 801a4be:	d111      	bne.n	801a4e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	2208      	movs	r2, #8
 801a4c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	0018      	movs	r0, r3
 801a4cc:	f000 f922 	bl	801a714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	2290      	movs	r2, #144	@ 0x90
 801a4d4:	2108      	movs	r1, #8
 801a4d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	2284      	movs	r2, #132	@ 0x84
 801a4dc:	2100      	movs	r1, #0
 801a4de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801a4e0:	2301      	movs	r3, #1
 801a4e2:	e02c      	b.n	801a53e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	69da      	ldr	r2, [r3, #28]
 801a4ea:	2380      	movs	r3, #128	@ 0x80
 801a4ec:	011b      	lsls	r3, r3, #4
 801a4ee:	401a      	ands	r2, r3
 801a4f0:	2380      	movs	r3, #128	@ 0x80
 801a4f2:	011b      	lsls	r3, r3, #4
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	d112      	bne.n	801a51e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	2280      	movs	r2, #128	@ 0x80
 801a4fe:	0112      	lsls	r2, r2, #4
 801a500:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	0018      	movs	r0, r3
 801a506:	f000 f905 	bl	801a714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	2290      	movs	r2, #144	@ 0x90
 801a50e:	2120      	movs	r1, #32
 801a510:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	2284      	movs	r2, #132	@ 0x84
 801a516:	2100      	movs	r1, #0
 801a518:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a51a:	2303      	movs	r3, #3
 801a51c:	e00f      	b.n	801a53e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	69db      	ldr	r3, [r3, #28]
 801a524:	68ba      	ldr	r2, [r7, #8]
 801a526:	4013      	ands	r3, r2
 801a528:	68ba      	ldr	r2, [r7, #8]
 801a52a:	1ad3      	subs	r3, r2, r3
 801a52c:	425a      	negs	r2, r3
 801a52e:	4153      	adcs	r3, r2
 801a530:	b2db      	uxtb	r3, r3
 801a532:	001a      	movs	r2, r3
 801a534:	1dfb      	adds	r3, r7, #7
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	429a      	cmp	r2, r3
 801a53a:	d09e      	beq.n	801a47a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a53c:	2300      	movs	r3, #0
}
 801a53e:	0018      	movs	r0, r3
 801a540:	46bd      	mov	sp, r7
 801a542:	b004      	add	sp, #16
 801a544:	bd80      	pop	{r7, pc}
	...

0801a548 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b090      	sub	sp, #64	@ 0x40
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	60f8      	str	r0, [r7, #12]
 801a550:	60b9      	str	r1, [r7, #8]
 801a552:	1dbb      	adds	r3, r7, #6
 801a554:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	68ba      	ldr	r2, [r7, #8]
 801a55a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	1dba      	adds	r2, r7, #6
 801a560:	215c      	movs	r1, #92	@ 0x5c
 801a562:	8812      	ldrh	r2, [r2, #0]
 801a564:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	2290      	movs	r2, #144	@ 0x90
 801a56a:	2100      	movs	r1, #0
 801a56c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	228c      	movs	r2, #140	@ 0x8c
 801a572:	2122      	movs	r1, #34	@ 0x22
 801a574:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	2280      	movs	r2, #128	@ 0x80
 801a57a:	589b      	ldr	r3, [r3, r2]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d02d      	beq.n	801a5dc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	2280      	movs	r2, #128	@ 0x80
 801a584:	589b      	ldr	r3, [r3, r2]
 801a586:	4a40      	ldr	r2, [pc, #256]	@ (801a688 <UART_Start_Receive_DMA+0x140>)
 801a588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	2280      	movs	r2, #128	@ 0x80
 801a58e:	589b      	ldr	r3, [r3, r2]
 801a590:	4a3e      	ldr	r2, [pc, #248]	@ (801a68c <UART_Start_Receive_DMA+0x144>)
 801a592:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	2280      	movs	r2, #128	@ 0x80
 801a598:	589b      	ldr	r3, [r3, r2]
 801a59a:	4a3d      	ldr	r2, [pc, #244]	@ (801a690 <UART_Start_Receive_DMA+0x148>)
 801a59c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	2280      	movs	r2, #128	@ 0x80
 801a5a2:	589b      	ldr	r3, [r3, r2]
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	2280      	movs	r2, #128	@ 0x80
 801a5ac:	5898      	ldr	r0, [r3, r2]
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	3324      	adds	r3, #36	@ 0x24
 801a5b4:	0019      	movs	r1, r3
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a5ba:	001a      	movs	r2, r3
 801a5bc:	1dbb      	adds	r3, r7, #6
 801a5be:	881b      	ldrh	r3, [r3, #0]
 801a5c0:	f7f8 fa80 	bl	8012ac4 <HAL_DMA_Start_IT>
 801a5c4:	1e03      	subs	r3, r0, #0
 801a5c6:	d009      	beq.n	801a5dc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	2290      	movs	r2, #144	@ 0x90
 801a5cc:	2110      	movs	r1, #16
 801a5ce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	228c      	movs	r2, #140	@ 0x8c
 801a5d4:	2120      	movs	r1, #32
 801a5d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801a5d8:	2301      	movs	r3, #1
 801a5da:	e050      	b.n	801a67e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	691b      	ldr	r3, [r3, #16]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d019      	beq.n	801a618 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a5e4:	f3ef 8310 	mrs	r3, PRIMASK
 801a5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a5ee:	2301      	movs	r3, #1
 801a5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5f4:	f383 8810 	msr	PRIMASK, r3
}
 801a5f8:	46c0      	nop			@ (mov r8, r8)
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	681a      	ldr	r2, [r3, #0]
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	2180      	movs	r1, #128	@ 0x80
 801a606:	0049      	lsls	r1, r1, #1
 801a608:	430a      	orrs	r2, r1
 801a60a:	601a      	str	r2, [r3, #0]
 801a60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a60e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a612:	f383 8810 	msr	PRIMASK, r3
}
 801a616:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a618:	f3ef 8310 	mrs	r3, PRIMASK
 801a61c:	613b      	str	r3, [r7, #16]
  return(result);
 801a61e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a620:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a622:	2301      	movs	r3, #1
 801a624:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a626:	697b      	ldr	r3, [r7, #20]
 801a628:	f383 8810 	msr	PRIMASK, r3
}
 801a62c:	46c0      	nop			@ (mov r8, r8)
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	689a      	ldr	r2, [r3, #8]
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	2101      	movs	r1, #1
 801a63a:	430a      	orrs	r2, r1
 801a63c:	609a      	str	r2, [r3, #8]
 801a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	f383 8810 	msr	PRIMASK, r3
}
 801a648:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a64a:	f3ef 8310 	mrs	r3, PRIMASK
 801a64e:	61fb      	str	r3, [r7, #28]
  return(result);
 801a650:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a652:	637b      	str	r3, [r7, #52]	@ 0x34
 801a654:	2301      	movs	r3, #1
 801a656:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a658:	6a3b      	ldr	r3, [r7, #32]
 801a65a:	f383 8810 	msr	PRIMASK, r3
}
 801a65e:	46c0      	nop			@ (mov r8, r8)
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	689a      	ldr	r2, [r3, #8]
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2140      	movs	r1, #64	@ 0x40
 801a66c:	430a      	orrs	r2, r1
 801a66e:	609a      	str	r2, [r3, #8]
 801a670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a672:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a676:	f383 8810 	msr	PRIMASK, r3
}
 801a67a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801a67c:	2300      	movs	r3, #0
}
 801a67e:	0018      	movs	r0, r3
 801a680:	46bd      	mov	sp, r7
 801a682:	b010      	add	sp, #64	@ 0x40
 801a684:	bd80      	pop	{r7, pc}
 801a686:	46c0      	nop			@ (mov r8, r8)
 801a688:	0801a899 	.word	0x0801a899
 801a68c:	0801a9c9 	.word	0x0801a9c9
 801a690:	0801aa0b 	.word	0x0801aa0b

0801a694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b08a      	sub	sp, #40	@ 0x28
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a69c:	f3ef 8310 	mrs	r3, PRIMASK
 801a6a0:	60bb      	str	r3, [r7, #8]
  return(result);
 801a6a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801a6a4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6a6:	2301      	movs	r3, #1
 801a6a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	f383 8810 	msr	PRIMASK, r3
}
 801a6b0:	46c0      	nop			@ (mov r8, r8)
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	21c0      	movs	r1, #192	@ 0xc0
 801a6be:	438a      	bics	r2, r1
 801a6c0:	601a      	str	r2, [r3, #0]
 801a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	f383 8810 	msr	PRIMASK, r3
}
 801a6cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a6ce:	f3ef 8310 	mrs	r3, PRIMASK
 801a6d2:	617b      	str	r3, [r7, #20]
  return(result);
 801a6d4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801a6d6:	623b      	str	r3, [r7, #32]
 801a6d8:	2301      	movs	r3, #1
 801a6da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6dc:	69bb      	ldr	r3, [r7, #24]
 801a6de:	f383 8810 	msr	PRIMASK, r3
}
 801a6e2:	46c0      	nop			@ (mov r8, r8)
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	689a      	ldr	r2, [r3, #8]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	4908      	ldr	r1, [pc, #32]	@ (801a710 <UART_EndTxTransfer+0x7c>)
 801a6f0:	400a      	ands	r2, r1
 801a6f2:	609a      	str	r2, [r3, #8]
 801a6f4:	6a3b      	ldr	r3, [r7, #32]
 801a6f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6f8:	69fb      	ldr	r3, [r7, #28]
 801a6fa:	f383 8810 	msr	PRIMASK, r3
}
 801a6fe:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2288      	movs	r2, #136	@ 0x88
 801a704:	2120      	movs	r1, #32
 801a706:	5099      	str	r1, [r3, r2]
}
 801a708:	46c0      	nop			@ (mov r8, r8)
 801a70a:	46bd      	mov	sp, r7
 801a70c:	b00a      	add	sp, #40	@ 0x28
 801a70e:	bd80      	pop	{r7, pc}
 801a710:	ff7fffff 	.word	0xff7fffff

0801a714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b08e      	sub	sp, #56	@ 0x38
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a71c:	f3ef 8310 	mrs	r3, PRIMASK
 801a720:	617b      	str	r3, [r7, #20]
  return(result);
 801a722:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a724:	637b      	str	r3, [r7, #52]	@ 0x34
 801a726:	2301      	movs	r3, #1
 801a728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a72a:	69bb      	ldr	r3, [r7, #24]
 801a72c:	f383 8810 	msr	PRIMASK, r3
}
 801a730:	46c0      	nop			@ (mov r8, r8)
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	4926      	ldr	r1, [pc, #152]	@ (801a7d8 <UART_EndRxTransfer+0xc4>)
 801a73e:	400a      	ands	r2, r1
 801a740:	601a      	str	r2, [r3, #0]
 801a742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a746:	69fb      	ldr	r3, [r7, #28]
 801a748:	f383 8810 	msr	PRIMASK, r3
}
 801a74c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a74e:	f3ef 8310 	mrs	r3, PRIMASK
 801a752:	623b      	str	r3, [r7, #32]
  return(result);
 801a754:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a756:	633b      	str	r3, [r7, #48]	@ 0x30
 801a758:	2301      	movs	r3, #1
 801a75a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a75e:	f383 8810 	msr	PRIMASK, r3
}
 801a762:	46c0      	nop			@ (mov r8, r8)
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	689a      	ldr	r2, [r3, #8]
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	491b      	ldr	r1, [pc, #108]	@ (801a7dc <UART_EndRxTransfer+0xc8>)
 801a770:	400a      	ands	r2, r1
 801a772:	609a      	str	r2, [r3, #8]
 801a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a776:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a77a:	f383 8810 	msr	PRIMASK, r3
}
 801a77e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a784:	2b01      	cmp	r3, #1
 801a786:	d118      	bne.n	801a7ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a788:	f3ef 8310 	mrs	r3, PRIMASK
 801a78c:	60bb      	str	r3, [r7, #8]
  return(result);
 801a78e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a792:	2301      	movs	r3, #1
 801a794:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	f383 8810 	msr	PRIMASK, r3
}
 801a79c:	46c0      	nop			@ (mov r8, r8)
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	681a      	ldr	r2, [r3, #0]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	2110      	movs	r1, #16
 801a7aa:	438a      	bics	r2, r1
 801a7ac:	601a      	str	r2, [r3, #0]
 801a7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	f383 8810 	msr	PRIMASK, r3
}
 801a7b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	228c      	movs	r2, #140	@ 0x8c
 801a7be:	2120      	movs	r1, #32
 801a7c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	2200      	movs	r2, #0
 801a7c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a7ce:	46c0      	nop			@ (mov r8, r8)
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	b00e      	add	sp, #56	@ 0x38
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	46c0      	nop			@ (mov r8, r8)
 801a7d8:	fffffedf 	.word	0xfffffedf
 801a7dc:	effffffe 	.word	0xeffffffe

0801a7e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801a7e0:	b580      	push	{r7, lr}
 801a7e2:	b08c      	sub	sp, #48	@ 0x30
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	2220      	movs	r2, #32
 801a7f6:	4013      	ands	r3, r2
 801a7f8:	d135      	bne.n	801a866 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7fc:	2256      	movs	r2, #86	@ 0x56
 801a7fe:	2100      	movs	r1, #0
 801a800:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a802:	f3ef 8310 	mrs	r3, PRIMASK
 801a806:	60fb      	str	r3, [r7, #12]
  return(result);
 801a808:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a80a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a80c:	2301      	movs	r3, #1
 801a80e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a810:	693b      	ldr	r3, [r7, #16]
 801a812:	f383 8810 	msr	PRIMASK, r3
}
 801a816:	46c0      	nop			@ (mov r8, r8)
 801a818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	689a      	ldr	r2, [r3, #8]
 801a81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	2180      	movs	r1, #128	@ 0x80
 801a824:	438a      	bics	r2, r1
 801a826:	609a      	str	r2, [r3, #8]
 801a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a82a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	f383 8810 	msr	PRIMASK, r3
}
 801a832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a834:	f3ef 8310 	mrs	r3, PRIMASK
 801a838:	61bb      	str	r3, [r7, #24]
  return(result);
 801a83a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a83c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a83e:	2301      	movs	r3, #1
 801a840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	f383 8810 	msr	PRIMASK, r3
}
 801a848:	46c0      	nop			@ (mov r8, r8)
 801a84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	2140      	movs	r1, #64	@ 0x40
 801a856:	430a      	orrs	r2, r1
 801a858:	601a      	str	r2, [r3, #0]
 801a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a85c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a85e:	6a3b      	ldr	r3, [r7, #32]
 801a860:	f383 8810 	msr	PRIMASK, r3
}
 801a864:	e004      	b.n	801a870 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a868:	0018      	movs	r0, r3
 801a86a:	f7ff fa99 	bl	8019da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a86e:	46c0      	nop			@ (mov r8, r8)
 801a870:	46c0      	nop			@ (mov r8, r8)
 801a872:	46bd      	mov	sp, r7
 801a874:	b00c      	add	sp, #48	@ 0x30
 801a876:	bd80      	pop	{r7, pc}

0801a878 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b084      	sub	sp, #16
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a884:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	0018      	movs	r0, r3
 801a88a:	f7ff fa91 	bl	8019db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a88e:	46c0      	nop			@ (mov r8, r8)
 801a890:	46bd      	mov	sp, r7
 801a892:	b004      	add	sp, #16
 801a894:	bd80      	pop	{r7, pc}
	...

0801a898 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b094      	sub	sp, #80	@ 0x50
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	2220      	movs	r2, #32
 801a8ae:	4013      	ands	r3, r2
 801a8b0:	d16f      	bne.n	801a992 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801a8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a8b4:	225e      	movs	r2, #94	@ 0x5e
 801a8b6:	2100      	movs	r1, #0
 801a8b8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a8ba:	f3ef 8310 	mrs	r3, PRIMASK
 801a8be:	61bb      	str	r3, [r7, #24]
  return(result);
 801a8c0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8c8:	69fb      	ldr	r3, [r7, #28]
 801a8ca:	f383 8810 	msr	PRIMASK, r3
}
 801a8ce:	46c0      	nop			@ (mov r8, r8)
 801a8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	681a      	ldr	r2, [r3, #0]
 801a8d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	493a      	ldr	r1, [pc, #232]	@ (801a9c4 <UART_DMAReceiveCplt+0x12c>)
 801a8dc:	400a      	ands	r2, r1
 801a8de:	601a      	str	r2, [r3, #0]
 801a8e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a8e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8e4:	6a3b      	ldr	r3, [r7, #32]
 801a8e6:	f383 8810 	msr	PRIMASK, r3
}
 801a8ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a8ec:	f3ef 8310 	mrs	r3, PRIMASK
 801a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a8f4:	647b      	str	r3, [r7, #68]	@ 0x44
 801a8f6:	2301      	movs	r3, #1
 801a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8fc:	f383 8810 	msr	PRIMASK, r3
}
 801a900:	46c0      	nop			@ (mov r8, r8)
 801a902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	689a      	ldr	r2, [r3, #8]
 801a908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	2101      	movs	r1, #1
 801a90e:	438a      	bics	r2, r1
 801a910:	609a      	str	r2, [r3, #8]
 801a912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a918:	f383 8810 	msr	PRIMASK, r3
}
 801a91c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a91e:	f3ef 8310 	mrs	r3, PRIMASK
 801a922:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a926:	643b      	str	r3, [r7, #64]	@ 0x40
 801a928:	2301      	movs	r3, #1
 801a92a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a92e:	f383 8810 	msr	PRIMASK, r3
}
 801a932:	46c0      	nop			@ (mov r8, r8)
 801a934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	689a      	ldr	r2, [r3, #8]
 801a93a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2140      	movs	r1, #64	@ 0x40
 801a940:	438a      	bics	r2, r1
 801a942:	609a      	str	r2, [r3, #8]
 801a944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a946:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a94a:	f383 8810 	msr	PRIMASK, r3
}
 801a94e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801a950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a952:	228c      	movs	r2, #140	@ 0x8c
 801a954:	2120      	movs	r1, #32
 801a956:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a95c:	2b01      	cmp	r3, #1
 801a95e:	d118      	bne.n	801a992 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a960:	f3ef 8310 	mrs	r3, PRIMASK
 801a964:	60fb      	str	r3, [r7, #12]
  return(result);
 801a966:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a96a:	2301      	movs	r3, #1
 801a96c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	f383 8810 	msr	PRIMASK, r3
}
 801a974:	46c0      	nop			@ (mov r8, r8)
 801a976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	2110      	movs	r1, #16
 801a982:	438a      	bics	r2, r1
 801a984:	601a      	str	r2, [r3, #0]
 801a986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a98a:	697b      	ldr	r3, [r7, #20]
 801a98c:	f383 8810 	msr	PRIMASK, r3
}
 801a990:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a994:	2200      	movs	r2, #0
 801a996:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a99c:	2b01      	cmp	r3, #1
 801a99e:	d108      	bne.n	801a9b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a9a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9a2:	225c      	movs	r2, #92	@ 0x5c
 801a9a4:	5a9a      	ldrh	r2, [r3, r2]
 801a9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9a8:	0011      	movs	r1, r2
 801a9aa:	0018      	movs	r0, r3
 801a9ac:	f7ff fa20 	bl	8019df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a9b0:	e003      	b.n	801a9ba <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801a9b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9b4:	0018      	movs	r0, r3
 801a9b6:	f7ff fa03 	bl	8019dc0 <HAL_UART_RxCpltCallback>
}
 801a9ba:	46c0      	nop			@ (mov r8, r8)
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	b014      	add	sp, #80	@ 0x50
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	46c0      	nop			@ (mov r8, r8)
 801a9c4:	fffffeff 	.word	0xfffffeff

0801a9c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a9d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	2201      	movs	r2, #1
 801a9da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d10a      	bne.n	801a9fa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	225c      	movs	r2, #92	@ 0x5c
 801a9e8:	5a9b      	ldrh	r3, [r3, r2]
 801a9ea:	085b      	lsrs	r3, r3, #1
 801a9ec:	b29a      	uxth	r2, r3
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	0011      	movs	r1, r2
 801a9f2:	0018      	movs	r0, r3
 801a9f4:	f7ff f9fc 	bl	8019df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a9f8:	e003      	b.n	801aa02 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	0018      	movs	r0, r3
 801a9fe:	f7ff f9e7 	bl	8019dd0 <HAL_UART_RxHalfCpltCallback>
}
 801aa02:	46c0      	nop			@ (mov r8, r8)
 801aa04:	46bd      	mov	sp, r7
 801aa06:	b004      	add	sp, #16
 801aa08:	bd80      	pop	{r7, pc}

0801aa0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801aa0a:	b580      	push	{r7, lr}
 801aa0c:	b086      	sub	sp, #24
 801aa0e:	af00      	add	r7, sp, #0
 801aa10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	2288      	movs	r2, #136	@ 0x88
 801aa1c:	589b      	ldr	r3, [r3, r2]
 801aa1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	228c      	movs	r2, #140	@ 0x8c
 801aa24:	589b      	ldr	r3, [r3, r2]
 801aa26:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801aa28:	697b      	ldr	r3, [r7, #20]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	689b      	ldr	r3, [r3, #8]
 801aa2e:	2280      	movs	r2, #128	@ 0x80
 801aa30:	4013      	ands	r3, r2
 801aa32:	2b80      	cmp	r3, #128	@ 0x80
 801aa34:	d10a      	bne.n	801aa4c <UART_DMAError+0x42>
 801aa36:	693b      	ldr	r3, [r7, #16]
 801aa38:	2b21      	cmp	r3, #33	@ 0x21
 801aa3a:	d107      	bne.n	801aa4c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801aa3c:	697b      	ldr	r3, [r7, #20]
 801aa3e:	2256      	movs	r2, #86	@ 0x56
 801aa40:	2100      	movs	r1, #0
 801aa42:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801aa44:	697b      	ldr	r3, [r7, #20]
 801aa46:	0018      	movs	r0, r3
 801aa48:	f7ff fe24 	bl	801a694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	689b      	ldr	r3, [r3, #8]
 801aa52:	2240      	movs	r2, #64	@ 0x40
 801aa54:	4013      	ands	r3, r2
 801aa56:	2b40      	cmp	r3, #64	@ 0x40
 801aa58:	d10a      	bne.n	801aa70 <UART_DMAError+0x66>
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	2b22      	cmp	r3, #34	@ 0x22
 801aa5e:	d107      	bne.n	801aa70 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801aa60:	697b      	ldr	r3, [r7, #20]
 801aa62:	225e      	movs	r2, #94	@ 0x5e
 801aa64:	2100      	movs	r1, #0
 801aa66:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	0018      	movs	r0, r3
 801aa6c:	f7ff fe52 	bl	801a714 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801aa70:	697b      	ldr	r3, [r7, #20]
 801aa72:	2290      	movs	r2, #144	@ 0x90
 801aa74:	589b      	ldr	r3, [r3, r2]
 801aa76:	2210      	movs	r2, #16
 801aa78:	431a      	orrs	r2, r3
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	2190      	movs	r1, #144	@ 0x90
 801aa7e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801aa80:	697b      	ldr	r3, [r7, #20]
 801aa82:	0018      	movs	r0, r3
 801aa84:	f7ff f9ac 	bl	8019de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801aa88:	46c0      	nop			@ (mov r8, r8)
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	b006      	add	sp, #24
 801aa8e:	bd80      	pop	{r7, pc}

0801aa90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b084      	sub	sp, #16
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	225e      	movs	r2, #94	@ 0x5e
 801aaa2:	2100      	movs	r1, #0
 801aaa4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	0018      	movs	r0, r3
 801aaaa:	f7ff f999 	bl	8019de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801aaae:	46c0      	nop			@ (mov r8, r8)
 801aab0:	46bd      	mov	sp, r7
 801aab2:	b004      	add	sp, #16
 801aab4:	bd80      	pop	{r7, pc}

0801aab6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801aab6:	b580      	push	{r7, lr}
 801aab8:	b086      	sub	sp, #24
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aabe:	f3ef 8310 	mrs	r3, PRIMASK
 801aac2:	60bb      	str	r3, [r7, #8]
  return(result);
 801aac4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801aac6:	617b      	str	r3, [r7, #20]
 801aac8:	2301      	movs	r3, #1
 801aaca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	f383 8810 	msr	PRIMASK, r3
}
 801aad2:	46c0      	nop			@ (mov r8, r8)
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	681a      	ldr	r2, [r3, #0]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	2140      	movs	r1, #64	@ 0x40
 801aae0:	438a      	bics	r2, r1
 801aae2:	601a      	str	r2, [r3, #0]
 801aae4:	697b      	ldr	r3, [r7, #20]
 801aae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	f383 8810 	msr	PRIMASK, r3
}
 801aaee:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	2288      	movs	r2, #136	@ 0x88
 801aaf4:	2120      	movs	r1, #32
 801aaf6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	2200      	movs	r2, #0
 801aafc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	0018      	movs	r0, r3
 801ab02:	f7ff f94d 	bl	8019da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ab06:	46c0      	nop			@ (mov r8, r8)
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	b006      	add	sp, #24
 801ab0c:	bd80      	pop	{r7, pc}

0801ab0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab0e:	b580      	push	{r7, lr}
 801ab10:	b082      	sub	sp, #8
 801ab12:	af00      	add	r7, sp, #0
 801ab14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab16:	46c0      	nop			@ (mov r8, r8)
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	b002      	add	sp, #8
 801ab1c:	bd80      	pop	{r7, pc}

0801ab1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab1e:	b580      	push	{r7, lr}
 801ab20:	b082      	sub	sp, #8
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab26:	46c0      	nop			@ (mov r8, r8)
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	b002      	add	sp, #8
 801ab2c:	bd80      	pop	{r7, pc}

0801ab2e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801ab2e:	b580      	push	{r7, lr}
 801ab30:	b082      	sub	sp, #8
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801ab36:	46c0      	nop			@ (mov r8, r8)
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	b002      	add	sp, #8
 801ab3c:	bd80      	pop	{r7, pc}
	...

0801ab40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b084      	sub	sp, #16
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2284      	movs	r2, #132	@ 0x84
 801ab4c:	5c9b      	ldrb	r3, [r3, r2]
 801ab4e:	2b01      	cmp	r3, #1
 801ab50:	d101      	bne.n	801ab56 <HAL_UARTEx_DisableFifoMode+0x16>
 801ab52:	2302      	movs	r3, #2
 801ab54:	e027      	b.n	801aba6 <HAL_UARTEx_DisableFifoMode+0x66>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	2284      	movs	r2, #132	@ 0x84
 801ab5a:	2101      	movs	r1, #1
 801ab5c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2288      	movs	r2, #136	@ 0x88
 801ab62:	2124      	movs	r1, #36	@ 0x24
 801ab64:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2101      	movs	r1, #1
 801ab7a:	438a      	bics	r2, r1
 801ab7c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	4a0b      	ldr	r2, [pc, #44]	@ (801abb0 <HAL_UARTEx_DisableFifoMode+0x70>)
 801ab82:	4013      	ands	r3, r2
 801ab84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	2200      	movs	r2, #0
 801ab8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	2288      	movs	r2, #136	@ 0x88
 801ab98:	2120      	movs	r1, #32
 801ab9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	2284      	movs	r2, #132	@ 0x84
 801aba0:	2100      	movs	r1, #0
 801aba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801aba4:	2300      	movs	r3, #0
}
 801aba6:	0018      	movs	r0, r3
 801aba8:	46bd      	mov	sp, r7
 801abaa:	b004      	add	sp, #16
 801abac:	bd80      	pop	{r7, pc}
 801abae:	46c0      	nop			@ (mov r8, r8)
 801abb0:	dfffffff 	.word	0xdfffffff

0801abb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2284      	movs	r2, #132	@ 0x84
 801abc2:	5c9b      	ldrb	r3, [r3, r2]
 801abc4:	2b01      	cmp	r3, #1
 801abc6:	d101      	bne.n	801abcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801abc8:	2302      	movs	r3, #2
 801abca:	e02e      	b.n	801ac2a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	2284      	movs	r2, #132	@ 0x84
 801abd0:	2101      	movs	r1, #1
 801abd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	2288      	movs	r2, #136	@ 0x88
 801abd8:	2124      	movs	r1, #36	@ 0x24
 801abda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	681a      	ldr	r2, [r3, #0]
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	2101      	movs	r1, #1
 801abf0:	438a      	bics	r2, r1
 801abf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	689b      	ldr	r3, [r3, #8]
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	08d9      	lsrs	r1, r3, #3
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	683a      	ldr	r2, [r7, #0]
 801ac04:	430a      	orrs	r2, r1
 801ac06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	0018      	movs	r0, r3
 801ac0c:	f000 f854 	bl	801acb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	68fa      	ldr	r2, [r7, #12]
 801ac16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2288      	movs	r2, #136	@ 0x88
 801ac1c:	2120      	movs	r1, #32
 801ac1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2284      	movs	r2, #132	@ 0x84
 801ac24:	2100      	movs	r1, #0
 801ac26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ac28:	2300      	movs	r3, #0
}
 801ac2a:	0018      	movs	r0, r3
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	b004      	add	sp, #16
 801ac30:	bd80      	pop	{r7, pc}
	...

0801ac34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b084      	sub	sp, #16
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
 801ac3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	2284      	movs	r2, #132	@ 0x84
 801ac42:	5c9b      	ldrb	r3, [r3, r2]
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d101      	bne.n	801ac4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ac48:	2302      	movs	r3, #2
 801ac4a:	e02f      	b.n	801acac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2284      	movs	r2, #132	@ 0x84
 801ac50:	2101      	movs	r1, #1
 801ac52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2288      	movs	r2, #136	@ 0x88
 801ac58:	2124      	movs	r1, #36	@ 0x24
 801ac5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	681a      	ldr	r2, [r3, #0]
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	2101      	movs	r1, #1
 801ac70:	438a      	bics	r2, r1
 801ac72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	689b      	ldr	r3, [r3, #8]
 801ac7a:	4a0e      	ldr	r2, [pc, #56]	@ (801acb4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801ac7c:	4013      	ands	r3, r2
 801ac7e:	0019      	movs	r1, r3
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	683a      	ldr	r2, [r7, #0]
 801ac86:	430a      	orrs	r2, r1
 801ac88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	0018      	movs	r0, r3
 801ac8e:	f000 f813 	bl	801acb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	68fa      	ldr	r2, [r7, #12]
 801ac98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	2288      	movs	r2, #136	@ 0x88
 801ac9e:	2120      	movs	r1, #32
 801aca0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	2284      	movs	r2, #132	@ 0x84
 801aca6:	2100      	movs	r1, #0
 801aca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801acaa:	2300      	movs	r3, #0
}
 801acac:	0018      	movs	r0, r3
 801acae:	46bd      	mov	sp, r7
 801acb0:	b004      	add	sp, #16
 801acb2:	bd80      	pop	{r7, pc}
 801acb4:	f1ffffff 	.word	0xf1ffffff

0801acb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acba:	b085      	sub	sp, #20
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d108      	bne.n	801acda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	226a      	movs	r2, #106	@ 0x6a
 801accc:	2101      	movs	r1, #1
 801acce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	2268      	movs	r2, #104	@ 0x68
 801acd4:	2101      	movs	r1, #1
 801acd6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801acd8:	e043      	b.n	801ad62 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801acda:	260f      	movs	r6, #15
 801acdc:	19bb      	adds	r3, r7, r6
 801acde:	2208      	movs	r2, #8
 801ace0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ace2:	200e      	movs	r0, #14
 801ace4:	183b      	adds	r3, r7, r0
 801ace6:	2208      	movs	r2, #8
 801ace8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	689b      	ldr	r3, [r3, #8]
 801acf0:	0e5b      	lsrs	r3, r3, #25
 801acf2:	b2da      	uxtb	r2, r3
 801acf4:	240d      	movs	r4, #13
 801acf6:	193b      	adds	r3, r7, r4
 801acf8:	2107      	movs	r1, #7
 801acfa:	400a      	ands	r2, r1
 801acfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	689b      	ldr	r3, [r3, #8]
 801ad04:	0f5b      	lsrs	r3, r3, #29
 801ad06:	b2da      	uxtb	r2, r3
 801ad08:	250c      	movs	r5, #12
 801ad0a:	197b      	adds	r3, r7, r5
 801ad0c:	2107      	movs	r1, #7
 801ad0e:	400a      	ands	r2, r1
 801ad10:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad12:	183b      	adds	r3, r7, r0
 801ad14:	781b      	ldrb	r3, [r3, #0]
 801ad16:	197a      	adds	r2, r7, r5
 801ad18:	7812      	ldrb	r2, [r2, #0]
 801ad1a:	4914      	ldr	r1, [pc, #80]	@ (801ad6c <UARTEx_SetNbDataToProcess+0xb4>)
 801ad1c:	5c8a      	ldrb	r2, [r1, r2]
 801ad1e:	435a      	muls	r2, r3
 801ad20:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad22:	197b      	adds	r3, r7, r5
 801ad24:	781b      	ldrb	r3, [r3, #0]
 801ad26:	4a12      	ldr	r2, [pc, #72]	@ (801ad70 <UARTEx_SetNbDataToProcess+0xb8>)
 801ad28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad2a:	0019      	movs	r1, r3
 801ad2c:	f7e5 fa7e 	bl	800022c <__divsi3>
 801ad30:	0003      	movs	r3, r0
 801ad32:	b299      	uxth	r1, r3
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	226a      	movs	r2, #106	@ 0x6a
 801ad38:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad3a:	19bb      	adds	r3, r7, r6
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	193a      	adds	r2, r7, r4
 801ad40:	7812      	ldrb	r2, [r2, #0]
 801ad42:	490a      	ldr	r1, [pc, #40]	@ (801ad6c <UARTEx_SetNbDataToProcess+0xb4>)
 801ad44:	5c8a      	ldrb	r2, [r1, r2]
 801ad46:	435a      	muls	r2, r3
 801ad48:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad4a:	193b      	adds	r3, r7, r4
 801ad4c:	781b      	ldrb	r3, [r3, #0]
 801ad4e:	4a08      	ldr	r2, [pc, #32]	@ (801ad70 <UARTEx_SetNbDataToProcess+0xb8>)
 801ad50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad52:	0019      	movs	r1, r3
 801ad54:	f7e5 fa6a 	bl	800022c <__divsi3>
 801ad58:	0003      	movs	r3, r0
 801ad5a:	b299      	uxth	r1, r3
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2268      	movs	r2, #104	@ 0x68
 801ad60:	5299      	strh	r1, [r3, r2]
}
 801ad62:	46c0      	nop			@ (mov r8, r8)
 801ad64:	46bd      	mov	sp, r7
 801ad66:	b005      	add	sp, #20
 801ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad6a:	46c0      	nop			@ (mov r8, r8)
 801ad6c:	0801b5bc 	.word	0x0801b5bc
 801ad70:	0801b5c4 	.word	0x0801b5c4

0801ad74 <malloc>:
 801ad74:	b510      	push	{r4, lr}
 801ad76:	4b03      	ldr	r3, [pc, #12]	@ (801ad84 <malloc+0x10>)
 801ad78:	0001      	movs	r1, r0
 801ad7a:	6818      	ldr	r0, [r3, #0]
 801ad7c:	f000 f830 	bl	801ade0 <_malloc_r>
 801ad80:	bd10      	pop	{r4, pc}
 801ad82:	46c0      	nop			@ (mov r8, r8)
 801ad84:	2000026c 	.word	0x2000026c

0801ad88 <free>:
 801ad88:	b510      	push	{r4, lr}
 801ad8a:	4b03      	ldr	r3, [pc, #12]	@ (801ad98 <free+0x10>)
 801ad8c:	0001      	movs	r1, r0
 801ad8e:	6818      	ldr	r0, [r3, #0]
 801ad90:	f000 f938 	bl	801b004 <_free_r>
 801ad94:	bd10      	pop	{r4, pc}
 801ad96:	46c0      	nop			@ (mov r8, r8)
 801ad98:	2000026c 	.word	0x2000026c

0801ad9c <sbrk_aligned>:
 801ad9c:	b570      	push	{r4, r5, r6, lr}
 801ad9e:	4e0f      	ldr	r6, [pc, #60]	@ (801addc <sbrk_aligned+0x40>)
 801ada0:	000d      	movs	r5, r1
 801ada2:	6831      	ldr	r1, [r6, #0]
 801ada4:	0004      	movs	r4, r0
 801ada6:	2900      	cmp	r1, #0
 801ada8:	d102      	bne.n	801adb0 <sbrk_aligned+0x14>
 801adaa:	f000 f8e3 	bl	801af74 <_sbrk_r>
 801adae:	6030      	str	r0, [r6, #0]
 801adb0:	0029      	movs	r1, r5
 801adb2:	0020      	movs	r0, r4
 801adb4:	f000 f8de 	bl	801af74 <_sbrk_r>
 801adb8:	1c43      	adds	r3, r0, #1
 801adba:	d103      	bne.n	801adc4 <sbrk_aligned+0x28>
 801adbc:	2501      	movs	r5, #1
 801adbe:	426d      	negs	r5, r5
 801adc0:	0028      	movs	r0, r5
 801adc2:	bd70      	pop	{r4, r5, r6, pc}
 801adc4:	2303      	movs	r3, #3
 801adc6:	1cc5      	adds	r5, r0, #3
 801adc8:	439d      	bics	r5, r3
 801adca:	42a8      	cmp	r0, r5
 801adcc:	d0f8      	beq.n	801adc0 <sbrk_aligned+0x24>
 801adce:	1a29      	subs	r1, r5, r0
 801add0:	0020      	movs	r0, r4
 801add2:	f000 f8cf 	bl	801af74 <_sbrk_r>
 801add6:	3001      	adds	r0, #1
 801add8:	d1f2      	bne.n	801adc0 <sbrk_aligned+0x24>
 801adda:	e7ef      	b.n	801adbc <sbrk_aligned+0x20>
 801addc:	200011a8 	.word	0x200011a8

0801ade0 <_malloc_r>:
 801ade0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ade2:	2203      	movs	r2, #3
 801ade4:	1ccb      	adds	r3, r1, #3
 801ade6:	4393      	bics	r3, r2
 801ade8:	3308      	adds	r3, #8
 801adea:	0005      	movs	r5, r0
 801adec:	001f      	movs	r7, r3
 801adee:	2b0c      	cmp	r3, #12
 801adf0:	d234      	bcs.n	801ae5c <_malloc_r+0x7c>
 801adf2:	270c      	movs	r7, #12
 801adf4:	42b9      	cmp	r1, r7
 801adf6:	d833      	bhi.n	801ae60 <_malloc_r+0x80>
 801adf8:	0028      	movs	r0, r5
 801adfa:	f000 f871 	bl	801aee0 <__malloc_lock>
 801adfe:	4e37      	ldr	r6, [pc, #220]	@ (801aedc <_malloc_r+0xfc>)
 801ae00:	6833      	ldr	r3, [r6, #0]
 801ae02:	001c      	movs	r4, r3
 801ae04:	2c00      	cmp	r4, #0
 801ae06:	d12f      	bne.n	801ae68 <_malloc_r+0x88>
 801ae08:	0039      	movs	r1, r7
 801ae0a:	0028      	movs	r0, r5
 801ae0c:	f7ff ffc6 	bl	801ad9c <sbrk_aligned>
 801ae10:	0004      	movs	r4, r0
 801ae12:	1c43      	adds	r3, r0, #1
 801ae14:	d15f      	bne.n	801aed6 <_malloc_r+0xf6>
 801ae16:	6834      	ldr	r4, [r6, #0]
 801ae18:	9400      	str	r4, [sp, #0]
 801ae1a:	9b00      	ldr	r3, [sp, #0]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d14a      	bne.n	801aeb6 <_malloc_r+0xd6>
 801ae20:	2c00      	cmp	r4, #0
 801ae22:	d052      	beq.n	801aeca <_malloc_r+0xea>
 801ae24:	6823      	ldr	r3, [r4, #0]
 801ae26:	0028      	movs	r0, r5
 801ae28:	18e3      	adds	r3, r4, r3
 801ae2a:	9900      	ldr	r1, [sp, #0]
 801ae2c:	9301      	str	r3, [sp, #4]
 801ae2e:	f000 f8a1 	bl	801af74 <_sbrk_r>
 801ae32:	9b01      	ldr	r3, [sp, #4]
 801ae34:	4283      	cmp	r3, r0
 801ae36:	d148      	bne.n	801aeca <_malloc_r+0xea>
 801ae38:	6823      	ldr	r3, [r4, #0]
 801ae3a:	0028      	movs	r0, r5
 801ae3c:	1aff      	subs	r7, r7, r3
 801ae3e:	0039      	movs	r1, r7
 801ae40:	f7ff ffac 	bl	801ad9c <sbrk_aligned>
 801ae44:	3001      	adds	r0, #1
 801ae46:	d040      	beq.n	801aeca <_malloc_r+0xea>
 801ae48:	6823      	ldr	r3, [r4, #0]
 801ae4a:	19db      	adds	r3, r3, r7
 801ae4c:	6023      	str	r3, [r4, #0]
 801ae4e:	6833      	ldr	r3, [r6, #0]
 801ae50:	685a      	ldr	r2, [r3, #4]
 801ae52:	2a00      	cmp	r2, #0
 801ae54:	d133      	bne.n	801aebe <_malloc_r+0xde>
 801ae56:	9b00      	ldr	r3, [sp, #0]
 801ae58:	6033      	str	r3, [r6, #0]
 801ae5a:	e019      	b.n	801ae90 <_malloc_r+0xb0>
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	dac9      	bge.n	801adf4 <_malloc_r+0x14>
 801ae60:	230c      	movs	r3, #12
 801ae62:	602b      	str	r3, [r5, #0]
 801ae64:	2000      	movs	r0, #0
 801ae66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ae68:	6821      	ldr	r1, [r4, #0]
 801ae6a:	1bc9      	subs	r1, r1, r7
 801ae6c:	d420      	bmi.n	801aeb0 <_malloc_r+0xd0>
 801ae6e:	290b      	cmp	r1, #11
 801ae70:	d90a      	bls.n	801ae88 <_malloc_r+0xa8>
 801ae72:	19e2      	adds	r2, r4, r7
 801ae74:	6027      	str	r7, [r4, #0]
 801ae76:	42a3      	cmp	r3, r4
 801ae78:	d104      	bne.n	801ae84 <_malloc_r+0xa4>
 801ae7a:	6032      	str	r2, [r6, #0]
 801ae7c:	6863      	ldr	r3, [r4, #4]
 801ae7e:	6011      	str	r1, [r2, #0]
 801ae80:	6053      	str	r3, [r2, #4]
 801ae82:	e005      	b.n	801ae90 <_malloc_r+0xb0>
 801ae84:	605a      	str	r2, [r3, #4]
 801ae86:	e7f9      	b.n	801ae7c <_malloc_r+0x9c>
 801ae88:	6862      	ldr	r2, [r4, #4]
 801ae8a:	42a3      	cmp	r3, r4
 801ae8c:	d10e      	bne.n	801aeac <_malloc_r+0xcc>
 801ae8e:	6032      	str	r2, [r6, #0]
 801ae90:	0028      	movs	r0, r5
 801ae92:	f000 f82d 	bl	801aef0 <__malloc_unlock>
 801ae96:	0020      	movs	r0, r4
 801ae98:	2207      	movs	r2, #7
 801ae9a:	300b      	adds	r0, #11
 801ae9c:	1d23      	adds	r3, r4, #4
 801ae9e:	4390      	bics	r0, r2
 801aea0:	1ac2      	subs	r2, r0, r3
 801aea2:	4298      	cmp	r0, r3
 801aea4:	d0df      	beq.n	801ae66 <_malloc_r+0x86>
 801aea6:	1a1b      	subs	r3, r3, r0
 801aea8:	50a3      	str	r3, [r4, r2]
 801aeaa:	e7dc      	b.n	801ae66 <_malloc_r+0x86>
 801aeac:	605a      	str	r2, [r3, #4]
 801aeae:	e7ef      	b.n	801ae90 <_malloc_r+0xb0>
 801aeb0:	0023      	movs	r3, r4
 801aeb2:	6864      	ldr	r4, [r4, #4]
 801aeb4:	e7a6      	b.n	801ae04 <_malloc_r+0x24>
 801aeb6:	9c00      	ldr	r4, [sp, #0]
 801aeb8:	6863      	ldr	r3, [r4, #4]
 801aeba:	9300      	str	r3, [sp, #0]
 801aebc:	e7ad      	b.n	801ae1a <_malloc_r+0x3a>
 801aebe:	001a      	movs	r2, r3
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	42a3      	cmp	r3, r4
 801aec4:	d1fb      	bne.n	801aebe <_malloc_r+0xde>
 801aec6:	2300      	movs	r3, #0
 801aec8:	e7da      	b.n	801ae80 <_malloc_r+0xa0>
 801aeca:	230c      	movs	r3, #12
 801aecc:	0028      	movs	r0, r5
 801aece:	602b      	str	r3, [r5, #0]
 801aed0:	f000 f80e 	bl	801aef0 <__malloc_unlock>
 801aed4:	e7c6      	b.n	801ae64 <_malloc_r+0x84>
 801aed6:	6007      	str	r7, [r0, #0]
 801aed8:	e7da      	b.n	801ae90 <_malloc_r+0xb0>
 801aeda:	46c0      	nop			@ (mov r8, r8)
 801aedc:	200011ac 	.word	0x200011ac

0801aee0 <__malloc_lock>:
 801aee0:	b510      	push	{r4, lr}
 801aee2:	4802      	ldr	r0, [pc, #8]	@ (801aeec <__malloc_lock+0xc>)
 801aee4:	f000 f882 	bl	801afec <__retarget_lock_acquire_recursive>
 801aee8:	bd10      	pop	{r4, pc}
 801aeea:	46c0      	nop			@ (mov r8, r8)
 801aeec:	200012ec 	.word	0x200012ec

0801aef0 <__malloc_unlock>:
 801aef0:	b510      	push	{r4, lr}
 801aef2:	4802      	ldr	r0, [pc, #8]	@ (801aefc <__malloc_unlock+0xc>)
 801aef4:	f000 f87b 	bl	801afee <__retarget_lock_release_recursive>
 801aef8:	bd10      	pop	{r4, pc}
 801aefa:	46c0      	nop			@ (mov r8, r8)
 801aefc:	200012ec 	.word	0x200012ec

0801af00 <memcmp>:
 801af00:	b530      	push	{r4, r5, lr}
 801af02:	2400      	movs	r4, #0
 801af04:	3901      	subs	r1, #1
 801af06:	42a2      	cmp	r2, r4
 801af08:	d101      	bne.n	801af0e <memcmp+0xe>
 801af0a:	2000      	movs	r0, #0
 801af0c:	e005      	b.n	801af1a <memcmp+0x1a>
 801af0e:	5d03      	ldrb	r3, [r0, r4]
 801af10:	3401      	adds	r4, #1
 801af12:	5d0d      	ldrb	r5, [r1, r4]
 801af14:	42ab      	cmp	r3, r5
 801af16:	d0f6      	beq.n	801af06 <memcmp+0x6>
 801af18:	1b58      	subs	r0, r3, r5
 801af1a:	bd30      	pop	{r4, r5, pc}

0801af1c <memset>:
 801af1c:	0003      	movs	r3, r0
 801af1e:	1882      	adds	r2, r0, r2
 801af20:	4293      	cmp	r3, r2
 801af22:	d100      	bne.n	801af26 <memset+0xa>
 801af24:	4770      	bx	lr
 801af26:	7019      	strb	r1, [r3, #0]
 801af28:	3301      	adds	r3, #1
 801af2a:	e7f9      	b.n	801af20 <memset+0x4>

0801af2c <strchr>:
 801af2c:	b2c9      	uxtb	r1, r1
 801af2e:	7803      	ldrb	r3, [r0, #0]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d004      	beq.n	801af3e <strchr+0x12>
 801af34:	428b      	cmp	r3, r1
 801af36:	d100      	bne.n	801af3a <strchr+0xe>
 801af38:	4770      	bx	lr
 801af3a:	3001      	adds	r0, #1
 801af3c:	e7f7      	b.n	801af2e <strchr+0x2>
 801af3e:	424b      	negs	r3, r1
 801af40:	4159      	adcs	r1, r3
 801af42:	4249      	negs	r1, r1
 801af44:	4008      	ands	r0, r1
 801af46:	e7f7      	b.n	801af38 <strchr+0xc>

0801af48 <strstr>:
 801af48:	780a      	ldrb	r2, [r1, #0]
 801af4a:	b530      	push	{r4, r5, lr}
 801af4c:	2a00      	cmp	r2, #0
 801af4e:	d10c      	bne.n	801af6a <strstr+0x22>
 801af50:	bd30      	pop	{r4, r5, pc}
 801af52:	429a      	cmp	r2, r3
 801af54:	d108      	bne.n	801af68 <strstr+0x20>
 801af56:	2301      	movs	r3, #1
 801af58:	5ccc      	ldrb	r4, [r1, r3]
 801af5a:	2c00      	cmp	r4, #0
 801af5c:	d0f8      	beq.n	801af50 <strstr+0x8>
 801af5e:	5cc5      	ldrb	r5, [r0, r3]
 801af60:	42a5      	cmp	r5, r4
 801af62:	d101      	bne.n	801af68 <strstr+0x20>
 801af64:	3301      	adds	r3, #1
 801af66:	e7f7      	b.n	801af58 <strstr+0x10>
 801af68:	3001      	adds	r0, #1
 801af6a:	7803      	ldrb	r3, [r0, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d1f0      	bne.n	801af52 <strstr+0xa>
 801af70:	0018      	movs	r0, r3
 801af72:	e7ed      	b.n	801af50 <strstr+0x8>

0801af74 <_sbrk_r>:
 801af74:	2300      	movs	r3, #0
 801af76:	b570      	push	{r4, r5, r6, lr}
 801af78:	4d06      	ldr	r5, [pc, #24]	@ (801af94 <_sbrk_r+0x20>)
 801af7a:	0004      	movs	r4, r0
 801af7c:	0008      	movs	r0, r1
 801af7e:	602b      	str	r3, [r5, #0]
 801af80:	f7f1 f87a 	bl	800c078 <_sbrk>
 801af84:	1c43      	adds	r3, r0, #1
 801af86:	d103      	bne.n	801af90 <_sbrk_r+0x1c>
 801af88:	682b      	ldr	r3, [r5, #0]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d000      	beq.n	801af90 <_sbrk_r+0x1c>
 801af8e:	6023      	str	r3, [r4, #0]
 801af90:	bd70      	pop	{r4, r5, r6, pc}
 801af92:	46c0      	nop			@ (mov r8, r8)
 801af94:	200012e8 	.word	0x200012e8

0801af98 <__errno>:
 801af98:	4b01      	ldr	r3, [pc, #4]	@ (801afa0 <__errno+0x8>)
 801af9a:	6818      	ldr	r0, [r3, #0]
 801af9c:	4770      	bx	lr
 801af9e:	46c0      	nop			@ (mov r8, r8)
 801afa0:	2000026c 	.word	0x2000026c

0801afa4 <__libc_init_array>:
 801afa4:	b570      	push	{r4, r5, r6, lr}
 801afa6:	2600      	movs	r6, #0
 801afa8:	4c0c      	ldr	r4, [pc, #48]	@ (801afdc <__libc_init_array+0x38>)
 801afaa:	4d0d      	ldr	r5, [pc, #52]	@ (801afe0 <__libc_init_array+0x3c>)
 801afac:	1b64      	subs	r4, r4, r5
 801afae:	10a4      	asrs	r4, r4, #2
 801afb0:	42a6      	cmp	r6, r4
 801afb2:	d109      	bne.n	801afc8 <__libc_init_array+0x24>
 801afb4:	2600      	movs	r6, #0
 801afb6:	f000 f97d 	bl	801b2b4 <_init>
 801afba:	4c0a      	ldr	r4, [pc, #40]	@ (801afe4 <__libc_init_array+0x40>)
 801afbc:	4d0a      	ldr	r5, [pc, #40]	@ (801afe8 <__libc_init_array+0x44>)
 801afbe:	1b64      	subs	r4, r4, r5
 801afc0:	10a4      	asrs	r4, r4, #2
 801afc2:	42a6      	cmp	r6, r4
 801afc4:	d105      	bne.n	801afd2 <__libc_init_array+0x2e>
 801afc6:	bd70      	pop	{r4, r5, r6, pc}
 801afc8:	00b3      	lsls	r3, r6, #2
 801afca:	58eb      	ldr	r3, [r5, r3]
 801afcc:	4798      	blx	r3
 801afce:	3601      	adds	r6, #1
 801afd0:	e7ee      	b.n	801afb0 <__libc_init_array+0xc>
 801afd2:	00b3      	lsls	r3, r6, #2
 801afd4:	58eb      	ldr	r3, [r5, r3]
 801afd6:	4798      	blx	r3
 801afd8:	3601      	adds	r6, #1
 801afda:	e7f2      	b.n	801afc2 <__libc_init_array+0x1e>
 801afdc:	0801b5d4 	.word	0x0801b5d4
 801afe0:	0801b5d4 	.word	0x0801b5d4
 801afe4:	0801b5d8 	.word	0x0801b5d8
 801afe8:	0801b5d4 	.word	0x0801b5d4

0801afec <__retarget_lock_acquire_recursive>:
 801afec:	4770      	bx	lr

0801afee <__retarget_lock_release_recursive>:
 801afee:	4770      	bx	lr

0801aff0 <memcpy>:
 801aff0:	2300      	movs	r3, #0
 801aff2:	b510      	push	{r4, lr}
 801aff4:	429a      	cmp	r2, r3
 801aff6:	d100      	bne.n	801affa <memcpy+0xa>
 801aff8:	bd10      	pop	{r4, pc}
 801affa:	5ccc      	ldrb	r4, [r1, r3]
 801affc:	54c4      	strb	r4, [r0, r3]
 801affe:	3301      	adds	r3, #1
 801b000:	e7f8      	b.n	801aff4 <memcpy+0x4>
	...

0801b004 <_free_r>:
 801b004:	b570      	push	{r4, r5, r6, lr}
 801b006:	0005      	movs	r5, r0
 801b008:	1e0c      	subs	r4, r1, #0
 801b00a:	d010      	beq.n	801b02e <_free_r+0x2a>
 801b00c:	3c04      	subs	r4, #4
 801b00e:	6823      	ldr	r3, [r4, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	da00      	bge.n	801b016 <_free_r+0x12>
 801b014:	18e4      	adds	r4, r4, r3
 801b016:	0028      	movs	r0, r5
 801b018:	f7ff ff62 	bl	801aee0 <__malloc_lock>
 801b01c:	4a1d      	ldr	r2, [pc, #116]	@ (801b094 <_free_r+0x90>)
 801b01e:	6813      	ldr	r3, [r2, #0]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d105      	bne.n	801b030 <_free_r+0x2c>
 801b024:	6063      	str	r3, [r4, #4]
 801b026:	6014      	str	r4, [r2, #0]
 801b028:	0028      	movs	r0, r5
 801b02a:	f7ff ff61 	bl	801aef0 <__malloc_unlock>
 801b02e:	bd70      	pop	{r4, r5, r6, pc}
 801b030:	42a3      	cmp	r3, r4
 801b032:	d908      	bls.n	801b046 <_free_r+0x42>
 801b034:	6820      	ldr	r0, [r4, #0]
 801b036:	1821      	adds	r1, r4, r0
 801b038:	428b      	cmp	r3, r1
 801b03a:	d1f3      	bne.n	801b024 <_free_r+0x20>
 801b03c:	6819      	ldr	r1, [r3, #0]
 801b03e:	685b      	ldr	r3, [r3, #4]
 801b040:	1809      	adds	r1, r1, r0
 801b042:	6021      	str	r1, [r4, #0]
 801b044:	e7ee      	b.n	801b024 <_free_r+0x20>
 801b046:	001a      	movs	r2, r3
 801b048:	685b      	ldr	r3, [r3, #4]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d001      	beq.n	801b052 <_free_r+0x4e>
 801b04e:	42a3      	cmp	r3, r4
 801b050:	d9f9      	bls.n	801b046 <_free_r+0x42>
 801b052:	6811      	ldr	r1, [r2, #0]
 801b054:	1850      	adds	r0, r2, r1
 801b056:	42a0      	cmp	r0, r4
 801b058:	d10b      	bne.n	801b072 <_free_r+0x6e>
 801b05a:	6820      	ldr	r0, [r4, #0]
 801b05c:	1809      	adds	r1, r1, r0
 801b05e:	1850      	adds	r0, r2, r1
 801b060:	6011      	str	r1, [r2, #0]
 801b062:	4283      	cmp	r3, r0
 801b064:	d1e0      	bne.n	801b028 <_free_r+0x24>
 801b066:	6818      	ldr	r0, [r3, #0]
 801b068:	685b      	ldr	r3, [r3, #4]
 801b06a:	1841      	adds	r1, r0, r1
 801b06c:	6011      	str	r1, [r2, #0]
 801b06e:	6053      	str	r3, [r2, #4]
 801b070:	e7da      	b.n	801b028 <_free_r+0x24>
 801b072:	42a0      	cmp	r0, r4
 801b074:	d902      	bls.n	801b07c <_free_r+0x78>
 801b076:	230c      	movs	r3, #12
 801b078:	602b      	str	r3, [r5, #0]
 801b07a:	e7d5      	b.n	801b028 <_free_r+0x24>
 801b07c:	6820      	ldr	r0, [r4, #0]
 801b07e:	1821      	adds	r1, r4, r0
 801b080:	428b      	cmp	r3, r1
 801b082:	d103      	bne.n	801b08c <_free_r+0x88>
 801b084:	6819      	ldr	r1, [r3, #0]
 801b086:	685b      	ldr	r3, [r3, #4]
 801b088:	1809      	adds	r1, r1, r0
 801b08a:	6021      	str	r1, [r4, #0]
 801b08c:	6063      	str	r3, [r4, #4]
 801b08e:	6054      	str	r4, [r2, #4]
 801b090:	e7ca      	b.n	801b028 <_free_r+0x24>
 801b092:	46c0      	nop			@ (mov r8, r8)
 801b094:	200011ac 	.word	0x200011ac

0801b098 <sqrt>:
 801b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b09a:	0004      	movs	r4, r0
 801b09c:	000d      	movs	r5, r1
 801b09e:	f000 f821 	bl	801b0e4 <__ieee754_sqrt>
 801b0a2:	0022      	movs	r2, r4
 801b0a4:	0006      	movs	r6, r0
 801b0a6:	000f      	movs	r7, r1
 801b0a8:	002b      	movs	r3, r5
 801b0aa:	0020      	movs	r0, r4
 801b0ac:	0029      	movs	r1, r5
 801b0ae:	f7e7 f91b 	bl	80022e8 <__aeabi_dcmpun>
 801b0b2:	2800      	cmp	r0, #0
 801b0b4:	d113      	bne.n	801b0de <sqrt+0x46>
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	0020      	movs	r0, r4
 801b0bc:	0029      	movs	r1, r5
 801b0be:	f7e5 f9b7 	bl	8000430 <__aeabi_dcmplt>
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	d00b      	beq.n	801b0de <sqrt+0x46>
 801b0c6:	f7ff ff67 	bl	801af98 <__errno>
 801b0ca:	2321      	movs	r3, #33	@ 0x21
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	6003      	str	r3, [r0, #0]
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	0010      	movs	r0, r2
 801b0d4:	0019      	movs	r1, r3
 801b0d6:	f7e5 fe5f 	bl	8000d98 <__aeabi_ddiv>
 801b0da:	0006      	movs	r6, r0
 801b0dc:	000f      	movs	r7, r1
 801b0de:	0030      	movs	r0, r6
 801b0e0:	0039      	movs	r1, r7
 801b0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b0e4 <__ieee754_sqrt>:
 801b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0e6:	000a      	movs	r2, r1
 801b0e8:	000d      	movs	r5, r1
 801b0ea:	496d      	ldr	r1, [pc, #436]	@ (801b2a0 <__ieee754_sqrt+0x1bc>)
 801b0ec:	0004      	movs	r4, r0
 801b0ee:	0003      	movs	r3, r0
 801b0f0:	0008      	movs	r0, r1
 801b0f2:	b087      	sub	sp, #28
 801b0f4:	4028      	ands	r0, r5
 801b0f6:	4288      	cmp	r0, r1
 801b0f8:	d111      	bne.n	801b11e <__ieee754_sqrt+0x3a>
 801b0fa:	0022      	movs	r2, r4
 801b0fc:	002b      	movs	r3, r5
 801b0fe:	0020      	movs	r0, r4
 801b100:	0029      	movs	r1, r5
 801b102:	f7e6 fa8d 	bl	8001620 <__aeabi_dmul>
 801b106:	0002      	movs	r2, r0
 801b108:	000b      	movs	r3, r1
 801b10a:	0020      	movs	r0, r4
 801b10c:	0029      	movs	r1, r5
 801b10e:	f7e5 fadf 	bl	80006d0 <__aeabi_dadd>
 801b112:	0004      	movs	r4, r0
 801b114:	000d      	movs	r5, r1
 801b116:	0020      	movs	r0, r4
 801b118:	0029      	movs	r1, r5
 801b11a:	b007      	add	sp, #28
 801b11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b11e:	2d00      	cmp	r5, #0
 801b120:	dc11      	bgt.n	801b146 <__ieee754_sqrt+0x62>
 801b122:	0069      	lsls	r1, r5, #1
 801b124:	0849      	lsrs	r1, r1, #1
 801b126:	4321      	orrs	r1, r4
 801b128:	d0f5      	beq.n	801b116 <__ieee754_sqrt+0x32>
 801b12a:	2000      	movs	r0, #0
 801b12c:	4285      	cmp	r5, r0
 801b12e:	d010      	beq.n	801b152 <__ieee754_sqrt+0x6e>
 801b130:	0022      	movs	r2, r4
 801b132:	002b      	movs	r3, r5
 801b134:	0020      	movs	r0, r4
 801b136:	0029      	movs	r1, r5
 801b138:	f7e6 fd3a 	bl	8001bb0 <__aeabi_dsub>
 801b13c:	0002      	movs	r2, r0
 801b13e:	000b      	movs	r3, r1
 801b140:	f7e5 fe2a 	bl	8000d98 <__aeabi_ddiv>
 801b144:	e7e5      	b.n	801b112 <__ieee754_sqrt+0x2e>
 801b146:	1528      	asrs	r0, r5, #20
 801b148:	d115      	bne.n	801b176 <__ieee754_sqrt+0x92>
 801b14a:	2480      	movs	r4, #128	@ 0x80
 801b14c:	2100      	movs	r1, #0
 801b14e:	0364      	lsls	r4, r4, #13
 801b150:	e007      	b.n	801b162 <__ieee754_sqrt+0x7e>
 801b152:	0ada      	lsrs	r2, r3, #11
 801b154:	3815      	subs	r0, #21
 801b156:	055b      	lsls	r3, r3, #21
 801b158:	2a00      	cmp	r2, #0
 801b15a:	d0fa      	beq.n	801b152 <__ieee754_sqrt+0x6e>
 801b15c:	e7f5      	b.n	801b14a <__ieee754_sqrt+0x66>
 801b15e:	0052      	lsls	r2, r2, #1
 801b160:	3101      	adds	r1, #1
 801b162:	4222      	tst	r2, r4
 801b164:	d0fb      	beq.n	801b15e <__ieee754_sqrt+0x7a>
 801b166:	1e4c      	subs	r4, r1, #1
 801b168:	1b00      	subs	r0, r0, r4
 801b16a:	2420      	movs	r4, #32
 801b16c:	001d      	movs	r5, r3
 801b16e:	1a64      	subs	r4, r4, r1
 801b170:	40e5      	lsrs	r5, r4
 801b172:	408b      	lsls	r3, r1
 801b174:	432a      	orrs	r2, r5
 801b176:	494b      	ldr	r1, [pc, #300]	@ (801b2a4 <__ieee754_sqrt+0x1c0>)
 801b178:	0312      	lsls	r2, r2, #12
 801b17a:	1844      	adds	r4, r0, r1
 801b17c:	2180      	movs	r1, #128	@ 0x80
 801b17e:	0b12      	lsrs	r2, r2, #12
 801b180:	0349      	lsls	r1, r1, #13
 801b182:	4311      	orrs	r1, r2
 801b184:	07c0      	lsls	r0, r0, #31
 801b186:	d403      	bmi.n	801b190 <__ieee754_sqrt+0xac>
 801b188:	0fda      	lsrs	r2, r3, #31
 801b18a:	0049      	lsls	r1, r1, #1
 801b18c:	1851      	adds	r1, r2, r1
 801b18e:	005b      	lsls	r3, r3, #1
 801b190:	2500      	movs	r5, #0
 801b192:	1062      	asrs	r2, r4, #1
 801b194:	0049      	lsls	r1, r1, #1
 801b196:	2480      	movs	r4, #128	@ 0x80
 801b198:	9205      	str	r2, [sp, #20]
 801b19a:	0fda      	lsrs	r2, r3, #31
 801b19c:	1852      	adds	r2, r2, r1
 801b19e:	2016      	movs	r0, #22
 801b1a0:	0029      	movs	r1, r5
 801b1a2:	005b      	lsls	r3, r3, #1
 801b1a4:	03a4      	lsls	r4, r4, #14
 801b1a6:	190e      	adds	r6, r1, r4
 801b1a8:	4296      	cmp	r6, r2
 801b1aa:	dc02      	bgt.n	801b1b2 <__ieee754_sqrt+0xce>
 801b1ac:	1931      	adds	r1, r6, r4
 801b1ae:	1b92      	subs	r2, r2, r6
 801b1b0:	192d      	adds	r5, r5, r4
 801b1b2:	0fde      	lsrs	r6, r3, #31
 801b1b4:	0052      	lsls	r2, r2, #1
 801b1b6:	3801      	subs	r0, #1
 801b1b8:	1992      	adds	r2, r2, r6
 801b1ba:	005b      	lsls	r3, r3, #1
 801b1bc:	0864      	lsrs	r4, r4, #1
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d1f1      	bne.n	801b1a6 <__ieee754_sqrt+0xc2>
 801b1c2:	2620      	movs	r6, #32
 801b1c4:	2780      	movs	r7, #128	@ 0x80
 801b1c6:	0004      	movs	r4, r0
 801b1c8:	9604      	str	r6, [sp, #16]
 801b1ca:	063f      	lsls	r7, r7, #24
 801b1cc:	19c6      	adds	r6, r0, r7
 801b1ce:	46b4      	mov	ip, r6
 801b1d0:	4291      	cmp	r1, r2
 801b1d2:	db02      	blt.n	801b1da <__ieee754_sqrt+0xf6>
 801b1d4:	d114      	bne.n	801b200 <__ieee754_sqrt+0x11c>
 801b1d6:	429e      	cmp	r6, r3
 801b1d8:	d812      	bhi.n	801b200 <__ieee754_sqrt+0x11c>
 801b1da:	4660      	mov	r0, ip
 801b1dc:	4666      	mov	r6, ip
 801b1de:	19c0      	adds	r0, r0, r7
 801b1e0:	9100      	str	r1, [sp, #0]
 801b1e2:	2e00      	cmp	r6, #0
 801b1e4:	da03      	bge.n	801b1ee <__ieee754_sqrt+0x10a>
 801b1e6:	43c6      	mvns	r6, r0
 801b1e8:	0ff6      	lsrs	r6, r6, #31
 801b1ea:	198e      	adds	r6, r1, r6
 801b1ec:	9600      	str	r6, [sp, #0]
 801b1ee:	1a52      	subs	r2, r2, r1
 801b1f0:	4563      	cmp	r3, ip
 801b1f2:	4189      	sbcs	r1, r1
 801b1f4:	4249      	negs	r1, r1
 801b1f6:	1a52      	subs	r2, r2, r1
 801b1f8:	4661      	mov	r1, ip
 801b1fa:	1a5b      	subs	r3, r3, r1
 801b1fc:	9900      	ldr	r1, [sp, #0]
 801b1fe:	19e4      	adds	r4, r4, r7
 801b200:	0fde      	lsrs	r6, r3, #31
 801b202:	0052      	lsls	r2, r2, #1
 801b204:	1992      	adds	r2, r2, r6
 801b206:	9e04      	ldr	r6, [sp, #16]
 801b208:	005b      	lsls	r3, r3, #1
 801b20a:	3e01      	subs	r6, #1
 801b20c:	087f      	lsrs	r7, r7, #1
 801b20e:	9604      	str	r6, [sp, #16]
 801b210:	2e00      	cmp	r6, #0
 801b212:	d1db      	bne.n	801b1cc <__ieee754_sqrt+0xe8>
 801b214:	431a      	orrs	r2, r3
 801b216:	d01f      	beq.n	801b258 <__ieee754_sqrt+0x174>
 801b218:	4e23      	ldr	r6, [pc, #140]	@ (801b2a8 <__ieee754_sqrt+0x1c4>)
 801b21a:	4f24      	ldr	r7, [pc, #144]	@ (801b2ac <__ieee754_sqrt+0x1c8>)
 801b21c:	6830      	ldr	r0, [r6, #0]
 801b21e:	6871      	ldr	r1, [r6, #4]
 801b220:	683a      	ldr	r2, [r7, #0]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	9200      	str	r2, [sp, #0]
 801b226:	9301      	str	r3, [sp, #4]
 801b228:	6832      	ldr	r2, [r6, #0]
 801b22a:	6873      	ldr	r3, [r6, #4]
 801b22c:	9202      	str	r2, [sp, #8]
 801b22e:	9303      	str	r3, [sp, #12]
 801b230:	9a00      	ldr	r2, [sp, #0]
 801b232:	9b01      	ldr	r3, [sp, #4]
 801b234:	f7e6 fcbc 	bl	8001bb0 <__aeabi_dsub>
 801b238:	0002      	movs	r2, r0
 801b23a:	000b      	movs	r3, r1
 801b23c:	9802      	ldr	r0, [sp, #8]
 801b23e:	9903      	ldr	r1, [sp, #12]
 801b240:	f7e5 f900 	bl	8000444 <__aeabi_dcmple>
 801b244:	2800      	cmp	r0, #0
 801b246:	d007      	beq.n	801b258 <__ieee754_sqrt+0x174>
 801b248:	6830      	ldr	r0, [r6, #0]
 801b24a:	6871      	ldr	r1, [r6, #4]
 801b24c:	683a      	ldr	r2, [r7, #0]
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	1c67      	adds	r7, r4, #1
 801b252:	d10f      	bne.n	801b274 <__ieee754_sqrt+0x190>
 801b254:	9c04      	ldr	r4, [sp, #16]
 801b256:	3501      	adds	r5, #1
 801b258:	4b15      	ldr	r3, [pc, #84]	@ (801b2b0 <__ieee754_sqrt+0x1cc>)
 801b25a:	106a      	asrs	r2, r5, #1
 801b25c:	18d2      	adds	r2, r2, r3
 801b25e:	0863      	lsrs	r3, r4, #1
 801b260:	07ed      	lsls	r5, r5, #31
 801b262:	d502      	bpl.n	801b26a <__ieee754_sqrt+0x186>
 801b264:	2180      	movs	r1, #128	@ 0x80
 801b266:	0609      	lsls	r1, r1, #24
 801b268:	430b      	orrs	r3, r1
 801b26a:	9905      	ldr	r1, [sp, #20]
 801b26c:	001c      	movs	r4, r3
 801b26e:	0509      	lsls	r1, r1, #20
 801b270:	188d      	adds	r5, r1, r2
 801b272:	e750      	b.n	801b116 <__ieee754_sqrt+0x32>
 801b274:	f7e5 fa2c 	bl	80006d0 <__aeabi_dadd>
 801b278:	6877      	ldr	r7, [r6, #4]
 801b27a:	6836      	ldr	r6, [r6, #0]
 801b27c:	0002      	movs	r2, r0
 801b27e:	000b      	movs	r3, r1
 801b280:	0030      	movs	r0, r6
 801b282:	0039      	movs	r1, r7
 801b284:	f7e5 f8d4 	bl	8000430 <__aeabi_dcmplt>
 801b288:	2800      	cmp	r0, #0
 801b28a:	d004      	beq.n	801b296 <__ieee754_sqrt+0x1b2>
 801b28c:	3402      	adds	r4, #2
 801b28e:	4263      	negs	r3, r4
 801b290:	4163      	adcs	r3, r4
 801b292:	18ed      	adds	r5, r5, r3
 801b294:	e7e0      	b.n	801b258 <__ieee754_sqrt+0x174>
 801b296:	2301      	movs	r3, #1
 801b298:	3401      	adds	r4, #1
 801b29a:	439c      	bics	r4, r3
 801b29c:	e7dc      	b.n	801b258 <__ieee754_sqrt+0x174>
 801b29e:	46c0      	nop			@ (mov r8, r8)
 801b2a0:	7ff00000 	.word	0x7ff00000
 801b2a4:	fffffc01 	.word	0xfffffc01
 801b2a8:	200002c8 	.word	0x200002c8
 801b2ac:	200002c0 	.word	0x200002c0
 801b2b0:	3fe00000 	.word	0x3fe00000

0801b2b4 <_init>:
 801b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b6:	46c0      	nop			@ (mov r8, r8)
 801b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2ba:	bc08      	pop	{r3}
 801b2bc:	469e      	mov	lr, r3
 801b2be:	4770      	bx	lr

0801b2c0 <_fini>:
 801b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2c2:	46c0      	nop			@ (mov r8, r8)
 801b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2c6:	bc08      	pop	{r3}
 801b2c8:	469e      	mov	lr, r3
 801b2ca:	4770      	bx	lr
 801b2cc:	0000      	movs	r0, r0
	...

0801b2d0 <__FLASH_Program_Fast_veneer>:
 801b2d0:	b401      	push	{r0}
 801b2d2:	4802      	ldr	r0, [pc, #8]	@ (801b2dc <__FLASH_Program_Fast_veneer+0xc>)
 801b2d4:	4684      	mov	ip, r0
 801b2d6:	bc01      	pop	{r0}
 801b2d8:	4760      	bx	ip
 801b2da:	bf00      	nop
 801b2dc:	200002d1 	.word	0x200002d1

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <daysToMonth>:
200001b8:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001c8:	00000078 00000097 000000b6 000000d5     x...............
200001d8:	000000f3 00000111 00000130 0000014e     ........0...N...

200001e8 <PFULLDEF_Px_PORT>:
200001e8:	50000400 50000400 50000400 50000400     ...P...P...P...P
200001f8:	50000400                                ...P

200001fc <PFULLDEF_Px_PIN>:
200001fc:	40101010 00000010                       ...@....

20000204 <PFULLDEF_MPx_PORT>:
20000204:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000214 <PFULLDEF_MPx_PIN>:
20000214:	08080808                                ....

20000218 <firstFlagPuerta1>:
20000218:	00000001                                ....

2000021c <difName>:
2000021c:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
2000022c:	54432d41 462d464f 00000a0d 00000000     A-CTOF-F........
	...

20000250 <SystemCoreClock>:
20000250:	003d0900                                ..=.

20000254 <tRTP1000>:
20000254:	00000008 00000000 00000000 00000000     ................

20000264 <uwTickPrio>:
20000264:	00000004                                ....

20000268 <uwTickFreq>:
20000268:	00000001                                ....

2000026c <_impure_ptr>:
2000026c:	20000270                                p.. 

20000270 <_impure_data>:
20000270:	00000000 200011b0 20001218 20001280     ....... ... ... 
	...

200002c0 <tiny>:
200002c0:	c2f8f359 01a56e1f                       Y....n..

200002c8 <one>:
200002c8:	00000000 3ff00000                       .......?

200002d0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002d0:	b580      	push	{r7, lr}
200002d2:	b088      	sub	sp, #32
200002d4:	af00      	add	r7, sp, #0
200002d6:	6078      	str	r0, [r7, #4]
200002d8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002da:	231f      	movs	r3, #31
200002dc:	18fb      	adds	r3, r7, r3
200002de:	2200      	movs	r2, #0
200002e0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002e2:	687b      	ldr	r3, [r7, #4]
200002e4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002e6:	683b      	ldr	r3, [r7, #0]
200002e8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002ea:	4b1a      	ldr	r3, [pc, #104]	@ (20000354 <FLASH_Program_Fast+0x84>)
200002ec:	695a      	ldr	r2, [r3, #20]
200002ee:	4b19      	ldr	r3, [pc, #100]	@ (20000354 <FLASH_Program_Fast+0x84>)
200002f0:	2180      	movs	r1, #128	@ 0x80
200002f2:	02c9      	lsls	r1, r1, #11
200002f4:	430a      	orrs	r2, r1
200002f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002f8:	f3ef 8310 	mrs	r3, PRIMASK
200002fc:	60fb      	str	r3, [r7, #12]
  return(result);
200002fe:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000302:	b672      	cpsid	i
}
20000304:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000306:	e00f      	b.n	20000328 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000308:	697a      	ldr	r2, [r7, #20]
2000030a:	69bb      	ldr	r3, [r7, #24]
2000030c:	6812      	ldr	r2, [r2, #0]
2000030e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000310:	697b      	ldr	r3, [r7, #20]
20000312:	3304      	adds	r3, #4
20000314:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000316:	69bb      	ldr	r3, [r7, #24]
20000318:	3304      	adds	r3, #4
2000031a:	61bb      	str	r3, [r7, #24]
    index++;
2000031c:	211f      	movs	r1, #31
2000031e:	187b      	adds	r3, r7, r1
20000320:	781a      	ldrb	r2, [r3, #0]
20000322:	187b      	adds	r3, r7, r1
20000324:	3201      	adds	r2, #1
20000326:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000328:	231f      	movs	r3, #31
2000032a:	18fb      	adds	r3, r7, r3
2000032c:	781b      	ldrb	r3, [r3, #0]
2000032e:	2b3f      	cmp	r3, #63	@ 0x3f
20000330:	d9ea      	bls.n	20000308 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000332:	46c0      	nop			@ (mov r8, r8)
20000334:	4b07      	ldr	r3, [pc, #28]	@ (20000354 <FLASH_Program_Fast+0x84>)
20000336:	691a      	ldr	r2, [r3, #16]
20000338:	2380      	movs	r3, #128	@ 0x80
2000033a:	025b      	lsls	r3, r3, #9
2000033c:	4013      	ands	r3, r2
2000033e:	d1f9      	bne.n	20000334 <FLASH_Program_Fast+0x64>
20000340:	693b      	ldr	r3, [r7, #16]
20000342:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000344:	68bb      	ldr	r3, [r7, #8]
20000346:	f383 8810 	msr	PRIMASK, r3
}
2000034a:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000034c:	46c0      	nop			@ (mov r8, r8)
2000034e:	46bd      	mov	sp, r7
20000350:	b008      	add	sp, #32
20000352:	bd80      	pop	{r7, pc}
20000354:	40022000 	.word	0x40022000
