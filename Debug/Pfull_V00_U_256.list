
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801e7f0  0801e7f0  0001a7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text         00018838  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000002dc  080188f8  080188f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08018bd4  08018bd4  00023000  2**0
                  CONTENTS
  7 .ARM          00000008  08018bd4  08018bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08018bdc  08018bdc  00023000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08018bdc  08018bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000004  08018be0  08018be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         00000304  20000000  08018be4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 12 .myBufSectionEEPROM 00000094  20000304  08018ee8  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00000f34  20000398  08018f7c  0001a398  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  200012cc  08018f7c  0001b2cc  2**0
                  ALLOC
 15 .ARM.attributes 00000028  00000000  00000000  00023000  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002e395  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006051  00000000  00000000  000513bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001f98  00000000  00000000  00057410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001920  00000000  00000000  000593a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00020f5b  00000000  00000000  0005acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0000d132  00000000  00000000  0007bc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00088d55  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000073d4  00000000  00000000  00088d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000084  00000000  00000000  0009016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000398 	.word	0x20000398
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080188cc 	.word	0x080188cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000039c 	.word	0x2000039c
 8000104:	080188cc 	.word	0x080188cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__clzsi2>:
 8000404:	211c      	movs	r1, #28
 8000406:	2301      	movs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	4298      	cmp	r0, r3
 800040c:	d301      	bcc.n	8000412 <__clzsi2+0xe>
 800040e:	0c00      	lsrs	r0, r0, #16
 8000410:	3910      	subs	r1, #16
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	4298      	cmp	r0, r3
 8000416:	d301      	bcc.n	800041c <__clzsi2+0x18>
 8000418:	0a00      	lsrs	r0, r0, #8
 800041a:	3908      	subs	r1, #8
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	4298      	cmp	r0, r3
 8000420:	d301      	bcc.n	8000426 <__clzsi2+0x22>
 8000422:	0900      	lsrs	r0, r0, #4
 8000424:	3904      	subs	r1, #4
 8000426:	a202      	add	r2, pc, #8	@ (adr r2, 8000430 <__clzsi2+0x2c>)
 8000428:	5c10      	ldrb	r0, [r2, r0]
 800042a:	1840      	adds	r0, r0, r1
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	02020304 	.word	0x02020304
 8000434:	01010101 	.word	0x01010101
	...

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	@ (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	@ (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	ffffff9d 	.word	0xffffff9d
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__udivmoddi4>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	464e      	mov	r6, r9
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	0004      	movs	r4, r0
 800048e:	000d      	movs	r5, r1
 8000490:	4692      	mov	sl, r2
 8000492:	4699      	mov	r9, r3
 8000494:	b083      	sub	sp, #12
 8000496:	428b      	cmp	r3, r1
 8000498:	d830      	bhi.n	80004fc <__udivmoddi4+0x7c>
 800049a:	d02d      	beq.n	80004f8 <__udivmoddi4+0x78>
 800049c:	4649      	mov	r1, r9
 800049e:	4650      	mov	r0, sl
 80004a0:	f000 f8ba 	bl	8000618 <__clzdi2>
 80004a4:	0029      	movs	r1, r5
 80004a6:	0006      	movs	r6, r0
 80004a8:	0020      	movs	r0, r4
 80004aa:	f000 f8b5 	bl	8000618 <__clzdi2>
 80004ae:	1a33      	subs	r3, r6, r0
 80004b0:	4698      	mov	r8, r3
 80004b2:	3b20      	subs	r3, #32
 80004b4:	d434      	bmi.n	8000520 <__udivmoddi4+0xa0>
 80004b6:	469b      	mov	fp, r3
 80004b8:	4653      	mov	r3, sl
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	4642      	mov	r2, r8
 80004c0:	001f      	movs	r7, r3
 80004c2:	4653      	mov	r3, sl
 80004c4:	4093      	lsls	r3, r2
 80004c6:	001e      	movs	r6, r3
 80004c8:	42af      	cmp	r7, r5
 80004ca:	d83b      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d100      	bne.n	80004d2 <__udivmoddi4+0x52>
 80004d0:	e079      	b.n	80005c6 <__udivmoddi4+0x146>
 80004d2:	465b      	mov	r3, fp
 80004d4:	1ba4      	subs	r4, r4, r6
 80004d6:	41bd      	sbcs	r5, r7
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da00      	bge.n	80004de <__udivmoddi4+0x5e>
 80004dc:	e076      	b.n	80005cc <__udivmoddi4+0x14c>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	465a      	mov	r2, fp
 80004ea:	4093      	lsls	r3, r2
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	4642      	mov	r2, r8
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	e029      	b.n	800054c <__udivmoddi4+0xcc>
 80004f8:	4282      	cmp	r2, r0
 80004fa:	d9cf      	bls.n	800049c <__udivmoddi4+0x1c>
 80004fc:	2200      	movs	r2, #0
 80004fe:	2300      	movs	r3, #0
 8000500:	9200      	str	r2, [sp, #0]
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <__udivmoddi4+0x8e>
 800050a:	601c      	str	r4, [r3, #0]
 800050c:	605d      	str	r5, [r3, #4]
 800050e:	9800      	ldr	r0, [sp, #0]
 8000510:	9901      	ldr	r1, [sp, #4]
 8000512:	b003      	add	sp, #12
 8000514:	bcf0      	pop	{r4, r5, r6, r7}
 8000516:	46bb      	mov	fp, r7
 8000518:	46b2      	mov	sl, r6
 800051a:	46a9      	mov	r9, r5
 800051c:	46a0      	mov	r8, r4
 800051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000520:	4642      	mov	r2, r8
 8000522:	469b      	mov	fp, r3
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	4652      	mov	r2, sl
 800052a:	40da      	lsrs	r2, r3
 800052c:	4641      	mov	r1, r8
 800052e:	0013      	movs	r3, r2
 8000530:	464a      	mov	r2, r9
 8000532:	408a      	lsls	r2, r1
 8000534:	0017      	movs	r7, r2
 8000536:	4642      	mov	r2, r8
 8000538:	431f      	orrs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d9c3      	bls.n	80004cc <__udivmoddi4+0x4c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	4643      	mov	r3, r8
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0d8      	beq.n	8000504 <__udivmoddi4+0x84>
 8000552:	07fb      	lsls	r3, r7, #31
 8000554:	0872      	lsrs	r2, r6, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	4646      	mov	r6, r8
 800055a:	087b      	lsrs	r3, r7, #1
 800055c:	e00e      	b.n	800057c <__udivmoddi4+0xfc>
 800055e:	42ab      	cmp	r3, r5
 8000560:	d101      	bne.n	8000566 <__udivmoddi4+0xe6>
 8000562:	42a2      	cmp	r2, r4
 8000564:	d80c      	bhi.n	8000580 <__udivmoddi4+0x100>
 8000566:	1aa4      	subs	r4, r4, r2
 8000568:	419d      	sbcs	r5, r3
 800056a:	2001      	movs	r0, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2100      	movs	r1, #0
 8000572:	3e01      	subs	r6, #1
 8000574:	1824      	adds	r4, r4, r0
 8000576:	414d      	adcs	r5, r1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d006      	beq.n	800058a <__udivmoddi4+0x10a>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d9ee      	bls.n	800055e <__udivmoddi4+0xde>
 8000580:	3e01      	subs	r6, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2e00      	cmp	r6, #0
 8000588:	d1f8      	bne.n	800057c <__udivmoddi4+0xfc>
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	465b      	mov	r3, fp
 8000590:	1900      	adds	r0, r0, r4
 8000592:	4169      	adcs	r1, r5
 8000594:	2b00      	cmp	r3, #0
 8000596:	db24      	blt.n	80005e2 <__udivmoddi4+0x162>
 8000598:	002b      	movs	r3, r5
 800059a:	465a      	mov	r2, fp
 800059c:	4644      	mov	r4, r8
 800059e:	40d3      	lsrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db2a      	blt.n	8000604 <__udivmoddi4+0x184>
 80005ae:	0026      	movs	r6, r4
 80005b0:	409e      	lsls	r6, r3
 80005b2:	0033      	movs	r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	4647      	mov	r7, r8
 80005b8:	40be      	lsls	r6, r7
 80005ba:	0032      	movs	r2, r6
 80005bc:	1a80      	subs	r0, r0, r2
 80005be:	4199      	sbcs	r1, r3
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	e79e      	b.n	8000504 <__udivmoddi4+0x84>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d8bc      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80005ca:	e782      	b.n	80004d2 <__udivmoddi4+0x52>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	40da      	lsrs	r2, r3
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	e785      	b.n	80004ee <__udivmoddi4+0x6e>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4646      	mov	r6, r8
 80005ec:	409a      	lsls	r2, r3
 80005ee:	0023      	movs	r3, r4
 80005f0:	40f3      	lsrs	r3, r6
 80005f2:	4644      	mov	r4, r8
 80005f4:	4313      	orrs	r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	40e2      	lsrs	r2, r4
 80005fa:	001c      	movs	r4, r3
 80005fc:	465b      	mov	r3, fp
 80005fe:	0015      	movs	r5, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	dad4      	bge.n	80005ae <__udivmoddi4+0x12e>
 8000604:	4642      	mov	r2, r8
 8000606:	002f      	movs	r7, r5
 8000608:	2320      	movs	r3, #32
 800060a:	0026      	movs	r6, r4
 800060c:	4097      	lsls	r7, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	40de      	lsrs	r6, r3
 8000612:	003b      	movs	r3, r7
 8000614:	4333      	orrs	r3, r6
 8000616:	e7cd      	b.n	80005b4 <__udivmoddi4+0x134>

08000618 <__clzdi2>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2900      	cmp	r1, #0
 800061c:	d103      	bne.n	8000626 <__clzdi2+0xe>
 800061e:	f7ff fef1 	bl	8000404 <__clzsi2>
 8000622:	3020      	adds	r0, #32
 8000624:	e002      	b.n	800062c <__clzdi2+0x14>
 8000626:	0008      	movs	r0, r1
 8000628:	f7ff feec 	bl	8000404 <__clzsi2>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)

08000630 <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	f00f ffdb 	bl	80105f4 <HAL_FLASH_Unlock>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d1fb      	bne.n	800063a <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 8000642:	2410      	movs	r4, #16
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2310      	movs	r3, #16
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f018 f87f 	bl	8018750 <memset>
	pEraseInit.NbPages = 1;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2201      	movs	r2, #1
 8000658:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2202      	movs	r2, #2
 8000664:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 800066a:	230c      	movs	r3, #12
 800066c:	18fa      	adds	r2, r7, r3
 800066e:	187b      	adds	r3, r7, r1
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f010 f8b2 	bl	80107dc <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	f00f ffdf 	bl	801063c <HAL_FLASH_Lock>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d1fb      	bne.n	800067a <erasePage+0x4a>
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b009      	add	sp, #36	@ 0x24
 800068a:	bd90      	pop	{r4, r7, pc}

0800068c <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Adrress_, uint64_t * arrayData_,uint8_t size_){
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	f00f ffaa 	bl	80105f4 <HAL_FLASH_Unlock>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d1fb      	bne.n	800069c <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 80006a4:	2317      	movs	r3, #23
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e013      	b.n	80006d6 <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Adrress_, arrayData_[i]);
 80006ae:	68f9      	ldr	r1, [r7, #12]
 80006b0:	2417      	movs	r4, #23
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	18d3      	adds	r3, r2, r3
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	2001      	movs	r0, #1
 80006c2:	f00f ff49 	bl	8010558 <HAL_FLASH_Program>
		Adrress_++;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3308      	adds	r3, #8
 80006ca:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	3201      	adds	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	2317      	movs	r3, #23
 80006d8:	18fa      	adds	r2, r7, r3
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3e4      	bcc.n	80006ae <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	f00f ffa9 	bl	801063c <HAL_FLASH_Lock>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d1fb      	bne.n	80006e6 <writeFLASH+0x5a>
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b007      	add	sp, #28
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	46c6      	mov	lr, r8
 80006fc:	b500      	push	{lr}
 80006fe:	4ce0      	ldr	r4, [pc, #896]	@ (8000a80 <initEEPROMEmulated+0x388>)
 8000700:	44a5      	add	sp, r4
 8000702:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 8000704:	4bdf      	ldr	r3, [pc, #892]	@ (8000a84 <initEEPROMEmulated+0x38c>)
 8000706:	4ae0      	ldr	r2, [pc, #896]	@ (8000a88 <initEEPROMEmulated+0x390>)
 8000708:	2430      	movs	r4, #48	@ 0x30
 800070a:	1912      	adds	r2, r2, r4
 800070c:	2108      	movs	r1, #8
 800070e:	468c      	mov	ip, r1
 8000710:	44bc      	add	ip, r7
 8000712:	4462      	add	r2, ip
 8000714:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 8000716:	4bdd      	ldr	r3, [pc, #884]	@ (8000a8c <initEEPROMEmulated+0x394>)
 8000718:	191b      	adds	r3, r3, r4
 800071a:	2208      	movs	r2, #8
 800071c:	18ba      	adds	r2, r7, r2
 800071e:	189a      	adds	r2, r3, r2
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 8000724:	49da      	ldr	r1, [pc, #872]	@ (8000a90 <initEEPROMEmulated+0x398>)
 8000726:	190b      	adds	r3, r1, r4
 8000728:	2208      	movs	r2, #8
 800072a:	18ba      	adds	r2, r7, r2
 800072c:	189a      	adds	r2, r3, r2
 800072e:	2301      	movs	r3, #1
 8000730:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 8000732:	4bd8      	ldr	r3, [pc, #864]	@ (8000a94 <initEEPROMEmulated+0x39c>)
 8000734:	191b      	adds	r3, r3, r4
 8000736:	2208      	movs	r2, #8
 8000738:	18ba      	adds	r2, r7, r2
 800073a:	189a      	adds	r2, r3, r2
 800073c:	237e      	movs	r3, #126	@ 0x7e
 800073e:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ;
 8000740:	4bd5      	ldr	r3, [pc, #852]	@ (8000a98 <initEEPROMEmulated+0x3a0>)
 8000742:	4ad6      	ldr	r2, [pc, #856]	@ (8000a9c <initEEPROMEmulated+0x3a4>)
 8000744:	1910      	adds	r0, r2, r4
 8000746:	2508      	movs	r5, #8
 8000748:	46ac      	mov	ip, r5
 800074a:	44bc      	add	ip, r7
 800074c:	4460      	add	r0, ip
 800074e:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){
 8000750:	1913      	adds	r3, r2, r4
 8000752:	2208      	movs	r2, #8
 8000754:	4694      	mov	ip, r2
 8000756:	44bc      	add	ip, r7
 8000758:	4463      	add	r3, ip
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4bc9      	ldr	r3, [pc, #804]	@ (8000a84 <initEEPROMEmulated+0x38c>)
 8000760:	429a      	cmp	r2, r3
 8000762:	d025      	beq.n	80007b0 <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 8000764:	190b      	adds	r3, r1, r4
 8000766:	2208      	movs	r2, #8
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	189a      	adds	r2, r3, r2
 800076c:	2300      	movs	r3, #0
 800076e:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8000770:	4bcb      	ldr	r3, [pc, #812]	@ (8000aa0 <initEEPROMEmulated+0x3a8>)
 8000772:	2295      	movs	r2, #149	@ 0x95
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	189b      	adds	r3, r3, r2
 8000778:	2230      	movs	r2, #48	@ 0x30
 800077a:	4694      	mov	ip, r2
 800077c:	2208      	movs	r2, #8
 800077e:	4690      	mov	r8, r2
 8000780:	44b8      	add	r8, r7
 8000782:	44c4      	add	ip, r8
 8000784:	4463      	add	r3, ip
 8000786:	0018      	movs	r0, r3
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f017 ffde 	bl	8018750 <memset>
	pointArray_ = arrayDataP_;
 8000794:	2390      	movs	r3, #144	@ 0x90
 8000796:	191b      	adds	r3, r3, r4
 8000798:	2208      	movs	r2, #8
 800079a:	4694      	mov	ip, r2
 800079c:	44bc      	add	ip, r7
 800079e:	4463      	add	r3, ip
 80007a0:	4ac0      	ldr	r2, [pc, #768]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 80007a2:	1912      	adds	r2, r2, r4
 80007a4:	2108      	movs	r1, #8
 80007a6:	468c      	mov	ip, r1
 80007a8:	44bc      	add	ip, r7
 80007aa:	4462      	add	r2, ip
 80007ac:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 80007ae:	e045      	b.n	800083c <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 80007b0:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 80007b2:	4bbd      	ldr	r3, [pc, #756]	@ (8000aa8 <initEEPROMEmulated+0x3b0>)
 80007b4:	4ab9      	ldr	r2, [pc, #740]	@ (8000a9c <initEEPROMEmulated+0x3a4>)
 80007b6:	2430      	movs	r4, #48	@ 0x30
 80007b8:	1911      	adds	r1, r2, r4
 80007ba:	2008      	movs	r0, #8
 80007bc:	4684      	mov	ip, r0
 80007be:	44bc      	add	ip, r7
 80007c0:	4461      	add	r1, ip
 80007c2:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){
 80007c4:	1913      	adds	r3, r2, r4
 80007c6:	2208      	movs	r2, #8
 80007c8:	4694      	mov	ip, r2
 80007ca:	44bc      	add	ip, r7
 80007cc:	4463      	add	r3, ip
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4bb6      	ldr	r3, [pc, #728]	@ (8000aac <initEEPROMEmulated+0x3b4>)
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d100      	bne.n	80007da <initEEPROMEmulated+0xe2>
 80007d8:	e14a      	b.n	8000a70 <initEEPROMEmulated+0x378>
		return;
	}
	varInit = (uint8_t *) Page_127;
 80007da:	4bb4      	ldr	r3, [pc, #720]	@ (8000aac <initEEPROMEmulated+0x3b4>)
 80007dc:	4aaa      	ldr	r2, [pc, #680]	@ (8000a88 <initEEPROMEmulated+0x390>)
 80007de:	1912      	adds	r2, r2, r4
 80007e0:	2108      	movs	r1, #8
 80007e2:	468c      	mov	ip, r1
 80007e4:	44bc      	add	ip, r7
 80007e6:	4462      	add	r2, ip
 80007e8:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80007ea:	4bb1      	ldr	r3, [pc, #708]	@ (8000ab0 <initEEPROMEmulated+0x3b8>)
 80007ec:	2295      	movs	r2, #149	@ 0x95
 80007ee:	00d2      	lsls	r2, r2, #3
 80007f0:	189b      	adds	r3, r3, r2
 80007f2:	2230      	movs	r2, #48	@ 0x30
 80007f4:	4694      	mov	ip, r2
 80007f6:	2208      	movs	r2, #8
 80007f8:	4690      	mov	r8, r2
 80007fa:	44b8      	add	r8, r7
 80007fc:	44c4      	add	ip, r8
 80007fe:	4463      	add	r3, ip
 8000800:	0018      	movs	r0, r3
 8000802:	2390      	movs	r3, #144	@ 0x90
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f017 ffa2 	bl	8018750 <memset>
	size_ = sizeEEPROM_V;
 800080c:	4b9f      	ldr	r3, [pc, #636]	@ (8000a8c <initEEPROMEmulated+0x394>)
 800080e:	191b      	adds	r3, r3, r4
 8000810:	2208      	movs	r2, #8
 8000812:	18ba      	adds	r2, r7, r2
 8000814:	189a      	adds	r2, r3, r2
 8000816:	2312      	movs	r3, #18
 8000818:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 800081a:	2308      	movs	r3, #8
 800081c:	18e3      	adds	r3, r4, r3
 800081e:	19db      	adds	r3, r3, r7
 8000820:	4aa0      	ldr	r2, [pc, #640]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 8000822:	1912      	adds	r2, r2, r4
 8000824:	2108      	movs	r1, #8
 8000826:	468c      	mov	ip, r1
 8000828:	44bc      	add	ip, r7
 800082a:	4462      	add	r2, ip
 800082c:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 800082e:	4b99      	ldr	r3, [pc, #612]	@ (8000a94 <initEEPROMEmulated+0x39c>)
 8000830:	191b      	adds	r3, r3, r4
 8000832:	2208      	movs	r2, #8
 8000834:	18ba      	adds	r2, r7, r2
 8000836:	189a      	adds	r2, r3, r2
 8000838:	237f      	movs	r3, #127	@ 0x7f
 800083a:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 800083c:	4b9d      	ldr	r3, [pc, #628]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	189b      	adds	r3, r3, r2
 8000842:	2208      	movs	r2, #8
 8000844:	18ba      	adds	r2, r7, r2
 8000846:	189a      	adds	r2, r3, r2
 8000848:	2300      	movs	r3, #0
 800084a:	7013      	strb	r3, [r2, #0]
 800084c:	e0d9      	b.n	8000a02 <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 800084e:	4e8e      	ldr	r6, [pc, #568]	@ (8000a88 <initEEPROMEmulated+0x390>)
 8000850:	2230      	movs	r2, #48	@ 0x30
 8000852:	18b3      	adds	r3, r6, r2
 8000854:	2108      	movs	r1, #8
 8000856:	468c      	mov	ip, r1
 8000858:	44bc      	add	ip, r7
 800085a:	4463      	add	r3, ip
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	7819      	ldrb	r1, [r3, #0]
 8000860:	4894      	ldr	r0, [pc, #592]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 8000862:	0014      	movs	r4, r2
 8000864:	1883      	adds	r3, r0, r2
 8000866:	2208      	movs	r2, #8
 8000868:	4694      	mov	ip, r2
 800086a:	44bc      	add	ip, r7
 800086c:	4463      	add	r3, ip
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	00da      	lsls	r2, r3, #3
 8000872:	4b8c      	ldr	r3, [pc, #560]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 8000874:	191b      	adds	r3, r3, r4
 8000876:	2508      	movs	r5, #8
 8000878:	46ac      	mov	ip, r5
 800087a:	44bc      	add	ip, r7
 800087c:	4463      	add	r3, ip
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	189b      	adds	r3, r3, r2
 8000882:	6239      	str	r1, [r7, #32]
 8000884:	2200      	movs	r2, #0
 8000886:	627a      	str	r2, [r7, #36]	@ 0x24
 8000888:	6a39      	ldr	r1, [r7, #32]
 800088a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800088c:	6019      	str	r1, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 8000890:	1903      	adds	r3, r0, r4
 8000892:	2208      	movs	r2, #8
 8000894:	4694      	mov	ip, r2
 8000896:	44bc      	add	ip, r7
 8000898:	4463      	add	r3, ip
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	00da      	lsls	r2, r3, #3
 800089e:	4981      	ldr	r1, [pc, #516]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 80008a0:	190b      	adds	r3, r1, r4
 80008a2:	2108      	movs	r1, #8
 80008a4:	1879      	adds	r1, r7, r1
 80008a6:	1859      	adds	r1, r3, r1
 80008a8:	680b      	ldr	r3, [r1, #0]
 80008aa:	189b      	adds	r3, r3, r2
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	6859      	ldr	r1, [r3, #4]
 80008b0:	1933      	adds	r3, r6, r4
 80008b2:	2208      	movs	r2, #8
 80008b4:	18ba      	adds	r2, r7, r2
 80008b6:	189a      	adds	r2, r3, r2
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	17db      	asrs	r3, r3, #31
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	0012      	movs	r2, r2
 80008c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ca:	4b7a      	ldr	r3, [pc, #488]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 80008cc:	191b      	adds	r3, r3, r4
 80008ce:	2208      	movs	r2, #8
 80008d0:	4694      	mov	ip, r2
 80008d2:	44bc      	add	ip, r7
 80008d4:	4463      	add	r3, ip
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	00da      	lsls	r2, r3, #3
 80008da:	4b72      	ldr	r3, [pc, #456]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 80008dc:	191b      	adds	r3, r3, r4
 80008de:	2508      	movs	r5, #8
 80008e0:	46ac      	mov	ip, r5
 80008e2:	44bc      	add	ip, r7
 80008e4:	4463      	add	r3, ip
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	189b      	adds	r3, r3, r2
 80008ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008ec:	4302      	orrs	r2, r0
 80008ee:	613a      	str	r2, [r7, #16]
 80008f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008f2:	430a      	orrs	r2, r1
 80008f4:	617a      	str	r2, [r7, #20]
 80008f6:	6939      	ldr	r1, [r7, #16]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	6019      	str	r1, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80008fe:	0021      	movs	r1, r4
 8000900:	1873      	adds	r3, r6, r1
 8000902:	2208      	movs	r2, #8
 8000904:	18ba      	adds	r2, r7, r2
 8000906:	189a      	adds	r2, r3, r2
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab8 <initEEPROMEmulated+0x3c0>)
 800090c:	429a      	cmp	r2, r3
 800090e:	d35b      	bcc.n	80009c8 <initEEPROMEmulated+0x2d0>
 8000910:	4a5f      	ldr	r2, [pc, #380]	@ (8000a90 <initEEPROMEmulated+0x398>)
 8000912:	1853      	adds	r3, r2, r1
 8000914:	2208      	movs	r2, #8
 8000916:	4694      	mov	ip, r2
 8000918:	44bc      	add	ip, r7
 800091a:	4463      	add	r3, ip
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d052      	beq.n	80009c8 <initEEPROMEmulated+0x2d0>
			varInit++;
 8000922:	1873      	adds	r3, r6, r1
 8000924:	2208      	movs	r2, #8
 8000926:	18ba      	adds	r2, r7, r2
 8000928:	189a      	adds	r2, r3, r2
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	1872      	adds	r2, r6, r1
 8000930:	2008      	movs	r0, #8
 8000932:	4684      	mov	ip, r0
 8000934:	44bc      	add	ip, r7
 8000936:	4462      	add	r2, ip
 8000938:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 800093a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 800093c:	0008      	movs	r0, r1
 800093e:	185b      	adds	r3, r3, r1
 8000940:	2208      	movs	r2, #8
 8000942:	4694      	mov	ip, r2
 8000944:	44bc      	add	ip, r7
 8000946:	4463      	add	r3, ip
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	00da      	lsls	r2, r3, #3
 800094c:	4955      	ldr	r1, [pc, #340]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 800094e:	0004      	movs	r4, r0
 8000950:	1809      	adds	r1, r1, r0
 8000952:	2308      	movs	r3, #8
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	18c8      	adds	r0, r1, r3
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	189b      	adds	r3, r3, r2
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	0023      	movs	r3, r4
 8000962:	001c      	movs	r4, r3
 8000964:	18f2      	adds	r2, r6, r3
 8000966:	2308      	movs	r3, #8
 8000968:	469c      	mov	ip, r3
 800096a:	44bc      	add	ip, r7
 800096c:	4462      	add	r2, ip
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	633b      	str	r3, [r7, #48]	@ 0x30
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
 8000978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800097a:	0e13      	lsrs	r3, r2, #24
 800097c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800097e:	0212      	lsls	r2, r2, #8
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	431a      	orrs	r2, r3
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800098a:	0213      	lsls	r3, r2, #8
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b49      	ldr	r3, [pc, #292]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 8000990:	0026      	movs	r6, r4
 8000992:	199b      	adds	r3, r3, r6
 8000994:	2208      	movs	r2, #8
 8000996:	4694      	mov	ip, r2
 8000998:	44bc      	add	ip, r7
 800099a:	4463      	add	r3, ip
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	00da      	lsls	r2, r3, #3
 80009a0:	4b40      	ldr	r3, [pc, #256]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 80009a2:	199b      	adds	r3, r3, r6
 80009a4:	2408      	movs	r4, #8
 80009a6:	46a4      	mov	ip, r4
 80009a8:	44bc      	add	ip, r7
 80009aa:	4463      	add	r3, ip
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	189b      	adds	r3, r3, r2
 80009b0:	0002      	movs	r2, r0
 80009b2:	683c      	ldr	r4, [r7, #0]
 80009b4:	4322      	orrs	r2, r4
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	000a      	movs	r2, r1
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	430a      	orrs	r2, r1
 80009be:	60fa      	str	r2, [r7, #12]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	6019      	str	r1, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80009c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a88 <initEEPROMEmulated+0x390>)
 80009ca:	2130      	movs	r1, #48	@ 0x30
 80009cc:	1853      	adds	r3, r2, r1
 80009ce:	2008      	movs	r0, #8
 80009d0:	4684      	mov	ip, r0
 80009d2:	44bc      	add	ip, r7
 80009d4:	4463      	add	r3, ip
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	1852      	adds	r2, r2, r1
 80009dc:	2008      	movs	r0, #8
 80009de:	4684      	mov	ip, r0
 80009e0:	44bc      	add	ip, r7
 80009e2:	4462      	add	r2, ip
 80009e4:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80009e6:	4a33      	ldr	r2, [pc, #204]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 80009e8:	1853      	adds	r3, r2, r1
 80009ea:	2008      	movs	r0, #8
 80009ec:	4684      	mov	ip, r0
 80009ee:	44bc      	add	ip, r7
 80009f0:	4463      	add	r3, ip
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	1852      	adds	r2, r2, r1
 80009f6:	2108      	movs	r1, #8
 80009f8:	468c      	mov	ip, r1
 80009fa:	44bc      	add	ip, r7
 80009fc:	4462      	add	r2, ip
 80009fe:	3301      	adds	r3, #1
 8000a00:	7013      	strb	r3, [r2, #0]
 8000a02:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <initEEPROMEmulated+0x3bc>)
 8000a04:	2130      	movs	r1, #48	@ 0x30
 8000a06:	185b      	adds	r3, r3, r1
 8000a08:	2208      	movs	r2, #8
 8000a0a:	18ba      	adds	r2, r7, r2
 8000a0c:	189a      	adds	r2, r3, r2
 8000a0e:	4e1f      	ldr	r6, [pc, #124]	@ (8000a8c <initEEPROMEmulated+0x394>)
 8000a10:	1873      	adds	r3, r6, r1
 8000a12:	2008      	movs	r0, #8
 8000a14:	4684      	mov	ip, r0
 8000a16:	44bc      	add	ip, r7
 8000a18:	4463      	add	r3, ip
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d200      	bcs.n	8000a24 <initEEPROMEmulated+0x32c>
 8000a22:	e714      	b.n	800084e <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8000a24:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <initEEPROMEmulated+0x39c>)
 8000a26:	000c      	movs	r4, r1
 8000a28:	185b      	adds	r3, r3, r1
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	44bc      	add	ip, r7
 8000a30:	4463      	add	r3, ip
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fdfb 	bl	8000630 <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <initEEPROMEmulated+0x3a4>)
 8000a3c:	0022      	movs	r2, r4
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	2108      	movs	r1, #8
 8000a42:	468c      	mov	ip, r1
 8000a44:	44bc      	add	ip, r7
 8000a46:	4463      	add	r3, ip
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1f18      	subs	r0, r3, #4
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	18b3      	adds	r3, r6, r2
 8000a50:	2208      	movs	r2, #8
 8000a52:	4694      	mov	ip, r2
 8000a54:	44bc      	add	ip, r7
 8000a56:	4463      	add	r3, ip
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <initEEPROMEmulated+0x3ac>)
 8000a5c:	185b      	adds	r3, r3, r1
 8000a5e:	2108      	movs	r1, #8
 8000a60:	468c      	mov	ip, r1
 8000a62:	44bc      	add	ip, r7
 8000a64:	4463      	add	r3, ip
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	f7ff fe0f 	bl	800068c <writeFLASH>
 8000a6e:	e000      	b.n	8000a72 <initEEPROMEmulated+0x37a>
		return;
 8000a70:	46c0      	nop			@ (mov r8, r8)
//	if(!flagVar_){
//		flagVar_ = 1;
//		goto initEEPROM_V;
//	}
}
 8000a72:	46bd      	mov	sp, r7
 8000a74:	239c      	movs	r3, #156	@ 0x9c
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	449d      	add	sp, r3
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	46b8      	mov	r8, r7
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	fffffb20 	.word	0xfffffb20
 8000a84:	0803f000 	.word	0x0803f000
 8000a88:	000004a4 	.word	0x000004a4
 8000a8c:	000004a3 	.word	0x000004a3
 8000a90:	0000049b 	.word	0x0000049b
 8000a94:	0000049a 	.word	0x0000049a
 8000a98:	0803f004 	.word	0x0803f004
 8000a9c:	00000494 	.word	0x00000494
 8000aa0:	fffffbe8 	.word	0xfffffbe8
 8000aa4:	0000049c 	.word	0x0000049c
 8000aa8:	0803f804 	.word	0x0803f804
 8000aac:	0803f800 	.word	0x0803f800
 8000ab0:	fffffb58 	.word	0xfffffb58
 8000ab4:	00000493 	.word	0x00000493
 8000ab8:	20000394 	.word	0x20000394

08000abc <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t * AddressPage_,uint32_t AddressValue_){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <findLastValue+0x34>)
 8000aca:	4694      	mov	ip, r2
 8000acc:	4463      	add	r3, ip
 8000ace:	60fb      	str	r3, [r7, #12]
	while(*pointValuex != AddressValue_){
 8000ad0:	e002      	b.n	8000ad8 <findLastValue+0x1c>
		pointValuex -= 2;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
	while(*pointValuex != AddressValue_){
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d1f7      	bne.n	8000ad2 <findLastValue+0x16>
	}
	return *(pointValuex-1);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3b04      	subs	r3, #4
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b004      	add	sp, #16
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	000007fc 	.word	0x000007fc

08000af4 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	b08d      	sub	sp, #52	@ 0x34
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6278      	str	r0, [r7, #36]	@ 0x24
 8000afc:	6239      	str	r1, [r7, #32]
 8000afe:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 8000b00:	2200      	movs	r2, #0
 8000b02:	2300      	movs	r3, #0
 8000b04:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	001b      	movs	r3, r3
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b2e:	6838      	ldr	r0, [r7, #0]
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	0006      	movs	r6, r0
 8000b34:	4316      	orrs	r6, r2
 8000b36:	0034      	movs	r4, r6
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	000d      	movs	r5, r1
 8000b3c:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000b3e:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8000b40:	2310      	movs	r3, #16
 8000b42:	2218      	movs	r2, #24
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	19d9      	adds	r1, r3, r7
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fd9d 	bl	800068c <writeFLASH>
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b00d      	add	sp, #52	@ 0x34
 8000b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b5a <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 8000b5a:	b5b0      	push	{r4, r5, r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	22ff      	movs	r2, #255	@ 0xff
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	4694      	mov	ip, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8000b6e:	e002      	b.n	8000b76 <currentlyPoint+0x1c>
		Pointx --;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3b08      	subs	r3, #8
 8000b74:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	1c51      	adds	r1, r2, #1
 8000b7e:	d101      	bne.n	8000b84 <currentlyPoint+0x2a>
 8000b80:	3301      	adds	r3, #1
 8000b82:	d0f5      	beq.n	8000b70 <currentlyPoint+0x16>
	}
	Pointx++;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3308      	adds	r3, #8
 8000b88:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	001c      	movs	r4, r3
 8000b8e:	17db      	asrs	r3, r3, #31
 8000b90:	001d      	movs	r5, r3
 8000b92:	0022      	movs	r2, r4
 8000b94:	002b      	movs	r3, r5
}
 8000b96:	0010      	movs	r0, r2
 8000b98:	0019      	movs	r1, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bdb0      	pop	{r4, r5, r7, pc}

08000ba0 <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint64_t * AddressPage_, uint32_t AddressValue_, uint32_t Value_){
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b08f      	sub	sp, #60	@ 0x3c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	_Bool flag_Page127 = 1;
 8000bac:	2137      	movs	r1, #55	@ 0x37
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8000bb4:	2036      	movs	r0, #54	@ 0x36
 8000bb6:	183b      	adds	r3, r7, r0
 8000bb8:	2212      	movs	r2, #18
 8000bba:	701a      	strb	r2, [r3, #0]
	if(AddressPage_ == (uint64_t *) (Page_126)){
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4a56      	ldr	r2, [pc, #344]	@ (8000d18 <FlashManager+0x178>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d105      	bne.n	8000bd0 <FlashManager+0x30>
		flag_Page127 = 0;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ffbf 	bl	8000b5a <currentlyPoint>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	000b      	movs	r3, r1
 8000be0:	0013      	movs	r3, r2
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	22ff      	movs	r2, #255	@ 0xff
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	4694      	mov	ip, r2
 8000bec:	4463      	add	r3, ip
 8000bee:	623b      	str	r3, [r7, #32]

	if((managerPoint - 1)== managerPointEnd){
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf2:	3b08      	subs	r3, #8
 8000bf4:	6a3a      	ldr	r2, [r7, #32]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d000      	beq.n	8000bfc <FlashManager+0x5c>
 8000bfa:	e083      	b.n	8000d04 <FlashManager+0x164>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 8000bfc:	2336      	movs	r3, #54	@ 0x36
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f017 fcd0 	bl	80185a8 <malloc>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	61fb      	str	r3, [r7, #28]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for(uint8_t i=0; i<size_; i++){
 8000c10:	232b      	movs	r3, #43	@ 0x2b
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e024      	b.n	8000c64 <FlashManager+0xc4>
			arrayTemp[i] = findLastValue((uint32_t *) AddressPage_,(uint32_t) varInit);
 8000c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c1c:	232b      	movs	r3, #43	@ 0x2b
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	18d4      	adds	r4, r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff46 	bl	8000abc <findLastValue>
 8000c30:	0003      	movs	r3, r0
 8000c32:	6023      	str	r3, [r4, #0]
			varInit++;
 8000c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c36:	3301      	adds	r3, #1
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 8000c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3c:	4a37      	ldr	r2, [pc, #220]	@ (8000d1c <FlashManager+0x17c>)
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	419b      	sbcs	r3, r3
 8000c42:	425b      	negs	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	001a      	movs	r2, r3
 8000c48:	2337      	movs	r3, #55	@ 0x37
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d002      	beq.n	8000c58 <FlashManager+0xb8>
				varInit++;
 8000c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c54:	3301      	adds	r3, #1
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for(uint8_t i=0; i<size_; i++){
 8000c58:	212b      	movs	r1, #43	@ 0x2b
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	232b      	movs	r3, #43	@ 0x2b
 8000c66:	18fa      	adds	r2, r7, r3
 8000c68:	2336      	movs	r3, #54	@ 0x36
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3d2      	bcc.n	8000c1a <FlashManager+0x7a>
			}
		}
		// Erase the Page
		uint32_t VarAux_= (((uint32_t) AddressPage_) - 0x8000000);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	22f8      	movs	r2, #248	@ 0xf8
 8000c78:	0612      	lsls	r2, r2, #24
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	4463      	add	r3, ip
 8000c7e:	61bb      	str	r3, [r7, #24]
		uint32_t numberPage = VarAux_/2048; 		// Number the Page
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	0adb      	lsrs	r3, r3, #11
 8000c84:	617b      	str	r3, [r7, #20]

		erasePage(numberPage);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fcd1 	bl	8000630 <erasePage>

		// Return the begin Page

		managerPoint = AddressPage_;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
		varInit =  (uint8_t *) AddressPage_;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		// Write the new Values
		for(uint8_t i=0; i<size_; i++){
 8000c96:	232a      	movs	r3, #42	@ 0x2a
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e01e      	b.n	8000cde <FlashManager+0x13e>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8000ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ca2:	232a      	movs	r3, #42	@ 0x2a
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ff1e 	bl	8000af4 <pushAddressData>
			varInit++;
 8000cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cba:	3301      	adds	r3, #1
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 8000cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <FlashManager+0x17c>)
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d902      	bls.n	8000ccc <FlashManager+0x12c>
				varInit++;
 8000cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc8:	3301      	adds	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			managerPoint ++;
 8000ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cce:	3308      	adds	r3, #8
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
		for(uint8_t i=0; i<size_; i++){
 8000cd2:	212a      	movs	r1, #42	@ 0x2a
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	3201      	adds	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	232a      	movs	r3, #42	@ 0x2a
 8000ce0:	18fa      	adds	r2, r7, r3
 8000ce2:	2336      	movs	r3, #54	@ 0x36
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3d8      	bcc.n	8000ca0 <FlashManager+0x100>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fefd 	bl	8000af4 <pushAddressData>
		free(arrayTemp);
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f017 fc5d 	bl	80185bc <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 8000d02:	e005      	b.n	8000d10 <FlashManager+0x170>
		pushAddressData(managerPoint,AddressValue_,Value_);
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fef2 	bl	8000af4 <pushAddressData>
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b00f      	add	sp, #60	@ 0x3c
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	0803f000 	.word	0x0803f000
 8000d1c:	20000394 	.word	0x20000394

08000d20 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 8000d26:	1cfb      	adds	r3, r7, #3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8000d32:	003b      	movs	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	e0d8      	b.n	8000ef0 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3302      	adds	r3, #2
 8000d42:	4a70      	ldr	r2, [pc, #448]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	2b30      	cmp	r3, #48	@ 0x30
 8000d48:	d102      	bne.n	8000d50 <MacStringtoHex+0x30>
			tempregister = 0x00;
 8000d4a:	1cfb      	adds	r3, r7, #3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3302      	adds	r3, #2
 8000d54:	4a6b      	ldr	r2, [pc, #428]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	2b31      	cmp	r3, #49	@ 0x31
 8000d5a:	d102      	bne.n	8000d62 <MacStringtoHex+0x42>
			tempregister = 0x01;
 8000d5c:	1cfb      	adds	r3, r7, #3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3302      	adds	r3, #2
 8000d66:	4a67      	ldr	r2, [pc, #412]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	2b32      	cmp	r3, #50	@ 0x32
 8000d6c:	d102      	bne.n	8000d74 <MacStringtoHex+0x54>
			tempregister = 0x02;
 8000d6e:	1cfb      	adds	r3, r7, #3
 8000d70:	2202      	movs	r2, #2
 8000d72:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3302      	adds	r3, #2
 8000d78:	4a62      	ldr	r2, [pc, #392]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	2b33      	cmp	r3, #51	@ 0x33
 8000d7e:	d102      	bne.n	8000d86 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8000d80:	1cfb      	adds	r3, r7, #3
 8000d82:	2203      	movs	r2, #3
 8000d84:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	2b34      	cmp	r3, #52	@ 0x34
 8000d90:	d102      	bne.n	8000d98 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8000d92:	1cfb      	adds	r3, r7, #3
 8000d94:	2204      	movs	r2, #4
 8000d96:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	4a59      	ldr	r2, [pc, #356]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	2b35      	cmp	r3, #53	@ 0x35
 8000da2:	d102      	bne.n	8000daa <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8000da4:	1cfb      	adds	r3, r7, #3
 8000da6:	2205      	movs	r2, #5
 8000da8:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3302      	adds	r3, #2
 8000dae:	4a55      	ldr	r2, [pc, #340]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	2b36      	cmp	r3, #54	@ 0x36
 8000db4:	d102      	bne.n	8000dbc <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8000db6:	1cfb      	adds	r3, r7, #3
 8000db8:	2206      	movs	r2, #6
 8000dba:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	4a50      	ldr	r2, [pc, #320]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	2b37      	cmp	r3, #55	@ 0x37
 8000dc6:	d102      	bne.n	8000dce <MacStringtoHex+0xae>
			tempregister = 0x07;
 8000dc8:	1cfb      	adds	r3, r7, #3
 8000dca:	2207      	movs	r2, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b38      	cmp	r3, #56	@ 0x38
 8000dd8:	d102      	bne.n	8000de0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 8000dda:	1cfb      	adds	r3, r7, #3
 8000ddc:	2208      	movs	r2, #8
 8000dde:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3302      	adds	r3, #2
 8000de4:	4a47      	ldr	r2, [pc, #284]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	2b39      	cmp	r3, #57	@ 0x39
 8000dea:	d102      	bne.n	8000df2 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 8000dec:	1cfb      	adds	r3, r7, #3
 8000dee:	2209      	movs	r2, #9
 8000df0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3302      	adds	r3, #2
 8000df6:	4a43      	ldr	r2, [pc, #268]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	2b41      	cmp	r3, #65	@ 0x41
 8000dfc:	d102      	bne.n	8000e04 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 8000dfe:	1cfb      	adds	r3, r7, #3
 8000e00:	220a      	movs	r2, #10
 8000e02:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3302      	adds	r3, #2
 8000e08:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	2b42      	cmp	r3, #66	@ 0x42
 8000e0e:	d102      	bne.n	8000e16 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 8000e10:	1cfb      	adds	r3, r7, #3
 8000e12:	220b      	movs	r2, #11
 8000e14:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	2b43      	cmp	r3, #67	@ 0x43
 8000e20:	d102      	bne.n	8000e28 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 8000e22:	1cfb      	adds	r3, r7, #3
 8000e24:	220c      	movs	r2, #12
 8000e26:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	4a35      	ldr	r2, [pc, #212]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	2b44      	cmp	r3, #68	@ 0x44
 8000e32:	d102      	bne.n	8000e3a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8000e34:	1cfb      	adds	r3, r7, #3
 8000e36:	220d      	movs	r2, #13
 8000e38:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	4a31      	ldr	r2, [pc, #196]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	2b45      	cmp	r3, #69	@ 0x45
 8000e44:	d102      	bne.n	8000e4c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8000e46:	1cfb      	adds	r3, r7, #3
 8000e48:	220e      	movs	r2, #14
 8000e4a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <MacStringtoHex+0x1e4>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	2b46      	cmp	r3, #70	@ 0x46
 8000e56:	d102      	bne.n	8000e5e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8000e58:	1cfb      	adds	r3, r7, #3
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4013      	ands	r3, r2
 8000e64:	d105      	bne.n	8000e72 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8000e66:	1cbb      	adds	r3, r7, #2
 8000e68:	1cfa      	adds	r2, r7, #3
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e03b      	b.n	8000eea <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	1cb9      	adds	r1, r7, #2
 8000e76:	1cfa      	adds	r2, r7, #3
 8000e78:	7809      	ldrb	r1, [r1, #0]
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <MacStringtoHex+0x172>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d002      	beq.n	8000e92 <MacStringtoHex+0x172>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d105      	bne.n	8000e9e <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	003b      	movs	r3, r7
 8000e9a:	0212      	lsls	r2, r2, #8
 8000e9c:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d005      	beq.n	8000eb0 <MacStringtoHex+0x190>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d002      	beq.n	8000eb0 <MacStringtoHex+0x190>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0b      	cmp	r3, #11
 8000eae:	d107      	bne.n	8000ec0 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	003a      	movs	r2, r7
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d103      	bne.n	8000ece <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MacStringtoHex+0x1e8>)
 8000ec8:	003a      	movs	r2, r7
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d103      	bne.n	8000edc <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MacStringtoHex+0x1e8>)
 8000ed6:	003a      	movs	r2, r7
 8000ed8:	8812      	ldrh	r2, [r2, #0]
 8000eda:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b0b      	cmp	r3, #11
 8000ee0:	d103      	bne.n	8000eea <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MacStringtoHex+0x1e8>)
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0b      	cmp	r3, #11
 8000ef4:	dc00      	bgt.n	8000ef8 <MacStringtoHex+0x1d8>
 8000ef6:	e722      	b.n	8000d3e <MacStringtoHex+0x1e>
		}
	}
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	20000e00 	.word	0x20000e00
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	603a      	str	r2, [r7, #0]
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	1c02      	adds	r2, r0, #0
 8000f18:	801a      	strh	r2, [r3, #0]
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	1c0a      	adds	r2, r1, #0
 8000f1e:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 8000f20:	210d      	movs	r1, #13
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 8000f28:	200f      	movs	r0, #15
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8000f30:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	1dba      	adds	r2, r7, #6
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d84b      	bhi.n	8000fd4 <ReadHoldingRegistersFunctionRev+0xc8>
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	1d3a      	adds	r2, r7, #4
 8000f42:	8812      	ldrh	r2, [r2, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d345      	bcc.n	8000fd4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8000f48:	183b      	adds	r3, r7, r0
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	3201      	adds	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <ReadHoldingRegistersFunctionRev+0xdc>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d32d      	bcc.n	8000fce <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8000f72:	210e      	movs	r1, #14
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e017      	b.n	8000fb2 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8000f82:	240e      	movs	r4, #14
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	7818      	ldrb	r0, [r3, #0]
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	18d3      	adds	r3, r2, r3
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	f001 f896 	bl	80020d4 <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	3201      	adds	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	230e      	movs	r3, #14
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <ReadHoldingRegistersFunctionRev+0xdc>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3df      	bcc.n	8000f82 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <ReadHoldingRegistersFunctionRev+0xe0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 f8a2 	bl	8002110 <ModbusSlaveTransaction>
 8000fcc:	e002      	b.n	8000fd4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f001 f9c6 	bl	8002360 <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b005      	add	sp, #20
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	200003b6 	.word	0x200003b6
 8000fe8:	200003b8 	.word	0x200003b8
 8000fec:	20000404 	.word	0x20000404

08000ff0 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 8000ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80011e8 <ModbusMap+0x1f8>)
 8000ffe:	78da      	ldrb	r2, [r3, #3]
 8001000:	4b7a      	ldr	r3, [pc, #488]	@ (80011ec <ModbusMap+0x1fc>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	4313      	orrs	r3, r2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b78      	ldr	r3, [pc, #480]	@ (80011ec <ModbusMap+0x1fc>)
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	4313      	orrs	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2201      	movs	r2, #1
 8001012:	4053      	eors	r3, r2
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 800101a:	4b75      	ldr	r3, [pc, #468]	@ (80011f0 <ModbusMap+0x200>)
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	e016      	b.n	8001050 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 8001022:	4b72      	ldr	r3, [pc, #456]	@ (80011ec <ModbusMap+0x1fc>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 800102a:	4b71      	ldr	r3, [pc, #452]	@ (80011f0 <ModbusMap+0x200>)
 800102c:	2201      	movs	r2, #1
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	e00e      	b.n	8001050 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8001032:	4b6e      	ldr	r3, [pc, #440]	@ (80011ec <ModbusMap+0x1fc>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800103a:	4b6d      	ldr	r3, [pc, #436]	@ (80011f0 <ModbusMap+0x200>)
 800103c:	2202      	movs	r2, #2
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	e006      	b.n	8001050 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8001042:	4b69      	ldr	r3, [pc, #420]	@ (80011e8 <ModbusMap+0x1f8>)
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800104a:	4b69      	ldr	r3, [pc, #420]	@ (80011f0 <ModbusMap+0x200>)
 800104c:	2206      	movs	r2, #6
 800104e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8001050:	4b68      	ldr	r3, [pc, #416]	@ (80011f4 <ModbusMap+0x204>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	001a      	movs	r2, r3
 8001056:	4b66      	ldr	r3, [pc, #408]	@ (80011f0 <ModbusMap+0x200>)
 8001058:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800105a:	4b67      	ldr	r3, [pc, #412]	@ (80011f8 <ModbusMap+0x208>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	4b63      	ldr	r3, [pc, #396]	@ (80011f0 <ModbusMap+0x200>)
 8001062:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8001064:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <ModbusMap+0x204>)
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	001a      	movs	r2, r3
 800106a:	4b61      	ldr	r3, [pc, #388]	@ (80011f0 <ModbusMap+0x200>)
 800106c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800106e:	4b61      	ldr	r3, [pc, #388]	@ (80011f4 <ModbusMap+0x204>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <ModbusMap+0x200>)
 8001076:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8001078:	4b5c      	ldr	r3, [pc, #368]	@ (80011ec <ModbusMap+0x1fc>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	001a      	movs	r2, r3
 800107e:	4b5c      	ldr	r3, [pc, #368]	@ (80011f0 <ModbusMap+0x200>)
 8001080:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8001082:	4b5b      	ldr	r3, [pc, #364]	@ (80011f0 <ModbusMap+0x200>)
 8001084:	2200      	movs	r2, #0
 8001086:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8001088:	4b59      	ldr	r3, [pc, #356]	@ (80011f0 <ModbusMap+0x200>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8001090:	4b57      	ldr	r3, [pc, #348]	@ (80011f0 <ModbusMap+0x200>)
 8001092:	2201      	movs	r2, #1
 8001094:	81da      	strh	r2, [r3, #14]
 8001096:	e002      	b.n	800109e <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8001098:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <ModbusMap+0x200>)
 800109a:	2200      	movs	r2, #0
 800109c:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 800109e:	4b53      	ldr	r3, [pc, #332]	@ (80011ec <ModbusMap+0x1fc>)
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	001a      	movs	r2, r3
 80010a4:	4b52      	ldr	r3, [pc, #328]	@ (80011f0 <ModbusMap+0x200>)
 80010a6:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 80010a8:	4b50      	ldr	r3, [pc, #320]	@ (80011ec <ModbusMap+0x1fc>)
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	001a      	movs	r2, r3
 80010ae:	4b50      	ldr	r3, [pc, #320]	@ (80011f0 <ModbusMap+0x200>)
 80010b0:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 80010b2:	4b4f      	ldr	r3, [pc, #316]	@ (80011f0 <ModbusMap+0x200>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 80010b8:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <ModbusMap+0x200>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <ModbusMap+0x1f8>)
 80010c0:	78db      	ldrb	r3, [r3, #3]
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <ModbusMap+0x200>)
 80010c6:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 80010c8:	4b49      	ldr	r3, [pc, #292]	@ (80011f0 <ModbusMap+0x200>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 80010ce:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <ModbusMap+0x20c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001200 <ModbusMap+0x210>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	189b      	adds	r3, r3, r2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b49      	ldr	r3, [pc, #292]	@ (8001204 <ModbusMap+0x214>)
 80010e0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <ModbusMap+0x218>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4a48      	ldr	r2, [pc, #288]	@ (800120c <ModbusMap+0x21c>)
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	189b      	adds	r3, r3, r2
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <ModbusMap+0x214>)
 80010f4:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 80010f6:	4b46      	ldr	r3, [pc, #280]	@ (8001210 <ModbusMap+0x220>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	1c1a      	adds	r2, r3, #0
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	18db      	adds	r3, r3, r3
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b3f      	ldr	r3, [pc, #252]	@ (8001204 <ModbusMap+0x214>)
 8001106:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <ModbusMap+0x214>)
 800110a:	22dc      	movs	r2, #220	@ 0xdc
 800110c:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <ModbusMap+0x224>)
 8001110:	79db      	ldrb	r3, [r3, #7]
 8001112:	001a      	movs	r2, r3
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <ModbusMap+0x228>)
 8001116:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 8001118:	4b3e      	ldr	r3, [pc, #248]	@ (8001214 <ModbusMap+0x224>)
 800111a:	799b      	ldrb	r3, [r3, #6]
 800111c:	001a      	movs	r2, r3
 800111e:	4b3e      	ldr	r3, [pc, #248]	@ (8001218 <ModbusMap+0x228>)
 8001120:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <ModbusMap+0x224>)
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	001a      	movs	r2, r3
 8001128:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <ModbusMap+0x228>)
 800112a:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <ModbusMap+0x224>)
 800112e:	789a      	ldrb	r2, [r3, #2]
 8001130:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <ModbusMap+0x224>)
 8001132:	78db      	ldrb	r3, [r3, #3]
 8001134:	4313      	orrs	r3, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	001a      	movs	r2, r3
 800113a:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <ModbusMap+0x228>)
 800113c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 800113e:	4b36      	ldr	r3, [pc, #216]	@ (8001218 <ModbusMap+0x228>)
 8001140:	2200      	movs	r2, #0
 8001142:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <ModbusMap+0x224>)
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <ModbusMap+0x224>)
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	4313      	orrs	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	001a      	movs	r2, r3
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <ModbusMap+0x228>)
 8001154:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <ModbusMap+0x22c>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	001a      	movs	r2, r3
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <ModbusMap+0x228>)
 800115e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8001160:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <ModbusMap+0x22c>)
 8001162:	799b      	ldrb	r3, [r3, #6]
 8001164:	001a      	movs	r2, r3
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <ModbusMap+0x228>)
 8001168:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 800116a:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <ModbusMap+0x224>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <ModbusMap+0x224>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	4313      	orrs	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	001a      	movs	r2, r3
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <ModbusMap+0x228>)
 800117a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <ModbusMap+0x230>)
 800117e:	4a29      	ldr	r2, [pc, #164]	@ (8001224 <ModbusMap+0x234>)
 8001180:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <ModbusMap+0x230>)
 8001184:	4a28      	ldr	r2, [pc, #160]	@ (8001228 <ModbusMap+0x238>)
 8001186:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <ModbusMap+0x230>)
 800118a:	22ff      	movs	r2, #255	@ 0xff
 800118c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 800118e:	f7ff fdc7 	bl	8000d20 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1])*256 + findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <ModbusMap+0x23c>)
 8001194:	4a26      	ldr	r2, [pc, #152]	@ (8001230 <ModbusMap+0x240>)
 8001196:	0019      	movs	r1, r3
 8001198:	0010      	movs	r0, r2
 800119a:	f7ff fc8f 	bl	8000abc <findLastValue>
 800119e:	0003      	movs	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b29c      	uxth	r4, r3
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <ModbusMap+0x244>)
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <ModbusMap+0x240>)
 80011aa:	0019      	movs	r1, r3
 80011ac:	0010      	movs	r0, r2
 80011ae:	f7ff fc85 	bl	8000abc <findLastValue>
 80011b2:	0003      	movs	r3, r0
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	18e3      	adds	r3, r4, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <ModbusMap+0x248>)
 80011bc:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 80011be:	f001 f983 	bl	80024c8 <ModbusSlavePool>
 80011c2:	0002      	movs	r2, r0
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <ModbusMap+0x1e4>
 80011d0:	f000 fe8f 	bl	8001ef2 <ModbusMap+0xf02>
	    asm ("nop");
 80011d4:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <ModbusMap+0x24c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d030      	beq.n	8001240 <ModbusMap+0x250>
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d100      	bne.n	80011e4 <ModbusMap+0x1f4>
 80011e2:	e1a5      	b.n	8001530 <ModbusMap+0x540>
 80011e4:	f000 fe48 	bl	8001e78 <ModbusMap+0xe88>
 80011e8:	20000b98 	.word	0x20000b98
 80011ec:	20000c5c 	.word	0x20000c5c
 80011f0:	20000054 	.word	0x20000054
 80011f4:	20000bc4 	.word	0x20000bc4
 80011f8:	20000c00 	.word	0x20000c00
 80011fc:	20000bd0 	.word	0x20000bd0
 8001200:	20000bd1 	.word	0x20000bd1
 8001204:	20000070 	.word	0x20000070
 8001208:	20000bd2 	.word	0x20000bd2
 800120c:	20000bd3 	.word	0x20000bd3
 8001210:	20000bee 	.word	0x20000bee
 8001214:	20000ba8 	.word	0x20000ba8
 8001218:	20000078 	.word	0x20000078
 800121c:	20000ba0 	.word	0x20000ba0
 8001220:	2000008c 	.word	0x2000008c
 8001224:	ffffb4a2 	.word	0xffffb4a2
 8001228:	ffffeb4f 	.word	0xffffeb4f
 800122c:	2000037f 	.word	0x2000037f
 8001230:	0803f000 	.word	0x0803f000
 8001234:	20000380 	.word	0x20000380
 8001238:	20000094 	.word	0x20000094
 800123c:	20000404 	.word	0x20000404
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 8001240:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 8001242:	4bde      	ldr	r3, [pc, #888]	@ (80015bc <ModbusMap+0x5cc>)
 8001244:	2200      	movs	r2, #0
 8001246:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeescala]) == 32)
 8001248:	4bdd      	ldr	r3, [pc, #884]	@ (80015c0 <ModbusMap+0x5d0>)
 800124a:	4ade      	ldr	r2, [pc, #888]	@ (80015c4 <ModbusMap+0x5d4>)
 800124c:	0019      	movs	r1, r3
 800124e:	0010      	movs	r0, r2
 8001250:	f7ff fc34 	bl	8000abc <findLastValue>
 8001254:	0003      	movs	r3, r0
 8001256:	2b20      	cmp	r3, #32
 8001258:	d102      	bne.n	8001260 <ModbusMap+0x270>
					PNU_0x3002 = 1;
 800125a:	4bd8      	ldr	r3, [pc, #864]	@ (80015bc <ModbusMap+0x5cc>)
 800125c:	2201      	movs	r2, #1
 800125e:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eespdiur_L]);
 8001260:	4bd9      	ldr	r3, [pc, #868]	@ (80015c8 <ModbusMap+0x5d8>)
 8001262:	4ad8      	ldr	r2, [pc, #864]	@ (80015c4 <ModbusMap+0x5d4>)
 8001264:	0019      	movs	r1, r3
 8001266:	0010      	movs	r0, r2
 8001268:	f7ff fc28 	bl	8000abc <findLastValue>
 800126c:	0003      	movs	r3, r0
 800126e:	b29b      	uxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29c      	uxth	r4, r3
 8001274:	4bd5      	ldr	r3, [pc, #852]	@ (80015cc <ModbusMap+0x5dc>)
 8001276:	4ad3      	ldr	r2, [pc, #844]	@ (80015c4 <ModbusMap+0x5d4>)
 8001278:	0019      	movs	r1, r3
 800127a:	0010      	movs	r0, r2
 800127c:	f7ff fc1e 	bl	8000abc <findLastValue>
 8001280:	0003      	movs	r3, r0
 8001282:	b29b      	uxth	r3, r3
 8001284:	18e3      	adds	r3, r4, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	4bd1      	ldr	r3, [pc, #836]	@ (80015d0 <ModbusMap+0x5e0>)
 800128a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eedifdiur_H]) * 256 + findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eedifdiur_L]);
 800128c:	4bd1      	ldr	r3, [pc, #836]	@ (80015d4 <ModbusMap+0x5e4>)
 800128e:	4acd      	ldr	r2, [pc, #820]	@ (80015c4 <ModbusMap+0x5d4>)
 8001290:	0019      	movs	r1, r3
 8001292:	0010      	movs	r0, r2
 8001294:	f7ff fc12 	bl	8000abc <findLastValue>
 8001298:	0003      	movs	r3, r0
 800129a:	b29b      	uxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b29c      	uxth	r4, r3
 80012a0:	4bcd      	ldr	r3, [pc, #820]	@ (80015d8 <ModbusMap+0x5e8>)
 80012a2:	4ac8      	ldr	r2, [pc, #800]	@ (80015c4 <ModbusMap+0x5d4>)
 80012a4:	0019      	movs	r1, r3
 80012a6:	0010      	movs	r0, r2
 80012a8:	f7ff fc08 	bl	8000abc <findLastValue>
 80012ac:	0003      	movs	r3, r0
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	18e3      	adds	r3, r4, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4bc9      	ldr	r3, [pc, #804]	@ (80015dc <ModbusMap+0x5ec>)
 80012b6:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = (uint16_t) findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeAddModBus]);
 80012b8:	4bc9      	ldr	r3, [pc, #804]	@ (80015e0 <ModbusMap+0x5f0>)
 80012ba:	4ac2      	ldr	r2, [pc, #776]	@ (80015c4 <ModbusMap+0x5d4>)
 80012bc:	0019      	movs	r1, r3
 80012be:	0010      	movs	r0, r2
 80012c0:	f7ff fbfc 	bl	8000abc <findLastValue>
 80012c4:	0003      	movs	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4bc6      	ldr	r3, [pc, #792]	@ (80015e4 <ModbusMap+0x5f4>)
 80012ca:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = (uint16_t) findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetimepa]);
 80012cc:	4bc6      	ldr	r3, [pc, #792]	@ (80015e8 <ModbusMap+0x5f8>)
 80012ce:	4abd      	ldr	r2, [pc, #756]	@ (80015c4 <ModbusMap+0x5d4>)
 80012d0:	0019      	movs	r1, r3
 80012d2:	0010      	movs	r0, r2
 80012d4:	f7ff fbf2 	bl	8000abc <findLastValue>
 80012d8:	0003      	movs	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4bc3      	ldr	r3, [pc, #780]	@ (80015ec <ModbusMap+0x5fc>)
 80012de:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 80012e0:	4ac3      	ldr	r2, [pc, #780]	@ (80015f0 <ModbusMap+0x600>)
 80012e2:	230e      	movs	r3, #14
 80012e4:	33ff      	adds	r3, #255	@ 0xff
 80012e6:	0019      	movs	r1, r3
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fe0d 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <ModbusMap+0x30a>
 80012f6:	f000 fdc3 	bl	8001e80 <ModbusMap+0xe90>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 80012fa:	4abe      	ldr	r2, [pc, #760]	@ (80015f4 <ModbusMap+0x604>)
 80012fc:	49be      	ldr	r1, [pc, #760]	@ (80015f8 <ModbusMap+0x608>)
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	019b      	lsls	r3, r3, #6
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff fe02 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d001      	beq.n	8001310 <ModbusMap+0x320>
 800130c:	f000 fdba 	bl	8001e84 <ModbusMap+0xe94>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 8001310:	4aba      	ldr	r2, [pc, #744]	@ (80015fc <ModbusMap+0x60c>)
 8001312:	2382      	movs	r3, #130	@ 0x82
 8001314:	0099      	lsls	r1, r3, #2
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff fdf6 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <ModbusMap+0x338>
 8001324:	f000 fdb0 	bl	8001e88 <ModbusMap+0xe98>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 8001328:	4ab5      	ldr	r2, [pc, #724]	@ (8001600 <ModbusMap+0x610>)
 800132a:	49b6      	ldr	r1, [pc, #728]	@ (8001604 <ModbusMap+0x614>)
 800132c:	23c0      	movs	r3, #192	@ 0xc0
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fdeb 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <ModbusMap+0x34e>
 800133a:	f000 fda7 	bl	8001e8c <ModbusMap+0xe9c>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 800133e:	4ab2      	ldr	r2, [pc, #712]	@ (8001608 <ModbusMap+0x618>)
 8001340:	23c4      	movs	r3, #196	@ 0xc4
 8001342:	0099      	lsls	r1, r3, #2
 8001344:	23c4      	movs	r3, #196	@ 0xc4
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fddf 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <ModbusMap+0x366>
 8001352:	f000 fd9d 	bl	8001e90 <ModbusMap+0xea0>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 8001356:	4bad      	ldr	r3, [pc, #692]	@ (800160c <ModbusMap+0x61c>)
 8001358:	001a      	movs	r2, r3
 800135a:	2110      	movs	r1, #16
 800135c:	2010      	movs	r0, #16
 800135e:	f7ff fdd5 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <ModbusMap+0x37a>
 8001366:	f000 fd95 	bl	8001e94 <ModbusMap+0xea4>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 800136a:	4aa9      	ldr	r2, [pc, #676]	@ (8001610 <ModbusMap+0x620>)
 800136c:	23c0      	movs	r3, #192	@ 0xc0
 800136e:	0199      	lsls	r1, r3, #6
 8001370:	23c0      	movs	r3, #192	@ 0xc0
 8001372:	019b      	lsls	r3, r3, #6
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fdc9 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d001      	beq.n	8001382 <ModbusMap+0x392>
 800137e:	f000 fd8b 	bl	8001e98 <ModbusMap+0xea8>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 8001382:	4b8e      	ldr	r3, [pc, #568]	@ (80015bc <ModbusMap+0x5cc>)
 8001384:	49a3      	ldr	r1, [pc, #652]	@ (8001614 <ModbusMap+0x624>)
 8001386:	48a3      	ldr	r0, [pc, #652]	@ (8001614 <ModbusMap+0x624>)
 8001388:	001a      	movs	r2, r3
 800138a:	f7ff fdbf 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <ModbusMap+0x3a6>
 8001392:	f000 fd83 	bl	8001e9c <ModbusMap+0xeac>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8001396:	4b8e      	ldr	r3, [pc, #568]	@ (80015d0 <ModbusMap+0x5e0>)
 8001398:	499f      	ldr	r1, [pc, #636]	@ (8001618 <ModbusMap+0x628>)
 800139a:	489f      	ldr	r0, [pc, #636]	@ (8001618 <ModbusMap+0x628>)
 800139c:	001a      	movs	r2, r3
 800139e:	f7ff fdb5 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <ModbusMap+0x3ba>
 80013a6:	f000 fd7b 	bl	8001ea0 <ModbusMap+0xeb0>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 80013aa:	4b8c      	ldr	r3, [pc, #560]	@ (80015dc <ModbusMap+0x5ec>)
 80013ac:	499b      	ldr	r1, [pc, #620]	@ (800161c <ModbusMap+0x62c>)
 80013ae:	489b      	ldr	r0, [pc, #620]	@ (800161c <ModbusMap+0x62c>)
 80013b0:	001a      	movs	r2, r3
 80013b2:	f7ff fdab 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <ModbusMap+0x3ce>
 80013ba:	f000 fd73 	bl	8001ea4 <ModbusMap+0xeb4>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 80013be:	4b98      	ldr	r3, [pc, #608]	@ (8001620 <ModbusMap+0x630>)
 80013c0:	4998      	ldr	r1, [pc, #608]	@ (8001624 <ModbusMap+0x634>)
 80013c2:	4898      	ldr	r0, [pc, #608]	@ (8001624 <ModbusMap+0x634>)
 80013c4:	001a      	movs	r2, r3
 80013c6:	f7ff fda1 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d001      	beq.n	80013d2 <ModbusMap+0x3e2>
 80013ce:	f000 fd6b 	bl	8001ea8 <ModbusMap+0xeb8>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 80013d2:	4b95      	ldr	r3, [pc, #596]	@ (8001628 <ModbusMap+0x638>)
 80013d4:	4995      	ldr	r1, [pc, #596]	@ (800162c <ModbusMap+0x63c>)
 80013d6:	4895      	ldr	r0, [pc, #596]	@ (800162c <ModbusMap+0x63c>)
 80013d8:	001a      	movs	r2, r3
 80013da:	f7ff fd97 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <ModbusMap+0x3f6>
 80013e2:	f000 fd63 	bl	8001eac <ModbusMap+0xebc>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 80013e6:	4b92      	ldr	r3, [pc, #584]	@ (8001630 <ModbusMap+0x640>)
 80013e8:	4992      	ldr	r1, [pc, #584]	@ (8001634 <ModbusMap+0x644>)
 80013ea:	4892      	ldr	r0, [pc, #584]	@ (8001634 <ModbusMap+0x644>)
 80013ec:	001a      	movs	r2, r3
 80013ee:	f7ff fd8d 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <ModbusMap+0x40a>
 80013f6:	f000 fd5b 	bl	8001eb0 <ModbusMap+0xec0>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 80013fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001638 <ModbusMap+0x648>)
 80013fc:	498f      	ldr	r1, [pc, #572]	@ (800163c <ModbusMap+0x64c>)
 80013fe:	488f      	ldr	r0, [pc, #572]	@ (800163c <ModbusMap+0x64c>)
 8001400:	001a      	movs	r2, r3
 8001402:	f7ff fd83 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <ModbusMap+0x41e>
 800140a:	f000 fd53 	bl	8001eb4 <ModbusMap+0xec4>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800140e:	4b8c      	ldr	r3, [pc, #560]	@ (8001640 <ModbusMap+0x650>)
 8001410:	498c      	ldr	r1, [pc, #560]	@ (8001644 <ModbusMap+0x654>)
 8001412:	488c      	ldr	r0, [pc, #560]	@ (8001644 <ModbusMap+0x654>)
 8001414:	001a      	movs	r2, r3
 8001416:	f7ff fd79 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <ModbusMap+0x432>
 800141e:	f000 fd4b 	bl	8001eb8 <ModbusMap+0xec8>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 8001422:	4b89      	ldr	r3, [pc, #548]	@ (8001648 <ModbusMap+0x658>)
 8001424:	4989      	ldr	r1, [pc, #548]	@ (800164c <ModbusMap+0x65c>)
 8001426:	4889      	ldr	r0, [pc, #548]	@ (800164c <ModbusMap+0x65c>)
 8001428:	001a      	movs	r2, r3
 800142a:	f7ff fd6f 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <ModbusMap+0x446>
 8001432:	f000 fd43 	bl	8001ebc <ModbusMap+0xecc>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 8001436:	4b86      	ldr	r3, [pc, #536]	@ (8001650 <ModbusMap+0x660>)
 8001438:	4986      	ldr	r1, [pc, #536]	@ (8001654 <ModbusMap+0x664>)
 800143a:	4886      	ldr	r0, [pc, #536]	@ (8001654 <ModbusMap+0x664>)
 800143c:	001a      	movs	r2, r3
 800143e:	f7ff fd65 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <ModbusMap+0x45a>
 8001446:	f000 fd3b 	bl	8001ec0 <ModbusMap+0xed0>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 800144a:	4b83      	ldr	r3, [pc, #524]	@ (8001658 <ModbusMap+0x668>)
 800144c:	4983      	ldr	r1, [pc, #524]	@ (800165c <ModbusMap+0x66c>)
 800144e:	4883      	ldr	r0, [pc, #524]	@ (800165c <ModbusMap+0x66c>)
 8001450:	001a      	movs	r2, r3
 8001452:	f7ff fd5b 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <ModbusMap+0x46e>
 800145a:	f000 fd33 	bl	8001ec4 <ModbusMap+0xed4>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 800145e:	4b80      	ldr	r3, [pc, #512]	@ (8001660 <ModbusMap+0x670>)
 8001460:	4980      	ldr	r1, [pc, #512]	@ (8001664 <ModbusMap+0x674>)
 8001462:	4880      	ldr	r0, [pc, #512]	@ (8001664 <ModbusMap+0x674>)
 8001464:	001a      	movs	r2, r3
 8001466:	f7ff fd51 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d001      	beq.n	8001472 <ModbusMap+0x482>
 800146e:	f000 fd2b 	bl	8001ec8 <ModbusMap+0xed8>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 8001472:	4b7d      	ldr	r3, [pc, #500]	@ (8001668 <ModbusMap+0x678>)
 8001474:	497d      	ldr	r1, [pc, #500]	@ (800166c <ModbusMap+0x67c>)
 8001476:	487d      	ldr	r0, [pc, #500]	@ (800166c <ModbusMap+0x67c>)
 8001478:	001a      	movs	r2, r3
 800147a:	f7ff fd47 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d001      	beq.n	8001486 <ModbusMap+0x496>
 8001482:	f000 fd23 	bl	8001ecc <ModbusMap+0xedc>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8001486:	4b7a      	ldr	r3, [pc, #488]	@ (8001670 <ModbusMap+0x680>)
 8001488:	497a      	ldr	r1, [pc, #488]	@ (8001674 <ModbusMap+0x684>)
 800148a:	487a      	ldr	r0, [pc, #488]	@ (8001674 <ModbusMap+0x684>)
 800148c:	001a      	movs	r2, r3
 800148e:	f7ff fd3d 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <ModbusMap+0x4aa>
 8001496:	f000 fd1b 	bl	8001ed0 <ModbusMap+0xee0>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 800149a:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <ModbusMap+0x5f4>)
 800149c:	4976      	ldr	r1, [pc, #472]	@ (8001678 <ModbusMap+0x688>)
 800149e:	4876      	ldr	r0, [pc, #472]	@ (8001678 <ModbusMap+0x688>)
 80014a0:	001a      	movs	r2, r3
 80014a2:	f7ff fd33 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <ModbusMap+0x4be>
 80014aa:	f000 fd13 	bl	8001ed4 <ModbusMap+0xee4>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 80014ae:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <ModbusMap+0x5fc>)
 80014b0:	4972      	ldr	r1, [pc, #456]	@ (800167c <ModbusMap+0x68c>)
 80014b2:	4872      	ldr	r0, [pc, #456]	@ (800167c <ModbusMap+0x68c>)
 80014b4:	001a      	movs	r2, r3
 80014b6:	f7ff fd29 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d001      	beq.n	80014c2 <ModbusMap+0x4d2>
 80014be:	f000 fd0b 	bl	8001ed8 <ModbusMap+0xee8>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 80014c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <ModbusMap+0x690>)
 80014c4:	496f      	ldr	r1, [pc, #444]	@ (8001684 <ModbusMap+0x694>)
 80014c6:	486f      	ldr	r0, [pc, #444]	@ (8001684 <ModbusMap+0x694>)
 80014c8:	001a      	movs	r2, r3
 80014ca:	f7ff fd1f 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <ModbusMap+0x4e6>
 80014d2:	f000 fd03 	bl	8001edc <ModbusMap+0xeec>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 80014d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <ModbusMap+0x698>)
 80014d8:	496c      	ldr	r1, [pc, #432]	@ (800168c <ModbusMap+0x69c>)
 80014da:	486c      	ldr	r0, [pc, #432]	@ (800168c <ModbusMap+0x69c>)
 80014dc:	001a      	movs	r2, r3
 80014de:	f7ff fd15 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <ModbusMap+0x4fa>
 80014e6:	f000 fcfb 	bl	8001ee0 <ModbusMap+0xef0>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 80014ea:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <ModbusMap+0x6a0>)
 80014ec:	4969      	ldr	r1, [pc, #420]	@ (8001694 <ModbusMap+0x6a4>)
 80014ee:	4869      	ldr	r0, [pc, #420]	@ (8001694 <ModbusMap+0x6a4>)
 80014f0:	001a      	movs	r2, r3
 80014f2:	f7ff fd0b 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <ModbusMap+0x50e>
 80014fa:	f000 fcf3 	bl	8001ee4 <ModbusMap+0xef4>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 80014fe:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <ModbusMap+0x6a8>)
 8001500:	4966      	ldr	r1, [pc, #408]	@ (800169c <ModbusMap+0x6ac>)
 8001502:	4866      	ldr	r0, [pc, #408]	@ (800169c <ModbusMap+0x6ac>)
 8001504:	001a      	movs	r2, r3
 8001506:	f7ff fd01 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <ModbusMap+0x522>
 800150e:	f000 fceb 	bl	8001ee8 <ModbusMap+0xef8>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8001512:	4b63      	ldr	r3, [pc, #396]	@ (80016a0 <ModbusMap+0x6b0>)
 8001514:	4963      	ldr	r1, [pc, #396]	@ (80016a4 <ModbusMap+0x6b4>)
 8001516:	4863      	ldr	r0, [pc, #396]	@ (80016a4 <ModbusMap+0x6b4>)
 8001518:	001a      	movs	r2, r3
 800151a:	f7ff fcf7 	bl	8000f0c <ReadHoldingRegistersFunctionRev>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <ModbusMap+0x536>
 8001522:	f000 fce3 	bl	8001eec <ModbusMap+0xefc>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8001526:	2002      	movs	r0, #2
 8001528:	f000 ff1a 	bl	8002360 <ModbusSlaveExceptionTransaction>
				}
				break;
 800152c:	f000 fce1 	bl	8001ef2 <ModbusMap+0xf02>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8001530:	4b5d      	ldr	r3, [pc, #372]	@ (80016a8 <ModbusMap+0x6b8>)
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	23c0      	movs	r3, #192	@ 0xc0
 8001536:	019b      	lsls	r3, r3, #6
 8001538:	429a      	cmp	r2, r3
 800153a:	d310      	bcc.n	800155e <ModbusMap+0x56e>
 800153c:	4b5a      	ldr	r3, [pc, #360]	@ (80016a8 <ModbusMap+0x6b8>)
 800153e:	881a      	ldrh	r2, [r3, #0]
 8001540:	23c0      	movs	r3, #192	@ 0xc0
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	429a      	cmp	r2, r3
 8001546:	d80a      	bhi.n	800155e <ModbusMap+0x56e>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8001548:	4b58      	ldr	r3, [pc, #352]	@ (80016ac <ModbusMap+0x6bc>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	001a      	movs	r2, r3
 8001550:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <ModbusMap+0x620>)
 8001552:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001554:	4b56      	ldr	r3, [pc, #344]	@ (80016b0 <ModbusMap+0x6c0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fdd9 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 800155e:	4b52      	ldr	r3, [pc, #328]	@ (80016a8 <ModbusMap+0x6b8>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <ModbusMap+0x6c4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d800      	bhi.n	800156a <ModbusMap+0x57a>
 8001568:	e0cf      	b.n	800170a <ModbusMap+0x71a>
 800156a:	4b4f      	ldr	r3, [pc, #316]	@ (80016a8 <ModbusMap+0x6b8>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	4a29      	ldr	r2, [pc, #164]	@ (8001614 <ModbusMap+0x624>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d900      	bls.n	8001576 <ModbusMap+0x586>
 8001574:	e0c9      	b.n	800170a <ModbusMap+0x71a>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8001576:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <ModbusMap+0x6bc>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	001a      	movs	r2, r3
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <ModbusMap+0x5cc>)
 8001580:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <ModbusMap+0x5cc>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d000      	beq.n	800158c <ModbusMap+0x59c>
 800158a:	e097      	b.n	80016bc <ModbusMap+0x6cc>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeescala]) == 32){
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <ModbusMap+0x5d0>)
 800158e:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <ModbusMap+0x5d4>)
 8001590:	0019      	movs	r1, r3
 8001592:	0010      	movs	r0, r2
 8001594:	f7ff fa92 	bl	8000abc <findLastValue>
 8001598:	0003      	movs	r3, r0
 800159a:	2b20      	cmp	r3, #32
 800159c:	d101      	bne.n	80015a2 <ModbusMap+0x5b2>
							asm ("nop");
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	e08c      	b.n	80016bc <ModbusMap+0x6cc>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 80015a2:	4b45      	ldr	r3, [pc, #276]	@ (80016b8 <ModbusMap+0x6c8>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 80015a8:	4b43      	ldr	r3, [pc, #268]	@ (80016b8 <ModbusMap+0x6c8>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <ModbusMap+0x5d0>)
 80015b0:	0019      	movs	r1, r3
 80015b2:	0010      	movs	r0, r2
 80015b4:	f003 fda8 	bl	8005108 <wreeprom>
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	e7fd      	b.n	80015b8 <ModbusMap+0x5c8>
 80015bc:	20000b54 	.word	0x20000b54
 80015c0:	20000356 	.word	0x20000356
 80015c4:	0803f000 	.word	0x0803f000
 80015c8:	20000305 	.word	0x20000305
 80015cc:	20000306 	.word	0x20000306
 80015d0:	20000098 	.word	0x20000098
 80015d4:	20000307 	.word	0x20000307
 80015d8:	20000308 	.word	0x20000308
 80015dc:	2000009a 	.word	0x2000009a
 80015e0:	20000376 	.word	0x20000376
 80015e4:	200000ae 	.word	0x200000ae
 80015e8:	2000034d 	.word	0x2000034d
 80015ec:	200000b0 	.word	0x200000b0
 80015f0:	20000054 	.word	0x20000054
 80015f4:	20000070 	.word	0x20000070
 80015f8:	00002003 	.word	0x00002003
 80015fc:	20000078 	.word	0x20000078
 8001600:	2000008c 	.word	0x2000008c
 8001604:	00000302 	.word	0x00000302
 8001608:	20000094 	.word	0x20000094
 800160c:	20000b52 	.word	0x20000b52
 8001610:	20000096 	.word	0x20000096
 8001614:	00003002 	.word	0x00003002
 8001618:	00003004 	.word	0x00003004
 800161c:	00003006 	.word	0x00003006
 8001620:	2000009c 	.word	0x2000009c
 8001624:	00003008 	.word	0x00003008
 8001628:	20000b56 	.word	0x20000b56
 800162c:	0000300a 	.word	0x0000300a
 8001630:	2000009e 	.word	0x2000009e
 8001634:	0000300c 	.word	0x0000300c
 8001638:	20000b58 	.word	0x20000b58
 800163c:	0000300e 	.word	0x0000300e
 8001640:	200000a0 	.word	0x200000a0
 8001644:	00003010 	.word	0x00003010
 8001648:	200000a2 	.word	0x200000a2
 800164c:	00003012 	.word	0x00003012
 8001650:	200000a4 	.word	0x200000a4
 8001654:	00003014 	.word	0x00003014
 8001658:	200000a6 	.word	0x200000a6
 800165c:	00003016 	.word	0x00003016
 8001660:	200000a8 	.word	0x200000a8
 8001664:	00003018 	.word	0x00003018
 8001668:	200000aa 	.word	0x200000aa
 800166c:	0000301a 	.word	0x0000301a
 8001670:	200000ac 	.word	0x200000ac
 8001674:	0000301c 	.word	0x0000301c
 8001678:	0000301e 	.word	0x0000301e
 800167c:	00003104 	.word	0x00003104
 8001680:	200000b2 	.word	0x200000b2
 8001684:	00003106 	.word	0x00003106
 8001688:	200000b4 	.word	0x200000b4
 800168c:	00003108 	.word	0x00003108
 8001690:	200000b6 	.word	0x200000b6
 8001694:	0000310a 	.word	0x0000310a
 8001698:	200000b8 	.word	0x200000b8
 800169c:	0000310c 	.word	0x0000310c
 80016a0:	200000ba 	.word	0x200000ba
 80016a4:	0000310e 	.word	0x0000310e
 80016a8:	200003ba 	.word	0x200003ba
 80016ac:	200003bc 	.word	0x200003bc
 80016b0:	20000404 	.word	0x20000404
 80016b4:	00003001 	.word	0x00003001
 80016b8:	20000b76 	.word	0x20000b76
						}
					}
					if (PNU_0x3002 == 0){
 80016bc:	4bc3      	ldr	r3, [pc, #780]	@ (80019cc <ModbusMap+0x9dc>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11d      	bne.n	8001700 <ModbusMap+0x710>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeescala]== 32)){
 80016c4:	2301      	movs	r3, #1
 80016c6:	1c1a      	adds	r2, r3, #0
 80016c8:	4bc1      	ldr	r3, [pc, #772]	@ (80019d0 <ModbusMap+0x9e0>)
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d001      	beq.n	80016d2 <ModbusMap+0x6e2>
 80016ce:	2300      	movs	r3, #0
 80016d0:	1c1a      	adds	r2, r3, #0
 80016d2:	b2d3      	uxtb	r3, r2
 80016d4:	001a      	movs	r2, r3
 80016d6:	4bbf      	ldr	r3, [pc, #764]	@ (80019d4 <ModbusMap+0x9e4>)
 80016d8:	0011      	movs	r1, r2
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff f9ee 	bl	8000abc <findLastValue>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d00c      	beq.n	80016fe <ModbusMap+0x70e>
							waux = 0;//mov			waux,#0;	/ Carga
 80016e4:	4bbc      	ldr	r3, [pc, #752]	@ (80019d8 <ModbusMap+0x9e8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 80016ea:	4bbb      	ldr	r3, [pc, #748]	@ (80019d8 <ModbusMap+0x9e8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	001a      	movs	r2, r3
 80016f0:	4bb7      	ldr	r3, [pc, #732]	@ (80019d0 <ModbusMap+0x9e0>)
 80016f2:	0019      	movs	r1, r3
 80016f4:	0010      	movs	r0, r2
 80016f6:	f003 fd07 	bl	8005108 <wreeprom>
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	e7fd      	b.n	80016fa <ModbusMap+0x70a>
						}
						else{
							asm ("nop");
 80016fe:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001700:	4bb6      	ldr	r3, [pc, #728]	@ (80019dc <ModbusMap+0x9ec>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	0018      	movs	r0, r3
 8001706:	f000 fd03 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 800170a:	4bb5      	ldr	r3, [pc, #724]	@ (80019e0 <ModbusMap+0x9f0>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	4ab5      	ldr	r2, [pc, #724]	@ (80019e4 <ModbusMap+0x9f4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d926      	bls.n	8001762 <ModbusMap+0x772>
 8001714:	4bb2      	ldr	r3, [pc, #712]	@ (80019e0 <ModbusMap+0x9f0>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	4ab3      	ldr	r2, [pc, #716]	@ (80019e8 <ModbusMap+0x9f8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d821      	bhi.n	8001762 <ModbusMap+0x772>
					PNU_0x3004 = _u16WriteVal;
 800171e:	4bb3      	ldr	r3, [pc, #716]	@ (80019ec <ModbusMap+0x9fc>)
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	4bb3      	ldr	r3, [pc, #716]	@ (80019f0 <ModbusMap+0xa00>)
 8001724:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8001726:	4bb2      	ldr	r3, [pc, #712]	@ (80019f0 <ModbusMap+0xa00>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b29b      	uxth	r3, r3
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4ba9      	ldr	r3, [pc, #676]	@ (80019d8 <ModbusMap+0x9e8>)
 8001732:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8001734:	4bae      	ldr	r3, [pc, #696]	@ (80019f0 <ModbusMap+0xa00>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4bae      	ldr	r3, [pc, #696]	@ (80019f4 <ModbusMap+0xa04>)
 800173c:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 800173e:	4ba6      	ldr	r3, [pc, #664]	@ (80019d8 <ModbusMap+0x9e8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	4bac      	ldr	r3, [pc, #688]	@ (80019f8 <ModbusMap+0xa08>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f003 fcdd 	bl	8005108 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 800174e:	4ba9      	ldr	r3, [pc, #676]	@ (80019f4 <ModbusMap+0xa04>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	001a      	movs	r2, r3
 8001754:	4ba9      	ldr	r3, [pc, #676]	@ (80019fc <ModbusMap+0xa0c>)
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f003 fcd5 	bl	8005108 <wreeprom>

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	e7fd      	b.n	800175e <ModbusMap+0x76e>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8001762:	4b9f      	ldr	r3, [pc, #636]	@ (80019e0 <ModbusMap+0x9f0>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	4aa6      	ldr	r2, [pc, #664]	@ (8001a00 <ModbusMap+0xa10>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d926      	bls.n	80017ba <ModbusMap+0x7ca>
 800176c:	4b9c      	ldr	r3, [pc, #624]	@ (80019e0 <ModbusMap+0x9f0>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	4aa4      	ldr	r2, [pc, #656]	@ (8001a04 <ModbusMap+0xa14>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d821      	bhi.n	80017ba <ModbusMap+0x7ca>
					PNU_0x3006 = _u16WriteVal;
 8001776:	4b9d      	ldr	r3, [pc, #628]	@ (80019ec <ModbusMap+0x9fc>)
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	4ba3      	ldr	r3, [pc, #652]	@ (8001a08 <ModbusMap+0xa18>)
 800177c:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 800177e:	4ba2      	ldr	r3, [pc, #648]	@ (8001a08 <ModbusMap+0xa18>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29b      	uxth	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b93      	ldr	r3, [pc, #588]	@ (80019d8 <ModbusMap+0x9e8>)
 800178a:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 800178c:	4b9e      	ldr	r3, [pc, #632]	@ (8001a08 <ModbusMap+0xa18>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b98      	ldr	r3, [pc, #608]	@ (80019f4 <ModbusMap+0xa04>)
 8001794:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8001796:	4b90      	ldr	r3, [pc, #576]	@ (80019d8 <ModbusMap+0x9e8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	001a      	movs	r2, r3
 800179c:	4b9b      	ldr	r3, [pc, #620]	@ (8001a0c <ModbusMap+0xa1c>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f003 fcb1 	bl	8005108 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 80017a6:	4b93      	ldr	r3, [pc, #588]	@ (80019f4 <ModbusMap+0xa04>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	001a      	movs	r2, r3
 80017ac:	4b98      	ldr	r3, [pc, #608]	@ (8001a10 <ModbusMap+0xa20>)
 80017ae:	0019      	movs	r1, r3
 80017b0:	0010      	movs	r0, r2
 80017b2:	f003 fca9 	bl	8005108 <wreeprom>
			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	e7fd      	b.n	80017b6 <ModbusMap+0x7c6>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 80017ba:	4b89      	ldr	r3, [pc, #548]	@ (80019e0 <ModbusMap+0x9f0>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	4a95      	ldr	r2, [pc, #596]	@ (8001a14 <ModbusMap+0xa24>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d90f      	bls.n	80017e4 <ModbusMap+0x7f4>
 80017c4:	4b86      	ldr	r3, [pc, #536]	@ (80019e0 <ModbusMap+0x9f0>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4a93      	ldr	r2, [pc, #588]	@ (8001a18 <ModbusMap+0xa28>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d80a      	bhi.n	80017e4 <ModbusMap+0x7f4>
					PNU_0x3008 = lowByte(_u16WriteVal);
 80017ce:	4b87      	ldr	r3, [pc, #540]	@ (80019ec <ModbusMap+0x9fc>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	001a      	movs	r2, r3
 80017d6:	4b91      	ldr	r3, [pc, #580]	@ (8001a1c <ModbusMap+0xa2c>)
 80017d8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80017da:	4b80      	ldr	r3, [pc, #512]	@ (80019dc <ModbusMap+0x9ec>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fc96 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 80017e4:	4b7e      	ldr	r3, [pc, #504]	@ (80019e0 <ModbusMap+0x9f0>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	4a8d      	ldr	r2, [pc, #564]	@ (8001a20 <ModbusMap+0xa30>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d90f      	bls.n	800180e <ModbusMap+0x81e>
 80017ee:	4b7c      	ldr	r3, [pc, #496]	@ (80019e0 <ModbusMap+0x9f0>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4a8c      	ldr	r2, [pc, #560]	@ (8001a24 <ModbusMap+0xa34>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d80a      	bhi.n	800180e <ModbusMap+0x81e>
					PNU_0x300A = lowByte(_u16WriteVal);
 80017f8:	4b7c      	ldr	r3, [pc, #496]	@ (80019ec <ModbusMap+0x9fc>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	001a      	movs	r2, r3
 8001800:	4b89      	ldr	r3, [pc, #548]	@ (8001a28 <ModbusMap+0xa38>)
 8001802:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001804:	4b75      	ldr	r3, [pc, #468]	@ (80019dc <ModbusMap+0x9ec>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 fc81 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 800180e:	4b74      	ldr	r3, [pc, #464]	@ (80019e0 <ModbusMap+0x9f0>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4a86      	ldr	r2, [pc, #536]	@ (8001a2c <ModbusMap+0xa3c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d90f      	bls.n	8001838 <ModbusMap+0x848>
 8001818:	4b71      	ldr	r3, [pc, #452]	@ (80019e0 <ModbusMap+0x9f0>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4a84      	ldr	r2, [pc, #528]	@ (8001a30 <ModbusMap+0xa40>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d80a      	bhi.n	8001838 <ModbusMap+0x848>
					PNU_0x300C = lowByte(_u16WriteVal);
 8001822:	4b72      	ldr	r3, [pc, #456]	@ (80019ec <ModbusMap+0x9fc>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	001a      	movs	r2, r3
 800182a:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <ModbusMap+0xa44>)
 800182c:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800182e:	4b6b      	ldr	r3, [pc, #428]	@ (80019dc <ModbusMap+0x9ec>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fc6c 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 8001838:	4b69      	ldr	r3, [pc, #420]	@ (80019e0 <ModbusMap+0x9f0>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <ModbusMap+0xa48>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d90f      	bls.n	8001862 <ModbusMap+0x872>
 8001842:	4b67      	ldr	r3, [pc, #412]	@ (80019e0 <ModbusMap+0x9f0>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	4a7d      	ldr	r2, [pc, #500]	@ (8001a3c <ModbusMap+0xa4c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d80a      	bhi.n	8001862 <ModbusMap+0x872>
					PNU_0x300E = lowByte(_u16WriteVal);
 800184c:	4b67      	ldr	r3, [pc, #412]	@ (80019ec <ModbusMap+0x9fc>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	001a      	movs	r2, r3
 8001854:	4b7a      	ldr	r3, [pc, #488]	@ (8001a40 <ModbusMap+0xa50>)
 8001856:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001858:	4b60      	ldr	r3, [pc, #384]	@ (80019dc <ModbusMap+0x9ec>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f000 fc57 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 8001862:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <ModbusMap+0x9f0>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4a77      	ldr	r2, [pc, #476]	@ (8001a44 <ModbusMap+0xa54>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d90f      	bls.n	800188c <ModbusMap+0x89c>
 800186c:	4b5c      	ldr	r3, [pc, #368]	@ (80019e0 <ModbusMap+0x9f0>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	4a75      	ldr	r2, [pc, #468]	@ (8001a48 <ModbusMap+0xa58>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d80a      	bhi.n	800188c <ModbusMap+0x89c>
					PNU_0x3010 = lowByte(_u16WriteVal);
 8001876:	4b5d      	ldr	r3, [pc, #372]	@ (80019ec <ModbusMap+0x9fc>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	001a      	movs	r2, r3
 800187e:	4b73      	ldr	r3, [pc, #460]	@ (8001a4c <ModbusMap+0xa5c>)
 8001880:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001882:	4b56      	ldr	r3, [pc, #344]	@ (80019dc <ModbusMap+0x9ec>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fc42 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 800188c:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <ModbusMap+0x9f0>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	4a6f      	ldr	r2, [pc, #444]	@ (8001a50 <ModbusMap+0xa60>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d90f      	bls.n	80018b6 <ModbusMap+0x8c6>
 8001896:	4b52      	ldr	r3, [pc, #328]	@ (80019e0 <ModbusMap+0x9f0>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a54 <ModbusMap+0xa64>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d80a      	bhi.n	80018b6 <ModbusMap+0x8c6>
					PNU_0x3012 = lowByte(_u16WriteVal);
 80018a0:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <ModbusMap+0x9fc>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	001a      	movs	r2, r3
 80018a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a58 <ModbusMap+0xa68>)
 80018aa:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80018ac:	4b4b      	ldr	r3, [pc, #300]	@ (80019dc <ModbusMap+0x9ec>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fc2d 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <ModbusMap+0x9f0>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	4a68      	ldr	r2, [pc, #416]	@ (8001a5c <ModbusMap+0xa6c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d90f      	bls.n	80018e0 <ModbusMap+0x8f0>
 80018c0:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <ModbusMap+0x9f0>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4a66      	ldr	r2, [pc, #408]	@ (8001a60 <ModbusMap+0xa70>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d80a      	bhi.n	80018e0 <ModbusMap+0x8f0>
					PNU_0x3014 = lowByte(_u16WriteVal);
 80018ca:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <ModbusMap+0x9fc>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	001a      	movs	r2, r3
 80018d2:	4b64      	ldr	r3, [pc, #400]	@ (8001a64 <ModbusMap+0xa74>)
 80018d4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80018d6:	4b41      	ldr	r3, [pc, #260]	@ (80019dc <ModbusMap+0x9ec>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fc18 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 80018e0:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <ModbusMap+0x9f0>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	4a60      	ldr	r2, [pc, #384]	@ (8001a68 <ModbusMap+0xa78>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d90f      	bls.n	800190a <ModbusMap+0x91a>
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <ModbusMap+0x9f0>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4a5f      	ldr	r2, [pc, #380]	@ (8001a6c <ModbusMap+0xa7c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d80a      	bhi.n	800190a <ModbusMap+0x91a>
					PNU_0x3016 = lowByte(_u16WriteVal);
 80018f4:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <ModbusMap+0x9fc>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	001a      	movs	r2, r3
 80018fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a70 <ModbusMap+0xa80>)
 80018fe:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001900:	4b36      	ldr	r3, [pc, #216]	@ (80019dc <ModbusMap+0x9ec>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 fc03 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <ModbusMap+0x9f0>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	4a59      	ldr	r2, [pc, #356]	@ (8001a74 <ModbusMap+0xa84>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d90f      	bls.n	8001934 <ModbusMap+0x944>
 8001914:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <ModbusMap+0x9f0>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	4a57      	ldr	r2, [pc, #348]	@ (8001a78 <ModbusMap+0xa88>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d80a      	bhi.n	8001934 <ModbusMap+0x944>
					PNU_0x3018 = lowByte(_u16WriteVal);
 800191e:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <ModbusMap+0x9fc>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	001a      	movs	r2, r3
 8001926:	4b55      	ldr	r3, [pc, #340]	@ (8001a7c <ModbusMap+0xa8c>)
 8001928:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800192a:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <ModbusMap+0x9ec>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fbee 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8001934:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <ModbusMap+0x9f0>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	4a51      	ldr	r2, [pc, #324]	@ (8001a80 <ModbusMap+0xa90>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d90f      	bls.n	800195e <ModbusMap+0x96e>
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <ModbusMap+0x9f0>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	4a50      	ldr	r2, [pc, #320]	@ (8001a84 <ModbusMap+0xa94>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d80a      	bhi.n	800195e <ModbusMap+0x96e>
					PNU_0x301A = lowByte(_u16WriteVal);
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <ModbusMap+0x9fc>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	001a      	movs	r2, r3
 8001950:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <ModbusMap+0xa98>)
 8001952:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <ModbusMap+0x9ec>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 fbd9 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <ModbusMap+0x9f0>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	4a4a      	ldr	r2, [pc, #296]	@ (8001a8c <ModbusMap+0xa9c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d90f      	bls.n	8001988 <ModbusMap+0x998>
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <ModbusMap+0x9f0>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	4a48      	ldr	r2, [pc, #288]	@ (8001a90 <ModbusMap+0xaa0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d80a      	bhi.n	8001988 <ModbusMap+0x998>
					PNU_0x301C = lowByte(_u16WriteVal);
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <ModbusMap+0x9fc>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	001a      	movs	r2, r3
 800197a:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <ModbusMap+0xaa4>)
 800197c:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <ModbusMap+0x9ec>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 fbc4 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <ModbusMap+0x9f0>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	4a42      	ldr	r2, [pc, #264]	@ (8001a98 <ModbusMap+0xaa8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d800      	bhi.n	8001994 <ModbusMap+0x9a4>
 8001992:	e089      	b.n	8001aa8 <ModbusMap+0xab8>
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <ModbusMap+0x9f0>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	4a40      	ldr	r2, [pc, #256]	@ (8001a9c <ModbusMap+0xaac>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d900      	bls.n	80019a0 <ModbusMap+0x9b0>
 800199e:	e083      	b.n	8001aa8 <ModbusMap+0xab8>
					PNU_0x301E = lowByte(_u16WriteVal);
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <ModbusMap+0x9fc>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	001a      	movs	r2, r3
 80019a8:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <ModbusMap+0xab0>)
 80019aa:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 80019ac:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <ModbusMap+0xab0>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <ModbusMap+0x9e8>)
 80019b4:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <ModbusMap+0x9e8>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	001a      	movs	r2, r3
 80019bc:	4b39      	ldr	r3, [pc, #228]	@ (8001aa4 <ModbusMap+0xab4>)
 80019be:	0019      	movs	r1, r3
 80019c0:	0010      	movs	r0, r2
 80019c2:	f003 fba1 	bl	8005108 <wreeprom>

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	e7fd      	b.n	80019c6 <ModbusMap+0x9d6>
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	20000b54 	.word	0x20000b54
 80019d0:	20000356 	.word	0x20000356
 80019d4:	0803f000 	.word	0x0803f000
 80019d8:	20000b76 	.word	0x20000b76
 80019dc:	20000404 	.word	0x20000404
 80019e0:	200003ba 	.word	0x200003ba
 80019e4:	00003003 	.word	0x00003003
 80019e8:	00003004 	.word	0x00003004
 80019ec:	200003bc 	.word	0x200003bc
 80019f0:	20000098 	.word	0x20000098
 80019f4:	20000b77 	.word	0x20000b77
 80019f8:	20000305 	.word	0x20000305
 80019fc:	20000306 	.word	0x20000306
 8001a00:	00003005 	.word	0x00003005
 8001a04:	00003006 	.word	0x00003006
 8001a08:	2000009a 	.word	0x2000009a
 8001a0c:	20000307 	.word	0x20000307
 8001a10:	20000308 	.word	0x20000308
 8001a14:	00003007 	.word	0x00003007
 8001a18:	00003008 	.word	0x00003008
 8001a1c:	2000009c 	.word	0x2000009c
 8001a20:	00003009 	.word	0x00003009
 8001a24:	0000300a 	.word	0x0000300a
 8001a28:	20000b56 	.word	0x20000b56
 8001a2c:	0000300b 	.word	0x0000300b
 8001a30:	0000300c 	.word	0x0000300c
 8001a34:	2000009e 	.word	0x2000009e
 8001a38:	0000300d 	.word	0x0000300d
 8001a3c:	0000300e 	.word	0x0000300e
 8001a40:	20000b58 	.word	0x20000b58
 8001a44:	0000300f 	.word	0x0000300f
 8001a48:	00003010 	.word	0x00003010
 8001a4c:	200000a0 	.word	0x200000a0
 8001a50:	00003011 	.word	0x00003011
 8001a54:	00003012 	.word	0x00003012
 8001a58:	200000a2 	.word	0x200000a2
 8001a5c:	00003013 	.word	0x00003013
 8001a60:	00003014 	.word	0x00003014
 8001a64:	200000a4 	.word	0x200000a4
 8001a68:	00003015 	.word	0x00003015
 8001a6c:	00003016 	.word	0x00003016
 8001a70:	200000a6 	.word	0x200000a6
 8001a74:	00003017 	.word	0x00003017
 8001a78:	00003018 	.word	0x00003018
 8001a7c:	200000a8 	.word	0x200000a8
 8001a80:	00003019 	.word	0x00003019
 8001a84:	0000301a 	.word	0x0000301a
 8001a88:	200000aa 	.word	0x200000aa
 8001a8c:	0000301b 	.word	0x0000301b
 8001a90:	0000301c 	.word	0x0000301c
 8001a94:	200000ac 	.word	0x200000ac
 8001a98:	0000301d 	.word	0x0000301d
 8001a9c:	0000301e 	.word	0x0000301e
 8001aa0:	200000ae 	.word	0x200000ae
 8001aa4:	20000376 	.word	0x20000376
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8001aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8001d48 <ModbusMap+0xd58>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	4aa7      	ldr	r2, [pc, #668]	@ (8001d4c <ModbusMap+0xd5c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d919      	bls.n	8001ae6 <ModbusMap+0xaf6>
 8001ab2:	4ba5      	ldr	r3, [pc, #660]	@ (8001d48 <ModbusMap+0xd58>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	4aa6      	ldr	r2, [pc, #664]	@ (8001d50 <ModbusMap+0xd60>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d814      	bhi.n	8001ae6 <ModbusMap+0xaf6>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8001abc:	4ba5      	ldr	r3, [pc, #660]	@ (8001d54 <ModbusMap+0xd64>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	4ba4      	ldr	r3, [pc, #656]	@ (8001d58 <ModbusMap+0xd68>)
 8001ac6:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8001ac8:	4ba3      	ldr	r3, [pc, #652]	@ (8001d58 <ModbusMap+0xd68>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4ba3      	ldr	r3, [pc, #652]	@ (8001d5c <ModbusMap+0xd6c>)
 8001ad0:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 8001ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8001d5c <ModbusMap+0xd6c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8001d60 <ModbusMap+0xd70>)
 8001ada:	0019      	movs	r1, r3
 8001adc:	0010      	movs	r0, r2
 8001ade:	f003 fb13 	bl	8005108 <wreeprom>

			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	e7fd      	b.n	8001ae2 <ModbusMap+0xaf2>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8001ae6:	4b98      	ldr	r3, [pc, #608]	@ (8001d48 <ModbusMap+0xd58>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	4a9e      	ldr	r2, [pc, #632]	@ (8001d64 <ModbusMap+0xd74>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d90f      	bls.n	8001b10 <ModbusMap+0xb20>
 8001af0:	4b95      	ldr	r3, [pc, #596]	@ (8001d48 <ModbusMap+0xd58>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4a9c      	ldr	r2, [pc, #624]	@ (8001d68 <ModbusMap+0xd78>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d80a      	bhi.n	8001b10 <ModbusMap+0xb20>
					PNU_0x3106 = lowByte(_u16WriteVal);
 8001afa:	4b96      	ldr	r3, [pc, #600]	@ (8001d54 <ModbusMap+0xd64>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	001a      	movs	r2, r3
 8001b02:	4b9a      	ldr	r3, [pc, #616]	@ (8001d6c <ModbusMap+0xd7c>)
 8001b04:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001b06:	4b9a      	ldr	r3, [pc, #616]	@ (8001d70 <ModbusMap+0xd80>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 fb00 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 8001b10:	4b8d      	ldr	r3, [pc, #564]	@ (8001d48 <ModbusMap+0xd58>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	4a97      	ldr	r2, [pc, #604]	@ (8001d74 <ModbusMap+0xd84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d90f      	bls.n	8001b3a <ModbusMap+0xb4a>
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d48 <ModbusMap+0xd58>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	4a96      	ldr	r2, [pc, #600]	@ (8001d78 <ModbusMap+0xd88>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d80a      	bhi.n	8001b3a <ModbusMap+0xb4a>
					PNU_0x3108 = lowByte(_u16WriteVal);
 8001b24:	4b8b      	ldr	r3, [pc, #556]	@ (8001d54 <ModbusMap+0xd64>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	4b93      	ldr	r3, [pc, #588]	@ (8001d7c <ModbusMap+0xd8c>)
 8001b2e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001b30:	4b8f      	ldr	r3, [pc, #572]	@ (8001d70 <ModbusMap+0xd80>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 faeb 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 8001b3a:	4b83      	ldr	r3, [pc, #524]	@ (8001d48 <ModbusMap+0xd58>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	4a90      	ldr	r2, [pc, #576]	@ (8001d80 <ModbusMap+0xd90>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d90f      	bls.n	8001b64 <ModbusMap+0xb74>
 8001b44:	4b80      	ldr	r3, [pc, #512]	@ (8001d48 <ModbusMap+0xd58>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	4a8e      	ldr	r2, [pc, #568]	@ (8001d84 <ModbusMap+0xd94>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d80a      	bhi.n	8001b64 <ModbusMap+0xb74>
					PNU_0x310A = lowByte(_u16WriteVal);
 8001b4e:	4b81      	ldr	r3, [pc, #516]	@ (8001d54 <ModbusMap+0xd64>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	001a      	movs	r2, r3
 8001b56:	4b8c      	ldr	r3, [pc, #560]	@ (8001d88 <ModbusMap+0xd98>)
 8001b58:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001b5a:	4b85      	ldr	r3, [pc, #532]	@ (8001d70 <ModbusMap+0xd80>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fad6 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <ModbusMap+0xd58>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	4a88      	ldr	r2, [pc, #544]	@ (8001d8c <ModbusMap+0xd9c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d90f      	bls.n	8001b8e <ModbusMap+0xb9e>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <ModbusMap+0xd58>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	4a87      	ldr	r2, [pc, #540]	@ (8001d90 <ModbusMap+0xda0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d80a      	bhi.n	8001b8e <ModbusMap+0xb9e>
					PNU_0x310C = lowByte(_u16WriteVal);
 8001b78:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <ModbusMap+0xd64>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	001a      	movs	r2, r3
 8001b80:	4b84      	ldr	r3, [pc, #528]	@ (8001d94 <ModbusMap+0xda4>)
 8001b82:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001b84:	4b7a      	ldr	r3, [pc, #488]	@ (8001d70 <ModbusMap+0xd80>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fac1 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d48 <ModbusMap+0xd58>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4a81      	ldr	r2, [pc, #516]	@ (8001d98 <ModbusMap+0xda8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d90f      	bls.n	8001bb8 <ModbusMap+0xbc8>
 8001b98:	4b6b      	ldr	r3, [pc, #428]	@ (8001d48 <ModbusMap+0xd58>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4a7f      	ldr	r2, [pc, #508]	@ (8001d9c <ModbusMap+0xdac>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d80a      	bhi.n	8001bb8 <ModbusMap+0xbc8>
					PNU_0x310E = lowByte(_u16WriteVal);
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <ModbusMap+0xd64>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	001a      	movs	r2, r3
 8001baa:	4b7d      	ldr	r3, [pc, #500]	@ (8001da0 <ModbusMap+0xdb0>)
 8001bac:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <ModbusMap+0xd80>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 faac 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <ModbusMap+0xd58>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	019b      	lsls	r3, r3, #6
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d310      	bcc.n	8001be6 <ModbusMap+0xbf6>
 8001bc4:	4b60      	ldr	r3, [pc, #384]	@ (8001d48 <ModbusMap+0xd58>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	23c8      	movs	r3, #200	@ 0xc8
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d80a      	bhi.n	8001be6 <ModbusMap+0xbf6>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8001bd0:	4b60      	ldr	r3, [pc, #384]	@ (8001d54 <ModbusMap+0xd64>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	4b72      	ldr	r3, [pc, #456]	@ (8001da4 <ModbusMap+0xdb4>)
 8001bda:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001bdc:	4b64      	ldr	r3, [pc, #400]	@ (8001d70 <ModbusMap+0xd80>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fa95 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8001be6:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <ModbusMap+0xd58>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4a6f      	ldr	r2, [pc, #444]	@ (8001da8 <ModbusMap+0xdb8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d90f      	bls.n	8001c10 <ModbusMap+0xc20>
 8001bf0:	4b55      	ldr	r3, [pc, #340]	@ (8001d48 <ModbusMap+0xd58>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	4a6d      	ldr	r2, [pc, #436]	@ (8001dac <ModbusMap+0xdbc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d80a      	bhi.n	8001c10 <ModbusMap+0xc20>
					PNU_0x3202 = lowByte(_u16WriteVal);
 8001bfa:	4b56      	ldr	r3, [pc, #344]	@ (8001d54 <ModbusMap+0xd64>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	001a      	movs	r2, r3
 8001c02:	4b6b      	ldr	r3, [pc, #428]	@ (8001db0 <ModbusMap+0xdc0>)
 8001c04:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001c06:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <ModbusMap+0xd80>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fa80 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 8001c10:	4b4d      	ldr	r3, [pc, #308]	@ (8001d48 <ModbusMap+0xd58>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	4a67      	ldr	r2, [pc, #412]	@ (8001db4 <ModbusMap+0xdc4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d90f      	bls.n	8001c3a <ModbusMap+0xc4a>
 8001c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <ModbusMap+0xd58>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4a66      	ldr	r2, [pc, #408]	@ (8001db8 <ModbusMap+0xdc8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d80a      	bhi.n	8001c3a <ModbusMap+0xc4a>
					PNU_0x3204 = lowByte(_u16WriteVal);
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <ModbusMap+0xd64>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <ModbusMap+0xdcc>)
 8001c2e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001c30:	4b4f      	ldr	r3, [pc, #316]	@ (8001d70 <ModbusMap+0xd80>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 fa6b 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 8001c3a:	4b43      	ldr	r3, [pc, #268]	@ (8001d48 <ModbusMap+0xd58>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	4a60      	ldr	r2, [pc, #384]	@ (8001dc0 <ModbusMap+0xdd0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d90f      	bls.n	8001c64 <ModbusMap+0xc74>
 8001c44:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <ModbusMap+0xd58>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc4 <ModbusMap+0xdd4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d80a      	bhi.n	8001c64 <ModbusMap+0xc74>
					PNU_0x3206 = lowByte(_u16WriteVal);
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <ModbusMap+0xd64>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	001a      	movs	r2, r3
 8001c56:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc8 <ModbusMap+0xdd8>)
 8001c58:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001c5a:	4b45      	ldr	r3, [pc, #276]	@ (8001d70 <ModbusMap+0xd80>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fa56 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 8001c64:	4b38      	ldr	r3, [pc, #224]	@ (8001d48 <ModbusMap+0xd58>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <ModbusMap+0xddc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d90f      	bls.n	8001c8e <ModbusMap+0xc9e>
 8001c6e:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <ModbusMap+0xd58>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	4a57      	ldr	r2, [pc, #348]	@ (8001dd0 <ModbusMap+0xde0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d80a      	bhi.n	8001c8e <ModbusMap+0xc9e>
					PNU_0x3208 = lowByte(_u16WriteVal);
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <ModbusMap+0xd64>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	001a      	movs	r2, r3
 8001c80:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <ModbusMap+0xde4>)
 8001c82:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001c84:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <ModbusMap+0xd80>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 fa41 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <ModbusMap+0xd58>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	4a51      	ldr	r2, [pc, #324]	@ (8001dd8 <ModbusMap+0xde8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d90f      	bls.n	8001cb8 <ModbusMap+0xcc8>
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <ModbusMap+0xd58>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ddc <ModbusMap+0xdec>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d80a      	bhi.n	8001cb8 <ModbusMap+0xcc8>
					PNU_0x320A = lowByte(_u16WriteVal);
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <ModbusMap+0xd64>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	001a      	movs	r2, r3
 8001caa:	4b4d      	ldr	r3, [pc, #308]	@ (8001de0 <ModbusMap+0xdf0>)
 8001cac:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001cae:	4b30      	ldr	r3, [pc, #192]	@ (8001d70 <ModbusMap+0xd80>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fa2c 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 8001cb8:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <ModbusMap+0xd58>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	@ (8001de4 <ModbusMap+0xdf4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d90f      	bls.n	8001ce2 <ModbusMap+0xcf2>
 8001cc2:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <ModbusMap+0xd58>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4a48      	ldr	r2, [pc, #288]	@ (8001de8 <ModbusMap+0xdf8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d80a      	bhi.n	8001ce2 <ModbusMap+0xcf2>
					PNU_0x320C = lowByte(_u16WriteVal);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <ModbusMap+0xd64>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	4b45      	ldr	r3, [pc, #276]	@ (8001dec <ModbusMap+0xdfc>)
 8001cd6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <ModbusMap+0xd80>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 fa17 	bl	8002110 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <ModbusMap+0xd58>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ce8:	d91a      	bls.n	8001d20 <ModbusMap+0xd30>
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <ModbusMap+0xd58>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2b30      	cmp	r3, #48	@ 0x30
 8001cf0:	d816      	bhi.n	8001d20 <ModbusMap+0xd30>

					if (_u16WriteVal == 1){
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <ModbusMap+0xd64>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d104      	bne.n	8001d04 <ModbusMap+0xd14>
						if(flagsa[3]){
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <ModbusMap+0xe00>)
 8001cfc:	78db      	ldrb	r3, [r3, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d000      	beq.n	8001d04 <ModbusMap+0xd14>
							asm ("nop");
 8001d02:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <ModbusMap+0xd64>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d104      	bne.n	8001d16 <ModbusMap+0xd26>
						if(flagsa[3]){
 8001d0c:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <ModbusMap+0xe00>)
 8001d0e:	78db      	ldrb	r3, [r3, #3]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d100      	bne.n	8001d16 <ModbusMap+0xd26>

						}
						else{
							asm ("nop");
 8001d14:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <ModbusMap+0xd80>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 f9f8 	bl	8002110 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <ModbusMap+0xd58>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2b30      	cmp	r3, #48	@ 0x30
 8001d26:	d800      	bhi.n	8001d2a <ModbusMap+0xd3a>
 8001d28:	e07b      	b.n	8001e22 <ModbusMap+0xe32>
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <ModbusMap+0xd58>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b31      	cmp	r3, #49	@ 0x31
 8001d30:	d900      	bls.n	8001d34 <ModbusMap+0xd44>
 8001d32:	e076      	b.n	8001e22 <ModbusMap+0xe32>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <ModbusMap+0xd64>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d164      	bne.n	8001e06 <ModbusMap+0xe16>
						if(GPIOR0[1]){
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <ModbusMap+0xe04>)
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d059      	beq.n	8001df8 <ModbusMap+0xe08>
							asm ("nop");
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	e05e      	b.n	8001e06 <ModbusMap+0xe16>
 8001d48:	200003ba 	.word	0x200003ba
 8001d4c:	00003103 	.word	0x00003103
 8001d50:	00003104 	.word	0x00003104
 8001d54:	200003bc 	.word	0x200003bc
 8001d58:	200000b0 	.word	0x200000b0
 8001d5c:	20000b76 	.word	0x20000b76
 8001d60:	2000034d 	.word	0x2000034d
 8001d64:	00003105 	.word	0x00003105
 8001d68:	00003106 	.word	0x00003106
 8001d6c:	200000b2 	.word	0x200000b2
 8001d70:	20000404 	.word	0x20000404
 8001d74:	00003107 	.word	0x00003107
 8001d78:	00003108 	.word	0x00003108
 8001d7c:	200000b4 	.word	0x200000b4
 8001d80:	00003109 	.word	0x00003109
 8001d84:	0000310a 	.word	0x0000310a
 8001d88:	200000b6 	.word	0x200000b6
 8001d8c:	0000310b 	.word	0x0000310b
 8001d90:	0000310c 	.word	0x0000310c
 8001d94:	200000b8 	.word	0x200000b8
 8001d98:	0000310d 	.word	0x0000310d
 8001d9c:	0000310e 	.word	0x0000310e
 8001da0:	200000ba 	.word	0x200000ba
 8001da4:	20000b5a 	.word	0x20000b5a
 8001da8:	00003201 	.word	0x00003201
 8001dac:	00003202 	.word	0x00003202
 8001db0:	20000b5c 	.word	0x20000b5c
 8001db4:	00003203 	.word	0x00003203
 8001db8:	00003204 	.word	0x00003204
 8001dbc:	20000b5e 	.word	0x20000b5e
 8001dc0:	00003205 	.word	0x00003205
 8001dc4:	00003206 	.word	0x00003206
 8001dc8:	20000b60 	.word	0x20000b60
 8001dcc:	00003207 	.word	0x00003207
 8001dd0:	00003208 	.word	0x00003208
 8001dd4:	20000b62 	.word	0x20000b62
 8001dd8:	00003209 	.word	0x00003209
 8001ddc:	0000320a 	.word	0x0000320a
 8001de0:	20000b64 	.word	0x20000b64
 8001de4:	0000320b 	.word	0x0000320b
 8001de8:	0000320c 	.word	0x0000320c
 8001dec:	20000b66 	.word	0x20000b66
 8001df0:	20000b98 	.word	0x20000b98
 8001df4:	20000bc4 	.word	0x20000bc4
						}
						else{
							flags_accMenu |=0x01;
 8001df8:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <ModbusMap+0xf0c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <ModbusMap+0xf0c>)
 8001e04:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8001e06:	4b3e      	ldr	r3, [pc, #248]	@ (8001f00 <ModbusMap+0xf10>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d104      	bne.n	8001e18 <ModbusMap+0xe28>
						if(GPIOR0[1]){
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <ModbusMap+0xf14>)
 8001e10:	785b      	ldrb	r3, [r3, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d100      	bne.n	8001e18 <ModbusMap+0xe28>
						}
						else{
							asm ("nop");
 8001e16:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001e18:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <ModbusMap+0xf18>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f977 	bl	8002110 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 8001e22:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <ModbusMap+0xf1c>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	2b31      	cmp	r3, #49	@ 0x31
 8001e28:	d800      	bhi.n	8001e2c <ModbusMap+0xe3c>
 8001e2a:	e061      	b.n	8001ef0 <ModbusMap+0xf00>
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <ModbusMap+0xf1c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b32      	cmp	r3, #50	@ 0x32
 8001e32:	d900      	bls.n	8001e36 <ModbusMap+0xe46>
 8001e34:	e05c      	b.n	8001ef0 <ModbusMap+0xf00>

					if (_u16WriteVal == 1){
 8001e36:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <ModbusMap+0xf10>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <ModbusMap+0xe60>
						if(GPIOR0[2]){
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <ModbusMap+0xf14>)
 8001e40:	789b      	ldrb	r3, [r3, #2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <ModbusMap+0xe5a>
							asm ("nop");
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	e002      	b.n	8001e50 <ModbusMap+0xe60>
						}
						else{
							flagsb[0] = 1;
 8001e4a:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <ModbusMap+0xf20>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <ModbusMap+0xf10>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <ModbusMap+0xe7c>
						if(GPIOR0[2]){
 8001e58:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <ModbusMap+0xf14>)
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <ModbusMap+0xe7a>
							asm ("nop");
 8001e60:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 8001e62:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <ModbusMap+0xf20>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e000      	b.n	8001e6c <ModbusMap+0xe7c>

						}
						else{
							asm ("nop");
 8001e6a:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <ModbusMap+0xf18>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f94d 	bl	8002110 <ModbusSlaveTransaction>
				}
			break;
 8001e76:	e03b      	b.n	8001ef0 <ModbusMap+0xf00>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 fa71 	bl	8002360 <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8001e7e:	e038      	b.n	8001ef2 <ModbusMap+0xf02>
				  break;
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	e036      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	e034      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	e032      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	e030      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e90:	46c0      	nop			@ (mov r8, r8)
 8001e92:	e02e      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	e02c      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	e02a      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	e028      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	e026      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	e024      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	e022      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	e020      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001eb0:	46c0      	nop			@ (mov r8, r8)
 8001eb2:	e01e      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001eb4:	46c0      	nop			@ (mov r8, r8)
 8001eb6:	e01c      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	e01a      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	e018      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	e016      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ec4:	46c0      	nop			@ (mov r8, r8)
 8001ec6:	e014      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	e012      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	e010      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	e00e      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ed4:	46c0      	nop			@ (mov r8, r8)
 8001ed6:	e00c      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	e00a      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	e008      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ee0:	46c0      	nop			@ (mov r8, r8)
 8001ee2:	e006      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	e004      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	e002      	b.n	8001ef2 <ModbusMap+0xf02>
					break;
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	e000      	b.n	8001ef2 <ModbusMap+0xf02>
			break;
 8001ef0:	46c0      	nop			@ (mov r8, r8)
}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b003      	add	sp, #12
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	20000c70 	.word	0x20000c70
 8001f00:	200003bc 	.word	0x200003bc
 8001f04:	20000bc4 	.word	0x20000bc4
 8001f08:	20000404 	.word	0x20000404
 8001f0c:	200003ba 	.word	0x200003ba
 8001f10:	20000c08 	.word	0x20000c08

08001f14 <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	221e      	movs	r2, #30
 8001f24:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	4929      	ldr	r1, [pc, #164]	@ (8001fd0 <serialEvent_RS485+0xbc>)
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <serialEvent_RS485+0xc0>)
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f014 feea 	bl	8016d08 <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <serialEvent_RS485+0xc4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	1cbb      	adds	r3, r7, #2
 8001f3c:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8001f3e:	1cba      	adds	r2, r7, #2
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d23c      	bcs.n	8001fc4 <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <serialEvent_RS485+0xc8>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	4013      	ands	r3, r2
 8001f52:	d037      	beq.n	8001fc4 <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8001f54:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <serialEvent_RS485+0xc0>)
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f014 ff41 	bl	8016de0 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <serialEvent_RS485+0xc8>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2210      	movs	r2, #16
 8001f64:	4013      	ands	r3, r2
 8001f66:	d003      	beq.n	8001f70 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <serialEvent_RS485+0xc0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e00c      	b.n	8001f92 <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 8001f78:	1dbb      	adds	r3, r7, #6
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4913      	ldr	r1, [pc, #76]	@ (8001fd0 <serialEvent_RS485+0xbc>)
 8001f82:	5c89      	ldrb	r1, [r1, r2]
 8001f84:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <serialEvent_RS485+0xcc>)
 8001f86:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	3201      	adds	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	1dbb      	adds	r3, r7, #6
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	1cbb      	adds	r3, r7, #2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	211e      	movs	r1, #30
 8001f9c:	1acb      	subs	r3, r1, r3
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3ea      	bcc.n	8001f78 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <serialEvent_RS485+0xcc>)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	1cbb      	adds	r3, r7, #2
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	1a8a      	subs	r2, r1, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <serialEvent_RS485+0xd0>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	781b      	ldrb	r3, [r3, #0]
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000b14 	.word	0x20000b14
 8001fd4:	2000070c 	.word	0x2000070c
 8001fd8:	20000860 	.word	0x20000860
 8001fdc:	40004c00 	.word	0x40004c00
 8001fe0:	20000b34 	.word	0x20000b34
 8001fe4:	200003b4 	.word	0x200003b4

08001fe8 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	1cfb      	adds	r3, r7, #3
 8001ff4:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 8001ff6:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <SerializeDMAArray_RS485+0x38>)
 8002000:	0018      	movs	r0, r3
 8002002:	f016 fc0f 	bl	8018824 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 8002006:	1cfb      	adds	r3, r7, #3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b29a      	uxth	r2, r3
 800200c:	4904      	ldr	r1, [pc, #16]	@ (8002020 <SerializeDMAArray_RS485+0x38>)
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SerializeDMAArray_RS485+0x3c>)
 8002010:	0018      	movs	r0, r3
 8002012:	f014 fde7 	bl	8016be4 <HAL_UART_Transmit_DMA>

}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	20000af4 	.word	0x20000af4
 8002024:	2000070c 	.word	0x2000070c

08002028 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	1d7b      	adds	r3, r7, #5
 8002036:	1c0a      	adds	r2, r1, #0
 8002038:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 800203a:	1d7b      	adds	r3, r7, #5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b299      	uxth	r1, r3
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	1dba      	adds	r2, r7, #6
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	404a      	eors	r2, r1
 8002048:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e015      	b.n	800207c <crc16_update+0x54>
{
if (crc & 1)
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	d008      	beq.n	800206c <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	1dbb      	adds	r3, r7, #6
 8002064:	490a      	ldr	r1, [pc, #40]	@ (8002090 <crc16_update+0x68>)
 8002066:	404a      	eors	r2, r1
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	e004      	b.n	8002076 <crc16_update+0x4e>
else
  crc = (crc >> 1);
 800206c:	1dbb      	adds	r3, r7, #6
 800206e:	1dba      	adds	r2, r7, #6
 8002070:	8812      	ldrh	r2, [r2, #0]
 8002072:	0852      	lsrs	r2, r2, #1
 8002074:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3301      	adds	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b07      	cmp	r3, #7
 8002080:	dde6      	ble.n	8002050 <crc16_update+0x28>
}

return crc;
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	ffffa001 	.word	0xffffa001

08002094 <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	0002      	movs	r2, r0
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <ModbusMaster_begin+0x28>)
 80020ae:	1dfa      	adds	r2, r7, #7
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <ModbusMaster_begin+0x2c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <ModbusMaster_begin+0x30>)
 80020bc:	2200      	movs	r2, #0
 80020be:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003b5 	.word	0x200003b5
 80020cc:	20000400 	.word	0x20000400
 80020d0:	20000402 	.word	0x20000402

080020d4 <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	0002      	movs	r2, r0
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	1c0a      	adds	r2, r1, #0
 80020e4:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b1f      	cmp	r3, #31
 80020ec:	d808      	bhi.n	8002100 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <ModbusSlave_setTransmitBuffer+0x38>)
 80020f4:	0052      	lsls	r2, r2, #1
 80020f6:	1d39      	adds	r1, r7, #4
 80020f8:	8809      	ldrh	r1, [r1, #0]
 80020fa:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	200003c0 	.word	0x200003c0

08002110 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b0c5      	sub	sp, #276	@ 0x114
 8002114:	af00      	add	r7, sp, #0
 8002116:	0002      	movs	r2, r0
 8002118:	4b88      	ldr	r3, [pc, #544]	@ (800233c <ModbusSlaveTransaction+0x22c>)
 800211a:	2588      	movs	r5, #136	@ 0x88
 800211c:	006d      	lsls	r5, r5, #1
 800211e:	195b      	adds	r3, r3, r5
 8002120:	19db      	adds	r3, r3, r7
 8002122:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8002124:	2410      	movs	r4, #16
 8002126:	34ff      	adds	r4, #255	@ 0xff
 8002128:	193b      	adds	r3, r7, r4
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 800212e:	4b84      	ldr	r3, [pc, #528]	@ (8002340 <ModbusSlaveTransaction+0x230>)
 8002130:	2201      	movs	r2, #1
 8002132:	2104      	movs	r1, #4
 8002134:	0018      	movs	r0, r3
 8002136:	f00e ffb8 	bl	80110aa <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 800213a:	0020      	movs	r0, r4
 800213c:	183b      	adds	r3, r7, r0
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	183a      	adds	r2, r7, r0
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	7011      	strb	r1, [r2, #0]
 8002146:	001a      	movs	r2, r3
 8002148:	4b7e      	ldr	r3, [pc, #504]	@ (8002344 <ModbusSlaveTransaction+0x234>)
 800214a:	7819      	ldrb	r1, [r3, #0]
 800214c:	4b7e      	ldr	r3, [pc, #504]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 800214e:	195b      	adds	r3, r3, r5
 8002150:	19db      	adds	r3, r3, r7
 8002152:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8002154:	183b      	adds	r3, r7, r0
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	183a      	adds	r2, r7, r0
 800215a:	1c59      	adds	r1, r3, #1
 800215c:	7011      	strb	r1, [r2, #0]
 800215e:	001a      	movs	r2, r3
 8002160:	4b7a      	ldr	r3, [pc, #488]	@ (800234c <ModbusSlaveTransaction+0x23c>)
 8002162:	7819      	ldrb	r1, [r3, #0]
 8002164:	4b78      	ldr	r3, [pc, #480]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 8002166:	195b      	adds	r3, r3, r5
 8002168:	19db      	adds	r3, r3, r7
 800216a:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 800216c:	4b73      	ldr	r3, [pc, #460]	@ (800233c <ModbusSlaveTransaction+0x22c>)
 800216e:	195b      	adds	r3, r3, r5
 8002170:	19db      	adds	r3, r3, r7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	dc02      	bgt.n	800217e <ModbusSlaveTransaction+0x6e>
 8002178:	2b03      	cmp	r3, #3
 800217a:	da03      	bge.n	8002184 <ModbusSlaveTransaction+0x74>
 800217c:	e077      	b.n	800226e <ModbusSlaveTransaction+0x15e>
 800217e:	2b06      	cmp	r3, #6
 8002180:	d04f      	beq.n	8002222 <ModbusSlaveTransaction+0x112>
 8002182:	e074      	b.n	800226e <ModbusSlaveTransaction+0x15e>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 8002184:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <ModbusSlaveTransaction+0x240>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	0059      	lsls	r1, r3, #1
 800218a:	2210      	movs	r2, #16
 800218c:	32ff      	adds	r2, #255	@ 0xff
 800218e:	18bb      	adds	r3, r7, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	18ba      	adds	r2, r7, r2
 8002194:	1c58      	adds	r0, r3, #1
 8002196:	7010      	strb	r0, [r2, #0]
 8002198:	001a      	movs	r2, r3
 800219a:	b2c9      	uxtb	r1, r1
 800219c:	4b6a      	ldr	r3, [pc, #424]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 800219e:	2088      	movs	r0, #136	@ 0x88
 80021a0:	0040      	lsls	r0, r0, #1
 80021a2:	181b      	adds	r3, r3, r0
 80021a4:	19db      	adds	r3, r3, r7
 80021a6:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 80021a8:	2387      	movs	r3, #135	@ 0x87
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e02c      	b.n	800220e <ModbusSlaveTransaction+0xfe>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 80021b4:	2487      	movs	r4, #135	@ 0x87
 80021b6:	0064      	lsls	r4, r4, #1
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	4b65      	ldr	r3, [pc, #404]	@ (8002354 <ModbusSlaveTransaction+0x244>)
 80021be:	0052      	lsls	r2, r2, #1
 80021c0:	5ad3      	ldrh	r3, [r2, r3]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b299      	uxth	r1, r3
 80021c6:	2510      	movs	r5, #16
 80021c8:	35ff      	adds	r5, #255	@ 0xff
 80021ca:	197b      	adds	r3, r7, r5
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	197a      	adds	r2, r7, r5
 80021d0:	1c58      	adds	r0, r3, #1
 80021d2:	7010      	strb	r0, [r2, #0]
 80021d4:	001a      	movs	r2, r3
 80021d6:	b2c9      	uxtb	r1, r1
 80021d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 80021da:	2688      	movs	r6, #136	@ 0x88
 80021dc:	0076      	lsls	r6, r6, #1
 80021de:	199b      	adds	r3, r3, r6
 80021e0:	19db      	adds	r3, r3, r7
 80021e2:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <ModbusSlaveTransaction+0x244>)
 80021ea:	0052      	lsls	r2, r2, #1
 80021ec:	5ad1      	ldrh	r1, [r2, r3]
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	197a      	adds	r2, r7, r5
 80021f4:	1c58      	adds	r0, r3, #1
 80021f6:	7010      	strb	r0, [r2, #0]
 80021f8:	001a      	movs	r2, r3
 80021fa:	b2c9      	uxtb	r1, r1
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 80021fe:	199b      	adds	r3, r3, r6
 8002200:	19db      	adds	r3, r3, r7
 8002202:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8002204:	193b      	adds	r3, r7, r4
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	193b      	adds	r3, r7, r4
 800220a:	3201      	adds	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	4b50      	ldr	r3, [pc, #320]	@ (8002350 <ModbusSlaveTransaction+0x240>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2287      	movs	r2, #135	@ 0x87
 8002216:	0052      	lsls	r2, r2, #1
 8002218:	18ba      	adds	r2, r7, r2
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3c9      	bcc.n	80021b4 <ModbusSlaveTransaction+0xa4>
      }
		break;
 8002220:	e025      	b.n	800226e <ModbusSlaveTransaction+0x15e>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 8002222:	2387      	movs	r3, #135	@ 0x87
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	2202      	movs	r2, #2
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e018      	b.n	8002260 <ModbusSlaveTransaction+0x150>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 800222e:	2487      	movs	r4, #135	@ 0x87
 8002230:	0064      	lsls	r4, r4, #1
 8002232:	193b      	adds	r3, r7, r4
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	2110      	movs	r1, #16
 8002238:	31ff      	adds	r1, #255	@ 0xff
 800223a:	187b      	adds	r3, r7, r1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	1879      	adds	r1, r7, r1
 8002240:	1c58      	adds	r0, r3, #1
 8002242:	7008      	strb	r0, [r1, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <ModbusSlaveTransaction+0x248>)
 8002248:	5c9a      	ldrb	r2, [r3, r2]
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 800224c:	2088      	movs	r0, #136	@ 0x88
 800224e:	0040      	lsls	r0, r0, #1
 8002250:	181b      	adds	r3, r3, r0
 8002252:	19db      	adds	r3, r3, r7
 8002254:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 8002256:	193b      	adds	r3, r7, r4
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	193b      	adds	r3, r7, r4
 800225c:	3201      	adds	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	2387      	movs	r3, #135	@ 0x87
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d9e0      	bls.n	800222e <ModbusSlaveTransaction+0x11e>
			}
		break;
 800226c:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 800226e:	2386      	movs	r3, #134	@ 0x86
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	4252      	negs	r2, r2
 8002278:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800227a:	2387      	movs	r3, #135	@ 0x87
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e019      	b.n	80022ba <ModbusSlaveTransaction+0x1aa>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8002286:	2587      	movs	r5, #135	@ 0x87
 8002288:	006d      	lsls	r5, r5, #1
 800228a:	197b      	adds	r3, r7, r5
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4a2e      	ldr	r2, [pc, #184]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 8002290:	2188      	movs	r1, #136	@ 0x88
 8002292:	0049      	lsls	r1, r1, #1
 8002294:	1852      	adds	r2, r2, r1
 8002296:	19d2      	adds	r2, r2, r7
 8002298:	5cd2      	ldrb	r2, [r2, r3]
 800229a:	2386      	movs	r3, #134	@ 0x86
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	18fc      	adds	r4, r7, r3
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	0011      	movs	r1, r2
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7ff febe 	bl	8002028 <crc16_update>
 80022ac:	0003      	movs	r3, r0
 80022ae:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80022b0:	197b      	adds	r3, r7, r5
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	3201      	adds	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	2387      	movs	r3, #135	@ 0x87
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	18fa      	adds	r2, r7, r3
 80022c0:	2010      	movs	r0, #16
 80022c2:	30ff      	adds	r0, #255	@ 0xff
 80022c4:	183b      	adds	r3, r7, r0
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3db      	bcc.n	8002286 <ModbusSlaveTransaction+0x176>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	183a      	adds	r2, r7, r0
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	7011      	strb	r1, [r2, #0]
 80022d8:	001a      	movs	r2, r3
 80022da:	2486      	movs	r4, #134	@ 0x86
 80022dc:	0064      	lsls	r4, r4, #1
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 80022e6:	2588      	movs	r5, #136	@ 0x88
 80022e8:	006d      	lsls	r5, r5, #1
 80022ea:	195b      	adds	r3, r3, r5
 80022ec:	19db      	adds	r3, r3, r7
 80022ee:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b299      	uxth	r1, r3
 80022f8:	183b      	adds	r3, r7, r0
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	0004      	movs	r4, r0
 80022fe:	183a      	adds	r2, r7, r0
 8002300:	1c58      	adds	r0, r3, #1
 8002302:	7010      	strb	r0, [r2, #0]
 8002304:	001a      	movs	r2, r3
 8002306:	b2c9      	uxtb	r1, r1
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 800230a:	195b      	adds	r3, r3, r5
 800230c:	19db      	adds	r3, r3, r7
 800230e:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8002310:	193b      	adds	r3, r7, r4
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4a0c      	ldr	r2, [pc, #48]	@ (8002348 <ModbusSlaveTransaction+0x238>)
 8002316:	1952      	adds	r2, r2, r5
 8002318:	19d2      	adds	r2, r2, r7
 800231a:	2100      	movs	r1, #0
 800231c:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 800231e:	193b      	adds	r3, r7, r4
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	230c      	movs	r3, #12
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff fe5d 	bl	8001fe8 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <ModbusSlaveTransaction+0x24c>)
 8002330:	2246      	movs	r2, #70	@ 0x46
 8002332:	801a      	strh	r2, [r3, #0]


}
 8002334:	46c0      	nop			@ (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b045      	add	sp, #276	@ 0x114
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233c:	fffffef7 	.word	0xfffffef7
 8002340:	50000800 	.word	0x50000800
 8002344:	200003b5 	.word	0x200003b5
 8002348:	fffffefc 	.word	0xfffffefc
 800234c:	20000404 	.word	0x20000404
 8002350:	200003b8 	.word	0x200003b8
 8002354:	200003c0 	.word	0x200003c0
 8002358:	20000b34 	.word	0x20000b34
 800235c:	200010d2 	.word	0x200010d2

08002360 <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b0c4      	sub	sp, #272	@ 0x110
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <ModbusSlaveExceptionTransaction+0x150>)
 800236a:	2588      	movs	r5, #136	@ 0x88
 800236c:	006d      	lsls	r5, r5, #1
 800236e:	195b      	adds	r3, r3, r5
 8002370:	19db      	adds	r3, r3, r7
 8002372:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8002374:	240c      	movs	r4, #12
 8002376:	34ff      	adds	r4, #255	@ 0xff
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 800237e:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 8002380:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <ModbusSlaveExceptionTransaction+0x154>)
 8002382:	2214      	movs	r2, #20
 8002384:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8002386:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <ModbusSlaveExceptionTransaction+0x158>)
 8002388:	2201      	movs	r2, #1
 800238a:	2104      	movs	r1, #4
 800238c:	0018      	movs	r0, r3
 800238e:	f00e fe8c 	bl	80110aa <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 8002392:	193b      	adds	r3, r7, r4
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	193a      	adds	r2, r7, r4
 8002398:	1c59      	adds	r1, r3, #1
 800239a:	7011      	strb	r1, [r2, #0]
 800239c:	001a      	movs	r2, r3
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <ModbusSlaveExceptionTransaction+0x15c>)
 80023a0:	7819      	ldrb	r1, [r3, #0]
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 80023a4:	195b      	adds	r3, r3, r5
 80023a6:	19db      	adds	r3, r3, r7
 80023a8:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80023aa:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <ModbusSlaveExceptionTransaction+0x164>)
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	1939      	adds	r1, r7, r4
 80023b4:	1c58      	adds	r0, r3, #1
 80023b6:	7008      	strb	r0, [r1, #0]
 80023b8:	0019      	movs	r1, r3
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	425b      	negs	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 80023c4:	195b      	adds	r3, r3, r5
 80023c6:	19db      	adds	r3, r3, r7
 80023c8:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	193a      	adds	r2, r7, r4
 80023d0:	1c59      	adds	r1, r3, #1
 80023d2:	7011      	strb	r1, [r2, #0]
 80023d4:	0019      	movs	r1, r3
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 80023d8:	195b      	adds	r3, r3, r5
 80023da:	19db      	adds	r3, r3, r7
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <ModbusSlaveExceptionTransaction+0x150>)
 80023de:	1952      	adds	r2, r2, r5
 80023e0:	19d2      	adds	r2, r2, r7
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 80023e6:	2386      	movs	r3, #134	@ 0x86
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	4252      	negs	r2, r2
 80023f0:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80023f2:	2310      	movs	r3, #16
 80023f4:	33ff      	adds	r3, #255	@ 0xff
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e019      	b.n	8002432 <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 80023fe:	2510      	movs	r5, #16
 8002400:	35ff      	adds	r5, #255	@ 0xff
 8002402:	197b      	adds	r3, r7, r5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4a2e      	ldr	r2, [pc, #184]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 8002408:	2188      	movs	r1, #136	@ 0x88
 800240a:	0049      	lsls	r1, r1, #1
 800240c:	1852      	adds	r2, r2, r1
 800240e:	19d2      	adds	r2, r2, r7
 8002410:	5cd2      	ldrb	r2, [r2, r3]
 8002412:	2386      	movs	r3, #134	@ 0x86
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	18fc      	adds	r4, r7, r3
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff fe02 	bl	8002028 <crc16_update>
 8002424:	0003      	movs	r3, r0
 8002426:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8002428:	197b      	adds	r3, r7, r5
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	197b      	adds	r3, r7, r5
 800242e:	3201      	adds	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	2310      	movs	r3, #16
 8002434:	33ff      	adds	r3, #255	@ 0xff
 8002436:	18fa      	adds	r2, r7, r3
 8002438:	200c      	movs	r0, #12
 800243a:	30ff      	adds	r0, #255	@ 0xff
 800243c:	183b      	adds	r3, r7, r0
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3db      	bcc.n	80023fe <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 8002446:	183b      	adds	r3, r7, r0
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	183a      	adds	r2, r7, r0
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	7011      	strb	r1, [r2, #0]
 8002450:	001a      	movs	r2, r3
 8002452:	2486      	movs	r4, #134	@ 0x86
 8002454:	0064      	lsls	r4, r4, #1
 8002456:	193b      	adds	r3, r7, r4
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b2d9      	uxtb	r1, r3
 800245c:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 800245e:	2588      	movs	r5, #136	@ 0x88
 8002460:	006d      	lsls	r5, r5, #1
 8002462:	195b      	adds	r3, r3, r5
 8002464:	19db      	adds	r3, r3, r7
 8002466:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8002468:	193b      	adds	r3, r7, r4
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b299      	uxth	r1, r3
 8002470:	183b      	adds	r3, r7, r0
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	0004      	movs	r4, r0
 8002476:	183a      	adds	r2, r7, r0
 8002478:	1c58      	adds	r0, r3, #1
 800247a:	7010      	strb	r0, [r2, #0]
 800247c:	001a      	movs	r2, r3
 800247e:	b2c9      	uxtb	r1, r1
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 8002482:	195b      	adds	r3, r3, r5
 8002484:	19db      	adds	r3, r3, r7
 8002486:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8002488:	193b      	adds	r3, r7, r4
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4a0c      	ldr	r2, [pc, #48]	@ (80024c0 <ModbusSlaveExceptionTransaction+0x160>)
 800248e:	1952      	adds	r2, r2, r5
 8002490:	19d2      	adds	r2, r2, r7
 8002492:	2100      	movs	r1, #0
 8002494:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8002496:	193b      	adds	r3, r7, r4
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	2308      	movs	r3, #8
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff fda1 	bl	8001fe8 <SerializeDMAArray_RS485>

}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b044      	add	sp, #272	@ 0x110
 80024ac:	bdb0      	pop	{r4, r5, r7, pc}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	fffffef7 	.word	0xfffffef7
 80024b4:	200010d4 	.word	0x200010d4
 80024b8:	50000800 	.word	0x50000800
 80024bc:	200003b5 	.word	0x200003b5
 80024c0:	fffffef8 	.word	0xfffffef8
 80024c4:	20000404 	.word	0x20000404

080024c8 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 80024c8:	b5b0      	push	{r4, r5, r7, lr}
 80024ca:	b0c2      	sub	sp, #264	@ 0x108
 80024cc:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 80024ce:	1cfb      	adds	r3, r7, #3
 80024d0:	33ff      	adds	r3, #255	@ 0xff
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	33ff      	adds	r3, #255	@ 0xff
 80024da:	22ff      	movs	r2, #255	@ 0xff
 80024dc:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 80024de:	1cfc      	adds	r4, r7, #3
 80024e0:	34ff      	adds	r4, #255	@ 0xff
 80024e2:	f7ff fd17 	bl	8001f14 <serialEvent_RS485>
 80024e6:	0003      	movs	r3, r0
 80024e8:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 80024ea:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 80024ec:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 80024ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002658 <ModbusSlavePool+0x190>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d100      	bne.n	80024f8 <ModbusSlavePool+0x30>
 80024f6:	e0a8      	b.n	800264a <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 80024f8:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <ModbusSlavePool+0x190>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	33ff      	adds	r3, #255	@ 0xff
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8002506:	4b55      	ldr	r3, [pc, #340]	@ (800265c <ModbusSlavePool+0x194>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <ModbusSlavePool+0x198>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d000      	beq.n	8002514 <ModbusSlavePool+0x4c>
 8002512:	e091      	b.n	8002638 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8002514:	4b51      	ldr	r3, [pc, #324]	@ (800265c <ModbusSlavePool+0x194>)
 8002516:	785a      	ldrb	r2, [r3, #1]
 8002518:	4b52      	ldr	r3, [pc, #328]	@ (8002664 <ModbusSlavePool+0x19c>)
 800251a:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 800251c:	4b4f      	ldr	r3, [pc, #316]	@ (800265c <ModbusSlavePool+0x194>)
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	001a      	movs	r2, r3
 8002522:	237f      	movs	r3, #127	@ 0x7f
 8002524:	4013      	ands	r3, r2
 8002526:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <ModbusSlavePool+0x19c>)
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	33ff      	adds	r3, #255	@ 0xff
 8002532:	22e1      	movs	r2, #225	@ 0xe1
 8002534:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8002536:	1d7b      	adds	r3, r7, #5
 8002538:	33ff      	adds	r3, #255	@ 0xff
 800253a:	2201      	movs	r2, #1
 800253c:	4252      	negs	r2, r2
 800253e:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8002540:	2308      	movs	r3, #8
 8002542:	33ff      	adds	r3, #255	@ 0xff
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e015      	b.n	8002578 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 800254c:	2508      	movs	r5, #8
 800254e:	35ff      	adds	r5, #255	@ 0xff
 8002550:	197b      	adds	r3, r7, r5
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4a41      	ldr	r2, [pc, #260]	@ (800265c <ModbusSlavePool+0x194>)
 8002556:	5cd2      	ldrb	r2, [r2, r3]
 8002558:	1d7c      	adds	r4, r7, #5
 800255a:	34ff      	adds	r4, #255	@ 0xff
 800255c:	1d7b      	adds	r3, r7, #5
 800255e:	33ff      	adds	r3, #255	@ 0xff
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff fd5f 	bl	8002028 <crc16_update>
 800256a:	0003      	movs	r3, r0
 800256c:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 800256e:	197b      	adds	r3, r7, r5
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	197b      	adds	r3, r7, r5
 8002574:	3201      	adds	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	2308      	movs	r3, #8
 800257a:	33ff      	adds	r3, #255	@ 0xff
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	1cfb      	adds	r3, r7, #3
 8002582:	33ff      	adds	r3, #255	@ 0xff
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	3b02      	subs	r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	dbdf      	blt.n	800254c <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	33ff      	adds	r3, #255	@ 0xff
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11d      	bne.n	80025d2 <ModbusSlavePool+0x10a>
 8002596:	1d7b      	adds	r3, r7, #5
 8002598:	33ff      	adds	r3, #255	@ 0xff
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	1cfb      	adds	r3, r7, #3
 80025a0:	33ff      	adds	r3, #255	@ 0xff
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3b02      	subs	r3, #2
 80025a6:	492d      	ldr	r1, [pc, #180]	@ (800265c <ModbusSlavePool+0x194>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d10d      	bne.n	80025ca <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 80025ae:	1d7b      	adds	r3, r7, #5
 80025b0:	33ff      	adds	r3, #255	@ 0xff
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	1cfb      	adds	r3, r7, #3
 80025bc:	33ff      	adds	r3, #255	@ 0xff
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	4926      	ldr	r1, [pc, #152]	@ (800265c <ModbusSlavePool+0x194>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d003      	beq.n	80025d2 <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	33ff      	adds	r3, #255	@ 0xff
 80025ce:	22e3      	movs	r2, #227	@ 0xe3
 80025d0:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <ModbusSlavePool+0x19c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d019      	beq.n	800260e <ModbusSlavePool+0x146>
 80025da:	dc36      	bgt.n	800264a <ModbusSlavePool+0x182>
 80025dc:	2b04      	cmp	r3, #4
 80025de:	dc34      	bgt.n	800264a <ModbusSlavePool+0x182>
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	db31      	blt.n	8002648 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <ModbusSlavePool+0x194>)
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <ModbusSlavePool+0x194>)
 80025ee:	78d2      	ldrb	r2, [r2, #3]
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <ModbusSlavePool+0x1a0>)
 80025f6:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <ModbusSlavePool+0x194>)
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4a16      	ldr	r2, [pc, #88]	@ (800265c <ModbusSlavePool+0x194>)
 8002602:	7952      	ldrb	r2, [r2, #5]
 8002604:	189b      	adds	r3, r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <ModbusSlavePool+0x1a4>)
 800260a:	801a      	strh	r2, [r3, #0]
				break;
 800260c:	e01d      	b.n	800264a <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <ModbusSlavePool+0x194>)
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <ModbusSlavePool+0x194>)
 8002618:	78d2      	ldrb	r2, [r2, #3]
 800261a:	189b      	adds	r3, r3, r2
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <ModbusSlavePool+0x1a8>)
 8002620:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <ModbusSlavePool+0x194>)
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	4a0c      	ldr	r2, [pc, #48]	@ (800265c <ModbusSlavePool+0x194>)
 800262c:	7952      	ldrb	r2, [r2, #5]
 800262e:	189b      	adds	r3, r3, r2
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <ModbusSlavePool+0x1ac>)
 8002634:	801a      	strh	r2, [r3, #0]
				break;
 8002636:	e008      	b.n	800264a <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	33ff      	adds	r3, #255	@ 0xff
 800263c:	22e0      	movs	r2, #224	@ 0xe0
 800263e:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8002640:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <ModbusSlavePool+0x1b0>)
 8002642:	2214      	movs	r2, #20
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e000      	b.n	800264a <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8002648:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	33ff      	adds	r3, #255	@ 0xff
 800264e:	781b      	ldrb	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b042      	add	sp, #264	@ 0x108
 8002656:	bdb0      	pop	{r4, r5, r7, pc}
 8002658:	200003b4 	.word	0x200003b4
 800265c:	20000b34 	.word	0x20000b34
 8002660:	200003b5 	.word	0x200003b5
 8002664:	20000404 	.word	0x20000404
 8002668:	200003b6 	.word	0x200003b6
 800266c:	200003b8 	.word	0x200003b8
 8002670:	200003ba 	.word	0x200003ba
 8002674:	200003bc 	.word	0x200003bc
 8002678:	200010d4 	.word	0x200010d4

0800267c <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <AtParsing_Ble+0x3c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <AtParsing_Ble+0x3c>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <AtParsing_Ble+0x40>)
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f016 f86b 	bl	801877c <strstr>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 80026ae:	697b      	ldr	r3, [r7, #20]
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b006      	add	sp, #24
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000406 	.word	0x20000406
 80026bc:	20000a64 	.word	0x20000a64

080026c0 <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
		asm ("nop");
 80026c8:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fd fd1b 	bl	8000108 <strlen>
 80026d2:	0002      	movs	r2, r0
 80026d4:	240e      	movs	r4, #14
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <SerializeString_Ble+0x40>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f016 f89e 	bl	8018824 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	4904      	ldr	r1, [pc, #16]	@ (8002700 <SerializeString_Ble+0x40>)
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <SerializeString_Ble+0x44>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f014 fa77 	bl	8016be4 <HAL_UART_Transmit_DMA>
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b005      	add	sp, #20
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000944 	.word	0x20000944
 8002704:	20000678 	.word	0x20000678

08002708 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	000a      	movs	r2, r1
 8002712:	1cfb      	adds	r3, r7, #3
 8002714:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8002716:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8002718:	210e      	movs	r1, #14
 800271a:	187b      	adds	r3, r7, r1
 800271c:	1cfa      	adds	r2, r7, #3
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8002722:	000c      	movs	r4, r1
 8002724:	187b      	adds	r3, r7, r1
 8002726:	881a      	ldrh	r2, [r3, #0]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <SerializeString2+0x40>)
 800272c:	0018      	movs	r0, r3
 800272e:	f016 f879 	bl	8018824 <memcpy>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8002732:	193b      	adds	r3, r7, r4
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	4904      	ldr	r1, [pc, #16]	@ (8002748 <SerializeString2+0x40>)
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <SerializeString2+0x44>)
 800273a:	0018      	movs	r0, r3
 800273c:	f014 fa52 	bl	8016be4 <HAL_UART_Transmit_DMA>
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b005      	add	sp, #20
 8002746:	bd90      	pop	{r4, r7, pc}
 8002748:	20000944 	.word	0x20000944
 800274c:	20000678 	.word	0x20000678

08002750 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2290      	movs	r2, #144	@ 0x90
 800275a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	4929      	ldr	r1, [pc, #164]	@ (8002808 <serialEvent_Ble+0xb8>)
 8002762:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <serialEvent_Ble+0xbc>)
 8002764:	0018      	movs	r0, r3
 8002766:	f014 facf 	bl	8016d08 <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 800276a:	4b29      	ldr	r3, [pc, #164]	@ (8002810 <serialEvent_Ble+0xc0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	1cbb      	adds	r3, r7, #2
 8002772:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8002774:	1cba      	adds	r2, r7, #2
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d23f      	bcs.n	8002800 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8002780:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <serialEvent_Ble+0xc4>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d03a      	beq.n	8002800 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 800278a:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 800278c:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <serialEvent_Ble+0xc0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	1cbb      	adds	r3, r7, #2
 8002794:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8002796:	003b      	movs	r3, r7
 8002798:	1d39      	adds	r1, r7, #4
 800279a:	1cba      	adds	r2, r7, #2
 800279c:	8809      	ldrh	r1, [r1, #0]
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	1a8a      	subs	r2, r1, r2
 80027a2:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <serialEvent_Ble+0xbc>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f014 fb1a 	bl	8016de0 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <serialEvent_Ble+0xc4>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2210      	movs	r2, #16
 80027b2:	4013      	ands	r3, r2
 80027b4:	d003      	beq.n	80027be <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <serialEvent_Ble+0xbc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2210      	movs	r2, #16
 80027bc:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e00c      	b.n	80027e0 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	490e      	ldr	r1, [pc, #56]	@ (8002808 <serialEvent_Ble+0xb8>)
 80027d0:	5c89      	ldrb	r1, [r1, r2]
 80027d2:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <serialEvent_Ble+0xc8>)
 80027d4:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	3201      	adds	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	1cbb      	adds	r3, r7, #2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	2190      	movs	r1, #144	@ 0x90
 80027ea:	1acb      	subs	r3, r1, r3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3ea      	bcc.n	80027c6 <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <serialEvent_Ble+0xc8>)
 80027f6:	2100      	movs	r1, #0
 80027f8:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <serialEvent_Ble+0xcc>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200009d4 	.word	0x200009d4
 800280c:	20000678 	.word	0x20000678
 8002810:	200007a0 	.word	0x200007a0
 8002814:	40004400 	.word	0x40004400
 8002818:	20000a64 	.word	0x20000a64
 800281c:	20000406 	.word	0x20000406

08002820 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 8002832:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <SendATreply_Ble+0x74>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4053      	eors	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <SendATreply_Ble+0x74>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 8002846:	f004 fcbb 	bl	80071c0 <millis>
 800284a:	0003      	movs	r3, r0
 800284c:	001a      	movs	r2, r3
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <SendATreply_Ble+0x78>)
 8002850:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff33 	bl	80026c0 <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 800285a:	f7ff ff79 	bl	8002750 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ff09 	bl	800267c <AtParsing_Ble>
 800286a:	0003      	movs	r3, r0
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 800286e:	f004 fca7 	bl	80071c0 <millis>
 8002872:	0003      	movs	r3, r0
 8002874:	001a      	movs	r2, r3
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <SendATreply_Ble+0x78>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800287e:	429a      	cmp	r2, r3
 8002880:	d802      	bhi.n	8002888 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <SendATreply_Ble+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b00a      	add	sp, #40	@ 0x28
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	20000405 	.word	0x20000405
 8002898:	20000408 	.word	0x20000408

0800289c <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	if (findLastValue((uint32_t *)Page_126,&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
 80028a0:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <SetUpBluetooth_Ble+0x3c>)
 80028a2:	4a0e      	ldr	r2, [pc, #56]	@ (80028dc <SetUpBluetooth_Ble+0x40>)
 80028a4:	0019      	movs	r1, r3
 80028a6:	0010      	movs	r0, r2
 80028a8:	f7fe f908 	bl	8000abc <findLastValue>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d102      	bne.n	80028b6 <SetUpBluetooth_Ble+0x1a>
		ConfigBLE_Ble ();
 80028b0:	f000 f81c 	bl	80028ec <ConfigBLE_Ble>
			BluetoothState = 2;
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
		}
	}
}
 80028b4:	e00c      	b.n	80028d0 <SetUpBluetooth_Ble+0x34>
		if (tick_1s == 1){
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <SetUpBluetooth_Ble+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <SetUpBluetooth_Ble+0x34>
			BluetoothState = 2;
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <SetUpBluetooth_Ble+0x48>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 80028c4:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <SetUpBluetooth_Ble+0x4c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	2140      	movs	r1, #64	@ 0x40
 80028ca:	0018      	movs	r0, r3
 80028cc:	f00e fbed 	bl	80110aa <HAL_GPIO_WritePin>
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	20000365 	.word	0x20000365
 80028dc:	0803f000 	.word	0x0803f000
 80028e0:	20000927 	.word	0x20000927
 80028e4:	20000050 	.word	0x20000050
 80028e8:	50000800 	.word	0x50000800

080028ec <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 80028f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a60 <ConfigBLE_Ble+0x174>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 80028fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a64 <ConfigBLE_Ble+0x178>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	2140      	movs	r1, #64	@ 0x40
 8002900:	0018      	movs	r0, r3
 8002902:	f00e fbd2 	bl	80110aa <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8002906:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d900      	bls.n	8002910 <ConfigBLE_Ble+0x24>
 800290e:	e093      	b.n	8002a38 <ConfigBLE_Ble+0x14c>
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <ConfigBLE_Ble+0x180>)
 8002914:	18d3      	adds	r3, r2, r3
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	469f      	mov	pc, r3
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 800291a:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	001a      	movs	r2, r3
 8002920:	4953      	ldr	r1, [pc, #332]	@ (8002a70 <ConfigBLE_Ble+0x184>)
 8002922:	4854      	ldr	r0, [pc, #336]	@ (8002a74 <ConfigBLE_Ble+0x188>)
 8002924:	23fa      	movs	r3, #250	@ 0xfa
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	f7ff ff78 	bl	8002820 <SendATreply_Ble>
 8002930:	0002      	movs	r2, r0
 8002932:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d000      	beq.n	800293c <ConfigBLE_Ble+0x50>
 800293a:	e085      	b.n	8002a48 <ConfigBLE_Ble+0x15c>
				WaitSerAnsw_Ble_func(5);
 800293c:	2005      	movs	r0, #5
 800293e:	f000 fb77 	bl	8003030 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8002942:	e081      	b.n	8002a48 <ConfigBLE_Ble+0x15c>
//--------------------------------------
		case 2:			//  Manuel,   Retardo tonto por el pin PWRC
			asm ("nop");
 8002944:	46c0      	nop			@ (mov r8, r8)

			if (SendATreply_Ble("","",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002946:	4b48      	ldr	r3, [pc, #288]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	001a      	movs	r2, r3
 800294c:	494a      	ldr	r1, [pc, #296]	@ (8002a78 <ConfigBLE_Ble+0x18c>)
 800294e:	484a      	ldr	r0, [pc, #296]	@ (8002a78 <ConfigBLE_Ble+0x18c>)
 8002950:	23fa      	movs	r3, #250	@ 0xfa
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2300      	movs	r3, #0
 8002958:	f7ff ff62 	bl	8002820 <SendATreply_Ble>
 800295c:	0002      	movs	r2, r0
 800295e:	4b42      	ldr	r3, [pc, #264]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d103      	bne.n	800296e <ConfigBLE_Ble+0x82>
				WaitSerAnsw_Ble_func(3);
 8002966:	2003      	movs	r0, #3
 8002968:	f000 fb62 	bl	8003030 <WaitSerAnsw_Ble_func>
//				ParamItem = 3;
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 3;
			}
			break;
 800296c:	e06e      	b.n	8002a4c <ConfigBLE_Ble+0x160>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 800296e:	4b43      	ldr	r3, [pc, #268]	@ (8002a7c <ConfigBLE_Ble+0x190>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2201      	movs	r2, #1
 8002974:	4053      	eors	r3, r2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d067      	beq.n	8002a4c <ConfigBLE_Ble+0x160>
				ParamItem = 3;
 800297c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 800297e:	2203      	movs	r2, #3
 8002980:	601a      	str	r2, [r3, #0]
			break;
 8002982:	e063      	b.n	8002a4c <ConfigBLE_Ble+0x160>
//--------------------------------------
		case 3:			//  Manuel,   Cambia el Baud
			asm ("nop");
 8002984:	46c0      	nop			@ (mov r8, r8)

			if (SendATreply_Ble("AT+BAUD\r\n","+BAUD=8",ParamItem,0,4000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	001a      	movs	r2, r3
 800298c:	493c      	ldr	r1, [pc, #240]	@ (8002a80 <ConfigBLE_Ble+0x194>)
 800298e:	483d      	ldr	r0, [pc, #244]	@ (8002a84 <ConfigBLE_Ble+0x198>)
 8002990:	23fa      	movs	r3, #250	@ 0xfa
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	f7ff ff42 	bl	8002820 <SendATreply_Ble>
 800299c:	0002      	movs	r2, r0
 800299e:	4b32      	ldr	r3, [pc, #200]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d103      	bne.n	80029ae <ConfigBLE_Ble+0xc2>
				WaitSerAnsw_Ble_func(5);
 80029a6:	2005      	movs	r0, #5
 80029a8:	f000 fb42 	bl	8003030 <WaitSerAnsw_Ble_func>
//				ParamItem = 5;
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 4;
			}
			break;
 80029ac:	e050      	b.n	8002a50 <ConfigBLE_Ble+0x164>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 80029ae:	4b33      	ldr	r3, [pc, #204]	@ (8002a7c <ConfigBLE_Ble+0x190>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d049      	beq.n	8002a50 <ConfigBLE_Ble+0x164>
				ParamItem = 4;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 80029be:	2204      	movs	r2, #4
 80029c0:	601a      	str	r2, [r3, #0]
			break;
 80029c2:	e045      	b.n	8002a50 <ConfigBLE_Ble+0x164>
	  case 4:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("AT+BAUD8\r\n","+BAUD=8",ParamItem,0,3000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	492d      	ldr	r1, [pc, #180]	@ (8002a80 <ConfigBLE_Ble+0x194>)
 80029cc:	482e      	ldr	r0, [pc, #184]	@ (8002a88 <ConfigBLE_Ble+0x19c>)
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <ConfigBLE_Ble+0x1a0>)
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2300      	movs	r3, #0
 80029d4:	f7ff ff24 	bl	8002820 <SendATreply_Ble>
 80029d8:	0002      	movs	r2, r0
 80029da:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10b      	bne.n	80029fa <ConfigBLE_Ble+0x10e>
				WaitSerAnsw_Ble_func(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 fb24 	bl	8003030 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 1;
				BaudRateTest = 8;
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <ConfigBLE_Ble+0x1a4>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
				ChangeBaud_Ble (115200);
 80029ee:	23e1      	movs	r3, #225	@ 0xe1
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f852 	bl	8002a9c <ChangeBaud_Ble>
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 1;
			}
			break;
 80029f8:	e02c      	b.n	8002a54 <ConfigBLE_Ble+0x168>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <ConfigBLE_Ble+0x190>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4053      	eors	r3, r2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d025      	beq.n	8002a54 <ConfigBLE_Ble+0x168>
				ParamItem = 1;
 8002a08:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
			break;
 8002a0e:	e021      	b.n	8002a54 <ConfigBLE_Ble+0x168>
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	001a      	movs	r2, r3
 8002a16:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <ConfigBLE_Ble+0x184>)
 8002a18:	481e      	ldr	r0, [pc, #120]	@ (8002a94 <ConfigBLE_Ble+0x1a8>)
 8002a1a:	23fa      	movs	r3, #250	@ 0xfa
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	f7ff fefd 	bl	8002820 <SendATreply_Ble>
 8002a26:	0002      	movs	r2, r0
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <ConfigBLE_Ble+0x17c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d113      	bne.n	8002a58 <ConfigBLE_Ble+0x16c>
				WaitSerAnsw_Ble_func(6);
 8002a30:	2006      	movs	r0, #6
 8002a32:	f000 fafd 	bl	8003030 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8002a36:	e00f      	b.n	8002a58 <ConfigBLE_Ble+0x16c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <ConfigBLE_Ble+0x1ac>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f000 faf6 	bl	8003030 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8002a44:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8002a46:	e008      	b.n	8002a5a <ConfigBLE_Ble+0x16e>
			break;
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	e006      	b.n	8002a5a <ConfigBLE_Ble+0x16e>
			break;
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	e004      	b.n	8002a5a <ConfigBLE_Ble+0x16e>
			break;
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	e002      	b.n	8002a5a <ConfigBLE_Ble+0x16e>
			break;
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	e000      	b.n	8002a5a <ConfigBLE_Ble+0x16e>
			break;
 8002a58:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000927 	.word	0x20000927
 8002a64:	50000800 	.word	0x50000800
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	080189c8 	.word	0x080189c8
 8002a70:	080188f8 	.word	0x080188f8
 8002a74:	08018904 	.word	0x08018904
 8002a78:	08018910 	.word	0x08018910
 8002a7c:	20000405 	.word	0x20000405
 8002a80:	08018914 	.word	0x08018914
 8002a84:	0801891c 	.word	0x0801891c
 8002a88:	08018928 	.word	0x08018928
 8002a8c:	00000bb8 	.word	0x00000bb8
 8002a90:	20000004 	.word	0x20000004
 8002a94:	08018934 	.word	0x08018934
 8002a98:	20000050 	.word	0x20000050

08002a9c <ChangeBaud_Ble>:
void ChangeBaud_Ble (uint32_t USART2_BAUDRATE){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /*
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <GetParamBluetooth_Ble>:
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8002ab8:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <GetParamBluetooth_Ble+0xa0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	2140      	movs	r1, #64	@ 0x40
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f00e faf3 	bl	80110aa <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8002ac4:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <GetParamBluetooth_Ble+0xa4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <GetParamBluetooth_Ble+0x26>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d033      	beq.n	8002b38 <GetParamBluetooth_Ble+0x8c>
		 break;
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
	 break;
	}
}
 8002ad0:	e037      	b.n	8002b42 <GetParamBluetooth_Ble+0x96>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <GetParamBluetooth_Ble+0xa4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	491e      	ldr	r1, [pc, #120]	@ (8002b54 <GetParamBluetooth_Ble+0xa8>)
 8002ada:	481f      	ldr	r0, [pc, #124]	@ (8002b58 <GetParamBluetooth_Ble+0xac>)
 8002adc:	23fa      	movs	r3, #250	@ 0xfa
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f7ff fe9c 	bl	8002820 <SendATreply_Ble>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <GetParamBluetooth_Ble+0xa4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d126      	bne.n	8002b40 <GetParamBluetooth_Ble+0x94>
			 foo = strchr(SerialAnswBLE,'=');
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <GetParamBluetooth_Ble+0xb0>)
 8002af4:	213d      	movs	r1, #61	@ 0x3d
 8002af6:	0018      	movs	r0, r3
 8002af8:	f015 fe32 	bl	8018760 <strchr>
 8002afc:	0003      	movs	r3, r0
 8002afe:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e00f      	b.n	8002b28 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	18d2      	adds	r2, r2, r3
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	3302      	adds	r3, #2
 8002b18:	7811      	ldrb	r1, [r2, #0]
 8002b1a:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <GetParamBluetooth_Ble+0xb4>)
 8002b1c:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	3201      	adds	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b0b      	cmp	r3, #11
 8002b2e:	d9eb      	bls.n	8002b08 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <GetParamBluetooth_Ble+0xa4>)
 8002b32:	2202      	movs	r2, #2
 8002b34:	601a      	str	r2, [r3, #0]
		 break;
 8002b36:	e003      	b.n	8002b40 <GetParamBluetooth_Ble+0x94>
		 BluetoothState = 3;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <GetParamBluetooth_Ble+0xb8>)
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	701a      	strb	r2, [r3, #0]
	 break;
 8002b3e:	e000      	b.n	8002b42 <GetParamBluetooth_Ble+0x96>
		 break;
 8002b40:	46c0      	nop			@ (mov r8, r8)
}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	50000800 	.word	0x50000800
 8002b50:	20000000 	.word	0x20000000
 8002b54:	08018950 	.word	0x08018950
 8002b58:	0801895c 	.word	0x0801895c
 8002b5c:	20000a64 	.word	0x20000a64
 8002b60:	20000e00 	.word	0x20000e00
 8002b64:	20000050 	.word	0x20000050

08002b68 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
    asm ("nop");
 8002b6e:	46c0      	nop			@ (mov r8, r8)

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8002b70:	4b55      	ldr	r3, [pc, #340]	@ (8002cc8 <TransmitReceive_Ble+0x160>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	0018      	movs	r0, r3
 8002b78:	f00e fa97 	bl	80110aa <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8002b7c:	f7ff fde8 	bl	8002750 <serialEvent_Ble>
	if (receivecomplete_Ble){
 8002b80:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <TransmitReceive_Ble+0x164>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <TransmitReceive_Ble+0x22>
 8002b88:	e1b9      	b.n	8002efe <TransmitReceive_Ble+0x396>
		 receivecomplete_Ble = 0;
 8002b8a:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <TransmitReceive_Ble+0x164>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8002b90:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd0 <TransmitReceive_Ble+0x168>)
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <TransmitReceive_Ble+0x36>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 8002b98:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <TransmitReceive_Ble+0x168>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8002b9e:	494d      	ldr	r1, [pc, #308]	@ (8002cd4 <TransmitReceive_Ble+0x16c>)
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f015 fdc5 	bl	8018734 <memcmp>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d102      	bne.n	8002bb4 <TransmitReceive_Ble+0x4c>
			 codeTX = 0x21;
 8002bae:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <TransmitReceive_Ble+0x174>)
 8002bb0:	2221      	movs	r2, #33	@ 0x21
 8002bb2:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8002bb4:	494a      	ldr	r1, [pc, #296]	@ (8002ce0 <TransmitReceive_Ble+0x178>)
 8002bb6:	4b48      	ldr	r3, [pc, #288]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002bb8:	2202      	movs	r2, #2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f015 fdba 	bl	8018734 <memcmp>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d102      	bne.n	8002bca <TransmitReceive_Ble+0x62>
			 codeTX = 0x5C;
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <TransmitReceive_Ble+0x174>)
 8002bc6:	225c      	movs	r2, #92	@ 0x5c
 8002bc8:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 8002bca:	4946      	ldr	r1, [pc, #280]	@ (8002ce4 <TransmitReceive_Ble+0x17c>)
 8002bcc:	4b42      	ldr	r3, [pc, #264]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f015 fdaf 	bl	8018734 <memcmp>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d102      	bne.n	8002be0 <TransmitReceive_Ble+0x78>
			 codeTX = 0x80;
 8002bda:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <TransmitReceive_Ble+0x174>)
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8002be0:	4941      	ldr	r1, [pc, #260]	@ (8002ce8 <TransmitReceive_Ble+0x180>)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f015 fda4 	bl	8018734 <memcmp>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d102      	bne.n	8002bf6 <TransmitReceive_Ble+0x8e>
			 codeTX = 0x3D;
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cdc <TransmitReceive_Ble+0x174>)
 8002bf2:	223d      	movs	r2, #61	@ 0x3d
 8002bf4:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 8002bf6:	493d      	ldr	r1, [pc, #244]	@ (8002cec <TransmitReceive_Ble+0x184>)
 8002bf8:	4b37      	ldr	r3, [pc, #220]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f015 fd99 	bl	8018734 <memcmp>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d106      	bne.n	8002c14 <TransmitReceive_Ble+0xac>
			 timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
 8002c06:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf0 <TransmitReceive_Ble+0x188>)
 8002c08:	22ff      	movs	r2, #255	@ 0xff
 8002c0a:	701a      	strb	r2, [r3, #0]

			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8002c0c:	f000 fa26 	bl	800305c <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 8002c10:	f000 fa32 	bl	8003078 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 8002c14:	4937      	ldr	r1, [pc, #220]	@ (8002cf4 <TransmitReceive_Ble+0x18c>)
 8002c16:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002c18:	2202      	movs	r2, #2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f015 fd8a 	bl	8018734 <memcmp>
 8002c20:	1e03      	subs	r3, r0, #0
 8002c22:	d112      	bne.n	8002c4a <TransmitReceive_Ble+0xe2>
		    asm ("nop");
 8002c24:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 8002c26:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <TransmitReceive_Ble+0x190>)
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	4b34      	ldr	r3, [pc, #208]	@ (8002cfc <TransmitReceive_Ble+0x194>)
 8002c2c:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 8002c2e:	4b33      	ldr	r3, [pc, #204]	@ (8002cfc <TransmitReceive_Ble+0x194>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <TransmitReceive_Ble+0x198>)
 8002c34:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 8002c36:	4b33      	ldr	r3, [pc, #204]	@ (8002d04 <TransmitReceive_Ble+0x19c>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <TransmitReceive_Ble+0x19c>)
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <TransmitReceive_Ble+0x198>)
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff fd5f 	bl	8002708 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 8002c4a:	492f      	ldr	r1, [pc, #188]	@ (8002d08 <TransmitReceive_Ble+0x1a0>)
 8002c4c:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002c4e:	2202      	movs	r2, #2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f015 fd6f 	bl	8018734 <memcmp>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d16c      	bne.n	8002d34 <TransmitReceive_Ble+0x1cc>
			uint8_t foo,foo2;
		    asm ("nop");
 8002c5a:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 8002c5c:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <TransmitReceive_Ble+0x194>)
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	210f      	movs	r1, #15
 8002c64:	400a      	ands	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 8002c68:	1dfb      	adds	r3, r7, #7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b0b      	cmp	r3, #11
 8002c6e:	d905      	bls.n	8002c7c <TransmitReceive_Ble+0x114>
			  foo = PasswordALG & (~0xF8);
 8002c70:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <TransmitReceive_Ble+0x194>)
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	2107      	movs	r1, #7
 8002c78:	400a      	ands	r2, r1
 8002c7a:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	3302      	adds	r3, #2
 8002c82:	4a22      	ldr	r2, [pc, #136]	@ (8002d0c <TransmitReceive_Ble+0x1a4>)
 8002c84:	5cd2      	ldrb	r2, [r2, r3]
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <TransmitReceive_Ble+0x194>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	3a01      	subs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 8002c94:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <TransmitReceive_Ble+0x170>)
 8002c96:	789b      	ldrb	r3, [r3, #2]
 8002c98:	1dba      	adds	r2, r7, #6
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d139      	bne.n	8002d14 <TransmitReceive_Ble+0x1ac>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <TransmitReceive_Ble+0x1a8>)
 8002ca2:	2272      	movs	r2, #114	@ 0x72
 8002ca4:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <TransmitReceive_Ble+0x198>)
 8002ca8:	22f1      	movs	r2, #241	@ 0xf1
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <TransmitReceive_Ble+0x198>)
 8002cae:	223d      	movs	r2, #61	@ 0x3d
 8002cb0:	705a      	strb	r2, [r3, #1]
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <TransmitReceive_Ble+0x19c>)
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <TransmitReceive_Ble+0x19c>)
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <TransmitReceive_Ble+0x198>)
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff fd21 	bl	8002708 <SerializeString2>
 8002cc6:	e035      	b.n	8002d34 <TransmitReceive_Ble+0x1cc>
 8002cc8:	50000800 	.word	0x50000800
 8002ccc:	20000406 	.word	0x20000406
 8002cd0:	20000efc 	.word	0x20000efc
 8002cd4:	08018968 	.word	0x08018968
 8002cd8:	20000a64 	.word	0x20000a64
 8002cdc:	20000e44 	.word	0x20000e44
 8002ce0:	0801896c 	.word	0x0801896c
 8002ce4:	08018970 	.word	0x08018970
 8002ce8:	08018974 	.word	0x08018974
 8002cec:	08018978 	.word	0x08018978
 8002cf0:	20000f07 	.word	0x20000f07
 8002cf4:	0801897c 	.word	0x0801897c
 8002cf8:	20000415 	.word	0x20000415
 8002cfc:	20000414 	.word	0x20000414
 8002d00:	20000e58 	.word	0x20000e58
 8002d04:	20000e52 	.word	0x20000e52
 8002d08:	08018980 	.word	0x08018980
 8002d0c:	20000e00 	.word	0x20000e00
 8002d10:	20000416 	.word	0x20000416
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 8002d14:	4b8d      	ldr	r3, [pc, #564]	@ (8002f4c <TransmitReceive_Ble+0x3e4>)
 8002d16:	22f1      	movs	r2, #241	@ 0xf1
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	4b8c      	ldr	r3, [pc, #560]	@ (8002f4c <TransmitReceive_Ble+0x3e4>)
 8002d1c:	223e      	movs	r2, #62	@ 0x3e
 8002d1e:	705a      	strb	r2, [r3, #1]
 8002d20:	4b8b      	ldr	r3, [pc, #556]	@ (8002f50 <TransmitReceive_Ble+0x3e8>)
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002d26:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <TransmitReceive_Ble+0x3e8>)
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b88      	ldr	r3, [pc, #544]	@ (8002f4c <TransmitReceive_Ble+0x3e4>)
 8002d2c:	0011      	movs	r1, r2
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fcea 	bl	8002708 <SerializeString2>
			}
		}

		if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
 8002d34:	4b87      	ldr	r3, [pc, #540]	@ (8002f54 <TransmitReceive_Ble+0x3ec>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b72      	cmp	r3, #114	@ 0x72
 8002d3a:	d004      	beq.n	8002d46 <TransmitReceive_Ble+0x1de>
 8002d3c:	4b86      	ldr	r3, [pc, #536]	@ (8002f58 <TransmitReceive_Ble+0x3f0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <TransmitReceive_Ble+0x1de>
 8002d44:	e0db      	b.n	8002efe <TransmitReceive_Ble+0x396>

		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 8002d46:	4985      	ldr	r1, [pc, #532]	@ (8002f5c <TransmitReceive_Ble+0x3f4>)
 8002d48:	4b85      	ldr	r3, [pc, #532]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f015 fcf1 	bl	8018734 <memcmp>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d102      	bne.n	8002d5c <TransmitReceive_Ble+0x1f4>
			 codeTX = 0x60;
 8002d56:	4b83      	ldr	r3, [pc, #524]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002d58:	2260      	movs	r2, #96	@ 0x60
 8002d5a:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 8002d5c:	4982      	ldr	r1, [pc, #520]	@ (8002f68 <TransmitReceive_Ble+0x400>)
 8002d5e:	4b80      	ldr	r3, [pc, #512]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002d60:	2202      	movs	r2, #2
 8002d62:	0018      	movs	r0, r3
 8002d64:	f015 fce6 	bl	8018734 <memcmp>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d102      	bne.n	8002d72 <TransmitReceive_Ble+0x20a>
			 codeTX = 0x61;
 8002d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002d6e:	2261      	movs	r2, #97	@ 0x61
 8002d70:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 8002d72:	497e      	ldr	r1, [pc, #504]	@ (8002f6c <TransmitReceive_Ble+0x404>)
 8002d74:	4b7a      	ldr	r3, [pc, #488]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002d76:	2202      	movs	r2, #2
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f015 fcdb 	bl	8018734 <memcmp>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d102      	bne.n	8002d88 <TransmitReceive_Ble+0x220>
			 codeTX = 0x53;
 8002d82:	4b78      	ldr	r3, [pc, #480]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002d84:	2253      	movs	r2, #83	@ 0x53
 8002d86:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8002d88:	4979      	ldr	r1, [pc, #484]	@ (8002f70 <TransmitReceive_Ble+0x408>)
 8002d8a:	4b75      	ldr	r3, [pc, #468]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f015 fcd0 	bl	8018734 <memcmp>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d102      	bne.n	8002d9e <TransmitReceive_Ble+0x236>
			 codeTX = 0x50;
 8002d98:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002d9a:	2250      	movs	r2, #80	@ 0x50
 8002d9c:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8002d9e:	4975      	ldr	r1, [pc, #468]	@ (8002f74 <TransmitReceive_Ble+0x40c>)
 8002da0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002da2:	2202      	movs	r2, #2
 8002da4:	0018      	movs	r0, r3
 8002da6:	f015 fcc5 	bl	8018734 <memcmp>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d102      	bne.n	8002db4 <TransmitReceive_Ble+0x24c>
			 codeTX = 0x51;
 8002dae:	4b6d      	ldr	r3, [pc, #436]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002db0:	2251      	movs	r2, #81	@ 0x51
 8002db2:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002db4:	4970      	ldr	r1, [pc, #448]	@ (8002f78 <TransmitReceive_Ble+0x410>)
 8002db6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002db8:	2202      	movs	r2, #2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f015 fcba 	bl	8018734 <memcmp>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d102      	bne.n	8002dca <TransmitReceive_Ble+0x262>
			 codeTX = 0x46;
 8002dc4:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002dc6:	2246      	movs	r2, #70	@ 0x46
 8002dc8:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002dca:	496c      	ldr	r1, [pc, #432]	@ (8002f7c <TransmitReceive_Ble+0x414>)
 8002dcc:	4b64      	ldr	r3, [pc, #400]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002dce:	2202      	movs	r2, #2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f015 fcaf 	bl	8018734 <memcmp>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d102      	bne.n	8002de0 <TransmitReceive_Ble+0x278>
			 codeTX = 0x49;
 8002dda:	4b62      	ldr	r3, [pc, #392]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002ddc:	2249      	movs	r2, #73	@ 0x49
 8002dde:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002de0:	4967      	ldr	r1, [pc, #412]	@ (8002f80 <TransmitReceive_Ble+0x418>)
 8002de2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f015 fca4 	bl	8018734 <memcmp>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d102      	bne.n	8002df6 <TransmitReceive_Ble+0x28e>
			 codeTX = 0x4A;
 8002df0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002df2:	224a      	movs	r2, #74	@ 0x4a
 8002df4:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 8002df6:	4963      	ldr	r1, [pc, #396]	@ (8002f84 <TransmitReceive_Ble+0x41c>)
 8002df8:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f015 fc99 	bl	8018734 <memcmp>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d102      	bne.n	8002e0c <TransmitReceive_Ble+0x2a4>
			 codeTX = 0x54;
 8002e06:	4b57      	ldr	r3, [pc, #348]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e08:	2254      	movs	r2, #84	@ 0x54
 8002e0a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002e0c:	495e      	ldr	r1, [pc, #376]	@ (8002f88 <TransmitReceive_Ble+0x420>)
 8002e0e:	4b54      	ldr	r3, [pc, #336]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f015 fc8e 	bl	8018734 <memcmp>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d102      	bne.n	8002e22 <TransmitReceive_Ble+0x2ba>
	   		 codeTX = 0x80;
 8002e1c:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8002e22:	495a      	ldr	r1, [pc, #360]	@ (8002f8c <TransmitReceive_Ble+0x424>)
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e26:	2202      	movs	r2, #2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f015 fc83 	bl	8018734 <memcmp>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d102      	bne.n	8002e38 <TransmitReceive_Ble+0x2d0>
	   		 codeTX = 0x3D;
 8002e32:	4b4c      	ldr	r3, [pc, #304]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e34:	223d      	movs	r2, #61	@ 0x3d
 8002e36:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 8002e38:	4955      	ldr	r1, [pc, #340]	@ (8002f90 <TransmitReceive_Ble+0x428>)
 8002e3a:	4b49      	ldr	r3, [pc, #292]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f015 fc78 	bl	8018734 <memcmp>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d102      	bne.n	8002e4e <TransmitReceive_Ble+0x2e6>
			 codeTX = 0x55;
 8002e48:	4b46      	ldr	r3, [pc, #280]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e4a:	2255      	movs	r2, #85	@ 0x55
 8002e4c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 8002e4e:	4951      	ldr	r1, [pc, #324]	@ (8002f94 <TransmitReceive_Ble+0x42c>)
 8002e50:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e52:	2202      	movs	r2, #2
 8002e54:	0018      	movs	r0, r3
 8002e56:	f015 fc6d 	bl	8018734 <memcmp>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d102      	bne.n	8002e64 <TransmitReceive_Ble+0x2fc>
	   		 codeTX = 0x56;
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e60:	2256      	movs	r2, #86	@ 0x56
 8002e62:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 8002e64:	494c      	ldr	r1, [pc, #304]	@ (8002f98 <TransmitReceive_Ble+0x430>)
 8002e66:	4b3e      	ldr	r3, [pc, #248]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f015 fc62 	bl	8018734 <memcmp>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d102      	bne.n	8002e7a <TransmitReceive_Ble+0x312>
	   		 codeTX = 0x57;
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e76:	2257      	movs	r2, #87	@ 0x57
 8002e78:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8002e7a:	4948      	ldr	r1, [pc, #288]	@ (8002f9c <TransmitReceive_Ble+0x434>)
 8002e7c:	4b38      	ldr	r3, [pc, #224]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e7e:	2202      	movs	r2, #2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f015 fc57 	bl	8018734 <memcmp>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d102      	bne.n	8002e90 <TransmitReceive_Ble+0x328>
	   		 codeTX = 0x58;
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002e8c:	2258      	movs	r2, #88	@ 0x58
 8002e8e:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8002e90:	4943      	ldr	r1, [pc, #268]	@ (8002fa0 <TransmitReceive_Ble+0x438>)
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002e94:	2202      	movs	r2, #2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f015 fc4c 	bl	8018734 <memcmp>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d102      	bne.n	8002ea6 <TransmitReceive_Ble+0x33e>
	   		 codeTX = 0x59;
 8002ea0:	4b30      	ldr	r3, [pc, #192]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002ea2:	2259      	movs	r2, #89	@ 0x59
 8002ea4:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 8002ea6:	493f      	ldr	r1, [pc, #252]	@ (8002fa4 <TransmitReceive_Ble+0x43c>)
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002eaa:	2202      	movs	r2, #2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f015 fc41 	bl	8018734 <memcmp>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d102      	bne.n	8002ebc <TransmitReceive_Ble+0x354>
	    	 codeTX = 0x5A;
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002eb8:	225a      	movs	r2, #90	@ 0x5a
 8002eba:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8002ebc:	493a      	ldr	r1, [pc, #232]	@ (8002fa8 <TransmitReceive_Ble+0x440>)
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f015 fc36 	bl	8018734 <memcmp>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d102      	bne.n	8002ed2 <TransmitReceive_Ble+0x36a>
	   		 codeTX = 0x5B;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002ece:	225b      	movs	r2, #91	@ 0x5b
 8002ed0:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 8002ed2:	4936      	ldr	r1, [pc, #216]	@ (8002fac <TransmitReceive_Ble+0x444>)
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f015 fc2b 	bl	8018734 <memcmp>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d102      	bne.n	8002ee8 <TransmitReceive_Ble+0x380>
		 	 codeTX = 0x5C;
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002ee4:	225c      	movs	r2, #92	@ 0x5c
 8002ee6:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8002ee8:	4931      	ldr	r1, [pc, #196]	@ (8002fb0 <TransmitReceive_Ble+0x448>)
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <TransmitReceive_Ble+0x3f8>)
 8002eec:	2202      	movs	r2, #2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f015 fc20 	bl	8018734 <memcmp>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d102      	bne.n	8002efe <TransmitReceive_Ble+0x396>
			  codeTX = 0x5F;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <TransmitReceive_Ble+0x3fc>)
 8002efa:	225f      	movs	r2, #95	@ 0x5f
 8002efc:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 8002efe:	f004 f95f 	bl	80071c0 <millis>
 8002f02:	0003      	movs	r3, r0
 8002f04:	001a      	movs	r2, r3
 8002f06:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <TransmitReceive_Ble+0x44c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b07      	cmp	r3, #7
 8002f0e:	d918      	bls.n	8002f42 <TransmitReceive_Ble+0x3da>
		TestMessMilis = millis();
 8002f10:	f004 f956 	bl	80071c0 <millis>
 8002f14:	0003      	movs	r3, r0
 8002f16:	001a      	movs	r2, r3
 8002f18:	4b26      	ldr	r3, [pc, #152]	@ (8002fb4 <TransmitReceive_Ble+0x44c>)
 8002f1a:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 8002f1c:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <TransmitReceive_Ble+0x450>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b55      	cmp	r3, #85	@ 0x55
 8002f22:	d102      	bne.n	8002f2a <TransmitReceive_Ble+0x3c2>
		    asm ("nop");
 8002f24:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 8002f26:	f008 f871 	bl	800b00c <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 8002f2a:	4b23      	ldr	r3, [pc, #140]	@ (8002fb8 <TransmitReceive_Ble+0x450>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b55      	cmp	r3, #85	@ 0x55
 8002f30:	d107      	bne.n	8002f42 <TransmitReceive_Ble+0x3da>
		    asm ("nop");
 8002f32:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <TransmitReceive_Ble+0x3e8>)
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <TransmitReceive_Ble+0x3e4>)
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff fbe3 	bl	8002708 <SerializeString2>
		}
	}

}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	20000e58 	.word	0x20000e58
 8002f50:	20000e52 	.word	0x20000e52
 8002f54:	20000416 	.word	0x20000416
 8002f58:	20000f07 	.word	0x20000f07
 8002f5c:	08018984 	.word	0x08018984
 8002f60:	20000a64 	.word	0x20000a64
 8002f64:	20000e44 	.word	0x20000e44
 8002f68:	08018988 	.word	0x08018988
 8002f6c:	0801898c 	.word	0x0801898c
 8002f70:	08018990 	.word	0x08018990
 8002f74:	08018994 	.word	0x08018994
 8002f78:	08018998 	.word	0x08018998
 8002f7c:	0801899c 	.word	0x0801899c
 8002f80:	080189a0 	.word	0x080189a0
 8002f84:	080189a4 	.word	0x080189a4
 8002f88:	08018970 	.word	0x08018970
 8002f8c:	08018974 	.word	0x08018974
 8002f90:	080189a8 	.word	0x080189a8
 8002f94:	080189ac 	.word	0x080189ac
 8002f98:	080189b0 	.word	0x080189b0
 8002f9c:	080189b4 	.word	0x080189b4
 8002fa0:	080189b8 	.word	0x080189b8
 8002fa4:	080189bc 	.word	0x080189bc
 8002fa8:	080189c0 	.word	0x080189c0
 8002fac:	0801896c 	.word	0x0801896c
 8002fb0:	080189c4 	.word	0x080189c4
 8002fb4:	20000410 	.word	0x20000410
 8002fb8:	20000e39 	.word	0x20000e39

08002fbc <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8002fc0:	4b16      	ldr	r3, [pc, #88]	@ (800301c <Read_Inpunts_ble+0x60>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d026      	beq.n	8003016 <Read_Inpunts_ble+0x5a>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <Read_Inpunts_ble+0x64>)
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f00e f84d 	bl	8011070 <HAL_GPIO_ReadPin>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d014      	beq.n	8003004 <Read_Inpunts_ble+0x48>
				{
					if (CntDebInp1 <= 50)
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b32      	cmp	r3, #50	@ 0x32
 8002fe0:	d805      	bhi.n	8002fee <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8002fec:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 8002fee:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b32      	cmp	r3, #50	@ 0x32
 8002ff4:	d10f      	bne.n	8003016 <Read_Inpunts_ble+0x5a>
						{
							device_conected = 1;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <Read_Inpunts_ble+0x6c>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8002ffe:	2233      	movs	r2, #51	@ 0x33
 8003000:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;				// contador debounce Boton 1
					device_conected = 0;
					DevLock = 0;    //RGM_29/NOV/2023     //RM_20240304 Para agregar PASSWORD de seguridad BLE
				}
		}
}
 8003002:	e008      	b.n	8003016 <Read_Inpunts_ble+0x5a>
					CntDebInp1 = 0;				// contador debounce Boton 1
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <Read_Inpunts_ble+0x68>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
					device_conected = 0;
 800300a:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <Read_Inpunts_ble+0x6c>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
					DevLock = 0;    //RGM_29/NOV/2023     //RM_20240304 Para agregar PASSWORD de seguridad BLE
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <Read_Inpunts_ble+0x70>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000924 	.word	0x20000924
 8003020:	50000400 	.word	0x50000400
 8003024:	2000040c 	.word	0x2000040c
 8003028:	20000928 	.word	0x20000928
 800302c:	20000416 	.word	0x20000416

08003030 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	0002      	movs	r2, r0
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <WaitSerAnsw_Ble_func+0x24>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <WaitSerAnsw_Ble_func+0x28>)
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	20000405 	.word	0x20000405
 8003058:	20000000 	.word	0x20000000

0800305c <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <grabacion_exitosa_handshake+0x18>)
 8003062:	22f1      	movs	r2, #241	@ 0xf1
 8003064:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 8003066:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <grabacion_exitosa_handshake+0x18>)
 8003068:	223d      	movs	r2, #61	@ 0x3d
 800306a:	705a      	strb	r2, [r3, #1]
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000e00 	.word	0x20000e00

08003078 <manda_transmision>:

void manda_transmision (void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <manda_transmision+0x34>)
 800307e:	4a0c      	ldr	r2, [pc, #48]	@ (80030b0 <manda_transmision+0x38>)
 8003080:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 8003082:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <manda_transmision+0x3c>)
 8003084:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <manda_transmision+0x38>)
 8003086:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <manda_transmision+0x40>)
 800308a:	4a0c      	ldr	r2, [pc, #48]	@ (80030bc <manda_transmision+0x44>)
 800308c:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <manda_transmision+0x48>)
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <manda_transmision+0x4c>)
 8003096:	2201      	movs	r2, #1
 8003098:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <manda_transmision+0x50>)
 800309c:	2255      	movs	r2, #85	@ 0x55
 800309e:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <manda_transmision+0x54>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]

}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000e34 	.word	0x20000e34
 80030b0:	20000e00 	.word	0x20000e00
 80030b4:	20000e2c 	.word	0x20000e2c
 80030b8:	20000e30 	.word	0x20000e30
 80030bc:	20000e01 	.word	0x20000e01
 80030c0:	20000e50 	.word	0x20000e50
 80030c4:	20000e3c 	.word	0x20000e3c
 80030c8:	20000e39 	.word	0x20000e39
 80030cc:	20000e44 	.word	0x20000e44

080030d0 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 80030d4:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <main10+0x108>)
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 80030dc:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <main10+0x10c>)
 80030de:	2201      	movs	r2, #1
 80030e0:	2108      	movs	r1, #8
 80030e2:	0018      	movs	r0, r3
 80030e4:	f00d ffe1 	bl	80110aa <HAL_GPIO_WritePin>
 80030e8:	e005      	b.n	80030f6 <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 80030ea:	4b3c      	ldr	r3, [pc, #240]	@ (80031dc <main10+0x10c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	2108      	movs	r1, #8
 80030f0:	0018      	movs	r0, r3
 80030f2:	f00d ffda 	bl	80110aa <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 80030f6:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <main10+0x108>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	0099      	lsls	r1, r3, #2
 8003102:	23a0      	movs	r3, #160	@ 0xa0
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	2201      	movs	r2, #1
 8003108:	0018      	movs	r0, r3
 800310a:	f00d ffce 	bl	80110aa <HAL_GPIO_WritePin>
 800310e:	e007      	b.n	8003120 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	23a0      	movs	r3, #160	@ 0xa0
 8003116:	05db      	lsls	r3, r3, #23
 8003118:	2200      	movs	r2, #0
 800311a:	0018      	movs	r0, r3
 800311c:	f00d ffc5 	bl	80110aa <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <main10+0x108>)
 8003122:	789b      	ldrb	r3, [r3, #2]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	482b      	ldr	r0, [pc, #172]	@ (80031dc <main10+0x10c>)
 800312e:	2201      	movs	r2, #1
 8003130:	0019      	movs	r1, r3
 8003132:	f00d ffba 	bl	80110aa <HAL_GPIO_WritePin>
 8003136:	e006      	b.n	8003146 <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4827      	ldr	r0, [pc, #156]	@ (80031dc <main10+0x10c>)
 800313e:	2200      	movs	r2, #0
 8003140:	0019      	movs	r1, r3
 8003142:	f00d ffb2 	bl	80110aa <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 8003146:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <main10+0x108>)
 8003148:	791b      	ldrb	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	0059      	lsls	r1, r3, #1
 8003152:	23a0      	movs	r3, #160	@ 0xa0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	2201      	movs	r2, #1
 8003158:	0018      	movs	r0, r3
 800315a:	f00d ffa6 	bl	80110aa <HAL_GPIO_WritePin>
 800315e:	e007      	b.n	8003170 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	0059      	lsls	r1, r3, #1
 8003164:	23a0      	movs	r3, #160	@ 0xa0
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	2200      	movs	r2, #0
 800316a:	0018      	movs	r0, r3
 800316c:	f00d ff9d 	bl	80110aa <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <main10+0x110>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <main10+0x110>)
 800317a:	701a      	strb	r2, [r3, #0]
		if(portX[rel_fn] && (cntproc & 0x01))
 800317c:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <main10+0x108>)
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <main10+0xd2>
 8003184:	4b16      	ldr	r3, [pc, #88]	@ (80031e0 <main10+0x110>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	001a      	movs	r2, r3
 800318a:	2301      	movs	r3, #1
 800318c:	4013      	ands	r3, r2
 800318e:	d008      	beq.n	80031a2 <main10+0xd2>
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	00d9      	lsls	r1, r3, #3
 8003194:	23a0      	movs	r3, #160	@ 0xa0
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	2201      	movs	r2, #1
 800319a:	0018      	movs	r0, r3
 800319c:	f00d ff85 	bl	80110aa <HAL_GPIO_WritePin>
 80031a0:	e007      	b.n	80031b2 <main10+0xe2>
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	00d9      	lsls	r1, r3, #3
 80031a6:	23a0      	movs	r3, #160	@ 0xa0
 80031a8:	05db      	lsls	r3, r3, #23
 80031aa:	2200      	movs	r2, #0
 80031ac:	0018      	movs	r0, r3
 80031ae:	f00d ff7c 	bl	80110aa <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <main10+0x114>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <main10+0x114>)
 80031bc:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <main10+0x114>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b27      	cmp	r3, #39	@ 0x27
 80031c4:	d904      	bls.n	80031d0 <main10+0x100>
        asm ("nop");
 80031c6:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 80031c8:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <main10+0x114>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	20000b78 	.word	0x20000b78
 80031dc:	50000800 	.word	0x50000800
 80031e0:	20000b6b 	.word	0x20000b6b
 80031e4:	20000bde 	.word	0x20000bde

080031e8 <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 80031ec:	4b46      	ldr	r3, [pc, #280]	@ (8003308 <retardoDeActuadores+0x120>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4053      	eors	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d114      	bne.n	8003224 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80031fa:	4b44      	ldr	r3, [pc, #272]	@ (800330c <retardoDeActuadores+0x124>)
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 8003202:	4b42      	ldr	r3, [pc, #264]	@ (800330c <retardoDeActuadores+0x124>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4053      	eors	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10e      	bne.n	800322e <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8003210:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <retardoDeActuadores+0x124>)
 8003212:	2201      	movs	r2, #1
 8003214:	705a      	strb	r2, [r3, #1]
 8003216:	e000      	b.n	800321a <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 8003218:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 800321a:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <retardoDeActuadores+0x128>)
 800321c:	0018      	movs	r0, r3
 800321e:	f001 fe6e 	bl	8004efe <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8003222:	e005      	b.n	8003230 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8003224:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[0] = 1;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 8003226:	4b39      	ldr	r3, [pc, #228]	@ (800330c <retardoDeActuadores+0x124>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e000      	b.n	8003230 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 800322e:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8003230:	4b35      	ldr	r3, [pc, #212]	@ (8003308 <retardoDeActuadores+0x120>)
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2201      	movs	r2, #1
 8003236:	4053      	eors	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d114      	bne.n	8003268 <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 800323e:	4b33      	ldr	r3, [pc, #204]	@ (800330c <retardoDeActuadores+0x124>)
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 8003246:	4b31      	ldr	r3, [pc, #196]	@ (800330c <retardoDeActuadores+0x124>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	4053      	eors	r3, r2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10e      	bne.n	8003272 <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <retardoDeActuadores+0x124>)
 8003256:	2201      	movs	r2, #1
 8003258:	709a      	strb	r2, [r3, #2]
 800325a:	e000      	b.n	800325e <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 800325c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <retardoDeActuadores+0x12c>)
 8003260:	0018      	movs	r0, r3
 8003262:	f001 fe4c 	bl	8004efe <decwreg>
			goto	revisa_ret_ventilador;		//
 8003266:	e005      	b.n	8003274 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 8003268:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 800326a:	4b28      	ldr	r3, [pc, #160]	@ (800330c <retardoDeActuadores+0x124>)
 800326c:	2200      	movs	r2, #0
 800326e:	709a      	strb	r2, [r3, #2]
 8003270:	e000      	b.n	8003274 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8003272:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <retardoDeActuadores+0x130>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	4053      	eors	r3, r2
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8003282:	4b22      	ldr	r3, [pc, #136]	@ (800330c <retardoDeActuadores+0x124>)
 8003284:	78db      	ldrb	r3, [r3, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <retardoDeActuadores+0x124>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4053      	eors	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10e      	bne.n	80032b6 <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <retardoDeActuadores+0x124>)
 800329a:	2201      	movs	r2, #1
 800329c:	70da      	strb	r2, [r3, #3]
 800329e:	e000      	b.n	80032a2 <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 80032a0:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <retardoDeActuadores+0x134>)
 80032a4:	0018      	movs	r0, r3
 80032a6:	f001 fe2a 	bl	8004efe <decwreg>
			goto	revisa_ret_lampara;		//
 80032aa:	e005      	b.n	80032b8 <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 80032ac:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <retardoDeActuadores+0x124>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	70da      	strb	r2, [r3, #3]
 80032b4:	e000      	b.n	80032b8 <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 80032b6:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 80032b8:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <retardoDeActuadores+0x120>)
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	2201      	movs	r2, #1
 80032be:	4053      	eors	r3, r2
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d114      	bne.n	80032f0 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 80032c6:	4b11      	ldr	r3, [pc, #68]	@ (800330c <retardoDeActuadores+0x124>)
 80032c8:	791b      	ldrb	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 80032ce:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <retardoDeActuadores+0x124>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4053      	eors	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <retardoDeActuadores+0x124>)
 80032de:	2201      	movs	r2, #1
 80032e0:	711a      	strb	r2, [r3, #4]
 80032e2:	e000      	b.n	80032e6 <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 80032e4:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 80032e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <retardoDeActuadores+0x138>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f001 fe08 	bl	8004efe <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 80032ee:	e005      	b.n	80032fc <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 80032f0:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <retardoDeActuadores+0x124>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	711a      	strb	r2, [r3, #4]
 80032f8:	e000      	b.n	80032fc <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80032fa:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <retardoDeActuadores+0x124>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000bc4 	.word	0x20000bc4
 800330c:	20000c7c 	.word	0x20000c7c
 8003310:	20000c76 	.word	0x20000c76
 8003314:	20000c77 	.word	0x20000c77
 8003318:	20000c00 	.word	0x20000c00
 800331c:	20000c78 	.word	0x20000c78
 8003320:	20000c79 	.word	0x20000c79

08003324 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
    asm ("nop");
 8003328:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 800332a:	4b4b      	ldr	r3, [pc, #300]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8003330:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <calculando_tiempo_UNIX+0x138>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	2203      	movs	r2, #3
 8003336:	4013      	ands	r3, r2
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <calculando_tiempo_UNIX+0x2e>
 800333e:	4b48      	ldr	r3, [pc, #288]	@ (8003460 <calculando_tiempo_UNIX+0x13c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d905      	bls.n	8003352 <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 8003346:	4b44      	ldr	r3, [pc, #272]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a46      	ldr	r2, [pc, #280]	@ (8003464 <calculando_tiempo_UNIX+0x140>)
 800334c:	189a      	adds	r2, r3, r2
 800334e:	4b42      	ldr	r3, [pc, #264]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003350:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8003352:	4b43      	ldr	r3, [pc, #268]	@ (8003460 <calculando_tiempo_UNIX+0x13c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d013      	beq.n	8003382 <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 800335a:	4b41      	ldr	r3, [pc, #260]	@ (8003460 <calculando_tiempo_UNIX+0x13c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <calculando_tiempo_UNIX+0x144>)
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	58d2      	ldr	r2, [r2, r3]
 8003366:	0013      	movs	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	189b      	adds	r3, r3, r2
 800336c:	011a      	lsls	r2, r3, #4
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	0113      	lsls	r3, r2, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	01db      	lsls	r3, r3, #7
 8003376:	001a      	movs	r2, r3
 8003378:	4b37      	ldr	r3, [pc, #220]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	18d2      	adds	r2, r2, r3
 800337e:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003380:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8003382:	4b36      	ldr	r3, [pc, #216]	@ (800345c <calculando_tiempo_UNIX+0x138>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	4a39      	ldr	r2, [pc, #228]	@ (800346c <calculando_tiempo_UNIX+0x148>)
 8003388:	189a      	adds	r2, r3, r2
 800338a:	0013      	movs	r3, r2
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	189b      	adds	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	189b      	adds	r3, r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	189b      	adds	r3, r3, r2
 8003398:	011a      	lsls	r2, r3, #4
 800339a:	1ad2      	subs	r2, r2, r3
 800339c:	01d3      	lsls	r3, r2, #7
 800339e:	001a      	movs	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	001a      	movs	r2, r3
 80033a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 80033ac:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 80033ae:	4b2b      	ldr	r3, [pc, #172]	@ (800345c <calculando_tiempo_UNIX+0x138>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003470 <calculando_tiempo_UNIX+0x14c>)
 80033b4:	4694      	mov	ip, r2
 80033b6:	4463      	add	r3, ip
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	da00      	bge.n	80033be <calculando_tiempo_UNIX+0x9a>
 80033bc:	3303      	adds	r3, #3
 80033be:	109b      	asrs	r3, r3, #2
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003474 <calculando_tiempo_UNIX+0x150>)
 80033c4:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 80033c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003474 <calculando_tiempo_UNIX+0x150>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	001a      	movs	r2, r3
 80033cc:	0013      	movs	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	011a      	lsls	r2, r3, #4
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	0113      	lsls	r3, r2, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	001a      	movs	r2, r3
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	18d2      	adds	r2, r2, r3
 80033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 80033e6:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 80033e8:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <calculando_tiempo_UNIX+0x154>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	1e5a      	subs	r2, r3, #1
 80033ee:	0013      	movs	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	1ad2      	subs	r2, r2, r3
 80033f8:	0113      	lsls	r3, r2, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	01db      	lsls	r3, r3, #7
 80033fe:	001a      	movs	r2, r3
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	18d2      	adds	r2, r2, r3
 8003406:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003408:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 800340a:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <calculando_tiempo_UNIX+0x158>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	001a      	movs	r2, r3
 8003410:	0013      	movs	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	0113      	lsls	r3, r2, #4
 800341c:	001a      	movs	r2, r3
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	18d2      	adds	r2, r2, r3
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003426:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 8003428:	4b15      	ldr	r3, [pc, #84]	@ (8003480 <calculando_tiempo_UNIX+0x15c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	001a      	movs	r2, r3
 800342e:	0013      	movs	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	001a      	movs	r2, r3
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	18d2      	adds	r2, r2, r3
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003440:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <calculando_tiempo_UNIX+0x160>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	001a      	movs	r2, r3
 8003448:	4b03      	ldr	r3, [pc, #12]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	18d2      	adds	r2, r2, r3
 800344e:	4b02      	ldr	r3, [pc, #8]	@ (8003458 <calculando_tiempo_UNIX+0x134>)
 8003450:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200010b8 	.word	0x200010b8
 800345c:	200010b0 	.word	0x200010b0
 8003460:	200010b2 	.word	0x200010b2
 8003464:	00015180 	.word	0x00015180
 8003468:	200001bc 	.word	0x200001bc
 800346c:	fffff84e 	.word	0xfffff84e
 8003470:	fffff84f 	.word	0xfffff84f
 8003474:	200010bc 	.word	0x200010bc
 8003478:	200010b3 	.word	0x200010b3
 800347c:	200010b4 	.word	0x200010b4
 8003480:	200010b5 	.word	0x200010b5
 8003484:	200010b6 	.word	0x200010b6

08003488 <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;


//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	000a      	movs	r2, r1
 8003492:	1cfb      	adds	r3, r7, #3
 8003494:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 8003496:	230e      	movs	r3, #14
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 800349e:	230d      	movs	r3, #13
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e011      	b.n	80034cc <prom8m1b+0x44>
		foo += array[i];
 80034a8:	200d      	movs	r0, #13
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	0019      	movs	r1, r3
 80034b6:	220e      	movs	r2, #14
 80034b8:	18bb      	adds	r3, r7, r2
 80034ba:	18ba      	adds	r2, r7, r2
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	188a      	adds	r2, r1, r2
 80034c0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	3201      	adds	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	230d      	movs	r3, #13
 80034ce:	18fa      	adds	r2, r7, r3
 80034d0:	1cfb      	adds	r3, r7, #3
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3e6      	bcc.n	80034a8 <prom8m1b+0x20>
	}
	foo /=  prom;
 80034da:	240e      	movs	r4, #14
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	881a      	ldrh	r2, [r3, #0]
 80034e0:	1cfb      	adds	r3, r7, #3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	0019      	movs	r1, r3
 80034e6:	0010      	movs	r0, r2
 80034e8:	f7fc fea0 	bl	800022c <__divsi3>
 80034ec:	0003      	movs	r3, r0
 80034ee:	001a      	movs	r2, r3
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	801a      	strh	r2, [r3, #0]
	return foo;
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	881b      	ldrh	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b005      	add	sp, #20
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 8003506:	4bdf      	ldr	r3, [pc, #892]	@ (8003884 <prog_param+0x384>)
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2201      	movs	r2, #1
 800350c:	4053      	eors	r3, r2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d139      	bne.n	8003588 <prog_param+0x88>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8003514:	4bdc      	ldr	r3, [pc, #880]	@ (8003888 <prog_param+0x388>)
 8003516:	2201      	movs	r2, #1
 8003518:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 800351a:	4bdc      	ldr	r3, [pc, #880]	@ (800388c <prog_param+0x38c>)
 800351c:	2214      	movs	r2, #20
 800351e:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8003520:	4bdb      	ldr	r3, [pc, #876]	@ (8003890 <prog_param+0x390>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8003526:	4bdb      	ldr	r3, [pc, #876]	@ (8003894 <prog_param+0x394>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 800352c:	230f      	movs	r3, #15
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e00a      	b.n	800354c <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8003536:	200f      	movs	r0, #15
 8003538:	183b      	adds	r3, r7, r0
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4ad6      	ldr	r2, [pc, #856]	@ (8003898 <prog_param+0x398>)
 800353e:	2100      	movs	r1, #0
 8003540:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8003542:	183b      	adds	r3, r7, r0
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	183b      	adds	r3, r7, r0
 8003548:	3201      	adds	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	230f      	movs	r3, #15
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d9ef      	bls.n	8003536 <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
 8003556:	4bd1      	ldr	r3, [pc, #836]	@ (800389c <prog_param+0x39c>)
 8003558:	60bb      	str	r3, [r7, #8]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 800355a:	4bd1      	ldr	r3, [pc, #836]	@ (80038a0 <prog_param+0x3a0>)
 800355c:	607b      	str	r3, [r7, #4]

		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t *)Page_126,(uint32_t)X);	//ld (Y), A
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4ad0      	ldr	r2, [pc, #832]	@ (80038a4 <prog_param+0x3a4>)
 8003562:	0019      	movs	r1, r3
 8003564:	0010      	movs	r0, r2
 8003566:	f7fd faa9 	bl	8000abc <findLastValue>
 800356a:	0003      	movs	r3, r0
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	701a      	strb	r2, [r3, #0]
		X++;//incw X
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
		Y++;//incw Y
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	607b      	str	r3, [r7, #4]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4bc9      	ldr	r3, [pc, #804]	@ (80038a8 <prog_param+0x3a8>)
 8003582:	429a      	cmp	r2, r3
 8003584:	d802      	bhi.n	800358c <prog_param+0x8c>
			goto copy_eeprom;//jrule copy_eeprom
 8003586:	e7ea      	b.n	800355e <prog_param+0x5e>
			goto no_set_prog;
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	e000      	b.n	800358e <prog_param+0x8e>
		}

no_set_prog:
 800358c:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 800358e:	4bbe      	ldr	r3, [pc, #760]	@ (8003888 <prog_param+0x388>)
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <prog_param+0x9a>
 8003596:	f000 fc35 	bl	8003e04 <prog_param+0x904>
			goto ask_btn_prsd;
 800359a:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 800359c:	1cfb      	adds	r3, r7, #3
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e00d      	b.n	80035c0 <prog_param+0xc0>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 80035a4:	1cfb      	adds	r3, r7, #3
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4ac0      	ldr	r2, [pc, #768]	@ (80038ac <prog_param+0x3ac>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4053      	eors	r3, r2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <prog_param+0xd0>
	for(uint8_t k=0; k<8; k++){
 80035b6:	1cfb      	adds	r3, r7, #3
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	1cfb      	adds	r3, r7, #3
 80035bc:	3201      	adds	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	1cfb      	adds	r3, r7, #3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b07      	cmp	r3, #7
 80035c6:	d9ed      	bls.n	80035a4 <prog_param+0xa4>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 80035c8:	4bb0      	ldr	r3, [pc, #704]	@ (800388c <prog_param+0x38c>)
 80035ca:	2214      	movs	r2, #20
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e000      	b.n	80035d2 <prog_param+0xd2>
			goto no_btn_pres; //jreq no_btn_pres
 80035d0:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 80035d2:	4bae      	ldr	r3, [pc, #696]	@ (800388c <prog_param+0x38c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <prog_param+0xde>
 80035da:	f000 fbfe 	bl	8003dda <prog_param+0x8da>
			goto no_exp_tmp;//jrne	no_exp_tmp
 80035de:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 80035e0:	4ba9      	ldr	r3, [pc, #676]	@ (8003888 <prog_param+0x388>)
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4053      	eors	r3, r2
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d114      	bne.n	8003618 <prog_param+0x118>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 80035ee:	4ba6      	ldr	r3, [pc, #664]	@ (8003888 <prog_param+0x388>)
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d100      	bne.n	80035f8 <prog_param+0xf8>
 80035f6:	e270      	b.n	8003ada <prog_param+0x5da>
			goto jmp_nv2Menu2;
 80035f8:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 80035fa:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 80035fc:	4bac      	ldr	r3, [pc, #688]	@ (80038b0 <prog_param+0x3b0>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2207      	movs	r2, #7
 8003602:	4013      	ands	r3, r2
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4bab      	ldr	r3, [pc, #684]	@ (80038b4 <prog_param+0x3b4>)
 8003608:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 800360a:	4baa      	ldr	r3, [pc, #680]	@ (80038b4 <prog_param+0x3b4>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d901      	bls.n	8003616 <prog_param+0x116>
 8003612:	f000 fbd0 	bl	8003db6 <prog_param+0x8b6>
 8003616:	e30d      	b.n	8003c34 <prog_param+0x734>
			goto noMenu2;
 8003618:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 800361a:	4b9b      	ldr	r3, [pc, #620]	@ (8003888 <prog_param+0x388>)
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	2201      	movs	r2, #1
 8003620:	4053      	eors	r3, r2
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d100      	bne.n	800362a <prog_param+0x12a>
 8003628:	e0cc      	b.n	80037c4 <prog_param+0x2c4>
			goto sel_param;
 800362a:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 800362c:	4b9f      	ldr	r3, [pc, #636]	@ (80038ac <prog_param+0x3ac>)
 800362e:	2200      	movs	r2, #0
 8003630:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8003632:	4b9e      	ldr	r3, [pc, #632]	@ (80038ac <prog_param+0x3ac>)
 8003634:	2200      	movs	r2, #0
 8003636:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8003638:	4b96      	ldr	r3, [pc, #600]	@ (8003894 <prog_param+0x394>)
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	4b9d      	ldr	r3, [pc, #628]	@ (80038b4 <prog_param+0x3b4>)
 800363e:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8003640:	4b9d      	ldr	r3, [pc, #628]	@ (80038b8 <prog_param+0x3b8>)
 8003642:	2209      	movs	r2, #9
 8003644:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8003646:	4b9d      	ldr	r3, [pc, #628]	@ (80038bc <prog_param+0x3bc>)
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 800364c:	f000 fbe6 	bl	8003e1c <md_dif_math>
		param = wreg;		//mov param,wreg
 8003650:	4b9b      	ldr	r3, [pc, #620]	@ (80038c0 <prog_param+0x3c0>)
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	4b8f      	ldr	r3, [pc, #572]	@ (8003894 <prog_param+0x394>)
 8003656:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8003658:	4b8e      	ldr	r3, [pc, #568]	@ (8003894 <prog_param+0x394>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	220f      	movs	r2, #15
 800365e:	4013      	ands	r3, r2
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4b94      	ldr	r3, [pc, #592]	@ (80038b4 <prog_param+0x3b4>)
 8003664:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8003666:	4b93      	ldr	r3, [pc, #588]	@ (80038b4 <prog_param+0x3b4>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b09      	cmp	r3, #9
 800366c:	d840      	bhi.n	80036f0 <prog_param+0x1f0>
 800366e:	009a      	lsls	r2, r3, #2
 8003670:	4b94      	ldr	r3, [pc, #592]	@ (80038c4 <prog_param+0x3c4>)
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8003678:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 800367a:	2125      	movs	r1, #37	@ 0x25
 800367c:	2005      	movs	r0, #5
 800367e:	f001 fd69 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 8003682:	e03a      	b.n	80036fa <prog_param+0x1fa>
			case 1: goto opc01m01;
 8003684:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8003686:	210f      	movs	r1, #15
 8003688:	200d      	movs	r0, #13
 800368a:	f001 fd63 	bl	8005154 <op_menu>
		goto ask_enter; // jra ask_enter
 800368e:	e034      	b.n	80036fa <prog_param+0x1fa>
			case 2: goto opc02m01;
 8003690:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8003692:	210a      	movs	r1, #10
 8003694:	2020      	movs	r0, #32
 8003696:	f001 fd5d 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 800369a:	e02e      	b.n	80036fa <prog_param+0x1fa>
			case 3: goto opc03m01;
 800369c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 800369e:	210b      	movs	r1, #11
 80036a0:	2020      	movs	r0, #32
 80036a2:	f001 fd57 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 80036a6:	e028      	b.n	80036fa <prog_param+0x1fa>
			case 4: goto opc04m01;
 80036a8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 80036aa:	210f      	movs	r1, #15
 80036ac:	2000      	movs	r0, #0
 80036ae:	f001 fd51 	bl	8005154 <op_menu>
		goto ask_enter;//jra	ask_enter
 80036b2:	e022      	b.n	80036fa <prog_param+0x1fa>
			case 5: goto opc05m01;
 80036b4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 80036b6:	2105      	movs	r1, #5
 80036b8:	2025      	movs	r0, #37	@ 0x25
 80036ba:	f001 fd4b 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 80036be:	e01c      	b.n	80036fa <prog_param+0x1fa>
			case 6: goto opc06m01;
 80036c0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 80036c2:	2127      	movs	r1, #39	@ 0x27
 80036c4:	200f      	movs	r0, #15
 80036c6:	f001 fd45 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 80036ca:	e016      	b.n	80036fa <prog_param+0x1fa>
			case 7: goto opc07m01;
 80036cc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 80036ce:	210a      	movs	r1, #10
 80036d0:	200f      	movs	r0, #15
 80036d2:	f001 fd3f 	bl	8005154 <op_menu>
		goto ask_enter;//jra	ask_enter
 80036d6:	e010      	b.n	80036fa <prog_param+0x1fa>
			case 8: goto opc08m01;
 80036d8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 80036da:	210e      	movs	r1, #14
 80036dc:	2005      	movs	r0, #5
 80036de:	f001 fd39 	bl	8005154 <op_menu>
		goto ask_enter;//jra ask_enter
 80036e2:	e00a      	b.n	80036fa <prog_param+0x1fa>
			case 9: goto opc09m01;
 80036e4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 80036e6:	210e      	movs	r1, #14
 80036e8:	201f      	movs	r0, #31
 80036ea:	f001 fd33 	bl	8005154 <op_menu>
		goto ask_enter;//jra	ask_enter
 80036ee:	e004      	b.n	80036fa <prog_param+0x1fa>
			default: goto opcNA;
 80036f0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 80036f2:	2126      	movs	r1, #38	@ 0x26
 80036f4:	2026      	movs	r0, #38	@ 0x26
 80036f6:	f001 fd2d 	bl	8005154 <op_menu>
		datled_clear();
 80036fa:	f001 fd45 	bl	8005188 <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 80036fe:	4b6b      	ldr	r3, [pc, #428]	@ (80038ac <prog_param+0x3ac>)
 8003700:	789b      	ldrb	r3, [r3, #2]
 8003702:	2201      	movs	r2, #1
 8003704:	4053      	eors	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d157      	bne.n	80037bc <prog_param+0x2bc>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 800370c:	4b5e      	ldr	r3, [pc, #376]	@ (8003888 <prog_param+0x388>)
 800370e:	2201      	movs	r2, #1
 8003710:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8003712:	4b60      	ldr	r3, [pc, #384]	@ (8003894 <prog_param+0x394>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b09      	cmp	r3, #9
 8003718:	d100      	bne.n	800371c <prog_param+0x21c>
 800371a:	e360      	b.n	8003dde <prog_param+0x8de>
			goto ask_set_prog;//jrne ask_set_prog
 800371c:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 800371e:	4b5d      	ldr	r3, [pc, #372]	@ (8003894 <prog_param+0x394>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b08      	cmp	r3, #8
 8003724:	d14c      	bne.n	80037c0 <prog_param+0x2c0>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8003726:	4b5c      	ldr	r3, [pc, #368]	@ (8003898 <prog_param+0x398>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	4053      	eors	r3, r2
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <prog_param+0x23c>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8003734:	4b64      	ldr	r3, [pc, #400]	@ (80038c8 <prog_param+0x3c8>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e000      	b.n	800373e <prog_param+0x23e>
			goto no_desh_forz;
 800373c:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 800373e:	4b56      	ldr	r3, [pc, #344]	@ (8003898 <prog_param+0x398>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2201      	movs	r2, #1
 8003744:	4053      	eors	r3, r2
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d12f      	bne.n	80037ac <prog_param+0x2ac>
		flags_menu[1] = 0; //bres flags_menu,#1
 800374c:	4b52      	ldr	r3, [pc, #328]	@ (8003898 <prog_param+0x398>)
 800374e:	2200      	movs	r2, #0
 8003750:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8003752:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <prog_param+0x3a0>)
 8003754:	2239      	movs	r2, #57	@ 0x39
 8003756:	5c9a      	ldrb	r2, [r3, r2]
 8003758:	4b51      	ldr	r3, [pc, #324]	@ (80038a0 <prog_param+0x3a0>)
 800375a:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 800375c:	4b50      	ldr	r3, [pc, #320]	@ (80038a0 <prog_param+0x3a0>)
 800375e:	223a      	movs	r2, #58	@ 0x3a
 8003760:	5c9a      	ldrb	r2, [r3, r2]
 8003762:	4b4f      	ldr	r3, [pc, #316]	@ (80038a0 <prog_param+0x3a0>)
 8003764:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <prog_param+0x3a0>)
 8003768:	223b      	movs	r2, #59	@ 0x3b
 800376a:	5c9a      	ldrb	r2, [r3, r2]
 800376c:	4b4c      	ldr	r3, [pc, #304]	@ (80038a0 <prog_param+0x3a0>)
 800376e:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8003770:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <prog_param+0x3a0>)
 8003772:	223c      	movs	r2, #60	@ 0x3c
 8003774:	5c9a      	ldrb	r2, [r3, r2]
 8003776:	4b4a      	ldr	r3, [pc, #296]	@ (80038a0 <prog_param+0x3a0>)
 8003778:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 800377a:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <prog_param+0x3a0>)
 800377c:	223d      	movs	r2, #61	@ 0x3d
 800377e:	5c99      	ldrb	r1, [r3, r2]
 8003780:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <prog_param+0x3a0>)
 8003782:	222d      	movs	r2, #45	@ 0x2d
 8003784:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8003786:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <prog_param+0x3a0>)
 8003788:	223e      	movs	r2, #62	@ 0x3e
 800378a:	5c99      	ldrb	r1, [r3, r2]
 800378c:	4b44      	ldr	r3, [pc, #272]	@ (80038a0 <prog_param+0x3a0>)
 800378e:	222e      	movs	r2, #46	@ 0x2e
 8003790:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8003792:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <prog_param+0x3a0>)
 8003794:	223f      	movs	r2, #63	@ 0x3f
 8003796:	5c99      	ldrb	r1, [r3, r2]
 8003798:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <prog_param+0x3a0>)
 800379a:	222f      	movs	r2, #47	@ 0x2f
 800379c:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 800379e:	4b40      	ldr	r3, [pc, #256]	@ (80038a0 <prog_param+0x3a0>)
 80037a0:	2240      	movs	r2, #64	@ 0x40
 80037a2:	5c99      	ldrb	r1, [r3, r2]
 80037a4:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <prog_param+0x3a0>)
 80037a6:	2230      	movs	r2, #48	@ 0x30
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	e000      	b.n	80037ae <prog_param+0x2ae>
			goto no_def_param;
 80037ac:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 80037ae:	4b47      	ldr	r3, [pc, #284]	@ (80038cc <prog_param+0x3cc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 80037b4:	4b46      	ldr	r3, [pc, #280]	@ (80038d0 <prog_param+0x3d0>)
 80037b6:	22aa      	movs	r2, #170	@ 0xaa
 80037b8:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 80037ba:	e313      	b.n	8003de4 <prog_param+0x8e4>
			goto fin_sel_param;
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	e322      	b.n	8003e06 <prog_param+0x906>
			goto fin_sel_param; //jrne fin_sel_param
 80037c0:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 80037c2:	e320      	b.n	8003e06 <prog_param+0x906>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 80037c4:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 80037c6:	4b33      	ldr	r3, [pc, #204]	@ (8003894 <prog_param+0x394>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	220f      	movs	r2, #15
 80037cc:	4013      	ands	r3, r2
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <prog_param+0x3b4>)
 80037d2:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 80037d4:	4b37      	ldr	r3, [pc, #220]	@ (80038b4 <prog_param+0x3b4>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d900      	bls.n	80037de <prog_param+0x2de>
 80037dc:	e13a      	b.n	8003a54 <prog_param+0x554>
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <prog_param+0x3d4>)
 80037e2:	18d3      	adds	r3, r2, r3
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 80037e8:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 80037ea:	4b3b      	ldr	r3, [pc, #236]	@ (80038d8 <prog_param+0x3d8>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fbef 	bl	8003fd0 <TwoByteInArrayToWord>
 80037f2:	0003      	movs	r3, r0
 80037f4:	001c      	movs	r4, r3
 80037f6:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <prog_param+0x3dc>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fbe9 	bl	8003fd0 <TwoByteInArrayToWord>
 80037fe:	0003      	movs	r3, r0
 8003800:	001d      	movs	r5, r3
 8003802:	4b37      	ldr	r3, [pc, #220]	@ (80038e0 <prog_param+0x3e0>)
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fbe3 	bl	8003fd0 <TwoByteInArrayToWord>
 800380a:	0003      	movs	r3, r0
 800380c:	001a      	movs	r2, r3
 800380e:	2302      	movs	r3, #2
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2301      	movs	r3, #1
 8003814:	0029      	movs	r1, r5
 8003816:	0020      	movs	r0, r4
 8003818:	f001 fcf0 	bl	80051fc <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 800381c:	e11f      	b.n	8003a5e <prog_param+0x55e>
			case 1: goto opc01m01nv2;
 800381e:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8003820:	4b30      	ldr	r3, [pc, #192]	@ (80038e4 <prog_param+0x3e4>)
 8003822:	0018      	movs	r0, r3
 8003824:	f000 fbd4 	bl	8003fd0 <TwoByteInArrayToWord>
 8003828:	0003      	movs	r3, r0
 800382a:	001a      	movs	r2, r3
 800382c:	2304      	movs	r3, #4
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2303      	movs	r3, #3
 8003832:	2100      	movs	r1, #0
 8003834:	2063      	movs	r0, #99	@ 0x63
 8003836:	f001 fce1 	bl	80051fc <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 800383a:	e110      	b.n	8003a5e <prog_param+0x55e>
			case 2: goto opc02m01nv2;
 800383c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 800383e:	4b26      	ldr	r3, [pc, #152]	@ (80038d8 <prog_param+0x3d8>)
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fbc5 	bl	8003fd0 <TwoByteInArrayToWord>
 8003846:	0003      	movs	r3, r0
 8003848:	3396      	adds	r3, #150	@ 0x96
 800384a:	001c      	movs	r4, r3
 800384c:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <prog_param+0x3e0>)
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fbbe 	bl	8003fd0 <TwoByteInArrayToWord>
 8003854:	0003      	movs	r3, r0
 8003856:	001d      	movs	r5, r3
 8003858:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <prog_param+0x3e4>)
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fbb8 	bl	8003fd0 <TwoByteInArrayToWord>
 8003860:	0003      	movs	r3, r0
 8003862:	18eb      	adds	r3, r5, r3
 8003864:	330a      	adds	r3, #10
 8003866:	001d      	movs	r5, r3
 8003868:	4b1f      	ldr	r3, [pc, #124]	@ (80038e8 <prog_param+0x3e8>)
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fbb0 	bl	8003fd0 <TwoByteInArrayToWord>
 8003870:	0003      	movs	r3, r0
 8003872:	001a      	movs	r2, r3
 8003874:	232e      	movs	r3, #46	@ 0x2e
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	232d      	movs	r3, #45	@ 0x2d
 800387a:	0029      	movs	r1, r5
 800387c:	0020      	movs	r0, r4
 800387e:	f001 fcbd 	bl	80051fc <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8003882:	e0ec      	b.n	8003a5e <prog_param+0x55e>
 8003884:	20000c38 	.word	0x20000c38
 8003888:	20000c08 	.word	0x20000c08
 800388c:	20000b92 	.word	0x20000b92
 8003890:	20000c20 	.word	0x20000c20
 8003894:	20000c1f 	.word	0x20000c1f
 8003898:	20000c68 	.word	0x20000c68
 800389c:	20000304 	.word	0x20000304
 80038a0:	2000013c 	.word	0x2000013c
 80038a4:	0803f000 	.word	0x0803f000
 80038a8:	200001bb 	.word	0x200001bb
 80038ac:	20000c10 	.word	0x20000c10
 80038b0:	20000c1e 	.word	0x20000c1e
 80038b4:	20000920 	.word	0x20000920
 80038b8:	20000c22 	.word	0x20000c22
 80038bc:	20000c24 	.word	0x20000c24
 80038c0:	20000b77 	.word	0x20000b77
 80038c4:	080189e0 	.word	0x080189e0
 80038c8:	20000c70 	.word	0x20000c70
 80038cc:	20000c84 	.word	0x20000c84
 80038d0:	20000c83 	.word	0x20000c83
 80038d4:	08018a08 	.word	0x08018a08
 80038d8:	2000014b 	.word	0x2000014b
 80038dc:	20000149 	.word	0x20000149
 80038e0:	2000013d 	.word	0x2000013d
 80038e4:	2000013f 	.word	0x2000013f
 80038e8:	20000169 	.word	0x20000169
			case 3: goto opc03m01nv2;
 80038ec:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 80038ee:	4bd9      	ldr	r3, [pc, #868]	@ (8003c54 <prog_param+0x754>)
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 fb6d 	bl	8003fd0 <TwoByteInArrayToWord>
 80038f6:	0003      	movs	r3, r0
 80038f8:	3b0a      	subs	r3, #10
 80038fa:	001c      	movs	r4, r3
 80038fc:	4bd6      	ldr	r3, [pc, #856]	@ (8003c58 <prog_param+0x758>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fb66 	bl	8003fd0 <TwoByteInArrayToWord>
 8003904:	0003      	movs	r3, r0
 8003906:	3b96      	subs	r3, #150	@ 0x96
 8003908:	001d      	movs	r5, r3
 800390a:	4bd4      	ldr	r3, [pc, #848]	@ (8003c5c <prog_param+0x75c>)
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fb5f 	bl	8003fd0 <TwoByteInArrayToWord>
 8003912:	0003      	movs	r3, r0
 8003914:	001a      	movs	r2, r3
 8003916:	2330      	movs	r3, #48	@ 0x30
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	232f      	movs	r3, #47	@ 0x2f
 800391c:	0029      	movs	r1, r5
 800391e:	0020      	movs	r0, r4
 8003920:	f001 fc6c 	bl	80051fc <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8003924:	e09b      	b.n	8003a5e <prog_param+0x55e>
			case 4: goto opc04m01nv2;
 8003926:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8003928:	4bcd      	ldr	r3, [pc, #820]	@ (8003c60 <prog_param+0x760>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <prog_param+0x43a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 8003930:	4bcb      	ldr	r3, [pc, #812]	@ (8003c60 <prog_param+0x760>)
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <prog_param+0x452>
				goto toggle_opc04m01nv2;
 8003938:	e000      	b.n	800393c <prog_param+0x43c>
				goto toggle_opc04m01nv2;
 800393a:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 800393c:	4bc9      	ldr	r3, [pc, #804]	@ (8003c64 <prog_param+0x764>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2201      	movs	r2, #1
 8003942:	4053      	eors	r3, r2
 8003944:	b2db      	uxtb	r3, r3
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	4193      	sbcs	r3, r2
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4bc5      	ldr	r3, [pc, #788]	@ (8003c64 <prog_param+0x764>)
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e000      	b.n	8003954 <prog_param+0x454>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 8003952:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8003954:	2101      	movs	r1, #1
 8003956:	2028      	movs	r0, #40	@ 0x28
 8003958:	f001 fbfc 	bl	8005154 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 800395c:	4bc1      	ldr	r3, [pc, #772]	@ (8003c64 <prog_param+0x764>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4053      	eors	r3, r2
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <prog_param+0x474>
			op_menu (0x00, 0x1D);
 800396a:	211d      	movs	r1, #29
 800396c:	2000      	movs	r0, #0
 800396e:	f001 fbf1 	bl	8005154 <op_menu>
 8003972:	e000      	b.n	8003976 <prog_param+0x476>
				goto dpy2_opc04m01nv2;
 8003974:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8003976:	f001 fc07 	bl	8005188 <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 800397a:	e070      	b.n	8003a5e <prog_param+0x55e>
			case 5: goto opc05m01nv2;
 800397c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 800397e:	2105      	movs	r1, #5
 8003980:	2025      	movs	r0, #37	@ 0x25
 8003982:	f001 fbe7 	bl	8005154 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8003986:	4bb8      	ldr	r3, [pc, #736]	@ (8003c68 <prog_param+0x768>)
 8003988:	2263      	movs	r2, #99	@ 0x63
 800398a:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 800398c:	4bb7      	ldr	r3, [pc, #732]	@ (8003c6c <prog_param+0x76c>)
 800398e:	2200      	movs	r2, #0
 8003990:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8003992:	4bb7      	ldr	r3, [pc, #732]	@ (8003c70 <prog_param+0x770>)
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	4bb7      	ldr	r3, [pc, #732]	@ (8003c74 <prog_param+0x774>)
 8003998:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 800399a:	f000 fa3f 	bl	8003e1c <md_dif_math>
			key = wreg;//	mov	key,wreg
 800399e:	4bb6      	ldr	r3, [pc, #728]	@ (8003c78 <prog_param+0x778>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4bb3      	ldr	r3, [pc, #716]	@ (8003c70 <prog_param+0x770>)
 80039a4:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 80039a6:	f000 fd47 	bl	8004438 <soloent1>
			datled_clear();
 80039aa:	f001 fbed 	bl	8005188 <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 80039ae:	e056      	b.n	8003a5e <prog_param+0x55e>
			case 6: goto opc06m01nv2;
 80039b0:	46c0      	nop			@ (mov r8, r8)
			op_menu  (findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]) , findLastValue((uint32_t *)Page_126,(uint32_t) &eePlantilla[eeversion2])/10);
 80039b2:	4bb2      	ldr	r3, [pc, #712]	@ (8003c7c <prog_param+0x77c>)
 80039b4:	4ab2      	ldr	r2, [pc, #712]	@ (8003c80 <prog_param+0x780>)
 80039b6:	0019      	movs	r1, r3
 80039b8:	0010      	movs	r0, r2
 80039ba:	f7fd f87f 	bl	8000abc <findLastValue>
 80039be:	0003      	movs	r3, r0
 80039c0:	b2dc      	uxtb	r4, r3
 80039c2:	4bb0      	ldr	r3, [pc, #704]	@ (8003c84 <prog_param+0x784>)
 80039c4:	4aae      	ldr	r2, [pc, #696]	@ (8003c80 <prog_param+0x780>)
 80039c6:	0019      	movs	r1, r3
 80039c8:	0010      	movs	r0, r2
 80039ca:	f7fd f877 	bl	8000abc <findLastValue>
 80039ce:	0003      	movs	r3, r0
 80039d0:	210a      	movs	r1, #10
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fc fba0 	bl	8000118 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	0019      	movs	r1, r3
 80039de:	0020      	movs	r0, r4
 80039e0:	f001 fbb8 	bl	8005154 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 80039e4:	e03b      	b.n	8003a5e <prog_param+0x55e>
			case 7: goto opc07m01nv2;
 80039e6:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 80039e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c60 <prog_param+0x760>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <prog_param+0x4fa>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 80039f0:	4b9b      	ldr	r3, [pc, #620]	@ (8003c60 <prog_param+0x760>)
 80039f2:	791b      	ldrb	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <prog_param+0x512>
			   goto toggle_opc07m01nv2;
 80039f8:	e000      	b.n	80039fc <prog_param+0x4fc>
			   goto toggle_opc07m01nv2;
 80039fa:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 80039fc:	4b99      	ldr	r3, [pc, #612]	@ (8003c64 <prog_param+0x764>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4053      	eors	r3, r2
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	4193      	sbcs	r3, r2
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b95      	ldr	r3, [pc, #596]	@ (8003c64 <prog_param+0x764>)
 8003a0e:	705a      	strb	r2, [r3, #1]
 8003a10:	e000      	b.n	8003a14 <prog_param+0x514>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8003a12:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8003a14:	2101      	movs	r1, #1
 8003a16:	2028      	movs	r0, #40	@ 0x28
 8003a18:	f001 fb9c 	bl	8005154 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8003a1c:	4b91      	ldr	r3, [pc, #580]	@ (8003c64 <prog_param+0x764>)
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2201      	movs	r2, #1
 8003a22:	4053      	eors	r3, r2
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <prog_param+0x534>
			op_menu (0x00, 0x1D);
 8003a2a:	211d      	movs	r1, #29
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f001 fb91 	bl	8005154 <op_menu>
 8003a32:	e000      	b.n	8003a36 <prog_param+0x536>
				goto dpy2_opc07m01nv2;
 8003a34:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8003a36:	f001 fba7 	bl	8005188 <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8003a3a:	e010      	b.n	8003a5e <prog_param+0x55e>
			case 8: goto opc08m01nv2;
 8003a3c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8003a3e:	210e      	movs	r1, #14
 8003a40:	2005      	movs	r0, #5
 8003a42:	f001 fb87 	bl	8005154 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8003a46:	e00a      	b.n	8003a5e <prog_param+0x55e>
			case 9: goto opc09m01nv2;
 8003a48:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8003a4a:	210e      	movs	r1, #14
 8003a4c:	201f      	movs	r0, #31
 8003a4e:	f001 fb81 	bl	8005154 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8003a52:	e004      	b.n	8003a5e <prog_param+0x55e>
			default: goto opcNAnv2;
 8003a54:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8003a56:	2126      	movs	r1, #38	@ 0x26
 8003a58:	2026      	movs	r0, #38	@ 0x26
 8003a5a:	f001 fb7b 	bl	8005154 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8003a5e:	4b80      	ldr	r3, [pc, #512]	@ (8003c60 <prog_param+0x760>)
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	2201      	movs	r2, #1
 8003a64:	4053      	eors	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d12e      	bne.n	8003aca <prog_param+0x5ca>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8003a6c:	4b86      	ldr	r3, [pc, #536]	@ (8003c88 <prog_param+0x788>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8003a72:	4b86      	ldr	r3, [pc, #536]	@ (8003c8c <prog_param+0x78c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d129      	bne.n	8003ace <prog_param+0x5ce>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8003a7a:	4b85      	ldr	r3, [pc, #532]	@ (8003c90 <prog_param+0x790>)
 8003a7c:	2273      	movs	r2, #115	@ 0x73
 8003a7e:	5c9a      	ldrb	r2, [r3, r2]
 8003a80:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <prog_param+0x770>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d124      	bne.n	8003ad2 <prog_param+0x5d2>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8003a88:	4976      	ldr	r1, [pc, #472]	@ (8003c64 <prog_param+0x764>)
 8003a8a:	487f      	ldr	r0, [pc, #508]	@ (8003c88 <prog_param+0x788>)
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f007 f844 	bl	800ab1c <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8003a94:	4b7f      	ldr	r3, [pc, #508]	@ (8003c94 <prog_param+0x794>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8003a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c88 <prog_param+0x788>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4053      	eors	r3, r2
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <prog_param+0x5b0>
			flags_menu[3] = 1;//bset flags_menu,#3
 8003aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8003c64 <prog_param+0x764>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	70da      	strb	r2, [r3, #3]
 8003aae:	e000      	b.n	8003ab2 <prog_param+0x5b2>
				goto noSetFlagLU;
 8003ab0:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8003ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8003c64 <prog_param+0x764>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8003ab8:	4b75      	ldr	r3, [pc, #468]	@ (8003c90 <prog_param+0x790>)
 8003aba:	2252      	movs	r2, #82	@ 0x52
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d109      	bne.n	8003ad6 <prog_param+0x5d6>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8003ac2:	4b68      	ldr	r3, [pc, #416]	@ (8003c64 <prog_param+0x764>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8003ac8:	e19d      	b.n	8003e06 <prog_param+0x906>
				goto no_enter_nv2;
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	e19b      	b.n	8003e06 <prog_param+0x906>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	e199      	b.n	8003e06 <prog_param+0x906>
				goto no_enter_nv2;//jrne no_enter_nv2
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	e197      	b.n	8003e06 <prog_param+0x906>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8003ad6:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8003ad8:	e195      	b.n	8003e06 <prog_param+0x906>
		goto menu2; //jp menu2
 8003ada:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8003adc:	4960      	ldr	r1, [pc, #384]	@ (8003c60 <prog_param+0x760>)
 8003ade:	4860      	ldr	r0, [pc, #384]	@ (8003c60 <prog_param+0x760>)
 8003ae0:	2305      	movs	r3, #5
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f007 f835 	bl	800ab52 <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <prog_param+0x794>)
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <prog_param+0x774>)
 8003aee:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8003af0:	4b5d      	ldr	r3, [pc, #372]	@ (8003c68 <prog_param+0x768>)
 8003af2:	2204      	movs	r2, #4
 8003af4:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8003af6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c6c <prog_param+0x76c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8003afc:	f000 f98e 	bl	8003e1c <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8003b00:	4b5d      	ldr	r3, [pc, #372]	@ (8003c78 <prog_param+0x778>)
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	4b63      	ldr	r3, [pc, #396]	@ (8003c94 <prog_param+0x794>)
 8003b06:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8003b08:	4b62      	ldr	r3, [pc, #392]	@ (8003c94 <prog_param+0x794>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b58      	ldr	r3, [pc, #352]	@ (8003c74 <prog_param+0x774>)
 8003b14:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8003b16:	4b57      	ldr	r3, [pc, #348]	@ (8003c74 <prog_param+0x774>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d822      	bhi.n	8003b64 <prog_param+0x664>
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	4b5d      	ldr	r3, [pc, #372]	@ (8003c98 <prog_param+0x798>)
 8003b22:	18d3      	adds	r3, r2, r3
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 8003b28:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f001 fb11 	bl	8005154 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8003b32:	e01c      	b.n	8003b6e <prog_param+0x66e>
			case 1: goto opc01m02;
 8003b34:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8003b36:	2127      	movs	r1, #39	@ 0x27
 8003b38:	2011      	movs	r0, #17
 8003b3a:	f001 fb0b 	bl	8005154 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8003b3e:	e016      	b.n	8003b6e <prog_param+0x66e>
			case 2: goto opc02m02;
 8003b40:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8003b42:	211d      	movs	r1, #29
 8003b44:	2027      	movs	r0, #39	@ 0x27
 8003b46:	f001 fb05 	bl	8005154 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 8003b4a:	e010      	b.n	8003b6e <prog_param+0x66e>
			case 3: goto opc03m02;
 8003b4c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8003b4e:	210e      	movs	r1, #14
 8003b50:	2005      	movs	r0, #5
 8003b52:	f001 faff 	bl	8005154 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8003b56:	e00a      	b.n	8003b6e <prog_param+0x66e>
			case 4: goto opc04m02;
 8003b58:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 8003b5a:	210e      	movs	r1, #14
 8003b5c:	201f      	movs	r0, #31
 8003b5e:	f001 faf9 	bl	8005154 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8003b62:	e004      	b.n	8003b6e <prog_param+0x66e>
			default: goto opcNA_m02;
 8003b64:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8003b66:	2126      	movs	r1, #38	@ 0x26
 8003b68:	2026      	movs	r0, #38	@ 0x26
 8003b6a:	f001 faf3 	bl	8005154 <op_menu>
		datled_clear();
 8003b6e:	f001 fb0b 	bl	8005188 <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8003b72:	4b3b      	ldr	r3, [pc, #236]	@ (8003c60 <prog_param+0x760>)
 8003b74:	789b      	ldrb	r3, [r3, #2]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4053      	eors	r3, r2
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d155      	bne.n	8003c2c <prog_param+0x72c>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <prog_param+0x788>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8003b86:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <prog_param+0x794>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d100      	bne.n	8003b90 <prog_param+0x690>
 8003b8e:	e128      	b.n	8003de2 <prog_param+0x8e2>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8003b90:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8003b92:	4b40      	ldr	r3, [pc, #256]	@ (8003c94 <prog_param+0x794>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d14a      	bne.n	8003c30 <prog_param+0x730>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <prog_param+0x788>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 8003ba0:	4b30      	ldr	r3, [pc, #192]	@ (8003c64 <prog_param+0x764>)
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4053      	eors	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <prog_param+0x6b6>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 8003bae:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <prog_param+0x788>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e000      	b.n	8003bb8 <prog_param+0x6b8>
			goto noOnLuz;
 8003bb6:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c64 <prog_param+0x764>)
 8003bba:	789b      	ldrb	r3, [r3, #2]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4053      	eors	r3, r2
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <prog_param+0x6ce>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 8003bc6:	4b35      	ldr	r3, [pc, #212]	@ (8003c9c <prog_param+0x79c>)
 8003bc8:	2278      	movs	r2, #120	@ 0x78
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e000      	b.n	8003bd0 <prog_param+0x6d0>
			goto noOffManto;
 8003bce:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 8003bd0:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <prog_param+0x7a0>)
 8003bd2:	2252      	movs	r2, #82	@ 0x52
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 8003bd8:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <prog_param+0x764>)
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4053      	eors	r3, r2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <prog_param+0x6f0>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 8003be6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca0 <prog_param+0x7a0>)
 8003be8:	2252      	movs	r2, #82	@ 0x52
 8003bea:	2120      	movs	r1, #32
 8003bec:	5499      	strb	r1, [r3, r2]
 8003bee:	e000      	b.n	8003bf2 <prog_param+0x6f2>
			goto noFahrenheitFlagDpy;
 8003bf0:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeescala])){
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca0 <prog_param+0x7a0>)
 8003bf4:	2252      	movs	r2, #82	@ 0x52
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	001c      	movs	r4, r3
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <prog_param+0x7a4>)
 8003bfc:	4a20      	ldr	r2, [pc, #128]	@ (8003c80 <prog_param+0x780>)
 8003bfe:	0019      	movs	r1, r3
 8003c00:	0010      	movs	r0, r2
 8003c02:	f7fc ff5b 	bl	8000abc <findLastValue>
 8003c06:	0003      	movs	r3, r0
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	d00d      	beq.n	8003c28 <prog_param+0x728>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 8003c0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <prog_param+0x7a0>)
 8003c0e:	2252      	movs	r2, #82	@ 0x52
 8003c10:	5c9a      	ldrb	r2, [r3, r2]
 8003c12:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <prog_param+0x7a8>)
 8003c14:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 8003c16:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <prog_param+0x7a8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ca4 <prog_param+0x7a4>)
 8003c1e:	0019      	movs	r1, r3
 8003c20:	0010      	movs	r0, r2
 8003c22:	f001 fa71 	bl	8005108 <wreeprom>
		 goto cancel_prog; //jp cancel_prog
 8003c26:	e0dd      	b.n	8003de4 <prog_param+0x8e4>
			goto noCambiaEscala;//	jreq noCambiaEscala
 8003c28:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 8003c2a:	e0db      	b.n	8003de4 <prog_param+0x8e4>
			goto fin_menu2;
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	e0ea      	b.n	8003e06 <prog_param+0x906>
			goto fin_menu2;//	jrne fin_menu2;
 8003c30:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8003c32:	e0e8      	b.n	8003e06 <prog_param+0x906>
			switch(STM8_A)
 8003c34:	009a      	lsls	r2, r3, #2
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <prog_param+0x7ac>)
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8003c3e:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8003c40:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <prog_param+0x760>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d133      	bne.n	8003cb0 <prog_param+0x7b0>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 8003c48:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <prog_param+0x760>)
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03b      	beq.n	8003cc8 <prog_param+0x7c8>
				goto toggle_opc00m02nv2;
 8003c50:	e02f      	b.n	8003cb2 <prog_param+0x7b2>
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	2000013d 	.word	0x2000013d
 8003c58:	20000149 	.word	0x20000149
 8003c5c:	2000016b 	.word	0x2000016b
 8003c60:	20000c10 	.word	0x20000c10
 8003c64:	20000c68 	.word	0x20000c68
 8003c68:	20000c22 	.word	0x20000c22
 8003c6c:	20000c24 	.word	0x20000c24
 8003c70:	20000c20 	.word	0x20000c20
 8003c74:	20000920 	.word	0x20000920
 8003c78:	20000b77 	.word	0x20000b77
 8003c7c:	2000037f 	.word	0x2000037f
 8003c80:	0803f000 	.word	0x0803f000
 8003c84:	20000380 	.word	0x20000380
 8003c88:	20000c08 	.word	0x20000c08
 8003c8c:	20000c1f 	.word	0x20000c1f
 8003c90:	200000bc 	.word	0x200000bc
 8003c94:	20000c1e 	.word	0x20000c1e
 8003c98:	08018a30 	.word	0x08018a30
 8003c9c:	20000c71 	.word	0x20000c71
 8003ca0:	2000013c 	.word	0x2000013c
 8003ca4:	20000356 	.word	0x20000356
 8003ca8:	20000b76 	.word	0x20000b76
 8003cac:	08018a44 	.word	0x08018a44
				goto toggle_opc00m02nv2;
 8003cb0:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 8003cb2:	4b57      	ldr	r3, [pc, #348]	@ (8003e10 <prog_param+0x910>)
 8003cb4:	789b      	ldrb	r3, [r3, #2]
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	2302      	movs	r3, #2
 8003cba:	4053      	eors	r3, r2
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	4193      	sbcs	r3, r2
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <prog_param+0x910>)
 8003cc4:	709a      	strb	r2, [r3, #2]
 8003cc6:	e000      	b.n	8003cca <prog_param+0x7ca>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 8003cc8:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2028      	movs	r0, #40	@ 0x28
 8003cce:	f001 fa41 	bl	8005154 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e10 <prog_param+0x910>)
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4053      	eors	r3, r2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <prog_param+0x7ea>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 8003ce0:	211d      	movs	r1, #29
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f001 fa36 	bl	8005154 <op_menu>
 8003ce8:	e000      	b.n	8003cec <prog_param+0x7ec>
				goto dpy2_opc00m02nv2;
 8003cea:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 8003cec:	f001 fa4c 	bl	8005188 <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 8003cf0:	e066      	b.n	8003dc0 <prog_param+0x8c0>
				case 1:  goto opc01m02nv2;
 8003cf2:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 8003cf4:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <prog_param+0x914>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <prog_param+0x806>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 8003cfc:	4b45      	ldr	r3, [pc, #276]	@ (8003e14 <prog_param+0x914>)
 8003cfe:	791b      	ldrb	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <prog_param+0x81e>
				goto toggle_opc01m02nv2;
 8003d04:	e000      	b.n	8003d08 <prog_param+0x808>
				goto toggle_opc01m02nv2;
 8003d06:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 8003d08:	4b41      	ldr	r3, [pc, #260]	@ (8003e10 <prog_param+0x910>)
 8003d0a:	78db      	ldrb	r3, [r3, #3]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4053      	eors	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	4193      	sbcs	r3, r2
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <prog_param+0x910>)
 8003d1a:	70da      	strb	r2, [r3, #3]
 8003d1c:	e000      	b.n	8003d20 <prog_param+0x820>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8003d1e:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8003d20:	210f      	movs	r1, #15
 8003d22:	2000      	movs	r0, #0
 8003d24:	f001 fa16 	bl	8005154 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8003d28:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <prog_param+0x910>)
 8003d2a:	78db      	ldrb	r3, [r3, #3]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4053      	eors	r3, r2
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <prog_param+0x840>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 8003d36:	211d      	movs	r1, #29
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f001 fa0b 	bl	8005154 <op_menu>
 8003d3e:	e000      	b.n	8003d42 <prog_param+0x842>
				goto dpy2_opc01m02nv2;
 8003d40:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 8003d42:	f001 fa21 	bl	8005188 <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 8003d46:	e03b      	b.n	8003dc0 <prog_param+0x8c0>
				case 2:  goto opc02m02nv2;
 8003d48:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8003d4a:	4b32      	ldr	r3, [pc, #200]	@ (8003e14 <prog_param+0x914>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <prog_param+0x85c>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 8003d52:	4b30      	ldr	r3, [pc, #192]	@ (8003e14 <prog_param+0x914>)
 8003d54:	791b      	ldrb	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00c      	beq.n	8003d74 <prog_param+0x874>
			   goto toggle_opc02m02nv2;
 8003d5a:	e000      	b.n	8003d5e <prog_param+0x85e>
			   goto toggle_opc02m02nv2;
 8003d5c:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <prog_param+0x910>)
 8003d60:	791b      	ldrb	r3, [r3, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4053      	eors	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	4193      	sbcs	r3, r2
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <prog_param+0x910>)
 8003d70:	711a      	strb	r2, [r3, #4]
 8003d72:	e000      	b.n	8003d76 <prog_param+0x876>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 8003d74:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 8003d76:	210c      	movs	r1, #12
 8003d78:	2029      	movs	r0, #41	@ 0x29
 8003d7a:	f001 f9eb 	bl	8005154 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <prog_param+0x910>)
 8003d80:	791b      	ldrb	r3, [r3, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4053      	eors	r3, r2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <prog_param+0x896>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8003d8c:	210f      	movs	r1, #15
 8003d8e:	2029      	movs	r0, #41	@ 0x29
 8003d90:	f001 f9e0 	bl	8005154 <op_menu>
 8003d94:	e000      	b.n	8003d98 <prog_param+0x898>
				  goto dpy2_opc02m02nv2;
 8003d96:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8003d98:	f001 f9f6 	bl	8005188 <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8003d9c:	e010      	b.n	8003dc0 <prog_param+0x8c0>
				case 3:  goto opc03m02nv2;
 8003d9e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8003da0:	210e      	movs	r1, #14
 8003da2:	2005      	movs	r0, #5
 8003da4:	f001 f9d6 	bl	8005154 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8003da8:	e00a      	b.n	8003dc0 <prog_param+0x8c0>
				case 4:  goto opc04m02nv2;
 8003daa:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8003dac:	210e      	movs	r1, #14
 8003dae:	201f      	movs	r0, #31
 8003db0:	f001 f9d0 	bl	8005154 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8003db4:	e004      	b.n	8003dc0 <prog_param+0x8c0>
				default: goto opcNAm02nv2;
 8003db6:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 8003db8:	2126      	movs	r1, #38	@ 0x26
 8003dba:	2026      	movs	r0, #38	@ 0x26
 8003dbc:	f001 f9ca 	bl	8005154 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 8003dc0:	4b14      	ldr	r3, [pc, #80]	@ (8003e14 <prog_param+0x914>)
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4053      	eors	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <prog_param+0x8d6>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <prog_param+0x918>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 8003dd4:	e017      	b.n	8003e06 <prog_param+0x906>
			goto no_enter_m02nv2;
 8003dd6:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 8003dd8:	e015      	b.n	8003e06 <prog_param+0x906>
		goto cancel_prog;
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	e002      	b.n	8003de4 <prog_param+0x8e4>
		goto cancel_prog;//jp cancel_prog;
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	e000      	b.n	8003de4 <prog_param+0x8e4>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 8003de2:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 8003de4:	490c      	ldr	r1, [pc, #48]	@ (8003e18 <prog_param+0x918>)
 8003de6:	480c      	ldr	r0, [pc, #48]	@ (8003e18 <prog_param+0x918>)
 8003de8:	2303      	movs	r3, #3
 8003dea:	2201      	movs	r2, #1
 8003dec:	f006 feb1 	bl	800ab52 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 8003df0:	4909      	ldr	r1, [pc, #36]	@ (8003e18 <prog_param+0x918>)
 8003df2:	4809      	ldr	r0, [pc, #36]	@ (8003e18 <prog_param+0x918>)
 8003df4:	2302      	movs	r3, #2
 8003df6:	2205      	movs	r2, #5
 8003df8:	f006 feab 	bl	800ab52 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <prog_param+0x918>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 8003e02:	e000      	b.n	8003e06 <prog_param+0x906>
		goto fin_prog_param; //jp fin_prog_param
 8003e04:	46c0      	nop			@ (mov r8, r8)
}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	20000c68 	.word	0x20000c68
 8003e14:	20000c10 	.word	0x20000c10
 8003e18:	20000c08 	.word	0x20000c08

08003e1c <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <md_dif_math+0x20>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <md_dif_math+0x24>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <md_dif_math+0x28>)
 8003e2e:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8003e30:	f000 f80a 	bl	8003e48 <md_signfrac_math>
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	20000c08 	.word	0x20000c08
 8003e40:	20000920 	.word	0x20000920
 8003e44:	20000922 	.word	0x20000922

08003e48 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f7c <md_signfrac_math+0x134>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d121      	bne.n	8003e98 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <md_signfrac_math+0x134>)
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d14f      	bne.n	8003efc <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8003e5c:	4b48      	ldr	r3, [pc, #288]	@ (8003f80 <md_signfrac_math+0x138>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d117      	bne.n	8003e94 <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 8003e64:	4b46      	ldr	r3, [pc, #280]	@ (8003f80 <md_signfrac_math+0x138>)
 8003e66:	2219      	movs	r2, #25
 8003e68:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8003e6a:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <md_signfrac_math+0x13c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 8003e72:	4b43      	ldr	r3, [pc, #268]	@ (8003f80 <md_signfrac_math+0x138>)
 8003e74:	220a      	movs	r2, #10
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e000      	b.n	8003e7c <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8003e7a:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f7c <md_signfrac_math+0x134>)
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 8003e84:	4b3d      	ldr	r3, [pc, #244]	@ (8003f7c <md_signfrac_math+0x134>)
 8003e86:	795b      	ldrb	r3, [r3, #5]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d139      	bne.n	8003f00 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <md_signfrac_math+0x13c>)
 8003e8e:	2205      	movs	r2, #5
 8003e90:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 8003e92:	e067      	b.n	8003f64 <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 8003e94:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 8003e96:	e065      	b.n	8003f64 <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	e000      	b.n	8003e9e <md_signfrac_math+0x56>
				goto inc_sf;
 8003e9c:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b21a      	sxth	r2, r3
 8003ea4:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <md_signfrac_math+0x144>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	db04      	blt.n	8003eb8 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8003eae:	4b38      	ldr	r3, [pc, #224]	@ (8003f90 <md_signfrac_math+0x148>)
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	4b35      	ldr	r3, [pc, #212]	@ (8003f88 <md_signfrac_math+0x140>)
 8003eb4:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 8003eb6:	e052      	b.n	8003f5e <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 8003eb8:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 8003eba:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <md_signfrac_math+0x14c>)
 8003ebc:	799b      	ldrb	r3, [r3, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	2b63      	cmp	r3, #99	@ 0x63
 8003eca:	dc0d      	bgt.n	8003ee8 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b21b      	sxth	r3, r3
 8003ed2:	3364      	adds	r3, #100	@ 0x64
 8003ed4:	db0a      	blt.n	8003eec <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 8003ed6:	e000      	b.n	8003eda <md_signfrac_math+0x92>
				goto inc_simple_ent;
 8003ed8:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 8003eda:	4b2b      	ldr	r3, [pc, #172]	@ (8003f88 <md_signfrac_math+0x140>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b29      	ldr	r3, [pc, #164]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ee4:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8003ee6:	e03a      	b.n	8003f5e <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	e000      	b.n	8003eee <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 8003eec:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 8003eee:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	330a      	adds	r3, #10
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <md_signfrac_math+0x140>)
 8003ef8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8003efa:	e030      	b.n	8003f5e <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	e000      	b.n	8003f02 <md_signfrac_math+0xba>
				goto dec_sf;
 8003f00:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 8003f02:	4b21      	ldr	r3, [pc, #132]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b21a      	sxth	r2, r3
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <md_signfrac_math+0x148>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	dc04      	bgt.n	8003f1c <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <md_signfrac_math+0x144>)
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	4b1c      	ldr	r3, [pc, #112]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f18:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8003f1a:	e020      	b.n	8003f5e <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8003f1c:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <md_signfrac_math+0x14c>)
 8003f20:	799b      	ldrb	r3, [r3, #6]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	2b64      	cmp	r3, #100	@ 0x64
 8003f2e:	dc0d      	bgt.n	8003f4c <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8003f30:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	3363      	adds	r3, #99	@ 0x63
 8003f38:	db0a      	blt.n	8003f50 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8003f3a:	e000      	b.n	8003f3e <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8003f3c:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f48:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8003f4a:	e008      	b.n	8003f5e <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	e000      	b.n	8003f52 <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8003f50:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	3b0a      	subs	r3, #10
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f5c:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <md_signfrac_math+0x150>)
 8003f60:	221e      	movs	r2, #30
 8003f62:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <md_signfrac_math+0x14c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8003f6a:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <md_signfrac_math+0x140>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <md_signfrac_math+0x154>)
 8003f72:	701a      	strb	r2, [r3, #0]
			//ret
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	20000c10 	.word	0x20000c10
 8003f80:	20000c42 	.word	0x20000c42
 8003f84:	20000b93 	.word	0x20000b93
 8003f88:	20000922 	.word	0x20000922
 8003f8c:	20000c22 	.word	0x20000c22
 8003f90:	20000c24 	.word	0x20000c24
 8003f94:	20000c08 	.word	0x20000c08
 8003f98:	20000b92 	.word	0x20000b92
 8003f9c:	20000b77 	.word	0x20000b77

08003fa0 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 8003fa6:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <tdev_to_Word+0x28>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <tdev_to_Word+0x2c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	1dbb      	adds	r3, r7, #6
 8003fb6:	1852      	adds	r2, r2, r1
 8003fb8:	801a      	strh	r2, [r3, #0]
	return	foo;
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	881b      	ldrh	r3, [r3, #0]
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	20000bd0 	.word	0x20000bd0
 8003fcc:	20000bd1 	.word	0x20000bd1

08003fd0 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	200e      	movs	r0, #14
 8003fea:	183b      	adds	r3, r7, r0
 8003fec:	1852      	adds	r2, r2, r1
 8003fee:	801a      	strh	r2, [r3, #0]
	return	 foo;
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	881b      	ldrh	r3, [r3, #0]
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
    asm ("nop");
 8004000:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 8004002:	46c0      	nop			@ (mov r8, r8)

}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <Load_ret2+0x1c>)
 8004012:	2249      	movs	r2, #73	@ 0x49
 8004014:	5c9b      	ldrb	r3, [r3, r2]
 8004016:	001a      	movs	r2, r3
 8004018:	233c      	movs	r3, #60	@ 0x3c
 800401a:	4353      	muls	r3, r2
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b03      	ldr	r3, [pc, #12]	@ (800402c <Load_ret2+0x20>)
 8004020:	801a      	strh	r2, [r3, #0]
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200000bc 	.word	0x200000bc
 800402c:	20000b86 	.word	0x20000b86

08004030 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <ldadaptivo+0x34>)
 8004036:	2246      	movs	r2, #70	@ 0x46
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <ldadaptivo+0x38>)
 8004040:	701a      	strb	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <ldadaptivo+0x34>)
 8004044:	2256      	movs	r2, #86	@ 0x56
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	001a      	movs	r2, r3
 800404a:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <ldadaptivo+0x38>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	08db      	lsrs	r3, r3, #3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4353      	muls	r3, r2
 8004054:	b29a      	uxth	r2, r3
 8004056:	4b05      	ldr	r3, [pc, #20]	@ (800406c <ldadaptivo+0x3c>)
 8004058:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 800405a:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	200000bc 	.word	0x200000bc
 8004068:	20000bd6 	.word	0x20000bd6
 800406c:	20000bdc 	.word	0x20000bdc

08004070 <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8004076:	1dbb      	adds	r3, r7, #6
 8004078:	2200      	movs	r2, #0
 800407a:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 800407c:	1dbb      	adds	r3, r7, #6
 800407e:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <blink_640+0x48>)
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8004084:	1dba      	adds	r2, r7, #6
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	18db      	adds	r3, r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 800408e:	1dba      	adds	r2, r7, #6
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	18db      	adds	r3, r3, r3
 8004096:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8004098:	1dbb      	adds	r3, r7, #6
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <blink_640+0x4c>)
 80040a0:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 80040a2:	1dbb      	adds	r3, r7, #6
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <blink_640+0x50>)
 80040ae:	701a      	strb	r2, [r3, #0]
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000b6e 	.word	0x20000b6e
 80040bc:	20000b76 	.word	0x20000b76
 80040c0:	20000b77 	.word	0x20000b77

080040c4 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <sp_dpy+0x14>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f8af 	bl	8004230 <convadec_math>
								//			//ret	;
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000bcc 	.word	0x20000bcc

080040dc <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80040e2:	1dbb      	adds	r3, r7, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 80040e8:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <dif_dpy+0x2c>)
 80040ea:	8819      	ldrh	r1, [r3, #0]
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <dif_dpy+0x30>)
 80040ee:	881a      	ldrh	r2, [r3, #0]
 80040f0:	1dbb      	adds	r3, r7, #6
 80040f2:	1a8a      	subs	r2, r1, r2
 80040f4:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f898 	bl	8004230 <convadec_math>
									// ret ;
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000bce 	.word	0x20000bce
 800410c:	20000bcc 	.word	0x20000bcc

08004110 <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <minbrake_load+0x2c>)
 8004116:	2265      	movs	r2, #101	@ 0x65
 8004118:	5c9a      	ldrb	r2, [r3, r2]
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <minbrake_load+0x30>)
 800411c:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 800411e:	f000 f99f 	bl	8004460 <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <minbrake_load+0x34>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <minbrake_load+0x38>)
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	189b      	adds	r3, r3, r2
 8004130:	b29a      	uxth	r2, r3
 8004132:	4b06      	ldr	r3, [pc, #24]	@ (800414c <minbrake_load+0x3c>)
 8004134:	801a      	strh	r2, [r3, #0]
}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200000bc 	.word	0x200000bc
 8004140:	20000b77 	.word	0x20000b77
 8004144:	20000b69 	.word	0x20000b69
 8004148:	20000b6a 	.word	0x20000b6a
 800414c:	20000b82 	.word	0x20000b82

08004150 <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	2200      	movs	r2, #0
 800415a:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <desptdv_math+0xd4>)
 8004160:	8812      	ldrh	r2, [r2, #0]
 8004162:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 8004164:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <desptdv_math+0xd8>)
 8004166:	0018      	movs	r0, r3
 8004168:	f7ff ff32 	bl	8003fd0 <TwoByteInArrayToWord>
 800416c:	0003      	movs	r3, r0
 800416e:	0019      	movs	r1, r3
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	1dba      	adds	r2, r7, #6
 8004174:	8812      	ldrh	r2, [r2, #0]
 8004176:	188a      	adds	r2, r1, r2
 8004178:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 800417a:	4b2c      	ldr	r3, [pc, #176]	@ (800422c <desptdv_math+0xdc>)
 800417c:	2252      	movs	r2, #82	@ 0x52
 800417e:	5c9b      	ldrb	r3, [r3, r2]
 8004180:	2b20      	cmp	r3, #32
 8004182:	d145      	bne.n	8004210 <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8004184:	1dbb      	adds	r3, r7, #6
 8004186:	2200      	movs	r2, #0
 8004188:	5e9b      	ldrsh	r3, [r3, r2]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da22      	bge.n	80041d4 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 800418e:	1dbb      	adds	r3, r7, #6
 8004190:	1dba      	adds	r2, r7, #6
 8004192:	8812      	ldrh	r2, [r2, #0]
 8004194:	4252      	negs	r2, r2
 8004196:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8004198:	1dbb      	adds	r3, r7, #6
 800419a:	1dba      	adds	r2, r7, #6
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	0852      	lsrs	r2, r2, #1
 80041a0:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80041a2:	1dba      	adds	r2, r7, #6
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	1c19      	adds	r1, r3, #0
 80041aa:	00c9      	lsls	r1, r1, #3
 80041ac:	18cb      	adds	r3, r1, r3
 80041ae:	18db      	adds	r3, r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80041b2:	1dbc      	adds	r4, r7, #6
 80041b4:	1dbb      	adds	r3, r7, #6
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	2105      	movs	r1, #5
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fb ffac 	bl	8000118 <__udivsi3>
 80041c0:	0003      	movs	r3, r0
 80041c2:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80041c4:	1dbb      	adds	r3, r7, #6
 80041c6:	1dba      	adds	r2, r7, #6
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	21a0      	movs	r1, #160	@ 0xa0
 80041cc:	0049      	lsls	r1, r1, #1
 80041ce:	1a8a      	subs	r2, r1, r2
 80041d0:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80041d2:	e01e      	b.n	8004212 <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80041d4:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80041d6:	1dbb      	adds	r3, r7, #6
 80041d8:	1dba      	adds	r2, r7, #6
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	0852      	lsrs	r2, r2, #1
 80041de:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80041e0:	1dba      	adds	r2, r7, #6
 80041e2:	1dbb      	adds	r3, r7, #6
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	1c19      	adds	r1, r3, #0
 80041e8:	00c9      	lsls	r1, r1, #3
 80041ea:	18cb      	adds	r3, r1, r3
 80041ec:	18db      	adds	r3, r3, r3
 80041ee:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80041f0:	1dbc      	adds	r4, r7, #6
 80041f2:	1dbb      	adds	r3, r7, #6
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	2105      	movs	r1, #5
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7fb ff8d 	bl	8000118 <__udivsi3>
 80041fe:	0003      	movs	r3, r0
 8004200:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 8004202:	1dbb      	adds	r3, r7, #6
 8004204:	1dba      	adds	r2, r7, #6
 8004206:	8812      	ldrh	r2, [r2, #0]
 8004208:	3241      	adds	r2, #65	@ 0x41
 800420a:	32ff      	adds	r2, #255	@ 0xff
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	e000      	b.n	8004212 <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 8004210:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 8004212:	1dbb      	adds	r3, r7, #6
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	0018      	movs	r0, r3
 8004218:	f000 f80a 	bl	8004230 <convadec_math>

}
 800421c:	46c0      	nop			@ (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b003      	add	sp, #12
 8004222:	bd90      	pop	{r4, r7, pc}
 8004224:	20000bd4 	.word	0x20000bd4
 8004228:	200000c1 	.word	0x200000c1
 800422c:	200000bc 	.word	0x200000bc

08004230 <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	0002      	movs	r2, r0
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 800423c:	f000 face 	bl	80047dc <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8004248:	230e      	movs	r3, #14
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 8004250:	1dbb      	adds	r3, r7, #6
 8004252:	2200      	movs	r2, #0
 8004254:	5e9b      	ldrsh	r3, [r3, r2]
 8004256:	2b00      	cmp	r3, #0
 8004258:	da08      	bge.n	800426c <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 800425a:	1dbb      	adds	r3, r7, #6
 800425c:	1dba      	adds	r2, r7, #6
 800425e:	8812      	ldrh	r2, [r2, #0]
 8004260:	4252      	negs	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 8004264:	4b45      	ldr	r3, [pc, #276]	@ (800437c <convadec_math+0x14c>)
 8004266:	2201      	movs	r2, #1
 8004268:	705a      	strb	r2, [r3, #1]
 800426a:	e000      	b.n	800426e <convadec_math+0x3e>
			goto conv_temper_positiva;
 800426c:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 800426e:	1dbb      	adds	r3, r7, #6
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	210a      	movs	r1, #10
 8004274:	0018      	movs	r0, r3
 8004276:	f7fb ffd5 	bl	8000224 <__aeabi_uidivmod>
 800427a:	000b      	movs	r3, r1
 800427c:	b29a      	uxth	r2, r3
 800427e:	230e      	movs	r3, #14
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8004284:	1dbb      	adds	r3, r7, #6
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	210a      	movs	r1, #10
 800428a:	0018      	movs	r0, r3
 800428c:	f7fb ff44 	bl	8000118 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	b29a      	uxth	r2, r3
 8004294:	230f      	movs	r3, #15
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 800429a:	4b38      	ldr	r3, [pc, #224]	@ (800437c <convadec_math+0x14c>)
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	2201      	movs	r2, #1
 80042a0:	4053      	eors	r3, r2
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <convadec_math+0x150>)
 80042aa:	2223      	movs	r2, #35	@ 0x23
 80042ac:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80042ae:	4b35      	ldr	r3, [pc, #212]	@ (8004384 <convadec_math+0x154>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2201      	movs	r2, #1
 80042b4:	4053      	eors	r3, r2
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <convadec_math+0x150>)
 80042be:	2264      	movs	r2, #100	@ 0x64
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e000      	b.n	80042c6 <convadec_math+0x96>
			goto cp_25;
 80042c4:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80042c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004380 <convadec_math+0x150>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	220f      	movs	r2, #15
 80042cc:	18ba      	adds	r2, r7, r2
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d318      	bcc.n	8004306 <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 80042d4:	e03d      	b.n	8004352 <convadec_math+0x122>
			goto conv_signo_positivo;
 80042d6:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 80042d8:	4b29      	ldr	r3, [pc, #164]	@ (8004380 <convadec_math+0x150>)
 80042da:	2263      	movs	r2, #99	@ 0x63
 80042dc:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80042de:	4b29      	ldr	r3, [pc, #164]	@ (8004384 <convadec_math+0x154>)
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4053      	eors	r3, r2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 80042ec:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <convadec_math+0x150>)
 80042ee:	2264      	movs	r2, #100	@ 0x64
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e000      	b.n	80042f6 <convadec_math+0xc6>
			goto cp_99;
 80042f4:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80042f6:	4b22      	ldr	r3, [pc, #136]	@ (8004380 <convadec_math+0x150>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	220f      	movs	r2, #15
 80042fc:	18ba      	adds	r2, r7, r2
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d225      	bcs.n	8004350 <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 8004304:	e000      	b.n	8004308 <convadec_math+0xd8>
		goto     convad10;
 8004306:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8004308:	210f      	movs	r1, #15
 800430a:	187b      	adds	r3, r7, r1
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b09      	cmp	r3, #9
 8004310:	d80d      	bhi.n	800432e <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 8004312:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 8004314:	4b19      	ldr	r3, [pc, #100]	@ (800437c <convadec_math+0x14c>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 800431a:	230e      	movs	r3, #14
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	187b      	adds	r3, r7, r1
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f000 ff14 	bl	8005154 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 800432c:	e021      	b.n	8004372 <convadec_math+0x142>
			goto soloent;
 800432e:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 8004330:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <convadec_math+0x150>)
 8004332:	220f      	movs	r2, #15
 8004334:	18ba      	adds	r2, r7, r2
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 800433a:	f000 f891 	bl	8004460 <BaBentre10_math>
		op_menu (waux,wreg);
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <convadec_math+0x158>)
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <convadec_math+0x150>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	0019      	movs	r1, r3
 8004348:	0010      	movs	r0, r2
 800434a:	f000 ff03 	bl	8005154 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800434e:	e010      	b.n	8004372 <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 8004350:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 8004352:	4b0e      	ldr	r3, [pc, #56]	@ (800438c <convadec_math+0x15c>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	001a      	movs	r2, r3
 800435a:	2320      	movs	r3, #32
 800435c:	4013      	ands	r3, r2
 800435e:	d102      	bne.n	8004366 <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 8004360:	f000 fa3c 	bl	80047dc <offdpy>
		goto	finconvad;
 8004364:	e005      	b.n	8004372 <convadec_math+0x142>
			goto convadec_j02;
 8004366:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8004368:	2111      	movs	r1, #17
 800436a:	2010      	movs	r0, #16
 800436c:	f000 fef2 	bl	8005154 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	20000bb0 	.word	0x20000bb0
 8004380:	20000b77 	.word	0x20000b77
 8004384:	20000c08 	.word	0x20000c08
 8004388:	20000b76 	.word	0x20000b76
 800438c:	20000b6e 	.word	0x20000b6e

08004390 <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	0002      	movs	r2, r0
 8004398:	1dfb      	adds	r3, r7, #7
 800439a:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 800439c:	210f      	movs	r1, #15
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d80c      	bhi.n	80043c6 <convad10+0x36>
			goto soloent;
		}
fraccion:
 80043ac:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <convad10+0x60>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	1dfb      	adds	r3, r7, #7
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	0011      	movs	r1, r2
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fec8 	bl	8005154 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 80043c4:	e00f      	b.n	80043e6 <convad10+0x56>
			goto soloent;
 80043c6:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <convad10+0x64>)
 80043ca:	1dfa      	adds	r2, r7, #7
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80043d0:	f000 f846 	bl	8004460 <BaBentre10_math>
		op_menu (waux,wreg);
 80043d4:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <convad10+0x68>)
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <convad10+0x64>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	0019      	movs	r1, r3
 80043de:	0010      	movs	r0, r2
 80043e0:	f000 feb8 	bl	8005154 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80043e4:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	20000bb0 	.word	0x20000bb0
 80043f4:	20000b77 	.word	0x20000b77
 80043f8:	20000b76 	.word	0x20000b76

080043fc <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	0002      	movs	r2, r0
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 8004408:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <soloent+0x34>)
 800440a:	1dfa      	adds	r2, r7, #7
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8004410:	f000 f826 	bl	8004460 <BaBentre10_math>
		op_menu (waux,wreg);
 8004414:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <soloent+0x38>)
 8004416:	781a      	ldrb	r2, [r3, #0]
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <soloent+0x34>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	0019      	movs	r1, r3
 800441e:	0010      	movs	r0, r2
 8004420:	f000 fe98 	bl	8005154 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8004424:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	20000b77 	.word	0x20000b77
 8004434:	20000b76 	.word	0x20000b76

08004438 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 800443c:	f000 f810 	bl	8004460 <BaBentre10_math>
		op_menu (waux,wreg);
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <soloent1+0x20>)
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <soloent1+0x24>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	0019      	movs	r1, r3
 800444a:	0010      	movs	r0, r2
 800444c:	f000 fe82 	bl	8005154 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8004450:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000b76 	.word	0x20000b76
 800445c:	20000b77 	.word	0x20000b77

08004460 <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(){
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <BaBentre10_math+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 800446a:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <BaBentre10_math+0x50>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	001a      	movs	r2, r3
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <BaBentre10_math+0x54>)
 8004472:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <BaBentre10_math+0x54>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	210a      	movs	r1, #10
 800447c:	0018      	movs	r0, r3
 800447e:	f7fb fed1 	bl	8000224 <__aeabi_uidivmod>
 8004482:	000b      	movs	r3, r1
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <BaBentre10_math+0x50>)
 8004488:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <BaBentre10_math+0x54>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	210a      	movs	r1, #10
 8004492:	0018      	movs	r0, r3
 8004494:	f7fb fe40 	bl	8000118 <__udivsi3>
 8004498:	0003      	movs	r3, r0
 800449a:	b2da      	uxtb	r2, r3
 800449c:	4b03      	ldr	r3, [pc, #12]	@ (80044ac <BaBentre10_math+0x4c>)
 800449e:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 80044a0:	f000 f80a 	bl	80044b8 <conv60_6_math>
}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	20000b76 	.word	0x20000b76
 80044b0:	20000b77 	.word	0x20000b77
 80044b4:	20000922 	.word	0x20000922

080044b8 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math () {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 80044be:	1dbb      	adds	r3, r7, #6
 80044c0:	2200      	movs	r2, #0
 80044c2:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <conv60_6_math+0x54>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	1dba      	adds	r2, r7, #6
 80044ca:	1c19      	adds	r1, r3, #0
 80044cc:	1c0b      	adds	r3, r1, #0
 80044ce:	18db      	adds	r3, r3, r3
 80044d0:	185b      	adds	r3, r3, r1
 80044d2:	18db      	adds	r3, r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 80044d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <conv60_6_math+0x58>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	001a      	movs	r2, r3
 80044dc:	233c      	movs	r3, #60	@ 0x3c
 80044de:	4353      	muls	r3, r2
 80044e0:	b299      	uxth	r1, r3
 80044e2:	1dbb      	adds	r3, r7, #6
 80044e4:	1dba      	adds	r2, r7, #6
 80044e6:	8812      	ldrh	r2, [r2, #0]
 80044e8:	188a      	adds	r2, r1, r2
 80044ea:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 80044ec:	1dbb      	adds	r3, r7, #6
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <conv60_6_math+0x5c>)
 80044f8:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <conv60_6_math+0x60>)
 8004502:	701a      	strb	r2, [r3, #0]
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000b77 	.word	0x20000b77
 8004510:	20000b76 	.word	0x20000b76
 8004514:	20000b69 	.word	0x20000b69
 8004518:	20000b6a 	.word	0x20000b6a

0800451c <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8004522:	4ba3      	ldr	r3, [pc, #652]	@ (80047b0 <fallas+0x294>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8004528:	4ba2      	ldr	r3, [pc, #648]	@ (80047b4 <fallas+0x298>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8004530:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8004532:	e138      	b.n	80047a6 <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8004534:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8004536:	4b9f      	ldr	r3, [pc, #636]	@ (80047b4 <fallas+0x298>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d003      	beq.n	8004546 <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 800453e:	4b9e      	ldr	r3, [pc, #632]	@ (80047b8 <fallas+0x29c>)
 8004540:	2200      	movs	r2, #0
 8004542:	715a      	strb	r2, [r3, #5]
 8004544:	e000      	b.n	8004548 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8004546:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	e014      	b.n	8004578 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 800454e:	4a9b      	ldr	r2, [pc, #620]	@ (80047bc <fallas+0x2a0>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	499a      	ldr	r1, [pc, #616]	@ (80047c0 <fallas+0x2a4>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	18cb      	adds	r3, r1, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4998      	ldr	r1, [pc, #608]	@ (80047c4 <fallas+0x2a8>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	18cb      	adds	r3, r1, r3
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <fallas+0x66>
		for(int k=0; k<8;k++){
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3301      	adds	r3, #1
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b07      	cmp	r3, #7
 800457c:	dde7      	ble.n	800454e <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 800457e:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8004580:	e7d7      	b.n	8004532 <fallas+0x16>
				goto fallas12;//jrne fallas12
 8004582:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8004584:	4b90      	ldr	r3, [pc, #576]	@ (80047c8 <fallas+0x2ac>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d12c      	bne.n	80045e6 <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 800458c:	4b8a      	ldr	r3, [pc, #552]	@ (80047b8 <fallas+0x29c>)
 800458e:	2201      	movs	r2, #1
 8004590:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;//bset flagsBuzzer,#0
 8004592:	4b87      	ldr	r3, [pc, #540]	@ (80047b0 <fallas+0x294>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
	    waux = 0x1F;//mov waux,#$1F;
 8004598:	4b8c      	ldr	r3, [pc, #560]	@ (80047cc <fallas+0x2b0>)
 800459a:	221f      	movs	r2, #31
 800459c:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 800459e:	4b87      	ldr	r3, [pc, #540]	@ (80047bc <fallas+0x2a0>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	4053      	eors	r3, r2
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <fallas+0xa4>
	       	goto fallas_j00;
 80045ac:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 80045ae:	4b83      	ldr	r3, [pc, #524]	@ (80047bc <fallas+0x2a0>)
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d019      	beq.n	80045ea <fallas+0xce>
	       	goto fallas_j01;
 80045b6:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    waux = 0x1F;//mov waux,#$1F
 80045b8:	4b84      	ldr	r3, [pc, #528]	@ (80047cc <fallas+0x2b0>)
 80045ba:	221f      	movs	r2, #31
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e000      	b.n	80045c2 <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 80045c0:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 80045c2:	f000 facf 	bl	8004b64 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 80045c6:	f000 faef 	bl	8004ba8 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 80045ca:	f000 fddd 	bl	8005188 <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		wreg = 0x13;//mov wreg,#$13;
 80045ce:	4b80      	ldr	r3, [pc, #512]	@ (80047d0 <fallas+0x2b4>)
 80045d0:	2213      	movs	r2, #19
 80045d2:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 80045d4:	4b7d      	ldr	r3, [pc, #500]	@ (80047cc <fallas+0x2b0>)
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	4b7d      	ldr	r3, [pc, #500]	@ (80047d0 <fallas+0x2b4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	0019      	movs	r1, r3
 80045de:	0010      	movs	r0, r2
 80045e0:	f000 fdb8 	bl	8005154 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 80045e4:	e0df      	b.n	80047a6 <fallas+0x28a>
	       	goto fallas16;//
 80045e6:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 80045e8:	e0dd      	b.n	80047a6 <fallas+0x28a>
	    goto fallas20;//jra fallas20
 80045ea:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 80045ec:	4b73      	ldr	r3, [pc, #460]	@ (80047bc <fallas+0x2a0>)
 80045ee:	79db      	ldrb	r3, [r3, #7]
 80045f0:	2201      	movs	r2, #1
 80045f2:	4053      	eors	r3, r2
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 80045fa:	2201      	movs	r2, #1
 80045fc:	2127      	movs	r1, #39	@ 0x27
 80045fe:	201f      	movs	r0, #31
 8004600:	f000 fdd0 	bl	80051a4 <wreg_waux_conf>
 8004604:	e000      	b.n	8004608 <fallas+0xec>
			goto fallas_j07;
 8004606:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8004608:	4b6c      	ldr	r3, [pc, #432]	@ (80047bc <fallas+0x2a0>)
 800460a:	799b      	ldrb	r3, [r3, #6]
 800460c:	2201      	movs	r2, #1
 800460e:	4053      	eors	r3, r2
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8004616:	2201      	movs	r2, #1
 8004618:	2127      	movs	r1, #39	@ 0x27
 800461a:	2026      	movs	r0, #38	@ 0x26
 800461c:	f000 fdc2 	bl	80051a4 <wreg_waux_conf>
 8004620:	e000      	b.n	8004624 <fallas+0x108>
			goto fallas_j08;
 8004622:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8004624:	4b66      	ldr	r3, [pc, #408]	@ (80047c0 <fallas+0x2a4>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	4053      	eors	r3, r2
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	212f      	movs	r1, #47	@ 0x2f
 8004636:	200e      	movs	r0, #14
 8004638:	f000 fdb4 	bl	80051a4 <wreg_waux_conf>
 800463c:	e000      	b.n	8004640 <fallas+0x124>
			goto fallas_j08b;
 800463e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8004640:	4b60      	ldr	r3, [pc, #384]	@ (80047c4 <fallas+0x2a8>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	4053      	eors	r3, r2
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 800464e:	2201      	movs	r2, #1
 8004650:	210a      	movs	r1, #10
 8004652:	200b      	movs	r0, #11
 8004654:	f000 fda6 	bl	80051a4 <wreg_waux_conf>
 8004658:	e000      	b.n	800465c <fallas+0x140>
			goto fallas_j08c;
 800465a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 800465c:	4b57      	ldr	r3, [pc, #348]	@ (80047bc <fallas+0x2a0>)
 800465e:	795b      	ldrb	r3, [r3, #5]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8004664:	4b56      	ldr	r3, [pc, #344]	@ (80047c0 <fallas+0x2a4>)
 8004666:	79db      	ldrb	r3, [r3, #7]
 8004668:	2201      	movs	r2, #1
 800466a:	4053      	eors	r3, r2
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8004672:	e000      	b.n	8004676 <fallas+0x15a>
			goto fallas_j01c;
 8004674:	46c0      	nop			@ (mov r8, r8)
		wreg_waux_conf(0x1F, 0x13, 1);
 8004676:	2201      	movs	r2, #1
 8004678:	2113      	movs	r1, #19
 800467a:	201f      	movs	r0, #31
 800467c:	f000 fd92 	bl	80051a4 <wreg_waux_conf>
 8004680:	e000      	b.n	8004684 <fallas+0x168>
			goto fallas_j02c;
 8004682:	46c0      	nop			@ (mov r8, r8)
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8004684:	4b4e      	ldr	r3, [pc, #312]	@ (80047c0 <fallas+0x2a4>)
 8004686:	791b      	ldrb	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 800468c:	4b4c      	ldr	r3, [pc, #304]	@ (80047c0 <fallas+0x2a4>)
 800468e:	795b      	ldrb	r3, [r3, #5]
 8004690:	2201      	movs	r2, #1
 8004692:	4053      	eors	r3, r2
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 800469a:	e000      	b.n	800469e <fallas+0x182>
	       	  goto fallas_j01b;
 800469c:	46c0      	nop			@ (mov r8, r8)
		wreg_waux_conf(0x1F, 0x13, 1);
 800469e:	2201      	movs	r2, #1
 80046a0:	2113      	movs	r1, #19
 80046a2:	201f      	movs	r0, #31
 80046a4:	f000 fd7e 	bl	80051a4 <wreg_waux_conf>
 80046a8:	e000      	b.n	80046ac <fallas+0x190>
	       	  goto fallas_j02b;
 80046aa:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 80046ac:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <fallas+0x2a0>)
 80046ae:	789b      	ldrb	r3, [r3, #2]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 80046b4:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <fallas+0x2a0>)
 80046b6:	78db      	ldrb	r3, [r3, #3]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4053      	eors	r3, r2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 80046c2:	e000      	b.n	80046c6 <fallas+0x1aa>
			goto fallas_j03;
 80046c4:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 80046c6:	2201      	movs	r2, #1
 80046c8:	2113      	movs	r1, #19
 80046ca:	201f      	movs	r0, #31
 80046cc:	f000 fd6a 	bl	80051a4 <wreg_waux_conf>
 80046d0:	e000      	b.n	80046d4 <fallas+0x1b8>
			goto fallas_j04;
 80046d2:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 80046d4:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <fallas+0x2a0>)
 80046d6:	791b      	ldrb	r3, [r3, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	4053      	eors	r3, r2
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 80046e2:	2201      	movs	r2, #1
 80046e4:	211e      	movs	r1, #30
 80046e6:	201f      	movs	r0, #31
 80046e8:	f000 fd5c 	bl	80051a4 <wreg_waux_conf>
 80046ec:	e000      	b.n	80046f0 <fallas+0x1d4>
			goto fallas_j06;
 80046ee:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 80046f0:	4b33      	ldr	r3, [pc, #204]	@ (80047c0 <fallas+0x2a4>)
 80046f2:	799b      	ldrb	r3, [r3, #6]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 80046fe:	2201      	movs	r2, #1
 8004700:	210a      	movs	r1, #10
 8004702:	201f      	movs	r0, #31
 8004704:	f000 fd4e 	bl	80051a4 <wreg_waux_conf>
 8004708:	e000      	b.n	800470c <fallas+0x1f0>
			goto fallas_j06a;
 800470a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 800470c:	4b2c      	ldr	r3, [pc, #176]	@ (80047c0 <fallas+0x2a4>)
 800470e:	789b      	ldrb	r3, [r3, #2]
 8004710:	2201      	movs	r2, #1
 8004712:	4053      	eors	r3, r2
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 800471a:	2201      	movs	r2, #1
 800471c:	210c      	movs	r1, #12
 800471e:	2020      	movs	r0, #32
 8004720:	f000 fd40 	bl	80051a4 <wreg_waux_conf>
 8004724:	e000      	b.n	8004728 <fallas+0x20c>
			goto fallas_j04b;
 8004726:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <fallas+0x2a4>)
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	2201      	movs	r2, #1
 800472e:	4053      	eors	r3, r2
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8004736:	2201      	movs	r2, #1
 8004738:	210b      	movs	r1, #11
 800473a:	2020      	movs	r0, #32
 800473c:	f000 fd32 	bl	80051a4 <wreg_waux_conf>
 8004740:	e000      	b.n	8004744 <fallas+0x228>
			goto fallas_j04c;
 8004742:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <fallas+0x2a4>)
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2201      	movs	r2, #1
 800474a:	4053      	eors	r3, r2
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8004752:	2201      	movs	r2, #1
 8004754:	210c      	movs	r1, #12
 8004756:	201f      	movs	r0, #31
 8004758:	f000 fd24 	bl	80051a4 <wreg_waux_conf>
 800475c:	e000      	b.n	8004760 <fallas+0x244>
			goto fallas_j06b;
 800475e:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8004760:	4b14      	ldr	r3, [pc, #80]	@ (80047b4 <fallas+0x298>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d00c      	beq.n	8004782 <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8004768:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <fallas+0x2b8>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	b29b      	uxth	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <fallas+0x2bc>)
 8004774:	215a      	movs	r1, #90	@ 0x5a
 8004776:	5c52      	ldrb	r2, [r2, r1]
 8004778:	4013      	ands	r3, r2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <fallas+0x288>
			goto parpadeo2a;
 8004780:	e000      	b.n	8004784 <fallas+0x268>
			goto parpadeo2a;
 8004782:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8004784:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <fallas+0x2b4>)
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <fallas+0x2b0>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	0019      	movs	r1, r3
 8004790:	0010      	movs	r0, r2
 8004792:	f000 fcdf 	bl	8005154 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <fallas+0x29c>)
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <fallas+0x29c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	705a      	strb	r2, [r3, #1]
 80047a2:	e000      	b.n	80047a6 <fallas+0x28a>
		goto finfallas;
 80047a4:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000fb8 	.word	0x20000fb8
 80047b4:	20000bb8 	.word	0x20000bb8
 80047b8:	20000bb0 	.word	0x20000bb0
 80047bc:	20000ba8 	.word	0x20000ba8
 80047c0:	20000ba0 	.word	0x20000ba0
 80047c4:	200010c8 	.word	0x200010c8
 80047c8:	20000bf8 	.word	0x20000bf8
 80047cc:	20000b76 	.word	0x20000b76
 80047d0:	20000b77 	.word	0x20000b77
 80047d4:	20000b6e 	.word	0x20000b6e
 80047d8:	200000bc 	.word	0x200000bc

080047dc <offdpy>:
void offdpy (){				//	offdpy:
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 80047e0:	211f      	movs	r1, #31
 80047e2:	201f      	movs	r0, #31
 80047e4:	f000 fcb6 	bl	8005154 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 80047e8:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <offdpy+0x20>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 80047ee:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <offdpy+0x20>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	705a      	strb	r2, [r3, #1]
}
 80047f4:	46c0      	nop			@ (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	20000bb0 	.word	0x20000bb0

08004800 <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b0a7      	sub	sp, #156	@ 0x9c
 8004804:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8004806:	4bd2      	ldr	r3, [pc, #840]	@ (8004b50 <ram_reserved+0x350>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2baa      	cmp	r3, #170	@ 0xaa
 800480c:	d000      	beq.n	8004810 <ram_reserved+0x10>
 800480e:	e15c      	b.n	8004aca <ram_reserved+0x2ca>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8004810:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8004812:	4bd0      	ldr	r3, [pc, #832]	@ (8004b54 <ram_reserved+0x354>)
 8004814:	0018      	movs	r0, r3
 8004816:	f00e fe1b 	bl	8013450 <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 800481a:	4bcf      	ldr	r3, [pc, #828]	@ (8004b58 <ram_reserved+0x358>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	22f8      	movs	r2, #248	@ 0xf8
 8004820:	0612      	lsls	r2, r2, #24
 8004822:	4694      	mov	ip, r2
 8004824:	4463      	add	r3, ip
 8004826:	228c      	movs	r2, #140	@ 0x8c
 8004828:	18b9      	adds	r1, r7, r2
 800482a:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 800482c:	18bb      	adds	r3, r7, r2
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	0d5b      	lsrs	r3, r3, #21
 8004834:	d12f      	bne.n	8004896 <ram_reserved+0x96>
				uint32_t numberPage = VarAux_/2048; 		// Number the Page
 8004836:	18bb      	adds	r3, r7, r2
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	0adb      	lsrs	r3, r3, #11
 800483c:	2288      	movs	r2, #136	@ 0x88
 800483e:	18b9      	adds	r1, r7, r2
 8004840:	600b      	str	r3, [r1, #0]
				uint32_t Error_ = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	67fb      	str	r3, [r7, #124]	@ 0x7c
				FLASH_EraseInitTypeDef pEraseInit = {0};
 8004846:	266c      	movs	r6, #108	@ 0x6c
 8004848:	19bb      	adds	r3, r7, r6
 800484a:	0018      	movs	r0, r3
 800484c:	2310      	movs	r3, #16
 800484e:	001a      	movs	r2, r3
 8004850:	2100      	movs	r1, #0
 8004852:	f013 ff7d 	bl	8018750 <memset>
				pEraseInit.NbPages = 1;
 8004856:	0031      	movs	r1, r6
 8004858:	187a      	adds	r2, r7, r1
 800485a:	2301      	movs	r3, #1
 800485c:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 800485e:	187a      	adds	r2, r7, r1
 8004860:	2388      	movs	r3, #136	@ 0x88
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004868:	187a      	adds	r2, r7, r1
 800486a:	2302      	movs	r3, #2
 800486c:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	f00b fec0 	bl	80105f4 <HAL_FLASH_Unlock>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d1fb      	bne.n	8004870 <ram_reserved+0x70>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8004878:	2314      	movs	r3, #20
 800487a:	2268      	movs	r2, #104	@ 0x68
 800487c:	189b      	adds	r3, r3, r2
 800487e:	19da      	adds	r2, r3, r7
 8004880:	236c      	movs	r3, #108	@ 0x6c
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	0011      	movs	r1, r2
 8004886:	0018      	movs	r0, r3
 8004888:	f00b ffa8 	bl	80107dc <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	f00b fed5 	bl	801063c <HAL_FLASH_Lock>
 8004892:	1e03      	subs	r3, r0, #0
 8004894:	d1fb      	bne.n	800488e <ram_reserved+0x8e>
			}
			AddressDestination = (uint64_t *) dirPointer;
 8004896:	4bb0      	ldr	r3, [pc, #704]	@ (8004b58 <ram_reserved+0x358>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2294      	movs	r2, #148	@ 0x94
 800489c:	18ba      	adds	r2, r7, r2
 800489e:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 80048a0:	232b      	movs	r3, #43	@ 0x2b
 80048a2:	2268      	movs	r2, #104	@ 0x68
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	19da      	adds	r2, r3, r7
 80048a8:	2300      	movs	r3, #0
 80048aa:	7013      	strb	r3, [r2, #0]
 80048ac:	e103      	b.n	8004ab6 <ram_reserved+0x2b6>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 80048ae:	4bab      	ldr	r3, [pc, #684]	@ (8004b5c <ram_reserved+0x35c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2680      	movs	r6, #128	@ 0x80
 80048b6:	19ba      	adds	r2, r7, r6
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	2284      	movs	r2, #132	@ 0x84
 80048be:	18ba      	adds	r2, r7, r2
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4ba6      	ldr	r3, [pc, #664]	@ (8004b5c <ram_reserved+0x35c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	4ba4      	ldr	r3, [pc, #656]	@ (8004b5c <ram_reserved+0x35c>)
 80048ca:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 80048cc:	4ba3      	ldr	r3, [pc, #652]	@ (8004b5c <ram_reserved+0x35c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048d4:	2300      	movs	r3, #0
 80048d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048dc:	000b      	movs	r3, r1
 80048de:	0e1b      	lsrs	r3, r3, #24
 80048e0:	0010      	movs	r0, r2
 80048e2:	0200      	lsls	r0, r0, #8
 80048e4:	6678      	str	r0, [r7, #100]	@ 0x64
 80048e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80048e8:	4318      	orrs	r0, r3
 80048ea:	6678      	str	r0, [r7, #100]	@ 0x64
 80048ec:	000b      	movs	r3, r1
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80048f2:	19bb      	adds	r3, r7, r6
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80048fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80048fc:	1812      	adds	r2, r2, r0
 80048fe:	414b      	adcs	r3, r1
 8004900:	19b9      	adds	r1, r7, r6
 8004902:	600a      	str	r2, [r1, #0]
 8004904:	604b      	str	r3, [r1, #4]
 8004906:	4b95      	ldr	r3, [pc, #596]	@ (8004b5c <ram_reserved+0x35c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	4b93      	ldr	r3, [pc, #588]	@ (8004b5c <ram_reserved+0x35c>)
 800490e:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 8004910:	4b92      	ldr	r3, [pc, #584]	@ (8004b5c <ram_reserved+0x35c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	653b      	str	r3, [r7, #80]	@ 0x50
 8004918:	2300      	movs	r3, #0
 800491a:	657b      	str	r3, [r7, #84]	@ 0x54
 800491c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800491e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004920:	000b      	movs	r3, r1
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	0010      	movs	r0, r2
 8004926:	0405      	lsls	r5, r0, #16
 8004928:	431d      	orrs	r5, r3
 800492a:	000b      	movs	r3, r1
 800492c:	041c      	lsls	r4, r3, #16
 800492e:	19bb      	adds	r3, r7, r6
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	1912      	adds	r2, r2, r4
 8004936:	416b      	adcs	r3, r5
 8004938:	0030      	movs	r0, r6
 800493a:	19b9      	adds	r1, r7, r6
 800493c:	600a      	str	r2, [r1, #0]
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	4b86      	ldr	r3, [pc, #536]	@ (8004b5c <ram_reserved+0x35c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	4b85      	ldr	r3, [pc, #532]	@ (8004b5c <ram_reserved+0x35c>)
 8004948:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 800494a:	4b84      	ldr	r3, [pc, #528]	@ (8004b5c <ram_reserved+0x35c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004952:	2300      	movs	r3, #0
 8004954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	0011      	movs	r1, r2
 800495c:	0a09      	lsrs	r1, r1, #8
 800495e:	6479      	str	r1, [r7, #68]	@ 0x44
 8004960:	0013      	movs	r3, r2
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	643b      	str	r3, [r7, #64]	@ 0x40
 8004966:	0006      	movs	r6, r0
 8004968:	183b      	adds	r3, r7, r0
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004970:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004972:	1812      	adds	r2, r2, r0
 8004974:	414b      	adcs	r3, r1
 8004976:	0031      	movs	r1, r6
 8004978:	1878      	adds	r0, r7, r1
 800497a:	6002      	str	r2, [r0, #0]
 800497c:	6043      	str	r3, [r0, #4]
 800497e:	4b77      	ldr	r3, [pc, #476]	@ (8004b5c <ram_reserved+0x35c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	4b75      	ldr	r3, [pc, #468]	@ (8004b5c <ram_reserved+0x35c>)
 8004986:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 8004988:	4b74      	ldr	r3, [pc, #464]	@ (8004b5c <ram_reserved+0x35c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004990:	2300      	movs	r3, #0
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	001b      	movs	r3, r3
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
 800499a:	2300      	movs	r3, #0
 800499c:	633b      	str	r3, [r7, #48]	@ 0x30
 800499e:	000e      	movs	r6, r1
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049aa:	1812      	adds	r2, r2, r0
 80049ac:	414b      	adcs	r3, r1
 80049ae:	0031      	movs	r1, r6
 80049b0:	1878      	adds	r0, r7, r1
 80049b2:	6002      	str	r2, [r0, #0]
 80049b4:	6043      	str	r3, [r0, #4]
 80049b6:	4b69      	ldr	r3, [pc, #420]	@ (8004b5c <ram_reserved+0x35c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4b67      	ldr	r3, [pc, #412]	@ (8004b5c <ram_reserved+0x35c>)
 80049be:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 80049c0:	4b66      	ldr	r3, [pc, #408]	@ (8004b5c <ram_reserved+0x35c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c8:	2300      	movs	r3, #0
 80049ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
 80049d6:	000e      	movs	r6, r1
 80049d8:	187b      	adds	r3, r7, r1
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	6a38      	ldr	r0, [r7, #32]
 80049e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049e2:	1812      	adds	r2, r2, r0
 80049e4:	414b      	adcs	r3, r1
 80049e6:	0031      	movs	r1, r6
 80049e8:	1878      	adds	r0, r7, r1
 80049ea:	6002      	str	r2, [r0, #0]
 80049ec:	6043      	str	r3, [r0, #4]
 80049ee:	4b5b      	ldr	r3, [pc, #364]	@ (8004b5c <ram_reserved+0x35c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	4b59      	ldr	r3, [pc, #356]	@ (8004b5c <ram_reserved+0x35c>)
 80049f6:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 80049f8:	4b58      	ldr	r3, [pc, #352]	@ (8004b5c <ram_reserved+0x35c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	000e      	movs	r6, r1
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	6938      	ldr	r0, [r7, #16]
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	1812      	adds	r2, r2, r0
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	0031      	movs	r1, r6
 8004a20:	1878      	adds	r0, r7, r1
 8004a22:	6002      	str	r2, [r0, #0]
 8004a24:	6043      	str	r3, [r0, #4]
 8004a26:	4b4d      	ldr	r3, [pc, #308]	@ (8004b5c <ram_reserved+0x35c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b5c <ram_reserved+0x35c>)
 8004a2e:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8004a30:	4b4a      	ldr	r3, [pc, #296]	@ (8004b5c <ram_reserved+0x35c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	000e      	movs	r6, r1
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	6838      	ldr	r0, [r7, #0]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	1812      	adds	r2, r2, r0
 8004a54:	414b      	adcs	r3, r1
 8004a56:	19b9      	adds	r1, r7, r6
 8004a58:	600a      	str	r2, [r1, #0]
 8004a5a:	604b      	str	r3, [r1, #4]
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <ram_reserved+0x35c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <ram_reserved+0x35c>)
 8004a64:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	f00b fdc4 	bl	80105f4 <HAL_FLASH_Unlock>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d1fb      	bne.n	8004a68 <ram_reserved+0x268>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8004a70:	2394      	movs	r3, #148	@ 0x94
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f00b fd6a 	bl	8010558 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	f00b fdd9 	bl	801063c <HAL_FLASH_Lock>
 8004a8a:	1e03      	subs	r3, r0, #0
 8004a8c:	d1fb      	bne.n	8004a86 <ram_reserved+0x286>
				AddressDestination++;
 8004a8e:	2294      	movs	r2, #148	@ 0x94
 8004a90:	18bb      	adds	r3, r7, r2
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	18ba      	adds	r2, r7, r2
 8004a98:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004b54 <ram_reserved+0x354>)
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f00e fcd7 	bl	8013450 <HAL_IWDG_Refresh>


				asm ("nop");
 8004aa2:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 8004aa4:	222b      	movs	r2, #43	@ 0x2b
 8004aa6:	2168      	movs	r1, #104	@ 0x68
 8004aa8:	1853      	adds	r3, r2, r1
 8004aaa:	19db      	adds	r3, r3, r7
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	1852      	adds	r2, r2, r1
 8004ab0:	19d2      	adds	r2, r2, r7
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	7013      	strb	r3, [r2, #0]
 8004ab6:	232b      	movs	r3, #43	@ 0x2b
 8004ab8:	2268      	movs	r2, #104	@ 0x68
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d800      	bhi.n	8004ac6 <ram_reserved+0x2c6>
 8004ac4:	e6f3      	b.n	80048ae <ram_reserved+0xae>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 8004ac6:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8004ac8:	e03a      	b.n	8004b40 <ram_reserved+0x340>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8004aca:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8004acc:	4b21      	ldr	r3, [pc, #132]	@ (8004b54 <ram_reserved+0x354>)
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f00e fcbe 	bl	8013450 <HAL_IWDG_Refresh>
//
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			HAL_IWDG_Refresh( &hiwdg );
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b54 <ram_reserved+0x354>)
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f00e fcba 	bl	8013450 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8004adc:	232a      	movs	r3, #42	@ 0x2a
 8004ade:	2268      	movs	r2, #104	@ 0x68
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e021      	b.n	8004b2e <ram_reserved+0x32e>
				FlashManager((uint32_t *)Page_126, dirPointer, *dataPointer);
 8004aea:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <ram_reserved+0x358>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	0019      	movs	r1, r3
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <ram_reserved+0x35c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	001a      	movs	r2, r3
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <ram_reserved+0x360>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fc f850 	bl	8000ba0 <FlashManager>
				dataPointer++;
 8004b00:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <ram_reserved+0x35c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <ram_reserved+0x35c>)
 8004b08:	601a      	str	r2, [r3, #0]
				dirPointer++;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <ram_reserved+0x358>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <ram_reserved+0x358>)
 8004b12:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );
 8004b14:	4b0f      	ldr	r3, [pc, #60]	@ (8004b54 <ram_reserved+0x354>)
 8004b16:	0018      	movs	r0, r3
 8004b18:	f00e fc9a 	bl	8013450 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8004b1c:	212a      	movs	r1, #42	@ 0x2a
 8004b1e:	2068      	movs	r0, #104	@ 0x68
 8004b20:	180b      	adds	r3, r1, r0
 8004b22:	19db      	adds	r3, r3, r7
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	180b      	adds	r3, r1, r0
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	3201      	adds	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	232a      	movs	r3, #42	@ 0x2a
 8004b30:	2268      	movs	r2, #104	@ 0x68
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	19db      	adds	r3, r3, r7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	b25b      	sxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dad5      	bge.n	8004aea <ram_reserved+0x2ea>
			}



WAIT_FOR_GRAB_0:
 8004b3e:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <ram_reserved+0x354>)
 8004b42:	0018      	movs	r0, r3
 8004b44:	f00e fc84 	bl	8013450 <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b027      	add	sp, #156	@ 0x9c
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b50:	20000dac 	.word	0x20000dac
 8004b54:	2000059c 	.word	0x2000059c
 8004b58:	20000db0 	.word	0x20000db0
 8004b5c:	20000db4 	.word	0x20000db4
 8004b60:	0803f000 	.word	0x0803f000

08004b64 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8004b6a:	1dbb      	adds	r3, r7, #6
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	801a      	strh	r2, [r3, #0]
	foo= findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetiempoAhorro1])*360;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <load_tiempoAhorro1+0x38>)
 8004b72:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba0 <load_tiempoAhorro1+0x3c>)
 8004b74:	0019      	movs	r1, r3
 8004b76:	0010      	movs	r0, r2
 8004b78:	f7fb ffa0 	bl	8000abc <findLastValue>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	21b4      	movs	r1, #180	@ 0xb4
 8004b84:	0049      	lsls	r1, r1, #1
 8004b86:	434a      	muls	r2, r1
 8004b88:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <load_tiempoAhorro1+0x40>)
 8004b8c:	1dba      	adds	r2, r7, #6
 8004b8e:	8812      	ldrh	r2, [r2, #0]
 8004b90:	801a      	strh	r2, [r3, #0]
}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b002      	add	sp, #8
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	20000373 	.word	0x20000373
 8004ba0:	0803f000 	.word	0x0803f000
 8004ba4:	20000c50 	.word	0x20000c50

08004ba8 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8004bae:	1dbb      	adds	r3, r7, #6
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	801a      	strh	r2, [r3, #0]
		foo= findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetiempoAhorro2])*360;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <load_tiempoAhorro2+0x38>)
 8004bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004be4 <load_tiempoAhorro2+0x3c>)
 8004bb8:	0019      	movs	r1, r3
 8004bba:	0010      	movs	r0, r2
 8004bbc:	f7fb ff7e 	bl	8000abc <findLastValue>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	1dbb      	adds	r3, r7, #6
 8004bc6:	21b4      	movs	r1, #180	@ 0xb4
 8004bc8:	0049      	lsls	r1, r1, #1
 8004bca:	434a      	muls	r2, r1
 8004bcc:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <load_tiempoAhorro2+0x40>)
 8004bd0:	1dba      	adds	r2, r7, #6
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	801a      	strh	r2, [r3, #0]
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	20000374 	.word	0x20000374
 8004be4:	0803f000 	.word	0x0803f000
 8004be8:	20000c52 	.word	0x20000c52

08004bec <load_timeNoct>:

void load_timeNoct(){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetimeNoct])*60;
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <load_timeNoct+0x24>)
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <load_timeNoct+0x28>)
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	0010      	movs	r0, r2
 8004bf8:	f7fb ff60 	bl	8000abc <findLastValue>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	223c      	movs	r2, #60	@ 0x3c
 8004c02:	4353      	muls	r3, r2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <load_timeNoct+0x2c>)
 8004c08:	801a      	strh	r2, [r3, #0]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	2000034f 	.word	0x2000034f
 8004c14:	0803f000 	.word	0x0803f000
 8004c18:	20000c64 	.word	0x20000c64

08004c1c <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 8004c22:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <load_next_buffer+0x60>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8004c28:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <load_next_buffer+0x64>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	01db      	lsls	r3, r3, #7
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	4b14      	ldr	r3, [pc, #80]	@ (8004c84 <load_next_buffer+0x68>)
 8004c32:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <load_next_buffer+0x6c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <load_next_buffer+0x68>)
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8004c40:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <load_next_buffer+0x70>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]
	point_X++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3301      	adds	r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
	point_Y++;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	603b      	str	r3, [r7, #0]
	wreg++;
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c8c <load_next_buffer+0x70>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <load_next_buffer+0x70>)
 8004c64:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <load_next_buffer+0x70>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	db00      	blt.n	8004c72 <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8004c70:	e7e9      	b.n	8004c46 <load_next_buffer+0x2a>
	}
    asm ("nop");
 8004c72:	46c0      	nop			@ (mov r8, r8)
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000dc4 	.word	0x20000dc4
 8004c80:	20000dba 	.word	0x20000dba
 8004c84:	20000922 	.word	0x20000922
 8004c88:	20000dc0 	.word	0x20000dc0
 8004c8c:	20000b77 	.word	0x20000b77

08004c90 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
		//		ldw		X,cntReg
		//		ldw		resulh,X

		uint32_t *point_X;
		point_X = (uint32_t) (cntRegPNT);
 8004c96:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <save_cntReg+0x64>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	607b      	str	r3, [r7, #4]

		waux = highByte(cntReg);			//		mov		waux,resulh;
 8004c9c:	4b16      	ldr	r3, [pc, #88]	@ (8004cf8 <save_cntReg+0x68>)
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <save_cntReg+0x6c>)
 8004ca8:	701a      	strb	r2, [r3, #0]
		//		ldw		X,cntRegPNT;
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8004caa:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <save_cntReg+0x6c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	001a      	movs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	0010      	movs	r0, r2
 8004cb6:	f000 fa27 	bl	8005108 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//  	MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004cba:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <save_cntReg+0x70>)
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f00e fbc7 	bl	8013450 <HAL_IWDG_Refresh>
		//
		waux = lowByte(cntReg);		// 		mov		waux,resull;
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <save_cntReg+0x68>)
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <save_cntReg+0x6c>)
 8004cca:	701a      	strb	r2, [r3, #0]
		point_X++;  // cntRegPNT++;						//		incw	X
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	607b      	str	r3, [r7, #4]
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <save_cntReg+0x6c>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0019      	movs	r1, r3
 8004cdc:	0010      	movs	r0, r2
 8004cde:	f000 fa13 	bl	8005108 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004ce2:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <save_cntReg+0x70>)
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f00e fbb3 	bl	8013450 <HAL_IWDG_Refresh>
		//
//		ret
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	20001060 	.word	0x20001060
 8004cf8:	2000105e 	.word	0x2000105e
 8004cfc:	20000b76 	.word	0x20000b76
 8004d00:	2000059c 	.word	0x2000059c

08004d04 <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8004d08:	4b25      	ldr	r3, [pc, #148]	@ (8004da0 <save_timeUNIX+0x9c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4b24      	ldr	r3, [pc, #144]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d14:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 8004d16:	4b23      	ldr	r3, [pc, #140]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	4b22      	ldr	r3, [pc, #136]	@ (8004da8 <save_timeUNIX+0xa4>)
 8004d1e:	0019      	movs	r1, r3
 8004d20:	0010      	movs	r0, r2
 8004d22:	f000 f9f1 	bl	8005108 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004d26:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <save_timeUNIX+0xa8>)
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f00e fb91 	bl	8013450 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 8004d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <save_timeUNIX+0x9c>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d36:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 8004d38:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <save_timeUNIX+0xac>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	0010      	movs	r0, r2
 8004d44:	f000 f9e0 	bl	8005108 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004d48:	4b18      	ldr	r3, [pc, #96]	@ (8004dac <save_timeUNIX+0xa8>)
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f00e fb80 	bl	8013450 <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 8004d50:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <save_timeUNIX+0xb0>)
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d5c:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8004d5e:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	001a      	movs	r2, r3
 8004d64:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <save_timeUNIX+0xb4>)
 8004d66:	0019      	movs	r1, r3
 8004d68:	0010      	movs	r0, r2
 8004d6a:	f000 f9cd 	bl	8005108 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dac <save_timeUNIX+0xa8>)
 8004d70:	0018      	movs	r0, r3
 8004d72:	f00e fb6d 	bl	8013450 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <save_timeUNIX+0xb0>)
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d7e:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8004d80:	4b08      	ldr	r3, [pc, #32]	@ (8004da4 <save_timeUNIX+0xa0>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	001a      	movs	r2, r3
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <save_timeUNIX+0xb8>)
 8004d88:	0019      	movs	r1, r3
 8004d8a:	0010      	movs	r0, r2
 8004d8c:	f000 f9bc 	bl	8005108 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <save_timeUNIX+0xa8>)
 8004d92:	0018      	movs	r0, r3
 8004d94:	f00e fb5c 	bl	8013450 <HAL_IWDG_Refresh>

}
 8004d98:	46c0      	nop			@ (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	20000dd0 	.word	0x20000dd0
 8004da4:	20000b76 	.word	0x20000b76
 8004da8:	20000388 	.word	0x20000388
 8004dac:	2000059c 	.word	0x2000059c
 8004db0:	20000389 	.word	0x20000389
 8004db4:	20000dd2 	.word	0x20000dd2
 8004db8:	2000038a 	.word	0x2000038a
 8004dbc:	2000038b 	.word	0x2000038b

08004dc0 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	000a      	movs	r2, r1
 8004dca:	1cfb      	adds	r3, r7, #3
 8004dcc:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8004dce:	e011      	b.n	8004df4 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8004dd0:	210f      	movs	r1, #15
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 f860 	bl	8004ea4 <build_chksum>
		*point_X++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
		waux--;
 8004dea:	1cfb      	adds	r3, r7, #3
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	1cfb      	adds	r3, r7, #3
 8004df0:	3a01      	subs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
	while (waux){
 8004df4:	1cfb      	adds	r3, r7, #3
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e9      	bne.n	8004dd0 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <ld_alarmDelay+0x1c>)
 8004e0e:	224e      	movs	r2, #78	@ 0x4e
 8004e10:	5c9b      	ldrb	r3, [r3, r2]
 8004e12:	001a      	movs	r2, r3
 8004e14:	233c      	movs	r3, #60	@ 0x3c
 8004e16:	4353      	muls	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <ld_alarmDelay+0x20>)
 8004e1c:	801a      	strh	r2, [r3, #0]
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200000bc 	.word	0x200000bc
 8004e28:	20000fc0 	.word	0x20000fc0

08004e2c <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	e007      	b.n	8004e48 <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 8004e38:	4a07      	ldr	r2, [pc, #28]	@ (8004e58 <clean_buffer+0x2c>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	18d3      	adds	r3, r2, r3
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3301      	adds	r3, #1
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e4c:	ddf4      	ble.n	8004e38 <clean_buffer+0xc>
	}
}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000cac 	.word	0x20000cac

08004e5c <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e00c      	b.n	8004e86 <copyVector+0x2a>
		*dstY = *srcX;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	701a      	strb	r2, [r3, #0]
		srcX++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
		dstY++;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <copyVector+0x44>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	dbec      	blt.n	8004e6c <copyVector+0x10>
	}
	wreg = 0;
 8004e92:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <copyVector+0x44>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000b77 	.word	0x20000b77

08004ea4 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	0002      	movs	r2, r0
 8004eac:	1dfb      	adds	r3, r7, #7
 8004eae:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8004eb0:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8004eb2:	1dfb      	adds	r3, r7, #7
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <build_chksum+0x24>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	18d2      	adds	r2, r2, r3
 8004ebc:	4b02      	ldr	r3, [pc, #8]	@ (8004ec8 <build_chksum+0x24>)
 8004ebe:	601a      	str	r2, [r3, #0]
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000e54 	.word	0x20000e54

08004ecc <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8004ed0:	f7ff fc96 	bl	8004800 <ram_reserved>
Return_RAM:

}
 8004ed4:	46c0      	nop			@ (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <decword+0x1c>
		(*decwreg_Reg)--;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	801a      	strh	r2, [r3, #0]
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}

08004efe <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <decwreg+0x1c>
		(*decwreg_Reg)--;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	701a      	strb	r2, [r3, #0]
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b002      	add	sp, #8
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 8004f2a:	4b40      	ldr	r3, [pc, #256]	@ (800502c <buildmode+0x108>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 8004f30:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <buildmode+0x10c>)
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 8004f38:	4b3c      	ldr	r3, [pc, #240]	@ (800502c <buildmode+0x108>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <buildmode+0x108>)
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e000      	b.n	8004f4a <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 8004f48:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 8004f4a:	1dbb      	adds	r3, r7, #6
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8004f50:	4b38      	ldr	r3, [pc, #224]	@ (8005034 <buildmode+0x110>)
 8004f52:	2223      	movs	r2, #35	@ 0x23
 8004f54:	5c9b      	ldrb	r3, [r3, r2]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	4a36      	ldr	r2, [pc, #216]	@ (8005034 <buildmode+0x110>)
 8004f5c:	2124      	movs	r1, #36	@ 0x24
 8004f5e:	5c52      	ldrb	r2, [r2, r1]
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	1dbb      	adds	r3, r7, #6
 8004f66:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 8004f68:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <buildmode+0x114>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4a32      	ldr	r2, [pc, #200]	@ (800503c <buildmode+0x118>)
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	4b31      	ldr	r3, [pc, #196]	@ (8005040 <buildmode+0x11c>)
 8004f7a:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8004f7c:	4b30      	ldr	r3, [pc, #192]	@ (8005040 <buildmode+0x11c>)
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b21b      	sxth	r3, r3
 8004f82:	1dba      	adds	r2, r7, #6
 8004f84:	2100      	movs	r1, #0
 8004f86:	5e52      	ldrsh	r2, [r2, r1]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	dc07      	bgt.n	8004f9c <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8004f8c:	4b27      	ldr	r3, [pc, #156]	@ (800502c <buildmode+0x108>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2202      	movs	r2, #2
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b25      	ldr	r3, [pc, #148]	@ (800502c <buildmode+0x108>)
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e000      	b.n	8004f9e <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8004f9c:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8004f9e:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <buildmode+0x110>)
 8004fa0:	2259      	movs	r2, #89	@ 0x59
 8004fa2:	5c9b      	ldrb	r3, [r3, r2]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d025      	beq.n	8004ff4 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 8004fa8:	4b26      	ldr	r3, [pc, #152]	@ (8005044 <buildmode+0x120>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4a25      	ldr	r2, [pc, #148]	@ (8005048 <buildmode+0x124>)
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <buildmode+0x11c>)
 8004fba:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <buildmode+0x110>)
 8004fbe:	2221      	movs	r2, #33	@ 0x21
 8004fc0:	5c9b      	ldrb	r3, [r3, r2]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <buildmode+0x110>)
 8004fc8:	2122      	movs	r1, #34	@ 0x22
 8004fca:	5c52      	ldrb	r2, [r2, r1]
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005040 <buildmode+0x11c>)
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b21b      	sxth	r3, r3
 8004fda:	1dba      	adds	r2, r7, #6
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5e52      	ldrsh	r2, [r2, r1]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	dc09      	bgt.n	8004ff8 <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <buildmode+0x108>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <buildmode+0x108>)
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e002      	b.n	8004ffa <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 8004ff4:	46c0      	nop			@ (mov r8, r8)
 8004ff6:	e000      	b.n	8004ffa <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 8004ff8:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 8004ffa:	4b14      	ldr	r3, [pc, #80]	@ (800504c <buildmode+0x128>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	4053      	eors	r3, r2
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 8005008:	4b08      	ldr	r3, [pc, #32]	@ (800502c <buildmode+0x108>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2280      	movs	r2, #128	@ 0x80
 800500e:	4252      	negs	r2, r2
 8005010:	4313      	orrs	r3, r2
 8005012:	b2da      	uxtb	r2, r3
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <buildmode+0x108>)
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e000      	b.n	800501c <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 800501a:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 800501c:	4b03      	ldr	r3, [pc, #12]	@ (800502c <buildmode+0x108>)
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <buildmode+0x12c>)
 8005022:	701a      	strb	r2, [r3, #0]

}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000b76 	.word	0x20000b76
 8005030:	20000bda 	.word	0x20000bda
 8005034:	200000bc 	.word	0x200000bc
 8005038:	20000bd0 	.word	0x20000bd0
 800503c:	20000bd1 	.word	0x20000bd1
 8005040:	20000922 	.word	0x20000922
 8005044:	20000bd2 	.word	0x20000bd2
 8005048:	20000bd3 	.word	0x20000bd3
 800504c:	20000b98 	.word	0x20000b98
 8005050:	20000b74 	.word	0x20000b74

08005054 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <memodriver+0x9c>)
 800505c:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 800505e:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <memodriver+0xa0>)
 8005060:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 8005062:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <memodriver+0xa4>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2baa      	cmp	r3, #170	@ 0xaa
 8005068:	d115      	bne.n	8005096 <memodriver+0x42>
				goto  loaddat;
			}
grabmemo:
 800506a:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 800506c:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <memodriver+0x9c>)
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	4b22      	ldr	r3, [pc, #136]	@ (80050fc <memodriver+0xa8>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d023      	beq.n	80050c0 <memodriver+0x6c>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 8005078:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <memodriver+0xa8>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	001a      	movs	r2, r3
 800507e:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <memodriver+0xac>)
 8005080:	5c9b      	ldrb	r3, [r3, r2]
 8005082:	0018      	movs	r0, r3
 8005084:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <memodriver+0xa8>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	001a      	movs	r2, r3
 800508a:	4b1a      	ldr	r3, [pc, #104]	@ (80050f4 <memodriver+0xa0>)
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	0019      	movs	r1, r3
 8005090:	f000 f83a 	bl	8005108 <wreeprom>
			goto nextdat;
 8005094:	e015      	b.n	80050c2 <memodriver+0x6e>
				goto  loaddat;
 8005096:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = findLastValue((uint32_t *)Page_126 , &eePlantilla[cntmemo]);
 8005098:	4b18      	ldr	r3, [pc, #96]	@ (80050fc <memodriver+0xa8>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <memodriver+0xa0>)
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	001a      	movs	r2, r3
 80050a4:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <memodriver+0xb0>)
 80050a6:	0011      	movs	r1, r2
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fb fd07 	bl	8000abc <findLastValue>
 80050ae:	0001      	movs	r1, r0
 80050b0:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <memodriver+0xa8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	001a      	movs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	b2ca      	uxtb	r2, r1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e000      	b.n	80050c2 <memodriver+0x6e>
				goto nextdat;
 80050c0:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 80050c2:	4b0e      	ldr	r3, [pc, #56]	@ (80050fc <memodriver+0xa8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <memodriver+0xa8>)
 80050cc:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <memodriver+0xa8>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	da06      	bge.n	80050e6 <memodriver+0x92>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 80050d8:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <memodriver+0xa4>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 80050de:	4b07      	ldr	r3, [pc, #28]	@ (80050fc <memodriver+0xa8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 80050e4:	e000      	b.n	80050e8 <memodriver+0x94>
				goto finmemodr;
 80050e6:	46c0      	nop			@ (mov r8, r8)
}
 80050e8:	46c0      	nop			@ (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b002      	add	sp, #8
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	200000bc 	.word	0x200000bc
 80050f4:	20000304 	.word	0x20000304
 80050f8:	20000c83 	.word	0x20000c83
 80050fc:	20000c84 	.word	0x20000c84
 8005100:	2000013c 	.word	0x2000013c
 8005104:	0803f000 	.word	0x0803f000

08005108 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	0002      	movs	r2, r0
 8005110:	6039      	str	r1, [r7, #0]
 8005112:	1dfb      	adds	r3, r7, #7
 8005114:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 8005116:	1dfb      	adds	r3, r7, #7
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	if(AddressDestination >= Page_127){
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <wreeprom+0x40>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d906      	bls.n	8005132 <wreeprom+0x2a>
		FlashManager((uint64_t *) Page_127, AddressDestination, Data);
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	4808      	ldr	r0, [pc, #32]	@ (800514c <wreeprom+0x44>)
 800512a:	0019      	movs	r1, r3
 800512c:	f7fb fd38 	bl	8000ba0 <FlashManager>
	}
	else{
		FlashManager((uint64_t *) Page_126, AddressDestination, Data);
	}
}
 8005130:	e005      	b.n	800513e <wreeprom+0x36>
		FlashManager((uint64_t *) Page_126, AddressDestination, Data);
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4806      	ldr	r0, [pc, #24]	@ (8005150 <wreeprom+0x48>)
 8005138:	0019      	movs	r1, r3
 800513a:	f7fb fd31 	bl	8000ba0 <FlashManager>
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b004      	add	sp, #16
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	0803f7ff 	.word	0x0803f7ff
 800514c:	0803f800 	.word	0x0803f800
 8005150:	0803f000 	.word	0x0803f000

08005154 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	0002      	movs	r2, r0
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	1dbb      	adds	r3, r7, #6
 8005162:	1c0a      	adds	r2, r1, #0
 8005164:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 8005166:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <op_menu+0x2c>)
 8005168:	1dfa      	adds	r2, r7, #7
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 800516e:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <op_menu+0x30>)
 8005170:	1dba      	adds	r2, r7, #6
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	701a      	strb	r2, [r3, #0]
}
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	20000b73 	.word	0x20000b73
 8005184:	20000b72 	.word	0x20000b72

08005188 <datled_clear>:

void datled_clear()
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 800518c:	4b04      	ldr	r3, [pc, #16]	@ (80051a0 <datled_clear+0x18>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 8005192:	4b03      	ldr	r3, [pc, #12]	@ (80051a0 <datled_clear+0x18>)
 8005194:	2200      	movs	r2, #0
 8005196:	705a      	strb	r2, [r3, #1]
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	20000bb0 	.word	0x20000bb0

080051a4 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	0004      	movs	r4, r0
 80051ac:	0008      	movs	r0, r1
 80051ae:	0011      	movs	r1, r2
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	1c22      	adds	r2, r4, #0
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	1dbb      	adds	r3, r7, #6
 80051b8:	1c02      	adds	r2, r0, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	1d7b      	adds	r3, r7, #5
 80051be:	1c0a      	adds	r2, r1, #0
 80051c0:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <wreg_waux_conf+0x4c>)
 80051c4:	1dfa      	adds	r2, r7, #7
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <wreg_waux_conf+0x50>)
 80051cc:	1dba      	adds	r2, r7, #6
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 80051d2:	1d7b      	adds	r3, r7, #5
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <wreg_waux_conf+0x54>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 80051e0:	e002      	b.n	80051e8 <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <wreg_waux_conf+0x54>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
}
 80051e8:	46c0      	nop			@ (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b003      	add	sp, #12
 80051ee:	bd90      	pop	{r4, r7, pc}
 80051f0:	20000b77 	.word	0x20000b77
 80051f4:	20000b76 	.word	0x20000b76
 80051f8:	20000fb8 	.word	0x20000fb8

080051fc <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	0005      	movs	r5, r0
 8005204:	000c      	movs	r4, r1
 8005206:	0010      	movs	r0, r2
 8005208:	0019      	movs	r1, r3
 800520a:	1dbb      	adds	r3, r7, #6
 800520c:	1c2a      	adds	r2, r5, #0
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	1c22      	adds	r2, r4, #0
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	1cbb      	adds	r3, r7, #2
 8005218:	1c02      	adds	r2, r0, #0
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	1c7b      	adds	r3, r7, #1
 800521e:	1c0a      	adds	r2, r1, #0
 8005220:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <opc_nv+0x78>)
 8005224:	1dba      	adds	r2, r7, #6
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 800522a:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <opc_nv+0x7c>)
 800522c:	1d3a      	adds	r2, r7, #4
 800522e:	8812      	ldrh	r2, [r2, #0]
 8005230:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <opc_nv+0x80>)
 8005234:	1cba      	adds	r2, r7, #2
 8005236:	8812      	ldrh	r2, [r2, #0]
 8005238:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 800523a:	f7fe fe05 	bl	8003e48 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <opc_nv+0x80>)
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	b29a      	uxth	r2, r3
 8005246:	1c7b      	adds	r3, r7, #1
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b2d1      	uxtb	r1, r2
 800524c:	4a0c      	ldr	r2, [pc, #48]	@ (8005280 <opc_nv+0x84>)
 800524e:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 8005250:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <opc_nv+0x80>)
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	2318      	movs	r3, #24
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b2d1      	uxtb	r1, r2
 800525c:	4a08      	ldr	r2, [pc, #32]	@ (8005280 <opc_nv+0x84>)
 800525e:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <opc_nv+0x80>)
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fe ffe3 	bl	8004230 <convadec_math>

}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b002      	add	sp, #8
 8005270:	bdb0      	pop	{r4, r5, r7, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	20000c22 	.word	0x20000c22
 8005278:	20000c24 	.word	0x20000c24
 800527c:	20000922 	.word	0x20000922
 8005280:	2000013c 	.word	0x2000013c

08005284 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 800528a:	4b79      	ldr	r3, [pc, #484]	@ (8005470 <comunicacion+0x1ec>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <comunicacion+0x1ec>)
 8005294:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <comunicacion+0x1ec>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2bff      	cmp	r3, #255	@ 0xff
 800529c:	d103      	bne.n	80052a6 <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 800529e:	4b75      	ldr	r3, [pc, #468]	@ (8005474 <comunicacion+0x1f0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80052a4:	e0dd      	b.n	8005462 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 80052a6:	4b72      	ldr	r3, [pc, #456]	@ (8005470 <comunicacion+0x1ec>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80052ac:	d103      	bne.n	80052b6 <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80052ae:	4b71      	ldr	r3, [pc, #452]	@ (8005474 <comunicacion+0x1f0>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80052b4:	e0d5      	b.n	8005462 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 80052b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005470 <comunicacion+0x1ec>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d000      	beq.n	80052c0 <comunicacion+0x3c>
 80052be:	e0cd      	b.n	800545c <comunicacion+0x1d8>
			goto comu_01;
 80052c0:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 80052c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005470 <comunicacion+0x1ec>)
 80052c4:	2205      	movs	r2, #5
 80052c6:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 80052c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005478 <comunicacion+0x1f4>)
 80052ca:	0018      	movs	r0, r3
 80052cc:	f00c fb11 	bl	80118f2 <HAL_I2C_GetState>
 80052d0:	0003      	movs	r3, r0
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d000      	beq.n	80052d8 <comunicacion+0x54>
 80052d6:	e0ae      	b.n	8005436 <comunicacion+0x1b2>
				countResetI2C = 0;
 80052d8:	4b68      	ldr	r3, [pc, #416]	@ (800547c <comunicacion+0x1f8>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 80052de:	4b68      	ldr	r3, [pc, #416]	@ (8005480 <comunicacion+0x1fc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 80052e4:	4b66      	ldr	r3, [pc, #408]	@ (8005480 <comunicacion+0x1fc>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 80052ea:	230f      	movs	r3, #15
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e00a      	b.n	800530a <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 80052f4:	200f      	movs	r0, #15
 80052f6:	183b      	adds	r3, r7, r0
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	4a62      	ldr	r2, [pc, #392]	@ (8005484 <comunicacion+0x200>)
 80052fc:	2100      	movs	r1, #0
 80052fe:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8005300:	183b      	adds	r3, r7, r0
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	183b      	adds	r3, r7, r0
 8005306:	3201      	adds	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	230f      	movs	r3, #15
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b06      	cmp	r3, #6
 8005312:	d9ef      	bls.n	80052f4 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 8005314:	4b5b      	ldr	r3, [pc, #364]	@ (8005484 <comunicacion+0x200>)
 8005316:	2207      	movs	r2, #7
 8005318:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 800531a:	4b5a      	ldr	r3, [pc, #360]	@ (8005484 <comunicacion+0x200>)
 800531c:	2209      	movs	r2, #9
 800531e:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 8005320:	4b59      	ldr	r3, [pc, #356]	@ (8005488 <comunicacion+0x204>)
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	4b57      	ldr	r3, [pc, #348]	@ (8005484 <comunicacion+0x200>)
 8005326:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8005328:	4b58      	ldr	r3, [pc, #352]	@ (800548c <comunicacion+0x208>)
 800532a:	781a      	ldrb	r2, [r3, #0]
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <comunicacion+0x200>)
 800532e:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 8005330:	4b54      	ldr	r3, [pc, #336]	@ (8005484 <comunicacion+0x200>)
 8005332:	2200      	movs	r2, #0
 8005334:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 8005336:	230e      	movs	r3, #14
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e015      	b.n	800536c <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 8005340:	4b50      	ldr	r3, [pc, #320]	@ (8005484 <comunicacion+0x200>)
 8005342:	791a      	ldrb	r2, [r3, #4]
 8005344:	200e      	movs	r0, #14
 8005346:	183b      	adds	r3, r7, r0
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	4951      	ldr	r1, [pc, #324]	@ (8005490 <comunicacion+0x20c>)
 800534c:	5ccb      	ldrb	r3, [r1, r3]
 800534e:	0019      	movs	r1, r3
 8005350:	183b      	adds	r3, r7, r0
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4099      	lsls	r1, r3
 8005356:	000b      	movs	r3, r1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4b49      	ldr	r3, [pc, #292]	@ (8005484 <comunicacion+0x200>)
 8005360:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 8005362:	183b      	adds	r3, r7, r0
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	183b      	adds	r3, r7, r0
 8005368:	3201      	adds	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	230e      	movs	r3, #14
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b07      	cmp	r3, #7
 8005374:	d9e4      	bls.n	8005340 <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <comunicacion+0x200>)
 8005378:	2200      	movs	r2, #0
 800537a:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 800537c:	4b41      	ldr	r3, [pc, #260]	@ (8005484 <comunicacion+0x200>)
 800537e:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2106      	movs	r1, #6
 8005384:	0018      	movs	r0, r3
 8005386:	f7ff fd1b 	bl	8004dc0 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800538a:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <comunicacion+0x1fc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <comunicacion+0x200>)
 8005392:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 8005394:	4b3a      	ldr	r3, [pc, #232]	@ (8005480 <comunicacion+0x1fc>)
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 800539a:	4b3e      	ldr	r3, [pc, #248]	@ (8005494 <comunicacion+0x210>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d034      	beq.n	800540c <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 80053a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005498 <comunicacion+0x214>)
 80053a4:	4834      	ldr	r0, [pc, #208]	@ (8005478 <comunicacion+0x1f4>)
 80053a6:	2309      	movs	r3, #9
 80053a8:	2154      	movs	r1, #84	@ 0x54
 80053aa:	f00c f8d1 	bl	8011550 <HAL_I2C_Master_Receive_DMA>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d123      	bne.n	80053fa <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 80053b2:	230d      	movs	r3, #13
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e015      	b.n	80053e8 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 80053bc:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <comunicacion+0x214>)
 80053be:	799b      	ldrb	r3, [r3, #6]
 80053c0:	001a      	movs	r2, r3
 80053c2:	200d      	movs	r0, #13
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	411a      	asrs	r2, r3
 80053ca:	0013      	movs	r3, r2
 80053cc:	2201      	movs	r2, #1
 80053ce:	401a      	ands	r2, r3
 80053d0:	183b      	adds	r3, r7, r0
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	1e51      	subs	r1, r2, #1
 80053d6:	418a      	sbcs	r2, r1
 80053d8:	b2d1      	uxtb	r1, r2
 80053da:	4a30      	ldr	r2, [pc, #192]	@ (800549c <comunicacion+0x218>)
 80053dc:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 80053de:	183b      	adds	r3, r7, r0
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	3201      	adds	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	230d      	movs	r3, #13
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	d9e4      	bls.n	80053bc <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 80053f2:	4b28      	ldr	r3, [pc, #160]	@ (8005494 <comunicacion+0x210>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e033      	b.n	8005462 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 80053fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005478 <comunicacion+0x1f4>)
 80053fc:	0018      	movs	r0, r3
 80053fe:	f00b ff71 	bl	80112e4 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <comunicacion+0x1f4>)
 8005404:	0018      	movs	r0, r3
 8005406:	f00b fec7 	bl	8011198 <HAL_I2C_Init>
 800540a:	e02a      	b.n	8005462 <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 800540c:	4a1d      	ldr	r2, [pc, #116]	@ (8005484 <comunicacion+0x200>)
 800540e:	481a      	ldr	r0, [pc, #104]	@ (8005478 <comunicacion+0x1f4>)
 8005410:	2307      	movs	r3, #7
 8005412:	2154      	movs	r1, #84	@ 0x54
 8005414:	f00b ff96 	bl	8011344 <HAL_I2C_Master_Transmit_DMA>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d103      	bne.n	8005424 <comunicacion+0x1a0>
					  FlagTx= 1;
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <comunicacion+0x210>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e01e      	b.n	8005462 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8005424:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <comunicacion+0x1f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f00b ff5c 	bl	80112e4 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 800542c:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <comunicacion+0x1f4>)
 800542e:	0018      	movs	r0, r3
 8005430:	f00b feb2 	bl	8011198 <HAL_I2C_Init>
 8005434:	e015      	b.n	8005462 <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 8005436:	4b11      	ldr	r3, [pc, #68]	@ (800547c <comunicacion+0x1f8>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <comunicacion+0x1f8>)
 8005440:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 8005442:	4b0e      	ldr	r3, [pc, #56]	@ (800547c <comunicacion+0x1f8>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 800544a:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <comunicacion+0x1f4>)
 800544c:	0018      	movs	r0, r3
 800544e:	f00b ff49 	bl	80112e4 <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 8005452:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <comunicacion+0x1f4>)
 8005454:	0018      	movs	r0, r3
 8005456:	f00b fe9f 	bl	8011198 <HAL_I2C_Init>
 800545a:	e002      	b.n	8005462 <comunicacion+0x1de>
		goto fin_comu;
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	e000      	b.n	8005462 <comunicacion+0x1de>
				}
			}
fin_comu:
 8005460:	46c0      	nop			@ (mov r8, r8)
	detecta();
 8005462:	f000 f81d 	bl	80054a0 <detecta>


}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	20000c98 	.word	0x20000c98
 8005474:	20000b78 	.word	0x20000b78
 8005478:	20000488 	.word	0x20000488
 800547c:	200010d6 	.word	0x200010d6
 8005480:	20000e54 	.word	0x20000e54
 8005484:	20000008 	.word	0x20000008
 8005488:	20000c99 	.word	0x20000c99
 800548c:	20000c9a 	.word	0x20000c9a
 8005490:	20000c9c 	.word	0x20000c9c
 8005494:	20000417 	.word	0x20000417
 8005498:	20000418 	.word	0x20000418
 800549c:	20000ca4 	.word	0x20000ca4

080054a0 <detecta>:

void detecta(void){
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 80054a6:	4bb0      	ldr	r3, [pc, #704]	@ (8005768 <detecta+0x2c8>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <detecta+0x12>
 80054ae:	f000 fc39 	bl	8005d24 <detecta+0x884>
		goto dete03;
 80054b2:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 80054b4:	4bad      	ldr	r3, [pc, #692]	@ (800576c <detecta+0x2cc>)
 80054b6:	225b      	movs	r2, #91	@ 0x5b
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	001a      	movs	r2, r3
 80054bc:	2301      	movs	r3, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	d004      	beq.n	80054cc <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 80054c2:	f7ff fb4f 	bl	8004b64 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 80054c6:	f7ff fb6f 	bl	8004ba8 <load_tiempoAhorro2>
	goto closedoor_b;
 80054ca:	e1cc      	b.n	8005866 <detecta+0x3c6>
		goto detectaPuerta;
 80054cc:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 80054ce:	4ba7      	ldr	r3, [pc, #668]	@ (800576c <detecta+0x2cc>)
 80054d0:	2253      	movs	r2, #83	@ 0x53
 80054d2:	5c9b      	ldrb	r3, [r3, r2]
 80054d4:	001a      	movs	r2, r3
 80054d6:	2308      	movs	r3, #8
 80054d8:	4013      	ands	r3, r2
 80054da:	d045      	beq.n	8005568 <detecta+0xc8>
		goto detecta_j01;
 80054dc:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80054de:	1dfb      	adds	r3, r7, #7
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e03a      	b.n	800555c <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 80054e6:	1dfb      	adds	r3, r7, #7
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	4ba1      	ldr	r3, [pc, #644]	@ (8005770 <detecta+0x2d0>)
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	58d0      	ldr	r0, [r2, r3]
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4a9f      	ldr	r2, [pc, #636]	@ (8005774 <detecta+0x2d4>)
 80054f6:	5cd3      	ldrb	r3, [r2, r3]
 80054f8:	2201      	movs	r2, #1
 80054fa:	0019      	movs	r1, r3
 80054fc:	f00b fdd5 	bl	80110aa <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 8005500:	1dbb      	adds	r3, r7, #6
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e013      	b.n	8005530 <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8005508:	1dbb      	adds	r3, r7, #6
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	4b98      	ldr	r3, [pc, #608]	@ (8005770 <detecta+0x2d0>)
 800550e:	0092      	lsls	r2, r2, #2
 8005510:	58d0      	ldr	r0, [r2, r3]
 8005512:	1dbb      	adds	r3, r7, #6
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	4a97      	ldr	r2, [pc, #604]	@ (8005774 <detecta+0x2d4>)
 8005518:	5cd3      	ldrb	r3, [r2, r3]
 800551a:	0019      	movs	r1, r3
 800551c:	f00b fda8 	bl	8011070 <HAL_GPIO_ReadPin>
 8005520:	1e03      	subs	r3, r0, #0
 8005522:	d100      	bne.n	8005526 <detecta+0x86>
 8005524:	e1ce      	b.n	80058c4 <detecta+0x424>
		for(uint8_t Px = 0; Px < 5; Px++){
 8005526:	1dbb      	adds	r3, r7, #6
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	1dbb      	adds	r3, r7, #6
 800552c:	3201      	adds	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	1dbb      	adds	r3, r7, #6
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d9e7      	bls.n	8005508 <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 8005538:	1dfb      	adds	r3, r7, #7
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	4b8c      	ldr	r3, [pc, #560]	@ (8005770 <detecta+0x2d0>)
 800553e:	0092      	lsls	r2, r2, #2
 8005540:	58d0      	ldr	r0, [r2, r3]
 8005542:	1dfb      	adds	r3, r7, #7
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	4a8b      	ldr	r2, [pc, #556]	@ (8005774 <detecta+0x2d4>)
 8005548:	5cd3      	ldrb	r3, [r2, r3]
 800554a:	2200      	movs	r2, #0
 800554c:	0019      	movs	r1, r3
 800554e:	f00b fdac 	bl	80110aa <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8005552:	1dfb      	adds	r3, r7, #7
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	3201      	adds	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	1dfb      	adds	r3, r7, #7
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d9c0      	bls.n	80054e6 <detecta+0x46>
	}
	goto detecta_j02;
 8005564:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 8005566:	e174      	b.n	8005852 <detecta+0x3b2>
	goto switch_no;
 8005568:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 800556a:	4b83      	ldr	r3, [pc, #524]	@ (8005778 <detecta+0x2d8>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	425a      	negs	r2, r3
 8005570:	4153      	adcs	r3, r2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	001a      	movs	r2, r3
 8005576:	4b81      	ldr	r3, [pc, #516]	@ (800577c <detecta+0x2dc>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4013      	ands	r3, r2
 800557c:	d022      	beq.n	80055c4 <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 800557e:	4b80      	ldr	r3, [pc, #512]	@ (8005780 <detecta+0x2e0>)
 8005580:	6858      	ldr	r0, [r3, #4]
 8005582:	4b80      	ldr	r3, [pc, #512]	@ (8005784 <detecta+0x2e4>)
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2201      	movs	r2, #1
 8005588:	0019      	movs	r1, r3
 800558a:	f00b fd8e 	bl	80110aa <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800558e:	200a      	movs	r0, #10
 8005590:	f009 f94e 	bl	800e830 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 8005594:	4b76      	ldr	r3, [pc, #472]	@ (8005770 <detecta+0x2d0>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b76      	ldr	r3, [pc, #472]	@ (8005774 <detecta+0x2d4>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	0019      	movs	r1, r3
 800559e:	0010      	movs	r0, r2
 80055a0:	f00b fd66 	bl	8011070 <HAL_GPIO_ReadPin>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d002      	beq.n	80055ae <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 80055a8:	4b77      	ldr	r3, [pc, #476]	@ (8005788 <detecta+0x2e8>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80055ae:	4b74      	ldr	r3, [pc, #464]	@ (8005780 <detecta+0x2e0>)
 80055b0:	6858      	ldr	r0, [r3, #4]
 80055b2:	4b74      	ldr	r3, [pc, #464]	@ (8005784 <detecta+0x2e4>)
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2201      	movs	r2, #1
 80055b8:	0019      	movs	r1, r3
 80055ba:	f00b fd76 	bl	80110aa <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 80055be:	4b6f      	ldr	r3, [pc, #444]	@ (800577c <detecta+0x2dc>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 80055c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005778 <detecta+0x2d8>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b0a      	cmp	r3, #10
 80055ca:	d000      	beq.n	80055ce <detecta+0x12e>
 80055cc:	e083      	b.n	80056d6 <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 80055ce:	1d7b      	adds	r3, r7, #5
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e048      	b.n	8005668 <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80055d6:	1d7b      	adds	r3, r7, #5
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	4b65      	ldr	r3, [pc, #404]	@ (8005770 <detecta+0x2d0>)
 80055dc:	0092      	lsls	r2, r2, #2
 80055de:	58d0      	ldr	r0, [r2, r3]
 80055e0:	1d7b      	adds	r3, r7, #5
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	4a63      	ldr	r2, [pc, #396]	@ (8005774 <detecta+0x2d4>)
 80055e6:	5cd3      	ldrb	r3, [r2, r3]
 80055e8:	0019      	movs	r1, r3
 80055ea:	f00b fd41 	bl	8011070 <HAL_GPIO_ReadPin>
 80055ee:	1e03      	subs	r3, r0, #0
 80055f0:	d00f      	beq.n	8005612 <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 80055f2:	4b66      	ldr	r3, [pc, #408]	@ (800578c <detecta+0x2ec>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	001a      	movs	r2, r3
 80055f8:	0013      	movs	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	189a      	adds	r2, r3, r2
 80055fe:	1d7b      	adds	r3, r7, #5
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	18d3      	adds	r3, r2, r3
 8005604:	4a62      	ldr	r2, [pc, #392]	@ (8005790 <detecta+0x2f0>)
 8005606:	5cd2      	ldrb	r2, [r2, r3]
 8005608:	3201      	adds	r2, #1
 800560a:	b2d1      	uxtb	r1, r2
 800560c:	4a60      	ldr	r2, [pc, #384]	@ (8005790 <detecta+0x2f0>)
 800560e:	54d1      	strb	r1, [r2, r3]
 8005610:	e025      	b.n	800565e <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8005612:	1d7b      	adds	r3, r7, #5
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	4b56      	ldr	r3, [pc, #344]	@ (8005770 <detecta+0x2d0>)
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	58d0      	ldr	r0, [r2, r3]
 800561c:	1d7b      	adds	r3, r7, #5
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4a54      	ldr	r2, [pc, #336]	@ (8005774 <detecta+0x2d4>)
 8005622:	5cd3      	ldrb	r3, [r2, r3]
 8005624:	0019      	movs	r1, r3
 8005626:	f00b fd23 	bl	8011070 <HAL_GPIO_ReadPin>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d117      	bne.n	800565e <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 800562e:	4b57      	ldr	r3, [pc, #348]	@ (800578c <detecta+0x2ec>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	001a      	movs	r2, r3
 8005634:	0013      	movs	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	189a      	adds	r2, r3, r2
 800563a:	1d7b      	adds	r3, r7, #5
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	18d3      	adds	r3, r2, r3
 8005640:	4a51      	ldr	r2, [pc, #324]	@ (8005788 <detecta+0x2e8>)
 8005642:	2100      	movs	r1, #0
 8005644:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 8005646:	4b51      	ldr	r3, [pc, #324]	@ (800578c <detecta+0x2ec>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	001a      	movs	r2, r3
 800564c:	0013      	movs	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	189a      	adds	r2, r3, r2
 8005652:	1d7b      	adds	r3, r7, #5
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	18d3      	adds	r3, r2, r3
 8005658:	4a4d      	ldr	r2, [pc, #308]	@ (8005790 <detecta+0x2f0>)
 800565a:	2100      	movs	r1, #0
 800565c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 800565e:	1d7b      	adds	r3, r7, #5
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	1d7b      	adds	r3, r7, #5
 8005664:	3201      	adds	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	1d7b      	adds	r3, r7, #5
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d9b2      	bls.n	80055d6 <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 8005670:	4b46      	ldr	r3, [pc, #280]	@ (800578c <detecta+0x2ec>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	001a      	movs	r2, r3
 8005676:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <detecta+0x2e0>)
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	58d0      	ldr	r0, [r2, r3]
 800567c:	4b43      	ldr	r3, [pc, #268]	@ (800578c <detecta+0x2ec>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	001a      	movs	r2, r3
 8005682:	4b40      	ldr	r3, [pc, #256]	@ (8005784 <detecta+0x2e4>)
 8005684:	5c9b      	ldrb	r3, [r3, r2]
 8005686:	2200      	movs	r2, #0
 8005688:	0019      	movs	r1, r3
 800568a:	f00b fd0e 	bl	80110aa <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 800568e:	4b3f      	ldr	r3, [pc, #252]	@ (800578c <detecta+0x2ec>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d805      	bhi.n	80056a2 <detecta+0x202>
			countMPx++;
 8005696:	4b3d      	ldr	r3, [pc, #244]	@ (800578c <detecta+0x2ec>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <detecta+0x2ec>)
 80056a0:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 80056a2:	4b3a      	ldr	r3, [pc, #232]	@ (800578c <detecta+0x2ec>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d102      	bne.n	80056b0 <detecta+0x210>
			countMPx = 0;
 80056aa:	4b38      	ldr	r3, [pc, #224]	@ (800578c <detecta+0x2ec>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 80056b0:	4b36      	ldr	r3, [pc, #216]	@ (800578c <detecta+0x2ec>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	001a      	movs	r2, r3
 80056b6:	4b32      	ldr	r3, [pc, #200]	@ (8005780 <detecta+0x2e0>)
 80056b8:	0092      	lsls	r2, r2, #2
 80056ba:	58d0      	ldr	r0, [r2, r3]
 80056bc:	4b33      	ldr	r3, [pc, #204]	@ (800578c <detecta+0x2ec>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	001a      	movs	r2, r3
 80056c2:	4b30      	ldr	r3, [pc, #192]	@ (8005784 <detecta+0x2e4>)
 80056c4:	5c9b      	ldrb	r3, [r3, r2]
 80056c6:	2201      	movs	r2, #1
 80056c8:	0019      	movs	r1, r3
 80056ca:	f00b fcee 	bl	80110aa <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 80056ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005778 <detecta+0x2d8>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e009      	b.n	80056ea <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 80056d6:	4b28      	ldr	r3, [pc, #160]	@ (8005778 <detecta+0x2d8>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d805      	bhi.n	80056ea <detecta+0x24a>
		countWaitPuerta++;
 80056de:	4b26      	ldr	r3, [pc, #152]	@ (8005778 <detecta+0x2d8>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b24      	ldr	r3, [pc, #144]	@ (8005778 <detecta+0x2d8>)
 80056e8:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e0a5      	b.n	800583e <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 80056f2:	1cfb      	adds	r3, r7, #3
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e097      	b.n	800582a <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	0013      	movs	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	189a      	adds	r2, r3, r2
 8005704:	1cfb      	adds	r3, r7, #3
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <detecta+0x2f0>)
 800570c:	5cd3      	ldrb	r3, [r2, r3]
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	4193      	sbcs	r3, r2
 8005712:	b2da      	uxtb	r2, r3
 8005714:	4b18      	ldr	r3, [pc, #96]	@ (8005778 <detecta+0x2d8>)
 8005716:	7819      	ldrb	r1, [r3, #0]
 8005718:	2009      	movs	r0, #9
 800571a:	2300      	movs	r3, #0
 800571c:	4288      	cmp	r0, r1
 800571e:	415b      	adcs	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4013      	ands	r3, r2
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d100      	bne.n	800572c <detecta+0x28c>
 800572a:	e079      	b.n	8005820 <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800572c:	1cfb      	adds	r3, r7, #3
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <detecta+0x2d0>)
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	58d0      	ldr	r0, [r2, r3]
 8005736:	1cfb      	adds	r3, r7, #3
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4a0e      	ldr	r2, [pc, #56]	@ (8005774 <detecta+0x2d4>)
 800573c:	5cd3      	ldrb	r3, [r2, r3]
 800573e:	0019      	movs	r1, r3
 8005740:	f00b fc96 	bl	8011070 <HAL_GPIO_ReadPin>
 8005744:	1e03      	subs	r3, r0, #0
 8005746:	d025      	beq.n	8005794 <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	0013      	movs	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	189a      	adds	r2, r3, r2
 8005752:	1cfb      	adds	r3, r7, #3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	18d3      	adds	r3, r2, r3
 8005758:	4a0d      	ldr	r2, [pc, #52]	@ (8005790 <detecta+0x2f0>)
 800575a:	5cd2      	ldrb	r2, [r2, r3]
 800575c:	3201      	adds	r2, #1
 800575e:	b2d1      	uxtb	r1, r2
 8005760:	4a0b      	ldr	r2, [pc, #44]	@ (8005790 <detecta+0x2f0>)
 8005762:	54d1      	strb	r1, [r2, r3]
 8005764:	e03a      	b.n	80057dc <detecta+0x33c>
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	20000bb8 	.word	0x20000bb8
 800576c:	200000bc 	.word	0x200000bc
 8005770:	200001ec 	.word	0x200001ec
 8005774:	20000200 	.word	0x20000200
 8005778:	20001100 	.word	0x20001100
 800577c:	2000021c 	.word	0x2000021c
 8005780:	20000208 	.word	0x20000208
 8005784:	20000218 	.word	0x20000218
 8005788:	200010d8 	.word	0x200010d8
 800578c:	20001101 	.word	0x20001101
 8005790:	200010ec 	.word	0x200010ec
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8005794:	1cfb      	adds	r3, r7, #3
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	4bcf      	ldr	r3, [pc, #828]	@ (8005ad8 <detecta+0x638>)
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	58d0      	ldr	r0, [r2, r3]
 800579e:	1cfb      	adds	r3, r7, #3
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	4ace      	ldr	r2, [pc, #824]	@ (8005adc <detecta+0x63c>)
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	0019      	movs	r1, r3
 80057a8:	f00b fc62 	bl	8011070 <HAL_GPIO_ReadPin>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d115      	bne.n	80057dc <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	0013      	movs	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	189a      	adds	r2, r3, r2
 80057ba:	1cfb      	adds	r3, r7, #3
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	4ac7      	ldr	r2, [pc, #796]	@ (8005ae0 <detecta+0x640>)
 80057c2:	2100      	movs	r1, #0
 80057c4:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	0013      	movs	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	189a      	adds	r2, r3, r2
 80057d0:	1cfb      	adds	r3, r7, #3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	4ac3      	ldr	r2, [pc, #780]	@ (8005ae4 <detecta+0x644>)
 80057d8:	2100      	movs	r1, #0
 80057da:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	0013      	movs	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	189a      	adds	r2, r3, r2
 80057e6:	1cfb      	adds	r3, r7, #3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	4abd      	ldr	r2, [pc, #756]	@ (8005ae4 <detecta+0x644>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	2b0a      	cmp	r3, #10
 80057f2:	d115      	bne.n	8005820 <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	781a      	ldrb	r2, [r3, #0]
 80057f8:	0013      	movs	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	189a      	adds	r2, r3, r2
 80057fe:	1cfb      	adds	r3, r7, #3
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	18d3      	adds	r3, r2, r3
 8005804:	4ab6      	ldr	r2, [pc, #728]	@ (8005ae0 <detecta+0x640>)
 8005806:	2101      	movs	r1, #1
 8005808:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	0013      	movs	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	189a      	adds	r2, r3, r2
 8005814:	1cfb      	adds	r3, r7, #3
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	18d3      	adds	r3, r2, r3
 800581a:	4ab2      	ldr	r2, [pc, #712]	@ (8005ae4 <detecta+0x644>)
 800581c:	2100      	movs	r1, #0
 800581e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8005820:	1cfb      	adds	r3, r7, #3
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	1cfb      	adds	r3, r7, #3
 8005826:	3201      	adds	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	1cfb      	adds	r3, r7, #3
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b04      	cmp	r3, #4
 8005830:	d800      	bhi.n	8005834 <detecta+0x394>
 8005832:	e762      	b.n	80056fa <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	3201      	adds	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d800      	bhi.n	8005848 <detecta+0x3a8>
 8005846:	e754      	b.n	80056f2 <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8005848:	4ba5      	ldr	r3, [pc, #660]	@ (8005ae0 <detecta+0x640>)
 800584a:	791b      	ldrb	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d13b      	bne.n	80058c8 <detecta+0x428>
		goto opendoor;
	}
	goto detecta_j03;
 8005850:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 8005852:	4ba5      	ldr	r3, [pc, #660]	@ (8005ae8 <detecta+0x648>)
 8005854:	0018      	movs	r0, r3
 8005856:	f7ff fb52 	bl	8004efe <decwreg>
	if(debdoor == 0){
 800585a:	4ba3      	ldr	r3, [pc, #652]	@ (8005ae8 <detecta+0x648>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d000      	beq.n	8005864 <detecta+0x3c4>
 8005862:	e0a8      	b.n	80059b6 <detecta+0x516>
		goto closedoor_b;
 8005864:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 8005866:	4ba1      	ldr	r3, [pc, #644]	@ (8005aec <detecta+0x64c>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 800586c:	4ba0      	ldr	r3, [pc, #640]	@ (8005af0 <detecta+0x650>)
 800586e:	2248      	movs	r2, #72	@ 0x48
 8005870:	5c9a      	ldrb	r2, [r3, r2]
 8005872:	4ba0      	ldr	r3, [pc, #640]	@ (8005af4 <detecta+0x654>)
 8005874:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 8005876:	4ba0      	ldr	r3, [pc, #640]	@ (8005af8 <detecta+0x658>)
 8005878:	2200      	movs	r2, #0
 800587a:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 800587c:	f7fe fbc6 	bl	800400c <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 8005880:	4b9e      	ldr	r3, [pc, #632]	@ (8005afc <detecta+0x65c>)
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d100      	bne.n	800588a <detecta+0x3ea>
 8005888:	e097      	b.n	80059ba <detecta+0x51a>
		goto detecta_j04;
 800588a:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 800588c:	4b9b      	ldr	r3, [pc, #620]	@ (8005afc <detecta+0x65c>)
 800588e:	2200      	movs	r2, #0
 8005890:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 8005892:	4b9a      	ldr	r3, [pc, #616]	@ (8005afc <detecta+0x65c>)
 8005894:	78db      	ldrb	r3, [r3, #3]
 8005896:	2201      	movs	r2, #1
 8005898:	4053      	eors	r3, r2
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d100      	bne.n	80058a2 <detecta+0x402>
 80058a0:	e08d      	b.n	80059be <detecta+0x51e>
		goto det_j04;
 80058a2:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 80058a4:	f7ff f9a2 	bl	8004bec <load_timeNoct>
	durdhh=0;
 80058a8:	4b95      	ldr	r3, [pc, #596]	@ (8005b00 <detecta+0x660>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
	durdhl=0;
 80058ae:	4b95      	ldr	r3, [pc, #596]	@ (8005b04 <detecta+0x664>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 80058b4:	4b91      	ldr	r3, [pc, #580]	@ (8005afc <detecta+0x65c>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 80058ba:	4b93      	ldr	r3, [pc, #588]	@ (8005b08 <detecta+0x668>)
 80058bc:	2201      	movs	r2, #1
 80058be:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 80058c0:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 80058c2:	e061      	b.n	8005988 <detecta+0x4e8>
				goto opendoor;
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	e000      	b.n	80058ca <detecta+0x42a>
		goto opendoor;
 80058c8:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 80058ca:	4b87      	ldr	r3, [pc, #540]	@ (8005ae8 <detecta+0x648>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b25b      	sxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	db06      	blt.n	80058e2 <detecta+0x442>
	debdoor++;
 80058d4:	4b84      	ldr	r3, [pc, #528]	@ (8005ae8 <detecta+0x648>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b82      	ldr	r3, [pc, #520]	@ (8005ae8 <detecta+0x648>)
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e000      	b.n	80058e4 <detecta+0x444>
		goto noinc;
 80058e2:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 80058e4:	4b80      	ldr	r3, [pc, #512]	@ (8005ae8 <detecta+0x648>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da2c      	bge.n	8005948 <detecta+0x4a8>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 80058ee:	4b7f      	ldr	r3, [pc, #508]	@ (8005aec <detecta+0x64c>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 80058f4:	4b85      	ldr	r3, [pc, #532]	@ (8005b0c <detecta+0x66c>)
 80058f6:	2205      	movs	r2, #5
 80058f8:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 80058fa:	4b7d      	ldr	r3, [pc, #500]	@ (8005af0 <detecta+0x650>)
 80058fc:	224f      	movs	r2, #79	@ 0x4f
 80058fe:	5c9a      	ldrb	r2, [r3, r2]
 8005900:	4b83      	ldr	r3, [pc, #524]	@ (8005b10 <detecta+0x670>)
 8005902:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8005904:	4b83      	ldr	r3, [pc, #524]	@ (8005b14 <detecta+0x674>)
 8005906:	2205      	movs	r2, #5
 8005908:	701a      	strb	r2, [r3, #0]
	if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetimepaf])!= 0){
 800590a:	4b83      	ldr	r3, [pc, #524]	@ (8005b18 <detecta+0x678>)
 800590c:	4a83      	ldr	r2, [pc, #524]	@ (8005b1c <detecta+0x67c>)
 800590e:	0019      	movs	r1, r3
 8005910:	0010      	movs	r0, r2
 8005912:	f7fb f8d3 	bl	8000abc <findLastValue>
 8005916:	1e03      	subs	r3, r0, #0
 8005918:	d103      	bne.n	8005922 <detecta+0x482>
	cnt_pta_fan=99;
 800591a:	4b76      	ldr	r3, [pc, #472]	@ (8005af4 <detecta+0x654>)
 800591c:	2263      	movs	r2, #99	@ 0x63
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e000      	b.n	8005924 <detecta+0x484>
		goto no_ld_timepaf;
 8005922:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8005924:	4b75      	ldr	r3, [pc, #468]	@ (8005afc <detecta+0x65c>)
 8005926:	78db      	ldrb	r3, [r3, #3]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00f      	beq.n	800594c <detecta+0x4ac>
		goto detecta_j05;
 800592c:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 800592e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b20 <detecta+0x680>)
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 8005934:	4b71      	ldr	r3, [pc, #452]	@ (8005afc <detecta+0x65c>)
 8005936:	2200      	movs	r2, #0
 8005938:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 800593a:	4b73      	ldr	r3, [pc, #460]	@ (8005b08 <detecta+0x668>)
 800593c:	2200      	movs	r2, #0
 800593e:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 8005940:	4b78      	ldr	r3, [pc, #480]	@ (8005b24 <detecta+0x684>)
 8005942:	2200      	movs	r2, #0
 8005944:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8005946:	e01f      	b.n	8005988 <detecta+0x4e8>
		goto revnocman;
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	e000      	b.n	800594e <detecta+0x4ae>
	goto revnocman;
 800594c:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 800594e:	4b76      	ldr	r3, [pc, #472]	@ (8005b28 <detecta+0x688>)
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <detecta+0x4de>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 8005956:	4b67      	ldr	r3, [pc, #412]	@ (8005af4 <detecta+0x654>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <detecta+0x4d0>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 800595e:	4b64      	ldr	r3, [pc, #400]	@ (8005af0 <detecta+0x650>)
 8005960:	2249      	movs	r2, #73	@ 0x49
 8005962:	5c9b      	ldrb	r3, [r3, r2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <detecta+0x4d4>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 8005968:	4b63      	ldr	r3, [pc, #396]	@ (8005af8 <detecta+0x658>)
 800596a:	2201      	movs	r2, #1
 800596c:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 800596e:	e00b      	b.n	8005988 <detecta+0x4e8>
		goto cancelAlarmPA;
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	e000      	b.n	8005976 <detecta+0x4d6>
		goto cancelAlarmPA;
 8005974:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 8005976:	4b60      	ldr	r3, [pc, #384]	@ (8005af8 <detecta+0x658>)
 8005978:	2200      	movs	r2, #0
 800597a:	711a      	strb	r2, [r3, #4]
 800597c:	e004      	b.n	8005988 <detecta+0x4e8>
		goto ahorro_off;
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	e002      	b.n	8005988 <detecta+0x4e8>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	e000      	b.n	8005988 <detecta+0x4e8>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 8005986:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 8005988:	4b58      	ldr	r3, [pc, #352]	@ (8005aec <detecta+0x64c>)
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2201      	movs	r2, #1
 800598e:	4053      	eors	r3, r2
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <detecta+0x4fe>
	cntdpysp=0xF0;
 8005996:	4b65      	ldr	r3, [pc, #404]	@ (8005b2c <detecta+0x68c>)
 8005998:	22f0      	movs	r2, #240	@ 0xf0
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	e000      	b.n	80059a0 <detecta+0x500>
		goto ahorro_off_00;
 800599e:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 80059a0:	4b52      	ldr	r3, [pc, #328]	@ (8005aec <detecta+0x64c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 80059a6:	4b51      	ldr	r3, [pc, #324]	@ (8005aec <detecta+0x64c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 80059ac:	f7ff f8da 	bl	8004b64 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 80059b0:	f7ff f8fa 	bl	8004ba8 <load_tiempoAhorro2>
	goto fin_detecta;
 80059b4:	e047      	b.n	8005a46 <detecta+0x5a6>
		goto revbotones;
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	e002      	b.n	80059c0 <detecta+0x520>
	goto revbotones;
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	e000      	b.n	80059c0 <detecta+0x520>
	goto revbotones;
 80059be:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 80059c0:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <detecta+0x64c>)
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <detecta+0x542>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 80059c8:	f7fe faea 	bl	8003fa0 <tdev_to_Word>
 80059cc:	0003      	movs	r3, r0
 80059ce:	b21c      	sxth	r4, r3
 80059d0:	4b57      	ldr	r3, [pc, #348]	@ (8005b30 <detecta+0x690>)
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fe fafc 	bl	8003fd0 <TwoByteInArrayToWord>
 80059d8:	0003      	movs	r3, r0
 80059da:	b21b      	sxth	r3, r3
 80059dc:	429c      	cmp	r4, r3
 80059de:	dad0      	bge.n	8005982 <detecta+0x4e2>
ask_ahorro:
 80059e0:	e000      	b.n	80059e4 <detecta+0x544>
		goto ask_ahorro;
 80059e2:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 80059e4:	4b41      	ldr	r3, [pc, #260]	@ (8005aec <detecta+0x64c>)
 80059e6:	79db      	ldrb	r3, [r3, #7]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0cc      	beq.n	8005986 <detecta+0x4e6>
		goto ask_time_ahorro;
 80059ec:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 80059ee:	4b51      	ldr	r3, [pc, #324]	@ (8005b34 <detecta+0x694>)
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <detecta+0x568>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 80059f6:	f7ff f8d7 	bl	8004ba8 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 80059fa:	4b3c      	ldr	r3, [pc, #240]	@ (8005aec <detecta+0x64c>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8005a00:	4b3a      	ldr	r3, [pc, #232]	@ (8005aec <detecta+0x64c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8005a06:	e01e      	b.n	8005a46 <detecta+0x5a6>
		goto modoAhorro1_ON;
 8005a08:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8005a0a:	4b38      	ldr	r3, [pc, #224]	@ (8005aec <detecta+0x64c>)
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <detecta+0x57a>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8005a12:	4b46      	ldr	r3, [pc, #280]	@ (8005b2c <detecta+0x68c>)
 8005a14:	22f0      	movs	r2, #240	@ 0xf0
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e000      	b.n	8005a1c <detecta+0x57c>
		goto modoAhorro1_ON_2;
 8005a1a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8005a1c:	4b33      	ldr	r3, [pc, #204]	@ (8005aec <detecta+0x64c>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8005a22:	4b45      	ldr	r3, [pc, #276]	@ (8005b38 <detecta+0x698>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <detecta+0x5a4>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8005a2a:	4b30      	ldr	r3, [pc, #192]	@ (8005aec <detecta+0x64c>)
 8005a2c:	789b      	ldrb	r3, [r3, #2]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <detecta+0x59a>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8005a32:	4b3e      	ldr	r3, [pc, #248]	@ (8005b2c <detecta+0x68c>)
 8005a34:	22f0      	movs	r2, #240	@ 0xf0
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e000      	b.n	8005a3c <detecta+0x59c>
		goto modoAhorro1_ON_3;
 8005a3a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <detecta+0x64c>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	709a      	strb	r2, [r3, #2]
 8005a42:	e000      	b.n	8005a46 <detecta+0x5a6>
		goto fin_detecta;
 8005a44:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8005a46:	1cbb      	adds	r3, r7, #2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e013      	b.n	8005a76 <detecta+0x5d6>
		btn_pr[k] = 0;
 8005a4e:	1cbb      	adds	r3, r7, #2
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	4a3a      	ldr	r2, [pc, #232]	@ (8005b3c <detecta+0x69c>)
 8005a54:	2100      	movs	r1, #0
 8005a56:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8005a58:	1cbb      	adds	r3, r7, #2
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4a38      	ldr	r2, [pc, #224]	@ (8005b40 <detecta+0x6a0>)
 8005a5e:	2100      	movs	r1, #0
 8005a60:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8005a62:	1cbb      	adds	r3, r7, #2
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	4a37      	ldr	r2, [pc, #220]	@ (8005b44 <detecta+0x6a4>)
 8005a68:	2100      	movs	r1, #0
 8005a6a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8005a6c:	1cbb      	adds	r3, r7, #2
 8005a6e:	781a      	ldrb	r2, [r3, #0]
 8005a70:	1cbb      	adds	r3, r7, #2
 8005a72:	3201      	adds	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	1cbb      	adds	r3, r7, #2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d9e7      	bls.n	8005a4e <detecta+0x5ae>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8005a7e:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <detecta+0x680>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d117      	bne.n	8005ab6 <detecta+0x616>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8005a86:	4b30      	ldr	r3, [pc, #192]	@ (8005b48 <detecta+0x6a8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4053      	eors	r3, r2
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d112      	bne.n	8005aba <detecta+0x61a>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8005a94:	4b2c      	ldr	r3, [pc, #176]	@ (8005b48 <detecta+0x6a8>)
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4053      	eors	r3, r2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <detecta+0x61e>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8005b4c <detecta+0x6ac>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <detecta+0x612>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8005aaa:	4b26      	ldr	r3, [pc, #152]	@ (8005b44 <detecta+0x6a4>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8005ab0:	e141      	b.n	8005d36 <detecta+0x896>
		goto findet_jp;
 8005ab2:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8005ab4:	e13f      	b.n	8005d36 <detecta+0x896>
		goto no2btn;
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	e002      	b.n	8005ac0 <detecta+0x620>
		goto no2btn;
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	e000      	b.n	8005ac0 <detecta+0x620>
		goto no2btn;
 8005abe:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8005ac0:	4b22      	ldr	r3, [pc, #136]	@ (8005b4c <detecta+0x6ac>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b95      	cmp	r3, #149	@ 0x95
 8005ac6:	d843      	bhi.n	8005b50 <detecta+0x6b0>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8005ac8:	4b20      	ldr	r3, [pc, #128]	@ (8005b4c <detecta+0x6ac>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	3303      	adds	r3, #3
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b4c <detecta+0x6ac>)
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e03d      	b.n	8005b52 <detecta+0x6b2>
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	200001ec 	.word	0x200001ec
 8005adc:	20000200 	.word	0x20000200
 8005ae0:	200010d8 	.word	0x200010d8
 8005ae4:	200010ec 	.word	0x200010ec
 8005ae8:	20000be1 	.word	0x20000be1
 8005aec:	20000c5c 	.word	0x20000c5c
 8005af0:	200000bc 	.word	0x200000bc
 8005af4:	20000c47 	.word	0x20000c47
 8005af8:	20000ba8 	.word	0x20000ba8
 8005afc:	20000b98 	.word	0x20000b98
 8005b00:	20000bd8 	.word	0x20000bd8
 8005b04:	20000bd7 	.word	0x20000bd7
 8005b08:	20000bb0 	.word	0x20000bb0
 8005b0c:	20001086 	.word	0x20001086
 8005b10:	200010d0 	.word	0x200010d0
 8005b14:	20000b8a 	.word	0x20000b8a
 8005b18:	2000034c 	.word	0x2000034c
 8005b1c:	0803f000 	.word	0x0803f000
 8005b20:	20000c08 	.word	0x20000c08
 8005b24:	20000c64 	.word	0x20000c64
 8005b28:	20000b86 	.word	0x20000b86
 8005b2c:	20000be2 	.word	0x20000be2
 8005b30:	200000e5 	.word	0x200000e5
 8005b34:	20000c50 	.word	0x20000c50
 8005b38:	20000c52 	.word	0x20000c52
 8005b3c:	20000c10 	.word	0x20000c10
 8005b40:	20000bbc 	.word	0x20000bbc
 8005b44:	20000c38 	.word	0x20000c38
 8005b48:	20000ca4 	.word	0x20000ca4
 8005b4c:	20000c36 	.word	0x20000c36
		goto ask_btn2_f3;
 8005b50:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8005b52:	4b9e      	ldr	r3, [pc, #632]	@ (8005dcc <detecta+0x92c>)
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <detecta+0x6e4>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8005b5a:	4b9d      	ldr	r3, [pc, #628]	@ (8005dd0 <detecta+0x930>)
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4053      	eors	r3, r2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10f      	bne.n	8005b88 <detecta+0x6e8>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8005b68:	4b9a      	ldr	r3, [pc, #616]	@ (8005dd4 <detecta+0x934>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d117      	bne.n	8005ba0 <detecta+0x700>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8005b70:	4b99      	ldr	r3, [pc, #612]	@ (8005dd8 <detecta+0x938>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8005b76:	4b99      	ldr	r3, [pc, #612]	@ (8005ddc <detecta+0x93c>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8005b7c:	4b95      	ldr	r3, [pc, #596]	@ (8005dd4 <detecta+0x934>)
 8005b7e:	221e      	movs	r2, #30
 8005b80:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8005b82:	e797      	b.n	8005ab4 <detecta+0x614>
		goto noBtn2F3;
 8005b84:	46c0      	nop			@ (mov r8, r8)
 8005b86:	e000      	b.n	8005b8a <detecta+0x6ea>
		goto noBtn2F3;
 8005b88:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 8005b8a:	4b92      	ldr	r3, [pc, #584]	@ (8005dd4 <detecta+0x934>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b1d      	cmp	r3, #29
 8005b90:	d808      	bhi.n	8005ba4 <detecta+0x704>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8005b92:	4b90      	ldr	r3, [pc, #576]	@ (8005dd4 <detecta+0x934>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b8e      	ldr	r3, [pc, #568]	@ (8005dd4 <detecta+0x934>)
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <detecta+0x706>
		goto ask_btn1;
 8005ba0:	46c0      	nop			@ (mov r8, r8)
 8005ba2:	e000      	b.n	8005ba6 <detecta+0x706>
		goto ask_btn1;
 8005ba4:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8005ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8005dd0 <detecta+0x930>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2201      	movs	r2, #1
 8005bac:	4053      	eors	r3, r2
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d12a      	bne.n	8005c0a <detecta+0x76a>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8005bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8005de0 <detecta+0x940>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <detecta+0x72a>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8005bbc:	4b89      	ldr	r3, [pc, #548]	@ (8005de4 <detecta+0x944>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8005bc2:	4b89      	ldr	r3, [pc, #548]	@ (8005de8 <detecta+0x948>)
 8005bc4:	2214      	movs	r2, #20
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e000      	b.n	8005bcc <detecta+0x72c>
		goto ask_btn1_sec;
 8005bca:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8005bcc:	4b7f      	ldr	r3, [pc, #508]	@ (8005dcc <detecta+0x92c>)
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4053      	eors	r3, r2
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d107      	bne.n	8005bea <detecta+0x74a>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 8005bda:	4b84      	ldr	r3, [pc, #528]	@ (8005dec <detecta+0x94c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b6e      	cmp	r3, #110	@ 0x6e
 8005be0:	d822      	bhi.n	8005c28 <detecta+0x788>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8005be2:	4b80      	ldr	r3, [pc, #512]	@ (8005de4 <detecta+0x944>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	705a      	strb	r2, [r3, #1]
	goto findet;
 8005be8:	e0a5      	b.n	8005d36 <detecta+0x896>
		goto func_sec_norm_btn1;
 8005bea:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8005bec:	4b80      	ldr	r3, [pc, #512]	@ (8005df0 <detecta+0x950>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11b      	bne.n	8005c2c <detecta+0x78c>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8005bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8005dec <detecta+0x94c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d119      	bne.n	8005c30 <detecta+0x790>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8005bfc:	4b79      	ldr	r3, [pc, #484]	@ (8005de4 <detecta+0x944>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8005c02:	4b7b      	ldr	r3, [pc, #492]	@ (8005df0 <detecta+0x950>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8005c08:	e095      	b.n	8005d36 <detecta+0x896>
		goto no_btn1;
 8005c0a:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8005c0c:	4b78      	ldr	r3, [pc, #480]	@ (8005df0 <detecta+0x950>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8005c12:	4b76      	ldr	r3, [pc, #472]	@ (8005dec <detecta+0x94c>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b95      	cmp	r3, #149	@ 0x95
 8005c18:	d80c      	bhi.n	8005c34 <detecta+0x794>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 8005c1a:	4b74      	ldr	r3, [pc, #464]	@ (8005dec <detecta+0x94c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3303      	adds	r3, #3
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b72      	ldr	r3, [pc, #456]	@ (8005dec <detecta+0x94c>)
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e006      	b.n	8005c36 <detecta+0x796>
		goto ask_btn2;
 8005c28:	46c0      	nop			@ (mov r8, r8)
 8005c2a:	e004      	b.n	8005c36 <detecta+0x796>
		goto ask_btn2;
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	e002      	b.n	8005c36 <detecta+0x796>
		goto ask_btn2;
 8005c30:	46c0      	nop			@ (mov r8, r8)
 8005c32:	e000      	b.n	8005c36 <detecta+0x796>
		goto ask_btn2;
 8005c34:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 8005c36:	4b66      	ldr	r3, [pc, #408]	@ (8005dd0 <detecta+0x930>)
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	4053      	eors	r3, r2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11a      	bne.n	8005c7a <detecta+0x7da>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8005c44:	4b66      	ldr	r3, [pc, #408]	@ (8005de0 <detecta+0x940>)
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <detecta+0x7ba>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8005c4c:	4b65      	ldr	r3, [pc, #404]	@ (8005de4 <detecta+0x944>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8005c52:	4b65      	ldr	r3, [pc, #404]	@ (8005de8 <detecta+0x948>)
 8005c54:	2214      	movs	r2, #20
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e000      	b.n	8005c5c <detecta+0x7bc>
		goto ask_btn2_sec;
 8005c5a:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 8005c5c:	4b64      	ldr	r3, [pc, #400]	@ (8005df0 <detecta+0x950>)
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d119      	bne.n	8005c98 <detecta+0x7f8>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 8005c64:	4b63      	ldr	r3, [pc, #396]	@ (8005df4 <detecta+0x954>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d117      	bne.n	8005c9c <detecta+0x7fc>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8005c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005de4 <detecta+0x944>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8005c72:	4b5f      	ldr	r3, [pc, #380]	@ (8005df0 <detecta+0x950>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	709a      	strb	r2, [r3, #2]
	goto findet;
 8005c78:	e05d      	b.n	8005d36 <detecta+0x896>
		goto no_btn2;
 8005c7a:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8005c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005df0 <detecta+0x950>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8005c82:	4b5c      	ldr	r3, [pc, #368]	@ (8005df4 <detecta+0x954>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b95      	cmp	r3, #149	@ 0x95
 8005c88:	d80a      	bhi.n	8005ca0 <detecta+0x800>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 8005c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8005df4 <detecta+0x954>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	3303      	adds	r3, #3
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b58      	ldr	r3, [pc, #352]	@ (8005df4 <detecta+0x954>)
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e004      	b.n	8005ca2 <detecta+0x802>
		goto ask_btn3;
 8005c98:	46c0      	nop			@ (mov r8, r8)
 8005c9a:	e002      	b.n	8005ca2 <detecta+0x802>
		goto ask_btn3;
 8005c9c:	46c0      	nop			@ (mov r8, r8)
 8005c9e:	e000      	b.n	8005ca2 <detecta+0x802>
		goto ask_btn3;
 8005ca0:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8005ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8005dd0 <detecta+0x930>)
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4053      	eors	r3, r2
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d12a      	bne.n	8005d06 <detecta+0x866>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <detecta+0x940>)
 8005cb2:	789b      	ldrb	r3, [r3, #2]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <detecta+0x826>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8005cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005de4 <detecta+0x944>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8005cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8005de8 <detecta+0x948>)
 8005cc0:	2214      	movs	r2, #20
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	e000      	b.n	8005cc8 <detecta+0x828>
		goto ask_btn3_sec;
 8005cc6:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8005cc8:	4b40      	ldr	r3, [pc, #256]	@ (8005dcc <detecta+0x92c>)
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4053      	eors	r3, r2
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d107      	bne.n	8005ce6 <detecta+0x846>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8005cd6:	4b48      	ldr	r3, [pc, #288]	@ (8005df8 <detecta+0x958>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b6e      	cmp	r3, #110	@ 0x6e
 8005cdc:	d824      	bhi.n	8005d28 <detecta+0x888>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8005cde:	4b41      	ldr	r3, [pc, #260]	@ (8005de4 <detecta+0x944>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	715a      	strb	r2, [r3, #5]
	goto findet;
 8005ce4:	e027      	b.n	8005d36 <detecta+0x896>
		goto func_sec_norm_btn3;
 8005ce6:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8005ce8:	4b41      	ldr	r3, [pc, #260]	@ (8005df0 <detecta+0x950>)
 8005cea:	791b      	ldrb	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11d      	bne.n	8005d2c <detecta+0x88c>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8005cf0:	4b41      	ldr	r3, [pc, #260]	@ (8005df8 <detecta+0x958>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11b      	bne.n	8005d30 <detecta+0x890>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8005cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8005de4 <detecta+0x944>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8005cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8005df0 <detecta+0x950>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8005d04:	e017      	b.n	8005d36 <detecta+0x896>
		goto no_btn3;
 8005d06:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8005d08:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <detecta+0x950>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005df8 <detecta+0x958>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b95      	cmp	r3, #149	@ 0x95
 8005d14:	d80e      	bhi.n	8005d34 <detecta+0x894>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 8005d16:	4b38      	ldr	r3, [pc, #224]	@ (8005df8 <detecta+0x958>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	3303      	adds	r3, #3
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b36      	ldr	r3, [pc, #216]	@ (8005df8 <detecta+0x958>)
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e008      	b.n	8005d36 <detecta+0x896>
	goto findet;
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	e006      	b.n	8005d36 <detecta+0x896>
		goto ask_btn4;
 8005d28:	46c0      	nop			@ (mov r8, r8)
 8005d2a:	e004      	b.n	8005d36 <detecta+0x896>
		goto ask_btn4;
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	e002      	b.n	8005d36 <detecta+0x896>
		goto ask_btn4;
 8005d30:	46c0      	nop			@ (mov r8, r8)
 8005d32:	e000      	b.n	8005d36 <detecta+0x896>
		goto ask_btn4;
 8005d34:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 8005d36:	1c7b      	adds	r3, r7, #1
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e00c      	b.n	8005d58 <detecta+0x8b8>
		Botones_COPY[k] = Botones_T[k];
 8005d3e:	1c7b      	adds	r3, r7, #1
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	1c7b      	adds	r3, r7, #1
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	4922      	ldr	r1, [pc, #136]	@ (8005dd0 <detecta+0x930>)
 8005d48:	5c89      	ldrb	r1, [r1, r2]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	@ (8005de0 <detecta+0x940>)
 8005d4c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8005d4e:	1c7b      	adds	r3, r7, #1
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	1c7b      	adds	r3, r7, #1
 8005d54:	3201      	adds	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	1c7b      	adds	r3, r7, #1
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b07      	cmp	r3, #7
 8005d5e:	d9ee      	bls.n	8005d3e <detecta+0x89e>
	if(!flagsb[f_prog]){
 8005d60:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <detecta+0x92c>)
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2201      	movs	r2, #1
 8005d66:	4053      	eors	r3, r2
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11a      	bne.n	8005da4 <detecta+0x904>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8005d6e:	003b      	movs	r3, r7
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e011      	b.n	8005d9a <detecta+0x8fa>
		btn_pr[k] = botonst[k];
 8005d76:	003b      	movs	r3, r7
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	003b      	movs	r3, r7
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	4919      	ldr	r1, [pc, #100]	@ (8005de4 <detecta+0x944>)
 8005d80:	5c89      	ldrb	r1, [r1, r2]
 8005d82:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <detecta+0x95c>)
 8005d84:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8005d86:	003b      	movs	r3, r7
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	@ (8005de4 <detecta+0x944>)
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8005d90:	003b      	movs	r3, r7
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	003b      	movs	r3, r7
 8005d96:	3201      	adds	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	003b      	movs	r3, r7
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b07      	cmp	r3, #7
 8005da0:	d9e9      	bls.n	8005d76 <detecta+0x8d6>
	}

det_j18:
 8005da2:	e000      	b.n	8005da6 <detecta+0x906>
		goto det_j18;
 8005da4:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8005da6:	4b16      	ldr	r3, [pc, #88]	@ (8005e00 <detecta+0x960>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2201      	movs	r2, #1
 8005dac:	4053      	eors	r3, r2
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <detecta+0x922>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8005db4:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <detecta+0x944>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <detecta+0x944>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8005dc0:	e000      	b.n	8005dc4 <detecta+0x924>
		goto det_j19;
 8005dc2:	46c0      	nop			@ (mov r8, r8)
}
 8005dc4:	46c0      	nop			@ (mov r8, r8)
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b003      	add	sp, #12
 8005dca:	bd90      	pop	{r4, r7, pc}
 8005dcc:	20000c08 	.word	0x20000c08
 8005dd0:	20000ca4 	.word	0x20000ca4
 8005dd4:	200010c4 	.word	0x200010c4
 8005dd8:	20000c38 	.word	0x20000c38
 8005ddc:	20000c5c 	.word	0x20000c5c
 8005de0:	20000c28 	.word	0x20000c28
 8005de4:	20000bbc 	.word	0x20000bbc
 8005de8:	200010bd 	.word	0x200010bd
 8005dec:	20000c30 	.word	0x20000c30
 8005df0:	20000bf0 	.word	0x20000bf0
 8005df4:	20000c31 	.word	0x20000c31
 8005df8:	20000c32 	.word	0x20000c32
 8005dfc:	20000c10 	.word	0x20000c10
 8005e00:	200010c8 	.word	0x200010c8

08005e04 <display>:





void display (void){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0

    asm ("nop");
 8005e0a:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 8005e0c:	4bc5      	ldr	r3, [pc, #788]	@ (8006124 <display+0x320>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d100      	bne.n	8005e16 <display+0x12>
 8005e14:	e08f      	b.n	8005f36 <display+0x132>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 8005e16:	4bc4      	ldr	r3, [pc, #784]	@ (8006128 <display+0x324>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <display+0x36>
		goto display_00;
	}
	if(flagsTX [7] == 0){
 8005e1e:	4bc3      	ldr	r3, [pc, #780]	@ (800612c <display+0x328>)
 8005e20:	79db      	ldrb	r3, [r3, #7]
 8005e22:	2201      	movs	r2, #1
 8005e24:	4053      	eors	r3, r2
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d108      	bne.n	8005e3e <display+0x3a>
		goto display_00;
	}
	op_menu (0x0B, 0x11);
 8005e2c:	2111      	movs	r1, #17
 8005e2e:	200b      	movs	r0, #11
 8005e30:	f7ff f990 	bl	8005154 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8005e34:	f7ff f9a8 	bl	8005188 <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 8005e38:	e01f      	b.n	8005e7a <display+0x76>
		goto display_00;
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	e000      	b.n	8005e40 <display+0x3c>
		goto display_00;
 8005e3e:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(eeEstado1, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8005e40:	4bbb      	ldr	r3, [pc, #748]	@ (8006130 <display+0x32c>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	001a      	movs	r2, r3
 8005e46:	2301      	movs	r3, #1
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d106      	bne.n	8005e5a <display+0x56>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 8005e4c:	2110      	movs	r1, #16
 8005e4e:	2011      	movs	r0, #17
 8005e50:	f7ff f980 	bl	8005154 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 8005e54:	f7ff f998 	bl	8005188 <datled_clear>
 8005e58:	e000      	b.n	8005e5c <display+0x58>
		goto display_00b;
 8005e5a:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 8005e5c:	4bb5      	ldr	r3, [pc, #724]	@ (8006134 <display+0x330>)
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4053      	eors	r3, r2
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <display+0x74>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 8005e6a:	211d      	movs	r1, #29
 8005e6c:	201f      	movs	r0, #31
 8005e6e:	f7ff f971 	bl	8005154 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 8005e72:	f7ff f989 	bl	8005188 <datled_clear>
 8005e76:	e000      	b.n	8005e7a <display+0x76>
		goto display_01;
 8005e78:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 8005e7a:	4baf      	ldr	r3, [pc, #700]	@ (8006138 <display+0x334>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d05b      	beq.n	8005f3a <display+0x136>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 8005e82:	4bad      	ldr	r3, [pc, #692]	@ (8006138 <display+0x334>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e88:	d900      	bls.n	8005e8c <display+0x88>
 8005e8a:	e0a1      	b.n	8005fd0 <display+0x1cc>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 8005e8c:	4baa      	ldr	r3, [pc, #680]	@ (8006138 <display+0x334>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b31      	cmp	r3, #49	@ 0x31
 8005e92:	d800      	bhi.n	8005e96 <display+0x92>
 8005e94:	e09e      	b.n	8005fd4 <display+0x1d0>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 8005e96:	f7ff f977 	bl	8005188 <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 8005e9a:	4ba8      	ldr	r3, [pc, #672]	@ (800613c <display+0x338>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d110      	bne.n	8005ec4 <display+0xc0>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 8005ea2:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 8005ea4:	2110      	movs	r1, #16
 8005ea6:	2011      	movs	r0, #17
 8005ea8:	f7ff f954 	bl	8005154 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(eeEstado1, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8005eac:	4ba0      	ldr	r3, [pc, #640]	@ (8006130 <display+0x32c>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <display+0xbc>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 8005eb8:	4ba1      	ldr	r3, [pc, #644]	@ (8006140 <display+0x33c>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8005ebe:	e0a2      	b.n	8006006 <display+0x202>
		goto msg1_01;
 8005ec0:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8005ec2:	e0a0      	b.n	8006006 <display+0x202>
		goto askMsg2; //jrne		askMsg2
 8005ec4:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8005ec6:	4b9d      	ldr	r3, [pc, #628]	@ (800613c <display+0x338>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d110      	bne.n	8005ef0 <display+0xec>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8005ece:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	2011      	movs	r0, #17
 8005ed4:	f7ff f93e 	bl	8005154 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(eeEstado1, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 8005ed8:	4b95      	ldr	r3, [pc, #596]	@ (8006130 <display+0x32c>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	001a      	movs	r2, r3
 8005ede:	2304      	movs	r3, #4
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d003      	beq.n	8005eec <display+0xe8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8005ee4:	4b97      	ldr	r3, [pc, #604]	@ (8006144 <display+0x340>)
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 8005eea:	e08c      	b.n	8006006 <display+0x202>
		goto	msg2_01;
 8005eec:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8005eee:	e08a      	b.n	8006006 <display+0x202>
		goto askMsg3; //jrne		askMsg3
 8005ef0:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8005ef2:	4b92      	ldr	r3, [pc, #584]	@ (800613c <display+0x338>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d110      	bne.n	8005f1c <display+0x118>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 8005efa:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8005efc:	2100      	movs	r1, #0
 8005efe:	2011      	movs	r0, #17
 8005f00:	f7ff f928 	bl	8005154 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(eeEstado1, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 8005f04:	4b8a      	ldr	r3, [pc, #552]	@ (8006130 <display+0x32c>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	001a      	movs	r2, r3
 8005f0a:	2340      	movs	r3, #64	@ 0x40
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d103      	bne.n	8005f18 <display+0x114>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8005f10:	4b8b      	ldr	r3, [pc, #556]	@ (8006140 <display+0x33c>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 8005f16:	e076      	b.n	8006006 <display+0x202>
		goto msg3_01;
 8005f18:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 8005f1a:	e074      	b.n	8006006 <display+0x202>
		goto askMsg4;  //jrne askMsg4
 8005f1c:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8005f1e:	4b87      	ldr	r3, [pc, #540]	@ (800613c <display+0x338>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d105      	bne.n	8005f32 <display+0x12e>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 8005f26:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 8005f28:	211d      	movs	r1, #29
 8005f2a:	201f      	movs	r0, #31
 8005f2c:	f7ff f912 	bl	8005154 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8005f30:	e069      	b.n	8006006 <display+0x202>
		goto askMsg5;  //jrne		askMsg5
 8005f32:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 8005f34:	e067      	b.n	8006006 <display+0x202>
		goto display_02;
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	e000      	b.n	8005f3c <display+0x138>
		goto display_02;//jreq		display_02;
 8005f3a:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8005f3c:	f7fd fae0 	bl	8003500 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8005f40:	4b78      	ldr	r3, [pc, #480]	@ (8006124 <display+0x320>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d018      	beq.n	8005f7a <display+0x176>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 8005f48:	4b7f      	ldr	r3, [pc, #508]	@ (8006148 <display+0x344>)
 8005f4a:	79db      	ldrb	r3, [r3, #7]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	4053      	eors	r3, r2
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d113      	bne.n	8005f7e <display+0x17a>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 8005f56:	210a      	movs	r1, #10
 8005f58:	200a      	movs	r0, #10
 8005f5a:	f7ff f8fb 	bl	8005154 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 8005f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800614c <display+0x348>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	001a      	movs	r2, r3
 8005f66:	2340      	movs	r3, #64	@ 0x40
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d104      	bne.n	8005f76 <display+0x172>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 8005f6c:	211f      	movs	r1, #31
 8005f6e:	201f      	movs	r0, #31
 8005f70:	f7ff f8f0 	bl	8005154 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 8005f74:	e047      	b.n	8006006 <display+0x202>
    	goto blk_aa;
 8005f76:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 8005f78:	e045      	b.n	8006006 <display+0x202>
    	goto display_norm3; //jreq		display_norm3;
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	e000      	b.n	8005f80 <display+0x17c>
    	goto display_norm3;
 8005f7e:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 8005f80:	4b6c      	ldr	r3, [pc, #432]	@ (8006134 <display+0x330>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	4053      	eors	r3, r2
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d02c      	beq.n	8005fe8 <display+0x1e4>
    	  goto display_j00;
 8005f8e:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 8005f90:	4b6f      	ldr	r3, [pc, #444]	@ (8006150 <display+0x34c>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d019      	beq.n	8005fcc <display+0x1c8>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 8005f98:	4b6d      	ldr	r3, [pc, #436]	@ (8006150 <display+0x34c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f9e:	d81b      	bhi.n	8005fd8 <display+0x1d4>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8006150 <display+0x34c>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b95      	cmp	r3, #149	@ 0x95
 8005fa6:	d902      	bls.n	8005fae <display+0x1aa>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 8005fa8:	f7fe f88c 	bl	80040c4 <sp_dpy>
      	  goto dpy07;
 8005fac:	e02b      	b.n	8006006 <display+0x202>
    	  goto dpydif;//jrult dpydif
 8005fae:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 8005fb0:	4b67      	ldr	r3, [pc, #412]	@ (8006150 <display+0x34c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b63      	cmp	r3, #99	@ 0x63
 8005fb6:	d811      	bhi.n	8005fdc <display+0x1d8>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 8005fb8:	4b65      	ldr	r3, [pc, #404]	@ (8006150 <display+0x34c>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b31      	cmp	r3, #49	@ 0x31
 8005fbe:	d90f      	bls.n	8005fe0 <display+0x1dc>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8005fc0:	f7fe f88c 	bl	80040dc <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8005fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8006140 <display+0x33c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 8005fca:	e01c      	b.n	8006006 <display+0x202>
    	  goto dpy02;//jreq		dpy02;
 8005fcc:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 8005fce:	e00c      	b.n	8005fea <display+0x1e6>
		goto dpy03; //************** ?
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	e006      	b.n	8005fe2 <display+0x1de>
		goto dpy03;
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	e004      	b.n	8005fe2 <display+0x1de>
    	  goto dpy03;//jruge		dpy03;
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	e002      	b.n	8005fe2 <display+0x1de>
    	 goto dpy03;//jruge		dpy03;
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	e000      	b.n	8005fe2 <display+0x1de>
    	 goto dpy03;//jrult		dpy03;
 8005fe0:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8005fe2:	f7fe fbfb 	bl	80047dc <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 8005fe6:	e00e      	b.n	8006006 <display+0x202>
      goto dpy06;//jra dpy06;
 8005fe8:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 8005fea:	4b57      	ldr	r3, [pc, #348]	@ (8006148 <display+0x344>)
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <display+0x1fc>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8005ff2:	4b58      	ldr	r3, [pc, #352]	@ (8006154 <display+0x350>)
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <display+0x200>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 8005ffa:	f7fe fa8f 	bl	800451c <fallas>
 8005ffe:	e002      	b.n	8006006 <display+0x202>
	   goto dpy07;
 8006000:	46c0      	nop			@ (mov r8, r8)
 8006002:	e000      	b.n	8006006 <display+0x202>
	   goto dpy07;
 8006004:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 8006006:	4b54      	ldr	r3, [pc, #336]	@ (8006158 <display+0x354>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	001a      	movs	r2, r3
 800600c:	4b53      	ldr	r3, [pc, #332]	@ (800615c <display+0x358>)
 800600e:	5c9a      	ldrb	r2, [r3, r2]
 8006010:	4b53      	ldr	r3, [pc, #332]	@ (8006160 <display+0x35c>)
 8006012:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <display+0x340>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	001a      	movs	r2, r3
 800601a:	4b50      	ldr	r3, [pc, #320]	@ (800615c <display+0x358>)
 800601c:	5c9a      	ldrb	r2, [r3, r2]
 800601e:	4b51      	ldr	r3, [pc, #324]	@ (8006164 <display+0x360>)
 8006020:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 8006022:	230f      	movs	r3, #15
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e011      	b.n	8006050 <display+0x24c>
			if(trefst[k] ){ //tnz  trefst ***************??
 800602c:	210f      	movs	r1, #15
 800602e:	187b      	adds	r3, r7, r1
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4a4d      	ldr	r2, [pc, #308]	@ (8006168 <display+0x364>)
 8006034:	5cd3      	ldrb	r3, [r2, r3]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d113      	bne.n	8006062 <display+0x25e>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 800603a:	187b      	adds	r3, r7, r1
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	4a4b      	ldr	r2, [pc, #300]	@ (800616c <display+0x368>)
 8006040:	5cd3      	ldrb	r3, [r2, r3]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <display+0x262>
		for(uint8_t k=0; k<8; k++){
 8006046:	187b      	adds	r3, r7, r1
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	187b      	adds	r3, r7, r1
 800604c:	3201      	adds	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	230f      	movs	r3, #15
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b07      	cmp	r3, #7
 8006058:	d9e8      	bls.n	800602c <display+0x228>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 800605a:	4b45      	ldr	r3, [pc, #276]	@ (8006170 <display+0x36c>)
 800605c:	2200      	movs	r2, #0
 800605e:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 8006060:	e00d      	b.n	800607e <display+0x27a>
				goto ask_snooze; //jrne	ask_snooze
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	e000      	b.n	8006068 <display+0x264>
				goto ask_snooze;  //jrne	ask_snooze
 8006066:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 8006068:	4b42      	ldr	r3, [pc, #264]	@ (8006174 <display+0x370>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2201      	movs	r2, #1
 800606e:	4053      	eors	r3, r2
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <display+0x278>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 8006076:	f7fe fec7 	bl	8004e08 <ld_alarmDelay>
 800607a:	e000      	b.n	800607e <display+0x27a>
			goto noLoadSnooze;
 800607c:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 800607e:	4b3c      	ldr	r3, [pc, #240]	@ (8006170 <display+0x36c>)
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <display+0x28a>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 8006086:	4b3c      	ldr	r3, [pc, #240]	@ (8006178 <display+0x374>)
 8006088:	2201      	movs	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e000      	b.n	8006090 <display+0x28c>
			goto no_snooze;//jreq no_snooze
 800608e:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 8006090:	4b3a      	ldr	r3, [pc, #232]	@ (800617c <display+0x378>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <display+0x2b2>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 8006098:	4b37      	ldr	r3, [pc, #220]	@ (8006178 <display+0x374>)
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <display+0x2ae>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80060a0:	4b37      	ldr	r3, [pc, #220]	@ (8006180 <display+0x37c>)
 80060a2:	2104      	movs	r1, #4
 80060a4:	0018      	movs	r0, r3
 80060a6:	f00f fdbb 	bl	8015c20 <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 80060aa:	4b33      	ldr	r3, [pc, #204]	@ (8006178 <display+0x374>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 80060b0:	e184      	b.n	80063bc <display+0x5b8>
			goto jp_termina_buzzer;
 80060b2:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 80060b4:	e182      	b.n	80063bc <display+0x5b8>
			goto noBtnBuzz; //jreq noBtnBuzz
 80060b6:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 80060b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <display+0x374>)
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2201      	movs	r2, #1
 80060be:	4053      	eors	r3, r2
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d113      	bne.n	80060ee <display+0x2ea>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 80060c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006184 <display+0x380>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 80060cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006188 <display+0x384>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 80060d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <display+0x37c>)
 80060d4:	2104      	movs	r1, #4
 80060d6:	0018      	movs	r0, r3
 80060d8:	f00f fe84 	bl	8015de4 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 80060dc:	4b2b      	ldr	r3, [pc, #172]	@ (800618c <display+0x388>)
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006190 <display+0x38c>)
 80060e2:	4694      	mov	ip, r2
 80060e4:	4463      	add	r3, ip
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <display+0x390>)
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	e000      	b.n	80060f0 <display+0x2ec>
			goto noBtnBuzz_01;
 80060ee:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 80060f0:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <display+0x374>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 80060f6:	4b20      	ldr	r3, [pc, #128]	@ (8006178 <display+0x374>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d14c      	bne.n	8006198 <display+0x394>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 80060fe:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <display+0x380>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <display+0x384>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800610a:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <display+0x37c>)
 800610c:	2104      	movs	r1, #4
 800610e:	0018      	movs	r0, r3
 8006110:	f00f fe68 	bl	8015de4 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 8006114:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <display+0x388>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	3364      	adds	r3, #100	@ 0x64
 800611a:	b29a      	uxth	r2, r3
 800611c:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <display+0x390>)
 800611e:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 8006120:	e14c      	b.n	80063bc <display+0x5b8>
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	20000bb8 	.word	0x20000bb8
 8006128:	200010c8 	.word	0x200010c8
 800612c:	20000e3c 	.word	0x20000e3c
 8006130:	20000387 	.word	0x20000387
 8006134:	20000b98 	.word	0x20000b98
 8006138:	20001084 	.word	0x20001084
 800613c:	20001085 	.word	0x20001085
 8006140:	20000bb0 	.word	0x20000bb0
 8006144:	20000b72 	.word	0x20000b72
 8006148:	20000bf8 	.word	0x20000bf8
 800614c:	20000b6e 	.word	0x20000b6e
 8006150:	20000be2 	.word	0x20000be2
 8006154:	20000c08 	.word	0x20000c08
 8006158:	20000b73 	.word	0x20000b73
 800615c:	20000010 	.word	0x20000010
 8006160:	20000c99 	.word	0x20000c99
 8006164:	20000c9a 	.word	0x20000c9a
 8006168:	20000ba8 	.word	0x20000ba8
 800616c:	20000ba0 	.word	0x20000ba0
 8006170:	20000fc0 	.word	0x20000fc0
 8006174:	20000bbc 	.word	0x20000bbc
 8006178:	20000fb8 	.word	0x20000fb8
 800617c:	200010bd 	.word	0x200010bd
 8006180:	200005e0 	.word	0x200005e0
 8006184:	20000fb0 	.word	0x20000fb0
 8006188:	20000fa8 	.word	0x20000fa8
 800618c:	20000fa4 	.word	0x20000fa4
 8006190:	00001388 	.word	0x00001388
 8006194:	20000fa6 	.word	0x20000fa6
			goto buzzer_0;
 8006198:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 800619a:	4bca      	ldr	r3, [pc, #808]	@ (80064c4 <display+0x6c0>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 80061a0:	4bc9      	ldr	r3, [pc, #804]	@ (80064c8 <display+0x6c4>)
 80061a2:	79db      	ldrb	r3, [r3, #7]
 80061a4:	2201      	movs	r2, #1
 80061a6:	4053      	eors	r3, r2
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <display+0x3b2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80061ae:	4bc5      	ldr	r3, [pc, #788]	@ (80064c4 <display+0x6c0>)
 80061b0:	2202      	movs	r2, #2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e000      	b.n	80061b8 <display+0x3b4>
			goto buzzer_activado_04;
 80061b6:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 80061b8:	4bc3      	ldr	r3, [pc, #780]	@ (80064c8 <display+0x6c4>)
 80061ba:	799b      	ldrb	r3, [r3, #6]
 80061bc:	2201      	movs	r2, #1
 80061be:	4053      	eors	r3, r2
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <display+0x3ca>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80061c6:	4bbf      	ldr	r3, [pc, #764]	@ (80064c4 <display+0x6c0>)
 80061c8:	2202      	movs	r2, #2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e000      	b.n	80061d0 <display+0x3cc>
			goto buzzer_activado_05;
 80061ce:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 80061d0:	4bbe      	ldr	r3, [pc, #760]	@ (80064cc <display+0x6c8>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2201      	movs	r2, #1
 80061d6:	4053      	eors	r3, r2
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <display+0x3e2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80061de:	4bb9      	ldr	r3, [pc, #740]	@ (80064c4 <display+0x6c0>)
 80061e0:	2202      	movs	r2, #2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	e000      	b.n	80061e8 <display+0x3e4>
			goto buzzer_activado_08;
 80061e6:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 80061e8:	4bb9      	ldr	r3, [pc, #740]	@ (80064d0 <display+0x6cc>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4053      	eors	r3, r2
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <display+0x3fa>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80061f6:	4bb3      	ldr	r3, [pc, #716]	@ (80064c4 <display+0x6c0>)
 80061f8:	2202      	movs	r2, #2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e000      	b.n	8006200 <display+0x3fc>
			goto buzzer_activado_01;
 80061fe:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 8006200:	4bb3      	ldr	r3, [pc, #716]	@ (80064d0 <display+0x6cc>)
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2201      	movs	r2, #1
 8006206:	4053      	eors	r3, r2
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <display+0x412>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 800620e:	4bad      	ldr	r3, [pc, #692]	@ (80064c4 <display+0x6c0>)
 8006210:	2203      	movs	r2, #3
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e000      	b.n	8006218 <display+0x414>
			goto buzzer_activado_02;
 8006216:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 8006218:	4bad      	ldr	r3, [pc, #692]	@ (80064d0 <display+0x6cc>)
 800621a:	789b      	ldrb	r3, [r3, #2]
 800621c:	2201      	movs	r2, #1
 800621e:	4053      	eors	r3, r2
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <display+0x42a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8006226:	4ba7      	ldr	r3, [pc, #668]	@ (80064c4 <display+0x6c0>)
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e000      	b.n	8006230 <display+0x42c>
			goto buzzer_activado_03;
 800622e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 8006230:	4ba6      	ldr	r3, [pc, #664]	@ (80064cc <display+0x6c8>)
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2201      	movs	r2, #1
 8006236:	4053      	eors	r3, r2
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <display+0x442>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800623e:	4ba1      	ldr	r3, [pc, #644]	@ (80064c4 <display+0x6c0>)
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e000      	b.n	8006248 <display+0x444>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 8006246:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 8006248:	230e      	movs	r3, #14
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8006250:	230d      	movs	r3, #13
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e015      	b.n	8006286 <display+0x482>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 800625a:	200d      	movs	r0, #13
 800625c:	183b      	adds	r3, r7, r0
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	4a99      	ldr	r2, [pc, #612]	@ (80064c8 <display+0x6c4>)
 8006262:	5cd3      	ldrb	r3, [r2, r3]
 8006264:	001a      	movs	r2, r3
 8006266:	183b      	adds	r3, r7, r0
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	409a      	lsls	r2, r3
 800626c:	0013      	movs	r3, r2
 800626e:	b2d9      	uxtb	r1, r3
 8006270:	220e      	movs	r2, #14
 8006272:	18bb      	adds	r3, r7, r2
 8006274:	18ba      	adds	r2, r7, r2
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 800627c:	183b      	adds	r3, r7, r0
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	183b      	adds	r3, r7, r0
 8006282:	3201      	adds	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	230d      	movs	r3, #13
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b07      	cmp	r3, #7
 800628e:	d9e4      	bls.n	800625a <display+0x456>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8006290:	230e      	movs	r3, #14
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	223f      	movs	r2, #63	@ 0x3f
 8006298:	4013      	ands	r3, r2
 800629a:	d003      	beq.n	80062a4 <display+0x4a0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800629c:	4b89      	ldr	r3, [pc, #548]	@ (80064c4 <display+0x6c0>)
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e000      	b.n	80062a6 <display+0x4a2>
			goto buzzer_activado_06;
 80062a4:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 80062a6:	230e      	movs	r3, #14
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	e013      	b.n	80062dc <display+0x4d8>
			trefst_aux_ |= trefst2[k]<<k;
 80062b4:	4a87      	ldr	r2, [pc, #540]	@ (80064d4 <display+0x6d0>)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	18d3      	adds	r3, r2, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	001a      	movs	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	409a      	lsls	r2, r3
 80062c2:	0013      	movs	r3, r2
 80062c4:	b25a      	sxtb	r2, r3
 80062c6:	210e      	movs	r1, #14
 80062c8:	187b      	adds	r3, r7, r1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b25a      	sxtb	r2, r3
 80062d2:	187b      	adds	r3, r7, r1
 80062d4:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3301      	adds	r3, #1
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b07      	cmp	r3, #7
 80062e0:	dde8      	ble.n	80062b4 <display+0x4b0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 80062e2:	230e      	movs	r3, #14
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <display+0x4f0>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80062ec:	4b75      	ldr	r3, [pc, #468]	@ (80064c4 <display+0x6c0>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e000      	b.n	80062f6 <display+0x4f2>
			goto buzzer_activado_07;
 80062f4:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 80062f6:	4b73      	ldr	r3, [pc, #460]	@ (80064c4 <display+0x6c0>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d85b      	bhi.n	80063b6 <display+0x5b2>
 80062fe:	009a      	lsls	r2, r3, #2
 8006300:	4b75      	ldr	r3, [pc, #468]	@ (80064d8 <display+0x6d4>)
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 8006308:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 800630a:	4b74      	ldr	r3, [pc, #464]	@ (80064dc <display+0x6d8>)
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	3364      	adds	r3, #100	@ 0x64
 8006310:	b29a      	uxth	r2, r3
 8006312:	4b73      	ldr	r3, [pc, #460]	@ (80064e0 <display+0x6dc>)
 8006314:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 8006316:	e051      	b.n	80063bc <display+0x5b8>
			case 1: goto buzzer_etapa_1;
 8006318:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 800631a:	4b72      	ldr	r3, [pc, #456]	@ (80064e4 <display+0x6e0>)
 800631c:	22fa      	movs	r2, #250	@ 0xfa
 800631e:	0052      	lsls	r2, r2, #1
 8006320:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 8006322:	4b71      	ldr	r3, [pc, #452]	@ (80064e8 <display+0x6e4>)
 8006324:	22fa      	movs	r2, #250	@ 0xfa
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 800632a:	e012      	b.n	8006352 <display+0x54e>
			case 2: goto buzzer_etapa_2;
 800632c:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 800632e:	4b6d      	ldr	r3, [pc, #436]	@ (80064e4 <display+0x6e0>)
 8006330:	22fa      	movs	r2, #250	@ 0xfa
 8006332:	0052      	lsls	r2, r2, #1
 8006334:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 8006336:	4b6c      	ldr	r3, [pc, #432]	@ (80064e8 <display+0x6e4>)
 8006338:	4a6c      	ldr	r2, [pc, #432]	@ (80064ec <display+0x6e8>)
 800633a:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 800633c:	e009      	b.n	8006352 <display+0x54e>
			case 3: goto buzzer_etapa_3;
 800633e:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8006340:	4b68      	ldr	r3, [pc, #416]	@ (80064e4 <display+0x6e0>)
 8006342:	22fa      	movs	r2, #250	@ 0xfa
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 8006348:	4b67      	ldr	r3, [pc, #412]	@ (80064e8 <display+0x6e4>)
 800634a:	4a69      	ldr	r2, [pc, #420]	@ (80064f0 <display+0x6ec>)
 800634c:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 800634e:	e000      	b.n	8006352 <display+0x54e>
			case 4: goto buzzer_etapa_4;
 8006350:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 8006352:	4b62      	ldr	r3, [pc, #392]	@ (80064dc <display+0x6d8>)
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	4b62      	ldr	r3, [pc, #392]	@ (80064e0 <display+0x6dc>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d12d      	bne.n	80063ba <display+0x5b6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 800635e:	4b65      	ldr	r3, [pc, #404]	@ (80064f4 <display+0x6f0>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4053      	eors	r3, r2
 8006366:	b2db      	uxtb	r3, r3
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	4193      	sbcs	r3, r2
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4b61      	ldr	r3, [pc, #388]	@ (80064f4 <display+0x6f0>)
 8006370:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8006372:	4b60      	ldr	r3, [pc, #384]	@ (80064f4 <display+0x6f0>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10e      	bne.n	8006398 <display+0x594>
			goto buzzer_on;
		}
buzzer_off:
 800637a:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800637c:	4b5e      	ldr	r3, [pc, #376]	@ (80064f8 <display+0x6f4>)
 800637e:	2104      	movs	r1, #4
 8006380:	0018      	movs	r0, r3
 8006382:	f00f fd2f 	bl	8015de4 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 8006386:	4b55      	ldr	r3, [pc, #340]	@ (80064dc <display+0x6d8>)
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	4b57      	ldr	r3, [pc, #348]	@ (80064e8 <display+0x6e4>)
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	b29a      	uxth	r2, r3
 8006392:	4b53      	ldr	r3, [pc, #332]	@ (80064e0 <display+0x6dc>)
 8006394:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 8006396:	e011      	b.n	80063bc <display+0x5b8>
			goto buzzer_on;
 8006398:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800639a:	4b57      	ldr	r3, [pc, #348]	@ (80064f8 <display+0x6f4>)
 800639c:	2104      	movs	r1, #4
 800639e:	0018      	movs	r0, r3
 80063a0:	f00f fc3e 	bl	8015c20 <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 80063a4:	4b4d      	ldr	r3, [pc, #308]	@ (80064dc <display+0x6d8>)
 80063a6:	881a      	ldrh	r2, [r3, #0]
 80063a8:	4b4e      	ldr	r3, [pc, #312]	@ (80064e4 <display+0x6e0>)
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	18d3      	adds	r3, r2, r3
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	4b4b      	ldr	r3, [pc, #300]	@ (80064e0 <display+0x6dc>)
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e002      	b.n	80063bc <display+0x5b8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	e000      	b.n	80063bc <display+0x5b8>
			goto termina_buzzer;//jrne    termina_buzzer
 80063ba:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 80063bc:	1dfb      	adds	r3, r7, #7
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	e009      	b.n	80063d8 <display+0x5d4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 80063c4:	1dfb      	adds	r3, r7, #7
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	4a4c      	ldr	r2, [pc, #304]	@ (80064fc <display+0x6f8>)
 80063ca:	2101      	movs	r1, #1
 80063cc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 80063ce:	1dfb      	adds	r3, r7, #7
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	3201      	adds	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	1dfb      	adds	r3, r7, #7
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b07      	cmp	r3, #7
 80063de:	d9f1      	bls.n	80063c4 <display+0x5c0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 80063e0:	4b47      	ldr	r3, [pc, #284]	@ (8006500 <display+0x6fc>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	4053      	eors	r3, r2
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <display+0x5f0>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 80063ee:	4b43      	ldr	r3, [pc, #268]	@ (80064fc <display+0x6f8>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 80063f4:	4b42      	ldr	r3, [pc, #264]	@ (8006500 <display+0x6fc>)
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4053      	eors	r3, r2
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <display+0x604>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 8006402:	4b3e      	ldr	r3, [pc, #248]	@ (80064fc <display+0x6f8>)
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 8006408:	4b3d      	ldr	r3, [pc, #244]	@ (8006500 <display+0x6fc>)
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	2201      	movs	r2, #1
 800640e:	4053      	eors	r3, r2
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <display+0x618>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 8006416:	4b39      	ldr	r3, [pc, #228]	@ (80064fc <display+0x6f8>)
 8006418:	2200      	movs	r2, #0
 800641a:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 800641c:	4b38      	ldr	r3, [pc, #224]	@ (8006500 <display+0x6fc>)
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2201      	movs	r2, #1
 8006422:	4053      	eors	r3, r2
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <display+0x62c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 800642a:	4b34      	ldr	r3, [pc, #208]	@ (80064fc <display+0x6f8>)
 800642c:	2200      	movs	r2, #0
 800642e:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 8006430:	4b33      	ldr	r3, [pc, #204]	@ (8006500 <display+0x6fc>)
 8006432:	79db      	ldrb	r3, [r3, #7]
 8006434:	2201      	movs	r2, #1
 8006436:	4053      	eors	r3, r2
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <display+0x640>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 800643e:	4b2f      	ldr	r3, [pc, #188]	@ (80064fc <display+0x6f8>)
 8006440:	2200      	movs	r2, #0
 8006442:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 8006444:	4b2e      	ldr	r3, [pc, #184]	@ (8006500 <display+0x6fc>)
 8006446:	791b      	ldrb	r3, [r3, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	4053      	eors	r3, r2
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <display+0x654>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 8006452:	4b2a      	ldr	r3, [pc, #168]	@ (80064fc <display+0x6f8>)
 8006454:	2200      	movs	r2, #0
 8006456:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 8006458:	4b2a      	ldr	r3, [pc, #168]	@ (8006504 <display+0x700>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d803      	bhi.n	8006468 <display+0x664>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8006460:	4b26      	ldr	r3, [pc, #152]	@ (80064fc <display+0x6f8>)
 8006462:	2200      	movs	r2, #0
 8006464:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8006466:	e056      	b.n	8006516 <display+0x712>
		goto	clt_ledInd;
 8006468:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 800646a:	4b24      	ldr	r3, [pc, #144]	@ (80064fc <display+0x6f8>)
 800646c:	2201      	movs	r2, #1
 800646e:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8006470:	4b23      	ldr	r3, [pc, #140]	@ (8006500 <display+0x6fc>)
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d117      	bne.n	80064a8 <display+0x6a4>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 8006478:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <display+0x704>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01d      	beq.n	80064bc <display+0x6b8>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8006480:	4b22      	ldr	r3, [pc, #136]	@ (800650c <display+0x708>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2201      	movs	r2, #1
 8006486:	4053      	eors	r3, r2
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d118      	bne.n	80064c0 <display+0x6bc>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 800648e:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <display+0x70c>)
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	001a      	movs	r2, r3
 8006496:	2320      	movs	r3, #32
 8006498:	4013      	ands	r3, r2
 800649a:	d001      	beq.n	80064a0 <display+0x69c>
	    asm ("nop");
 800649c:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 800649e:	e03a      	b.n	8006516 <display+0x712>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 80064a0:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <display+0x6f8>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 80064a6:	e036      	b.n	8006516 <display+0x712>
		goto	blink_dia;
 80064a8:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 80064aa:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <display+0x70c>)
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db2f      	blt.n	8006514 <display+0x710>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 80064b4:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <display+0x6f8>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	709a      	strb	r2, [r3, #2]
 80064ba:	e02c      	b.n	8006516 <display+0x712>
		goto	no_blk;
 80064bc:	46c0      	nop			@ (mov r8, r8)
 80064be:	e02a      	b.n	8006516 <display+0x712>
		goto	no_blk;
 80064c0:	46c0      	nop			@ (mov r8, r8)
 80064c2:	e028      	b.n	8006516 <display+0x712>
 80064c4:	20000fa8 	.word	0x20000fa8
 80064c8:	20000ba8 	.word	0x20000ba8
 80064cc:	200010c8 	.word	0x200010c8
 80064d0:	20000fc4 	.word	0x20000fc4
 80064d4:	20000ba0 	.word	0x20000ba0
 80064d8:	08018a58 	.word	0x08018a58
 80064dc:	20000fa4 	.word	0x20000fa4
 80064e0:	20000fa6 	.word	0x20000fa6
 80064e4:	20000faa 	.word	0x20000faa
 80064e8:	20000fac 	.word	0x20000fac
 80064ec:	00007530 	.word	0x00007530
 80064f0:	00003a98 	.word	0x00003a98
 80064f4:	20000fb0 	.word	0x20000fb0
 80064f8:	200005e0 	.word	0x200005e0
 80064fc:	20000c9c 	.word	0x20000c9c
 8006500:	20000bb0 	.word	0x20000bb0
 8006504:	20000bb8 	.word	0x20000bb8
 8006508:	20000c47 	.word	0x20000c47
 800650c:	20000c5c 	.word	0x20000c5c
 8006510:	20000b6e 	.word	0x20000b6e
		goto	display_j11;
 8006514:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 8006516:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (eeEstado1 & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8006518:	4b08      	ldr	r3, [pc, #32]	@ (800653c <display+0x738>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	001a      	movs	r2, r3
 800651e:	2301      	movs	r3, #1
 8006520:	4013      	ands	r3, r2
 8006522:	d104      	bne.n	800652e <display+0x72a>
		goto	refriON;
	}
refriOFF_2:
 8006524:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <display+0x73c>)
 8006528:	2201      	movs	r2, #1
 800652a:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 800652c:	e000      	b.n	8006530 <display+0x72c>
		goto	refriON;
 800652e:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 8006530:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	b004      	add	sp, #16
 8006538:	bd80      	pop	{r7, pc}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	20000387 	.word	0x20000387
 8006540:	20000c9c 	.word	0x20000c9c

08006544 <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 800654a:	4bac      	ldr	r3, [pc, #688]	@ (80067fc <inicio+0x2b8>)
 800654c:	2201      	movs	r2, #1
 800654e:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 8006550:	4baa      	ldr	r3, [pc, #680]	@ (80067fc <inicio+0x2b8>)
 8006552:	2201      	movs	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 8006556:	4baa      	ldr	r3, [pc, #680]	@ (8006800 <inicio+0x2bc>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 800655c:	4ba9      	ldr	r3, [pc, #676]	@ (8006804 <inicio+0x2c0>)
 800655e:	2281      	movs	r2, #129	@ 0x81
 8006560:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8006562:	4ba9      	ldr	r3, [pc, #676]	@ (8006808 <inicio+0x2c4>)
 8006564:	2278      	movs	r2, #120	@ 0x78
 8006566:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8006568:	4ba8      	ldr	r3, [pc, #672]	@ (800680c <inicio+0x2c8>)
 800656a:	2204      	movs	r2, #4
 800656c:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 800656e:	4ba8      	ldr	r3, [pc, #672]	@ (8006810 <inicio+0x2cc>)
 8006570:	22c5      	movs	r2, #197	@ 0xc5
 8006572:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8006574:	4ba7      	ldr	r3, [pc, #668]	@ (8006814 <inicio+0x2d0>)
 8006576:	22a4      	movs	r2, #164	@ 0xa4
 8006578:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 800657a:	4ba7      	ldr	r3, [pc, #668]	@ (8006818 <inicio+0x2d4>)
 800657c:	220f      	movs	r2, #15
 800657e:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8006580:	1cfb      	adds	r3, r7, #3
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e009      	b.n	800659c <inicio+0x58>
		cruze_por_cero[k] = 0;
 8006588:	1cfb      	adds	r3, r7, #3
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	4aa3      	ldr	r2, [pc, #652]	@ (800681c <inicio+0x2d8>)
 800658e:	2100      	movs	r1, #0
 8006590:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8006592:	1cfb      	adds	r3, r7, #3
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	1cfb      	adds	r3, r7, #3
 8006598:	3201      	adds	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	1cfb      	adds	r3, r7, #3
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d9f1      	bls.n	8006588 <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 80065a4:	4b9e      	ldr	r3, [pc, #632]	@ (8006820 <inicio+0x2dc>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 80065aa:	4b9e      	ldr	r3, [pc, #632]	@ (8006824 <inicio+0x2e0>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeprotype]);
 80065b0:	4b9d      	ldr	r3, [pc, #628]	@ (8006828 <inicio+0x2e4>)
 80065b2:	4a9e      	ldr	r2, [pc, #632]	@ (800682c <inicio+0x2e8>)
 80065b4:	0019      	movs	r1, r3
 80065b6:	0010      	movs	r0, r2
 80065b8:	f7fa fa80 	bl	8000abc <findLastValue>
 80065bc:	0003      	movs	r3, r0
 80065be:	b2d9      	uxtb	r1, r3
 80065c0:	4b9b      	ldr	r3, [pc, #620]	@ (8006830 <inicio+0x2ec>)
 80065c2:	2257      	movs	r2, #87	@ 0x57
 80065c4:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 80065c6:	4b9b      	ldr	r3, [pc, #620]	@ (8006834 <inicio+0x2f0>)
 80065c8:	226e      	movs	r2, #110	@ 0x6e
 80065ca:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 80065cc:	4b98      	ldr	r3, [pc, #608]	@ (8006830 <inicio+0x2ec>)
 80065ce:	2257      	movs	r2, #87	@ 0x57
 80065d0:	5c9b      	ldrb	r3, [r3, r2]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d103      	bne.n	80065de <inicio+0x9a>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 80065d6:	4b97      	ldr	r3, [pc, #604]	@ (8006834 <inicio+0x2f0>)
 80065d8:	22d2      	movs	r2, #210	@ 0xd2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e000      	b.n	80065e0 <inicio+0x9c>
		goto no_ini_210;
 80065de:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 80065e0:	4b95      	ldr	r3, [pc, #596]	@ (8006838 <inicio+0x2f4>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 80065e6:	4b94      	ldr	r3, [pc, #592]	@ (8006838 <inicio+0x2f4>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 80065ec:	4b92      	ldr	r3, [pc, #584]	@ (8006838 <inicio+0x2f4>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 80065f2:	4b92      	ldr	r3, [pc, #584]	@ (800683c <inicio+0x2f8>)
 80065f4:	2296      	movs	r2, #150	@ 0x96
 80065f6:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 80065f8:	4b91      	ldr	r3, [pc, #580]	@ (8006840 <inicio+0x2fc>)
 80065fa:	2296      	movs	r2, #150	@ 0x96
 80065fc:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 80065fe:	4b91      	ldr	r3, [pc, #580]	@ (8006844 <inicio+0x300>)
 8006600:	2296      	movs	r2, #150	@ 0x96
 8006602:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8006604:	4b90      	ldr	r3, [pc, #576]	@ (8006848 <inicio+0x304>)
 8006606:	2296      	movs	r2, #150	@ 0x96
 8006608:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 800660a:	4b89      	ldr	r3, [pc, #548]	@ (8006830 <inicio+0x2ec>)
 800660c:	22aa      	movs	r2, #170	@ 0xaa
 800660e:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 8006610:	4b87      	ldr	r3, [pc, #540]	@ (8006830 <inicio+0x2ec>)
 8006612:	2241      	movs	r2, #65	@ 0x41
 8006614:	2166      	movs	r1, #102	@ 0x66
 8006616:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8006618:	4b85      	ldr	r3, [pc, #532]	@ (8006830 <inicio+0x2ec>)
 800661a:	227f      	movs	r2, #127	@ 0x7f
 800661c:	21cc      	movs	r1, #204	@ 0xcc
 800661e:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eetimepaf]);
 8006620:	4b8a      	ldr	r3, [pc, #552]	@ (800684c <inicio+0x308>)
 8006622:	4a82      	ldr	r2, [pc, #520]	@ (800682c <inicio+0x2e8>)
 8006624:	0019      	movs	r1, r3
 8006626:	0010      	movs	r0, r2
 8006628:	f7fa fa48 	bl	8000abc <findLastValue>
 800662c:	0003      	movs	r3, r0
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b87      	ldr	r3, [pc, #540]	@ (8006850 <inicio+0x30c>)
 8006632:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8006634:	f7fe fa96 	bl	8004b64 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 8006638:	f7fe fab6 	bl	8004ba8 <load_tiempoAhorro2>

//	;/ Inicializa los registros de tiempo UNIX

	timeSeconds_HW = (uint16_t)(eeTimeUnix1 * 256) + (uint16_t)(eeTimeUnix2);		//	ldw		X,eeTimeUnix1
 800663c:	4b85      	ldr	r3, [pc, #532]	@ (8006854 <inicio+0x310>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	b29b      	uxth	r3, r3
 8006644:	4a84      	ldr	r2, [pc, #528]	@ (8006858 <inicio+0x314>)
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	189b      	adds	r3, r3, r2
 800664a:	b29a      	uxth	r2, r3
 800664c:	4b83      	ldr	r3, [pc, #524]	@ (800685c <inicio+0x318>)
 800664e:	801a      	strh	r2, [r3, #0]
																											//	ldw		timeSeconds_HW,X
	timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
 8006650:	4b83      	ldr	r3, [pc, #524]	@ (8006860 <inicio+0x31c>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	b29b      	uxth	r3, r3
 8006658:	4a82      	ldr	r2, [pc, #520]	@ (8006864 <inicio+0x320>)
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	189b      	adds	r3, r3, r2
 800665e:	b29a      	uxth	r2, r3
 8006660:	4b81      	ldr	r3, [pc, #516]	@ (8006868 <inicio+0x324>)
 8006662:	801a      	strh	r2, [r3, #0]
																											//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8006664:	4b81      	ldr	r3, [pc, #516]	@ (800686c <inicio+0x328>)
 8006666:	2200      	movs	r2, #0
 8006668:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 800666a:	4b81      	ldr	r3, [pc, #516]	@ (8006870 <inicio+0x32c>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 8006670:	4b80      	ldr	r3, [pc, #512]	@ (8006874 <inicio+0x330>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8006676:	4b80      	ldr	r3, [pc, #512]	@ (8006878 <inicio+0x334>)
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 800667c:	4b7f      	ldr	r3, [pc, #508]	@ (800687c <inicio+0x338>)
 800667e:	2201      	movs	r2, #1
 8006680:	70da      	strb	r2, [r3, #3]


	timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
 8006682:	4b7f      	ldr	r3, [pc, #508]	@ (8006880 <inicio+0x33c>)
 8006684:	220f      	movs	r2, #15
 8006686:	701a      	strb	r2, [r3, #0]
							//	ldw		X,#300;
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 8006688:	4b7e      	ldr	r3, [pc, #504]	@ (8006884 <inicio+0x340>)
 800668a:	2296      	movs	r2, #150	@ 0x96
 800668c:	0052      	lsls	r2, r2, #1
 800668e:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 8006690:	4b7d      	ldr	r3, [pc, #500]	@ (8006888 <inicio+0x344>)
 8006692:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	4b7c      	ldr	r3, [pc, #496]	@ (800688c <inicio+0x348>)
 800669a:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 800669c:	4b7b      	ldr	r3, [pc, #492]	@ (800688c <inicio+0x348>)
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006890 <inicio+0x34c>)
 80066a2:	701a      	strb	r2, [r3, #0]
	waux = 0;
 80066a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006894 <inicio+0x350>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4b7a      	ldr	r3, [pc, #488]	@ (8006898 <inicio+0x354>)
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d103      	bne.n	80066ba <inicio+0x176>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 80066b2:	4b78      	ldr	r3, [pc, #480]	@ (8006894 <inicio+0x350>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 80066b8:	e015      	b.n	80066e6 <inicio+0x1a2>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 80066ba:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 80066bc:	4b75      	ldr	r3, [pc, #468]	@ (8006894 <inicio+0x350>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	4b73      	ldr	r3, [pc, #460]	@ (8006894 <inicio+0x350>)
 80066c6:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3380      	adds	r3, #128	@ 0x80
 80066cc:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	4b6e      	ldr	r3, [pc, #440]	@ (800688c <inicio+0x348>)
 80066d4:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 80066d6:	4b6d      	ldr	r3, [pc, #436]	@ (800688c <inicio+0x348>)
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	4b6d      	ldr	r3, [pc, #436]	@ (8006890 <inicio+0x34c>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d100      	bne.n	80066e4 <inicio+0x1a0>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 80066e2:	e7e2      	b.n	80066aa <inicio+0x166>
	}
lastDataBlockFound:
 80066e4:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 80066e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006894 <inicio+0x350>)
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	4b6c      	ldr	r3, [pc, #432]	@ (800689c <inicio+0x358>)
 80066ec:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 80066ee:	4b6b      	ldr	r3, [pc, #428]	@ (800689c <inicio+0x358>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	001a      	movs	r2, r3
 80066f6:	4b6a      	ldr	r3, [pc, #424]	@ (80068a0 <inicio+0x35c>)
 80066f8:	18d3      	adds	r3, r2, r3
 80066fa:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	337e      	adds	r3, #126	@ 0x7e
 8006700:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	4b67      	ldr	r3, [pc, #412]	@ (80068a4 <inicio+0x360>)
 8006708:	701a      	strb	r2, [r3, #0]

	dirBuffer = &data_buffer[0];
 800670a:	4b67      	ldr	r3, [pc, #412]	@ (80068a8 <inicio+0x364>)
 800670c:	4a67      	ldr	r2, [pc, #412]	@ (80068ac <inicio+0x368>)
 800670e:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 8006710:	4b67      	ldr	r3, [pc, #412]	@ (80068b0 <inicio+0x36c>)
 8006712:	4a63      	ldr	r2, [pc, #396]	@ (80068a0 <inicio+0x35c>)
 8006714:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8006716:	4b61      	ldr	r3, [pc, #388]	@ (800689c <inicio+0x358>)
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	4b55      	ldr	r3, [pc, #340]	@ (8006870 <inicio+0x32c>)
 800671c:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800671e:	f7fe fa7d 	bl	8004c1c <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 8006722:	4b64      	ldr	r3, [pc, #400]	@ (80068b4 <inicio+0x370>)
 8006724:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	4b58      	ldr	r3, [pc, #352]	@ (800688c <inicio+0x348>)
 800672c:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 800672e:	4b57      	ldr	r3, [pc, #348]	@ (800688c <inicio+0x348>)
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	4b57      	ldr	r3, [pc, #348]	@ (8006890 <inicio+0x34c>)
 8006734:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8006736:	4b57      	ldr	r3, [pc, #348]	@ (8006894 <inicio+0x350>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4b5e      	ldr	r3, [pc, #376]	@ (80068b8 <inicio+0x374>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d103      	bne.n	800674c <inicio+0x208>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8006744:	4b53      	ldr	r3, [pc, #332]	@ (8006894 <inicio+0x350>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 800674a:	e015      	b.n	8006778 <inicio+0x234>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 800674c:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 800674e:	4b51      	ldr	r3, [pc, #324]	@ (8006894 <inicio+0x350>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4b4f      	ldr	r3, [pc, #316]	@ (8006894 <inicio+0x350>)
 8006758:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3380      	adds	r3, #128	@ 0x80
 800675e:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	4b49      	ldr	r3, [pc, #292]	@ (800688c <inicio+0x348>)
 8006766:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 8006768:	4b48      	ldr	r3, [pc, #288]	@ (800688c <inicio+0x348>)
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	4b48      	ldr	r3, [pc, #288]	@ (8006890 <inicio+0x34c>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d100      	bne.n	8006776 <inicio+0x232>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 8006774:	e7e2      	b.n	800673c <inicio+0x1f8>
		}
lastEventBlockFound:
 8006776:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 8006778:	4b46      	ldr	r3, [pc, #280]	@ (8006894 <inicio+0x350>)
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	4b4f      	ldr	r3, [pc, #316]	@ (80068bc <inicio+0x378>)
 800677e:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8006780:	4b4e      	ldr	r3, [pc, #312]	@ (80068bc <inicio+0x378>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	001a      	movs	r2, r3
 8006788:	4b4d      	ldr	r3, [pc, #308]	@ (80068c0 <inicio+0x37c>)
 800678a:	18d3      	adds	r3, r2, r3
 800678c:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	337e      	adds	r3, #126	@ 0x7e
 8006792:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	4b4a      	ldr	r3, [pc, #296]	@ (80068c4 <inicio+0x380>)
 800679a:	701a      	strb	r2, [r3, #0]

		dirBuffer = &event_buffer[0];
 800679c:	4b42      	ldr	r3, [pc, #264]	@ (80068a8 <inicio+0x364>)
 800679e:	4a4a      	ldr	r2, [pc, #296]	@ (80068c8 <inicio+0x384>)
 80067a0:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 80067a2:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <inicio+0x36c>)
 80067a4:	4a46      	ldr	r2, [pc, #280]	@ (80068c0 <inicio+0x37c>)
 80067a6:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 80067a8:	4b44      	ldr	r3, [pc, #272]	@ (80068bc <inicio+0x378>)
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	4b30      	ldr	r3, [pc, #192]	@ (8006870 <inicio+0x32c>)
 80067ae:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 80067b0:	f7fe fa34 	bl	8004c1c <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 80067b4:	4b45      	ldr	r3, [pc, #276]	@ (80068cc <inicio+0x388>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 80067ba:	4b44      	ldr	r3, [pc, #272]	@ (80068cc <inicio+0x388>)
 80067bc:	2200      	movs	r2, #0
 80067be:	719a      	strb	r2, [r3, #6]
		if(!GetRegFlagState(eeEstado1, est1Lamp)){
 80067c0:	4b43      	ldr	r3, [pc, #268]	@ (80068d0 <inicio+0x38c>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	001a      	movs	r2, r3
 80067c6:	2304      	movs	r3, #4
 80067c8:	4013      	ands	r3, r2
 80067ca:	d003      	beq.n	80067d4 <inicio+0x290>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 80067cc:	4b3f      	ldr	r3, [pc, #252]	@ (80068cc <inicio+0x388>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	719a      	strb	r2, [r3, #6]
 80067d2:	e000      	b.n	80067d6 <inicio+0x292>
			goto initLampOFF;
 80067d4:	46c0      	nop			@ (mov r8, r8)
initLampOFF:

		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 80067d6:	4b3f      	ldr	r3, [pc, #252]	@ (80068d4 <inicio+0x390>)
 80067d8:	2200      	movs	r2, #0
 80067da:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(eeEstado1, est1LockDr)){
 80067dc:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <inicio+0x38c>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	001a      	movs	r2, r3
 80067e2:	2340      	movs	r3, #64	@ 0x40
 80067e4:	4013      	ands	r3, r2
 80067e6:	d003      	beq.n	80067f0 <inicio+0x2ac>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 80067e8:	4b3a      	ldr	r3, [pc, #232]	@ (80068d4 <inicio+0x390>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	705a      	strb	r2, [r3, #1]
initLockDrOFF:

	//jp	end_init
}
 80067ee:	e000      	b.n	80067f2 <inicio+0x2ae>
			goto initLockDrOFF;
 80067f0:	46c0      	nop			@ (mov r8, r8)
}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b002      	add	sp, #8
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	20000b98 	.word	0x20000b98
 8006800:	20000b6d 	.word	0x20000b6d
 8006804:	20000bea 	.word	0x20000bea
 8006808:	20000beb 	.word	0x20000beb
 800680c:	20000c77 	.word	0x20000c77
 8006810:	20000c78 	.word	0x20000c78
 8006814:	20000c76 	.word	0x20000c76
 8006818:	20000c79 	.word	0x20000c79
 800681c:	20000c7c 	.word	0x20000c7c
 8006820:	20000c81 	.word	0x20000c81
 8006824:	20000c82 	.word	0x20000c82
 8006828:	2000035b 	.word	0x2000035b
 800682c:	0803f000 	.word	0x0803f000
 8006830:	200000bc 	.word	0x200000bc
 8006834:	20000bee 	.word	0x20000bee
 8006838:	20000c08 	.word	0x20000c08
 800683c:	20000c30 	.word	0x20000c30
 8006840:	20000c31 	.word	0x20000c31
 8006844:	20000c32 	.word	0x20000c32
 8006848:	20000c33 	.word	0x20000c33
 800684c:	2000034c 	.word	0x2000034c
 8006850:	20000c47 	.word	0x20000c47
 8006854:	20000388 	.word	0x20000388
 8006858:	20000389 	.word	0x20000389
 800685c:	20000dd0 	.word	0x20000dd0
 8006860:	2000038a 	.word	0x2000038a
 8006864:	2000038b 	.word	0x2000038b
 8006868:	20000dd2 	.word	0x20000dd2
 800686c:	20000db8 	.word	0x20000db8
 8006870:	20000dba 	.word	0x20000dba
 8006874:	20000dbb 	.word	0x20000dbb
 8006878:	20000dbc 	.word	0x20000dbc
 800687c:	20000ee8 	.word	0x20000ee8
 8006880:	20000f5a 	.word	0x20000f5a
 8006884:	20000f6c 	.word	0x20000f6c
 8006888:	0803c07f 	.word	0x0803c07f
 800688c:	20000920 	.word	0x20000920
 8006890:	20000b77 	.word	0x20000b77
 8006894:	20000b76 	.word	0x20000b76
 8006898:	0803efff 	.word	0x0803efff
 800689c:	20000dcd 	.word	0x20000dcd
 80068a0:	0803c000 	.word	0x0803c000
 80068a4:	20000dcc 	.word	0x20000dcc
 80068a8:	20000dc4 	.word	0x20000dc4
 80068ac:	20000cac 	.word	0x20000cac
 80068b0:	20000dc0 	.word	0x20000dc0
 80068b4:	0803707f 	.word	0x0803707f
 80068b8:	0803bfff 	.word	0x0803bfff
 80068bc:	20000dcf 	.word	0x20000dcf
 80068c0:	08037000 	.word	0x08037000
 80068c4:	20000dce 	.word	0x20000dce
 80068c8:	20000d2c 	.word	0x20000d2c
 80068cc:	20000c5c 	.word	0x20000c5c
 80068d0:	20000387 	.word	0x20000387
 80068d4:	20000bc4 	.word	0x20000bc4

080068d8 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 80068dc:	4b1f      	ldr	r3, [pc, #124]	@ (800695c <timeBCD_to_UNIX+0x84>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 f853 	bl	800698c <BCDtoByte>
 80068e6:	0003      	movs	r3, r0
 80068e8:	22fa      	movs	r2, #250	@ 0xfa
 80068ea:	00d2      	lsls	r2, r2, #3
 80068ec:	4694      	mov	ip, r2
 80068ee:	4463      	add	r3, ip
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006960 <timeBCD_to_UNIX+0x88>)
 80068f4:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 80068f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <timeBCD_to_UNIX+0x8c>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	221f      	movs	r2, #31
 80068fc:	4013      	ands	r3, r2
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	0018      	movs	r0, r3
 8006902:	f000 f843 	bl	800698c <BCDtoByte>
 8006906:	0003      	movs	r3, r0
 8006908:	001a      	movs	r2, r3
 800690a:	4b17      	ldr	r3, [pc, #92]	@ (8006968 <timeBCD_to_UNIX+0x90>)
 800690c:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 800690e:	4b17      	ldr	r3, [pc, #92]	@ (800696c <timeBCD_to_UNIX+0x94>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f83a 	bl	800698c <BCDtoByte>
 8006918:	0003      	movs	r3, r0
 800691a:	001a      	movs	r2, r3
 800691c:	4b14      	ldr	r3, [pc, #80]	@ (8006970 <timeBCD_to_UNIX+0x98>)
 800691e:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <timeBCD_to_UNIX+0x9c>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 f831 	bl	800698c <BCDtoByte>
 800692a:	0003      	movs	r3, r0
 800692c:	001a      	movs	r2, r3
 800692e:	4b12      	ldr	r3, [pc, #72]	@ (8006978 <timeBCD_to_UNIX+0xa0>)
 8006930:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 8006932:	4b12      	ldr	r3, [pc, #72]	@ (800697c <timeBCD_to_UNIX+0xa4>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 f828 	bl	800698c <BCDtoByte>
 800693c:	0003      	movs	r3, r0
 800693e:	001a      	movs	r2, r3
 8006940:	4b0f      	ldr	r3, [pc, #60]	@ (8006980 <timeBCD_to_UNIX+0xa8>)
 8006942:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 8006944:	4b0f      	ldr	r3, [pc, #60]	@ (8006984 <timeBCD_to_UNIX+0xac>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	0018      	movs	r0, r3
 800694a:	f000 f81f 	bl	800698c <BCDtoByte>
 800694e:	0003      	movs	r3, r0
 8006950:	001a      	movs	r2, r3
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <timeBCD_to_UNIX+0xb0>)
 8006954:	701a      	strb	r2, [r3, #0]
}
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001090 	.word	0x20001090
 8006960:	200010b0 	.word	0x200010b0
 8006964:	20001091 	.word	0x20001091
 8006968:	200010b2 	.word	0x200010b2
 800696c:	20001092 	.word	0x20001092
 8006970:	200010b3 	.word	0x200010b3
 8006974:	20001093 	.word	0x20001093
 8006978:	200010b4 	.word	0x200010b4
 800697c:	20001094 	.word	0x20001094
 8006980:	200010b5 	.word	0x200010b5
 8006984:	20001095 	.word	0x20001095
 8006988:	200010b6 	.word	0x200010b6

0800698c <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	0002      	movs	r2, r0
 8006994:	1dfb      	adds	r3, r7, #7
 8006996:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8006998:	1dfb      	adds	r3, r7, #7
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	220f      	movs	r2, #15
 800699e:	4013      	ands	r3, r2
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	1c19      	adds	r1, r3, #0
 80069ac:	0089      	lsls	r1, r1, #2
 80069ae:	18cb      	adds	r3, r1, r3
 80069b0:	18db      	adds	r3, r3, r3
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	b2db      	uxtb	r3, r3

}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <logger>:





void logger (void){
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 80069c4:	4bbb      	ldr	r3, [pc, #748]	@ (8006cb4 <logger+0x2f4>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d800      	bhi.n	80069ce <logger+0xe>
 80069cc:	e288      	b.n	8006ee0 <logger+0x520>
			goto logger_01;//jruge	logger_01;
 80069ce:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 80069d0:	4bb9      	ldr	r3, [pc, #740]	@ (8006cb8 <logger+0x2f8>)
 80069d2:	79db      	ldrb	r3, [r3, #7]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d118      	bne.n	8006a0a <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 80069d8:	4bb8      	ldr	r3, [pc, #736]	@ (8006cbc <logger+0x2fc>)
 80069da:	2257      	movs	r2, #87	@ 0x57
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d005      	beq.n	80069ee <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 80069e2:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 80069e4:	4bb6      	ldr	r3, [pc, #728]	@ (8006cc0 <logger+0x300>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b45      	cmp	r3, #69	@ 0x45
 80069ea:	d90a      	bls.n	8006a02 <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 80069ec:	e005      	b.n	80069fa <logger+0x3a>
			goto chk_220;//jreq	chk_220
 80069ee:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 80069f0:	4bb3      	ldr	r3, [pc, #716]	@ (8006cc0 <logger+0x300>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2ba9      	cmp	r3, #169	@ 0xa9
 80069f6:	d906      	bls.n	8006a06 <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 80069f8:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 80069fa:	4baf      	ldr	r3, [pc, #700]	@ (8006cb8 <logger+0x2f8>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8006a00:	e273      	b.n	8006eea <logger+0x52a>
		goto voltArranFAIL;//jra	voltArranFAIL
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	e271      	b.n	8006eea <logger+0x52a>
		goto voltArranFAIL;//jra voltArranFAIL
 8006a06:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8006a08:	e26f      	b.n	8006eea <logger+0x52a>
			goto voltFlagOK;
 8006a0a:	46c0      	nop			@ (mov r8, r8)
voltFlagOK:
//;-----------------------------------------------------------
//; Unicamente trabajo logger cuando no hay conexión al servidor
		if(!flagsWIFI[f_serverConnect]){//btjf flagsWIFI,#f_serverConnect,serverDown
 8006a0c:	4bad      	ldr	r3, [pc, #692]	@ (8006cc4 <logger+0x304>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2201      	movs	r2, #1
 8006a12:	4053      	eors	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d100      	bne.n	8006a1c <logger+0x5c>
 8006a1a:	e263      	b.n	8006ee4 <logger+0x524>
	       	goto serverDown;
 8006a1c:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8006a1e:	4ba6      	ldr	r3, [pc, #664]	@ (8006cb8 <logger+0x2f8>)
 8006a20:	791b      	ldrb	r3, [r3, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	4053      	eors	r3, r2
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d100      	bne.n	8006a2e <logger+0x6e>
 8006a2c:	e25c      	b.n	8006ee8 <logger+0x528>
			goto door_event;
 8006a2e:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8006a30:	4ba5      	ldr	r3, [pc, #660]	@ (8006cc8 <logger+0x308>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d136      	bne.n	8006aa6 <logger+0xe6>
			goto ask_DE_end;
		}
ask_DE_start:
 8006a38:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8006a3a:	4ba4      	ldr	r3, [pc, #656]	@ (8006ccc <logger+0x30c>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d068      	beq.n	8006b14 <logger+0x154>
			goto ask_DE_start_01;
 8006a42:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8006a44:	4ba2      	ldr	r3, [pc, #648]	@ (8006cd0 <logger+0x310>)
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	4ba1      	ldr	r3, [pc, #644]	@ (8006cd4 <logger+0x314>)
 8006a50:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8006a52:	4b9f      	ldr	r3, [pc, #636]	@ (8006cd0 <logger+0x310>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd4 <logger+0x314>)
 8006a5a:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8006a5c:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd8 <logger+0x318>)
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b9b      	ldr	r3, [pc, #620]	@ (8006cd4 <logger+0x314>)
 8006a68:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8006a6a:	4b9b      	ldr	r3, [pc, #620]	@ (8006cd8 <logger+0x318>)
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	4b98      	ldr	r3, [pc, #608]	@ (8006cd4 <logger+0x314>)
 8006a72:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8006a74:	4b97      	ldr	r3, [pc, #604]	@ (8006cd4 <logger+0x314>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8006a7a:	4b98      	ldr	r3, [pc, #608]	@ (8006cdc <logger+0x31c>)
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	4b95      	ldr	r3, [pc, #596]	@ (8006cd4 <logger+0x314>)
 8006a80:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8006a82:	4b97      	ldr	r3, [pc, #604]	@ (8006ce0 <logger+0x320>)
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	4b93      	ldr	r3, [pc, #588]	@ (8006cd4 <logger+0x314>)
 8006a88:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8006a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc0 <logger+0x300>)
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	4b91      	ldr	r3, [pc, #580]	@ (8006cd4 <logger+0x314>)
 8006a90:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8006a92:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc8 <logger+0x308>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8006a98:	4b88      	ldr	r3, [pc, #544]	@ (8006cbc <logger+0x2fc>)
 8006a9a:	2250      	movs	r2, #80	@ 0x50
 8006a9c:	5c9b      	ldrb	r3, [r3, r2]
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	4b90      	ldr	r3, [pc, #576]	@ (8006ce4 <logger+0x324>)
 8006aa2:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8006aa4:	e039      	b.n	8006b1a <logger+0x15a>
			goto ask_DE_end;
 8006aa6:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8006aa8:	4b88      	ldr	r3, [pc, #544]	@ (8006ccc <logger+0x30c>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d133      	bne.n	8006b18 <logger+0x158>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8006ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8006ce4 <logger+0x324>)
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <logger+0x100>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8006ab8:	4b83      	ldr	r3, [pc, #524]	@ (8006cc8 <logger+0x308>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8006abe:	e02c      	b.n	8006b1a <logger+0x15a>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8006ac0:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8006ac2:	4b83      	ldr	r3, [pc, #524]	@ (8006cd0 <logger+0x310>)
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	4b81      	ldr	r3, [pc, #516]	@ (8006cd4 <logger+0x314>)
 8006ace:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8006ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd0 <logger+0x310>)
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd4 <logger+0x314>)
 8006ad8:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8006ada:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd8 <logger+0x318>)
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd4 <logger+0x314>)
 8006ae6:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd8 <logger+0x318>)
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	4b79      	ldr	r3, [pc, #484]	@ (8006cd4 <logger+0x314>)
 8006af0:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8006af2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ce8 <logger+0x328>)
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	4b77      	ldr	r3, [pc, #476]	@ (8006cd4 <logger+0x314>)
 8006af8:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8006afa:	4b7c      	ldr	r3, [pc, #496]	@ (8006cec <logger+0x32c>)
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	4b75      	ldr	r3, [pc, #468]	@ (8006cd4 <logger+0x314>)
 8006b00:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8006b02:	4b7b      	ldr	r3, [pc, #492]	@ (8006cf0 <logger+0x330>)
 8006b04:	4a7b      	ldr	r2, [pc, #492]	@ (8006cf4 <logger+0x334>)
 8006b06:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8006b08:	f000 fa3a 	bl	8006f80 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8006b0c:	4b6e      	ldr	r3, [pc, #440]	@ (8006cc8 <logger+0x308>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8006b12:	e002      	b.n	8006b1a <logger+0x15a>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	e000      	b.n	8006b1a <logger+0x15a>
			goto comp_event;
 8006b18:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8006b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8006cc8 <logger+0x308>)
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d130      	bne.n	8006b84 <logger+0x1c4>
			goto ask_CE_end;
		}
ask_CE_start:
 8006b22:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8006b24:	4b74      	ldr	r3, [pc, #464]	@ (8006cf8 <logger+0x338>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05a      	beq.n	8006be2 <logger+0x222>
			goto ask_CE_start_01;
 8006b2c:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8006b2e:	4b68      	ldr	r3, [pc, #416]	@ (8006cd0 <logger+0x310>)
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	4b70      	ldr	r3, [pc, #448]	@ (8006cfc <logger+0x33c>)
 8006b3a:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8006b3c:	4b64      	ldr	r3, [pc, #400]	@ (8006cd0 <logger+0x310>)
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	4b6e      	ldr	r3, [pc, #440]	@ (8006cfc <logger+0x33c>)
 8006b44:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8006b46:	4b64      	ldr	r3, [pc, #400]	@ (8006cd8 <logger+0x318>)
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	4b6a      	ldr	r3, [pc, #424]	@ (8006cfc <logger+0x33c>)
 8006b52:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8006b54:	4b60      	ldr	r3, [pc, #384]	@ (8006cd8 <logger+0x318>)
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4b68      	ldr	r3, [pc, #416]	@ (8006cfc <logger+0x33c>)
 8006b5c:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8006b5e:	4b67      	ldr	r3, [pc, #412]	@ (8006cfc <logger+0x33c>)
 8006b60:	2202      	movs	r2, #2
 8006b62:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8006b64:	4b5d      	ldr	r3, [pc, #372]	@ (8006cdc <logger+0x31c>)
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	4b64      	ldr	r3, [pc, #400]	@ (8006cfc <logger+0x33c>)
 8006b6a:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce0 <logger+0x320>)
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	4b62      	ldr	r3, [pc, #392]	@ (8006cfc <logger+0x33c>)
 8006b72:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8006b74:	4b52      	ldr	r3, [pc, #328]	@ (8006cc0 <logger+0x300>)
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	4b60      	ldr	r3, [pc, #384]	@ (8006cfc <logger+0x33c>)
 8006b7a:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8006b7c:	4b52      	ldr	r3, [pc, #328]	@ (8006cc8 <logger+0x308>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8006b82:	e031      	b.n	8006be8 <logger+0x228>
			goto ask_CE_end;
 8006b84:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8006b86:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf8 <logger+0x338>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d12b      	bne.n	8006be6 <logger+0x226>
			goto desh_event;
		}
comp_event_end:
 8006b8e:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8006b90:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd0 <logger+0x310>)
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	0a1b      	lsrs	r3, r3, #8
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b58      	ldr	r3, [pc, #352]	@ (8006cfc <logger+0x33c>)
 8006b9c:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8006b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd0 <logger+0x310>)
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	4b55      	ldr	r3, [pc, #340]	@ (8006cfc <logger+0x33c>)
 8006ba6:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8006ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd8 <logger+0x318>)
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4b52      	ldr	r3, [pc, #328]	@ (8006cfc <logger+0x33c>)
 8006bb4:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8006bb6:	4b48      	ldr	r3, [pc, #288]	@ (8006cd8 <logger+0x318>)
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8006cfc <logger+0x33c>)
 8006bbe:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8006bc0:	4b49      	ldr	r3, [pc, #292]	@ (8006ce8 <logger+0x328>)
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006cfc <logger+0x33c>)
 8006bc6:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8006bc8:	4b48      	ldr	r3, [pc, #288]	@ (8006cec <logger+0x32c>)
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8006cfc <logger+0x33c>)
 8006bce:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8006bd0:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <logger+0x330>)
 8006bd2:	4a4b      	ldr	r2, [pc, #300]	@ (8006d00 <logger+0x340>)
 8006bd4:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8006bd6:	f000 f9d3 	bl	8006f80 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8006bda:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc8 <logger+0x308>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8006be0:	e002      	b.n	8006be8 <logger+0x228>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	e000      	b.n	8006be8 <logger+0x228>
			goto desh_event;
 8006be6:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8006be8:	4b37      	ldr	r3, [pc, #220]	@ (8006cc8 <logger+0x308>)
 8006bea:	789b      	ldrb	r3, [r3, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d12f      	bne.n	8006c50 <logger+0x290>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8006bf0:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8006bf2:	4b30      	ldr	r3, [pc, #192]	@ (8006cb4 <logger+0x2f4>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d159      	bne.n	8006cae <logger+0x2ee>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006bfa:	4b35      	ldr	r3, [pc, #212]	@ (8006cd0 <logger+0x310>)
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <logger+0x344>)
 8006c06:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8006c08:	4b31      	ldr	r3, [pc, #196]	@ (8006cd0 <logger+0x310>)
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d04 <logger+0x344>)
 8006c10:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8006c12:	4b31      	ldr	r3, [pc, #196]	@ (8006cd8 <logger+0x318>)
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	4b39      	ldr	r3, [pc, #228]	@ (8006d04 <logger+0x344>)
 8006c1e:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8006c20:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd8 <logger+0x318>)
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	4b37      	ldr	r3, [pc, #220]	@ (8006d04 <logger+0x344>)
 8006c28:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8006c2a:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <logger+0x344>)
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8006c30:	4b2a      	ldr	r3, [pc, #168]	@ (8006cdc <logger+0x31c>)
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	4b33      	ldr	r3, [pc, #204]	@ (8006d04 <logger+0x344>)
 8006c36:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8006c38:	4b29      	ldr	r3, [pc, #164]	@ (8006ce0 <logger+0x320>)
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	4b31      	ldr	r3, [pc, #196]	@ (8006d04 <logger+0x344>)
 8006c3e:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8006c40:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc0 <logger+0x300>)
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	4b2f      	ldr	r3, [pc, #188]	@ (8006d04 <logger+0x344>)
 8006c46:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8006c48:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc8 <logger+0x308>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8006c4e:	e05e      	b.n	8006d0e <logger+0x34e>
			goto ask_DhE_end;
 8006c50:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 8006c52:	4b18      	ldr	r3, [pc, #96]	@ (8006cb4 <logger+0x2f4>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d058      	beq.n	8006d0c <logger+0x34c>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8006c5a:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd0 <logger+0x310>)
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	4b27      	ldr	r3, [pc, #156]	@ (8006d04 <logger+0x344>)
 8006c68:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8006c6a:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <logger+0x310>)
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	4b24      	ldr	r3, [pc, #144]	@ (8006d04 <logger+0x344>)
 8006c72:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8006c74:	4b18      	ldr	r3, [pc, #96]	@ (8006cd8 <logger+0x318>)
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4b21      	ldr	r3, [pc, #132]	@ (8006d04 <logger+0x344>)
 8006c80:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 8006c82:	4b15      	ldr	r3, [pc, #84]	@ (8006cd8 <logger+0x318>)
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b1e      	ldr	r3, [pc, #120]	@ (8006d04 <logger+0x344>)
 8006c8a:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 8006c8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ce8 <logger+0x328>)
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	4b1c      	ldr	r3, [pc, #112]	@ (8006d04 <logger+0x344>)
 8006c92:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <logger+0x32c>)
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	4b1a      	ldr	r3, [pc, #104]	@ (8006d04 <logger+0x344>)
 8006c9a:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 8006c9c:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <logger+0x330>)
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d08 <logger+0x348>)
 8006ca0:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8006ca2:	f000 f96d 	bl	8006f80 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8006ca6:	4b08      	ldr	r3, [pc, #32]	@ (8006cc8 <logger+0x308>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 8006cac:	e02f      	b.n	8006d0e <logger+0x34e>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	e02d      	b.n	8006d0e <logger+0x34e>
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	20000bb8 	.word	0x20000bb8
 8006cb8:	20000e24 	.word	0x20000e24
 8006cbc:	200000bc 	.word	0x200000bc
 8006cc0:	20000bee 	.word	0x20000bee
 8006cc4:	20000f70 	.word	0x20000f70
 8006cc8:	20000ee8 	.word	0x20000ee8
 8006ccc:	20000c5c 	.word	0x20000c5c
 8006cd0:	20000dd0 	.word	0x20000dd0
 8006cd4:	20000f0c 	.word	0x20000f0c
 8006cd8:	20000dd2 	.word	0x20000dd2
 8006cdc:	20000bd0 	.word	0x20000bd0
 8006ce0:	20000bd1 	.word	0x20000bd1
 8006ce4:	20000ef8 	.word	0x20000ef8
 8006ce8:	20000bd2 	.word	0x20000bd2
 8006cec:	20000bd3 	.word	0x20000bd3
 8006cf0:	20000dc8 	.word	0x20000dc8
 8006cf4:	20000f10 	.word	0x20000f10
 8006cf8:	20000bc4 	.word	0x20000bc4
 8006cfc:	20000f20 	.word	0x20000f20
 8006d00:	20000f24 	.word	0x20000f24
 8006d04:	20000f34 	.word	0x20000f34
 8006d08:	20000f38 	.word	0x20000f38
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8006d0c:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8006d0e:	4b78      	ldr	r3, [pc, #480]	@ (8006ef0 <logger+0x530>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d14c      	bne.n	8006db0 <logger+0x3f0>
			goto alarm_event;//	jrne	alarm_event
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8006d16:	4b77      	ldr	r3, [pc, #476]	@ (8006ef4 <logger+0x534>)
 8006d18:	78db      	ldrb	r3, [r3, #3]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d04a      	beq.n	8006db4 <logger+0x3f4>
			goto power_event_end;
 8006d1e:	46c0      	nop			@ (mov r8, r8)
		}
		goto alarm_event;//	jra		alarm_event
power_event_end:
		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
 8006d20:	4b75      	ldr	r3, [pc, #468]	@ (8006ef8 <logger+0x538>)
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	4b75      	ldr	r3, [pc, #468]	@ (8006efc <logger+0x53c>)
 8006d26:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8006d28:	4b75      	ldr	r3, [pc, #468]	@ (8006f00 <logger+0x540>)
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	4b73      	ldr	r3, [pc, #460]	@ (8006efc <logger+0x53c>)
 8006d2e:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
 8006d30:	4b74      	ldr	r3, [pc, #464]	@ (8006f04 <logger+0x544>)
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	4b71      	ldr	r3, [pc, #452]	@ (8006efc <logger+0x53c>)
 8006d36:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8006d38:	4b73      	ldr	r3, [pc, #460]	@ (8006f08 <logger+0x548>)
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006efc <logger+0x53c>)
 8006d3e:	71da      	strb	r2, [r3, #7]
		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8006d40:	4b6e      	ldr	r3, [pc, #440]	@ (8006efc <logger+0x53c>)
 8006d42:	2204      	movs	r2, #4
 8006d44:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 8006d46:	4b71      	ldr	r3, [pc, #452]	@ (8006f0c <logger+0x54c>)
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8006efc <logger+0x53c>)
 8006d4c:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8006d4e:	4b70      	ldr	r3, [pc, #448]	@ (8006f10 <logger+0x550>)
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	4b6a      	ldr	r3, [pc, #424]	@ (8006efc <logger+0x53c>)
 8006d54:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 8006d56:	4b6f      	ldr	r3, [pc, #444]	@ (8006f14 <logger+0x554>)
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	4b68      	ldr	r3, [pc, #416]	@ (8006efc <logger+0x53c>)
 8006d5c:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006f18 <logger+0x558>)
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	4b64      	ldr	r3, [pc, #400]	@ (8006efc <logger+0x53c>)
 8006d6a:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8006d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f18 <logger+0x558>)
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	4b62      	ldr	r3, [pc, #392]	@ (8006efc <logger+0x53c>)
 8006d74:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8006d76:	4b69      	ldr	r3, [pc, #420]	@ (8006f1c <logger+0x55c>)
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	4b5e      	ldr	r3, [pc, #376]	@ (8006efc <logger+0x53c>)
 8006d82:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 8006d84:	4b65      	ldr	r3, [pc, #404]	@ (8006f1c <logger+0x55c>)
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8006efc <logger+0x53c>)
 8006d8c:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 8006d8e:	4b64      	ldr	r3, [pc, #400]	@ (8006f20 <logger+0x560>)
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	4b5a      	ldr	r3, [pc, #360]	@ (8006efc <logger+0x53c>)
 8006d94:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8006d96:	4b63      	ldr	r3, [pc, #396]	@ (8006f24 <logger+0x564>)
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	4b58      	ldr	r3, [pc, #352]	@ (8006efc <logger+0x53c>)
 8006d9c:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 8006d9e:	4b62      	ldr	r3, [pc, #392]	@ (8006f28 <logger+0x568>)
 8006da0:	4a62      	ldr	r2, [pc, #392]	@ (8006f2c <logger+0x56c>)
 8006da2:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8006da4:	f000 f8ec 	bl	8006f80 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8006da8:	4b52      	ldr	r3, [pc, #328]	@ (8006ef4 <logger+0x534>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	70da      	strb	r2, [r3, #3]
		goto alarm_event;//jra alarm_event;	/continúa
 8006dae:	e002      	b.n	8006db6 <logger+0x3f6>
			goto alarm_event;//	jrne	alarm_event
 8006db0:	46c0      	nop			@ (mov r8, r8)
 8006db2:	e000      	b.n	8006db6 <logger+0x3f6>
		goto alarm_event;//	jra		alarm_event
 8006db4:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 8006db6:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8006db8:	4b5d      	ldr	r3, [pc, #372]	@ (8006f30 <logger+0x570>)
 8006dba:	795b      	ldrb	r3, [r3, #5]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <logger+0x40a>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 8006dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f34 <logger+0x574>)
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <logger+0x40e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8006dc8:	e000      	b.n	8006dcc <logger+0x40c>
			goto jmp_fin_logger;
 8006dca:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8006dcc:	e08d      	b.n	8006eea <logger+0x52a>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 8006dce:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 8006dd0:	4b59      	ldr	r3, [pc, #356]	@ (8006f38 <logger+0x578>)
 8006dd2:	2251      	movs	r2, #81	@ 0x51
 8006dd4:	5c9b      	ldrb	r3, [r3, r2]
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	233c      	movs	r3, #60	@ 0x3c
 8006dda:	4353      	muls	r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	4b55      	ldr	r3, [pc, #340]	@ (8006f34 <logger+0x574>)
 8006de0:	801a      	strh	r2, [r3, #0]

        //DEBUG***********DEBUG---------DEBUG
        cntLogger_H = 120;  // valor de prueba a cada 10 segundos tomar muestras
 8006de2:	4b54      	ldr	r3, [pc, #336]	@ (8006f34 <logger+0x574>)
 8006de4:	2278      	movs	r2, #120	@ 0x78
 8006de6:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8006de8:	4b4b      	ldr	r3, [pc, #300]	@ (8006f18 <logger+0x558>)
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b52      	ldr	r3, [pc, #328]	@ (8006f3c <logger+0x57c>)
 8006df4:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 8006df6:	4b48      	ldr	r3, [pc, #288]	@ (8006f18 <logger+0x558>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8006f3c <logger+0x57c>)
 8006dfe:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 8006e00:	4b46      	ldr	r3, [pc, #280]	@ (8006f1c <logger+0x55c>)
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8006f3c <logger+0x57c>)
 8006e0c:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8006e0e:	4b43      	ldr	r3, [pc, #268]	@ (8006f1c <logger+0x55c>)
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	4b49      	ldr	r3, [pc, #292]	@ (8006f3c <logger+0x57c>)
 8006e16:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8006e18:	4b3c      	ldr	r3, [pc, #240]	@ (8006f0c <logger+0x54c>)
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	4b47      	ldr	r3, [pc, #284]	@ (8006f3c <logger+0x57c>)
 8006e1e:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8006e20:	4b3b      	ldr	r3, [pc, #236]	@ (8006f10 <logger+0x550>)
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	4b45      	ldr	r3, [pc, #276]	@ (8006f3c <logger+0x57c>)
 8006e26:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8006e28:	4b3d      	ldr	r3, [pc, #244]	@ (8006f20 <logger+0x560>)
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	4b43      	ldr	r3, [pc, #268]	@ (8006f3c <logger+0x57c>)
 8006e2e:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <logger+0x564>)
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	4b41      	ldr	r3, [pc, #260]	@ (8006f3c <logger+0x57c>)
 8006e36:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8006e38:	4b36      	ldr	r3, [pc, #216]	@ (8006f14 <logger+0x554>)
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f3c <logger+0x57c>)
 8006e3e:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8006e40:	4b3f      	ldr	r3, [pc, #252]	@ (8006f40 <logger+0x580>)
 8006e42:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <logger+0x584>)
 8006e44:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8006e46:	4b38      	ldr	r3, [pc, #224]	@ (8006f28 <logger+0x568>)
 8006e48:	4a3c      	ldr	r2, [pc, #240]	@ (8006f3c <logger+0x57c>)
 8006e4a:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 8006e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f48 <logger+0x588>)
 8006e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006f4c <logger+0x58c>)
 8006e50:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 8006e52:	4b3f      	ldr	r3, [pc, #252]	@ (8006f50 <logger+0x590>)
 8006e54:	2260      	movs	r2, #96	@ 0x60
 8006e56:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 8006e58:	4b3e      	ldr	r3, [pc, #248]	@ (8006f54 <logger+0x594>)
 8006e5a:	2209      	movs	r2, #9
 8006e5c:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8006e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f58 <logger+0x598>)
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	4b3e      	ldr	r3, [pc, #248]	@ (8006f5c <logger+0x59c>)
 8006e64:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 8006e66:	4b3e      	ldr	r3, [pc, #248]	@ (8006f60 <logger+0x5a0>)
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f64 <logger+0x5a4>)
 8006e6c:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8006e6e:	4b39      	ldr	r3, [pc, #228]	@ (8006f54 <logger+0x594>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	0019      	movs	r1, r3
 8006e74:	2080      	movs	r0, #128	@ 0x80
 8006e76:	f7f9 f9d9 	bl	800022c <__divsi3>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f68 <logger+0x5a8>)
 8006e80:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 8006e82:	4b39      	ldr	r3, [pc, #228]	@ (8006f68 <logger+0x5a8>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	4a33      	ldr	r2, [pc, #204]	@ (8006f54 <logger+0x594>)
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	4353      	muls	r3, r2
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	4b37      	ldr	r3, [pc, #220]	@ (8006f6c <logger+0x5ac>)
 8006e90:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         cntRegDATA++;	//incw	X
 8006e92:	4b37      	ldr	r3, [pc, #220]	@ (8006f70 <logger+0x5b0>)
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	4b35      	ldr	r3, [pc, #212]	@ (8006f70 <logger+0x5b0>)
 8006e9c:	801a      	strh	r2, [r3, #0]
         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 8006e9e:	4b34      	ldr	r3, [pc, #208]	@ (8006f70 <logger+0x5b0>)
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	4b34      	ldr	r3, [pc, #208]	@ (8006f74 <logger+0x5b4>)
 8006ea4:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 8006ea6:	4b34      	ldr	r3, [pc, #208]	@ (8006f78 <logger+0x5b8>)
 8006ea8:	4a34      	ldr	r2, [pc, #208]	@ (8006f7c <logger+0x5bc>)
 8006eaa:	601a      	str	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 8006eac:	f000 f8dc 	bl	8007068 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <logger+0x59c>)
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	4b28      	ldr	r3, [pc, #160]	@ (8006f58 <logger+0x598>)
 8006eb6:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f64 <logger+0x5a4>)
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	4b28      	ldr	r3, [pc, #160]	@ (8006f60 <logger+0x5a0>)
 8006ebe:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8006ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <logger+0x570>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4053      	eors	r3, r2
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <logger+0x51c>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 8006ece:	4b18      	ldr	r3, [pc, #96]	@ (8006f30 <logger+0x570>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 8006ed4:	4b16      	ldr	r3, [pc, #88]	@ (8006f30 <logger+0x570>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 8006eda:	e006      	b.n	8006eea <logger+0x52a>
        	 	 goto noFullLoggerDATA;
 8006edc:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 8006ede:	e004      	b.n	8006eea <logger+0x52a>
		goto fin_logger; //jp fin_logger
 8006ee0:	46c0      	nop			@ (mov r8, r8)
 8006ee2:	e002      	b.n	8006eea <logger+0x52a>
	    goto fin_logger; //fin_logger
 8006ee4:	46c0      	nop			@ (mov r8, r8)
 8006ee6:	e000      	b.n	8006eea <logger+0x52a>
		goto fin_logger; // jp fin_logger
 8006ee8:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 8006eea:	46c0      	nop			@ (mov r8, r8)
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	200010be 	.word	0x200010be
 8006ef4:	20000ee8 	.word	0x20000ee8
 8006ef8:	20000388 	.word	0x20000388
 8006efc:	20000f48 	.word	0x20000f48
 8006f00:	20000389 	.word	0x20000389
 8006f04:	2000038a 	.word	0x2000038a
 8006f08:	2000038b 	.word	0x2000038b
 8006f0c:	20000bd0 	.word	0x20000bd0
 8006f10:	20000bd1 	.word	0x20000bd1
 8006f14:	20000bee 	.word	0x20000bee
 8006f18:	20000dd0 	.word	0x20000dd0
 8006f1c:	20000dd2 	.word	0x20000dd2
 8006f20:	20000bd2 	.word	0x20000bd2
 8006f24:	20000bd3 	.word	0x20000bd3
 8006f28:	20000dc8 	.word	0x20000dc8
 8006f2c:	20000f4c 	.word	0x20000f4c
 8006f30:	20000e24 	.word	0x20000e24
 8006f34:	20000db8 	.word	0x20000db8
 8006f38:	200000bc 	.word	0x200000bc
 8006f3c:	20000dd4 	.word	0x20000dd4
 8006f40:	20000dc4 	.word	0x20000dc4
 8006f44:	20000cac 	.word	0x20000cac
 8006f48:	20000dc0 	.word	0x20000dc0
 8006f4c:	0803c000 	.word	0x0803c000
 8006f50:	20000dbd 	.word	0x20000dbd
 8006f54:	20000dbe 	.word	0x20000dbe
 8006f58:	20000dcd 	.word	0x20000dcd
 8006f5c:	20000dba 	.word	0x20000dba
 8006f60:	20000dcc 	.word	0x20000dcc
 8006f64:	20000dbb 	.word	0x20000dbb
 8006f68:	20000920 	.word	0x20000920
 8006f6c:	20000b77 	.word	0x20000b77
 8006f70:	2000105a 	.word	0x2000105a
 8006f74:	2000105e 	.word	0x2000105e
 8006f78:	20001060 	.word	0x20001060
 8006f7c:	20000394 	.word	0x20000394

08006f80 <load_event>:
void load_event(){
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 8006f84:	4b27      	ldr	r3, [pc, #156]	@ (8007024 <load_event+0xa4>)
 8006f86:	4a28      	ldr	r2, [pc, #160]	@ (8007028 <load_event+0xa8>)
 8006f88:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 8006f8a:	4b28      	ldr	r3, [pc, #160]	@ (800702c <load_event+0xac>)
 8006f8c:	4a28      	ldr	r2, [pc, #160]	@ (8007030 <load_event+0xb0>)
 8006f8e:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 8006f90:	4b28      	ldr	r3, [pc, #160]	@ (8007034 <load_event+0xb4>)
 8006f92:	22a0      	movs	r2, #160	@ 0xa0
 8006f94:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 8006f96:	4b28      	ldr	r3, [pc, #160]	@ (8007038 <load_event+0xb8>)
 8006f98:	220e      	movs	r2, #14
 8006f9a:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 8006f9c:	4b27      	ldr	r3, [pc, #156]	@ (800703c <load_event+0xbc>)
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	4b27      	ldr	r3, [pc, #156]	@ (8007040 <load_event+0xc0>)
 8006fa2:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 8006fa4:	4b27      	ldr	r3, [pc, #156]	@ (8007044 <load_event+0xc4>)
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	4b27      	ldr	r3, [pc, #156]	@ (8007048 <load_event+0xc8>)
 8006faa:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 8006fac:	4b22      	ldr	r3, [pc, #136]	@ (8007038 <load_event+0xb8>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	2080      	movs	r0, #128	@ 0x80
 8006fb4:	f7f9 f93a 	bl	800022c <__divsi3>
 8006fb8:	0003      	movs	r3, r0
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	4b23      	ldr	r3, [pc, #140]	@ (800704c <load_event+0xcc>)
 8006fbe:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 8006fc0:	4b22      	ldr	r3, [pc, #136]	@ (800704c <load_event+0xcc>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007038 <load_event+0xb8>)
 8006fc6:	7812      	ldrb	r2, [r2, #0]
 8006fc8:	4353      	muls	r3, r2
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	4b20      	ldr	r3, [pc, #128]	@ (8007050 <load_event+0xd0>)
 8006fce:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 8006fd0:	4b20      	ldr	r3, [pc, #128]	@ (8007054 <load_event+0xd4>)
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <load_event+0xd4>)
 8006fda:	801a      	strh	r2, [r3, #0]
		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007054 <load_event+0xd4>)
 8006fde:	881a      	ldrh	r2, [r3, #0]
 8006fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8007058 <load_event+0xd8>)
 8006fe2:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <load_event+0xdc>)
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <load_event+0xe0>)
 8006fe8:	601a      	str	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 8006fea:	f000 f83d 	bl	8007068 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 8006fee:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <load_event+0xc0>)
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	4b12      	ldr	r3, [pc, #72]	@ (800703c <load_event+0xbc>)
 8006ff4:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 8006ff6:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <load_event+0xc8>)
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <load_event+0xc4>)
 8006ffc:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <load_event+0xe4>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	4053      	eors	r3, r2
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <load_event+0x9a>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 800700c:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <load_event+0xe4>)
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 8007012:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <load_event+0xe4>)
 8007014:	2201      	movs	r2, #1
 8007016:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 8007018:	e000      	b.n	800701c <load_event+0x9c>
			goto noFullLoggerEVENT;
 800701a:	46c0      	nop			@ (mov r8, r8)
}
 800701c:	46c0      	nop			@ (mov r8, r8)
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	20000dc4 	.word	0x20000dc4
 8007028:	20000d2c 	.word	0x20000d2c
 800702c:	20000dc0 	.word	0x20000dc0
 8007030:	08037000 	.word	0x08037000
 8007034:	20000dbd 	.word	0x20000dbd
 8007038:	20000dbe 	.word	0x20000dbe
 800703c:	20000dcf 	.word	0x20000dcf
 8007040:	20000dba 	.word	0x20000dba
 8007044:	20000dce 	.word	0x20000dce
 8007048:	20000dbb 	.word	0x20000dbb
 800704c:	20000920 	.word	0x20000920
 8007050:	20000b77 	.word	0x20000b77
 8007054:	2000105c 	.word	0x2000105c
 8007058:	2000105e 	.word	0x2000105e
 800705c:	20001060 	.word	0x20001060
 8007060:	20000396 	.word	0x20000396
 8007064:	20000e24 	.word	0x20000e24

08007068 <load_buffer_logger>:

void load_buffer_logger(){
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 800706e:	4b45      	ldr	r3, [pc, #276]	@ (8007184 <load_buffer_logger+0x11c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 8007074:	4b44      	ldr	r3, [pc, #272]	@ (8007188 <load_buffer_logger+0x120>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 800707a:	4b44      	ldr	r3, [pc, #272]	@ (800718c <load_buffer_logger+0x124>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	001a      	movs	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	189b      	adds	r3, r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 8007086:	4b42      	ldr	r3, [pc, #264]	@ (8007190 <load_buffer_logger+0x128>)
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781a      	ldrb	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	3301      	adds	r3, #1
 800709e:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 80070a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007190 <load_buffer_logger+0x128>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	4b39      	ldr	r3, [pc, #228]	@ (8007190 <load_buffer_logger+0x128>)
 80070aa:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 80070ac:	4b37      	ldr	r3, [pc, #220]	@ (800718c <load_buffer_logger+0x124>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	4b35      	ldr	r3, [pc, #212]	@ (800718c <load_buffer_logger+0x124>)
 80070b6:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 80070b8:	4b34      	ldr	r3, [pc, #208]	@ (800718c <load_buffer_logger+0x124>)
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	4b35      	ldr	r3, [pc, #212]	@ (8007194 <load_buffer_logger+0x12c>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d352      	bcc.n	800716a <load_buffer_logger+0x102>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 80070c4:	4b30      	ldr	r3, [pc, #192]	@ (8007188 <load_buffer_logger+0x120>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	337f      	adds	r3, #127	@ 0x7f
 80070ca:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	4b31      	ldr	r3, [pc, #196]	@ (8007198 <load_buffer_logger+0x130>)
 80070d2:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 80070d4:	4b30      	ldr	r3, [pc, #192]	@ (8007198 <load_buffer_logger+0x130>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007198 <load_buffer_logger+0x130>)
 80070de:	701a      	strb	r2, [r3, #0]
		*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 80070e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007198 <load_buffer_logger+0x130>)
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 80070f4:	4b29      	ldr	r3, [pc, #164]	@ (800719c <load_buffer_logger+0x134>)
 80070f6:	22aa      	movs	r2, #170	@ 0xaa
 80070f8:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 80070fa:	4b29      	ldr	r3, [pc, #164]	@ (80071a0 <load_buffer_logger+0x138>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	b29a      	uxth	r2, r3
 8007102:	4b28      	ldr	r3, [pc, #160]	@ (80071a4 <load_buffer_logger+0x13c>)
 8007104:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 8007106:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <load_buffer_logger+0x140>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a26      	ldr	r2, [pc, #152]	@ (80071a4 <load_buffer_logger+0x13c>)
 800710c:	8812      	ldrh	r2, [r2, #0]
 800710e:	189a      	adds	r2, r3, r2
 8007110:	4b26      	ldr	r3, [pc, #152]	@ (80071ac <load_buffer_logger+0x144>)
 8007112:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 8007114:	4b1c      	ldr	r3, [pc, #112]	@ (8007188 <load_buffer_logger+0x120>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	4b25      	ldr	r3, [pc, #148]	@ (80071b0 <load_buffer_logger+0x148>)
 800711a:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 8007120:	f7fd fed4 	bl	8004ecc <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 8007124:	f7fd fdee 	bl	8004d04 <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 8007128:	f7fd fdb2 	bl	8004c90 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 800712c:	4b1c      	ldr	r3, [pc, #112]	@ (80071a0 <load_buffer_logger+0x138>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	4b1a      	ldr	r3, [pc, #104]	@ (80071a0 <load_buffer_logger+0x138>)
 8007136:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 8007138:	4b19      	ldr	r3, [pc, #100]	@ (80071a0 <load_buffer_logger+0x138>)
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <load_buffer_logger+0x14c>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d306      	bcc.n	8007152 <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 8007144:	4b16      	ldr	r3, [pc, #88]	@ (80071a0 <load_buffer_logger+0x138>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 800714a:	4b1b      	ldr	r3, [pc, #108]	@ (80071b8 <load_buffer_logger+0x150>)
 800714c:	2201      	movs	r2, #1
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	e000      	b.n	8007154 <load_buffer_logger+0xec>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 8007152:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 8007154:	f7fd fd62 	bl	8004c1c <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 800715c:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <load_buffer_logger+0x120>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 8007162:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <load_buffer_logger+0x124>)
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e000      	b.n	800716c <load_buffer_logger+0x104>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 800716a:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 800716c:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <load_buffer_logger+0x128>)
 800716e:	781a      	ldrb	r2, [r3, #0]
 8007170:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <load_buffer_logger+0x154>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d200      	bcs.n	800717a <load_buffer_logger+0x112>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 8007178:	e788      	b.n	800708c <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 800717a:	46c0      	nop			@ (mov r8, r8)

}
 800717c:	46c0      	nop			@ (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	b004      	add	sp, #16
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000dc8 	.word	0x20000dc8
 8007188:	20000dc4 	.word	0x20000dc4
 800718c:	20000dbb 	.word	0x20000dbb
 8007190:	20000dbc 	.word	0x20000dbc
 8007194:	20000b77 	.word	0x20000b77
 8007198:	20000920 	.word	0x20000920
 800719c:	20000dac 	.word	0x20000dac
 80071a0:	20000dba 	.word	0x20000dba
 80071a4:	20000922 	.word	0x20000922
 80071a8:	20000dc0 	.word	0x20000dc0
 80071ac:	20000db0 	.word	0x20000db0
 80071b0:	20000db4 	.word	0x20000db4
 80071b4:	20000dbd 	.word	0x20000dbd
 80071b8:	20000e24 	.word	0x20000e24
 80071bc:	20000dbe 	.word	0x20000dbe

080071c0 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0

    return timemilis;
 80071c4:	4b02      	ldr	r3, [pc, #8]	@ (80071d0 <millis+0x10>)
 80071c6:	681b      	ldr	r3, [r3, #0]
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	2000092c 	.word	0x2000092c

080071d4 <configura_perif_2>:

	HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);
}

void configura_perif_2(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80071d8:	f000 feee 	bl	8007fb8 <MX_GPIO_Init>
	  MX_DMA_Init();
 80071dc:	f000 fec6 	bl	8007f6c <MX_DMA_Init>
	  MX_ADC1_Init();
 80071e0:	f000 fafa 	bl	80077d8 <MX_ADC1_Init>
	  MX_I2C1_Init();
 80071e4:	f000 fc8a 	bl	8007afc <MX_I2C1_Init>
	  MX_TIM3_Init();
 80071e8:	f000 fd62 	bl	8007cb0 <MX_TIM3_Init>
	  MX_TIM6_Init();
 80071ec:	f000 fde0 	bl	8007db0 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80071f0:	f000 fe1e 	bl	8007e30 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80071f4:	f000 fe6a 	bl	8007ecc <MX_USART4_UART_Init>
	  //MX_IWDG_Init();

}
 80071f8:	46c0      	nop			@ (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 8007204:	4b21      	ldr	r3, [pc, #132]	@ (800728c <check_Tick_1ms+0x8c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	4b20      	ldr	r3, [pc, #128]	@ (800728c <check_Tick_1ms+0x8c>)
 800720c:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)			// contador prescala 1ms =
 800720e:	4b1f      	ldr	r3, [pc, #124]	@ (800728c <check_Tick_1ms+0x8c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b03      	cmp	r3, #3
 8007214:	dd0f      	ble.n	8007236 <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 8007216:	4b1d      	ldr	r3, [pc, #116]	@ (800728c <check_Tick_1ms+0x8c>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;								// Manuel, levanta flag 1ms
 800721c:	4b1c      	ldr	r3, [pc, #112]	@ (8007290 <check_Tick_1ms+0x90>)
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 8007222:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <check_Tick_1ms+0x94>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <check_Tick_1ms+0x94>)
 800722a:	601a      	str	r2, [r3, #0]
						timemilis++;			// variable contadora de milisegundos
 800722c:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <check_Tick_1ms+0x98>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	4b19      	ldr	r3, [pc, #100]	@ (8007298 <check_Tick_1ms+0x98>)
 8007234:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)					// contador prescala 10ms
 8007236:	4b17      	ldr	r3, [pc, #92]	@ (8007294 <check_Tick_1ms+0x94>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b09      	cmp	r3, #9
 800723c:	dd0a      	ble.n	8007254 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 800723e:	4b15      	ldr	r3, [pc, #84]	@ (8007294 <check_Tick_1ms+0x94>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
						tick_10ms =1;								// flag base de tiempo 10ms
 8007244:	4b15      	ldr	r3, [pc, #84]	@ (800729c <check_Tick_1ms+0x9c>)
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 800724a:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <check_Tick_1ms+0xa0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <check_Tick_1ms+0xa0>)
 8007252:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)				// contador prescala 100ms
 8007254:	4b12      	ldr	r3, [pc, #72]	@ (80072a0 <check_Tick_1ms+0xa0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b09      	cmp	r3, #9
 800725a:	dd0a      	ble.n	8007272 <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 800725c:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <check_Tick_1ms+0xa0>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
						tick_100ms =1;								// flag base de tiempo 100ms
 8007262:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <check_Tick_1ms+0xa4>)
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 8007268:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <check_Tick_1ms+0xa8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	4b0e      	ldr	r3, [pc, #56]	@ (80072a8 <check_Tick_1ms+0xa8>)
 8007270:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)					// contador prescala 1s
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <check_Tick_1ms+0xa8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b09      	cmp	r3, #9
 8007278:	dd05      	ble.n	8007286 <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 800727a:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <check_Tick_1ms+0xa8>)
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8007280:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <check_Tick_1ms+0xac>)
 8007282:	2201      	movs	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20000930 	.word	0x20000930
 8007290:	20000924 	.word	0x20000924
 8007294:	20000934 	.word	0x20000934
 8007298:	2000092c 	.word	0x2000092c
 800729c:	20000925 	.word	0x20000925
 80072a0:	20000938 	.word	0x20000938
 80072a4:	20000926 	.word	0x20000926
 80072a8:	2000093c 	.word	0x2000093c
 80072ac:	20000927 	.word	0x20000927

080072b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initEEPROMEmulated(); // Init EEPROM Emulated
 80072b6:	f7f9 fa1f 	bl	80006f8 <initEEPROMEmulated>
	timeRstBLE = 1;
 80072ba:	4bd6      	ldr	r3, [pc, #856]	@ (8007614 <main+0x364>)
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
	inicio ();
 80072c0:	f7ff f940 	bl	8006544 <inicio>
	ProcesosC = 6;
 80072c4:	4bd4      	ldr	r3, [pc, #848]	@ (8007618 <main+0x368>)
 80072c6:	2206      	movs	r2, #6
 80072c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072ca:	f007 fa36 	bl	800e73a <HAL_Init>

  /* USER CODE BEGIN Init */
  configura_perif_2();
 80072ce:	f7ff ff81 	bl	80071d4 <configura_perif_2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072d2:	f000 fa35 	bl	8007740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072d6:	f000 fe6f 	bl	8007fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80072da:	f000 fe47 	bl	8007f6c <MX_DMA_Init>
  MX_ADC1_Init();
 80072de:	f000 fa7b 	bl	80077d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80072e2:	f000 fc0b 	bl	8007afc <MX_I2C1_Init>
  MX_IWDG_Init();
 80072e6:	f000 fc4b 	bl	8007b80 <MX_IWDG_Init>
  MX_RTC_Init();
 80072ea:	f000 fc6b 	bl	8007bc4 <MX_RTC_Init>
  MX_TIM3_Init();
 80072ee:	f000 fcdf 	bl	8007cb0 <MX_TIM3_Init>
  MX_TIM6_Init();
 80072f2:	f000 fd5d 	bl	8007db0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80072f6:	f000 fd9b 	bl	8007e30 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80072fa:	f000 fde7 	bl	8007ecc <MX_USART4_UART_Init>
  MX_FLASH_Init();
 80072fe:	f000 fbb7 	bl	8007a70 <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 8007302:	f7fa fec7 	bl	8002094 <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin((uint8_t)findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeAddModBus]));
 8007306:	4bc5      	ldr	r3, [pc, #788]	@ (800761c <main+0x36c>)
 8007308:	4ac5      	ldr	r2, [pc, #788]	@ (8007620 <main+0x370>)
 800730a:	0019      	movs	r1, r3
 800730c:	0010      	movs	r0, r2
 800730e:	f7f9 fbd5 	bl	8000abc <findLastValue>
 8007312:	0003      	movs	r3, r0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	0018      	movs	r0, r3
 8007318:	f7fa fec2 	bl	80020a0 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 800731c:	4bc1      	ldr	r3, [pc, #772]	@ (8007624 <main+0x374>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 8007322:	4bc1      	ldr	r3, [pc, #772]	@ (8007628 <main+0x378>)
 8007324:	2200      	movs	r2, #0
 8007326:	2104      	movs	r1, #4
 8007328:	0018      	movs	r0, r3
 800732a:	f009 febe 	bl	80110aa <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 800732e:	4bbf      	ldr	r3, [pc, #764]	@ (800762c <main+0x37c>)
 8007330:	2203      	movs	r2, #3
 8007332:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 8007334:	4bb7      	ldr	r3, [pc, #732]	@ (8007614 <main+0x364>)
 8007336:	2208      	movs	r2, #8
 8007338:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 800733a:	4bbc      	ldr	r3, [pc, #752]	@ (800762c <main+0x37c>)
 800733c:	2201      	movs	r2, #1
 800733e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8007340:	4bbb      	ldr	r3, [pc, #748]	@ (8007630 <main+0x380>)
 8007342:	2201      	movs	r2, #1
 8007344:	2120      	movs	r1, #32
 8007346:	0018      	movs	r0, r3
 8007348:	f009 feaf 	bl	80110aa <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800734c:	2007      	movs	r0, #7
 800734e:	f008 fcd0 	bl	800fcf2 <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8007352:	4bb8      	ldr	r3, [pc, #736]	@ (8007634 <main+0x384>)
 8007354:	0018      	movs	r0, r3
 8007356:	f00e fb5f 	bl	8015a18 <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 800735a:	e00e      	b.n	800737a <main+0xca>
  {
		Count_Test2++;//  eliminar JTA buzzer
 800735c:	4bb6      	ldr	r3, [pc, #728]	@ (8007638 <main+0x388>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	4bb5      	ldr	r3, [pc, #724]	@ (8007638 <main+0x388>)
 8007364:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 8007366:	4bb4      	ldr	r3, [pc, #720]	@ (8007638 <main+0x388>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4ab4      	ldr	r2, [pc, #720]	@ (800763c <main+0x38c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d104      	bne.n	800737a <main+0xca>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8007370:	4bb3      	ldr	r3, [pc, #716]	@ (8007640 <main+0x390>)
 8007372:	2104      	movs	r1, #4
 8007374:	0018      	movs	r0, r3
 8007376:	f00e fd35 	bl	8015de4 <HAL_TIM_PWM_Stop>
  while(Count_Test2 < 130000)
 800737a:	4baf      	ldr	r3, [pc, #700]	@ (8007638 <main+0x388>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4aaf      	ldr	r2, [pc, #700]	@ (800763c <main+0x38c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d9eb      	bls.n	800735c <main+0xac>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
  }
  Count_Test2 = 0;
 8007384:	4bac      	ldr	r3, [pc, #688]	@ (8007638 <main+0x388>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

  asm ("nop");
 800738a:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 800738c:	2300      	movs	r3, #0
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	e009      	b.n	80073a6 <main+0xf6>
  {
	  HAL_Delay (1);
 8007392:	2001      	movs	r0, #1
 8007394:	f007 fa4c 	bl	800e830 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8007398:	4baa      	ldr	r3, [pc, #680]	@ (8007644 <main+0x394>)
 800739a:	0018      	movs	r0, r3
 800739c:	f00c f858 	bl	8013450 <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3301      	adds	r3, #1
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	23fa      	movs	r3, #250	@ 0xfa
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	429a      	cmp	r2, r3
 80073ae:	dbf0      	blt.n	8007392 <main+0xe2>


  while (1)
  {

testTimmingProcess:
 80073b0:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 80073b2:	4b99      	ldr	r3, [pc, #612]	@ (8007618 <main+0x368>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	4b97      	ldr	r3, [pc, #604]	@ (8007618 <main+0x368>)
 80073bc:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 80073be:	e000      	b.n	80073c2 <main+0x112>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 80073c0:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 80073c2:	4ba1      	ldr	r3, [pc, #644]	@ (8007648 <main+0x398>)
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2201      	movs	r2, #1
 80073c8:	4013      	ands	r3, r2
 80073ca:	d0f9      	beq.n	80073c0 <main+0x110>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 80073cc:	4b9e      	ldr	r3, [pc, #632]	@ (8007648 <main+0x398>)
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	4b9d      	ldr	r3, [pc, #628]	@ (8007648 <main+0x398>)
 80073d2:	2101      	movs	r1, #1
 80073d4:	438a      	bics	r2, r1
 80073d6:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 80073d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007644 <main+0x394>)
 80073da:	0018      	movs	r0, r3
 80073dc:	f00c f838 	bl	8013450 <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);	 //28-May-2024: Salida IO6 toogle test
 80073e0:	4b93      	ldr	r3, [pc, #588]	@ (8007630 <main+0x380>)
 80073e2:	2104      	movs	r1, #4
 80073e4:	0018      	movs	r0, r3
 80073e6:	f009 fe7d 	bl	80110e4 <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 80073ea:	4b98      	ldr	r3, [pc, #608]	@ (800764c <main+0x39c>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4b96      	ldr	r3, [pc, #600]	@ (800764c <main+0x39c>)
 80073f4:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 80073f6:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80073f8:	f7fb fe6a 	bl	80030d0 <main10>

    //muestreo();

  	if(StateSleep == 0x55){
 80073fc:	4b94      	ldr	r3, [pc, #592]	@ (8007650 <main+0x3a0>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b55      	cmp	r3, #85	@ 0x55
 8007402:	d101      	bne.n	8007408 <main+0x158>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 8007404:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 8007406:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 8007408:	f7fb feee 	bl	80031e8 <retardoDeActuadores>

  	asm ("nop");
 800740c:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 800740e:	f7ff fef7 	bl	8007200 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 8007412:	4b80      	ldr	r3, [pc, #512]	@ (8007614 <main+0x364>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <main+0x17e>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 800741a:	4b83      	ldr	r3, [pc, #524]	@ (8007628 <main+0x378>)
 800741c:	2201      	movs	r2, #1
 800741e:	2140      	movs	r1, #64	@ 0x40
 8007420:	0018      	movs	r0, r3
 8007422:	f009 fe42 	bl	80110aa <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 8007426:	4b81      	ldr	r3, [pc, #516]	@ (800762c <main+0x37c>)
 8007428:	2201      	movs	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e018      	b.n	8007460 <main+0x1b0>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 800742e:	4b7e      	ldr	r3, [pc, #504]	@ (8007628 <main+0x378>)
 8007430:	2200      	movs	r2, #0
 8007432:	2140      	movs	r1, #64	@ 0x40
 8007434:	0018      	movs	r0, r3
 8007436:	f009 fe38 	bl	80110aa <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 800743a:	4b7c      	ldr	r3, [pc, #496]	@ (800762c <main+0x37c>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d00b      	beq.n	800745a <main+0x1aa>
 8007442:	dc0d      	bgt.n	8007460 <main+0x1b0>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d002      	beq.n	800744e <main+0x19e>
 8007448:	2b02      	cmp	r3, #2
 800744a:	d003      	beq.n	8007454 <main+0x1a4>
 800744c:	e008      	b.n	8007460 <main+0x1b0>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 800744e:	f7fb fa25 	bl	800289c <SetUpBluetooth_Ble>
 8007452:	e005      	b.n	8007460 <main+0x1b0>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 8007454:	f7fb fb2a 	bl	8002aac <GetParamBluetooth_Ble>
 8007458:	e002      	b.n	8007460 <main+0x1b0>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 800745a:	f7fb fb85 	bl	8002b68 <TransmitReceive_Ble>
 800745e:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8007460:	f7fb fdac 	bl	8002fbc <Read_Inpunts_ble>

  	if (device_conected){
 8007464:	4b7b      	ldr	r3, [pc, #492]	@ (8007654 <main+0x3a4>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d014      	beq.n	8007496 <main+0x1e6>
  		//ContadorDebugger++;
  		// #pragma asm
  		if(!flagsTX [7])
 800746c:	4b7a      	ldr	r3, [pc, #488]	@ (8007658 <main+0x3a8>)
 800746e:	79db      	ldrb	r3, [r3, #7]
 8007470:	2201      	movs	r2, #1
 8007472:	4053      	eors	r3, r2
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <main+0x1d0>
  			timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800747a:	4b78      	ldr	r3, [pc, #480]	@ (800765c <main+0x3ac>)
 800747c:	22f1      	movs	r2, #241	@ 0xf1
 800747e:	701a      	strb	r2, [r3, #0]
  		flagsTX [7] = 1;							// levanta bandera de dispositivo conectado
 8007480:	4b75      	ldr	r3, [pc, #468]	@ (8007658 <main+0x3a8>)
 8007482:	2201      	movs	r2, #1
 8007484:	71da      	strb	r2, [r3, #7]

  		if(flagsLogger2 [2])
 8007486:	4b76      	ldr	r3, [pc, #472]	@ (8007660 <main+0x3b0>)
 8007488:	789b      	ldrb	r3, [r3, #2]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d037      	beq.n	80074fe <main+0x24e>
  			flagsTX [7] = 0;
 800748e:	4b72      	ldr	r3, [pc, #456]	@ (8007658 <main+0x3a8>)
 8007490:	2200      	movs	r2, #0
 8007492:	71da      	strb	r2, [r3, #7]
 8007494:	e033      	b.n	80074fe <main+0x24e>
  	}
  	else{
  		if(flagsTX [7]){				// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
 8007496:	4b70      	ldr	r3, [pc, #448]	@ (8007658 <main+0x3a8>)
 8007498:	79db      	ldrb	r3, [r3, #7]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02c      	beq.n	80074f8 <main+0x248>
  			keyTx = 0;// en caso de desconexion cancela toda transmisión
 800749e:	4b71      	ldr	r3, [pc, #452]	@ (8007664 <main+0x3b4>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
  			//flagsTX = 0;
  			for(uint8_t i = 0; i < 8 ; i++ )
 80074a4:	1cfb      	adds	r3, r7, #3
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e009      	b.n	80074c0 <main+0x210>
  				flagsTX [i] = 0;
 80074ac:	1cfb      	adds	r3, r7, #3
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4a69      	ldr	r2, [pc, #420]	@ (8007658 <main+0x3a8>)
 80074b2:	2100      	movs	r1, #0
 80074b4:	54d1      	strb	r1, [r2, r3]
  			for(uint8_t i = 0; i < 8 ; i++ )
 80074b6:	1cfb      	adds	r3, r7, #3
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	1cfb      	adds	r3, r7, #3
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	1cfb      	adds	r3, r7, #3
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b07      	cmp	r3, #7
 80074c6:	d9f1      	bls.n	80074ac <main+0x1fc>
  			// flagsRxFirm = 0;
  			for(uint8_t i = 0; i < 8 ; i++ )
 80074c8:	1cbb      	adds	r3, r7, #2
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e009      	b.n	80074e4 <main+0x234>
  				flagsRxFirm [i] = 0;
 80074d0:	1cbb      	adds	r3, r7, #2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	4a64      	ldr	r2, [pc, #400]	@ (8007668 <main+0x3b8>)
 80074d6:	2100      	movs	r1, #0
 80074d8:	54d1      	strb	r1, [r2, r3]
  			for(uint8_t i = 0; i < 8 ; i++ )
 80074da:	1cbb      	adds	r3, r7, #2
 80074dc:	781a      	ldrb	r2, [r3, #0]
 80074de:	1cbb      	adds	r3, r7, #2
 80074e0:	3201      	adds	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	1cbb      	adds	r3, r7, #2
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b07      	cmp	r3, #7
 80074ea:	d9f1      	bls.n	80074d0 <main+0x220>
  			flagsLogger [4] = 0;				// permite loggeo de eventos
 80074ec:	4b5f      	ldr	r3, [pc, #380]	@ (800766c <main+0x3bc>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	711a      	strb	r2, [r3, #4]
  			flagsLogger [5] = 0;				// permite loggeo de datos
 80074f2:	4b5e      	ldr	r3, [pc, #376]	@ (800766c <main+0x3bc>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	715a      	strb	r2, [r3, #5]
  		}
  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
 80074f8:	4b57      	ldr	r3, [pc, #348]	@ (8007658 <main+0x3a8>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	71da      	strb	r2, [r3, #7]
  	}

  	if(tick_1s){
 80074fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007670 <main+0x3c0>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <main+0x264>
  	  asm ("nop");
 8007506:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8007508:	4b5a      	ldr	r3, [pc, #360]	@ (8007674 <main+0x3c4>)
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	4b58      	ldr	r3, [pc, #352]	@ (8007674 <main+0x3c4>)
 8007512:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 8007514:	4b58      	ldr	r3, [pc, #352]	@ (8007678 <main+0x3c8>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <main+0x278>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 800751c:	4b57      	ldr	r3, [pc, #348]	@ (800767c <main+0x3cc>)
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	4b55      	ldr	r3, [pc, #340]	@ (800767c <main+0x3cc>)
 8007526:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8007528:	4955      	ldr	r1, [pc, #340]	@ (8007680 <main+0x3d0>)
 800752a:	4b42      	ldr	r3, [pc, #264]	@ (8007634 <main+0x384>)
 800752c:	2201      	movs	r2, #1
 800752e:	0018      	movs	r0, r3
 8007530:	f00d ffe0 	bl	80154f4 <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 8007534:	4953      	ldr	r1, [pc, #332]	@ (8007684 <main+0x3d4>)
 8007536:	4b3f      	ldr	r3, [pc, #252]	@ (8007634 <main+0x384>)
 8007538:	2201      	movs	r2, #1
 800753a:	0018      	movs	r0, r3
 800753c:	f00e f8e4 	bl	8015708 <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 8007540:	4b50      	ldr	r3, [pc, #320]	@ (8007684 <main+0x3d4>)
 8007542:	78da      	ldrb	r2, [r3, #3]
 8007544:	4b50      	ldr	r3, [pc, #320]	@ (8007688 <main+0x3d8>)
 8007546:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8007548:	4b4e      	ldr	r3, [pc, #312]	@ (8007684 <main+0x3d4>)
 800754a:	785a      	ldrb	r2, [r3, #1]
 800754c:	4b4f      	ldr	r3, [pc, #316]	@ (800768c <main+0x3dc>)
 800754e:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 8007550:	4b4c      	ldr	r3, [pc, #304]	@ (8007684 <main+0x3d4>)
 8007552:	789a      	ldrb	r2, [r3, #2]
 8007554:	4b4e      	ldr	r3, [pc, #312]	@ (8007690 <main+0x3e0>)
 8007556:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8007558:	4b49      	ldr	r3, [pc, #292]	@ (8007680 <main+0x3d0>)
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	4b4d      	ldr	r3, [pc, #308]	@ (8007694 <main+0x3e4>)
 800755e:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <main+0x3d0>)
 8007562:	785a      	ldrb	r2, [r3, #1]
 8007564:	4b4c      	ldr	r3, [pc, #304]	@ (8007698 <main+0x3e8>)
 8007566:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8007568:	4b45      	ldr	r3, [pc, #276]	@ (8007680 <main+0x3d0>)
 800756a:	789a      	ldrb	r2, [r3, #2]
 800756c:	4b4b      	ldr	r3, [pc, #300]	@ (800769c <main+0x3ec>)
 800756e:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 8007570:	f7ff f9b2 	bl	80068d8 <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 8007574:	f7fb fed6 	bl	8003324 <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 8007578:	4b49      	ldr	r3, [pc, #292]	@ (80076a0 <main+0x3f0>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2201      	movs	r2, #1
 800757e:	4053      	eors	r3, r2
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d119      	bne.n	80075ba <main+0x30a>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 8007586:	4b47      	ldr	r3, [pc, #284]	@ (80076a4 <main+0x3f4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	0c1b      	lsrs	r3, r3, #16
 800758c:	b29a      	uxth	r2, r3
 800758e:	4b46      	ldr	r3, [pc, #280]	@ (80076a8 <main+0x3f8>)
 8007590:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 8007592:	4b44      	ldr	r3, [pc, #272]	@ (80076a4 <main+0x3f4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	4b44      	ldr	r3, [pc, #272]	@ (80076ac <main+0x3fc>)
 800759a:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 800759c:	4b44      	ldr	r3, [pc, #272]	@ (80076b0 <main+0x400>)
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	4b3e      	ldr	r3, [pc, #248]	@ (800769c <main+0x3ec>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d00a      	beq.n	80075be <main+0x30e>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 80075a8:	4b3c      	ldr	r3, [pc, #240]	@ (800769c <main+0x3ec>)
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	4b40      	ldr	r3, [pc, #256]	@ (80076b0 <main+0x400>)
 80075ae:	701a      	strb	r2, [r3, #0]
  		  		decword(&cntLogger_H);
 80075b0:	4b40      	ldr	r3, [pc, #256]	@ (80076b4 <main+0x404>)
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7fd fc91 	bl	8004eda <decword>
 80075b8:	e002      	b.n	80075c0 <main+0x310>
  		  			goto noActTime;
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	e000      	b.n	80075c0 <main+0x310>
  		  			goto no_inc_cnt_sec;
 80075be:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 80075c0:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 80075c2:	4b15      	ldr	r3, [pc, #84]	@ (8007618 <main+0x368>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b07      	cmp	r3, #7
 80075c8:	d900      	bls.n	80075cc <main+0x31c>
 80075ca:	e097      	b.n	80076fc <main+0x44c>
 80075cc:	009a      	lsls	r2, r3, #2
 80075ce:	4b3a      	ldr	r3, [pc, #232]	@ (80076b8 <main+0x408>)
 80075d0:	18d3      	adds	r3, r2, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 80075d6:	f7fd fe55 	bl	8005284 <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 80075da:	e093      	b.n	8007704 <main+0x454>
  	  		case 1:
  	  			voltmetro();
 80075dc:	f006 fe9a 	bl	800e314 <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 80075e0:	e090      	b.n	8007704 <main+0x454>
  	  		case 2:
  	  			temper();
 80075e2:	f002 fb93 	bl	8009d0c <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 80075e6:	e08d      	b.n	8007704 <main+0x454>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 80075e8:	4b34      	ldr	r3, [pc, #208]	@ (80076bc <main+0x40c>)
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2240      	movs	r2, #64	@ 0x40
 80075ee:	4013      	ands	r3, r2
 80075f0:	d005      	beq.n	80075fe <main+0x34e>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <main+0x378>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	2104      	movs	r1, #4
 80075f8:	0018      	movs	r0, r3
 80075fa:	f009 fd56 	bl	80110aa <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 80075fe:	f7f9 fcf7 	bl	8000ff0 <ModbusMap>
  	  			noctar ();
 8007602:	f000 fda3 	bl	800814c <noctar>
  	  			break;		// ASM: Pendiente a traducir
 8007606:	e07d      	b.n	8007704 <main+0x454>
  	  		case 4:
  	  			refrigera();
 8007608:	f000 fda6 	bl	8008158 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 800760c:	e07a      	b.n	8007704 <main+0x454>
  	  		case 5:
  	  			display();
 800760e:	f7fe fbf9 	bl	8005e04 <display>
  	  			break;		// ASM: Pendiente a traducir
 8007612:	e077      	b.n	8007704 <main+0x454>
 8007614:	20000f08 	.word	0x20000f08
 8007618:	20000940 	.word	0x20000940
 800761c:	20000376 	.word	0x20000376
 8007620:	0803f000 	.word	0x0803f000
 8007624:	20000929 	.word	0x20000929
 8007628:	50000800 	.word	0x50000800
 800762c:	20000050 	.word	0x20000050
 8007630:	50000400 	.word	0x50000400
 8007634:	200005b0 	.word	0x200005b0
 8007638:	20001104 	.word	0x20001104
 800763c:	0001fbcf 	.word	0x0001fbcf
 8007640:	200005e0 	.word	0x200005e0
 8007644:	2000059c 	.word	0x2000059c
 8007648:	40001000 	.word	0x40001000
 800764c:	20000415 	.word	0x20000415
 8007650:	20000941 	.word	0x20000941
 8007654:	20000928 	.word	0x20000928
 8007658:	20000e3c 	.word	0x20000e3c
 800765c:	20000f05 	.word	0x20000f05
 8007660:	20000f9c 	.word	0x20000f9c
 8007664:	20000e39 	.word	0x20000e39
 8007668:	20000efc 	.word	0x20000efc
 800766c:	20000e24 	.word	0x20000e24
 8007670:	20000927 	.word	0x20000927
 8007674:	20000b52 	.word	0x20000b52
 8007678:	20000924 	.word	0x20000924
 800767c:	20000fa4 	.word	0x20000fa4
 8007680:	20001098 	.word	0x20001098
 8007684:	200010ac 	.word	0x200010ac
 8007688:	20001090 	.word	0x20001090
 800768c:	20001091 	.word	0x20001091
 8007690:	20001092 	.word	0x20001092
 8007694:	20001093 	.word	0x20001093
 8007698:	20001094 	.word	0x20001094
 800769c:	20001095 	.word	0x20001095
 80076a0:	20001088 	.word	0x20001088
 80076a4:	200010b8 	.word	0x200010b8
 80076a8:	20000dd0 	.word	0x20000dd0
 80076ac:	20000dd2 	.word	0x20000dd2
 80076b0:	20001109 	.word	0x20001109
 80076b4:	20000db8 	.word	0x20000db8
 80076b8:	08018a6c 	.word	0x08018a6c
 80076bc:	40004c00 	.word	0x40004c00
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 80076c0:	f003 fa62 	bl	800ab88 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 80076c4:	4b16      	ldr	r3, [pc, #88]	@ (8007720 <main+0x470>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2201      	movs	r2, #1
 80076ca:	4053      	eors	r3, r2
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <main+0x426>
  	  			{
  	  				logger ();				// ASM: Pendiente a traducir
 80076d2:	f7ff f975 	bl	80069c0 <logger>
  	  			}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 80076d6:	f003 fd9b 	bl	800b210 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 80076da:	4b12      	ldr	r3, [pc, #72]	@ (8007724 <main+0x474>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2baa      	cmp	r3, #170	@ 0xaa
 80076e0:	d10f      	bne.n	8007702 <main+0x452>
  	  			    asm ("nop");
 80076e2:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 80076e4:	4b10      	ldr	r3, [pc, #64]	@ (8007728 <main+0x478>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <main+0x452>
  	  				    asm ("nop");
 80076ec:	46c0      	nop			@ (mov r8, r8)
// 	  					bootloader();
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 80076ee:	e008      	b.n	8007702 <main+0x452>
  	  		case 7:
  	  			watch();
 80076f0:	f006 ff58 	bl	800e5a4 <watch>
  	  			ProcesosC = 255;
 80076f4:	4b0d      	ldr	r3, [pc, #52]	@ (800772c <main+0x47c>)
 80076f6:	22ff      	movs	r2, #255	@ 0xff
 80076f8:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 80076fa:	e003      	b.n	8007704 <main+0x454>
  	  		default:
  	  		    asm ("nop");
 80076fc:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	e7fd      	b.n	80076fe <main+0x44e>
  	  			break;		// ASM: Pendiente a traducir
 8007702:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8007704:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <main+0x480>)
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 800770a:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <main+0x484>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <main+0x488>)
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <main+0x48c>)
 8007718:	2200      	movs	r2, #0
 800771a:	701a      	strb	r2, [r3, #0]
  {
 800771c:	e649      	b.n	80073b2 <main+0x102>
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	20001108 	.word	0x20001108
 8007724:	20000f04 	.word	0x20000f04
 8007728:	20000e39 	.word	0x20000e39
 800772c:	20000940 	.word	0x20000940
 8007730:	20000924 	.word	0x20000924
 8007734:	20000925 	.word	0x20000925
 8007738:	20000926 	.word	0x20000926
 800773c:	20000927 	.word	0x20000927

08007740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b099      	sub	sp, #100	@ 0x64
 8007744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007746:	2414      	movs	r4, #20
 8007748:	193b      	adds	r3, r7, r4
 800774a:	0018      	movs	r0, r3
 800774c:	234c      	movs	r3, #76	@ 0x4c
 800774e:	001a      	movs	r2, r3
 8007750:	2100      	movs	r1, #0
 8007752:	f010 fffd 	bl	8018750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	0018      	movs	r0, r3
 800775a:	2310      	movs	r3, #16
 800775c:	001a      	movs	r2, r3
 800775e:	2100      	movs	r1, #0
 8007760:	f010 fff6 	bl	8018750 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	0018      	movs	r0, r3
 800776a:	f00b fe81 	bl	8013470 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800776e:	0021      	movs	r1, r4
 8007770:	187b      	adds	r3, r7, r1
 8007772:	2218      	movs	r2, #24
 8007774:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007776:	187b      	adds	r3, r7, r1
 8007778:	2201      	movs	r2, #1
 800777a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800777c:	187b      	adds	r3, r7, r1
 800777e:	2201      	movs	r2, #1
 8007780:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007782:	187b      	adds	r3, r7, r1
 8007784:	2200      	movs	r2, #0
 8007786:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8007788:	187b      	adds	r3, r7, r1
 800778a:	2280      	movs	r2, #128	@ 0x80
 800778c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800778e:	187b      	adds	r3, r7, r1
 8007790:	2200      	movs	r2, #0
 8007792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007794:	187b      	adds	r3, r7, r1
 8007796:	0018      	movs	r0, r3
 8007798:	f00b fed6 	bl	8013548 <HAL_RCC_OscConfig>
 800779c:	1e03      	subs	r3, r0, #0
 800779e:	d001      	beq.n	80077a4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80077a0:	f000 fcce 	bl	8008140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077a4:	1d3b      	adds	r3, r7, #4
 80077a6:	2207      	movs	r2, #7
 80077a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077b0:	1d3b      	adds	r3, r7, #4
 80077b2:	2200      	movs	r2, #0
 80077b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	2200      	movs	r2, #0
 80077ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	2101      	movs	r1, #1
 80077c0:	0018      	movs	r0, r3
 80077c2:	f00c faeb 	bl	8013d9c <HAL_RCC_ClockConfig>
 80077c6:	1e03      	subs	r3, r0, #0
 80077c8:	d001      	beq.n	80077ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80077ca:	f000 fcb9 	bl	8008140 <Error_Handler>
  }
}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b019      	add	sp, #100	@ 0x64
 80077d4:	bd90      	pop	{r4, r7, pc}
	...

080077d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	@ 0x28
 80077dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 80077de:	4b95      	ldr	r3, [pc, #596]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 80077e0:	4a95      	ldr	r2, [pc, #596]	@ (8007a38 <MX_ADC1_Init+0x260>)
 80077e2:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 80077e4:	4b93      	ldr	r3, [pc, #588]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 80077e6:	4a94      	ldr	r2, [pc, #592]	@ (8007a38 <MX_ADC1_Init+0x260>)
 80077e8:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 80077ea:	4b94      	ldr	r3, [pc, #592]	@ (8007a3c <MX_ADC1_Init+0x264>)
 80077ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077ee:	4b93      	ldr	r3, [pc, #588]	@ (8007a3c <MX_ADC1_Init+0x264>)
 80077f0:	2180      	movs	r1, #128	@ 0x80
 80077f2:	0349      	lsls	r1, r1, #13
 80077f4:	430a      	orrs	r2, r1
 80077f6:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 80077f8:	4b90      	ldr	r3, [pc, #576]	@ (8007a3c <MX_ADC1_Init+0x264>)
 80077fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077fc:	4b8f      	ldr	r3, [pc, #572]	@ (8007a3c <MX_ADC1_Init+0x264>)
 80077fe:	2104      	movs	r1, #4
 8007800:	430a      	orrs	r2, r1
 8007802:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8007804:	4b8d      	ldr	r3, [pc, #564]	@ (8007a3c <MX_ADC1_Init+0x264>)
 8007806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007808:	4b8c      	ldr	r3, [pc, #560]	@ (8007a3c <MX_ADC1_Init+0x264>)
 800780a:	2101      	movs	r1, #1
 800780c:	430a      	orrs	r2, r1
 800780e:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8007810:	4b8a      	ldr	r3, [pc, #552]	@ (8007a3c <MX_ADC1_Init+0x264>)
 8007812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007814:	4b89      	ldr	r3, [pc, #548]	@ (8007a3c <MX_ADC1_Init+0x264>)
 8007816:	2110      	movs	r1, #16
 8007818:	430a      	orrs	r2, r1
 800781a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 800781c:	4b88      	ldr	r3, [pc, #544]	@ (8007a40 <MX_ADC1_Init+0x268>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b87      	ldr	r3, [pc, #540]	@ (8007a40 <MX_ADC1_Init+0x268>)
 8007822:	210f      	movs	r1, #15
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8007828:	4b85      	ldr	r3, [pc, #532]	@ (8007a40 <MX_ADC1_Init+0x268>)
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	4b84      	ldr	r3, [pc, #528]	@ (8007a40 <MX_ADC1_Init+0x268>)
 800782e:	210f      	movs	r1, #15
 8007830:	438a      	bics	r2, r1
 8007832:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8007834:	23a0      	movs	r3, #160	@ 0xa0
 8007836:	05db      	lsls	r3, r3, #23
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	23a0      	movs	r3, #160	@ 0xa0
 800783c:	05db      	lsls	r3, r3, #23
 800783e:	21fc      	movs	r1, #252	@ 0xfc
 8007840:	0209      	lsls	r1, r1, #8
 8007842:	430a      	orrs	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8007846:	23a0      	movs	r3, #160	@ 0xa0
 8007848:	05db      	lsls	r3, r3, #23
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	23a0      	movs	r3, #160	@ 0xa0
 800784e:	05db      	lsls	r3, r3, #23
 8007850:	497c      	ldr	r1, [pc, #496]	@ (8007a44 <MX_ADC1_Init+0x26c>)
 8007852:	400a      	ands	r2, r1
 8007854:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 8007856:	4b7c      	ldr	r3, [pc, #496]	@ (8007a48 <MX_ADC1_Init+0x270>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a48 <MX_ADC1_Init+0x270>)
 800785c:	210c      	movs	r1, #12
 800785e:	430a      	orrs	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8007862:	4b79      	ldr	r3, [pc, #484]	@ (8007a48 <MX_ADC1_Init+0x270>)
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	4b78      	ldr	r3, [pc, #480]	@ (8007a48 <MX_ADC1_Init+0x270>)
 8007868:	210c      	movs	r1, #12
 800786a:	438a      	bics	r2, r1
 800786c:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 800786e:	4b71      	ldr	r3, [pc, #452]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 8007870:	22c0      	movs	r2, #192	@ 0xc0
 8007872:	0612      	lsls	r2, r2, #24
 8007874:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 8007876:	4b6f      	ldr	r3, [pc, #444]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 8007878:	2208      	movs	r2, #8
 800787a:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 800787c:	4b6d      	ldr	r3, [pc, #436]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 800787e:	2280      	movs	r2, #128	@ 0x80
 8007880:	0552      	lsls	r2, r2, #21
 8007882:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 8007884:	4b6b      	ldr	r3, [pc, #428]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 8007886:	4a71      	ldr	r2, [pc, #452]	@ (8007a4c <MX_ADC1_Init+0x274>)
 8007888:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800788a:	231c      	movs	r3, #28
 800788c:	18fb      	adds	r3, r7, r3
 800788e:	0018      	movs	r0, r3
 8007890:	230c      	movs	r3, #12
 8007892:	001a      	movs	r2, r3
 8007894:	2100      	movs	r1, #0
 8007896:	f010 ff5b 	bl	8018750 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800789a:	1d3b      	adds	r3, r7, #4
 800789c:	0018      	movs	r0, r3
 800789e:	2318      	movs	r3, #24
 80078a0:	001a      	movs	r2, r3
 80078a2:	2100      	movs	r1, #0
 80078a4:	f010 ff54 	bl	8018750 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80078a8:	4b69      	ldr	r3, [pc, #420]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078aa:	4a62      	ldr	r2, [pc, #392]	@ (8007a34 <MX_ADC1_Init+0x25c>)
 80078ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80078ae:	4b68      	ldr	r3, [pc, #416]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078b0:	22c0      	movs	r2, #192	@ 0xc0
 80078b2:	0612      	lsls	r2, r2, #24
 80078b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80078b6:	4b66      	ldr	r3, [pc, #408]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078b8:	2208      	movs	r2, #8
 80078ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80078bc:	4b64      	ldr	r3, [pc, #400]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078be:	2200      	movs	r2, #0
 80078c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80078c2:	4b63      	ldr	r3, [pc, #396]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078c4:	2280      	movs	r2, #128	@ 0x80
 80078c6:	0612      	lsls	r2, r2, #24
 80078c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80078ca:	4b61      	ldr	r3, [pc, #388]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078cc:	2204      	movs	r2, #4
 80078ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80078d0:	4b5f      	ldr	r3, [pc, #380]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80078d6:	4b5e      	ldr	r3, [pc, #376]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078d8:	2200      	movs	r2, #0
 80078da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80078dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078de:	2200      	movs	r2, #0
 80078e0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80078e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80078e8:	4b59      	ldr	r3, [pc, #356]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078ea:	2220      	movs	r2, #32
 80078ec:	2100      	movs	r1, #0
 80078ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80078f0:	4b57      	ldr	r3, [pc, #348]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80078f6:	4b56      	ldr	r3, [pc, #344]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80078fc:	4b54      	ldr	r3, [pc, #336]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80078fe:	222c      	movs	r2, #44	@ 0x2c
 8007900:	2100      	movs	r1, #0
 8007902:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007904:	4b52      	ldr	r3, [pc, #328]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800790a:	4b51      	ldr	r3, [pc, #324]	@ (8007a50 <MX_ADC1_Init+0x278>)
 800790c:	2200      	movs	r2, #0
 800790e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007910:	4b4f      	ldr	r3, [pc, #316]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007912:	223c      	movs	r2, #60	@ 0x3c
 8007914:	2100      	movs	r1, #0
 8007916:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8007918:	4b4d      	ldr	r3, [pc, #308]	@ (8007a50 <MX_ADC1_Init+0x278>)
 800791a:	2280      	movs	r2, #128	@ 0x80
 800791c:	0592      	lsls	r2, r2, #22
 800791e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007920:	4b4b      	ldr	r3, [pc, #300]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007922:	0018      	movs	r0, r3
 8007924:	f007 f9ae 	bl	800ec84 <HAL_ADC_Init>
 8007928:	1e03      	subs	r3, r0, #0
 800792a:	d001      	beq.n	8007930 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 800792c:	f000 fc08 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007930:	211c      	movs	r1, #28
 8007932:	187b      	adds	r3, r7, r1
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007938:	187b      	adds	r3, r7, r1
 800793a:	2201      	movs	r2, #1
 800793c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800793e:	187a      	adds	r2, r7, r1
 8007940:	4b43      	ldr	r3, [pc, #268]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007942:	0011      	movs	r1, r2
 8007944:	0018      	movs	r0, r3
 8007946:	f007 fb45 	bl	800efd4 <HAL_ADC_ConfigChannel>
 800794a:	1e03      	subs	r3, r0, #0
 800794c:	d001      	beq.n	8007952 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800794e:	f000 fbf7 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007952:	211c      	movs	r1, #28
 8007954:	187b      	adds	r3, r7, r1
 8007956:	4a3f      	ldr	r2, [pc, #252]	@ (8007a54 <MX_ADC1_Init+0x27c>)
 8007958:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800795a:	187a      	adds	r2, r7, r1
 800795c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a50 <MX_ADC1_Init+0x278>)
 800795e:	0011      	movs	r1, r2
 8007960:	0018      	movs	r0, r3
 8007962:	f007 fb37 	bl	800efd4 <HAL_ADC_ConfigChannel>
 8007966:	1e03      	subs	r3, r0, #0
 8007968:	d001      	beq.n	800796e <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800796a:	f000 fbe9 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800796e:	211c      	movs	r1, #28
 8007970:	187b      	adds	r3, r7, r1
 8007972:	4a39      	ldr	r2, [pc, #228]	@ (8007a58 <MX_ADC1_Init+0x280>)
 8007974:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007976:	187a      	adds	r2, r7, r1
 8007978:	4b35      	ldr	r3, [pc, #212]	@ (8007a50 <MX_ADC1_Init+0x278>)
 800797a:	0011      	movs	r1, r2
 800797c:	0018      	movs	r0, r3
 800797e:	f007 fb29 	bl	800efd4 <HAL_ADC_ConfigChannel>
 8007982:	1e03      	subs	r3, r0, #0
 8007984:	d001      	beq.n	800798a <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8007986:	f000 fbdb 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800798a:	211c      	movs	r1, #28
 800798c:	187b      	adds	r3, r7, r1
 800798e:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <MX_ADC1_Init+0x284>)
 8007990:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007992:	187a      	adds	r2, r7, r1
 8007994:	4b2e      	ldr	r3, [pc, #184]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007996:	0011      	movs	r1, r2
 8007998:	0018      	movs	r0, r3
 800799a:	f007 fb1b 	bl	800efd4 <HAL_ADC_ConfigChannel>
 800799e:	1e03      	subs	r3, r0, #0
 80079a0:	d001      	beq.n	80079a6 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 80079a2:	f000 fbcd 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80079a6:	211c      	movs	r1, #28
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007a60 <MX_ADC1_Init+0x288>)
 80079ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80079ae:	187a      	adds	r2, r7, r1
 80079b0:	4b27      	ldr	r3, [pc, #156]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80079b2:	0011      	movs	r1, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f007 fb0d 	bl	800efd4 <HAL_ADC_ConfigChannel>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d001      	beq.n	80079c2 <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80079be:	f000 fbbf 	bl	8008140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80079c2:	211c      	movs	r1, #28
 80079c4:	187b      	adds	r3, r7, r1
 80079c6:	4a27      	ldr	r2, [pc, #156]	@ (8007a64 <MX_ADC1_Init+0x28c>)
 80079c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80079ca:	187a      	adds	r2, r7, r1
 80079cc:	4b20      	ldr	r3, [pc, #128]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80079ce:	0011      	movs	r1, r2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f007 faff 	bl	800efd4 <HAL_ADC_ConfigChannel>
 80079d6:	1e03      	subs	r3, r0, #0
 80079d8:	d001      	beq.n	80079de <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80079da:	f000 fbb1 	bl	8008140 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 80079de:	1d3b      	adds	r3, r7, #4
 80079e0:	4a21      	ldr	r2, [pc, #132]	@ (8007a68 <MX_ADC1_Init+0x290>)
 80079e2:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	22c0      	movs	r2, #192	@ 0xc0
 80079e8:	0412      	lsls	r2, r2, #16
 80079ea:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80079ec:	1d3a      	adds	r2, r7, #4
 80079ee:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <MX_ADC1_Init+0x278>)
 80079f0:	0011      	movs	r1, r2
 80079f2:	0018      	movs	r0, r3
 80079f4:	f007 fc5a 	bl	800f2ac <HAL_ADC_AnalogWDGConfig>
 80079f8:	1e03      	subs	r3, r0, #0
 80079fa:	d001      	beq.n	8007a00 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 80079fc:	f000 fba0 	bl	8008140 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	4a1a      	ldr	r2, [pc, #104]	@ (8007a6c <MX_ADC1_Init+0x294>)
 8007a04:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8007a06:	1d3a      	adds	r2, r7, #4
 8007a08:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007a0a:	0011      	movs	r1, r2
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f007 fc4d 	bl	800f2ac <HAL_ADC_AnalogWDGConfig>
 8007a12:	1e03      	subs	r3, r0, #0
 8007a14:	d001      	beq.n	8007a1a <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8007a16:	f000 fb93 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <MX_ADC1_Init+0x278>)
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f007 ff7a 	bl	800f918 <HAL_ADCEx_Calibration_Start>
 8007a24:	1e03      	subs	r3, r0, #0
 8007a26:	d1f9      	bne.n	8007a1c <MX_ADC1_Init+0x244>

  /* USER CODE END ADC1_Init 2 */

}
 8007a28:	46c0      	nop			@ (mov r8, r8)
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b00a      	add	sp, #40	@ 0x28
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	40012400 	.word	0x40012400
 8007a38:	0fff0000 	.word	0x0fff0000
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	50000800 	.word	0x50000800
 8007a44:	ffff03ff 	.word	0xffff03ff
 8007a48:	50000400 	.word	0x50000400
 8007a4c:	00044603 	.word	0x00044603
 8007a50:	20000424 	.word	0x20000424
 8007a54:	04000002 	.word	0x04000002
 8007a58:	24000200 	.word	0x24000200
 8007a5c:	28000400 	.word	0x28000400
 8007a60:	38004000 	.word	0x38004000
 8007a64:	48040000 	.word	0x48040000
 8007a68:	0017ffff 	.word	0x0017ffff
 8007a6c:	0027ffff 	.word	0x0027ffff

08007a70 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b090      	sub	sp, #64	@ 0x40
 8007a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_OBProgramInitTypeDef pOBInit = {0};
 8007a76:	1d3b      	adds	r3, r7, #4
 8007a78:	0018      	movs	r0, r3
 8007a7a:	233c      	movs	r3, #60	@ 0x3c
 8007a7c:	001a      	movs	r2, r3
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f010 fe66 	bl	8018750 <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8007a84:	f008 fdb6 	bl	80105f4 <HAL_FLASH_Unlock>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d001      	beq.n	8007a90 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8007a8c:	f000 fb58 	bl	8008140 <Error_Handler>
  }

  /* Option Bytes settings */

  if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8007a90:	f008 fdf0 	bl	8010674 <HAL_FLASH_OB_Unlock>
 8007a94:	1e03      	subs	r3, r0, #0
 8007a96:	d001      	beq.n	8007a9c <MX_FLASH_Init+0x2c>
  {
    Error_Handler();
 8007a98:	f000 fb52 	bl	8008140 <Error_Handler>
  }
  pOBInit.OptionType = OPTIONBYTE_WRP;
 8007a9c:	1d3b      	adds	r3, r7, #4
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
  pOBInit.WRPArea = OB_WRPAREA_ZONE_A;
 8007aa2:	1d3b      	adds	r3, r7, #4
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	605a      	str	r2, [r3, #4]
  pOBInit.WRPStartOffset = 0;
 8007aa8:	1d3b      	adds	r3, r7, #4
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
  pOBInit.WRPEndOffset = 31;
 8007aae:	1d3b      	adds	r3, r7, #4
 8007ab0:	221f      	movs	r2, #31
 8007ab2:	60da      	str	r2, [r3, #12]
  if (HAL_FLASHEx_OBProgram(&pOBInit) != HAL_OK)
 8007ab4:	1d3b      	adds	r3, r7, #4
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f008 fefe 	bl	80108b8 <HAL_FLASHEx_OBProgram>
 8007abc:	1e03      	subs	r3, r0, #0
 8007abe:	d001      	beq.n	8007ac4 <MX_FLASH_Init+0x54>
  {
    Error_Handler();
 8007ac0:	f000 fb3e 	bl	8008140 <Error_Handler>
  }
  pOBInit.WRPArea = OB_WRPAREA_ZONE_B;
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	605a      	str	r2, [r3, #4]
  if (HAL_FLASHEx_OBProgram(&pOBInit) != HAL_OK)
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	0018      	movs	r0, r3
 8007ace:	f008 fef3 	bl	80108b8 <HAL_FLASHEx_OBProgram>
 8007ad2:	1e03      	subs	r3, r0, #0
 8007ad4:	d001      	beq.n	8007ada <MX_FLASH_Init+0x6a>
  {
    Error_Handler();
 8007ad6:	f000 fb33 	bl	8008140 <Error_Handler>
  }
  if (HAL_FLASH_OB_Lock() != HAL_OK)
 8007ada:	f008 fdf3 	bl	80106c4 <HAL_FLASH_OB_Lock>
 8007ade:	1e03      	subs	r3, r0, #0
 8007ae0:	d001      	beq.n	8007ae6 <MX_FLASH_Init+0x76>
  {
    Error_Handler();
 8007ae2:	f000 fb2d 	bl	8008140 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8007ae6:	f008 fda9 	bl	801063c <HAL_FLASH_Lock>
 8007aea:	1e03      	subs	r3, r0, #0
 8007aec:	d001      	beq.n	8007af2 <MX_FLASH_Init+0x82>
  {
    Error_Handler();
 8007aee:	f000 fb27 	bl	8008140 <Error_Handler>
  /* USER CODE BEGIN FLASH_Init 2 */


  /* USER CODE END FLASH_Init 2 */

}
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b010      	add	sp, #64	@ 0x40
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b00:	4b1c      	ldr	r3, [pc, #112]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b02:	4a1d      	ldr	r2, [pc, #116]	@ (8007b78 <MX_I2C1_Init+0x7c>)
 8007b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8007b06:	4b1b      	ldr	r3, [pc, #108]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b08:	4a1c      	ldr	r2, [pc, #112]	@ (8007b7c <MX_I2C1_Init+0x80>)
 8007b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007b0c:	4b19      	ldr	r3, [pc, #100]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b12:	4b18      	ldr	r3, [pc, #96]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b18:	4b16      	ldr	r3, [pc, #88]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007b1e:	4b15      	ldr	r3, [pc, #84]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b24:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b30:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b36:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f009 fb2d 	bl	8011198 <HAL_I2C_Init>
 8007b3e:	1e03      	subs	r3, r0, #0
 8007b40:	d001      	beq.n	8007b46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007b42:	f000 fafd 	bl	8008140 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8007b46:	2380      	movs	r3, #128	@ 0x80
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b4c:	0011      	movs	r1, r2
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f00b fb5c 	bl	801320c <HAL_I2CEx_ConfigAnalogFilter>
 8007b54:	1e03      	subs	r3, r0, #0
 8007b56:	d001      	beq.n	8007b5c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8007b58:	f000 faf2 	bl	8008140 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <MX_I2C1_Init+0x78>)
 8007b5e:	2100      	movs	r1, #0
 8007b60:	0018      	movs	r0, r3
 8007b62:	f00b fb9f 	bl	80132a4 <HAL_I2CEx_ConfigDigitalFilter>
 8007b66:	1e03      	subs	r3, r0, #0
 8007b68:	d001      	beq.n	8007b6e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8007b6a:	f000 fae9 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b6e:	46c0      	nop			@ (mov r8, r8)
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000488 	.word	0x20000488
 8007b78:	40005400 	.word	0x40005400
 8007b7c:	201060ff 	.word	0x201060ff

08007b80 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007b84:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007b86:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc0 <MX_IWDG_Init+0x40>)
 8007b88:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 8007b90:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007b92:	22fa      	movs	r2, #250	@ 0xfa
 8007b94:	0112      	lsls	r2, r2, #4
 8007b96:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8007b98:	4b08      	ldr	r3, [pc, #32]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007b9a:	22fa      	movs	r2, #250	@ 0xfa
 8007b9c:	0112      	lsls	r2, r2, #4
 8007b9e:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007ba6:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <MX_IWDG_Init+0x3c>)
 8007ba8:	0018      	movs	r0, r3
 8007baa:	f00b fbc7 	bl	801333c <HAL_IWDG_Init>
 8007bae:	1e03      	subs	r3, r0, #0
 8007bb0:	d001      	beq.n	8007bb6 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8007bb2:	f000 fac5 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2000059c 	.word	0x2000059c
 8007bc0:	40003000 	.word	0x40003000

08007bc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	0018      	movs	r0, r3
 8007bce:	2314      	movs	r3, #20
 8007bd0:	001a      	movs	r2, r3
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	f010 fdbc 	bl	8018750 <memset>
  RTC_DateTypeDef sDate = {0};
 8007bd8:	003b      	movs	r3, r7
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007bde:	4b32      	ldr	r3, [pc, #200]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007be0:	4a32      	ldr	r2, [pc, #200]	@ (8007cac <MX_RTC_Init+0xe8>)
 8007be2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007be4:	4b30      	ldr	r3, [pc, #192]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007bea:	4b2f      	ldr	r3, [pc, #188]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007bec:	227f      	movs	r2, #127	@ 0x7f
 8007bee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007bf2:	22ff      	movs	r2, #255	@ 0xff
 8007bf4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007c02:	4b29      	ldr	r3, [pc, #164]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007c08:	4b27      	ldr	r3, [pc, #156]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c0a:	2280      	movs	r2, #128	@ 0x80
 8007c0c:	05d2      	lsls	r2, r2, #23
 8007c0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8007c10:	4b25      	ldr	r3, [pc, #148]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8007c16:	4b24      	ldr	r3, [pc, #144]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007c1c:	4b22      	ldr	r3, [pc, #136]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f00d fb02 	bl	8015228 <HAL_RTC_Init>
 8007c24:	1e03      	subs	r3, r0, #0
 8007c26:	d001      	beq.n	8007c2c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8007c28:	f000 fa8a 	bl	8008140 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007c2c:	1d3b      	adds	r3, r7, #4
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8007c32:	1d3b      	adds	r3, r7, #4
 8007c34:	2200      	movs	r2, #0
 8007c36:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8007c38:	1d3b      	adds	r3, r7, #4
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	2200      	movs	r2, #0
 8007c42:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	2200      	movs	r2, #0
 8007c48:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007c4a:	1d39      	adds	r1, r7, #4
 8007c4c:	4b16      	ldr	r3, [pc, #88]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	0018      	movs	r0, r3
 8007c52:	f00d fb8f 	bl	8015374 <HAL_RTC_SetTime>
 8007c56:	1e03      	subs	r3, r0, #0
 8007c58:	d001      	beq.n	8007c5e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8007c5a:	f000 fa71 	bl	8008140 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007c5e:	003b      	movs	r3, r7
 8007c60:	2201      	movs	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8007c64:	003b      	movs	r3, r7
 8007c66:	2201      	movs	r2, #1
 8007c68:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8007c6a:	003b      	movs	r3, r7
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8007c70:	003b      	movs	r3, r7
 8007c72:	2200      	movs	r2, #0
 8007c74:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007c76:	0039      	movs	r1, r7
 8007c78:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f00d fc9d 	bl	80155bc <HAL_RTC_SetDate>
 8007c82:	1e03      	subs	r3, r0, #0
 8007c84:	d001      	beq.n	8007c8a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8007c86:	f000 fa5b 	bl	8008140 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8007c8a:	2380      	movs	r3, #128	@ 0x80
 8007c8c:	0199      	lsls	r1, r3, #6
 8007c8e:	4806      	ldr	r0, [pc, #24]	@ (8007ca8 <MX_RTC_Init+0xe4>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	2200      	movs	r2, #0
 8007c94:	f00d fe1e 	bl	80158d4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8007c98:	1e03      	subs	r3, r0, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8007c9c:	f000 fa50 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007ca0:	46c0      	nop			@ (mov r8, r8)
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b006      	add	sp, #24
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200005b0 	.word	0x200005b0
 8007cac:	40002800 	.word	0x40002800

08007cb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08e      	sub	sp, #56	@ 0x38
 8007cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cb6:	2328      	movs	r3, #40	@ 0x28
 8007cb8:	18fb      	adds	r3, r7, r3
 8007cba:	0018      	movs	r0, r3
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	001a      	movs	r2, r3
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f010 fd45 	bl	8018750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cc6:	231c      	movs	r3, #28
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	0018      	movs	r0, r3
 8007ccc:	230c      	movs	r3, #12
 8007cce:	001a      	movs	r2, r3
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f010 fd3d 	bl	8018750 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cd6:	003b      	movs	r3, r7
 8007cd8:	0018      	movs	r0, r3
 8007cda:	231c      	movs	r3, #28
 8007cdc:	001a      	movs	r2, r3
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f010 fd36 	bl	8018750 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007ce4:	4b30      	ldr	r3, [pc, #192]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007ce6:	4a31      	ldr	r2, [pc, #196]	@ (8007dac <MX_TIM3_Init+0xfc>)
 8007ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007cea:	4b2f      	ldr	r3, [pc, #188]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007cf8:	22fa      	movs	r2, #250	@ 0xfa
 8007cfa:	0112      	lsls	r2, r2, #4
 8007cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d04:	4b28      	ldr	r3, [pc, #160]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f00d fecf 	bl	8015ab0 <HAL_TIM_Base_Init>
 8007d12:	1e03      	subs	r3, r0, #0
 8007d14:	d001      	beq.n	8007d1a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8007d16:	f000 fa13 	bl	8008140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d1a:	2128      	movs	r1, #40	@ 0x28
 8007d1c:	187b      	adds	r3, r7, r1
 8007d1e:	2280      	movs	r2, #128	@ 0x80
 8007d20:	0152      	lsls	r2, r2, #5
 8007d22:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007d24:	187a      	adds	r2, r7, r1
 8007d26:	4b20      	ldr	r3, [pc, #128]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d28:	0011      	movs	r1, r2
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f00e f9e0 	bl	80160f0 <HAL_TIM_ConfigClockSource>
 8007d30:	1e03      	subs	r3, r0, #0
 8007d32:	d001      	beq.n	8007d38 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8007d34:	f000 fa04 	bl	8008140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f00d ff10 	bl	8015b60 <HAL_TIM_PWM_Init>
 8007d40:	1e03      	subs	r3, r0, #0
 8007d42:	d001      	beq.n	8007d48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8007d44:	f000 f9fc 	bl	8008140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d48:	211c      	movs	r1, #28
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d50:	187b      	adds	r3, r7, r1
 8007d52:	2200      	movs	r2, #0
 8007d54:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d56:	187a      	adds	r2, r7, r1
 8007d58:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d5a:	0011      	movs	r1, r2
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f00e fe7d 	bl	8016a5c <HAL_TIMEx_MasterConfigSynchronization>
 8007d62:	1e03      	subs	r3, r0, #0
 8007d64:	d001      	beq.n	8007d6a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8007d66:	f000 f9eb 	bl	8008140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d6a:	003b      	movs	r3, r7
 8007d6c:	2260      	movs	r2, #96	@ 0x60
 8007d6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8007d70:	003b      	movs	r3, r7
 8007d72:	22fa      	movs	r2, #250	@ 0xfa
 8007d74:	00d2      	lsls	r2, r2, #3
 8007d76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d78:	003b      	movs	r3, r7
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d7e:	003b      	movs	r3, r7
 8007d80:	2200      	movs	r2, #0
 8007d82:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d84:	0039      	movs	r1, r7
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d88:	2204      	movs	r2, #4
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f00e f8b0 	bl	8015ef0 <HAL_TIM_PWM_ConfigChannel>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d001      	beq.n	8007d98 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8007d94:	f000 f9d4 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007d98:	4b03      	ldr	r3, [pc, #12]	@ (8007da8 <MX_TIM3_Init+0xf8>)
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f001 fd18 	bl	80097d0 <HAL_TIM_MspPostInit>

}
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b00e      	add	sp, #56	@ 0x38
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200005e0 	.word	0x200005e0
 8007dac:	40000400 	.word	0x40000400

08007db0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	0018      	movs	r0, r3
 8007dba:	230c      	movs	r3, #12
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f010 fcc6 	bl	8018750 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007dc4:	4b18      	ldr	r3, [pc, #96]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007dc6:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <MX_TIM6_Init+0x7c>)
 8007dc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8007dca:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007dcc:	221f      	movs	r2, #31
 8007dce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dd0:	4b15      	ldr	r3, [pc, #84]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 125;
 8007dd6:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007dd8:	227d      	movs	r2, #125	@ 0x7d
 8007dda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ddc:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007de2:	4b11      	ldr	r3, [pc, #68]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007de4:	0018      	movs	r0, r3
 8007de6:	f00d fe63 	bl	8015ab0 <HAL_TIM_Base_Init>
 8007dea:	1e03      	subs	r3, r0, #0
 8007dec:	d001      	beq.n	8007df2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8007dee:	f000 f9a7 	bl	8008140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007dfe:	1d3a      	adds	r2, r7, #4
 8007e00:	4b09      	ldr	r3, [pc, #36]	@ (8007e28 <MX_TIM6_Init+0x78>)
 8007e02:	0011      	movs	r1, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	f00e fe29 	bl	8016a5c <HAL_TIMEx_MasterConfigSynchronization>
 8007e0a:	1e03      	subs	r3, r0, #0
 8007e0c:	d001      	beq.n	8007e12 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8007e0e:	f000 f997 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 8007e12:	4b06      	ldr	r3, [pc, #24]	@ (8007e2c <MX_TIM6_Init+0x7c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <MX_TIM6_Init+0x7c>)
 8007e18:	2101      	movs	r1, #1
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b004      	add	sp, #16
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	2000062c 	.word	0x2000062c
 8007e2c:	40001000 	.word	0x40001000

08007e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007e34:	4b23      	ldr	r3, [pc, #140]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e36:	4a24      	ldr	r2, [pc, #144]	@ (8007ec8 <MX_USART2_UART_Init+0x98>)
 8007e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007e3a:	4b22      	ldr	r3, [pc, #136]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e3c:	22e1      	movs	r2, #225	@ 0xe1
 8007e3e:	0252      	lsls	r2, r2, #9
 8007e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e42:	4b20      	ldr	r3, [pc, #128]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e54:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e56:	220c      	movs	r2, #12
 8007e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e60:	4b18      	ldr	r3, [pc, #96]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e66:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007e6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e72:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e78:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f00e fe5c 	bl	8016b38 <HAL_UART_Init>
 8007e80:	1e03      	subs	r3, r0, #0
 8007e82:	d001      	beq.n	8007e88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8007e84:	f000 f95c 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f010 faab 	bl	80183e8 <HAL_UARTEx_SetTxFifoThreshold>
 8007e92:	1e03      	subs	r3, r0, #0
 8007e94:	d001      	beq.n	8007e9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8007e96:	f000 f953 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f010 fae2 	bl	8018468 <HAL_UARTEx_SetRxFifoThreshold>
 8007ea4:	1e03      	subs	r3, r0, #0
 8007ea6:	d001      	beq.n	8007eac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8007ea8:	f000 f94a 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <MX_USART2_UART_Init+0x94>)
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f010 fa60 	bl	8018374 <HAL_UARTEx_DisableFifoMode>
 8007eb4:	1e03      	subs	r3, r0, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8007eb8:	f000 f942 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007ebc:	46c0      	nop			@ (mov r8, r8)
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	20000678 	.word	0x20000678
 8007ec8:	40004400 	.word	0x40004400

08007ecc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007ed0:	4b24      	ldr	r3, [pc, #144]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007ed2:	4a25      	ldr	r2, [pc, #148]	@ (8007f68 <MX_USART4_UART_Init+0x9c>)
 8007ed4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8007ed6:	4b23      	ldr	r3, [pc, #140]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007ed8:	2296      	movs	r2, #150	@ 0x96
 8007eda:	0212      	lsls	r2, r2, #8
 8007edc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8007ede:	4b21      	ldr	r3, [pc, #132]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007ee0:	2280      	movs	r2, #128	@ 0x80
 8007ee2:	0152      	lsls	r2, r2, #5
 8007ee4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8007eec:	4b1d      	ldr	r3, [pc, #116]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007eee:	2280      	movs	r2, #128	@ 0x80
 8007ef0:	00d2      	lsls	r2, r2, #3
 8007ef2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007ef6:	220c      	movs	r2, #12
 8007ef8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007efa:	4b1a      	ldr	r3, [pc, #104]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f00:	4b18      	ldr	r3, [pc, #96]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f06:	4b17      	ldr	r3, [pc, #92]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f0c:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f12:	4b14      	ldr	r3, [pc, #80]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007f18:	4b12      	ldr	r3, [pc, #72]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f00e fe0c 	bl	8016b38 <HAL_UART_Init>
 8007f20:	1e03      	subs	r3, r0, #0
 8007f22:	d001      	beq.n	8007f28 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 8007f24:	f000 f90c 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f28:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f010 fa5b 	bl	80183e8 <HAL_UARTEx_SetTxFifoThreshold>
 8007f32:	1e03      	subs	r3, r0, #0
 8007f34:	d001      	beq.n	8007f3a <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 8007f36:	f000 f903 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f010 fa92 	bl	8018468 <HAL_UARTEx_SetRxFifoThreshold>
 8007f44:	1e03      	subs	r3, r0, #0
 8007f46:	d001      	beq.n	8007f4c <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 8007f48:	f000 f8fa 	bl	8008140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <MX_USART4_UART_Init+0x98>)
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f010 fa10 	bl	8018374 <HAL_UARTEx_DisableFifoMode>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 8007f58:	f000 f8f2 	bl	8008140 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	46c0      	nop			@ (mov r8, r8)
 8007f64:	2000070c 	.word	0x2000070c
 8007f68:	40004c00 	.word	0x40004c00

08007f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f72:	4b10      	ldr	r3, [pc, #64]	@ (8007fb4 <MX_DMA_Init+0x48>)
 8007f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f76:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb4 <MX_DMA_Init+0x48>)
 8007f78:	2101      	movs	r1, #1
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	649a      	str	r2, [r3, #72]	@ 0x48
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <MX_DMA_Init+0x48>)
 8007f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f82:	2201      	movs	r2, #1
 8007f84:	4013      	ands	r3, r2
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	200a      	movs	r0, #10
 8007f90:	f007 fe8a 	bl	800fca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007f94:	200a      	movs	r0, #10
 8007f96:	f007 fe9c 	bl	800fcd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	200b      	movs	r0, #11
 8007fa0:	f007 fe82 	bl	800fca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 8007fa4:	200b      	movs	r0, #11
 8007fa6:	f007 fe94 	bl	800fcd2 <HAL_NVIC_EnableIRQ>

}
 8007faa:	46c0      	nop			@ (mov r8, r8)
 8007fac:	46bd      	mov	sp, r7
 8007fae:	b002      	add	sp, #8
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	46c0      	nop			@ (mov r8, r8)
 8007fb4:	40021000 	.word	0x40021000

08007fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b089      	sub	sp, #36	@ 0x24
 8007fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbe:	240c      	movs	r4, #12
 8007fc0:	193b      	adds	r3, r7, r4
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	2314      	movs	r3, #20
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f010 fbc1 	bl	8018750 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fce:	4b56      	ldr	r3, [pc, #344]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007fd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fd2:	4b55      	ldr	r3, [pc, #340]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007fd4:	2104      	movs	r1, #4
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007fda:	4b53      	ldr	r3, [pc, #332]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fde:	2204      	movs	r2, #4
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60bb      	str	r3, [r7, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fe6:	4b50      	ldr	r3, [pc, #320]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007fe8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fea:	4b4f      	ldr	r3, [pc, #316]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007fec:	2101      	movs	r1, #1
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8008128 <MX_GPIO_Init+0x170>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8008128 <MX_GPIO_Init+0x170>)
 8008000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008002:	4b49      	ldr	r3, [pc, #292]	@ (8008128 <MX_GPIO_Init+0x170>)
 8008004:	2102      	movs	r1, #2
 8008006:	430a      	orrs	r2, r1
 8008008:	64da      	str	r2, [r3, #76]	@ 0x4c
 800800a:	4b47      	ldr	r3, [pc, #284]	@ (8008128 <MX_GPIO_Init+0x170>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800800e:	2202      	movs	r2, #2
 8008010:	4013      	ands	r3, r2
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 8008016:	4945      	ldr	r1, [pc, #276]	@ (800812c <MX_GPIO_Init+0x174>)
 8008018:	4b45      	ldr	r3, [pc, #276]	@ (8008130 <MX_GPIO_Init+0x178>)
 800801a:	2200      	movs	r2, #0
 800801c:	0018      	movs	r0, r3
 800801e:	f009 f844 	bl	80110aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8008022:	4944      	ldr	r1, [pc, #272]	@ (8008134 <MX_GPIO_Init+0x17c>)
 8008024:	4b44      	ldr	r3, [pc, #272]	@ (8008138 <MX_GPIO_Init+0x180>)
 8008026:	2200      	movs	r2, #0
 8008028:	0018      	movs	r0, r3
 800802a:	f009 f83e 	bl	80110aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800802e:	23f0      	movs	r3, #240	@ 0xf0
 8008030:	0119      	lsls	r1, r3, #4
 8008032:	23a0      	movs	r3, #160	@ 0xa0
 8008034:	05db      	lsls	r3, r3, #23
 8008036:	2200      	movs	r2, #0
 8008038:	0018      	movs	r0, r3
 800803a:	f009 f836 	bl	80110aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800803e:	193b      	adds	r3, r7, r4
 8008040:	4a3a      	ldr	r2, [pc, #232]	@ (800812c <MX_GPIO_Init+0x174>)
 8008042:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008044:	193b      	adds	r3, r7, r4
 8008046:	2201      	movs	r2, #1
 8008048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804a:	193b      	adds	r3, r7, r4
 800804c:	2200      	movs	r2, #0
 800804e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008050:	193b      	adds	r3, r7, r4
 8008052:	2200      	movs	r2, #0
 8008054:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008056:	193b      	adds	r3, r7, r4
 8008058:	4a35      	ldr	r2, [pc, #212]	@ (8008130 <MX_GPIO_Init+0x178>)
 800805a:	0019      	movs	r1, r3
 800805c:	0010      	movs	r0, r2
 800805e:	f008 fdb3 	bl	8010bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 8008062:	193b      	adds	r3, r7, r4
 8008064:	4a33      	ldr	r2, [pc, #204]	@ (8008134 <MX_GPIO_Init+0x17c>)
 8008066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008068:	193b      	adds	r3, r7, r4
 800806a:	2201      	movs	r2, #1
 800806c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806e:	193b      	adds	r3, r7, r4
 8008070:	2200      	movs	r2, #0
 8008072:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008074:	193b      	adds	r3, r7, r4
 8008076:	2200      	movs	r2, #0
 8008078:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800807a:	193b      	adds	r3, r7, r4
 800807c:	4a2e      	ldr	r2, [pc, #184]	@ (8008138 <MX_GPIO_Init+0x180>)
 800807e:	0019      	movs	r1, r3
 8008080:	0010      	movs	r0, r2
 8008082:	f008 fda1 	bl	8010bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_4;
 8008086:	193b      	adds	r3, r7, r4
 8008088:	4a2c      	ldr	r2, [pc, #176]	@ (800813c <MX_GPIO_Init+0x184>)
 800808a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800808c:	193b      	adds	r3, r7, r4
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008092:	193b      	adds	r3, r7, r4
 8008094:	2200      	movs	r2, #0
 8008096:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008098:	193b      	adds	r3, r7, r4
 800809a:	4a27      	ldr	r2, [pc, #156]	@ (8008138 <MX_GPIO_Init+0x180>)
 800809c:	0019      	movs	r1, r3
 800809e:	0010      	movs	r0, r2
 80080a0:	f008 fd92 	bl	8010bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80080a4:	0021      	movs	r1, r4
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	22f0      	movs	r2, #240	@ 0xf0
 80080aa:	0112      	lsls	r2, r2, #4
 80080ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080ae:	000c      	movs	r4, r1
 80080b0:	193b      	adds	r3, r7, r4
 80080b2:	2201      	movs	r2, #1
 80080b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	193b      	adds	r3, r7, r4
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080bc:	193b      	adds	r3, r7, r4
 80080be:	2200      	movs	r2, #0
 80080c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c2:	193a      	adds	r2, r7, r4
 80080c4:	23a0      	movs	r3, #160	@ 0xa0
 80080c6:	05db      	lsls	r3, r3, #23
 80080c8:	0011      	movs	r1, r2
 80080ca:	0018      	movs	r0, r3
 80080cc:	f008 fd7c 	bl	8010bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80080d0:	0021      	movs	r1, r4
 80080d2:	187b      	adds	r3, r7, r1
 80080d4:	2280      	movs	r2, #128	@ 0x80
 80080d6:	0212      	lsls	r2, r2, #8
 80080d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	2288      	movs	r2, #136	@ 0x88
 80080de:	0352      	lsls	r2, r2, #13
 80080e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e8:	187a      	adds	r2, r7, r1
 80080ea:	23a0      	movs	r3, #160	@ 0xa0
 80080ec:	05db      	lsls	r3, r3, #23
 80080ee:	0011      	movs	r1, r2
 80080f0:	0018      	movs	r0, r3
 80080f2:	f008 fd69 	bl	8010bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80080f6:	2200      	movs	r2, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	2007      	movs	r0, #7
 80080fc:	f007 fdd4 	bl	800fca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008100:	2007      	movs	r0, #7
 8008102:	f007 fde6 	bl	800fcd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 8008106:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <MX_GPIO_Init+0x180>)
 8008108:	2201      	movs	r2, #1
 800810a:	2108      	movs	r1, #8
 800810c:	0018      	movs	r0, r3
 800810e:	f008 ffcc 	bl	80110aa <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 8008112:	2380      	movs	r3, #128	@ 0x80
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4a06      	ldr	r2, [pc, #24]	@ (8008130 <MX_GPIO_Init+0x178>)
 8008118:	0019      	movs	r1, r3
 800811a:	0010      	movs	r0, r2
 800811c:	f008 ffe2 	bl	80110e4 <HAL_GPIO_TogglePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8008120:	46c0      	nop			@ (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b009      	add	sp, #36	@ 0x24
 8008126:	bd90      	pop	{r4, r7, pc}
 8008128:	40021000 	.word	0x40021000
 800812c:	0000074c 	.word	0x0000074c
 8008130:	50000800 	.word	0x50000800
 8008134:	0000042c 	.word	0x0000042c
 8008138:	50000400 	.word	0x50000400
 800813c:	00005810 	.word	0x00005810

08008140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008144:	b672      	cpsid	i
}
 8008146:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	e7fd      	b.n	8008148 <Error_Handler+0x8>

0800814c <noctar>:


void noctar (void){
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0

	asm ("nop");
 8008150:	46c0      	nop			@ (mov r8, r8)

}
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	e00c      	b.n	800817e <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 8008164:	4adb      	ldr	r2, [pc, #876]	@ (80084d4 <refrigera+0x37c>)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	18d3      	adds	r3, r2, r3
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800816e:	4ada      	ldr	r2, [pc, #872]	@ (80084d8 <refrigera+0x380>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	18d3      	adds	r3, r2, r3
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b07      	cmp	r3, #7
 8008182:	ddef      	ble.n	8008164 <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 8008184:	4bd5      	ldr	r3, [pc, #852]	@ (80084dc <refrigera+0x384>)
 8008186:	2253      	movs	r2, #83	@ 0x53
 8008188:	5c9a      	ldrb	r2, [r3, r2]
 800818a:	4bd5      	ldr	r3, [pc, #852]	@ (80084e0 <refrigera+0x388>)
 800818c:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800818e:	4bd4      	ldr	r3, [pc, #848]	@ (80084e0 <refrigera+0x388>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	001a      	movs	r2, r3
 8008194:	2301      	movs	r3, #1
 8008196:	4013      	ands	r3, r2
 8008198:	d003      	beq.n	80081a2 <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800819a:	4bce      	ldr	r3, [pc, #824]	@ (80084d4 <refrigera+0x37c>)
 800819c:	2201      	movs	r2, #1
 800819e:	70da      	strb	r2, [r3, #3]
 80081a0:	e000      	b.n	80081a4 <refrigera+0x4c>
					goto refrigera_j00;
 80081a2:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 80081a4:	4bce      	ldr	r3, [pc, #824]	@ (80084e0 <refrigera+0x388>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	001a      	movs	r2, r3
 80081aa:	2302      	movs	r3, #2
 80081ac:	4013      	ands	r3, r2
 80081ae:	d003      	beq.n	80081b8 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 80081b0:	4bc8      	ldr	r3, [pc, #800]	@ (80084d4 <refrigera+0x37c>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	711a      	strb	r2, [r3, #4]
 80081b6:	e000      	b.n	80081ba <refrigera+0x62>
					goto refrigera_j01;
 80081b8:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 80081ba:	4bc8      	ldr	r3, [pc, #800]	@ (80084dc <refrigera+0x384>)
 80081bc:	2262      	movs	r2, #98	@ 0x62
 80081be:	5c9a      	ldrb	r2, [r3, r2]
 80081c0:	4bc7      	ldr	r3, [pc, #796]	@ (80084e0 <refrigera+0x388>)
 80081c2:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 80081c4:	f7fc f94c 	bl	8004460 <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 80081c8:	4bc4      	ldr	r3, [pc, #784]	@ (80084dc <refrigera+0x384>)
 80081ca:	2257      	movs	r2, #87	@ 0x57
 80081cc:	5c9b      	ldrb	r3, [r3, r2]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d11e      	bne.n	8008210 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 80081d2:	4bc2      	ldr	r3, [pc, #776]	@ (80084dc <refrigera+0x384>)
 80081d4:	2243      	movs	r2, #67	@ 0x43
 80081d6:	5c9b      	ldrb	r3, [r3, r2]
 80081d8:	3364      	adds	r3, #100	@ 0x64
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	4bc1      	ldr	r3, [pc, #772]	@ (80084e4 <refrigera+0x38c>)
 80081de:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 80081e0:	4bc0      	ldr	r3, [pc, #768]	@ (80084e4 <refrigera+0x38c>)
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	4bc0      	ldr	r3, [pc, #768]	@ (80084e8 <refrigera+0x390>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	18d3      	adds	r3, r2, r3
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	4bbf      	ldr	r3, [pc, #764]	@ (80084ec <refrigera+0x394>)
 80081ee:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 80081f0:	4bba      	ldr	r3, [pc, #744]	@ (80084dc <refrigera+0x384>)
 80081f2:	2244      	movs	r2, #68	@ 0x44
 80081f4:	5c9b      	ldrb	r3, [r3, r2]
 80081f6:	3b38      	subs	r3, #56	@ 0x38
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	4bbd      	ldr	r3, [pc, #756]	@ (80084f0 <refrigera+0x398>)
 80081fc:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 80081fe:	4bbc      	ldr	r3, [pc, #752]	@ (80084f0 <refrigera+0x398>)
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	4bb7      	ldr	r3, [pc, #732]	@ (80084e0 <refrigera+0x388>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4bba      	ldr	r3, [pc, #744]	@ (80084f4 <refrigera+0x39c>)
 800820c:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800820e:	e021      	b.n	8008254 <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 8008210:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 8008212:	4bb2      	ldr	r3, [pc, #712]	@ (80084dc <refrigera+0x384>)
 8008214:	2257      	movs	r2, #87	@ 0x57
 8008216:	5c9b      	ldrb	r3, [r3, r2]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d11f      	bne.n	800825c <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800821c:	4baf      	ldr	r3, [pc, #700]	@ (80084dc <refrigera+0x384>)
 800821e:	2242      	movs	r2, #66	@ 0x42
 8008220:	5c9a      	ldrb	r2, [r3, r2]
 8008222:	4bb0      	ldr	r3, [pc, #704]	@ (80084e4 <refrigera+0x38c>)
 8008224:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 8008226:	4baf      	ldr	r3, [pc, #700]	@ (80084e4 <refrigera+0x38c>)
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	4baf      	ldr	r3, [pc, #700]	@ (80084e8 <refrigera+0x390>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	18d3      	adds	r3, r2, r3
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4bae      	ldr	r3, [pc, #696]	@ (80084ec <refrigera+0x394>)
 8008234:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 8008236:	4ba9      	ldr	r3, [pc, #676]	@ (80084dc <refrigera+0x384>)
 8008238:	2243      	movs	r2, #67	@ 0x43
 800823a:	5c9b      	ldrb	r3, [r3, r2]
 800823c:	3364      	adds	r3, #100	@ 0x64
 800823e:	b2da      	uxtb	r2, r3
 8008240:	4bab      	ldr	r3, [pc, #684]	@ (80084f0 <refrigera+0x398>)
 8008242:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 8008244:	4baa      	ldr	r3, [pc, #680]	@ (80084f0 <refrigera+0x398>)
 8008246:	781a      	ldrb	r2, [r3, #0]
 8008248:	4ba5      	ldr	r3, [pc, #660]	@ (80084e0 <refrigera+0x388>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	b2da      	uxtb	r2, r3
 8008250:	4ba8      	ldr	r3, [pc, #672]	@ (80084f4 <refrigera+0x39c>)
 8008252:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 8008254:	4b9f      	ldr	r3, [pc, #636]	@ (80084d4 <refrigera+0x37c>)
 8008256:	2201      	movs	r2, #1
 8008258:	719a      	strb	r2, [r3, #6]
 800825a:	e000      	b.n	800825e <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800825c:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800825e:	4b9e      	ldr	r3, [pc, #632]	@ (80084d8 <refrigera+0x380>)
 8008260:	2201      	movs	r2, #1
 8008262:	705a      	strb	r2, [r3, #1]

				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 8008264:	4b9d      	ldr	r3, [pc, #628]	@ (80084dc <refrigera+0x384>)
 8008266:	2255      	movs	r2, #85	@ 0x55
 8008268:	2100      	movs	r1, #0
 800826a:	5499      	strb	r1, [r3, r2]

              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800826c:	4ba2      	ldr	r3, [pc, #648]	@ (80084f8 <refrigera+0x3a0>)
 800826e:	0018      	movs	r0, r3
 8008270:	f7fb feae 	bl	8003fd0 <TwoByteInArrayToWord>
 8008274:	0003      	movs	r3, r0
 8008276:	b29a      	uxth	r2, r3
 8008278:	4ba0      	ldr	r3, [pc, #640]	@ (80084fc <refrigera+0x3a4>)
 800827a:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800827c:	4ba0      	ldr	r3, [pc, #640]	@ (8008500 <refrigera+0x3a8>)
 800827e:	0018      	movs	r0, r3
 8008280:	f7fb fea6 	bl	8003fd0 <TwoByteInArrayToWord>
 8008284:	0003      	movs	r3, r0
 8008286:	b29a      	uxth	r2, r3
 8008288:	4b9c      	ldr	r3, [pc, #624]	@ (80084fc <refrigera+0x3a4>)
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	b29a      	uxth	r2, r3
 8008290:	4b9c      	ldr	r3, [pc, #624]	@ (8008504 <refrigera+0x3ac>)
 8008292:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 8008294:	4b9c      	ldr	r3, [pc, #624]	@ (8008508 <refrigera+0x3b0>)
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2201      	movs	r2, #1
 800829a:	4053      	eors	r3, r2
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d137      	bne.n	8008312 <refrigera+0x1ba>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 80082a2:	4b9a      	ldr	r3, [pc, #616]	@ (800850c <refrigera+0x3b4>)
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7fb fe93 	bl	8003fd0 <TwoByteInArrayToWord>
 80082aa:	0003      	movs	r3, r0
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	4b93      	ldr	r3, [pc, #588]	@ (80084fc <refrigera+0x3a4>)
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	18d3      	adds	r3, r2, r3
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	4b91      	ldr	r3, [pc, #580]	@ (80084fc <refrigera+0x3a4>)
 80082b8:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 80082ba:	4b94      	ldr	r3, [pc, #592]	@ (800850c <refrigera+0x3b4>)
 80082bc:	0018      	movs	r0, r3
 80082be:	f7fb fe87 	bl	8003fd0 <TwoByteInArrayToWord>
 80082c2:	0003      	movs	r3, r0
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	4b8f      	ldr	r3, [pc, #572]	@ (8008504 <refrigera+0x3ac>)
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	18d3      	adds	r3, r2, r3
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	4b8d      	ldr	r3, [pc, #564]	@ (8008504 <refrigera+0x3ac>)
 80082d0:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 80082d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008508 <refrigera+0x3b0>)
 80082d4:	789b      	ldrb	r3, [r3, #2]
 80082d6:	2201      	movs	r2, #1
 80082d8:	4053      	eors	r3, r2
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11a      	bne.n	8008316 <refrigera+0x1be>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 80082e0:	4b8b      	ldr	r3, [pc, #556]	@ (8008510 <refrigera+0x3b8>)
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7fb fe74 	bl	8003fd0 <TwoByteInArrayToWord>
 80082e8:	0003      	movs	r3, r0
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	4b83      	ldr	r3, [pc, #524]	@ (80084fc <refrigera+0x3a4>)
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	18d3      	adds	r3, r2, r3
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	4b81      	ldr	r3, [pc, #516]	@ (80084fc <refrigera+0x3a4>)
 80082f6:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 80082f8:	4b85      	ldr	r3, [pc, #532]	@ (8008510 <refrigera+0x3b8>)
 80082fa:	0018      	movs	r0, r3
 80082fc:	f7fb fe68 	bl	8003fd0 <TwoByteInArrayToWord>
 8008300:	0003      	movs	r3, r0
 8008302:	b29a      	uxth	r2, r3
 8008304:	4b7f      	ldr	r3, [pc, #508]	@ (8008504 <refrigera+0x3ac>)
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	18d3      	adds	r3, r2, r3
 800830a:	b29a      	uxth	r2, r3
 800830c:	4b7d      	ldr	r3, [pc, #500]	@ (8008504 <refrigera+0x3ac>)
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	e002      	b.n	8008318 <refrigera+0x1c0>
					goto no_ahorro1;
 8008312:	46c0      	nop			@ (mov r8, r8)
 8008314:	e000      	b.n	8008318 <refrigera+0x1c0>
					goto no_ahorro1;
 8008316:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 8008318:	4b7e      	ldr	r3, [pc, #504]	@ (8008514 <refrigera+0x3bc>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	001a      	movs	r2, r3
 800831e:	2302      	movs	r3, #2
 8008320:	4013      	ands	r3, r2
 8008322:	d133      	bne.n	800838c <refrigera+0x234>
					goto refrigera_j04;
 8008324:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 8008326:	f7fc fa59 	bl	80047dc <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800832a:	230b      	movs	r3, #11
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e00a      	b.n	800834a <refrigera+0x1f2>
					datled[k] = 0;
 8008334:	200b      	movs	r0, #11
 8008336:	183b      	adds	r3, r7, r0
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	4a77      	ldr	r2, [pc, #476]	@ (8008518 <refrigera+0x3c0>)
 800833c:	2100      	movs	r1, #0
 800833e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 8008340:	183b      	adds	r3, r7, r0
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	183b      	adds	r3, r7, r0
 8008346:	3201      	adds	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	230b      	movs	r3, #11
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b06      	cmp	r3, #6
 8008352:	d9ef      	bls.n	8008334 <refrigera+0x1dc>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 8008354:	4b6f      	ldr	r3, [pc, #444]	@ (8008514 <refrigera+0x3bc>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	001a      	movs	r2, r3
 800835a:	2301      	movs	r3, #1
 800835c:	4013      	ands	r3, r2
 800835e:	d100      	bne.n	8008362 <refrigera+0x20a>
 8008360:	e1e2      	b.n	8008728 <refrigera+0x5d0>
					goto refrigera_j05;
 8008362:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 8008364:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 8008366:	4b6d      	ldr	r3, [pc, #436]	@ (800851c <refrigera+0x3c4>)
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	4b5d      	ldr	r3, [pc, #372]	@ (80084e0 <refrigera+0x388>)
 800836c:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800836e:	4b5c      	ldr	r3, [pc, #368]	@ (80084e0 <refrigera+0x388>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	001a      	movs	r2, r3
 8008374:	4b6a      	ldr	r3, [pc, #424]	@ (8008520 <refrigera+0x3c8>)
 8008376:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 8008378:	f7fb fe7a 	bl	8004070 <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800837c:	4b58      	ldr	r3, [pc, #352]	@ (80084e0 <refrigera+0x388>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <refrigera+0x230>
 8008384:	f000 fb9c 	bl	8008ac0 <refrigera+0x968>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 8008388:	f000 fb9e 	bl	8008ac8 <refrigera+0x970>
				goto refrige10;
 800838c:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800838e:	f7fb fedf 	bl	8004150 <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 8008392:	4961      	ldr	r1, [pc, #388]	@ (8008518 <refrigera+0x3c0>)
 8008394:	4860      	ldr	r0, [pc, #384]	@ (8008518 <refrigera+0x3c0>)
 8008396:	2303      	movs	r3, #3
 8008398:	2202      	movs	r2, #2
 800839a:	f002 fbda 	bl	800ab52 <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800839e:	4b61      	ldr	r3, [pc, #388]	@ (8008524 <refrigera+0x3cc>)
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	4053      	eors	r3, r2
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d129      	bne.n	8008400 <refrigera+0x2a8>
            cntMsgCmd = 250;
 80083ac:	4b5e      	ldr	r3, [pc, #376]	@ (8008528 <refrigera+0x3d0>)
 80083ae:	22fa      	movs	r2, #250	@ 0xfa
 80083b0:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 80083b2:	4b5e      	ldr	r3, [pc, #376]	@ (800852c <refrigera+0x3d4>)
 80083b4:	2203      	movs	r2, #3
 80083b6:	701a      	strb	r2, [r3, #0]
            waux = eeEstado1;
 80083b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008530 <refrigera+0x3d8>)
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	4b4a      	ldr	r3, [pc, #296]	@ (80084e8 <refrigera+0x390>)
 80083be:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 80083c0:	4b49      	ldr	r3, [pc, #292]	@ (80084e8 <refrigera+0x390>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2240      	movs	r2, #64	@ 0x40
 80083c6:	4393      	bics	r3, r2
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	4b47      	ldr	r3, [pc, #284]	@ (80084e8 <refrigera+0x390>)
 80083cc:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 80083ce:	4b59      	ldr	r3, [pc, #356]	@ (8008534 <refrigera+0x3dc>)
 80083d0:	799b      	ldrb	r3, [r3, #6]
 80083d2:	2201      	movs	r2, #1
 80083d4:	4053      	eors	r3, r2
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <refrigera+0x294>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 80083dc:	4b42      	ldr	r3, [pc, #264]	@ (80084e8 <refrigera+0x390>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2240      	movs	r2, #64	@ 0x40
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	4b40      	ldr	r3, [pc, #256]	@ (80084e8 <refrigera+0x390>)
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e000      	b.n	80083ee <refrigera+0x296>
            	goto func_lock_01;
 80083ec:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 80083ee:	4b3e      	ldr	r3, [pc, #248]	@ (80084e8 <refrigera+0x390>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	001a      	movs	r2, r3
 80083f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008530 <refrigera+0x3d8>)
 80083f6:	0019      	movs	r1, r3
 80083f8:	0010      	movs	r0, r2
 80083fa:	f7fc fe85 	bl	8005108 <wreeprom>
 80083fe:	e000      	b.n	8008402 <refrigera+0x2aa>
            	goto no_Func_Lock;
 8008400:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 8008402:	4b48      	ldr	r3, [pc, #288]	@ (8008524 <refrigera+0x3cc>)
 8008404:	789b      	ldrb	r3, [r3, #2]
 8008406:	2201      	movs	r2, #1
 8008408:	4053      	eors	r3, r2
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d133      	bne.n	8008478 <refrigera+0x320>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 8008410:	4b45      	ldr	r3, [pc, #276]	@ (8008528 <refrigera+0x3d0>)
 8008412:	22fa      	movs	r2, #250	@ 0xfa
 8008414:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 8008416:	4b45      	ldr	r3, [pc, #276]	@ (800852c <refrigera+0x3d4>)
 8008418:	2202      	movs	r2, #2
 800841a:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800841c:	4b3a      	ldr	r3, [pc, #232]	@ (8008508 <refrigera+0x3b0>)
 800841e:	799b      	ldrb	r3, [r3, #6]
 8008420:	2201      	movs	r2, #1
 8008422:	4053      	eors	r3, r2
 8008424:	b2db      	uxtb	r3, r3
 8008426:	1e5a      	subs	r2, r3, #1
 8008428:	4193      	sbcs	r3, r2
 800842a:	b2da      	uxtb	r2, r3
 800842c:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <refrigera+0x3b0>)
 800842e:	719a      	strb	r2, [r3, #6]
               waux = eeEstado1;
 8008430:	4b3f      	ldr	r3, [pc, #252]	@ (8008530 <refrigera+0x3d8>)
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	4b2c      	ldr	r3, [pc, #176]	@ (80084e8 <refrigera+0x390>)
 8008436:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 8008438:	4b2b      	ldr	r3, [pc, #172]	@ (80084e8 <refrigera+0x390>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2204      	movs	r2, #4
 800843e:	4393      	bics	r3, r2
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b29      	ldr	r3, [pc, #164]	@ (80084e8 <refrigera+0x390>)
 8008444:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 8008446:	4b30      	ldr	r3, [pc, #192]	@ (8008508 <refrigera+0x3b0>)
 8008448:	799b      	ldrb	r3, [r3, #6]
 800844a:	2201      	movs	r2, #1
 800844c:	4053      	eors	r3, r2
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <refrigera+0x30c>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 8008454:	4b24      	ldr	r3, [pc, #144]	@ (80084e8 <refrigera+0x390>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2204      	movs	r2, #4
 800845a:	4313      	orrs	r3, r2
 800845c:	b2da      	uxtb	r2, r3
 800845e:	4b22      	ldr	r3, [pc, #136]	@ (80084e8 <refrigera+0x390>)
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	e000      	b.n	8008466 <refrigera+0x30e>
            	   goto refrigera_j06d;
 8008464:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 8008466:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <refrigera+0x390>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	001a      	movs	r2, r3
 800846c:	4b30      	ldr	r3, [pc, #192]	@ (8008530 <refrigera+0x3d8>)
 800846e:	0019      	movs	r1, r3
 8008470:	0010      	movs	r0, r2
 8008472:	f7fc fe49 	bl	8005108 <wreeprom>
 8008476:	e000      	b.n	800847a <refrigera+0x322>
            	   goto refrigera_j06c;
 8008478:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800847a:	4b23      	ldr	r3, [pc, #140]	@ (8008508 <refrigera+0x3b0>)
 800847c:	789b      	ldrb	r3, [r3, #2]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d121      	bne.n	80084c6 <refrigera+0x36e>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 8008482:	4b2d      	ldr	r3, [pc, #180]	@ (8008538 <refrigera+0x3e0>)
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d11f      	bne.n	80084ca <refrigera+0x372>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800848a:	4b2c      	ldr	r3, [pc, #176]	@ (800853c <refrigera+0x3e4>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2201      	movs	r2, #1
 8008490:	4053      	eors	r3, r2
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	d11a      	bne.n	80084ce <refrigera+0x376>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 8008498:	4b1b      	ldr	r3, [pc, #108]	@ (8008508 <refrigera+0x3b0>)
 800849a:	799b      	ldrb	r3, [r3, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10b      	bne.n	80084b8 <refrigera+0x360>
                if(retLampOff != 0){ //tnz retLampOff
 80084a0:	4b27      	ldr	r3, [pc, #156]	@ (8008540 <refrigera+0x3e8>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <refrigera+0x364>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 80084a8:	4b17      	ldr	r3, [pc, #92]	@ (8008508 <refrigera+0x3b0>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2201      	movs	r2, #1
 80084ae:	4053      	eors	r3, r2
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d146      	bne.n	8008544 <refrigera+0x3ec>
refrigera_j06a:
 80084b6:	e002      	b.n	80084be <refrigera+0x366>
                	goto refrigera_j06a;
 80084b8:	46c0      	nop			@ (mov r8, r8)
 80084ba:	e000      	b.n	80084be <refrigera+0x366>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 80084bc:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 80084be:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <refrigera+0x37c>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	709a      	strb	r2, [r3, #2]
 80084c4:	e03f      	b.n	8008546 <refrigera+0x3ee>
                	goto refrigera_j06;
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	e03d      	b.n	8008546 <refrigera+0x3ee>
                	goto refrigera_j06;
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	e03b      	b.n	8008546 <refrigera+0x3ee>
                	goto refrigera_j06;
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	e039      	b.n	8008546 <refrigera+0x3ee>
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	20000bc4 	.word	0x20000bc4
 80084d8:	20000c00 	.word	0x20000c00
 80084dc:	200000bc 	.word	0x200000bc
 80084e0:	20000b77 	.word	0x20000b77
 80084e4:	20000c44 	.word	0x20000c44
 80084e8:	20000b76 	.word	0x20000b76
 80084ec:	20000c46 	.word	0x20000c46
 80084f0:	20000c43 	.word	0x20000c43
 80084f4:	20000c45 	.word	0x20000c45
 80084f8:	200000bd 	.word	0x200000bd
 80084fc:	20000bcc 	.word	0x20000bcc
 8008500:	200000bf 	.word	0x200000bf
 8008504:	20000bce 	.word	0x20000bce
 8008508:	20000c5c 	.word	0x20000c5c
 800850c:	200000d7 	.word	0x200000d7
 8008510:	200000d9 	.word	0x200000d9
 8008514:	20000bb8 	.word	0x20000bb8
 8008518:	20000bb0 	.word	0x20000bb0
 800851c:	20000b8c 	.word	0x20000b8c
 8008520:	20000bda 	.word	0x20000bda
 8008524:	20000bbc 	.word	0x20000bbc
 8008528:	20001084 	.word	0x20001084
 800852c:	20001085 	.word	0x20001085
 8008530:	20000387 	.word	0x20000387
 8008534:	20001064 	.word	0x20001064
 8008538:	20000b98 	.word	0x20000b98
 800853c:	20000c08 	.word	0x20000c08
 8008540:	20001086 	.word	0x20001086
                	goto refrigera_j06;
 8008544:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 8008546:	4bce      	ldr	r3, [pc, #824]	@ (8008880 <refrigera+0x728>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	001a      	movs	r2, r3
 800854c:	2301      	movs	r3, #1
 800854e:	4013      	ands	r3, r2
 8008550:	d101      	bne.n	8008556 <refrigera+0x3fe>
 8008552:	f000 fc2a 	bl	8008daa <refrigera+0xc52>
                	goto refrigera_j07;
 8008556:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 8008558:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800855a:	49ca      	ldr	r1, [pc, #808]	@ (8008884 <refrigera+0x72c>)
 800855c:	48c9      	ldr	r0, [pc, #804]	@ (8008884 <refrigera+0x72c>)
 800855e:	2307      	movs	r3, #7
 8008560:	2203      	movs	r2, #3
 8008562:	f002 fadb 	bl	800ab1c <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 8008566:	4bc8      	ldr	r3, [pc, #800]	@ (8008888 <refrigera+0x730>)
 8008568:	2259      	movs	r2, #89	@ 0x59
 800856a:	5c9b      	ldrb	r3, [r3, r2]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d001      	beq.n	8008574 <refrigera+0x41c>
 8008570:	f000 fe5e 	bl	8009230 <refrigera+0x10d8>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 8008574:	f000 fe6c 	bl	8009250 <refrigera+0x10f8>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 8008578:	4bc4      	ldr	r3, [pc, #784]	@ (800888c <refrigera+0x734>)
 800857a:	2200      	movs	r2, #0
 800857c:	801a      	strh	r2, [r3, #0]
				goto finref;
 800857e:	e05b      	b.n	8008638 <refrigera+0x4e0>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 8008580:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 8008582:	4bc1      	ldr	r3, [pc, #772]	@ (8008888 <refrigera+0x730>)
 8008584:	2264      	movs	r2, #100	@ 0x64
 8008586:	5c9a      	ldrb	r2, [r3, r2]
 8008588:	4bc1      	ldr	r3, [pc, #772]	@ (8008890 <refrigera+0x738>)
 800858a:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800858c:	f7fb ff68 	bl	8004460 <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 8008590:	4bc0      	ldr	r3, [pc, #768]	@ (8008894 <refrigera+0x73c>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	001a      	movs	r2, r3
 8008596:	233c      	movs	r3, #60	@ 0x3c
 8008598:	4353      	muls	r3, r2
 800859a:	b29a      	uxth	r2, r3
 800859c:	4bbe      	ldr	r3, [pc, #760]	@ (8008898 <refrigera+0x740>)
 800859e:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 80085a0:	4bbb      	ldr	r3, [pc, #748]	@ (8008890 <refrigera+0x738>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	001a      	movs	r2, r3
 80085a6:	233c      	movs	r3, #60	@ 0x3c
 80085a8:	4353      	muls	r3, r2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	4bbb      	ldr	r3, [pc, #748]	@ (800889c <refrigera+0x744>)
 80085ae:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 80085b0:	f7fb fdae 	bl	8004110 <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 80085b4:	4bb2      	ldr	r3, [pc, #712]	@ (8008880 <refrigera+0x728>)
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 80085ba:	e03a      	b.n	8008632 <refrigera+0x4da>
				retvent = 20;
 80085bc:	4bb8      	ldr	r3, [pc, #736]	@ (80088a0 <refrigera+0x748>)
 80085be:	2214      	movs	r2, #20
 80085c0:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 80085c2:	4bb8      	ldr	r3, [pc, #736]	@ (80088a4 <refrigera+0x74c>)
 80085c4:	2232      	movs	r2, #50	@ 0x32
 80085c6:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 80085c8:	4bad      	ldr	r3, [pc, #692]	@ (8008880 <refrigera+0x728>)
 80085ca:	2202      	movs	r2, #2
 80085cc:	701a      	strb	r2, [r3, #0]
				goto todh20;
 80085ce:	e030      	b.n	8008632 <refrigera+0x4da>
                  goto todh; //jp todh
 80085d0:	46c0      	nop			@ (mov r8, r8)
 80085d2:	e000      	b.n	80085d6 <refrigera+0x47e>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 80085d4:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 80085d6:	4bb4      	ldr	r3, [pc, #720]	@ (80088a8 <refrigera+0x750>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 80085dc:	f7fb fd28 	bl	8004030 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 80085e0:	4ba9      	ldr	r3, [pc, #676]	@ (8008888 <refrigera+0x730>)
 80085e2:	2247      	movs	r2, #71	@ 0x47
 80085e4:	5c9a      	ldrb	r2, [r3, r2]
 80085e6:	4baa      	ldr	r3, [pc, #680]	@ (8008890 <refrigera+0x738>)
 80085e8:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 80085ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008888 <refrigera+0x730>)
 80085ec:	2255      	movs	r2, #85	@ 0x55
 80085ee:	5c9b      	ldrb	r3, [r3, r2]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d102      	bne.n	80085fa <refrigera+0x4a2>
				BaBentre10_math();					//call BaBentre10_math
 80085f4:	f7fb ff34 	bl	8004460 <BaBentre10_math>
				goto todh2;
 80085f8:	e014      	b.n	8008624 <refrigera+0x4cc>
					goto todh1;
 80085fa:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 80085fc:	4ba4      	ldr	r3, [pc, #656]	@ (8008890 <refrigera+0x738>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	001a      	movs	r2, r3
 8008602:	233c      	movs	r3, #60	@ 0x3c
 8008604:	4353      	muls	r3, r2
 8008606:	b29a      	uxth	r2, r3
 8008608:	4ba8      	ldr	r3, [pc, #672]	@ (80088ac <refrigera+0x754>)
 800860a:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800860c:	4ba7      	ldr	r3, [pc, #668]	@ (80088ac <refrigera+0x754>)
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	b2da      	uxtb	r2, r3
 8008616:	4ba6      	ldr	r3, [pc, #664]	@ (80088b0 <refrigera+0x758>)
 8008618:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800861a:	4ba4      	ldr	r3, [pc, #656]	@ (80088ac <refrigera+0x754>)
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b2da      	uxtb	r2, r3
 8008620:	4ba4      	ldr	r3, [pc, #656]	@ (80088b4 <refrigera+0x75c>)
 8008622:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 8008624:	4ba3      	ldr	r3, [pc, #652]	@ (80088b4 <refrigera+0x75c>)
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	4ba3      	ldr	r3, [pc, #652]	@ (80088b8 <refrigera+0x760>)
 800862a:	701a      	strb	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800862c:	4b94      	ldr	r3, [pc, #592]	@ (8008880 <refrigera+0x728>)
 800862e:	2203      	movs	r2, #3
 8008630:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 8008632:	4ba2      	ldr	r3, [pc, #648]	@ (80088bc <refrigera+0x764>)
 8008634:	2204      	movs	r2, #4
 8008636:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 8008638:	4ba1      	ldr	r3, [pc, #644]	@ (80088c0 <refrigera+0x768>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d103      	bne.n	8008648 <refrigera+0x4f0>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 8008640:	4b90      	ldr	r3, [pc, #576]	@ (8008884 <refrigera+0x72c>)
 8008642:	2200      	movs	r2, #0
 8008644:	709a      	strb	r2, [r3, #2]
 8008646:	e000      	b.n	800864a <refrigera+0x4f2>
                	goto refrigera_j11;
 8008648:	46c0      	nop			@ (mov r8, r8)
                if(!GetRegFlagState(eeEstado1,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800864a:	4b9e      	ldr	r3, [pc, #632]	@ (80088c4 <refrigera+0x76c>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	001a      	movs	r2, r3
 8008650:	2340      	movs	r3, #64	@ 0x40
 8008652:	4013      	ands	r3, r2
 8008654:	d003      	beq.n	800865e <refrigera+0x506>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 8008656:	4b9a      	ldr	r3, [pc, #616]	@ (80088c0 <refrigera+0x768>)
 8008658:	2201      	movs	r2, #1
 800865a:	705a      	strb	r2, [r3, #1]
 800865c:	e000      	b.n	8008660 <refrigera+0x508>
                	goto refrigeraLockDrOFF;
 800865e:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 8008660:	4b99      	ldr	r3, [pc, #612]	@ (80088c8 <refrigera+0x770>)
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00f      	beq.n	8008688 <refrigera+0x530>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 8008668:	4b95      	ldr	r3, [pc, #596]	@ (80088c0 <refrigera+0x768>)
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800866e:	4b94      	ldr	r3, [pc, #592]	@ (80088c0 <refrigera+0x768>)
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 8008674:	4b95      	ldr	r3, [pc, #596]	@ (80088cc <refrigera+0x774>)
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800867a:	4982      	ldr	r1, [pc, #520]	@ (8008884 <refrigera+0x72c>)
 800867c:	4881      	ldr	r0, [pc, #516]	@ (8008884 <refrigera+0x72c>)
 800867e:	2307      	movs	r3, #7
 8008680:	2202      	movs	r2, #2
 8008682:	f002 fa66 	bl	800ab52 <Bclear_Clear_trfst>
               goto endNoct;
 8008686:	e01b      	b.n	80086c0 <refrigera+0x568>
            	   goto endNocturno;
 8008688:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800868a:	4b91      	ldr	r3, [pc, #580]	@ (80088d0 <refrigera+0x778>)
 800868c:	78db      	ldrb	r3, [r3, #3]
 800868e:	2201      	movs	r2, #1
 8008690:	4053      	eors	r3, r2
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d112      	bne.n	80086be <refrigera+0x566>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 8008698:	498d      	ldr	r1, [pc, #564]	@ (80088d0 <refrigera+0x778>)
 800869a:	488e      	ldr	r0, [pc, #568]	@ (80088d4 <refrigera+0x77c>)
 800869c:	2303      	movs	r3, #3
 800869e:	2200      	movs	r2, #0
 80086a0:	f002 fa3c 	bl	800ab1c <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 80086a4:	4977      	ldr	r1, [pc, #476]	@ (8008884 <refrigera+0x72c>)
 80086a6:	488c      	ldr	r0, [pc, #560]	@ (80088d8 <refrigera+0x780>)
 80086a8:	2304      	movs	r3, #4
 80086aa:	2201      	movs	r2, #1
 80086ac:	f002 fa36 	bl	800ab1c <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 80086b0:	4b8a      	ldr	r3, [pc, #552]	@ (80088dc <refrigera+0x784>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 80086b6:	4b8a      	ldr	r3, [pc, #552]	@ (80088e0 <refrigera+0x788>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e000      	b.n	80086c0 <refrigera+0x568>
            	  goto endNoct;
 80086be:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState (eeEstado1, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 80086c0:	4b80      	ldr	r3, [pc, #512]	@ (80088c4 <refrigera+0x76c>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	001a      	movs	r2, r3
 80086c6:	2301      	movs	r3, #1
 80086c8:	4013      	ands	r3, r2
 80086ca:	d118      	bne.n	80086fe <refrigera+0x5a6>
refriOFF:
 80086cc:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 80086ce:	f000 fe31 	bl	8009334 <st_refri>
           for(uint8_t k=0; k<8; k++){
 80086d2:	230a      	movs	r3, #10
 80086d4:	18fb      	adds	r3, r7, r3
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	e00a      	b.n	80086f2 <refrigera+0x59a>
        	   datled[k] = 0;
 80086dc:	200a      	movs	r0, #10
 80086de:	183b      	adds	r3, r7, r0
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4a68      	ldr	r2, [pc, #416]	@ (8008884 <refrigera+0x72c>)
 80086e4:	2100      	movs	r1, #0
 80086e6:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 80086e8:	183b      	adds	r3, r7, r0
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	183b      	adds	r3, r7, r0
 80086ee:	3201      	adds	r2, #1
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	230a      	movs	r3, #10
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b07      	cmp	r3, #7
 80086fa:	d9ef      	bls.n	80086dc <refrigera+0x584>
refriON:
 80086fc:	e000      	b.n	8008700 <refrigera+0x5a8>
            	 goto refriON;
 80086fe:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 8008700:	4b78      	ldr	r3, [pc, #480]	@ (80088e4 <refrigera+0x78c>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	4053      	eors	r3, r2
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <refrigera+0x5ca>
         st_refri();
 800870e:	f000 fe11 	bl	8009334 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 8008712:	4b75      	ldr	r3, [pc, #468]	@ (80088e8 <refrigera+0x790>)
 8008714:	2201      	movs	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 8008718:	4b6f      	ldr	r3, [pc, #444]	@ (80088d8 <refrigera+0x780>)
 800871a:	2201      	movs	r2, #1
 800871c:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800871e:	f000 fdcd 	bl	80092bc <refrigera+0x1164>
        	 goto ac_OK;
 8008722:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 8008724:	f000 fdca 	bl	80092bc <refrigera+0x1164>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 8008728:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800872a:	4b70      	ldr	r3, [pc, #448]	@ (80088ec <refrigera+0x794>)
 800872c:	2200      	movs	r2, #0
 800872e:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 8008730:	f7fb fc64 	bl	8003ffc <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 8008734:	f7fb fc6a 	bl	800400c <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 8008738:	496d      	ldr	r1, [pc, #436]	@ (80088f0 <refrigera+0x798>)
 800873a:	486d      	ldr	r0, [pc, #436]	@ (80088f0 <refrigera+0x798>)
 800873c:	2307      	movs	r3, #7
 800873e:	2206      	movs	r2, #6
 8008740:	f002 fa07 	bl	800ab52 <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 8008744:	4b6b      	ldr	r3, [pc, #428]	@ (80088f4 <refrigera+0x79c>)
 8008746:	2202      	movs	r2, #2
 8008748:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800874a:	4b51      	ldr	r3, [pc, #324]	@ (8008890 <refrigera+0x738>)
 800874c:	2205      	movs	r2, #5
 800874e:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 8008750:	4b66      	ldr	r3, [pc, #408]	@ (80088ec <refrigera+0x794>)
 8008752:	799b      	ldrb	r3, [r3, #6]
 8008754:	2201      	movs	r2, #1
 8008756:	4053      	eors	r3, r2
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <refrigera+0x60e>
          wreg = 0x01;
 800875e:	4b4c      	ldr	r3, [pc, #304]	@ (8008890 <refrigera+0x738>)
 8008760:	2201      	movs	r2, #1
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e000      	b.n	8008768 <refrigera+0x610>
        	  goto no_change_time;
 8008766:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 8008768:	4b49      	ldr	r3, [pc, #292]	@ (8008890 <refrigera+0x738>)
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	4b4c      	ldr	r3, [pc, #304]	@ (80088a0 <refrigera+0x748>)
 800876e:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 8008770:	4b47      	ldr	r3, [pc, #284]	@ (8008890 <refrigera+0x738>)
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	4b60      	ldr	r3, [pc, #384]	@ (80088f8 <refrigera+0x7a0>)
 8008776:	701a      	strb	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 8008778:	f7fb fc7a 	bl	8004070 <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800877c:	4b43      	ldr	r3, [pc, #268]	@ (800888c <refrigera+0x734>)
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	2b63      	cmp	r3, #99	@ 0x63
 8008782:	d928      	bls.n	80087d6 <refrigera+0x67e>
			if(cntblkh <= 250){
 8008784:	4b41      	ldr	r3, [pc, #260]	@ (800888c <refrigera+0x734>)
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	2bfa      	cmp	r3, #250	@ 0xfa
 800878a:	d92c      	bls.n	80087e6 <refrigera+0x68e>
			if(cntblkh < 300){
 800878c:	4b3f      	ldr	r3, [pc, #252]	@ (800888c <refrigera+0x734>)
 800878e:	881a      	ldrh	r2, [r3, #0]
 8008790:	2396      	movs	r3, #150	@ 0x96
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	429a      	cmp	r2, r3
 8008796:	d320      	bcc.n	80087da <refrigera+0x682>
			if(cntblkh < 450){
 8008798:	4b3c      	ldr	r3, [pc, #240]	@ (800888c <refrigera+0x734>)
 800879a:	881a      	ldrh	r2, [r3, #0]
 800879c:	23e1      	movs	r3, #225	@ 0xe1
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d355      	bcc.n	8008850 <refrigera+0x6f8>
			if(cntblkh < 500){
 80087a4:	4b39      	ldr	r3, [pc, #228]	@ (800888c <refrigera+0x734>)
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	23fa      	movs	r3, #250	@ 0xfa
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d316      	bcc.n	80087de <refrigera+0x686>
			if(cntblkh < 650){
 80087b0:	4b36      	ldr	r3, [pc, #216]	@ (800888c <refrigera+0x734>)
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	4a51      	ldr	r2, [pc, #324]	@ (80088fc <refrigera+0x7a4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d800      	bhi.n	80087bc <refrigera+0x664>
 80087ba:	e0fd      	b.n	80089b8 <refrigera+0x860>
			if(cntblkh < 700){
 80087bc:	4b33      	ldr	r3, [pc, #204]	@ (800888c <refrigera+0x734>)
 80087be:	881a      	ldrh	r2, [r3, #0]
 80087c0:	23af      	movs	r3, #175	@ 0xaf
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d30c      	bcc.n	80087e2 <refrigera+0x68a>
			if(cntblkh < 850){
 80087c8:	4b30      	ldr	r3, [pc, #192]	@ (800888c <refrigera+0x734>)
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	4a4c      	ldr	r2, [pc, #304]	@ (8008900 <refrigera+0x7a8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d800      	bhi.n	80087d4 <refrigera+0x67c>
 80087d2:	e10c      	b.n	80089ee <refrigera+0x896>
indi_off:
 80087d4:	e006      	b.n	80087e4 <refrigera+0x68c>
				goto indi_off; //jrult	indi_off
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	e124      	b.n	8008a24 <refrigera+0x8cc>
				goto indi_off; //rult indi_off
 80087da:	46c0      	nop			@ (mov r8, r8)
 80087dc:	e122      	b.n	8008a24 <refrigera+0x8cc>
				goto indi_off; //rult indi_off
 80087de:	46c0      	nop			@ (mov r8, r8)
 80087e0:	e120      	b.n	8008a24 <refrigera+0x8cc>
				goto indi_off; //rult indi_off
 80087e2:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 80087e4:	e11e      	b.n	8008a24 <refrigera+0x8cc>
				goto Indi_int; //jrule	Indi_int
 80087e6:	46c0      	nop			@ (mov r8, r8)
			soloent (findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[interdh]));
 80087e8:	4b46      	ldr	r3, [pc, #280]	@ (8008904 <refrigera+0x7ac>)
 80087ea:	4a47      	ldr	r2, [pc, #284]	@ (8008908 <refrigera+0x7b0>)
 80087ec:	0019      	movs	r1, r3
 80087ee:	0010      	movs	r0, r2
 80087f0:	f7f8 f964 	bl	8000abc <findLastValue>
 80087f4:	0003      	movs	r3, r0
 80087f6:	0018      	movs	r0, r3
 80087f8:	f7fb fe00 	bl	80043fc <soloent>
			op_menu (findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeD1_Msg1]) , findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeD2_Msg1]));
 80087fc:	4b43      	ldr	r3, [pc, #268]	@ (800890c <refrigera+0x7b4>)
 80087fe:	4a42      	ldr	r2, [pc, #264]	@ (8008908 <refrigera+0x7b0>)
 8008800:	0019      	movs	r1, r3
 8008802:	0010      	movs	r0, r2
 8008804:	f7f8 f95a 	bl	8000abc <findLastValue>
 8008808:	0003      	movs	r3, r0
 800880a:	b2dc      	uxtb	r4, r3
 800880c:	4b40      	ldr	r3, [pc, #256]	@ (8008910 <refrigera+0x7b8>)
 800880e:	4a3e      	ldr	r2, [pc, #248]	@ (8008908 <refrigera+0x7b0>)
 8008810:	0019      	movs	r1, r3
 8008812:	0010      	movs	r0, r2
 8008814:	f7f8 f952 	bl	8000abc <findLastValue>
 8008818:	0003      	movs	r3, r0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	0019      	movs	r1, r3
 800881e:	0020      	movs	r0, r4
 8008820:	f7fc fc98 	bl	8005154 <op_menu>
             for(uint8_t k=0; k<8; k++){
 8008824:	2309      	movs	r3, #9
 8008826:	18fb      	adds	r3, r7, r3
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e00a      	b.n	8008844 <refrigera+0x6ec>
            	 datled[k] = 0;
 800882e:	2009      	movs	r0, #9
 8008830:	183b      	adds	r3, r7, r0
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	4a13      	ldr	r2, [pc, #76]	@ (8008884 <refrigera+0x72c>)
 8008836:	2100      	movs	r1, #0
 8008838:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800883a:	183b      	adds	r3, r7, r0
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	183b      	adds	r3, r7, r0
 8008840:	3201      	adds	r2, #1
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	2309      	movs	r3, #9
 8008846:	18fb      	adds	r3, r7, r3
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b07      	cmp	r3, #7
 800884c:	d9ef      	bls.n	800882e <refrigera+0x6d6>
             goto defindi;
 800884e:	e0e9      	b.n	8008a24 <refrigera+0x8cc>
				goto Indi_time;//rult Indi_time
 8008850:	46c0      	nop			@ (mov r8, r8)
            if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[dhmode]) != 1){
 8008852:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <refrigera+0x7bc>)
 8008854:	4a2c      	ldr	r2, [pc, #176]	@ (8008908 <refrigera+0x7b0>)
 8008856:	0019      	movs	r1, r3
 8008858:	0010      	movs	r0, r2
 800885a:	f7f8 f92f 	bl	8000abc <findLastValue>
 800885e:	0003      	movs	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d15b      	bne.n	800891c <refrigera+0x7c4>
            soloent( findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[timedh]) );
 8008864:	4b2c      	ldr	r3, [pc, #176]	@ (8008918 <refrigera+0x7c0>)
 8008866:	4a28      	ldr	r2, [pc, #160]	@ (8008908 <refrigera+0x7b0>)
 8008868:	0019      	movs	r1, r3
 800886a:	0010      	movs	r0, r2
 800886c:	f7f8 f926 	bl	8000abc <findLastValue>
 8008870:	0003      	movs	r3, r0
 8008872:	0018      	movs	r0, r3
 8008874:	f7fb fdc2 	bl	80043fc <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <refrigera+0x72c>)
 800887a:	2201      	movs	r2, #1
 800887c:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800887e:	e0d1      	b.n	8008a24 <refrigera+0x8cc>
 8008880:	20000bb8 	.word	0x20000bb8
 8008884:	20000bb0 	.word	0x20000bb0
 8008888:	200000bc 	.word	0x200000bc
 800888c:	20000b6e 	.word	0x20000b6e
 8008890:	20000b77 	.word	0x20000b77
 8008894:	20000b76 	.word	0x20000b76
 8008898:	20000c1a 	.word	0x20000c1a
 800889c:	20000c1c 	.word	0x20000c1c
 80088a0:	20000b8a 	.word	0x20000b8a
 80088a4:	20000b82 	.word	0x20000b82
 80088a8:	20000b8d 	.word	0x20000b8d
 80088ac:	20000922 	.word	0x20000922
 80088b0:	20000b69 	.word	0x20000b69
 80088b4:	20000b6a 	.word	0x20000b6a
 80088b8:	20000bd8 	.word	0x20000bd8
 80088bc:	20000b8b 	.word	0x20000b8b
 80088c0:	20000bc4 	.word	0x20000bc4
 80088c4:	20000387 	.word	0x20000387
 80088c8:	20000c64 	.word	0x20000c64
 80088cc:	20000c00 	.word	0x20000c00
 80088d0:	20000b98 	.word	0x20000b98
 80088d4:	20000c08 	.word	0x20000c08
 80088d8:	20000c5c 	.word	0x20000c5c
 80088dc:	20000c50 	.word	0x20000c50
 80088e0:	20000c52 	.word	0x20000c52
 80088e4:	200010c8 	.word	0x200010c8
 80088e8:	20000f08 	.word	0x20000f08
 80088ec:	20000bf8 	.word	0x20000bf8
 80088f0:	20000ba8 	.word	0x20000ba8
 80088f4:	20000b8e 	.word	0x20000b8e
 80088f8:	20000bd6 	.word	0x20000bd6
 80088fc:	00000289 	.word	0x00000289
 8008900:	00000351 	.word	0x00000351
 8008904:	2000034a 	.word	0x2000034a
 8008908:	0803f000 	.word	0x0803f000
 800890c:	20000363 	.word	0x20000363
 8008910:	20000364 	.word	0x20000364
 8008914:	20000359 	.word	0x20000359
 8008918:	2000034b 	.word	0x2000034b
				goto indica45;
 800891c:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800891e:	4bc3      	ldr	r3, [pc, #780]	@ (8008c2c <refrigera+0xad4>)
 8008920:	2247      	movs	r2, #71	@ 0x47
 8008922:	5c9b      	ldrb	r3, [r3, r2]
 8008924:	0018      	movs	r0, r3
 8008926:	f7fb fd33 	bl	8004390 <convad10>
            if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeprotype])){
 800892a:	4bc1      	ldr	r3, [pc, #772]	@ (8008c30 <refrigera+0xad8>)
 800892c:	4ac1      	ldr	r2, [pc, #772]	@ (8008c34 <refrigera+0xadc>)
 800892e:	0019      	movs	r1, r3
 8008930:	0010      	movs	r0, r2
 8008932:	f7f8 f8c3 	bl	8000abc <findLastValue>
 8008936:	1e03      	subs	r3, r0, #0
 8008938:	d110      	bne.n	800895c <refrigera+0x804>
            if(findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeprotype]) == 2){
 800893a:	4bbd      	ldr	r3, [pc, #756]	@ (8008c30 <refrigera+0xad8>)
 800893c:	4abd      	ldr	r2, [pc, #756]	@ (8008c34 <refrigera+0xadc>)
 800893e:	0019      	movs	r1, r3
 8008940:	0010      	movs	r0, r2
 8008942:	f7f8 f8bb 	bl	8000abc <findLastValue>
 8008946:	0003      	movs	r3, r0
 8008948:	2b02      	cmp	r3, #2
 800894a:	d00f      	beq.n	800896c <refrigera+0x814>
indica_na:
 800894c:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800894e:	4bba      	ldr	r3, [pc, #744]	@ (8008c38 <refrigera+0xae0>)
 8008950:	2226      	movs	r2, #38	@ 0x26
 8008952:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 8008954:	4bb9      	ldr	r3, [pc, #740]	@ (8008c3c <refrigera+0xae4>)
 8008956:	2226      	movs	r2, #38	@ 0x26
 8008958:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800895a:	e00f      	b.n	800897c <refrigera+0x824>
            	goto indica_110v; //jreq indica_110v
 800895c:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800895e:	4bb6      	ldr	r3, [pc, #728]	@ (8008c38 <refrigera+0xae0>)
 8008960:	221f      	movs	r2, #31
 8008962:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 8008964:	4bb5      	ldr	r3, [pc, #724]	@ (8008c3c <refrigera+0xae4>)
 8008966:	220b      	movs	r2, #11
 8008968:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800896a:	e007      	b.n	800897c <refrigera+0x824>
            	goto indica_220v; //jreq indica_220v
 800896c:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800896e:	4bb2      	ldr	r3, [pc, #712]	@ (8008c38 <refrigera+0xae0>)
 8008970:	221f      	movs	r2, #31
 8008972:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 8008974:	4bb1      	ldr	r3, [pc, #708]	@ (8008c3c <refrigera+0xae4>)
 8008976:	220a      	movs	r2, #10
 8008978:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800897a:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800897c:	4bae      	ldr	r3, [pc, #696]	@ (8008c38 <refrigera+0xae0>)
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	4bae      	ldr	r3, [pc, #696]	@ (8008c3c <refrigera+0xae4>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	0019      	movs	r1, r3
 8008986:	0010      	movs	r0, r2
 8008988:	f7fc fbe4 	bl	8005154 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800898c:	2308      	movs	r3, #8
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	e00a      	b.n	80089ac <refrigera+0x854>
            	 datled[k] = 0;
 8008996:	2008      	movs	r0, #8
 8008998:	183b      	adds	r3, r7, r0
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	4aa8      	ldr	r2, [pc, #672]	@ (8008c40 <refrigera+0xae8>)
 800899e:	2100      	movs	r1, #0
 80089a0:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 80089a2:	183b      	adds	r3, r7, r0
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	183b      	adds	r3, r7, r0
 80089a8:	3201      	adds	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	2308      	movs	r3, #8
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b07      	cmp	r3, #7
 80089b4:	d9ef      	bls.n	8008996 <refrigera+0x83e>
             goto defindi;
 80089b6:	e035      	b.n	8008a24 <refrigera+0x8cc>
				goto Indi_sp; //rult Indi_sp
 80089b8:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 80089ba:	f7fb fb83 	bl	80040c4 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 80089be:	4ba1      	ldr	r3, [pc, #644]	@ (8008c44 <refrigera+0xaec>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	0018      	movs	r0, r3
 80089c4:	f7fb fd1a 	bl	80043fc <soloent>
			for(uint8_t k=0; k<8; k++){
 80089c8:	1dfb      	adds	r3, r7, #7
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e009      	b.n	80089e4 <refrigera+0x88c>
				datled[k] = 0;
 80089d0:	1dfb      	adds	r3, r7, #7
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	4a9a      	ldr	r2, [pc, #616]	@ (8008c40 <refrigera+0xae8>)
 80089d6:	2100      	movs	r1, #0
 80089d8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 80089da:	1dfb      	adds	r3, r7, #7
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	1dfb      	adds	r3, r7, #7
 80089e0:	3201      	adds	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	1dfb      	adds	r3, r7, #7
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b07      	cmp	r3, #7
 80089ea:	d9f1      	bls.n	80089d0 <refrigera+0x878>
			goto defindi;
 80089ec:	e01a      	b.n	8008a24 <refrigera+0x8cc>
				goto Indi_dif; //rult Indi_dif
 80089ee:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 80089f0:	f7fb fb74 	bl	80040dc <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 80089f4:	4b94      	ldr	r3, [pc, #592]	@ (8008c48 <refrigera+0xaf0>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7fb fcff 	bl	80043fc <soloent>
            for(uint8_t k=0; k<8; k++){
 80089fe:	1dbb      	adds	r3, r7, #6
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e009      	b.n	8008a1a <refrigera+0x8c2>
            	datled[k] = 0;
 8008a06:	1dbb      	adds	r3, r7, #6
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	4a8d      	ldr	r2, [pc, #564]	@ (8008c40 <refrigera+0xae8>)
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 8008a10:	1dbb      	adds	r3, r7, #6
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	1dbb      	adds	r3, r7, #6
 8008a16:	3201      	adds	r2, #1
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	1dbb      	adds	r3, r7, #6
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b07      	cmp	r3, #7
 8008a20:	d9f1      	bls.n	8008a06 <refrigera+0x8ae>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 8008a22:	46c0      	nop			@ (mov r8, r8)
 8008a24:	f7fc fa7e 	bl	8004f24 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 8008a28:	4b88      	ldr	r3, [pc, #544]	@ (8008c4c <refrigera+0xaf4>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	db2a      	blt.n	8008a88 <refrigera+0x930>
        	   goto indica_j00;
 8008a32:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 8008a34:	4b7d      	ldr	r3, [pc, #500]	@ (8008c2c <refrigera+0xad4>)
 8008a36:	2259      	movs	r2, #89	@ 0x59
 8008a38:	5c9b      	ldrb	r3, [r3, r2]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d104      	bne.n	8008a48 <refrigera+0x8f0>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 8008a3e:	4b84      	ldr	r3, [pc, #528]	@ (8008c50 <refrigera+0xaf8>)
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01c      	beq.n	8008a80 <refrigera+0x928>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 8008a46:	e018      	b.n	8008a7a <refrigera+0x922>
            	goto indica_j00b;
 8008a48:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 8008a4a:	4b82      	ldr	r3, [pc, #520]	@ (8008c54 <refrigera+0xafc>)
 8008a4c:	78db      	ldrb	r3, [r3, #3]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10e      	bne.n	8008a70 <refrigera+0x918>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 8008a52:	4b80      	ldr	r3, [pc, #512]	@ (8008c54 <refrigera+0xafc>)
 8008a54:	789b      	ldrb	r3, [r3, #2]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10c      	bne.n	8008a74 <refrigera+0x91c>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 8008a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8008c50 <refrigera+0xaf8>)
 8008a5c:	791b      	ldrb	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <refrigera+0x920>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 8008a62:	4b7a      	ldr	r3, [pc, #488]	@ (8008c4c <refrigera+0xaf4>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	001a      	movs	r2, r3
 8008a68:	2310      	movs	r3, #16
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	d00a      	beq.n	8008a84 <refrigera+0x92c>
indica_j01:		ldadaptivo();	// call ldadaptivo
 8008a6e:	e004      	b.n	8008a7a <refrigera+0x922>
            	 goto indica_j01;
 8008a70:	46c0      	nop			@ (mov r8, r8)
 8008a72:	e002      	b.n	8008a7a <refrigera+0x922>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	e000      	b.n	8008a7a <refrigera+0x922>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 8008a78:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 8008a7a:	f7fb fad9 	bl	8004030 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 8008a7e:	e59d      	b.n	80085bc <refrigera+0x464>
            goto indica_j02;
 8008a80:	46c0      	nop			@ (mov r8, r8)
 8008a82:	e59b      	b.n	80085bc <refrigera+0x464>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 8008a84:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 8008a86:	e599      	b.n	80085bc <refrigera+0x464>
           goto defind10;				/// No, pregunta por otro modo
 8008a88:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 8008a8a:	4b73      	ldr	r3, [pc, #460]	@ (8008c58 <refrigera+0xb00>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d112      	bne.n	8008ab8 <refrigera+0x960>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 8008a92:	4b70      	ldr	r3, [pc, #448]	@ (8008c54 <refrigera+0xafc>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <refrigera+0x964>
            	 goto indica_j04;
 8008a9a:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 8008a9c:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 8008a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8008c5c <refrigera+0xb04>)
 8008aa0:	2211      	movs	r2, #17
 8008aa2:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 8008aa4:	4b6e      	ldr	r3, [pc, #440]	@ (8008c60 <refrigera+0xb08>)
 8008aa6:	2208      	movs	r2, #8
 8008aa8:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 8008aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8008c64 <refrigera+0xb0c>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 8008ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8008c68 <refrigera+0xb10>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e55f      	b.n	8008578 <refrigera+0x420>
            	 goto finindi;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
 8008aba:	e5bd      	b.n	8008638 <refrigera+0x4e0>
             goto finindi;
 8008abc:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 8008abe:	e5bb      	b.n	8008638 <refrigera+0x4e0>
            fauto[7] = 1;						//bset		fauto,#7
 8008ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8008c6c <refrigera+0xb14>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 8008ac6:	e159      	b.n	8008d7c <refrigera+0xc24>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 8008ac8:	4b68      	ldr	r3, [pc, #416]	@ (8008c6c <refrigera+0xb14>)
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d150      	bne.n	8008b72 <refrigera+0xa1a>
			wreg = num_ver;			//;		/ Versión del Firmware
 8008ad0:	4b59      	ldr	r3, [pc, #356]	@ (8008c38 <refrigera+0xae0>)
 8008ad2:	2205      	movs	r2, #5
 8008ad4:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 8008ad6:	f7fb fcaf 	bl	8004438 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 8008ada:	4b59      	ldr	r3, [pc, #356]	@ (8008c40 <refrigera+0xae8>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 8008ae0:	4b62      	ldr	r3, [pc, #392]	@ (8008c6c <refrigera+0xb14>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 8008ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8008c5c <refrigera+0xb04>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d90c      	bls.n	8008b08 <refrigera+0x9b0>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 8008aee:	4b60      	ldr	r3, [pc, #384]	@ (8008c70 <refrigera+0xb18>)
 8008af0:	2110      	movs	r1, #16
 8008af2:	0018      	movs	r0, r3
 8008af4:	f008 fabc 	bl	8011070 <HAL_GPIO_ReadPin>
 8008af8:	1e03      	subs	r3, r0, #0
 8008afa:	d003      	beq.n	8008b04 <refrigera+0x9ac>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 8008afc:	4b55      	ldr	r3, [pc, #340]	@ (8008c54 <refrigera+0xafc>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 8008b02:	e020      	b.n	8008b46 <refrigera+0x9ee>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 8008b04:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 8008b06:	e139      	b.n	8008d7c <refrigera+0xc24>
        	   goto door_det; //jrule door_det
 8008b08:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 8008b0a:	4b54      	ldr	r3, [pc, #336]	@ (8008c5c <refrigera+0xb04>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b0d      	cmp	r3, #13
 8008b10:	d915      	bls.n	8008b3e <refrigera+0x9e6>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 8008b12:	4b4b      	ldr	r3, [pc, #300]	@ (8008c40 <refrigera+0xae8>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 8008b18:	4b55      	ldr	r3, [pc, #340]	@ (8008c70 <refrigera+0xb18>)
 8008b1a:	2110      	movs	r1, #16
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f008 faa7 	bl	8011070 <HAL_GPIO_ReadPin>
 8008b22:	1e03      	subs	r3, r0, #0
 8008b24:	d009      	beq.n	8008b3a <refrigera+0x9e2>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 8008b26:	4b51      	ldr	r3, [pc, #324]	@ (8008c6c <refrigera+0xb14>)
 8008b28:	2201      	movs	r2, #1
 8008b2a:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 8008b2c:	4b44      	ldr	r3, [pc, #272]	@ (8008c40 <refrigera+0xae8>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 8008b32:	4b50      	ldr	r3, [pc, #320]	@ (8008c74 <refrigera+0xb1c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	705a      	strb	r2, [r3, #1]
			goto defap;
 8008b38:	e120      	b.n	8008d7c <refrigera+0xc24>
            	goto no_det_door;				//	¿La puerta está abierta?
 8008b3a:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 8008b3c:	e11e      	b.n	8008d7c <refrigera+0xc24>
            	goto do_sec;
 8008b3e:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 8008b40:	4b4a      	ldr	r3, [pc, #296]	@ (8008c6c <refrigera+0xb14>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 8008b46:	2300      	movs	r3, #0
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	e00e      	b.n	8008b6a <refrigera+0xa12>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 8008b4c:	4a41      	ldr	r2, [pc, #260]	@ (8008c54 <refrigera+0xafc>)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	18d3      	adds	r3, r2, r3
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10e      	bne.n	8008b76 <refrigera+0xa1e>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 8008b58:	4a47      	ldr	r2, [pc, #284]	@ (8008c78 <refrigera+0xb20>)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	18d3      	adds	r3, r2, r3
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <refrigera+0xa22>
			for(int k=0;k<8;k++){
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	3301      	adds	r3, #1
 8008b68:	603b      	str	r3, [r7, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b07      	cmp	r3, #7
 8008b6e:	dded      	ble.n	8008b4c <refrigera+0x9f4>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 8008b70:	e088      	b.n	8008c84 <refrigera+0xb2c>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	e004      	b.n	8008b80 <refrigera+0xa28>
           		   goto fail_det;//jrne fail_det
 8008b76:	46c0      	nop			@ (mov r8, r8)
 8008b78:	e002      	b.n	8008b80 <refrigera+0xa28>
           		   goto fail_det; //jrne fail_det
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	e000      	b.n	8008b80 <refrigera+0xa28>
				goto fail_det;
 8008b7e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 8008b80:	210a      	movs	r1, #10
 8008b82:	200a      	movs	r0, #10
 8008b84:	f7fc fae6 	bl	8005154 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 8008b88:	4b3c      	ldr	r3, [pc, #240]	@ (8008c7c <refrigera+0xb24>)
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	001a      	movs	r2, r3
 8008b90:	2340      	movs	r3, #64	@ 0x40
 8008b92:	4013      	ands	r3, r2
 8008b94:	d104      	bne.n	8008ba0 <refrigera+0xa48>
			op_menu (0x1F, 0X1F);
 8008b96:	211f      	movs	r1, #31
 8008b98:	201f      	movs	r0, #31
 8008b9a:	f7fc fadb 	bl	8005154 <op_menu>
 8008b9e:	e000      	b.n	8008ba2 <refrigera+0xa4a>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 8008ba0:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 8008ba2:	4b32      	ldr	r3, [pc, #200]	@ (8008c6c <refrigera+0xb14>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 8008ba8:	4b30      	ldr	r3, [pc, #192]	@ (8008c6c <refrigera+0xb14>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 8008bae:	4b29      	ldr	r3, [pc, #164]	@ (8008c54 <refrigera+0xafc>)
 8008bb0:	79db      	ldrb	r3, [r3, #7]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <refrigera+0xa6e>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 8008bb6:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <refrigera+0xafc>)
 8008bb8:	799b      	ldrb	r3, [r3, #6]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4053      	eors	r3, r2
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d131      	bne.n	8008c28 <refrigera+0xad0>
dpy_volt_f:
 8008bc4:	e000      	b.n	8008bc8 <refrigera+0xa70>
        	   goto dpy_volt_f;
 8008bc6:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 8008bc8:	4b28      	ldr	r3, [pc, #160]	@ (8008c6c <refrigera+0xb14>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 8008bce:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <refrigera+0xb08>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	001a      	movs	r2, r3
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d103      	bne.n	8008be2 <refrigera+0xa8a>
              fauto[3] = 1;					//bset		fauto,#3
 8008bda:	4b24      	ldr	r3, [pc, #144]	@ (8008c6c <refrigera+0xb14>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	70da      	strb	r2, [r3, #3]
 8008be0:	e000      	b.n	8008be4 <refrigera+0xa8c>
            	  goto no_dpy_f;
 8008be2:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 8008be4:	4b26      	ldr	r3, [pc, #152]	@ (8008c80 <refrigera+0xb28>)
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	4b13      	ldr	r3, [pc, #76]	@ (8008c38 <refrigera+0xae0>)
 8008bea:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 8008bec:	4b12      	ldr	r3, [pc, #72]	@ (8008c38 <refrigera+0xae0>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b63      	cmp	r3, #99	@ 0x63
 8008bf2:	d910      	bls.n	8008c16 <refrigera+0xabe>
				wreg = wreg - 100;
 8008bf4:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <refrigera+0xae0>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	3b64      	subs	r3, #100	@ 0x64
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <refrigera+0xae0>)
 8008bfe:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 8008c00:	4b0d      	ldr	r3, [pc, #52]	@ (8008c38 <refrigera+0xae0>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b63      	cmp	r3, #99	@ 0x63
 8008c06:	d908      	bls.n	8008c1a <refrigera+0xac2>
				wreg = wreg - 100;
 8008c08:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <refrigera+0xae0>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	3b64      	subs	r3, #100	@ 0x64
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b09      	ldr	r3, [pc, #36]	@ (8008c38 <refrigera+0xae0>)
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	e002      	b.n	8008c1c <refrigera+0xac4>
					goto under_100_f; //jrult under_100_f
 8008c16:	46c0      	nop			@ (mov r8, r8)
 8008c18:	e000      	b.n	8008c1c <refrigera+0xac4>
					goto under_100_f;
 8008c1a:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 8008c1c:	f7fb fc0c 	bl	8004438 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <refrigera+0xae8>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 8008c26:	e0a9      	b.n	8008d7c <refrigera+0xc24>
        	   goto no_dpy_volt_f;
 8008c28:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 8008c2a:	e0a7      	b.n	8008d7c <refrigera+0xc24>
 8008c2c:	200000bc 	.word	0x200000bc
 8008c30:	2000035b 	.word	0x2000035b
 8008c34:	0803f000 	.word	0x0803f000
 8008c38:	20000b77 	.word	0x20000b77
 8008c3c:	20000b76 	.word	0x20000b76
 8008c40:	20000bb0 	.word	0x20000bb0
 8008c44:	0801e7f0 	.word	0x0801e7f0
 8008c48:	0801e7f1 	.word	0x0801e7f1
 8008c4c:	20000b74 	.word	0x20000b74
 8008c50:	20000bc4 	.word	0x20000bc4
 8008c54:	20000ba8 	.word	0x20000ba8
 8008c58:	20000b75 	.word	0x20000b75
 8008c5c:	20000b8c 	.word	0x20000b8c
 8008c60:	20000c48 	.word	0x20000c48
 8008c64:	20000bb8 	.word	0x20000bb8
 8008c68:	20000b6d 	.word	0x20000b6d
 8008c6c:	20000bf8 	.word	0x20000bf8
 8008c70:	50000400 	.word	0x50000400
 8008c74:	20000c00 	.word	0x20000c00
 8008c78:	20000ba0 	.word	0x20000ba0
 8008c7c:	20000b6e 	.word	0x20000b6e
 8008c80:	20000bee 	.word	0x20000bee
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 8008c84:	4bc7      	ldr	r3, [pc, #796]	@ (8008fa4 <refrigera+0xe4c>)
 8008c86:	789b      	ldrb	r3, [r3, #2]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d100      	bne.n	8008c8e <refrigera+0xb36>
 8008c8c:	e777      	b.n	8008b7e <refrigera+0xa26>
					goto on_compres;
 8008c8e:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 8008c90:	4bc5      	ldr	r3, [pc, #788]	@ (8008fa8 <refrigera+0xe50>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 8008c96:	4bc5      	ldr	r3, [pc, #788]	@ (8008fac <refrigera+0xe54>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 8008c9c:	4bc4      	ldr	r3, [pc, #784]	@ (8008fb0 <refrigera+0xe58>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b0b      	cmp	r3, #11
 8008ca2:	d864      	bhi.n	8008d6e <refrigera+0xc16>
            	 	 goto on_desh;
 8008ca4:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 8008ca6:	4bc0      	ldr	r3, [pc, #768]	@ (8008fa8 <refrigera+0xe50>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 8008cac:	49bf      	ldr	r1, [pc, #764]	@ (8008fac <refrigera+0xe54>)
 8008cae:	48bf      	ldr	r0, [pc, #764]	@ (8008fac <refrigera+0xe54>)
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f001 ff32 	bl	800ab1c <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 8008cb8:	4bbb      	ldr	r3, [pc, #748]	@ (8008fa8 <refrigera+0xe50>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 8008cbe:	4bbb      	ldr	r3, [pc, #748]	@ (8008fac <refrigera+0xe54>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 8008cc4:	4bba      	ldr	r3, [pc, #744]	@ (8008fb0 <refrigera+0xe58>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d852      	bhi.n	8008d72 <refrigera+0xc1a>
            		goto on_vent;//jrule on_vent
 8008ccc:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 8008cce:	4bb6      	ldr	r3, [pc, #728]	@ (8008fa8 <refrigera+0xe50>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 8008cd4:	49b5      	ldr	r1, [pc, #724]	@ (8008fac <refrigera+0xe54>)
 8008cd6:	48b5      	ldr	r0, [pc, #724]	@ (8008fac <refrigera+0xe54>)
 8008cd8:	2303      	movs	r3, #3
 8008cda:	2207      	movs	r2, #7
 8008cdc:	f001 ff1e 	bl	800ab1c <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 8008ce0:	4bb4      	ldr	r3, [pc, #720]	@ (8008fb4 <refrigera+0xe5c>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 8008ce6:	4bb2      	ldr	r3, [pc, #712]	@ (8008fb0 <refrigera+0xe58>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b07      	cmp	r3, #7
 8008cec:	d843      	bhi.n	8008d76 <refrigera+0xc1e>
					goto on_lamp; //jrule	on_lamp
 8008cee:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 8008cf0:	4bb0      	ldr	r3, [pc, #704]	@ (8008fb4 <refrigera+0xe5c>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 8008cf6:	49ad      	ldr	r1, [pc, #692]	@ (8008fac <refrigera+0xe54>)
 8008cf8:	48ac      	ldr	r0, [pc, #688]	@ (8008fac <refrigera+0xe54>)
 8008cfa:	2307      	movs	r3, #7
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	f001 ff0d 	bl	800ab1c <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 8008d02:	4ba9      	ldr	r3, [pc, #676]	@ (8008fa8 <refrigera+0xe50>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 8008d08:	4ba9      	ldr	r3, [pc, #676]	@ (8008fb0 <refrigera+0xe58>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b05      	cmp	r3, #5
 8008d0e:	d834      	bhi.n	8008d7a <refrigera+0xc22>
					goto dpy_volt; //jrule	dpy_volt
 8008d10:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 8008d12:	4ba5      	ldr	r3, [pc, #660]	@ (8008fa8 <refrigera+0xe50>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 8008d18:	4ba4      	ldr	r3, [pc, #656]	@ (8008fac <refrigera+0xe54>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 8008d1e:	4ba6      	ldr	r3, [pc, #664]	@ (8008fb8 <refrigera+0xe60>)
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	4ba6      	ldr	r3, [pc, #664]	@ (8008fbc <refrigera+0xe64>)
 8008d24:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 8008d26:	4ba5      	ldr	r3, [pc, #660]	@ (8008fbc <refrigera+0xe64>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b63      	cmp	r3, #99	@ 0x63
 8008d2c:	d910      	bls.n	8008d50 <refrigera+0xbf8>
				wreg = wreg - 100;
 8008d2e:	4ba3      	ldr	r3, [pc, #652]	@ (8008fbc <refrigera+0xe64>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	3b64      	subs	r3, #100	@ 0x64
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	4ba1      	ldr	r3, [pc, #644]	@ (8008fbc <refrigera+0xe64>)
 8008d38:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 8008d3a:	4ba0      	ldr	r3, [pc, #640]	@ (8008fbc <refrigera+0xe64>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b63      	cmp	r3, #99	@ 0x63
 8008d40:	d908      	bls.n	8008d54 <refrigera+0xbfc>
				wreg = wreg - 100;
 8008d42:	4b9e      	ldr	r3, [pc, #632]	@ (8008fbc <refrigera+0xe64>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	3b64      	subs	r3, #100	@ 0x64
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8008fbc <refrigera+0xe64>)
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <refrigera+0xbfe>
					goto under_100; //jrult	under_100
 8008d50:	46c0      	nop			@ (mov r8, r8)
 8008d52:	e000      	b.n	8008d56 <refrigera+0xbfe>
					goto under_100;
 8008d54:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 8008d56:	f7fb fb6f 	bl	8004438 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 8008d5a:	4b94      	ldr	r3, [pc, #592]	@ (8008fac <refrigera+0xe54>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 8008d60:	4b90      	ldr	r3, [pc, #576]	@ (8008fa4 <refrigera+0xe4c>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 8008d66:	4b8f      	ldr	r3, [pc, #572]	@ (8008fa4 <refrigera+0xe4c>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	71da      	strb	r2, [r3, #7]
 8008d6c:	e006      	b.n	8008d7c <refrigera+0xc24>
             	 goto defap;
 8008d6e:	46c0      	nop			@ (mov r8, r8)
 8008d70:	e004      	b.n	8008d7c <refrigera+0xc24>
            	goto defap;
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	e002      	b.n	8008d7c <refrigera+0xc24>
				goto defap;
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	e000      	b.n	8008d7c <refrigera+0xc24>
				goto defap;
 8008d7a:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 8008d7c:	f7fc f8d2 	bl	8004f24 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 8008d80:	4b8f      	ldr	r3, [pc, #572]	@ (8008fc0 <refrigera+0xe68>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	001a      	movs	r2, r3
 8008d86:	2301      	movs	r3, #1
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d00c      	beq.n	8008da6 <refrigera+0xc4e>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 8008d8c:	46c0      	nop			@ (mov r8, r8)
 8008d8e:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 8008d90:	4b8c      	ldr	r3, [pc, #560]	@ (8008fc4 <refrigera+0xe6c>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 8008d96:	4b8c      	ldr	r3, [pc, #560]	@ (8008fc8 <refrigera+0xe70>)
 8008d98:	2202      	movs	r2, #2
 8008d9a:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 8008d9c:	4b8b      	ldr	r3, [pc, #556]	@ (8008fcc <refrigera+0xe74>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 8008da2:	f7ff fbe9 	bl	8008578 <refrigera+0x420>
					goto finap;
 8008da6:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 8008da8:	e446      	b.n	8008638 <refrigera+0x4e0>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 8008daa:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 8008dac:	4b7f      	ldr	r3, [pc, #508]	@ (8008fac <refrigera+0xe54>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 8008db2:	4b87      	ldr	r3, [pc, #540]	@ (8008fd0 <refrigera+0xe78>)
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d000      	beq.n	8008dbc <refrigera+0xc64>
 8008dba:	e060      	b.n	8008e7e <refrigera+0xd26>
					goto ask_door_fan; //jreq ask_door_fan
 8008dbc:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 8008dbe:	4b85      	ldr	r3, [pc, #532]	@ (8008fd4 <refrigera+0xe7c>)
 8008dc0:	225b      	movs	r2, #91	@ 0x5b
 8008dc2:	5c9b      	ldrb	r3, [r3, r2]
 8008dc4:	001a      	movs	r2, r3
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	4013      	ands	r3, r2
 8008dca:	d108      	bne.n	8008dde <refrigera+0xc86>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 8008dcc:	4b82      	ldr	r3, [pc, #520]	@ (8008fd8 <refrigera+0xe80>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d006      	beq.n	8008de2 <refrigera+0xc8a>
               if(retvent == 0){ //tnz retvent
 8008dd4:	4b81      	ldr	r3, [pc, #516]	@ (8008fdc <refrigera+0xe84>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d152      	bne.n	8008e82 <refrigera+0xd2a>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 8008ddc:	e002      	b.n	8008de4 <refrigera+0xc8c>
            	   goto ask_fan_on;
 8008dde:	46c0      	nop			@ (mov r8, r8)
 8008de0:	e000      	b.n	8008de4 <refrigera+0xc8c>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 8008de2:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 8008de4:	4b7e      	ldr	r3, [pc, #504]	@ (8008fe0 <refrigera+0xe88>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2201      	movs	r2, #1
 8008dea:	4053      	eors	r3, r2
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d104      	bne.n	8008dfc <refrigera+0xca4>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 8008df2:	4b7c      	ldr	r3, [pc, #496]	@ (8008fe4 <refrigera+0xe8c>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d033      	beq.n	8008e62 <refrigera+0xd0a>
					goto fan_off; //jrne fan_off
 8008dfa:	e047      	b.n	8008e8c <refrigera+0xd34>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 8008dfc:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 8008dfe:	4b75      	ldr	r3, [pc, #468]	@ (8008fd4 <refrigera+0xe7c>)
 8008e00:	2268      	movs	r2, #104	@ 0x68
 8008e02:	5c9a      	ldrb	r2, [r3, r2]
 8008e04:	4b6d      	ldr	r3, [pc, #436]	@ (8008fbc <refrigera+0xe64>)
 8008e06:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 8008e08:	f7fb fb2a 	bl	8004460 <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 8008e0c:	4b76      	ldr	r3, [pc, #472]	@ (8008fe8 <refrigera+0xe90>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d038      	beq.n	8008e86 <refrigera+0xd2e>
					goto ciclof_00;					// No, pregunta por parte baja
 8008e14:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 8008e16:	4b69      	ldr	r3, [pc, #420]	@ (8008fbc <refrigera+0xe64>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d023      	beq.n	8008e66 <refrigera+0xd0e>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 8008e1e:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 8008e20:	4b6f      	ldr	r3, [pc, #444]	@ (8008fe0 <refrigera+0xe88>)
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2201      	movs	r2, #1
 8008e26:	4053      	eors	r3, r2
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00e      	beq.n	8008e4c <refrigera+0xcf4>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 8008e2e:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 8008e30:	4b6e      	ldr	r3, [pc, #440]	@ (8008fec <refrigera+0xe94>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d128      	bne.n	8008e8a <refrigera+0xd32>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 8008e38:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 8008e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8008ff0 <refrigera+0xe98>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d113      	bne.n	8008e6a <refrigera+0xd12>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 8008e42:	4b69      	ldr	r3, [pc, #420]	@ (8008fe8 <refrigera+0xe90>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	4b6a      	ldr	r3, [pc, #424]	@ (8008ff0 <refrigera+0xe98>)
 8008e48:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 8008e4a:	e011      	b.n	8008e70 <refrigera+0xd18>
				goto ciclo_on;					/// Si, ciclo de encendido
 8008e4c:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 8008e4e:	4b68      	ldr	r3, [pc, #416]	@ (8008ff0 <refrigera+0xe98>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <refrigera+0xd16>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 8008e56:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 8008e58:	4b58      	ldr	r3, [pc, #352]	@ (8008fbc <refrigera+0xe64>)
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	4b63      	ldr	r3, [pc, #396]	@ (8008fec <refrigera+0xe94>)
 8008e5e:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 8008e60:	e014      	b.n	8008e8c <refrigera+0xd34>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 8008e62:	46c0      	nop			@ (mov r8, r8)
 8008e64:	e004      	b.n	8008e70 <refrigera+0xd18>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	e002      	b.n	8008e70 <refrigera+0xd18>
					goto fan_on; //jrne fan_on
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	e000      	b.n	8008e70 <refrigera+0xd18>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 8008e6e:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 8008e70:	4b50      	ldr	r3, [pc, #320]	@ (8008fb4 <refrigera+0xe5c>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 8008e76:	4b4d      	ldr	r3, [pc, #308]	@ (8008fac <refrigera+0xe54>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	71da      	strb	r2, [r3, #7]
 8008e7c:	e006      	b.n	8008e8c <refrigera+0xd34>
				goto fan_off;
 8008e7e:	46c0      	nop			@ (mov r8, r8)
 8008e80:	e004      	b.n	8008e8c <refrigera+0xd34>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 8008e82:	46c0      	nop			@ (mov r8, r8)
 8008e84:	e002      	b.n	8008e8c <refrigera+0xd34>
				goto fan_off;							// Si, manten apagado el ventilador
 8008e86:	46c0      	nop			@ (mov r8, r8)
 8008e88:	e000      	b.n	8008e8c <refrigera+0xd34>
				goto fan_off;						// No, manten apagado el ventilador
 8008e8a:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 8008e8c:	4b59      	ldr	r3, [pc, #356]	@ (8008ff4 <refrigera+0xe9c>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	001a      	movs	r2, r3
 8008e92:	4b59      	ldr	r3, [pc, #356]	@ (8008ff8 <refrigera+0xea0>)
 8008e94:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 8008e96:	4b59      	ldr	r3, [pc, #356]	@ (8008ffc <refrigera+0xea4>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d107      	bne.n	8008eae <refrigera+0xd56>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 8008e9e:	4b57      	ldr	r3, [pc, #348]	@ (8008ffc <refrigera+0xea4>)
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	4053      	eors	r3, r2
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <refrigera+0xd5c>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 8008eac:	e000      	b.n	8008eb0 <refrigera+0xd58>
            	   goto control_j02;
 8008eae:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 8008eb0:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 8008eb2:	e029      	b.n	8008f08 <refrigera+0xdb0>
            	   goto control_j03;
 8008eb4:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 8008eb6:	4b52      	ldr	r3, [pc, #328]	@ (8009000 <refrigera+0xea8>)
 8008eb8:	785b      	ldrb	r3, [r3, #1]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d13a      	bne.n	8008f34 <refrigera+0xddc>
ctl13:
 8008ebe:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 8008ec0:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 8008ec2:	f7fb f86d 	bl	8003fa0 <tdev_to_Word>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	b21a      	sxth	r2, r3
 8008eca:	4b4e      	ldr	r3, [pc, #312]	@ (8009004 <refrigera+0xeac>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	db09      	blt.n	8008ee8 <refrigera+0xd90>
ctl15:			//	ld			A,tminstopl;
 8008ed4:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 8008ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8009008 <refrigera+0xeb0>)
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d12c      	bne.n	8008f38 <refrigera+0xde0>
				if(drp_comph != 0){
 8008ede:	4b4b      	ldr	r3, [pc, #300]	@ (800900c <refrigera+0xeb4>)
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01e      	beq.n	8008f24 <refrigera+0xdcc>
					goto defctl;
 8008ee6:	e02c      	b.n	8008f42 <refrigera+0xdea>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 8008ee8:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 8008eea:	f7fb f859 	bl	8003fa0 <tdev_to_Word>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	b21a      	sxth	r2, r3
 8008ef2:	4b47      	ldr	r3, [pc, #284]	@ (8009010 <refrigera+0xeb8>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	dc0d      	bgt.n	8008f18 <refrigera+0xdc0>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 8008efc:	492b      	ldr	r1, [pc, #172]	@ (8008fac <refrigera+0xe54>)
 8008efe:	4845      	ldr	r0, [pc, #276]	@ (8009014 <refrigera+0xebc>)
 8008f00:	2306      	movs	r3, #6
 8008f02:	2207      	movs	r2, #7
 8008f04:	f001 fe0a 	bl	800ab1c <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 8008f08:	4b35      	ldr	r3, [pc, #212]	@ (8008fe0 <refrigera+0xe88>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d015      	beq.n	8008f3c <refrigera+0xde4>
					goto control_j04;
 8008f10:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 8008f12:	f7fb f8fd 	bl	8004110 <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 8008f16:	e014      	b.n	8008f42 <refrigera+0xdea>
					goto equal;
 8008f18:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 8008f1a:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <refrigera+0xe88>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <refrigera+0xde8>
					goto control_j05;
 8008f22:	e000      	b.n	8008f26 <refrigera+0xdce>
				goto on_comp;						// Enciende el compresor
 8008f24:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 8008f26:	4b20      	ldr	r3, [pc, #128]	@ (8008fa8 <refrigera+0xe50>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 8008f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fac <refrigera+0xe54>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	709a      	strb	r2, [r3, #2]
				goto defctl;
 8008f32:	e006      	b.n	8008f42 <refrigera+0xdea>
             		 goto defctl;
 8008f34:	46c0      	nop			@ (mov r8, r8)
 8008f36:	e004      	b.n	8008f42 <refrigera+0xdea>
					goto defctl;					// No, espera
 8008f38:	46c0      	nop			@ (mov r8, r8)
 8008f3a:	e002      	b.n	8008f42 <refrigera+0xdea>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 8008f3c:	46c0      	nop			@ (mov r8, r8)
 8008f3e:	e000      	b.n	8008f42 <refrigera+0xdea>
        		goto defctl;
 8008f40:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 8008f42:	4b24      	ldr	r3, [pc, #144]	@ (8008fd4 <refrigera+0xe7c>)
 8008f44:	224d      	movs	r2, #77	@ 0x4d
 8008f46:	2100      	movs	r1, #0
 8008f48:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 8008f4a:	4b22      	ldr	r3, [pc, #136]	@ (8008fd4 <refrigera+0xe7c>)
 8008f4c:	224d      	movs	r2, #77	@ 0x4d
 8008f4e:	5c9b      	ldrb	r3, [r3, r2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d100      	bne.n	8008f56 <refrigera+0xdfe>
 8008f54:	e0e7      	b.n	8009126 <refrigera+0xfce>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 8008f56:	4b22      	ldr	r3, [pc, #136]	@ (8008fe0 <refrigera+0xe88>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d162      	bne.n	8009024 <refrigera+0xecc>
				STM8_16_X = Plantilla[timeDefi] *60;
 8008f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd4 <refrigera+0xe7c>)
 8008f60:	224d      	movs	r2, #77	@ 0x4d
 8008f62:	5c9b      	ldrb	r3, [r3, r2]
 8008f64:	001a      	movs	r2, r3
 8008f66:	233c      	movs	r3, #60	@ 0x3c
 8008f68:	4353      	muls	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8009018 <refrigera+0xec0>)
 8008f6e:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 8008f70:	4b29      	ldr	r3, [pc, #164]	@ (8009018 <refrigera+0xec0>)
 8008f72:	881a      	ldrh	r2, [r3, #0]
 8008f74:	4b29      	ldr	r3, [pc, #164]	@ (800901c <refrigera+0xec4>)
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d006      	beq.n	8008f8a <refrigera+0xe32>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 8008f7c:	4b15      	ldr	r3, [pc, #84]	@ (8008fd4 <refrigera+0xe7c>)
 8008f7e:	2259      	movs	r2, #89	@ 0x59
 8008f80:	5c9b      	ldrb	r3, [r3, r2]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d000      	beq.n	8008f88 <refrigera+0xe30>
 8008f86:	e075      	b.n	8009074 <refrigera+0xf1c>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 8008f88:	e09d      	b.n	80090c6 <refrigera+0xf6e>
					goto loadDefiCnts;
 8008f8a:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 8008f8c:	4b22      	ldr	r3, [pc, #136]	@ (8009018 <refrigera+0xec0>)
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	4b22      	ldr	r3, [pc, #136]	@ (800901c <refrigera+0xec4>)
 8008f92:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 8008f94:	4b20      	ldr	r3, [pc, #128]	@ (8009018 <refrigera+0xec0>)
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	4b20      	ldr	r3, [pc, #128]	@ (8009020 <refrigera+0xec8>)
 8008f9e:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 8008fa0:	e0c6      	b.n	8009130 <refrigera+0xfd8>
 8008fa2:	46c0      	nop			@ (mov r8, r8)
 8008fa4:	20000bf8 	.word	0x20000bf8
 8008fa8:	20000bc4 	.word	0x20000bc4
 8008fac:	20000bb0 	.word	0x20000bb0
 8008fb0:	20000b8c 	.word	0x20000b8c
 8008fb4:	20000c00 	.word	0x20000c00
 8008fb8:	20000bee 	.word	0x20000bee
 8008fbc:	20000b77 	.word	0x20000b77
 8008fc0:	20000b74 	.word	0x20000b74
 8008fc4:	20000b98 	.word	0x20000b98
 8008fc8:	20000b6d 	.word	0x20000b6d
 8008fcc:	20000bb8 	.word	0x20000bb8
 8008fd0:	20000c1c 	.word	0x20000c1c
 8008fd4:	200000bc 	.word	0x200000bc
 8008fd8:	20000c47 	.word	0x20000c47
 8008fdc:	20000b8a 	.word	0x20000b8a
 8008fe0:	20000b78 	.word	0x20000b78
 8008fe4:	20000b94 	.word	0x20000b94
 8008fe8:	20000b76 	.word	0x20000b76
 8008fec:	20000c19 	.word	0x20000c19
 8008ff0:	20000c18 	.word	0x20000c18
 8008ff4:	20000bd6 	.word	0x20000bd6
 8008ff8:	20000bda 	.word	0x20000bda
 8008ffc:	20000ba8 	.word	0x20000ba8
 8009000:	20000ba0 	.word	0x20000ba0
 8009004:	20000bce 	.word	0x20000bce
 8009008:	20000b82 	.word	0x20000b82
 800900c:	20000c1a 	.word	0x20000c1a
 8009010:	20000bcc 	.word	0x20000bcc
 8009014:	20000c5c 	.word	0x20000c5c
 8009018:	20000922 	.word	0x20000922
 800901c:	20000c56 	.word	0x20000c56
 8009020:	20000c5a 	.word	0x20000c5a
					goto chkTimeDefi;
 8009024:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 8009026:	4ba7      	ldr	r3, [pc, #668]	@ (80092c4 <refrigera+0x116c>)
 8009028:	2259      	movs	r2, #89	@ 0x59
 800902a:	5c9b      	ldrb	r3, [r3, r2]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d03c      	beq.n	80090aa <refrigera+0xf52>
chkTimeDefi_1s:
 8009030:	46c0      	nop			@ (mov r8, r8)
 8009032:	e002      	b.n	800903a <refrigera+0xee2>
                	   goto chkTimeDefi_1s;
 8009034:	46c0      	nop			@ (mov r8, r8)
 8009036:	e000      	b.n	800903a <refrigera+0xee2>
                	   goto chkTimeDefi_1s;
 8009038:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800903a:	4ba3      	ldr	r3, [pc, #652]	@ (80092c8 <refrigera+0x1170>)
 800903c:	791b      	ldrb	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d000      	beq.n	8009044 <refrigera+0xeec>
 8009042:	e067      	b.n	8009114 <refrigera+0xfbc>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 8009044:	4ba0      	ldr	r3, [pc, #640]	@ (80092c8 <refrigera+0x1170>)
 8009046:	795b      	ldrb	r3, [r3, #5]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d000      	beq.n	800904e <refrigera+0xef6>
 800904c:	e064      	b.n	8009118 <refrigera+0xfc0>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800904e:	4b9f      	ldr	r3, [pc, #636]	@ (80092cc <refrigera+0x1174>)
 8009050:	881a      	ldrh	r2, [r3, #0]
 8009052:	4b9f      	ldr	r3, [pc, #636]	@ (80092d0 <refrigera+0x1178>)
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d106      	bne.n	8009068 <refrigera+0xf10>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800905a:	f7fa ffa1 	bl	8003fa0 <tdev_to_Word>
 800905e:	0003      	movs	r3, r0
 8009060:	b29a      	uxth	r2, r3
 8009062:	4b9c      	ldr	r3, [pc, #624]	@ (80092d4 <refrigera+0x117c>)
 8009064:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 8009066:	e063      	b.n	8009130 <refrigera+0xfd8>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 8009068:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800906a:	4b98      	ldr	r3, [pc, #608]	@ (80092cc <refrigera+0x1174>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d15b      	bne.n	800912a <refrigera+0xfd2>
chkTimeDefi_1s_02:
 8009072:	e000      	b.n	8009076 <refrigera+0xf1e>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 8009074:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 8009076:	4b97      	ldr	r3, [pc, #604]	@ (80092d4 <refrigera+0x117c>)
 8009078:	881a      	ldrh	r2, [r3, #0]
 800907a:	4b97      	ldr	r3, [pc, #604]	@ (80092d8 <refrigera+0x1180>)
 800907c:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800907e:	4b96      	ldr	r3, [pc, #600]	@ (80092d8 <refrigera+0x1180>)
 8009080:	881c      	ldrh	r4, [r3, #0]
 8009082:	f7fa ff8d 	bl	8003fa0 <tdev_to_Word>
 8009086:	0003      	movs	r3, r0
 8009088:	b29b      	uxth	r3, r3
 800908a:	1ae3      	subs	r3, r4, r3
 800908c:	b29a      	uxth	r2, r3
 800908e:	4b92      	ldr	r3, [pc, #584]	@ (80092d8 <refrigera+0x1180>)
 8009090:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 8009092:	4b92      	ldr	r3, [pc, #584]	@ (80092dc <refrigera+0x1184>)
 8009094:	0018      	movs	r0, r3
 8009096:	f7fa ff9b 	bl	8003fd0 <TwoByteInArrayToWord>
 800909a:	0003      	movs	r3, r0
 800909c:	b21a      	sxth	r2, r3
 800909e:	4b8e      	ldr	r3, [pc, #568]	@ (80092d8 <refrigera+0x1180>)
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b21b      	sxth	r3, r3
 80090a4:	429a      	cmp	r2, r3
 80090a6:	dc28      	bgt.n	80090fa <refrigera+0xfa2>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 80090a8:	e039      	b.n	800911e <refrigera+0xfc6>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 80090aa:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 80090ac:	4b86      	ldr	r3, [pc, #536]	@ (80092c8 <refrigera+0x1170>)
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1bf      	bne.n	8009034 <refrigera+0xedc>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 80090b4:	4b84      	ldr	r3, [pc, #528]	@ (80092c8 <refrigera+0x1170>)
 80090b6:	795b      	ldrb	r3, [r3, #5]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1bd      	bne.n	8009038 <refrigera+0xee0>
                   if(cntDefi_H != 1){ //cpw X,#1
 80090bc:	4b83      	ldr	r3, [pc, #524]	@ (80092cc <refrigera+0x1174>)
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d134      	bne.n	800912e <refrigera+0xfd6>
chkTimeDefi_3s_01:
 80090c4:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 80090c6:	f7fa ff6b 	bl	8003fa0 <tdev_to_Word>
 80090ca:	0003      	movs	r3, r0
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	4b82      	ldr	r3, [pc, #520]	@ (80092d8 <refrigera+0x1180>)
 80090d0:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 80090d2:	4b81      	ldr	r3, [pc, #516]	@ (80092d8 <refrigera+0x1180>)
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	4b82      	ldr	r3, [pc, #520]	@ (80092e0 <refrigera+0x1188>)
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	b29a      	uxth	r2, r3
 80090de:	4b7e      	ldr	r3, [pc, #504]	@ (80092d8 <refrigera+0x1180>)
 80090e0:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 80090e2:	4b7e      	ldr	r3, [pc, #504]	@ (80092dc <refrigera+0x1184>)
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7fa ff73 	bl	8003fd0 <TwoByteInArrayToWord>
 80090ea:	0003      	movs	r3, r0
 80090ec:	b21a      	sxth	r2, r3
 80090ee:	4b7a      	ldr	r3, [pc, #488]	@ (80092d8 <refrigera+0x1180>)
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b21b      	sxth	r3, r3
 80090f4:	429a      	cmp	r2, r3
 80090f6:	dd11      	ble.n	800911c <refrigera+0xfc4>
alarmDefi:
 80090f8:	e000      	b.n	80090fc <refrigera+0xfa4>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 80090fa:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 80090fc:	4b72      	ldr	r3, [pc, #456]	@ (80092c8 <refrigera+0x1170>)
 80090fe:	2201      	movs	r2, #1
 8009100:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 8009102:	4b78      	ldr	r3, [pc, #480]	@ (80092e4 <refrigera+0x118c>)
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 8009108:	4b76      	ldr	r3, [pc, #472]	@ (80092e4 <refrigera+0x118c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	001a      	movs	r2, r3
 800910e:	4b76      	ldr	r3, [pc, #472]	@ (80092e8 <refrigera+0x1190>)
 8009110:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 8009112:	e00d      	b.n	8009130 <refrigera+0xfd8>
                	  goto noAlarmDefi;
 8009114:	46c0      	nop			@ (mov r8, r8)
 8009116:	e002      	b.n	800911e <refrigera+0xfc6>
                	  goto noAlarmDefi;
 8009118:	46c0      	nop			@ (mov r8, r8)
 800911a:	e000      	b.n	800911e <refrigera+0xfc6>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800911c:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800911e:	4b6a      	ldr	r3, [pc, #424]	@ (80092c8 <refrigera+0x1170>)
 8009120:	2200      	movs	r2, #0
 8009122:	719a      	strb	r2, [r3, #6]
 8009124:	e004      	b.n	8009130 <refrigera+0xfd8>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 8009126:	46c0      	nop			@ (mov r8, r8)
 8009128:	e002      	b.n	8009130 <refrigera+0xfd8>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	e000      	b.n	8009130 <refrigera+0xfd8>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800912e:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 8009130:	f7fa ff36 	bl	8003fa0 <tdev_to_Word>
 8009134:	0003      	movs	r3, r0
 8009136:	b29a      	uxth	r2, r3
 8009138:	4b67      	ldr	r3, [pc, #412]	@ (80092d8 <refrigera+0x1180>)
 800913a:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800913c:	4b6b      	ldr	r3, [pc, #428]	@ (80092ec <refrigera+0x1194>)
 800913e:	0018      	movs	r0, r3
 8009140:	f7fa ff46 	bl	8003fd0 <TwoByteInArrayToWord>
 8009144:	0003      	movs	r3, r0
 8009146:	b21a      	sxth	r2, r3
 8009148:	4b63      	ldr	r3, [pc, #396]	@ (80092d8 <refrigera+0x1180>)
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b21b      	sxth	r3, r3
 800914e:	429a      	cmp	r2, r3
 8009150:	dc02      	bgt.n	8009158 <refrigera+0x1000>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 8009152:	f7fa ff6d 	bl	8004030 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 8009156:	e058      	b.n	800920a <refrigera+0x10b2>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 8009158:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800915a:	4b5a      	ldr	r3, [pc, #360]	@ (80092c4 <refrigera+0x116c>)
 800915c:	2259      	movs	r2, #89	@ 0x59
 800915e:	5c9b      	ldrb	r3, [r3, r2]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d03c      	beq.n	80091de <refrigera+0x1086>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 8009164:	4b62      	ldr	r3, [pc, #392]	@ (80092f0 <refrigera+0x1198>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	4a61      	ldr	r2, [pc, #388]	@ (80092f4 <refrigera+0x119c>)
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	189b      	adds	r3, r3, r2
 8009172:	b29a      	uxth	r2, r3
 8009174:	4b58      	ldr	r3, [pc, #352]	@ (80092d8 <refrigera+0x1180>)
 8009176:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 8009178:	4b5f      	ldr	r3, [pc, #380]	@ (80092f8 <refrigera+0x11a0>)
 800917a:	785b      	ldrb	r3, [r3, #1]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d130      	bne.n	80091e2 <refrigera+0x108a>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 8009180:	4b5d      	ldr	r3, [pc, #372]	@ (80092f8 <refrigera+0x11a0>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d12e      	bne.n	80091e6 <refrigera+0x108e>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 8009188:	4b5c      	ldr	r3, [pc, #368]	@ (80092fc <refrigera+0x11a4>)
 800918a:	0018      	movs	r0, r3
 800918c:	f7fa ff20 	bl	8003fd0 <TwoByteInArrayToWord>
 8009190:	0003      	movs	r3, r0
 8009192:	b21a      	sxth	r2, r3
 8009194:	4b50      	ldr	r3, [pc, #320]	@ (80092d8 <refrigera+0x1180>)
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	b21b      	sxth	r3, r3
 800919a:	429a      	cmp	r2, r3
 800919c:	dd25      	ble.n	80091ea <refrigera+0x1092>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800919e:	4b58      	ldr	r3, [pc, #352]	@ (8009300 <refrigera+0x11a8>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4a57      	ldr	r2, [pc, #348]	@ (8009304 <refrigera+0x11ac>)
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	189b      	adds	r3, r3, r2
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	4b4a      	ldr	r3, [pc, #296]	@ (80092d8 <refrigera+0x1180>)
 80091b0:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 80091b2:	4b51      	ldr	r3, [pc, #324]	@ (80092f8 <refrigera+0x11a0>)
 80091b4:	78db      	ldrb	r3, [r3, #3]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d119      	bne.n	80091ee <refrigera+0x1096>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 80091ba:	4b4f      	ldr	r3, [pc, #316]	@ (80092f8 <refrigera+0x11a0>)
 80091bc:	789b      	ldrb	r3, [r3, #2]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d117      	bne.n	80091f2 <refrigera+0x109a>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 80091c2:	4b51      	ldr	r3, [pc, #324]	@ (8009308 <refrigera+0x11b0>)
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7fa ff03 	bl	8003fd0 <TwoByteInArrayToWord>
 80091ca:	0003      	movs	r3, r0
 80091cc:	b21a      	sxth	r2, r3
 80091ce:	4b42      	ldr	r3, [pc, #264]	@ (80092d8 <refrigera+0x1180>)
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	b21b      	sxth	r3, r3
 80091d4:	429a      	cmp	r2, r3
 80091d6:	dd01      	ble.n	80091dc <refrigera+0x1084>
 80091d8:	f7ff f9fa 	bl	80085d0 <refrigera+0x478>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 80091dc:	e00a      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 80091de:	46c0      	nop			@ (mov r8, r8)
 80091e0:	e008      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp;
 80091e2:	46c0      	nop			@ (mov r8, r8)
 80091e4:	e006      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp;
 80091e6:	46c0      	nop			@ (mov r8, r8)
 80091e8:	e004      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 80091ea:	46c0      	nop			@ (mov r8, r8)
 80091ec:	e002      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp;
 80091ee:	46c0      	nop			@ (mov r8, r8)
 80091f0:	e000      	b.n	80091f4 <refrigera+0x109c>
                	  goto noDeshXTemp;
 80091f2:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 80091f4:	f7fb fe96 	bl	8004f24 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 80091f8:	4b44      	ldr	r3, [pc, #272]	@ (800930c <refrigera+0x11b4>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	001a      	movs	r2, r3
 80091fe:	2301      	movs	r3, #1
 8009200:	4013      	ands	r3, r2
 8009202:	d001      	beq.n	8009208 <refrigera+0x10b0>
 8009204:	f7ff f9e6 	bl	80085d4 <refrigera+0x47c>
            	   goto control_j06;
 8009208:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800920a:	4b41      	ldr	r3, [pc, #260]	@ (8009310 <refrigera+0x11b8>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d108      	bne.n	8009224 <refrigera+0x10cc>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 8009212:	4b40      	ldr	r3, [pc, #256]	@ (8009314 <refrigera+0x11bc>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <refrigera+0x10d2>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800921a:	4b3e      	ldr	r3, [pc, #248]	@ (8009314 <refrigera+0x11bc>)
 800921c:	2200      	movs	r2, #0
 800921e:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 8009220:	f7ff f9d9 	bl	80085d6 <refrigera+0x47e>
					goto finctl; //jrne	finctl;
 8009224:	46c0      	nop			@ (mov r8, r8)
 8009226:	f7ff fa07 	bl	8008638 <refrigera+0x4e0>
            		goto control_j07;
 800922a:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800922c:	f7ff fa04 	bl	8008638 <refrigera+0x4e0>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 8009230:	4b24      	ldr	r3, [pc, #144]	@ (80092c4 <refrigera+0x116c>)
 8009232:	2255      	movs	r2, #85	@ 0x55
 8009234:	5c9b      	ldrb	r3, [r3, r2]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d103      	bne.n	8009242 <refrigera+0x10ea>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800923a:	4b37      	ldr	r3, [pc, #220]	@ (8009318 <refrigera+0x11c0>)
 800923c:	2201      	movs	r2, #1
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	e000      	b.n	8009244 <refrigera+0x10ec>
					goto deshie20;				/// No
 8009242:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 8009244:	4b1f      	ldr	r3, [pc, #124]	@ (80092c4 <refrigera+0x116c>)
 8009246:	2255      	movs	r2, #85	@ 0x55
 8009248:	5c9b      	ldrb	r3, [r3, r2]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d114      	bne.n	8009278 <refrigera+0x1120>
deshXvent:
 800924e:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 8009250:	4b1c      	ldr	r3, [pc, #112]	@ (80092c4 <refrigera+0x116c>)
 8009252:	225b      	movs	r2, #91	@ 0x5b
 8009254:	5c9b      	ldrb	r3, [r3, r2]
 8009256:	001a      	movs	r2, r3
 8009258:	2302      	movs	r3, #2
 800925a:	4013      	ands	r3, r2
 800925c:	d104      	bne.n	8009268 <refrigera+0x1110>
				if(retvent != 0){ //tnz retvent
 800925e:	4b2f      	ldr	r3, [pc, #188]	@ (800931c <refrigera+0x11c4>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10d      	bne.n	8009282 <refrigera+0x112a>
deshie24:
 8009266:	e000      	b.n	800926a <refrigera+0x1112>
					goto deshie24;
 8009268:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800926a:	4b2d      	ldr	r3, [pc, #180]	@ (8009320 <refrigera+0x11c8>)
 800926c:	2201      	movs	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 8009270:	4b2c      	ldr	r3, [pc, #176]	@ (8009324 <refrigera+0x11cc>)
 8009272:	2201      	movs	r2, #1
 8009274:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 8009276:	e005      	b.n	8009284 <refrigera+0x112c>
					goto deshie25;				//;		/ No, acciona el deshielo
 8009278:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800927a:	4b27      	ldr	r3, [pc, #156]	@ (8009318 <refrigera+0x11c0>)
 800927c:	2201      	movs	r2, #1
 800927e:	705a      	strb	r2, [r3, #1]
 8009280:	e000      	b.n	8009284 <refrigera+0x112c>
					goto deshie30; //jrne		deshie30;		/ No, espera
 8009282:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 8009284:	4b28      	ldr	r3, [pc, #160]	@ (8009328 <refrigera+0x11d0>)
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800928a:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <refrigera+0x116c>)
 800928c:	224c      	movs	r2, #76	@ 0x4c
 800928e:	5c9a      	ldrb	r2, [r3, r2]
 8009290:	4b26      	ldr	r3, [pc, #152]	@ (800932c <refrigera+0x11d4>)
 8009292:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 8009294:	4b26      	ldr	r3, [pc, #152]	@ (8009330 <refrigera+0x11d8>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	001a      	movs	r2, r3
 800929a:	4b13      	ldr	r3, [pc, #76]	@ (80092e8 <refrigera+0x1190>)
 800929c:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800929e:	f7fb fe41 	bl	8004f24 <buildmode>
				 if((0x13 & modo ) == 0){
 80092a2:	4b1a      	ldr	r3, [pc, #104]	@ (800930c <refrigera+0x11b4>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2213      	movs	r2, #19
 80092a8:	4013      	ands	r3, r2
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <refrigera+0x115c>
 80092b0:	f7ff f966 	bl	8008580 <refrigera+0x428>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 80092b4:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	f7ff f9be 	bl	8008638 <refrigera+0x4e0>


main_refrigera:


}
 80092bc:	46c0      	nop			@ (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	b005      	add	sp, #20
 80092c2:	bd90      	pop	{r4, r7, pc}
 80092c4:	200000bc 	.word	0x200000bc
 80092c8:	20000ba0 	.word	0x20000ba0
 80092cc:	20000c56 	.word	0x20000c56
 80092d0:	20000c5a 	.word	0x20000c5a
 80092d4:	20000c58 	.word	0x20000c58
 80092d8:	20000922 	.word	0x20000922
 80092dc:	200000ef 	.word	0x200000ef
 80092e0:	20000c74 	.word	0x20000c74
 80092e4:	20000bd6 	.word	0x20000bd6
 80092e8:	20000bda 	.word	0x20000bda
 80092ec:	200000cf 	.word	0x200000cf
 80092f0:	20000bd0 	.word	0x20000bd0
 80092f4:	20000bd1 	.word	0x20000bd1
 80092f8:	20000ba8 	.word	0x20000ba8
 80092fc:	200000d3 	.word	0x200000d3
 8009300:	20000bd2 	.word	0x20000bd2
 8009304:	20000bd3 	.word	0x20000bd3
 8009308:	200000d1 	.word	0x200000d1
 800930c:	20000b74 	.word	0x20000b74
 8009310:	20000b8b 	.word	0x20000b8b
 8009314:	20000c70 	.word	0x20000c70
 8009318:	20000bc4 	.word	0x20000bc4
 800931c:	20000b8a 	.word	0x20000b8a
 8009320:	20000c00 	.word	0x20000c00
 8009324:	20000bb0 	.word	0x20000bb0
 8009328:	20000b75 	.word	0x20000b75
 800932c:	20000be7 	.word	0x20000be7
 8009330:	20000bd8 	.word	0x20000bd8

08009334 <st_refri>:

void st_refri (void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 8009338:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <st_refri+0x30>)
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800933e:	4b09      	ldr	r3, [pc, #36]	@ (8009364 <st_refri+0x30>)
 8009340:	2200      	movs	r2, #0
 8009342:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 8009344:	4b07      	ldr	r3, [pc, #28]	@ (8009364 <st_refri+0x30>)
 8009346:	2200      	movs	r2, #0
 8009348:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800934a:	4b07      	ldr	r3, [pc, #28]	@ (8009368 <st_refri+0x34>)
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 8009350:	f7fa fede 	bl	8004110 <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <st_refri+0x38>)
 8009356:	2202      	movs	r2, #2
 8009358:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800935a:	f7fa fe69 	bl	8004030 <ldadaptivo>
}
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000bc4 	.word	0x20000bc4
 8009368:	20000c00 	.word	0x20000c00
 800936c:	20000bb8 	.word	0x20000bb8

08009370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009376:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <HAL_MspInit+0x44>)
 8009378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800937a:	4b0e      	ldr	r3, [pc, #56]	@ (80093b4 <HAL_MspInit+0x44>)
 800937c:	2180      	movs	r1, #128	@ 0x80
 800937e:	0549      	lsls	r1, r1, #21
 8009380:	430a      	orrs	r2, r1
 8009382:	659a      	str	r2, [r3, #88]	@ 0x58
 8009384:	4b0b      	ldr	r3, [pc, #44]	@ (80093b4 <HAL_MspInit+0x44>)
 8009386:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009388:	2380      	movs	r3, #128	@ 0x80
 800938a:	055b      	lsls	r3, r3, #21
 800938c:	4013      	ands	r3, r2
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009392:	4b08      	ldr	r3, [pc, #32]	@ (80093b4 <HAL_MspInit+0x44>)
 8009394:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009396:	4b07      	ldr	r3, [pc, #28]	@ (80093b4 <HAL_MspInit+0x44>)
 8009398:	2101      	movs	r1, #1
 800939a:	430a      	orrs	r2, r1
 800939c:	661a      	str	r2, [r3, #96]	@ 0x60
 800939e:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <HAL_MspInit+0x44>)
 80093a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093a2:	2201      	movs	r2, #1
 80093a4:	4013      	ands	r3, r2
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093aa:	46c0      	nop			@ (mov r8, r8)
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b002      	add	sp, #8
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	40021000 	.word	0x40021000

080093b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b09d      	sub	sp, #116	@ 0x74
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093c0:	235c      	movs	r3, #92	@ 0x5c
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	0018      	movs	r0, r3
 80093c6:	2314      	movs	r3, #20
 80093c8:	001a      	movs	r2, r3
 80093ca:	2100      	movs	r1, #0
 80093cc:	f00f f9c0 	bl	8018750 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80093d0:	2418      	movs	r4, #24
 80093d2:	193b      	adds	r3, r7, r4
 80093d4:	0018      	movs	r0, r3
 80093d6:	2344      	movs	r3, #68	@ 0x44
 80093d8:	001a      	movs	r2, r3
 80093da:	2100      	movs	r1, #0
 80093dc:	f00f f9b8 	bl	8018750 <memset>
  if(hadc->Instance==ADC1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a3b      	ldr	r2, [pc, #236]	@ (80094d4 <HAL_ADC_MspInit+0x11c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d16f      	bne.n	80094ca <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	2280      	movs	r2, #128	@ 0x80
 80093ee:	01d2      	lsls	r2, r2, #7
 80093f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80093f2:	193b      	adds	r3, r7, r4
 80093f4:	2200      	movs	r2, #0
 80093f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80093f8:	193b      	adds	r3, r7, r4
 80093fa:	0018      	movs	r0, r3
 80093fc:	f00a fee4 	bl	80141c8 <HAL_RCCEx_PeriphCLKConfig>
 8009400:	1e03      	subs	r3, r0, #0
 8009402:	d001      	beq.n	8009408 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8009404:	f7fe fe9c 	bl	8008140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009408:	4b33      	ldr	r3, [pc, #204]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800940a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800940c:	4b32      	ldr	r3, [pc, #200]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800940e:	2180      	movs	r1, #128	@ 0x80
 8009410:	0349      	lsls	r1, r1, #13
 8009412:	430a      	orrs	r2, r1
 8009414:	661a      	str	r2, [r3, #96]	@ 0x60
 8009416:	4b30      	ldr	r3, [pc, #192]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800941a:	2380      	movs	r3, #128	@ 0x80
 800941c:	035b      	lsls	r3, r3, #13
 800941e:	4013      	ands	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
 8009422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009424:	4b2c      	ldr	r3, [pc, #176]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009428:	4b2b      	ldr	r3, [pc, #172]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800942a:	2104      	movs	r1, #4
 800942c:	430a      	orrs	r2, r1
 800942e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009430:	4b29      	ldr	r3, [pc, #164]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009434:	2204      	movs	r2, #4
 8009436:	4013      	ands	r3, r2
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800943c:	4b26      	ldr	r3, [pc, #152]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800943e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009440:	4b25      	ldr	r3, [pc, #148]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009442:	2101      	movs	r1, #1
 8009444:	430a      	orrs	r2, r1
 8009446:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009448:	4b23      	ldr	r3, [pc, #140]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800944c:	2201      	movs	r2, #1
 800944e:	4013      	ands	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009454:	4b20      	ldr	r3, [pc, #128]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009458:	4b1f      	ldr	r3, [pc, #124]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 800945a:	2102      	movs	r1, #2
 800945c:	430a      	orrs	r2, r1
 800945e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009460:	4b1d      	ldr	r3, [pc, #116]	@ (80094d8 <HAL_ADC_MspInit+0x120>)
 8009462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009464:	2202      	movs	r2, #2
 8009466:	4013      	ands	r3, r2
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN9
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800946c:	245c      	movs	r4, #92	@ 0x5c
 800946e:	193b      	adds	r3, r7, r4
 8009470:	2203      	movs	r2, #3
 8009472:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009474:	193b      	adds	r3, r7, r4
 8009476:	2203      	movs	r2, #3
 8009478:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947a:	193b      	adds	r3, r7, r4
 800947c:	2200      	movs	r2, #0
 800947e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009480:	193b      	adds	r3, r7, r4
 8009482:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <HAL_ADC_MspInit+0x124>)
 8009484:	0019      	movs	r1, r3
 8009486:	0010      	movs	r0, r2
 8009488:	f007 fb9e 	bl	8010bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800948c:	193b      	adds	r3, r7, r4
 800948e:	22e0      	movs	r2, #224	@ 0xe0
 8009490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009492:	193b      	adds	r3, r7, r4
 8009494:	2203      	movs	r2, #3
 8009496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009498:	193b      	adds	r3, r7, r4
 800949a:	2200      	movs	r2, #0
 800949c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800949e:	193a      	adds	r2, r7, r4
 80094a0:	23a0      	movs	r3, #160	@ 0xa0
 80094a2:	05db      	lsls	r3, r3, #23
 80094a4:	0011      	movs	r1, r2
 80094a6:	0018      	movs	r0, r3
 80094a8:	f007 fb8e 	bl	8010bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80094ac:	193b      	adds	r3, r7, r4
 80094ae:	2202      	movs	r2, #2
 80094b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094b2:	193b      	adds	r3, r7, r4
 80094b4:	2203      	movs	r2, #3
 80094b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094b8:	193b      	adds	r3, r7, r4
 80094ba:	2200      	movs	r2, #0
 80094bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094be:	193b      	adds	r3, r7, r4
 80094c0:	4a07      	ldr	r2, [pc, #28]	@ (80094e0 <HAL_ADC_MspInit+0x128>)
 80094c2:	0019      	movs	r1, r3
 80094c4:	0010      	movs	r0, r2
 80094c6:	f007 fb7f 	bl	8010bc8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	46bd      	mov	sp, r7
 80094ce:	b01d      	add	sp, #116	@ 0x74
 80094d0:	bd90      	pop	{r4, r7, pc}
 80094d2:	46c0      	nop			@ (mov r8, r8)
 80094d4:	40012400 	.word	0x40012400
 80094d8:	40021000 	.word	0x40021000
 80094dc:	50000800 	.word	0x50000800
 80094e0:	50000400 	.word	0x50000400

080094e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b09b      	sub	sp, #108	@ 0x6c
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094ec:	2354      	movs	r3, #84	@ 0x54
 80094ee:	18fb      	adds	r3, r7, r3
 80094f0:	0018      	movs	r0, r3
 80094f2:	2314      	movs	r3, #20
 80094f4:	001a      	movs	r2, r3
 80094f6:	2100      	movs	r1, #0
 80094f8:	f00f f92a 	bl	8018750 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80094fc:	2410      	movs	r4, #16
 80094fe:	193b      	adds	r3, r7, r4
 8009500:	0018      	movs	r0, r3
 8009502:	2344      	movs	r3, #68	@ 0x44
 8009504:	001a      	movs	r2, r3
 8009506:	2100      	movs	r1, #0
 8009508:	f00f f922 	bl	8018750 <memset>
  if(hi2c->Instance==I2C1)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a50      	ldr	r2, [pc, #320]	@ (8009654 <HAL_I2C_MspInit+0x170>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d000      	beq.n	8009518 <HAL_I2C_MspInit+0x34>
 8009516:	e098      	b.n	800964a <HAL_I2C_MspInit+0x166>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009518:	193b      	adds	r3, r7, r4
 800951a:	2220      	movs	r2, #32
 800951c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800951e:	193b      	adds	r3, r7, r4
 8009520:	2200      	movs	r2, #0
 8009522:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009524:	193b      	adds	r3, r7, r4
 8009526:	0018      	movs	r0, r3
 8009528:	f00a fe4e 	bl	80141c8 <HAL_RCCEx_PeriphCLKConfig>
 800952c:	1e03      	subs	r3, r0, #0
 800952e:	d001      	beq.n	8009534 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8009530:	f7fe fe06 	bl	8008140 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009534:	4b48      	ldr	r3, [pc, #288]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 8009536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009538:	4b47      	ldr	r3, [pc, #284]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 800953a:	2102      	movs	r1, #2
 800953c:	430a      	orrs	r2, r1
 800953e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009540:	4b45      	ldr	r3, [pc, #276]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 8009542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009544:	2202      	movs	r2, #2
 8009546:	4013      	ands	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800954c:	2154      	movs	r1, #84	@ 0x54
 800954e:	187b      	adds	r3, r7, r1
 8009550:	22c0      	movs	r2, #192	@ 0xc0
 8009552:	0092      	lsls	r2, r2, #2
 8009554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009556:	187b      	adds	r3, r7, r1
 8009558:	2212      	movs	r2, #18
 800955a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955c:	187b      	adds	r3, r7, r1
 800955e:	2200      	movs	r2, #0
 8009560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009562:	187b      	adds	r3, r7, r1
 8009564:	2203      	movs	r2, #3
 8009566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009568:	187b      	adds	r3, r7, r1
 800956a:	2204      	movs	r2, #4
 800956c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800956e:	187b      	adds	r3, r7, r1
 8009570:	4a3a      	ldr	r2, [pc, #232]	@ (800965c <HAL_I2C_MspInit+0x178>)
 8009572:	0019      	movs	r1, r3
 8009574:	0010      	movs	r0, r2
 8009576:	f007 fb27 	bl	8010bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800957a:	4b37      	ldr	r3, [pc, #220]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 800957c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800957e:	4b36      	ldr	r3, [pc, #216]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 8009580:	2180      	movs	r1, #128	@ 0x80
 8009582:	0389      	lsls	r1, r1, #14
 8009584:	430a      	orrs	r2, r1
 8009586:	659a      	str	r2, [r3, #88]	@ 0x58
 8009588:	4b33      	ldr	r3, [pc, #204]	@ (8009658 <HAL_I2C_MspInit+0x174>)
 800958a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800958c:	2380      	movs	r3, #128	@ 0x80
 800958e:	039b      	lsls	r3, r3, #14
 8009590:	4013      	ands	r3, r2
 8009592:	60bb      	str	r3, [r7, #8]
 8009594:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8009596:	4b32      	ldr	r3, [pc, #200]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 8009598:	4a32      	ldr	r2, [pc, #200]	@ (8009664 <HAL_I2C_MspInit+0x180>)
 800959a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800959c:	4b30      	ldr	r3, [pc, #192]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 800959e:	2209      	movs	r2, #9
 80095a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80095a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80095a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80095ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095b0:	2280      	movs	r2, #128	@ 0x80
 80095b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80095b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80095ba:	4b29      	ldr	r3, [pc, #164]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095bc:	2200      	movs	r2, #0
 80095be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80095c0:	4b27      	ldr	r3, [pc, #156]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80095c6:	4b26      	ldr	r3, [pc, #152]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80095cc:	4b24      	ldr	r3, [pc, #144]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095ce:	0018      	movs	r0, r3
 80095d0:	f006 fbac 	bl	800fd2c <HAL_DMA_Init>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d001      	beq.n	80095dc <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 80095d8:	f7fe fdb2 	bl	8008140 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a20      	ldr	r2, [pc, #128]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80095e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009660 <HAL_I2C_MspInit+0x17c>)
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80095e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 80095ea:	4a20      	ldr	r2, [pc, #128]	@ (800966c <HAL_I2C_MspInit+0x188>)
 80095ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80095ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 80095f0:	220a      	movs	r2, #10
 80095f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80095f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 80095f6:	2210      	movs	r2, #16
 80095f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80095fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009600:	4b19      	ldr	r3, [pc, #100]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009602:	2280      	movs	r2, #128	@ 0x80
 8009604:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009606:	4b18      	ldr	r3, [pc, #96]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009608:	2200      	movs	r2, #0
 800960a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800960c:	4b16      	ldr	r3, [pc, #88]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 800960e:	2200      	movs	r2, #0
 8009610:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8009612:	4b15      	ldr	r3, [pc, #84]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009614:	2200      	movs	r2, #0
 8009616:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009618:	4b13      	ldr	r3, [pc, #76]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 800961a:	2200      	movs	r2, #0
 800961c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800961e:	4b12      	ldr	r3, [pc, #72]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009620:	0018      	movs	r0, r3
 8009622:	f006 fb83 	bl	800fd2c <HAL_DMA_Init>
 8009626:	1e03      	subs	r3, r0, #0
 8009628:	d001      	beq.n	800962e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800962a:	f7fe fd89 	bl	8008140 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a0d      	ldr	r2, [pc, #52]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009632:	639a      	str	r2, [r3, #56]	@ 0x38
 8009634:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <HAL_I2C_MspInit+0x184>)
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800963a:	2200      	movs	r2, #0
 800963c:	2100      	movs	r1, #0
 800963e:	2017      	movs	r0, #23
 8009640:	f006 fb32 	bl	800fca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8009644:	2017      	movs	r0, #23
 8009646:	f006 fb44 	bl	800fcd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800964a:	46c0      	nop			@ (mov r8, r8)
 800964c:	46bd      	mov	sp, r7
 800964e:	b01b      	add	sp, #108	@ 0x6c
 8009650:	bd90      	pop	{r4, r7, pc}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	40005400 	.word	0x40005400
 8009658:	40021000 	.word	0x40021000
 800965c:	50000400 	.word	0x50000400
 8009660:	200004dc 	.word	0x200004dc
 8009664:	40020080 	.word	0x40020080
 8009668:	2000053c 	.word	0x2000053c
 800966c:	4002006c 	.word	0x4002006c

08009670 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a13      	ldr	r2, [pc, #76]	@ (80096cc <HAL_I2C_MspDeInit+0x5c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d120      	bne.n	80096c4 <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009682:	4b13      	ldr	r3, [pc, #76]	@ (80096d0 <HAL_I2C_MspDeInit+0x60>)
 8009684:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009686:	4b12      	ldr	r3, [pc, #72]	@ (80096d0 <HAL_I2C_MspDeInit+0x60>)
 8009688:	4912      	ldr	r1, [pc, #72]	@ (80096d4 <HAL_I2C_MspDeInit+0x64>)
 800968a:	400a      	ands	r2, r1
 800968c:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800968e:	2380      	movs	r3, #128	@ 0x80
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4a11      	ldr	r2, [pc, #68]	@ (80096d8 <HAL_I2C_MspDeInit+0x68>)
 8009694:	0019      	movs	r1, r3
 8009696:	0010      	movs	r0, r2
 8009698:	f007 fc0a 	bl	8010eb0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4a0d      	ldr	r2, [pc, #52]	@ (80096d8 <HAL_I2C_MspDeInit+0x68>)
 80096a2:	0019      	movs	r1, r3
 80096a4:	0010      	movs	r0, r2
 80096a6:	f007 fc03 	bl	8010eb0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ae:	0018      	movs	r0, r3
 80096b0:	f006 fbe8 	bl	800fe84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b8:	0018      	movs	r0, r3
 80096ba:	f006 fbe3 	bl	800fe84 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 80096be:	2017      	movs	r0, #23
 80096c0:	f006 fb17 	bl	800fcf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80096c4:	46c0      	nop			@ (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b002      	add	sp, #8
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	40005400 	.word	0x40005400
 80096d0:	40021000 	.word	0x40021000
 80096d4:	ffdfffff 	.word	0xffdfffff
 80096d8:	50000400 	.word	0x50000400

080096dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80096dc:	b590      	push	{r4, r7, lr}
 80096de:	b095      	sub	sp, #84	@ 0x54
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80096e4:	240c      	movs	r4, #12
 80096e6:	193b      	adds	r3, r7, r4
 80096e8:	0018      	movs	r0, r3
 80096ea:	2344      	movs	r3, #68	@ 0x44
 80096ec:	001a      	movs	r2, r3
 80096ee:	2100      	movs	r1, #0
 80096f0:	f00f f82e 	bl	8018750 <memset>
  if(hrtc->Instance==RTC)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009764 <HAL_RTC_MspInit+0x88>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d12e      	bne.n	800975c <HAL_RTC_MspInit+0x80>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80096fe:	193b      	adds	r3, r7, r4
 8009700:	2280      	movs	r2, #128	@ 0x80
 8009702:	0212      	lsls	r2, r2, #8
 8009704:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009706:	193b      	adds	r3, r7, r4
 8009708:	2280      	movs	r2, #128	@ 0x80
 800970a:	0092      	lsls	r2, r2, #2
 800970c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800970e:	193b      	adds	r3, r7, r4
 8009710:	0018      	movs	r0, r3
 8009712:	f00a fd59 	bl	80141c8 <HAL_RCCEx_PeriphCLKConfig>
 8009716:	1e03      	subs	r3, r0, #0
 8009718:	d001      	beq.n	800971e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800971a:	f7fe fd11 	bl	8008140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800971e:	4a12      	ldr	r2, [pc, #72]	@ (8009768 <HAL_RTC_MspInit+0x8c>)
 8009720:	2390      	movs	r3, #144	@ 0x90
 8009722:	58d3      	ldr	r3, [r2, r3]
 8009724:	4910      	ldr	r1, [pc, #64]	@ (8009768 <HAL_RTC_MspInit+0x8c>)
 8009726:	2280      	movs	r2, #128	@ 0x80
 8009728:	0212      	lsls	r2, r2, #8
 800972a:	4313      	orrs	r3, r2
 800972c:	2290      	movs	r2, #144	@ 0x90
 800972e:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009730:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <HAL_RTC_MspInit+0x8c>)
 8009732:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009734:	4b0c      	ldr	r3, [pc, #48]	@ (8009768 <HAL_RTC_MspInit+0x8c>)
 8009736:	2180      	movs	r1, #128	@ 0x80
 8009738:	00c9      	lsls	r1, r1, #3
 800973a:	430a      	orrs	r2, r1
 800973c:	659a      	str	r2, [r3, #88]	@ 0x58
 800973e:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <HAL_RTC_MspInit+0x8c>)
 8009740:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009742:	2380      	movs	r3, #128	@ 0x80
 8009744:	00db      	lsls	r3, r3, #3
 8009746:	4013      	ands	r3, r2
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800974c:	2200      	movs	r2, #0
 800974e:	2100      	movs	r1, #0
 8009750:	2002      	movs	r0, #2
 8009752:	f006 faa9 	bl	800fca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8009756:	2002      	movs	r0, #2
 8009758:	f006 fabb 	bl	800fcd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800975c:	46c0      	nop			@ (mov r8, r8)
 800975e:	46bd      	mov	sp, r7
 8009760:	b015      	add	sp, #84	@ 0x54
 8009762:	bd90      	pop	{r4, r7, pc}
 8009764:	40002800 	.word	0x40002800
 8009768:	40021000 	.word	0x40021000

0800976c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a12      	ldr	r2, [pc, #72]	@ (80097c4 <HAL_TIM_Base_MspInit+0x58>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d10c      	bne.n	8009798 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800977e:	4b12      	ldr	r3, [pc, #72]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 8009780:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009782:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 8009784:	2102      	movs	r1, #2
 8009786:	430a      	orrs	r2, r1
 8009788:	659a      	str	r2, [r3, #88]	@ 0x58
 800978a:	4b0f      	ldr	r3, [pc, #60]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 800978c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978e:	2202      	movs	r2, #2
 8009790:	4013      	ands	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8009796:	e010      	b.n	80097ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a0b      	ldr	r2, [pc, #44]	@ (80097cc <HAL_TIM_Base_MspInit+0x60>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d10b      	bne.n	80097ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80097a2:	4b09      	ldr	r3, [pc, #36]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 80097a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80097a6:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 80097a8:	2110      	movs	r1, #16
 80097aa:	430a      	orrs	r2, r1
 80097ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80097ae:	4b06      	ldr	r3, [pc, #24]	@ (80097c8 <HAL_TIM_Base_MspInit+0x5c>)
 80097b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b2:	2210      	movs	r2, #16
 80097b4:	4013      	ands	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]
 80097b8:	68bb      	ldr	r3, [r7, #8]
}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	46bd      	mov	sp, r7
 80097be:	b004      	add	sp, #16
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	40000400 	.word	0x40000400
 80097c8:	40021000 	.word	0x40021000
 80097cc:	40001000 	.word	0x40001000

080097d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b089      	sub	sp, #36	@ 0x24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097d8:	240c      	movs	r4, #12
 80097da:	193b      	adds	r3, r7, r4
 80097dc:	0018      	movs	r0, r3
 80097de:	2314      	movs	r3, #20
 80097e0:	001a      	movs	r2, r3
 80097e2:	2100      	movs	r1, #0
 80097e4:	f00e ffb4 	bl	8018750 <memset>
  if(htim->Instance==TIM3)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a14      	ldr	r2, [pc, #80]	@ (8009840 <HAL_TIM_MspPostInit+0x70>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d121      	bne.n	8009836 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097f2:	4b14      	ldr	r3, [pc, #80]	@ (8009844 <HAL_TIM_MspPostInit+0x74>)
 80097f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097f6:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <HAL_TIM_MspPostInit+0x74>)
 80097f8:	2104      	movs	r1, #4
 80097fa:	430a      	orrs	r2, r1
 80097fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80097fe:	4b11      	ldr	r3, [pc, #68]	@ (8009844 <HAL_TIM_MspPostInit+0x74>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009802:	2204      	movs	r2, #4
 8009804:	4013      	ands	r3, r2
 8009806:	60bb      	str	r3, [r7, #8]
 8009808:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800980a:	0021      	movs	r1, r4
 800980c:	187b      	adds	r3, r7, r1
 800980e:	2280      	movs	r2, #128	@ 0x80
 8009810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009812:	187b      	adds	r3, r7, r1
 8009814:	2202      	movs	r2, #2
 8009816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009818:	187b      	adds	r3, r7, r1
 800981a:	2200      	movs	r2, #0
 800981c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981e:	187b      	adds	r3, r7, r1
 8009820:	2200      	movs	r2, #0
 8009822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009824:	187b      	adds	r3, r7, r1
 8009826:	2202      	movs	r2, #2
 8009828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800982a:	187b      	adds	r3, r7, r1
 800982c:	4a06      	ldr	r2, [pc, #24]	@ (8009848 <HAL_TIM_MspPostInit+0x78>)
 800982e:	0019      	movs	r1, r3
 8009830:	0010      	movs	r0, r2
 8009832:	f007 f9c9 	bl	8010bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009836:	46c0      	nop			@ (mov r8, r8)
 8009838:	46bd      	mov	sp, r7
 800983a:	b009      	add	sp, #36	@ 0x24
 800983c:	bd90      	pop	{r4, r7, pc}
 800983e:	46c0      	nop			@ (mov r8, r8)
 8009840:	40000400 	.word	0x40000400
 8009844:	40021000 	.word	0x40021000
 8009848:	50000800 	.word	0x50000800

0800984c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800984c:	b590      	push	{r4, r7, lr}
 800984e:	b09d      	sub	sp, #116	@ 0x74
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009854:	235c      	movs	r3, #92	@ 0x5c
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	0018      	movs	r0, r3
 800985a:	2314      	movs	r3, #20
 800985c:	001a      	movs	r2, r3
 800985e:	2100      	movs	r1, #0
 8009860:	f00e ff76 	bl	8018750 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009864:	2418      	movs	r4, #24
 8009866:	193b      	adds	r3, r7, r4
 8009868:	0018      	movs	r0, r3
 800986a:	2344      	movs	r3, #68	@ 0x44
 800986c:	001a      	movs	r2, r3
 800986e:	2100      	movs	r1, #0
 8009870:	f00e ff6e 	bl	8018750 <memset>
  if(huart->Instance==USART2)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4aa0      	ldr	r2, [pc, #640]	@ (8009afc <HAL_UART_MspInit+0x2b0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d000      	beq.n	8009880 <HAL_UART_MspInit+0x34>
 800987e:	e09a      	b.n	80099b6 <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009880:	193b      	adds	r3, r7, r4
 8009882:	2202      	movs	r2, #2
 8009884:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009886:	193b      	adds	r3, r7, r4
 8009888:	2200      	movs	r2, #0
 800988a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800988c:	193b      	adds	r3, r7, r4
 800988e:	0018      	movs	r0, r3
 8009890:	f00a fc9a 	bl	80141c8 <HAL_RCCEx_PeriphCLKConfig>
 8009894:	1e03      	subs	r3, r0, #0
 8009896:	d001      	beq.n	800989c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8009898:	f7fe fc52 	bl	8008140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800989c:	4b98      	ldr	r3, [pc, #608]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 800989e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098a0:	4b97      	ldr	r3, [pc, #604]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80098a2:	2180      	movs	r1, #128	@ 0x80
 80098a4:	0289      	lsls	r1, r1, #10
 80098a6:	430a      	orrs	r2, r1
 80098a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80098aa:	4b95      	ldr	r3, [pc, #596]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80098ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098ae:	2380      	movs	r3, #128	@ 0x80
 80098b0:	029b      	lsls	r3, r3, #10
 80098b2:	4013      	ands	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098b8:	4b91      	ldr	r3, [pc, #580]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80098ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098bc:	4b90      	ldr	r3, [pc, #576]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80098be:	2101      	movs	r1, #1
 80098c0:	430a      	orrs	r2, r1
 80098c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80098c4:	4b8e      	ldr	r3, [pc, #568]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80098c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098c8:	2201      	movs	r2, #1
 80098ca:	4013      	ands	r3, r2
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80098d0:	215c      	movs	r1, #92	@ 0x5c
 80098d2:	187b      	adds	r3, r7, r1
 80098d4:	220c      	movs	r2, #12
 80098d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d8:	187b      	adds	r3, r7, r1
 80098da:	2202      	movs	r2, #2
 80098dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098de:	187b      	adds	r3, r7, r1
 80098e0:	2200      	movs	r2, #0
 80098e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098e4:	187b      	adds	r3, r7, r1
 80098e6:	2200      	movs	r2, #0
 80098e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80098ea:	187b      	adds	r3, r7, r1
 80098ec:	2207      	movs	r2, #7
 80098ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098f0:	187a      	adds	r2, r7, r1
 80098f2:	23a0      	movs	r3, #160	@ 0xa0
 80098f4:	05db      	lsls	r3, r3, #23
 80098f6:	0011      	movs	r1, r2
 80098f8:	0018      	movs	r0, r3
 80098fa:	f007 f965 	bl	8010bc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80098fe:	4b81      	ldr	r3, [pc, #516]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009900:	4a81      	ldr	r2, [pc, #516]	@ (8009b08 <HAL_UART_MspInit+0x2bc>)
 8009902:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8009904:	4b7f      	ldr	r3, [pc, #508]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009906:	2247      	movs	r2, #71	@ 0x47
 8009908:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800990a:	4b7e      	ldr	r3, [pc, #504]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009910:	4b7c      	ldr	r3, [pc, #496]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009912:	2200      	movs	r2, #0
 8009914:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009916:	4b7b      	ldr	r3, [pc, #492]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009918:	2280      	movs	r2, #128	@ 0x80
 800991a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800991c:	4b79      	ldr	r3, [pc, #484]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 800991e:	2200      	movs	r2, #0
 8009920:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009922:	4b78      	ldr	r3, [pc, #480]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009924:	2200      	movs	r2, #0
 8009926:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009928:	4b76      	ldr	r3, [pc, #472]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 800992a:	2200      	movs	r2, #0
 800992c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800992e:	4b75      	ldr	r3, [pc, #468]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009930:	2200      	movs	r2, #0
 8009932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009934:	4b73      	ldr	r3, [pc, #460]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 8009936:	0018      	movs	r0, r3
 8009938:	f006 f9f8 	bl	800fd2c <HAL_DMA_Init>
 800993c:	1e03      	subs	r3, r0, #0
 800993e:	d001      	beq.n	8009944 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8009940:	f7fe fbfe 	bl	8008140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2180      	movs	r1, #128	@ 0x80
 8009948:	4a6e      	ldr	r2, [pc, #440]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 800994a:	505a      	str	r2, [r3, r1]
 800994c:	4b6d      	ldr	r3, [pc, #436]	@ (8009b04 <HAL_UART_MspInit+0x2b8>)
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8009952:	4b6e      	ldr	r3, [pc, #440]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009954:	4a6e      	ldr	r2, [pc, #440]	@ (8009b10 <HAL_UART_MspInit+0x2c4>)
 8009956:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009958:	4b6c      	ldr	r3, [pc, #432]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 800995a:	2248      	movs	r2, #72	@ 0x48
 800995c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800995e:	4b6b      	ldr	r3, [pc, #428]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009960:	2210      	movs	r2, #16
 8009962:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009964:	4b69      	ldr	r3, [pc, #420]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009966:	2200      	movs	r2, #0
 8009968:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800996a:	4b68      	ldr	r3, [pc, #416]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 800996c:	2280      	movs	r2, #128	@ 0x80
 800996e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009970:	4b66      	ldr	r3, [pc, #408]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009972:	2200      	movs	r2, #0
 8009974:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009976:	4b65      	ldr	r3, [pc, #404]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009978:	2200      	movs	r2, #0
 800997a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800997c:	4b63      	ldr	r3, [pc, #396]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 800997e:	2200      	movs	r2, #0
 8009980:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009982:	4b62      	ldr	r3, [pc, #392]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 8009984:	2200      	movs	r2, #0
 8009986:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009988:	4b60      	ldr	r3, [pc, #384]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 800998a:	0018      	movs	r0, r3
 800998c:	f006 f9ce 	bl	800fd2c <HAL_DMA_Init>
 8009990:	1e03      	subs	r3, r0, #0
 8009992:	d001      	beq.n	8009998 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8009994:	f7fe fbd4 	bl	8008140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a5c      	ldr	r2, [pc, #368]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 800999c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800999e:	4b5b      	ldr	r3, [pc, #364]	@ (8009b0c <HAL_UART_MspInit+0x2c0>)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	201c      	movs	r0, #28
 80099aa:	f006 f97d 	bl	800fca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80099ae:	201c      	movs	r0, #28
 80099b0:	f006 f98f 	bl	800fcd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80099b4:	e09e      	b.n	8009af4 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a56      	ldr	r2, [pc, #344]	@ (8009b14 <HAL_UART_MspInit+0x2c8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d000      	beq.n	80099c2 <HAL_UART_MspInit+0x176>
 80099c0:	e098      	b.n	8009af4 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 80099c2:	2118      	movs	r1, #24
 80099c4:	187b      	adds	r3, r7, r1
 80099c6:	2280      	movs	r2, #128	@ 0x80
 80099c8:	0292      	lsls	r2, r2, #10
 80099ca:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099cc:	187b      	adds	r3, r7, r1
 80099ce:	0018      	movs	r0, r3
 80099d0:	f00a fbfa 	bl	80141c8 <HAL_RCCEx_PeriphCLKConfig>
 80099d4:	1e03      	subs	r3, r0, #0
 80099d6:	d001      	beq.n	80099dc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80099d8:	f7fe fbb2 	bl	8008140 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 80099dc:	4b48      	ldr	r3, [pc, #288]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80099de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099e0:	4b47      	ldr	r3, [pc, #284]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80099e2:	2180      	movs	r1, #128	@ 0x80
 80099e4:	0309      	lsls	r1, r1, #12
 80099e6:	430a      	orrs	r2, r1
 80099e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80099ea:	4b45      	ldr	r3, [pc, #276]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80099ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099ee:	2380      	movs	r3, #128	@ 0x80
 80099f0:	031b      	lsls	r3, r3, #12
 80099f2:	4013      	ands	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099f8:	4b41      	ldr	r3, [pc, #260]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80099fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099fc:	4b40      	ldr	r3, [pc, #256]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 80099fe:	2101      	movs	r1, #1
 8009a00:	430a      	orrs	r2, r1
 8009a02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009a04:	4b3e      	ldr	r3, [pc, #248]	@ (8009b00 <HAL_UART_MspInit+0x2b4>)
 8009a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009a10:	215c      	movs	r1, #92	@ 0x5c
 8009a12:	187b      	adds	r3, r7, r1
 8009a14:	2203      	movs	r2, #3
 8009a16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a18:	187b      	adds	r3, r7, r1
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a1e:	187b      	adds	r3, r7, r1
 8009a20:	2200      	movs	r2, #0
 8009a22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a24:	187b      	adds	r3, r7, r1
 8009a26:	2200      	movs	r2, #0
 8009a28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 8009a2a:	187b      	adds	r3, r7, r1
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a30:	187a      	adds	r2, r7, r1
 8009a32:	23a0      	movs	r3, #160	@ 0xa0
 8009a34:	05db      	lsls	r3, r3, #23
 8009a36:	0011      	movs	r1, r2
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f007 f8c5 	bl	8010bc8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8009a3e:	4b36      	ldr	r3, [pc, #216]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a40:	4a36      	ldr	r2, [pc, #216]	@ (8009b1c <HAL_UART_MspInit+0x2d0>)
 8009a42:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8009a44:	4b34      	ldr	r3, [pc, #208]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a46:	224b      	movs	r2, #75	@ 0x4b
 8009a48:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a4a:	4b33      	ldr	r3, [pc, #204]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a50:	4b31      	ldr	r3, [pc, #196]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009a56:	4b30      	ldr	r3, [pc, #192]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a58:	2280      	movs	r2, #128	@ 0x80
 8009a5a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a62:	4b2d      	ldr	r3, [pc, #180]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8009a68:	4b2b      	ldr	r3, [pc, #172]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009a74:	4b28      	ldr	r3, [pc, #160]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a76:	0018      	movs	r0, r3
 8009a78:	f006 f958 	bl	800fd2c <HAL_DMA_Init>
 8009a7c:	1e03      	subs	r3, r0, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8009a80:	f7fe fb5e 	bl	8008140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2180      	movs	r1, #128	@ 0x80
 8009a88:	4a23      	ldr	r2, [pc, #140]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a8a:	505a      	str	r2, [r3, r1]
 8009a8c:	4b22      	ldr	r3, [pc, #136]	@ (8009b18 <HAL_UART_MspInit+0x2cc>)
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 8009a92:	4b23      	ldr	r3, [pc, #140]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009a94:	4a23      	ldr	r2, [pc, #140]	@ (8009b24 <HAL_UART_MspInit+0x2d8>)
 8009a96:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 8009a98:	4b21      	ldr	r3, [pc, #132]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009a9a:	224c      	movs	r2, #76	@ 0x4c
 8009a9c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a9e:	4b20      	ldr	r3, [pc, #128]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009aa0:	2210      	movs	r2, #16
 8009aa2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009aac:	2280      	movs	r2, #128	@ 0x80
 8009aae:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009abc:	4b18      	ldr	r3, [pc, #96]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009ac2:	4b17      	ldr	r3, [pc, #92]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009ac8:	4b15      	ldr	r3, [pc, #84]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009aca:	0018      	movs	r0, r3
 8009acc:	f006 f92e 	bl	800fd2c <HAL_DMA_Init>
 8009ad0:	1e03      	subs	r3, r0, #0
 8009ad2:	d001      	beq.n	8009ad8 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 8009ad4:	f7fe fb34 	bl	8008140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a11      	ldr	r2, [pc, #68]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009adc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009ade:	4b10      	ldr	r3, [pc, #64]	@ (8009b20 <HAL_UART_MspInit+0x2d4>)
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	201e      	movs	r0, #30
 8009aea:	f006 f8dd 	bl	800fca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 8009aee:	201e      	movs	r0, #30
 8009af0:	f006 f8ef 	bl	800fcd2 <HAL_NVIC_EnableIRQ>
}
 8009af4:	46c0      	nop			@ (mov r8, r8)
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b01d      	add	sp, #116	@ 0x74
 8009afa:	bd90      	pop	{r4, r7, pc}
 8009afc:	40004400 	.word	0x40004400
 8009b00:	40021000 	.word	0x40021000
 8009b04:	200007a0 	.word	0x200007a0
 8009b08:	40020058 	.word	0x40020058
 8009b0c:	20000800 	.word	0x20000800
 8009b10:	40020044 	.word	0x40020044
 8009b14:	40004c00 	.word	0x40004c00
 8009b18:	20000860 	.word	0x20000860
 8009b1c:	4002001c 	.word	0x4002001c
 8009b20:	200008c0 	.word	0x200008c0
 8009b24:	40020030 	.word	0x40020030

08009b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009b2c:	46c0      	nop			@ (mov r8, r8)
 8009b2e:	e7fd      	b.n	8009b2c <NMI_Handler+0x4>

08009b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b34:	46c0      	nop			@ (mov r8, r8)
 8009b36:	e7fd      	b.n	8009b34 <HardFault_Handler+0x4>

08009b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b3c:	46c0      	nop			@ (mov r8, r8)
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b46:	46c0      	nop			@ (mov r8, r8)
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b50:	f004 fe54 	bl	800e7fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b54:	46c0      	nop			@ (mov r8, r8)
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8009b60:	4b03      	ldr	r3, [pc, #12]	@ (8009b70 <RTC_TAMP_IRQHandler+0x14>)
 8009b62:	0018      	movs	r0, r3
 8009b64:	f00b ff82 	bl	8015a6c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8009b68:	46c0      	nop			@ (mov r8, r8)
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	46c0      	nop			@ (mov r8, r8)
 8009b70:	200005b0 	.word	0x200005b0

08009b74 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8009b78:	2380      	movs	r3, #128	@ 0x80
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	f007 facd 	bl	801111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009b82:	46c0      	nop			@ (mov r8, r8)
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8009b8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ba4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f006 fb5e 	bl	8010250 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8009b94:	4b04      	ldr	r3, [pc, #16]	@ (8009ba8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8009b96:	0018      	movs	r0, r3
 8009b98:	f006 fb5a 	bl	8010250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009b9c:	46c0      	nop			@ (mov r8, r8)
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	46c0      	nop			@ (mov r8, r8)
 8009ba4:	20000860 	.word	0x20000860
 8009ba8:	200008c0 	.word	0x200008c0

08009bac <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009bb0:	4b09      	ldr	r3, [pc, #36]	@ (8009bd8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f006 fb4c 	bl	8010250 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009bb8:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f006 fb48 	bl	8010250 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009bc0:	4b07      	ldr	r3, [pc, #28]	@ (8009be0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f006 fb44 	bl	8010250 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009bc8:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 8009bca:	0018      	movs	r0, r3
 8009bcc:	f006 fb40 	bl	8010250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 8009bd0:	46c0      	nop			@ (mov r8, r8)
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	46c0      	nop			@ (mov r8, r8)
 8009bd8:	20000800 	.word	0x20000800
 8009bdc:	200007a0 	.word	0x200007a0
 8009be0:	2000053c 	.word	0x2000053c
 8009be4:	200004dc 	.word	0x200004dc

08009be8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8009bec:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <I2C1_IRQHandler+0x2c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	23e0      	movs	r3, #224	@ 0xe0
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	d004      	beq.n	8009c04 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8009bfa:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <I2C1_IRQHandler+0x2c>)
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f007 fdc7 	bl	8011790 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8009c02:	e003      	b.n	8009c0c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8009c04:	4b03      	ldr	r3, [pc, #12]	@ (8009c14 <I2C1_IRQHandler+0x2c>)
 8009c06:	0018      	movs	r0, r3
 8009c08:	f007 fda8 	bl	801175c <HAL_I2C_EV_IRQHandler>
}
 8009c0c:	46c0      	nop			@ (mov r8, r8)
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	46c0      	nop			@ (mov r8, r8)
 8009c14:	20000488 	.word	0x20000488

08009c18 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009c1c:	4b03      	ldr	r3, [pc, #12]	@ (8009c2c <USART2_LPUART2_IRQHandler+0x14>)
 8009c1e:	0018      	movs	r0, r3
 8009c20:	f00d f992 	bl	8016f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8009c24:	46c0      	nop			@ (mov r8, r8)
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	46c0      	nop			@ (mov r8, r8)
 8009c2c:	20000678 	.word	0x20000678

08009c30 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009c34:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <USART4_LPUART3_IRQHandler+0x14>)
 8009c36:	0018      	movs	r0, r3
 8009c38:	f00d f986 	bl	8016f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 8009c3c:	46c0      	nop			@ (mov r8, r8)
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	46c0      	nop			@ (mov r8, r8)
 8009c44:	2000070c 	.word	0x2000070c

08009c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009c50:	4a14      	ldr	r2, [pc, #80]	@ (8009ca4 <_sbrk+0x5c>)
 8009c52:	4b15      	ldr	r3, [pc, #84]	@ (8009ca8 <_sbrk+0x60>)
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009c5c:	4b13      	ldr	r3, [pc, #76]	@ (8009cac <_sbrk+0x64>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009c64:	4b11      	ldr	r3, [pc, #68]	@ (8009cac <_sbrk+0x64>)
 8009c66:	4a12      	ldr	r2, [pc, #72]	@ (8009cb0 <_sbrk+0x68>)
 8009c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009c6a:	4b10      	ldr	r3, [pc, #64]	@ (8009cac <_sbrk+0x64>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d207      	bcs.n	8009c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009c78:	f00e fda8 	bl	80187cc <__errno>
 8009c7c:	0003      	movs	r3, r0
 8009c7e:	220c      	movs	r2, #12
 8009c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009c82:	2301      	movs	r3, #1
 8009c84:	425b      	negs	r3, r3
 8009c86:	e009      	b.n	8009c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009c88:	4b08      	ldr	r3, [pc, #32]	@ (8009cac <_sbrk+0x64>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009c8e:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <_sbrk+0x64>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	18d2      	adds	r2, r2, r3
 8009c96:	4b05      	ldr	r3, [pc, #20]	@ (8009cac <_sbrk+0x64>)
 8009c98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
}
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b006      	add	sp, #24
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20008000 	.word	0x20008000
 8009ca8:	00000400 	.word	0x00000400
 8009cac:	2000110c 	.word	0x2000110c
 8009cb0:	200012d0 	.word	0x200012d0

08009cb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009cba:	4b12      	ldr	r3, [pc, #72]	@ (8009d04 <SystemInit+0x50>)
 8009cbc:	2280      	movs	r2, #128	@ 0x80
 8009cbe:	0512      	lsls	r2, r2, #20
 8009cc0:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8009cc2:	4a11      	ldr	r2, [pc, #68]	@ (8009d08 <SystemInit+0x54>)
 8009cc4:	2380      	movs	r3, #128	@ 0x80
 8009cc6:	58d3      	ldr	r3, [r2, r3]
 8009cc8:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8009cca:	4b0f      	ldr	r3, [pc, #60]	@ (8009d08 <SystemInit+0x54>)
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	2380      	movs	r3, #128	@ 0x80
 8009cd4:	025b      	lsls	r3, r3, #9
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	d010      	beq.n	8009cfc <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	22ff      	movs	r2, #255	@ 0xff
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2bcc      	cmp	r3, #204	@ 0xcc
 8009ce2:	d00b      	beq.n	8009cfc <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	22ff      	movs	r2, #255	@ 0xff
 8009ce8:	4013      	ands	r3, r2
 8009cea:	2baa      	cmp	r3, #170	@ 0xaa
 8009cec:	d006      	beq.n	8009cfc <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8009cee:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <SystemInit+0x54>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b05      	ldr	r3, [pc, #20]	@ (8009d08 <SystemInit+0x54>)
 8009cf4:	2180      	movs	r1, #128	@ 0x80
 8009cf6:	02c9      	lsls	r1, r1, #11
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8009cfc:	46c0      	nop			@ (mov r8, r8)
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b002      	add	sp, #8
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	e000ed00 	.word	0xe000ed00
 8009d08:	40022000 	.word	0x40022000

08009d0c <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0


	cnttemp++;
 8009d12:	4bbb      	ldr	r3, [pc, #748]	@ (800a000 <temper+0x2f4>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	4bb9      	ldr	r3, [pc, #740]	@ (800a000 <temper+0x2f4>)
 8009d1c:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 8009d1e:	4bb8      	ldr	r3, [pc, #736]	@ (800a000 <temper+0x2f4>)
 8009d20:	781a      	ldrb	r2, [r3, #0]
 8009d22:	4bb8      	ldr	r3, [pc, #736]	@ (800a004 <temper+0x2f8>)
 8009d24:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 8009d26:	4bb7      	ldr	r3, [pc, #732]	@ (800a004 <temper+0x2f8>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b31      	cmp	r3, #49	@ 0x31
 8009d2c:	d801      	bhi.n	8009d32 <temper+0x26>
 8009d2e:	f000 fcb7 	bl	800a6a0 <temper+0x994>
		goto tempe05;  // Sí no tomes muestras
 8009d32:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 8009d34:	4bb4      	ldr	r3, [pc, #720]	@ (800a008 <temper+0x2fc>)
 8009d36:	0018      	movs	r0, r3
 8009d38:	f7fb f8e1 	bl	8004efe <decwreg>
		decwreg(&retcncfe);
 8009d3c:	4bb3      	ldr	r3, [pc, #716]	@ (800a00c <temper+0x300>)
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f7fb f8dd 	bl	8004efe <decwreg>
		decwreg(&retcncfr);
 8009d44:	4bb2      	ldr	r3, [pc, #712]	@ (800a010 <temper+0x304>)
 8009d46:	0018      	movs	r0, r3
 8009d48:	f7fb f8d9 	bl	8004efe <decwreg>
		decwreg(&retcncfc);
 8009d4c:	4bb1      	ldr	r3, [pc, #708]	@ (800a014 <temper+0x308>)
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f7fb f8d5 	bl	8004efe <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 8009d54:	4baa      	ldr	r3, [pc, #680]	@ (800a000 <temper+0x2f4>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 8009d5a:	4baf      	ldr	r3, [pc, #700]	@ (800a018 <temper+0x30c>)
 8009d5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d5e:	4bae      	ldr	r3, [pc, #696]	@ (800a018 <temper+0x30c>)
 8009d60:	2280      	movs	r2, #128	@ 0x80
 8009d62:	01d2      	lsls	r2, r2, #7
 8009d64:	400a      	ands	r2, r1
 8009d66:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 8009d68:	4bab      	ldr	r3, [pc, #684]	@ (800a018 <temper+0x30c>)
 8009d6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d6c:	4baa      	ldr	r3, [pc, #680]	@ (800a018 <temper+0x30c>)
 8009d6e:	2280      	movs	r2, #128	@ 0x80
 8009d70:	00d2      	lsls	r2, r2, #3
 8009d72:	400a      	ands	r2, r1
 8009d74:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 8009d76:	4ba8      	ldr	r3, [pc, #672]	@ (800a018 <temper+0x30c>)
 8009d78:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d7a:	4ba7      	ldr	r3, [pc, #668]	@ (800a018 <temper+0x30c>)
 8009d7c:	2280      	movs	r2, #128	@ 0x80
 8009d7e:	02d2      	lsls	r2, r2, #11
 8009d80:	400a      	ands	r2, r1
 8009d82:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 8009d84:	4ba4      	ldr	r3, [pc, #656]	@ (800a018 <temper+0x30c>)
 8009d86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d88:	4ba3      	ldr	r3, [pc, #652]	@ (800a018 <temper+0x30c>)
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 8009d90:	f000 fe3e 	bl	800aa10 <capturaAD>
//lookshort_S4:
		Y_A();
 8009d94:	f000 feac 	bl	800aaf0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 8009d98:	4b9a      	ldr	r3, [pc, #616]	@ (800a004 <temper+0x2f8>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d005      	beq.n	8009dac <temper+0xa0>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 8009da0:	4b9e      	ldr	r3, [pc, #632]	@ (800a01c <temper+0x310>)
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	4a9e      	ldr	r2, [pc, #632]	@ (800a020 <temper+0x314>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d808      	bhi.n	8009dbc <temper+0xb0>
			goto lookopen_S04;          // No, revise límite inferior
 8009daa:	e010      	b.n	8009dce <temper+0xc2>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 8009dac:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 8009dae:	4b9b      	ldr	r3, [pc, #620]	@ (800a01c <temper+0x310>)
 8009db0:	881a      	ldrh	r2, [r3, #0]
 8009db2:	23e2      	movs	r3, #226	@ 0xe2
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d308      	bcc.n	8009dcc <temper+0xc0>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 8009dba:	e000      	b.n	8009dbe <temper+0xb2>
		goto sens_short_S04;
 8009dbc:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 8009dbe:	4999      	ldr	r1, [pc, #612]	@ (800a024 <temper+0x318>)
 8009dc0:	4899      	ldr	r0, [pc, #612]	@ (800a028 <temper+0x31c>)
 8009dc2:	2307      	movs	r3, #7
 8009dc4:	2205      	movs	r2, #5
 8009dc6:	f000 fea9 	bl	800ab1c <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 8009dca:	e01c      	b.n	8009e06 <temper+0xfa>
			goto lookopen_S04;          // No, revise límite inferior
 8009dcc:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 8009dce:	4b97      	ldr	r3, [pc, #604]	@ (800a02c <temper+0x320>)
 8009dd0:	781a      	ldrb	r2, [r3, #0]
 8009dd2:	4b8c      	ldr	r3, [pc, #560]	@ (800a004 <temper+0x2f8>)
 8009dd4:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 8009dd6:	4b8b      	ldr	r3, [pc, #556]	@ (800a004 <temper+0x2f8>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d004      	beq.n	8009de8 <temper+0xdc>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 8009dde:	4b8f      	ldr	r3, [pc, #572]	@ (800a01c <temper+0x310>)
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009de4:	d908      	bls.n	8009df8 <temper+0xec>
			goto sens_ok_S04;     // Sí, indica sensor OK
 8009de6:	e013      	b.n	8009e10 <temper+0x104>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 8009de8:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 8009dea:	4b8c      	ldr	r3, [pc, #560]	@ (800a01c <temper+0x310>)
 8009dec:	881a      	ldrh	r2, [r3, #0]
 8009dee:	23d7      	movs	r3, #215	@ 0xd7
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d20b      	bcs.n	8009e0e <temper+0x102>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 8009df6:	e000      	b.n	8009dfa <temper+0xee>
		goto sens_open_S04;
 8009df8:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 8009dfa:	498b      	ldr	r1, [pc, #556]	@ (800a028 <temper+0x31c>)
 8009dfc:	4889      	ldr	r0, [pc, #548]	@ (800a024 <temper+0x318>)
 8009dfe:	2305      	movs	r3, #5
 8009e00:	2207      	movs	r2, #7
 8009e02:	f000 fe8b 	bl	800ab1c <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 8009e06:	4b83      	ldr	r3, [pc, #524]	@ (800a014 <temper+0x308>)
 8009e08:	220f      	movs	r2, #15
 8009e0a:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 8009e0c:	e010      	b.n	8009e30 <temper+0x124>
			goto sens_ok_S04;     // Sí, indica sensor OK
 8009e0e:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 8009e10:	4b80      	ldr	r3, [pc, #512]	@ (800a014 <temper+0x308>)
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	4b7b      	ldr	r3, [pc, #492]	@ (800a004 <temper+0x2f8>)
 8009e16:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 8009e18:	4b7a      	ldr	r3, [pc, #488]	@ (800a004 <temper+0x2f8>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d106      	bne.n	8009e2e <temper+0x122>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 8009e20:	4980      	ldr	r1, [pc, #512]	@ (800a024 <temper+0x318>)
 8009e22:	4881      	ldr	r0, [pc, #516]	@ (800a028 <temper+0x31c>)
 8009e24:	2307      	movs	r3, #7
 8009e26:	2205      	movs	r2, #5
 8009e28:	f000 fe93 	bl	800ab52 <Bclear_Clear_trfst>
 8009e2c:	e000      	b.n	8009e30 <temper+0x124>
			goto tempeLoad_s04;
 8009e2e:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 8009e30:	4b7f      	ldr	r3, [pc, #508]	@ (800a030 <temper+0x324>)
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	001a      	movs	r2, r3
 8009e36:	4b7f      	ldr	r3, [pc, #508]	@ (800a034 <temper+0x328>)
 8009e38:	8819      	ldrh	r1, [r3, #0]
 8009e3a:	4b7f      	ldr	r3, [pc, #508]	@ (800a038 <temper+0x32c>)
 8009e3c:	0052      	lsls	r2, r2, #1
 8009e3e:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 8009e40:	4b75      	ldr	r3, [pc, #468]	@ (800a018 <temper+0x30c>)
 8009e42:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009e44:	4b74      	ldr	r3, [pc, #464]	@ (800a018 <temper+0x30c>)
 8009e46:	2280      	movs	r2, #128	@ 0x80
 8009e48:	00d2      	lsls	r2, r2, #3
 8009e4a:	400a      	ands	r2, r1
 8009e4c:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 8009e4e:	4b72      	ldr	r3, [pc, #456]	@ (800a018 <temper+0x30c>)
 8009e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e52:	4b71      	ldr	r3, [pc, #452]	@ (800a018 <temper+0x30c>)
 8009e54:	2101      	movs	r1, #1
 8009e56:	400a      	ands	r2, r1
 8009e58:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 8009e5a:	4b6f      	ldr	r3, [pc, #444]	@ (800a018 <temper+0x30c>)
 8009e5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009e5e:	4b6e      	ldr	r3, [pc, #440]	@ (800a018 <temper+0x30c>)
 8009e60:	2280      	movs	r2, #128	@ 0x80
 8009e62:	02d2      	lsls	r2, r2, #11
 8009e64:	400a      	ands	r2, r1
 8009e66:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 8009e68:	4b6b      	ldr	r3, [pc, #428]	@ (800a018 <temper+0x30c>)
 8009e6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e6c:	4b6a      	ldr	r3, [pc, #424]	@ (800a018 <temper+0x30c>)
 8009e6e:	2180      	movs	r1, #128	@ 0x80
 8009e70:	02c9      	lsls	r1, r1, #11
 8009e72:	430a      	orrs	r2, r1
 8009e74:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 8009e76:	f000 fdcb 	bl	800aa10 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 8009e7a:	f000 fe39 	bl	800aaf0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 8009e7e:	4b61      	ldr	r3, [pc, #388]	@ (800a004 <temper+0x2f8>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d005      	beq.n	8009e92 <temper+0x186>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 8009e86:	4b65      	ldr	r3, [pc, #404]	@ (800a01c <temper+0x310>)
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800a03c <temper+0x330>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d808      	bhi.n	8009ea2 <temper+0x196>
		goto lookopen_S03;      // No, revise límite inferior
 8009e90:	e010      	b.n	8009eb4 <temper+0x1a8>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 8009e92:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 8009e94:	4b61      	ldr	r3, [pc, #388]	@ (800a01c <temper+0x310>)
 8009e96:	881a      	ldrh	r2, [r3, #0]
 8009e98:	23e2      	movs	r3, #226	@ 0xe2
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d308      	bcc.n	8009eb2 <temper+0x1a6>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 8009ea0:	e000      	b.n	8009ea4 <temper+0x198>
	goto sens_short_S03;
 8009ea2:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 8009ea4:	495f      	ldr	r1, [pc, #380]	@ (800a024 <temper+0x318>)
 8009ea6:	485f      	ldr	r0, [pc, #380]	@ (800a024 <temper+0x318>)
 8009ea8:	2305      	movs	r3, #5
 8009eaa:	2204      	movs	r2, #4
 8009eac:	f000 fe36 	bl	800ab1c <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 8009eb0:	e01c      	b.n	8009eec <temper+0x1e0>
			goto lookopen_S03; // No, revise límite inferior
 8009eb2:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 8009eb4:	4b5d      	ldr	r3, [pc, #372]	@ (800a02c <temper+0x320>)
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	4b52      	ldr	r3, [pc, #328]	@ (800a004 <temper+0x2f8>)
 8009eba:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 8009ebc:	4b51      	ldr	r3, [pc, #324]	@ (800a004 <temper+0x2f8>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d004      	beq.n	8009ece <temper+0x1c2>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 8009ec4:	4b55      	ldr	r3, [pc, #340]	@ (800a01c <temper+0x310>)
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eca:	d908      	bls.n	8009ede <temper+0x1d2>
			goto sens_ok_S03;      // Sí, indica sensor OK
 8009ecc:	e013      	b.n	8009ef6 <temper+0x1ea>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 8009ece:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 8009ed0:	4b52      	ldr	r3, [pc, #328]	@ (800a01c <temper+0x310>)
 8009ed2:	881a      	ldrh	r2, [r3, #0]
 8009ed4:	23d7      	movs	r3, #215	@ 0xd7
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d20b      	bcs.n	8009ef4 <temper+0x1e8>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 8009edc:	e000      	b.n	8009ee0 <temper+0x1d4>
		goto sens_open_S03;
 8009ede:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 8009ee0:	4950      	ldr	r1, [pc, #320]	@ (800a024 <temper+0x318>)
 8009ee2:	4850      	ldr	r0, [pc, #320]	@ (800a024 <temper+0x318>)
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	2205      	movs	r2, #5
 8009ee8:	f000 fe18 	bl	800ab1c <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 8009eec:	4b48      	ldr	r3, [pc, #288]	@ (800a010 <temper+0x304>)
 8009eee:	220f      	movs	r2, #15
 8009ef0:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 8009ef2:	e010      	b.n	8009f16 <temper+0x20a>
			goto sens_ok_S03;      // Sí, indica sensor OK
 8009ef4:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 8009ef6:	4b46      	ldr	r3, [pc, #280]	@ (800a010 <temper+0x304>)
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	4b42      	ldr	r3, [pc, #264]	@ (800a004 <temper+0x2f8>)
 8009efc:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 8009efe:	4b41      	ldr	r3, [pc, #260]	@ (800a004 <temper+0x2f8>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d106      	bne.n	8009f14 <temper+0x208>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 8009f06:	4947      	ldr	r1, [pc, #284]	@ (800a024 <temper+0x318>)
 8009f08:	4846      	ldr	r0, [pc, #280]	@ (800a024 <temper+0x318>)
 8009f0a:	2305      	movs	r3, #5
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	f000 fe20 	bl	800ab52 <Bclear_Clear_trfst>
 8009f12:	e000      	b.n	8009f16 <temper+0x20a>
			goto tempeLoad_s03;
 8009f14:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 8009f16:	4b46      	ldr	r3, [pc, #280]	@ (800a030 <temper+0x324>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	001a      	movs	r2, r3
 8009f1c:	4b45      	ldr	r3, [pc, #276]	@ (800a034 <temper+0x328>)
 8009f1e:	8819      	ldrh	r1, [r3, #0]
 8009f20:	4b47      	ldr	r3, [pc, #284]	@ (800a040 <temper+0x334>)
 8009f22:	0052      	lsls	r2, r2, #1
 8009f24:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 8009f26:	4b3c      	ldr	r3, [pc, #240]	@ (800a018 <temper+0x30c>)
 8009f28:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009f2a:	4b3b      	ldr	r3, [pc, #236]	@ (800a018 <temper+0x30c>)
 8009f2c:	2280      	movs	r2, #128	@ 0x80
 8009f2e:	01d2      	lsls	r2, r2, #7
 8009f30:	400a      	ands	r2, r1
 8009f32:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 8009f34:	4b38      	ldr	r3, [pc, #224]	@ (800a018 <temper+0x30c>)
 8009f36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f38:	4b37      	ldr	r3, [pc, #220]	@ (800a018 <temper+0x30c>)
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	400a      	ands	r2, r1
 8009f3e:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 8009f40:	4b35      	ldr	r3, [pc, #212]	@ (800a018 <temper+0x30c>)
 8009f42:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009f44:	4b34      	ldr	r3, [pc, #208]	@ (800a018 <temper+0x30c>)
 8009f46:	2280      	movs	r2, #128	@ 0x80
 8009f48:	02d2      	lsls	r2, r2, #11
 8009f4a:	400a      	ands	r2, r1
 8009f4c:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 8009f4e:	4b32      	ldr	r3, [pc, #200]	@ (800a018 <temper+0x30c>)
 8009f50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f52:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <temper+0x30c>)
 8009f54:	2180      	movs	r1, #128	@ 0x80
 8009f56:	00c9      	lsls	r1, r1, #3
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 8009f5c:	f000 fd58 	bl	800aa10 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 8009f60:	f000 fdc6 	bl	800aaf0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 8009f64:	4b27      	ldr	r3, [pc, #156]	@ (800a004 <temper+0x2f8>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d005      	beq.n	8009f78 <temper+0x26c>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 8009f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800a01c <temper+0x310>)
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	4a32      	ldr	r2, [pc, #200]	@ (800a03c <temper+0x330>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d808      	bhi.n	8009f88 <temper+0x27c>
			goto lookopen;     // No, revise límite inferior
 8009f76:	e010      	b.n	8009f9a <temper+0x28e>
			goto cmp_man_01;   // En autoprueba deja estos límites
 8009f78:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 8009f7a:	4b28      	ldr	r3, [pc, #160]	@ (800a01c <temper+0x310>)
 8009f7c:	881a      	ldrh	r2, [r3, #0]
 8009f7e:	23e2      	movs	r3, #226	@ 0xe2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d308      	bcc.n	8009f98 <temper+0x28c>
			goto lookopen;     // No, revise límite inferior

sens_short:
 8009f86:	e000      	b.n	8009f8a <temper+0x27e>
		goto sens_short;
 8009f88:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 8009f8a:	4927      	ldr	r1, [pc, #156]	@ (800a028 <temper+0x31c>)
 8009f8c:	4826      	ldr	r0, [pc, #152]	@ (800a028 <temper+0x31c>)
 8009f8e:	2301      	movs	r3, #1
 8009f90:	2200      	movs	r2, #0
 8009f92:	f000 fdc3 	bl	800ab1c <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 8009f96:	e01c      	b.n	8009fd2 <temper+0x2c6>
			goto lookopen;     // No, revise límite inferior
 8009f98:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 8009f9a:	4b24      	ldr	r3, [pc, #144]	@ (800a02c <temper+0x320>)
 8009f9c:	781a      	ldrb	r2, [r3, #0]
 8009f9e:	4b19      	ldr	r3, [pc, #100]	@ (800a004 <temper+0x2f8>)
 8009fa0:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 8009fa2:	4b18      	ldr	r3, [pc, #96]	@ (800a004 <temper+0x2f8>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d004      	beq.n	8009fb4 <temper+0x2a8>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 8009faa:	4b1c      	ldr	r3, [pc, #112]	@ (800a01c <temper+0x310>)
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fb0:	d908      	bls.n	8009fc4 <temper+0x2b8>
			goto sens_ok;       // Sí, indica sensor OK
 8009fb2:	e016      	b.n	8009fe2 <temper+0x2d6>
			goto cmp_man_02;    // En autoprueba deja estos límites
 8009fb4:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 8009fb6:	4b19      	ldr	r3, [pc, #100]	@ (800a01c <temper+0x310>)
 8009fb8:	881a      	ldrh	r2, [r3, #0]
 8009fba:	23d7      	movs	r3, #215	@ 0xd7
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d20e      	bcs.n	8009fe0 <temper+0x2d4>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 8009fc2:	e000      	b.n	8009fc6 <temper+0x2ba>
		goto sens_open;
 8009fc4:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 8009fc6:	4918      	ldr	r1, [pc, #96]	@ (800a028 <temper+0x31c>)
 8009fc8:	4817      	ldr	r0, [pc, #92]	@ (800a028 <temper+0x31c>)
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f000 fda5 	bl	800ab1c <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	@ (800a008 <temper+0x2fc>)
 8009fd4:	220f      	movs	r2, #15
 8009fd6:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	@ (800a044 <temper+0x338>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 8009fde:	e034      	b.n	800a04a <temper+0x33e>
			goto sens_ok;       // Sí, indica sensor OK
 8009fe0:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 8009fe2:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <temper+0x2fc>)
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	4b07      	ldr	r3, [pc, #28]	@ (800a004 <temper+0x2f8>)
 8009fe8:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 8009fea:	4b06      	ldr	r3, [pc, #24]	@ (800a004 <temper+0x2f8>)
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d12a      	bne.n	800a048 <temper+0x33c>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 8009ff2:	490d      	ldr	r1, [pc, #52]	@ (800a028 <temper+0x31c>)
 8009ff4:	480c      	ldr	r0, [pc, #48]	@ (800a028 <temper+0x31c>)
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f000 fdaa 	bl	800ab52 <Bclear_Clear_trfst>
 8009ffe:	e024      	b.n	800a04a <temper+0x33e>
 800a000:	20000bdf 	.word	0x20000bdf
 800a004:	20001152 	.word	0x20001152
 800a008:	20000be4 	.word	0x20000be4
 800a00c:	20000be5 	.word	0x20000be5
 800a010:	20000c72 	.word	0x20000c72
 800a014:	20000c73 	.word	0x20000c73
 800a018:	40012400 	.word	0x40012400
 800a01c:	20001154 	.word	0x20001154
 800a020:	000003ad 	.word	0x000003ad
 800a024:	20000ba0 	.word	0x20000ba0
 800a028:	20000ba8 	.word	0x20000ba8
 800a02c:	20000bb8 	.word	0x20000bb8
 800a030:	20000be0 	.word	0x20000be0
 800a034:	20000b80 	.word	0x20000b80
 800a038:	20001110 	.word	0x20001110
 800a03c:	000003b5 	.word	0x000003b5
 800a040:	20001120 	.word	0x20001120
 800a044:	20000be7 	.word	0x20000be7
			goto tempe13;
 800a048:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800a04a:	4bcd      	ldr	r3, [pc, #820]	@ (800a380 <temper+0x674>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	001a      	movs	r2, r3
 800a050:	4bcc      	ldr	r3, [pc, #816]	@ (800a384 <temper+0x678>)
 800a052:	8819      	ldrh	r1, [r3, #0]
 800a054:	4bcc      	ldr	r3, [pc, #816]	@ (800a388 <temper+0x67c>)
 800a056:	0052      	lsls	r2, r2, #1
 800a058:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a05a:	4bcc      	ldr	r3, [pc, #816]	@ (800a38c <temper+0x680>)
 800a05c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a05e:	4bcb      	ldr	r3, [pc, #812]	@ (800a38c <temper+0x680>)
 800a060:	2280      	movs	r2, #128	@ 0x80
 800a062:	00d2      	lsls	r2, r2, #3
 800a064:	400a      	ands	r2, r1
 800a066:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a068:	4bc8      	ldr	r3, [pc, #800]	@ (800a38c <temper+0x680>)
 800a06a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a06c:	4bc7      	ldr	r3, [pc, #796]	@ (800a38c <temper+0x680>)
 800a06e:	2101      	movs	r1, #1
 800a070:	400a      	ands	r2, r1
 800a072:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a074:	4bc5      	ldr	r3, [pc, #788]	@ (800a38c <temper+0x680>)
 800a076:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a078:	4bc4      	ldr	r3, [pc, #784]	@ (800a38c <temper+0x680>)
 800a07a:	2280      	movs	r2, #128	@ 0x80
 800a07c:	02d2      	lsls	r2, r2, #11
 800a07e:	400a      	ands	r2, r1
 800a080:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800a082:	4bc2      	ldr	r3, [pc, #776]	@ (800a38c <temper+0x680>)
 800a084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a086:	4bc1      	ldr	r3, [pc, #772]	@ (800a38c <temper+0x680>)
 800a088:	2180      	movs	r1, #128	@ 0x80
 800a08a:	01c9      	lsls	r1, r1, #7
 800a08c:	430a      	orrs	r2, r1
 800a08e:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800a090:	f000 fcbe 	bl	800aa10 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800a094:	f000 fd2c 	bl	800aaf0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800a098:	4bbd      	ldr	r3, [pc, #756]	@ (800a390 <temper+0x684>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d005      	beq.n	800a0ac <temper+0x3a0>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800a0a0:	4bbc      	ldr	r3, [pc, #752]	@ (800a394 <temper+0x688>)
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	4abc      	ldr	r2, [pc, #752]	@ (800a398 <temper+0x68c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d808      	bhi.n	800a0bc <temper+0x3b0>
		goto lookopene;    // No, revise límite inferior
 800a0aa:	e010      	b.n	800a0ce <temper+0x3c2>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800a0ac:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800a0ae:	4bb9      	ldr	r3, [pc, #740]	@ (800a394 <temper+0x688>)
 800a0b0:	881a      	ldrh	r2, [r3, #0]
 800a0b2:	23e2      	movs	r3, #226	@ 0xe2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d308      	bcc.n	800a0cc <temper+0x3c0>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800a0ba:	e000      	b.n	800a0be <temper+0x3b2>
	goto senshorte;
 800a0bc:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800a0be:	49b7      	ldr	r1, [pc, #732]	@ (800a39c <temper+0x690>)
 800a0c0:	48b6      	ldr	r0, [pc, #728]	@ (800a39c <temper+0x690>)
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f000 fd29 	bl	800ab1c <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800a0ca:	e01c      	b.n	800a106 <temper+0x3fa>
		goto lookopene;    // No, revise límite inferior
 800a0cc:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800a0ce:	4bb4      	ldr	r3, [pc, #720]	@ (800a3a0 <temper+0x694>)
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	4baf      	ldr	r3, [pc, #700]	@ (800a390 <temper+0x684>)
 800a0d4:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800a0d6:	4bae      	ldr	r3, [pc, #696]	@ (800a390 <temper+0x684>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d004      	beq.n	800a0e8 <temper+0x3dc>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800a0de:	4bad      	ldr	r3, [pc, #692]	@ (800a394 <temper+0x688>)
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e4:	d908      	bls.n	800a0f8 <temper+0x3ec>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800a0e6:	e013      	b.n	800a110 <temper+0x404>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800a0e8:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800a0ea:	4baa      	ldr	r3, [pc, #680]	@ (800a394 <temper+0x688>)
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	23d7      	movs	r3, #215	@ 0xd7
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d20b      	bcs.n	800a10e <temper+0x402>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800a0f6:	e000      	b.n	800a0fa <temper+0x3ee>
	goto sens_opene;
 800a0f8:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800a0fa:	49a8      	ldr	r1, [pc, #672]	@ (800a39c <temper+0x690>)
 800a0fc:	48a7      	ldr	r0, [pc, #668]	@ (800a39c <temper+0x690>)
 800a0fe:	2302      	movs	r3, #2
 800a100:	2203      	movs	r2, #3
 800a102:	f000 fd0b 	bl	800ab1c <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800a106:	4ba7      	ldr	r3, [pc, #668]	@ (800a3a4 <temper+0x698>)
 800a108:	2214      	movs	r2, #20
 800a10a:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800a10c:	e010      	b.n	800a130 <temper+0x424>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800a10e:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800a110:	4ba4      	ldr	r3, [pc, #656]	@ (800a3a4 <temper+0x698>)
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	4b9e      	ldr	r3, [pc, #632]	@ (800a390 <temper+0x684>)
 800a116:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800a118:	4b9d      	ldr	r3, [pc, #628]	@ (800a390 <temper+0x684>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <temper+0x422>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800a120:	499e      	ldr	r1, [pc, #632]	@ (800a39c <temper+0x690>)
 800a122:	489e      	ldr	r0, [pc, #632]	@ (800a39c <temper+0x690>)
 800a124:	2303      	movs	r3, #3
 800a126:	2202      	movs	r2, #2
 800a128:	f000 fd13 	bl	800ab52 <Bclear_Clear_trfst>
 800a12c:	e000      	b.n	800a130 <temper+0x424>
		goto tempe16;
 800a12e:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800a130:	4b9a      	ldr	r3, [pc, #616]	@ (800a39c <temper+0x690>)
 800a132:	789b      	ldrb	r3, [r3, #2]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <temper+0x436>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800a138:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800a13a:	4b92      	ldr	r3, [pc, #584]	@ (800a384 <temper+0x678>)
 800a13c:	220a      	movs	r2, #10
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	e000      	b.n	800a144 <temper+0x438>
	goto tempe16a;                 // No, revisa temperatura alta
 800a142:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800a144:	4b8e      	ldr	r3, [pc, #568]	@ (800a380 <temper+0x674>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	001a      	movs	r2, r3
 800a14a:	4b8e      	ldr	r3, [pc, #568]	@ (800a384 <temper+0x678>)
 800a14c:	8819      	ldrh	r1, [r3, #0]
 800a14e:	4b96      	ldr	r3, [pc, #600]	@ (800a3a8 <temper+0x69c>)
 800a150:	0052      	lsls	r2, r2, #1
 800a152:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800a154:	4b8a      	ldr	r3, [pc, #552]	@ (800a380 <temper+0x674>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	3301      	adds	r3, #1
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	4b88      	ldr	r3, [pc, #544]	@ (800a380 <temper+0x674>)
 800a15e:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800a160:	4b87      	ldr	r3, [pc, #540]	@ (800a380 <temper+0x674>)
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	4b8a      	ldr	r3, [pc, #552]	@ (800a390 <temper+0x684>)
 800a166:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800a168:	4b89      	ldr	r3, [pc, #548]	@ (800a390 <temper+0x684>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b07      	cmp	r3, #7
 800a16e:	d800      	bhi.n	800a172 <temper+0x466>
 800a170:	e298      	b.n	800a6a4 <temper+0x998>
			goto tempe17;  // Si, obten el promedio
 800a172:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800a174:	4b8d      	ldr	r3, [pc, #564]	@ (800a3ac <temper+0x6a0>)
 800a176:	2200      	movs	r2, #0
 800a178:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a17a:	1dfb      	adds	r3, r7, #7
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	e00f      	b.n	800a1a2 <temper+0x496>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800a182:	1dfb      	adds	r3, r7, #7
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	4b8a      	ldr	r3, [pc, #552]	@ (800a3b0 <temper+0x6a4>)
 800a188:	0052      	lsls	r2, r2, #1
 800a18a:	5ad2      	ldrh	r2, [r2, r3]
 800a18c:	4b87      	ldr	r3, [pc, #540]	@ (800a3ac <temper+0x6a0>)
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	18d3      	adds	r3, r2, r3
 800a192:	b29a      	uxth	r2, r3
 800a194:	4b85      	ldr	r3, [pc, #532]	@ (800a3ac <temper+0x6a0>)
 800a196:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a198:	1dfb      	adds	r3, r7, #7
 800a19a:	781a      	ldrb	r2, [r3, #0]
 800a19c:	1dfb      	adds	r3, r7, #7
 800a19e:	3201      	adds	r2, #1
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	1dfb      	adds	r3, r7, #7
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b07      	cmp	r3, #7
 800a1a8:	d9eb      	bls.n	800a182 <temper+0x476>
	}
	resul = resul / 8;
 800a1aa:	4b80      	ldr	r3, [pc, #512]	@ (800a3ac <temper+0x6a0>)
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	08db      	lsrs	r3, r3, #3
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	4b7e      	ldr	r3, [pc, #504]	@ (800a3ac <temper+0x6a0>)
 800a1b4:	801a      	strh	r2, [r3, #0]
	linealiza();
 800a1b6:	f000 faf3 	bl	800a7a0 <linealiza>
	X = tempo;
 800a1ba:	4b7e      	ldr	r3, [pc, #504]	@ (800a3b4 <temper+0x6a8>)
 800a1bc:	881a      	ldrh	r2, [r3, #0]
 800a1be:	4b7e      	ldr	r3, [pc, #504]	@ (800a3b8 <temper+0x6ac>)
 800a1c0:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800a1c2:	4b7d      	ldr	r3, [pc, #500]	@ (800a3b8 <temper+0x6ac>)
 800a1c4:	881a      	ldrh	r2, [r3, #0]
 800a1c6:	4b7d      	ldr	r3, [pc, #500]	@ (800a3bc <temper+0x6b0>)
 800a1c8:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800a1ca:	4b78      	ldr	r3, [pc, #480]	@ (800a3ac <temper+0x6a0>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a1d0:	1dbb      	adds	r3, r7, #6
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	e00f      	b.n	800a1f8 <temper+0x4ec>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800a1d8:	1dbb      	adds	r3, r7, #6
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	4b78      	ldr	r3, [pc, #480]	@ (800a3c0 <temper+0x6b4>)
 800a1de:	0052      	lsls	r2, r2, #1
 800a1e0:	5ad2      	ldrh	r2, [r2, r3]
 800a1e2:	4b72      	ldr	r3, [pc, #456]	@ (800a3ac <temper+0x6a0>)
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	18d3      	adds	r3, r2, r3
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	4b70      	ldr	r3, [pc, #448]	@ (800a3ac <temper+0x6a0>)
 800a1ec:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a1ee:	1dbb      	adds	r3, r7, #6
 800a1f0:	781a      	ldrb	r2, [r3, #0]
 800a1f2:	1dbb      	adds	r3, r7, #6
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	1dbb      	adds	r3, r7, #6
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b07      	cmp	r3, #7
 800a1fe:	d9eb      	bls.n	800a1d8 <temper+0x4cc>
	}
	resul = resul / 8;
 800a200:	4b6a      	ldr	r3, [pc, #424]	@ (800a3ac <temper+0x6a0>)
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	08db      	lsrs	r3, r3, #3
 800a206:	b29a      	uxth	r2, r3
 800a208:	4b68      	ldr	r3, [pc, #416]	@ (800a3ac <temper+0x6a0>)
 800a20a:	801a      	strh	r2, [r3, #0]
	linealiza();
 800a20c:	f000 fac8 	bl	800a7a0 <linealiza>
	X = tempo;
 800a210:	4b68      	ldr	r3, [pc, #416]	@ (800a3b4 <temper+0x6a8>)
 800a212:	881a      	ldrh	r2, [r3, #0]
 800a214:	4b68      	ldr	r3, [pc, #416]	@ (800a3b8 <temper+0x6ac>)
 800a216:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800a218:	4b67      	ldr	r3, [pc, #412]	@ (800a3b8 <temper+0x6ac>)
 800a21a:	881a      	ldrh	r2, [r3, #0]
 800a21c:	4b69      	ldr	r3, [pc, #420]	@ (800a3c4 <temper+0x6b8>)
 800a21e:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800a220:	4b62      	ldr	r3, [pc, #392]	@ (800a3ac <temper+0x6a0>)
 800a222:	2200      	movs	r2, #0
 800a224:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a226:	1d7b      	adds	r3, r7, #5
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
 800a22c:	e00f      	b.n	800a24e <temper+0x542>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800a22e:	1d7b      	adds	r3, r7, #5
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	4b5d      	ldr	r3, [pc, #372]	@ (800a3a8 <temper+0x69c>)
 800a234:	0052      	lsls	r2, r2, #1
 800a236:	5ad2      	ldrh	r2, [r2, r3]
 800a238:	4b5c      	ldr	r3, [pc, #368]	@ (800a3ac <temper+0x6a0>)
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	b29a      	uxth	r2, r3
 800a240:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ac <temper+0x6a0>)
 800a242:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a244:	1d7b      	adds	r3, r7, #5
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	1d7b      	adds	r3, r7, #5
 800a24a:	3201      	adds	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	1d7b      	adds	r3, r7, #5
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b07      	cmp	r3, #7
 800a254:	d9eb      	bls.n	800a22e <temper+0x522>
	}
	resul = resul / 8;
 800a256:	4b55      	ldr	r3, [pc, #340]	@ (800a3ac <temper+0x6a0>)
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	4b53      	ldr	r3, [pc, #332]	@ (800a3ac <temper+0x6a0>)
 800a260:	801a      	strh	r2, [r3, #0]
	linealiza();
 800a262:	f000 fa9d 	bl	800a7a0 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800a266:	4b53      	ldr	r3, [pc, #332]	@ (800a3b4 <temper+0x6a8>)
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	4b56      	ldr	r3, [pc, #344]	@ (800a3c8 <temper+0x6bc>)
 800a26e:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800a270:	4b50      	ldr	r3, [pc, #320]	@ (800a3b4 <temper+0x6a8>)
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	0a1b      	lsrs	r3, r3, #8
 800a276:	b29b      	uxth	r3, r3
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	4b54      	ldr	r3, [pc, #336]	@ (800a3cc <temper+0x6c0>)
 800a27c:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800a27e:	4b4b      	ldr	r3, [pc, #300]	@ (800a3ac <temper+0x6a0>)
 800a280:	2200      	movs	r2, #0
 800a282:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e00f      	b.n	800a2ac <temper+0x5a0>
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800a28c:	1d3b      	adds	r3, r7, #4
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	4b3d      	ldr	r3, [pc, #244]	@ (800a388 <temper+0x67c>)
 800a292:	0052      	lsls	r2, r2, #1
 800a294:	5ad2      	ldrh	r2, [r2, r3]
 800a296:	4b45      	ldr	r3, [pc, #276]	@ (800a3ac <temper+0x6a0>)
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	18d3      	adds	r3, r2, r3
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	4b43      	ldr	r3, [pc, #268]	@ (800a3ac <temper+0x6a0>)
 800a2a0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800a2a2:	1d3b      	adds	r3, r7, #4
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	1d3b      	adds	r3, r7, #4
 800a2a8:	3201      	adds	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	1d3b      	adds	r3, r7, #4
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b07      	cmp	r3, #7
 800a2b2:	d9eb      	bls.n	800a28c <temper+0x580>
	}
	resul = resul / 8;
 800a2b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a3ac <temper+0x6a0>)
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	08db      	lsrs	r3, r3, #3
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a3ac <temper+0x6a0>)
 800a2be:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800a2c0:	4b43      	ldr	r3, [pc, #268]	@ (800a3d0 <temper+0x6c4>)
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	4b33      	ldr	r3, [pc, #204]	@ (800a394 <temper+0x688>)
 800a2c6:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800a2c8:	4b32      	ldr	r3, [pc, #200]	@ (800a394 <temper+0x688>)
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	4b37      	ldr	r3, [pc, #220]	@ (800a3ac <temper+0x6a0>)
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a394 <temper+0x688>)
 800a2d6:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800a2d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a394 <temper+0x688>)
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d100      	bne.n	800a2e2 <temper+0x5d6>
 800a2e0:	e0ab      	b.n	800a43a <temper+0x72e>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a394 <temper+0x688>)
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b21b      	sxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da18      	bge.n	800a31e <temper+0x612>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800a2ec:	4b29      	ldr	r3, [pc, #164]	@ (800a394 <temper+0x688>)
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	4b27      	ldr	r3, [pc, #156]	@ (800a394 <temper+0x688>)
 800a2f6:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800a2f8:	4b26      	ldr	r3, [pc, #152]	@ (800a394 <temper+0x688>)
 800a2fa:	881b      	ldrh	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d028      	beq.n	800a352 <temper+0x646>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800a300:	4b2a      	ldr	r3, [pc, #168]	@ (800a3ac <temper+0x6a0>)
 800a302:	881a      	ldrh	r2, [r3, #0]
 800a304:	4b23      	ldr	r3, [pc, #140]	@ (800a394 <temper+0x688>)
 800a306:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800a308:	4b22      	ldr	r3, [pc, #136]	@ (800a394 <temper+0x688>)
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	4b20      	ldr	r3, [pc, #128]	@ (800a394 <temper+0x688>)
 800a312:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800a314:	4b1f      	ldr	r3, [pc, #124]	@ (800a394 <temper+0x688>)
 800a316:	881a      	ldrh	r2, [r3, #0]
 800a318:	4b24      	ldr	r3, [pc, #144]	@ (800a3ac <temper+0x6a0>)
 800a31a:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800a31c:	e076      	b.n	800a40c <temper+0x700>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800a31e:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800a320:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <temper+0x688>)
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	4b1a      	ldr	r3, [pc, #104]	@ (800a394 <temper+0x688>)
 800a32a:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800a32c:	4b19      	ldr	r3, [pc, #100]	@ (800a394 <temper+0x688>)
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d010      	beq.n	800a356 <temper+0x64a>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800a334:	4b1d      	ldr	r3, [pc, #116]	@ (800a3ac <temper+0x6a0>)
 800a336:	881a      	ldrh	r2, [r3, #0]
 800a338:	4b16      	ldr	r3, [pc, #88]	@ (800a394 <temper+0x688>)
 800a33a:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800a33c:	4b15      	ldr	r3, [pc, #84]	@ (800a394 <temper+0x688>)
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	3301      	adds	r3, #1
 800a342:	b29a      	uxth	r2, r3
 800a344:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <temper+0x688>)
 800a346:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800a348:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <temper+0x688>)
 800a34a:	881a      	ldrh	r2, [r3, #0]
 800a34c:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <temper+0x6a0>)
 800a34e:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800a350:	e05c      	b.n	800a40c <temper+0x700>
		goto vesiestab;  		  // Si, revisa estabilidad
 800a352:	46c0      	nop			@ (mov r8, r8)
 800a354:	e000      	b.n	800a358 <temper+0x64c>
			goto vesiestab;       // Si, revisa estabilidad
 800a356:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800a358:	4b1e      	ldr	r3, [pc, #120]	@ (800a3d4 <temper+0x6c8>)
 800a35a:	881a      	ldrh	r2, [r3, #0]
 800a35c:	4b0d      	ldr	r3, [pc, #52]	@ (800a394 <temper+0x688>)
 800a35e:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800a360:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <temper+0x688>)
 800a362:	881a      	ldrh	r2, [r3, #0]
 800a364:	4b11      	ldr	r3, [pc, #68]	@ (800a3ac <temper+0x6a0>)
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <temper+0x688>)
 800a36e:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800a370:	4b08      	ldr	r3, [pc, #32]	@ (800a394 <temper+0x688>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d031      	beq.n	800a3dc <temper+0x6d0>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800a378:	4b17      	ldr	r3, [pc, #92]	@ (800a3d8 <temper+0x6cc>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800a37e:	e034      	b.n	800a3ea <temper+0x6de>
 800a380:	20000be0 	.word	0x20000be0
 800a384:	20000b80 	.word	0x20000b80
 800a388:	20001130 	.word	0x20001130
 800a38c:	40012400 	.word	0x40012400
 800a390:	20001152 	.word	0x20001152
 800a394:	20001154 	.word	0x20001154
 800a398:	000003b5 	.word	0x000003b5
 800a39c:	20000ba8 	.word	0x20000ba8
 800a3a0:	20000bb8 	.word	0x20000bb8
 800a3a4:	20000be5 	.word	0x20000be5
 800a3a8:	20001140 	.word	0x20001140
 800a3ac:	20001158 	.word	0x20001158
 800a3b0:	20001110 	.word	0x20001110
 800a3b4:	2000115a 	.word	0x2000115a
 800a3b8:	20001156 	.word	0x20001156
 800a3bc:	200010c0 	.word	0x200010c0
 800a3c0:	20001120 	.word	0x20001120
 800a3c4:	20000c74 	.word	0x20000c74
 800a3c8:	20000bd3 	.word	0x20000bd3
 800a3cc:	20000bd2 	.word	0x20000bd2
 800a3d0:	2000115e 	.word	0x2000115e
 800a3d4:	20001160 	.word	0x20001160
 800a3d8:	20000be6 	.word	0x20000be6
			goto estable;  // El nuevo dato es igual a último?
 800a3dc:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800a3de:	4bc9      	ldr	r3, [pc, #804]	@ (800a704 <temper+0x9f8>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	4bc7      	ldr	r3, [pc, #796]	@ (800a704 <temper+0x9f8>)
 800a3e8:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800a3ea:	4bc7      	ldr	r3, [pc, #796]	@ (800a708 <temper+0x9fc>)
 800a3ec:	881a      	ldrh	r2, [r3, #0]
 800a3ee:	4bc7      	ldr	r3, [pc, #796]	@ (800a70c <temper+0xa00>)
 800a3f0:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800a3f2:	4bc6      	ldr	r3, [pc, #792]	@ (800a70c <temper+0xa00>)
 800a3f4:	881a      	ldrh	r2, [r3, #0]
 800a3f6:	4bc6      	ldr	r3, [pc, #792]	@ (800a710 <temper+0xa04>)
 800a3f8:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800a3fa:	4bc2      	ldr	r3, [pc, #776]	@ (800a704 <temper+0x9f8>)
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	4bc5      	ldr	r3, [pc, #788]	@ (800a714 <temper+0xa08>)
 800a400:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800a402:	4bc4      	ldr	r3, [pc, #784]	@ (800a714 <temper+0xa08>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b0e      	cmp	r3, #14
 800a408:	d920      	bls.n	800a44c <temper+0x740>
			goto tempe29;

tempe26:
 800a40a:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800a40c:	4bbe      	ldr	r3, [pc, #760]	@ (800a708 <temper+0x9fc>)
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	4bc1      	ldr	r3, [pc, #772]	@ (800a718 <temper+0xa0c>)
 800a412:	801a      	strh	r2, [r3, #0]
		promant = X;
 800a414:	4bc0      	ldr	r3, [pc, #768]	@ (800a718 <temper+0xa0c>)
 800a416:	881a      	ldrh	r2, [r3, #0]
 800a418:	4bc0      	ldr	r3, [pc, #768]	@ (800a71c <temper+0xa10>)
 800a41a:	801a      	strh	r2, [r3, #0]
		linealiza();
 800a41c:	f000 f9c0 	bl	800a7a0 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800a420:	4bbf      	ldr	r3, [pc, #764]	@ (800a720 <temper+0xa14>)
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b2da      	uxtb	r2, r3
 800a426:	4bbf      	ldr	r3, [pc, #764]	@ (800a724 <temper+0xa18>)
 800a428:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800a42a:	4bbd      	ldr	r3, [pc, #756]	@ (800a720 <temper+0xa14>)
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	b2da      	uxtb	r2, r3
 800a434:	4bbc      	ldr	r3, [pc, #752]	@ (800a728 <temper+0xa1c>)
 800a436:	701a      	strb	r2, [r3, #0]
 800a438:	e000      	b.n	800a43c <temper+0x730>
		goto tempe27;                //nota1: checar comparaciones
 800a43a:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800a43c:	4bb7      	ldr	r3, [pc, #732]	@ (800a71c <temper+0xa10>)
 800a43e:	881a      	ldrh	r2, [r3, #0]
 800a440:	4bb3      	ldr	r3, [pc, #716]	@ (800a710 <temper+0xa04>)
 800a442:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800a444:	4baf      	ldr	r3, [pc, #700]	@ (800a704 <temper+0x9f8>)
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e000      	b.n	800a44e <temper+0x742>
			goto tempe29;
 800a44c:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800a44e:	f7f9 fda7 	bl	8003fa0 <tdev_to_Word>
 800a452:	0003      	movs	r3, r0
 800a454:	b29a      	uxth	r2, r3
 800a456:	4bb0      	ldr	r3, [pc, #704]	@ (800a718 <temper+0xa0c>)
 800a458:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800a45a:	4baf      	ldr	r3, [pc, #700]	@ (800a718 <temper+0xa0c>)
 800a45c:	881a      	ldrh	r2, [r3, #0]
 800a45e:	4bb3      	ldr	r3, [pc, #716]	@ (800a72c <temper+0xa20>)
 800a460:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800a462:	4bb3      	ldr	r3, [pc, #716]	@ (800a730 <temper+0xa24>)
 800a464:	2259      	movs	r2, #89	@ 0x59
 800a466:	5c9a      	ldrb	r2, [r3, r2]
 800a468:	4baa      	ldr	r3, [pc, #680]	@ (800a714 <temper+0xa08>)
 800a46a:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800a46c:	4ba9      	ldr	r3, [pc, #676]	@ (800a714 <temper+0xa08>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d91d      	bls.n	800a4b0 <temper+0x7a4>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800a474:	4bae      	ldr	r3, [pc, #696]	@ (800a730 <temper+0xa24>)
 800a476:	2253      	movs	r2, #83	@ 0x53
 800a478:	5c9b      	ldrb	r3, [r3, r2]
 800a47a:	b25b      	sxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da19      	bge.n	800a4b4 <temper+0x7a8>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800a480:	4bac      	ldr	r3, [pc, #688]	@ (800a734 <temper+0xa28>)
 800a482:	791b      	ldrb	r3, [r3, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d107      	bne.n	800a498 <temper+0x78c>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800a488:	4baa      	ldr	r3, [pc, #680]	@ (800a734 <temper+0xa28>)
 800a48a:	795b      	ldrb	r3, [r3, #5]
 800a48c:	2201      	movs	r2, #1
 800a48e:	4053      	eors	r3, r2
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <temper+0x790>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800a496:	e000      	b.n	800a49a <temper+0x78e>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800a498:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800a49a:	e00c      	b.n	800a4b6 <temper+0x7aa>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800a49c:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800a49e:	4ba6      	ldr	r3, [pc, #664]	@ (800a738 <temper+0xa2c>)
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	4b9d      	ldr	r3, [pc, #628]	@ (800a718 <temper+0xa0c>)
 800a4a4:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800a4a6:	4b9c      	ldr	r3, [pc, #624]	@ (800a718 <temper+0xa0c>)
 800a4a8:	881a      	ldrh	r2, [r3, #0]
 800a4aa:	4ba0      	ldr	r3, [pc, #640]	@ (800a72c <temper+0xa20>)
 800a4ac:	801a      	strh	r2, [r3, #0]
 800a4ae:	e002      	b.n	800a4b6 <temper+0x7aa>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800a4b0:	46c0      	nop			@ (mov r8, r8)
 800a4b2:	e000      	b.n	800a4b6 <temper+0x7aa>
			goto tempe26a;
 800a4b4:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800a4b6:	4ba1      	ldr	r3, [pc, #644]	@ (800a73c <temper+0xa30>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d014      	beq.n	800a4e8 <temper+0x7dc>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800a4be:	4b9f      	ldr	r3, [pc, #636]	@ (800a73c <temper+0xa30>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d800      	bhi.n	800a4c8 <temper+0x7bc>
 800a4c6:	e073      	b.n	800a5b0 <temper+0x8a4>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800a4c8:	4b93      	ldr	r3, [pc, #588]	@ (800a718 <temper+0xa0c>)
 800a4ca:	4a9d      	ldr	r2, [pc, #628]	@ (800a740 <temper+0xa34>)
 800a4cc:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800a4ce:	4b92      	ldr	r3, [pc, #584]	@ (800a718 <temper+0xa0c>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	0a1b      	lsrs	r3, r3, #8
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	4b93      	ldr	r3, [pc, #588]	@ (800a728 <temper+0xa1c>)
 800a4da:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800a4dc:	4b8e      	ldr	r3, [pc, #568]	@ (800a718 <temper+0xa0c>)
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	4b90      	ldr	r3, [pc, #576]	@ (800a724 <temper+0xa18>)
 800a4e4:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800a4e6:	e09c      	b.n	800a622 <temper+0x916>
			goto tempe30;              // Si
 800a4e8:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800a4ea:	4b96      	ldr	r3, [pc, #600]	@ (800a744 <temper+0xa38>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4053      	eors	r3, r2
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d05d      	beq.n	800a5b4 <temper+0x8a8>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800a4f8:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800a4fa:	4b93      	ldr	r3, [pc, #588]	@ (800a748 <temper+0xa3c>)
 800a4fc:	881a      	ldrh	r2, [r3, #0]
 800a4fe:	4b83      	ldr	r3, [pc, #524]	@ (800a70c <temper+0xa00>)
 800a500:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800a502:	4b82      	ldr	r3, [pc, #520]	@ (800a70c <temper+0xa00>)
 800a504:	881a      	ldrh	r2, [r3, #0]
 800a506:	4b89      	ldr	r3, [pc, #548]	@ (800a72c <temper+0xa20>)
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	4b7f      	ldr	r3, [pc, #508]	@ (800a70c <temper+0xa00>)
 800a510:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800a512:	4b7e      	ldr	r3, [pc, #504]	@ (800a70c <temper+0xa00>)
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d100      	bne.n	800a51c <temper+0x810>
 800a51a:	e07f      	b.n	800a61c <temper+0x910>
			goto tempe40;
		else if (!(GetRegFlagState(Y, 15)))//else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800a51c:	4b7b      	ldr	r3, [pc, #492]	@ (800a70c <temper+0xa00>)
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b21b      	sxth	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	da48      	bge.n	800a5b8 <temper+0x8ac>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800a526:	4b82      	ldr	r3, [pc, #520]	@ (800a730 <temper+0xa24>)
 800a528:	2254      	movs	r2, #84	@ 0x54
 800a52a:	5c9a      	ldrb	r2, [r3, r2]
 800a52c:	4b79      	ldr	r3, [pc, #484]	@ (800a714 <temper+0xa08>)
 800a52e:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800a530:	4b78      	ldr	r3, [pc, #480]	@ (800a714 <temper+0xa08>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d041      	beq.n	800a5bc <temper+0x8b0>
			goto tempe39;
		A = A << 1;
 800a538:	4b76      	ldr	r3, [pc, #472]	@ (800a714 <temper+0xa08>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	18db      	adds	r3, r3, r3
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	4b74      	ldr	r3, [pc, #464]	@ (800a714 <temper+0xa08>)
 800a542:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800a544:	4b81      	ldr	r3, [pc, #516]	@ (800a74c <temper+0xa40>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b7f      	ldr	r3, [pc, #508]	@ (800a74c <temper+0xa40>)
 800a54e:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800a550:	4b70      	ldr	r3, [pc, #448]	@ (800a714 <temper+0xa08>)
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	4b7d      	ldr	r3, [pc, #500]	@ (800a74c <temper+0xa40>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d900      	bls.n	800a55e <temper+0x852>
 800a55c:	e065      	b.n	800a62a <temper+0x91e>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800a55e:	4b6b      	ldr	r3, [pc, #428]	@ (800a70c <temper+0xa00>)
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	425b      	negs	r3, r3
 800a564:	b29a      	uxth	r2, r3
 800a566:	4b69      	ldr	r3, [pc, #420]	@ (800a70c <temper+0xa00>)
 800a568:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800a56a:	4b68      	ldr	r3, [pc, #416]	@ (800a70c <temper+0xa00>)
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	2b0a      	cmp	r3, #10
 800a570:	d90e      	bls.n	800a590 <temper+0x884>
			goto tempe37b;

		X = tDisplay_w;
 800a572:	4b6e      	ldr	r3, [pc, #440]	@ (800a72c <temper+0xa20>)
 800a574:	881a      	ldrh	r2, [r3, #0]
 800a576:	4b68      	ldr	r3, [pc, #416]	@ (800a718 <temper+0xa0c>)
 800a578:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800a57a:	4b67      	ldr	r3, [pc, #412]	@ (800a718 <temper+0xa0c>)
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	3b0a      	subs	r3, #10
 800a580:	b29a      	uxth	r2, r3
 800a582:	4b65      	ldr	r3, [pc, #404]	@ (800a718 <temper+0xa0c>)
 800a584:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800a586:	4b64      	ldr	r3, [pc, #400]	@ (800a718 <temper+0xa0c>)
 800a588:	881a      	ldrh	r2, [r3, #0]
 800a58a:	4b71      	ldr	r3, [pc, #452]	@ (800a750 <temper+0xa44>)
 800a58c:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800a58e:	e021      	b.n	800a5d4 <temper+0x8c8>
			goto tempe37b;
 800a590:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800a592:	4b6d      	ldr	r3, [pc, #436]	@ (800a748 <temper+0xa3c>)
 800a594:	881a      	ldrh	r2, [r3, #0]
 800a596:	4b60      	ldr	r3, [pc, #384]	@ (800a718 <temper+0xa0c>)
 800a598:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800a59a:	4b5f      	ldr	r3, [pc, #380]	@ (800a718 <temper+0xa0c>)
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	4b5d      	ldr	r3, [pc, #372]	@ (800a718 <temper+0xa0c>)
 800a5a4:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800a5a6:	4b5c      	ldr	r3, [pc, #368]	@ (800a718 <temper+0xa0c>)
 800a5a8:	881a      	ldrh	r2, [r3, #0]
 800a5aa:	4b69      	ldr	r3, [pc, #420]	@ (800a750 <temper+0xa44>)
 800a5ac:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800a5ae:	e011      	b.n	800a5d4 <temper+0x8c8>
			goto tempe39;              // Si, cargalo al display
 800a5b0:	46c0      	nop			@ (mov r8, r8)
 800a5b2:	e004      	b.n	800a5be <temper+0x8b2>
		goto tempe39;
 800a5b4:	46c0      	nop			@ (mov r8, r8)
 800a5b6:	e002      	b.n	800a5be <temper+0x8b2>
			goto tempe39;      // La diferencia es positiva?
 800a5b8:	46c0      	nop			@ (mov r8, r8)
 800a5ba:	e000      	b.n	800a5be <temper+0x8b2>
			goto tempe39;
 800a5bc:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800a5be:	4b5b      	ldr	r3, [pc, #364]	@ (800a72c <temper+0xa20>)
 800a5c0:	881a      	ldrh	r2, [r3, #0]
 800a5c2:	4b55      	ldr	r3, [pc, #340]	@ (800a718 <temper+0xa0c>)
 800a5c4:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800a5c6:	4b54      	ldr	r3, [pc, #336]	@ (800a718 <temper+0xa0c>)
 800a5c8:	881a      	ldrh	r2, [r3, #0]
 800a5ca:	4b61      	ldr	r3, [pc, #388]	@ (800a750 <temper+0xa44>)
 800a5cc:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800a5ce:	4b61      	ldr	r3, [pc, #388]	@ (800a754 <temper+0xa48>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]

// manuel_math_change ............................. filtro digital
tempe39a:
		A = cnthold;
 800a5d4:	4b5f      	ldr	r3, [pc, #380]	@ (800a754 <temper+0xa48>)
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	4b4e      	ldr	r3, [pc, #312]	@ (800a714 <temper+0xa08>)
 800a5da:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800a5dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a714 <temper+0xa08>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d011      	beq.n	800a608 <temper+0x8fc>
			goto tempe39b;            // Si, carga el dato a tdevdpy
		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800a5e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a758 <temper+0xa4c>)
 800a5e6:	881a      	ldrh	r2, [r3, #0]
 800a5e8:	4b48      	ldr	r3, [pc, #288]	@ (800a70c <temper+0xa00>)
 800a5ea:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800a5ec:	4b47      	ldr	r3, [pc, #284]	@ (800a70c <temper+0xa00>)
 800a5ee:	881a      	ldrh	r2, [r3, #0]
 800a5f0:	4b57      	ldr	r3, [pc, #348]	@ (800a750 <temper+0xa44>)
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	4b44      	ldr	r3, [pc, #272]	@ (800a70c <temper+0xa00>)
 800a5fa:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800a5fc:	4b43      	ldr	r3, [pc, #268]	@ (800a70c <temper+0xa00>)
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b21b      	sxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	db0c      	blt.n	800a620 <temper+0x914>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800a606:	e000      	b.n	800a60a <temper+0x8fe>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800a608:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800a60a:	4b51      	ldr	r3, [pc, #324]	@ (800a750 <temper+0xa44>)
 800a60c:	881a      	ldrh	r2, [r3, #0]
 800a60e:	4b42      	ldr	r3, [pc, #264]	@ (800a718 <temper+0xa0c>)
 800a610:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800a612:	4b41      	ldr	r3, [pc, #260]	@ (800a718 <temper+0xa0c>)
 800a614:	881a      	ldrh	r2, [r3, #0]
 800a616:	4b4c      	ldr	r3, [pc, #304]	@ (800a748 <temper+0xa3c>)
 800a618:	801a      	strh	r2, [r3, #0]
 800a61a:	e002      	b.n	800a622 <temper+0x916>
			goto tempe40;
 800a61c:	46c0      	nop			@ (mov r8, r8)
 800a61e:	e000      	b.n	800a622 <temper+0x916>
			goto tempe40;             // Si, congela el display en limsup
 800a620:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800a622:	4b4a      	ldr	r3, [pc, #296]	@ (800a74c <temper+0xa40>)
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
 800a628:	e000      	b.n	800a62c <temper+0x920>
			goto tempe50;
 800a62a:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800a62c:	4b4b      	ldr	r3, [pc, #300]	@ (800a75c <temper+0xa50>)
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800a632:	4b4b      	ldr	r3, [pc, #300]	@ (800a760 <temper+0xa54>)
 800a634:	78db      	ldrb	r3, [r3, #3]
 800a636:	2201      	movs	r2, #1
 800a638:	4053      	eors	r3, r2
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10f      	bne.n	800a660 <temper+0x954>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800a640:	4b35      	ldr	r3, [pc, #212]	@ (800a718 <temper+0xa0c>)
 800a642:	4a3f      	ldr	r2, [pc, #252]	@ (800a740 <temper+0xa34>)
 800a644:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800a646:	4b34      	ldr	r3, [pc, #208]	@ (800a718 <temper+0xa0c>)
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	4b45      	ldr	r3, [pc, #276]	@ (800a764 <temper+0xa58>)
 800a64e:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800a650:	4b31      	ldr	r3, [pc, #196]	@ (800a718 <temper+0xa0c>)
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	b29b      	uxth	r3, r3
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	4b43      	ldr	r3, [pc, #268]	@ (800a768 <temper+0xa5c>)
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	e000      	b.n	800a662 <temper+0x956>
			goto tempe52;
 800a660:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800a662:	4b34      	ldr	r3, [pc, #208]	@ (800a734 <temper+0xa28>)
 800a664:	795b      	ldrb	r3, [r3, #5]
 800a666:	2201      	movs	r2, #1
 800a668:	4053      	eors	r3, r2
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d107      	bne.n	800a680 <temper+0x974>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800a670:	4b29      	ldr	r3, [pc, #164]	@ (800a718 <temper+0xa0c>)
 800a672:	4a33      	ldr	r2, [pc, #204]	@ (800a740 <temper+0xa34>)
 800a674:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800a676:	4b28      	ldr	r3, [pc, #160]	@ (800a718 <temper+0xa0c>)
 800a678:	881a      	ldrh	r2, [r3, #0]
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <temper+0xa2c>)
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	e000      	b.n	800a682 <temper+0x976>
			goto tempe53;
 800a680:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800a682:	4b2c      	ldr	r3, [pc, #176]	@ (800a734 <temper+0xa28>)
 800a684:	79db      	ldrb	r3, [r3, #7]
 800a686:	2201      	movs	r2, #1
 800a688:	4053      	eors	r3, r2
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <temper+0x99c>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800a690:	4b21      	ldr	r3, [pc, #132]	@ (800a718 <temper+0xa0c>)
 800a692:	4a2b      	ldr	r2, [pc, #172]	@ (800a740 <temper+0xa34>)
 800a694:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800a696:	4b20      	ldr	r3, [pc, #128]	@ (800a718 <temper+0xa0c>)
 800a698:	881a      	ldrh	r2, [r3, #0]
 800a69a:	4b34      	ldr	r3, [pc, #208]	@ (800a76c <temper+0xa60>)
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	e004      	b.n	800a6aa <temper+0x99e>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800a6a0:	46c0      	nop			@ (mov r8, r8)
 800a6a2:	e002      	b.n	800a6aa <temper+0x99e>
			goto fintemp;
 800a6a4:	46c0      	nop			@ (mov r8, r8)
 800a6a6:	e000      	b.n	800a6aa <temper+0x99e>
			goto fintemp;
 800a6a8:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800a6aa:	4b31      	ldr	r3, [pc, #196]	@ (800a770 <temper+0xa64>)
 800a6ac:	781a      	ldrb	r2, [r3, #0]
 800a6ae:	4b19      	ldr	r3, [pc, #100]	@ (800a714 <temper+0xa08>)
 800a6b0:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800a6b2:	4b18      	ldr	r3, [pc, #96]	@ (800a714 <temper+0xa08>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d064      	beq.n	800a784 <temper+0xa78>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <temper+0xa24>)
 800a6bc:	2259      	movs	r2, #89	@ 0x59
 800a6be:	5c9a      	ldrb	r2, [r3, r2]
 800a6c0:	4b14      	ldr	r3, [pc, #80]	@ (800a714 <temper+0xa08>)
 800a6c2:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800a6c4:	4b13      	ldr	r3, [pc, #76]	@ (800a714 <temper+0xa08>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	d05d      	beq.n	800a788 <temper+0xa7c>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800a6cc:	4b11      	ldr	r3, [pc, #68]	@ (800a714 <temper+0xa08>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d04f      	beq.n	800a774 <temper+0xa68>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a714 <temper+0xa08>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d00b      	beq.n	800a6f4 <temper+0x9e8>
			goto clrRetFail;
		if (A != 1)
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <temper+0xa08>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d153      	bne.n	800a78c <temper+0xa80>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800a6e4:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800a6e6:	491e      	ldr	r1, [pc, #120]	@ (800a760 <temper+0xa54>)
 800a6e8:	481d      	ldr	r0, [pc, #116]	@ (800a760 <temper+0xa54>)
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	f000 fa30 	bl	800ab52 <Bclear_Clear_trfst>
 800a6f2:	e000      	b.n	800a6f6 <temper+0x9ea>
			goto clrRetFail;
 800a6f4:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800a6f6:	490f      	ldr	r1, [pc, #60]	@ (800a734 <temper+0xa28>)
 800a6f8:	480e      	ldr	r0, [pc, #56]	@ (800a734 <temper+0xa28>)
 800a6fa:	2305      	movs	r3, #5
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	f000 fa28 	bl	800ab52 <Bclear_Clear_trfst>
 800a702:	e038      	b.n	800a776 <temper+0xa6a>
 800a704:	20000be6 	.word	0x20000be6
 800a708:	20001158 	.word	0x20001158
 800a70c:	20001154 	.word	0x20001154
 800a710:	20001160 	.word	0x20001160
 800a714:	20001152 	.word	0x20001152
 800a718:	20001156 	.word	0x20001156
 800a71c:	2000115e 	.word	0x2000115e
 800a720:	2000115a 	.word	0x2000115a
 800a724:	20000bd1 	.word	0x20000bd1
 800a728:	20000bd0 	.word	0x20000bd0
 800a72c:	200010c2 	.word	0x200010c2
 800a730:	200000bc 	.word	0x200000bc
 800a734:	20000ba0 	.word	0x20000ba0
 800a738:	20000c74 	.word	0x20000c74
 800a73c:	20000be4 	.word	0x20000be4
 800a740:	fffffe34 	.word	0xfffffe34
 800a744:	20000b98 	.word	0x20000b98
 800a748:	20000bd4 	.word	0x20000bd4
 800a74c:	20000be3 	.word	0x20000be3
 800a750:	2000115c 	.word	0x2000115c
 800a754:	20000be7 	.word	0x20000be7
 800a758:	20000bce 	.word	0x20000bce
 800a75c:	20000be0 	.word	0x20000be0
 800a760:	20000ba8 	.word	0x20000ba8
 800a764:	20000bd3 	.word	0x20000bd3
 800a768:	20000bd2 	.word	0x20000bd2
 800a76c:	200010c0 	.word	0x200010c0
 800a770:	20000bb8 	.word	0x20000bb8
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800a774:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800a776:	4908      	ldr	r1, [pc, #32]	@ (800a798 <temper+0xa8c>)
 800a778:	4808      	ldr	r0, [pc, #32]	@ (800a79c <temper+0xa90>)
 800a77a:	2307      	movs	r3, #7
 800a77c:	2205      	movs	r2, #5
 800a77e:	f000 f9e8 	bl	800ab52 <Bclear_Clear_trfst>
 800a782:	e004      	b.n	800a78e <temper+0xa82>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800a784:	46c0      	nop			@ (mov r8, r8)
 800a786:	e002      	b.n	800a78e <temper+0xa82>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800a788:	46c0      	nop			@ (mov r8, r8)
 800a78a:	e000      	b.n	800a78e <temper+0xa82>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800a78c:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800a78e:	46c0      	nop			@ (mov r8, r8)




}
 800a790:	46c0      	nop			@ (mov r8, r8)
 800a792:	46bd      	mov	sp, r7
 800a794:	b002      	add	sp, #8
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000ba0 	.word	0x20000ba0
 800a79c:	20000ba8 	.word	0x20000ba8

0800a7a0 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
	tempo = 0;
 800a7a4:	4b57      	ldr	r3, [pc, #348]	@ (800a904 <linealiza+0x164>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800a7aa:	4b57      	ldr	r3, [pc, #348]	@ (800a908 <linealiza+0x168>)
 800a7ac:	881a      	ldrh	r2, [r3, #0]
 800a7ae:	4b57      	ldr	r3, [pc, #348]	@ (800a90c <linealiza+0x16c>)
 800a7b0:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800a7b2:	4b56      	ldr	r3, [pc, #344]	@ (800a90c <linealiza+0x16c>)
 800a7b4:	881a      	ldrh	r2, [r3, #0]
 800a7b6:	4b56      	ldr	r3, [pc, #344]	@ (800a910 <linealiza+0x170>)
 800a7b8:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800a7ba:	4b55      	ldr	r3, [pc, #340]	@ (800a910 <linealiza+0x170>)
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	4a55      	ldr	r2, [pc, #340]	@ (800a914 <linealiza+0x174>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d80e      	bhi.n	800a7e2 <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800a7c4:	4b52      	ldr	r3, [pc, #328]	@ (800a910 <linealiza+0x170>)
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	4a53      	ldr	r2, [pc, #332]	@ (800a918 <linealiza+0x178>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d810      	bhi.n	800a7f0 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800a7ce:	4b50      	ldr	r3, [pc, #320]	@ (800a910 <linealiza+0x170>)
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	4a52      	ldr	r2, [pc, #328]	@ (800a91c <linealiza+0x17c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d812      	bhi.n	800a7fe <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800a7d8:	4b4d      	ldr	r3, [pc, #308]	@ (800a910 <linealiza+0x170>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	2bca      	cmp	r3, #202	@ 0xca
 800a7de:	d91c      	bls.n	800a81a <linealiza+0x7a>
		goto lil_principal;
 800a7e0:	e015      	b.n	800a80e <linealiza+0x6e>
		goto wise_hot_3;
 800a7e2:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800a7e4:	4b4e      	ldr	r3, [pc, #312]	@ (800a920 <linealiza+0x180>)
 800a7e6:	0019      	movs	r1, r3
 800a7e8:	2053      	movs	r0, #83	@ 0x53
 800a7ea:	f000 f94d 	bl	800aa88 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800a7ee:	e01b      	b.n	800a828 <linealiza+0x88>
		goto wise_hot_2;
 800a7f0:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800a7f2:	4b4c      	ldr	r3, [pc, #304]	@ (800a924 <linealiza+0x184>)
 800a7f4:	0019      	movs	r1, r3
 800a7f6:	2034      	movs	r0, #52	@ 0x34
 800a7f8:	f000 f946 	bl	800aa88 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800a7fc:	e014      	b.n	800a828 <linealiza+0x88>
		goto wise_hot_1;
 800a7fe:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800a800:	2393      	movs	r3, #147	@ 0x93
 800a802:	01db      	lsls	r3, r3, #7
 800a804:	0019      	movs	r1, r3
 800a806:	201d      	movs	r0, #29
 800a808:	f000 f93e 	bl	800aa88 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800a80c:	e00c      	b.n	800a828 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800a80e:	4b46      	ldr	r3, [pc, #280]	@ (800a928 <linealiza+0x188>)
 800a810:	0019      	movs	r1, r3
 800a812:	2013      	movs	r0, #19
 800a814:	f000 f938 	bl	800aa88 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800a818:	e006      	b.n	800a828 <linealiza+0x88>
		goto curva_fria;
 800a81a:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800a81c:	23de      	movs	r3, #222	@ 0xde
 800a81e:	019b      	lsls	r3, r3, #6
 800a820:	0019      	movs	r1, r3
 800a822:	201e      	movs	r0, #30
 800a824:	f000 f930 	bl	800aa88 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800a828:	4b36      	ldr	r3, [pc, #216]	@ (800a904 <linealiza+0x164>)
 800a82a:	881a      	ldrh	r2, [r3, #0]
 800a82c:	4b3f      	ldr	r3, [pc, #252]	@ (800a92c <linealiza+0x18c>)
 800a82e:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800a830:	4b3e      	ldr	r3, [pc, #248]	@ (800a92c <linealiza+0x18c>)
 800a832:	881a      	ldrh	r2, [r3, #0]
 800a834:	4b35      	ldr	r3, [pc, #212]	@ (800a90c <linealiza+0x16c>)
 800a836:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800a838:	4b34      	ldr	r3, [pc, #208]	@ (800a90c <linealiza+0x16c>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	b21b      	sxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da05      	bge.n	800a84e <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800a842:	4b3a      	ldr	r3, [pc, #232]	@ (800a92c <linealiza+0x18c>)
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	425b      	negs	r3, r3
 800a848:	b29a      	uxth	r2, r3
 800a84a:	4b38      	ldr	r3, [pc, #224]	@ (800a92c <linealiza+0x18c>)
 800a84c:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800a84e:	4b37      	ldr	r3, [pc, #220]	@ (800a92c <linealiza+0x18c>)
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	0a1b      	lsrs	r3, r3, #8
 800a854:	b29b      	uxth	r3, r3
 800a856:	b2da      	uxtb	r2, r3
 800a858:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <linealiza+0x190>)
 800a85a:	701a      	strb	r2, [r3, #0]
	waux = A;
 800a85c:	4b34      	ldr	r3, [pc, #208]	@ (800a930 <linealiza+0x190>)
 800a85e:	781a      	ldrb	r2, [r3, #0]
 800a860:	4b34      	ldr	r3, [pc, #208]	@ (800a934 <linealiza+0x194>)
 800a862:	701a      	strb	r2, [r3, #0]
	A = 10;
 800a864:	4b32      	ldr	r3, [pc, #200]	@ (800a930 <linealiza+0x190>)
 800a866:	220a      	movs	r2, #10
 800a868:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800a86a:	4b30      	ldr	r3, [pc, #192]	@ (800a92c <linealiza+0x18c>)
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	001a      	movs	r2, r3
 800a872:	4b2f      	ldr	r3, [pc, #188]	@ (800a930 <linealiza+0x190>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	4353      	muls	r3, r2
 800a878:	b29a      	uxth	r2, r3
 800a87a:	4b2c      	ldr	r3, [pc, #176]	@ (800a92c <linealiza+0x18c>)
 800a87c:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800a87e:	4b2b      	ldr	r3, [pc, #172]	@ (800a92c <linealiza+0x18c>)
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b29b      	uxth	r3, r3
 800a886:	b2da      	uxtb	r2, r3
 800a888:	4b29      	ldr	r3, [pc, #164]	@ (800a930 <linealiza+0x190>)
 800a88a:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800a88c:	4b27      	ldr	r3, [pc, #156]	@ (800a92c <linealiza+0x18c>)
 800a88e:	2200      	movs	r2, #0
 800a890:	801a      	strh	r2, [r3, #0]
	X = A;
 800a892:	4b27      	ldr	r3, [pc, #156]	@ (800a930 <linealiza+0x190>)
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	001a      	movs	r2, r3
 800a898:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <linealiza+0x18c>)
 800a89a:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800a89c:	4b23      	ldr	r3, [pc, #140]	@ (800a92c <linealiza+0x18c>)
 800a89e:	881a      	ldrh	r2, [r3, #0]
 800a8a0:	4b18      	ldr	r3, [pc, #96]	@ (800a904 <linealiza+0x164>)
 800a8a2:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800a8a4:	4b23      	ldr	r3, [pc, #140]	@ (800a934 <linealiza+0x194>)
 800a8a6:	781a      	ldrb	r2, [r3, #0]
 800a8a8:	4b21      	ldr	r3, [pc, #132]	@ (800a930 <linealiza+0x190>)
 800a8aa:	701a      	strb	r2, [r3, #0]
	X = A;
 800a8ac:	4b20      	ldr	r3, [pc, #128]	@ (800a930 <linealiza+0x190>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	001a      	movs	r2, r3
 800a8b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a92c <linealiza+0x18c>)
 800a8b4:	801a      	strh	r2, [r3, #0]

	A = 10;
 800a8b6:	4b1e      	ldr	r3, [pc, #120]	@ (800a930 <linealiza+0x190>)
 800a8b8:	220a      	movs	r2, #10
 800a8ba:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800a8bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a92c <linealiza+0x18c>)
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	001a      	movs	r2, r3
 800a8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a930 <linealiza+0x190>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	4353      	muls	r3, r2
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	4b17      	ldr	r3, [pc, #92]	@ (800a92c <linealiza+0x18c>)
 800a8ce:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800a8d0:	4b16      	ldr	r3, [pc, #88]	@ (800a92c <linealiza+0x18c>)
 800a8d2:	881a      	ldrh	r2, [r3, #0]
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <linealiza+0x164>)
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	18d3      	adds	r3, r2, r3
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <linealiza+0x18c>)
 800a8de:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <linealiza+0x16c>)
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b21b      	sxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da05      	bge.n	800a8f6 <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800a8ea:	4b10      	ldr	r3, [pc, #64]	@ (800a92c <linealiza+0x18c>)
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	425b      	negs	r3, r3
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <linealiza+0x18c>)
 800a8f4:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <linealiza+0x18c>)
 800a8f8:	881a      	ldrh	r2, [r3, #0]
 800a8fa:	4b02      	ldr	r3, [pc, #8]	@ (800a904 <linealiza+0x164>)
 800a8fc:	801a      	strh	r2, [r3, #0]
}
 800a8fe:	46c0      	nop			@ (mov r8, r8)
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	2000115a 	.word	0x2000115a
 800a908:	20001158 	.word	0x20001158
 800a90c:	20001154 	.word	0x20001154
 800a910:	20001150 	.word	0x20001150
 800a914:	0000038d 	.word	0x0000038d
 800a918:	00000339 	.word	0x00000339
 800a91c:	000002aa 	.word	0x000002aa
 800a920:	0000ffff 	.word	0x0000ffff
 800a924:	000093cc 	.word	0x000093cc
 800a928:	00002ecc 	.word	0x00002ecc
 800a92c:	20001156 	.word	0x20001156
 800a930:	20001152 	.word	0x20001152
 800a934:	20000b76 	.word	0x20000b76

0800a938 <mult1x2>:

void mult1x2(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800a93c:	4b2f      	ldr	r3, [pc, #188]	@ (800a9fc <mult1x2+0xc4>)
 800a93e:	881a      	ldrh	r2, [r3, #0]
 800a940:	4b2f      	ldr	r3, [pc, #188]	@ (800aa00 <mult1x2+0xc8>)
 800a942:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800a944:	4b2e      	ldr	r3, [pc, #184]	@ (800aa00 <mult1x2+0xc8>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	0a1b      	lsrs	r3, r3, #8
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	4b2d      	ldr	r3, [pc, #180]	@ (800aa04 <mult1x2+0xcc>)
 800a950:	701a      	strb	r2, [r3, #0]
	Y = A;
 800a952:	4b2c      	ldr	r3, [pc, #176]	@ (800aa04 <mult1x2+0xcc>)
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	001a      	movs	r2, r3
 800a958:	4b28      	ldr	r3, [pc, #160]	@ (800a9fc <mult1x2+0xc4>)
 800a95a:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800a95c:	4b2a      	ldr	r3, [pc, #168]	@ (800aa08 <mult1x2+0xd0>)
 800a95e:	781a      	ldrb	r2, [r3, #0]
 800a960:	4b28      	ldr	r3, [pc, #160]	@ (800aa04 <mult1x2+0xcc>)
 800a962:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800a964:	4b27      	ldr	r3, [pc, #156]	@ (800aa04 <mult1x2+0xcc>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	001a      	movs	r2, r3
 800a96a:	4b24      	ldr	r3, [pc, #144]	@ (800a9fc <mult1x2+0xc4>)
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	4353      	muls	r3, r2
 800a970:	b29a      	uxth	r2, r3
 800a972:	4b22      	ldr	r3, [pc, #136]	@ (800a9fc <mult1x2+0xc4>)
 800a974:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800a976:	4b21      	ldr	r3, [pc, #132]	@ (800a9fc <mult1x2+0xc4>)
 800a978:	881a      	ldrh	r2, [r3, #0]
 800a97a:	4b24      	ldr	r3, [pc, #144]	@ (800aa0c <mult1x2+0xd4>)
 800a97c:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800a97e:	4b20      	ldr	r3, [pc, #128]	@ (800aa00 <mult1x2+0xc8>)
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b2da      	uxtb	r2, r3
 800a984:	4b1f      	ldr	r3, [pc, #124]	@ (800aa04 <mult1x2+0xcc>)
 800a986:	701a      	strb	r2, [r3, #0]
	Y = A;
 800a988:	4b1e      	ldr	r3, [pc, #120]	@ (800aa04 <mult1x2+0xcc>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	001a      	movs	r2, r3
 800a98e:	4b1b      	ldr	r3, [pc, #108]	@ (800a9fc <mult1x2+0xc4>)
 800a990:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800a992:	4b1d      	ldr	r3, [pc, #116]	@ (800aa08 <mult1x2+0xd0>)
 800a994:	781a      	ldrb	r2, [r3, #0]
 800a996:	4b1b      	ldr	r3, [pc, #108]	@ (800aa04 <mult1x2+0xcc>)
 800a998:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800a99a:	4b1a      	ldr	r3, [pc, #104]	@ (800aa04 <mult1x2+0xcc>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	001a      	movs	r2, r3
 800a9a0:	4b16      	ldr	r3, [pc, #88]	@ (800a9fc <mult1x2+0xc4>)
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	4353      	muls	r3, r2
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <mult1x2+0xc4>)
 800a9aa:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800a9ac:	4b13      	ldr	r3, [pc, #76]	@ (800a9fc <mult1x2+0xc4>)
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	4b14      	ldr	r3, [pc, #80]	@ (800aa04 <mult1x2+0xcc>)
 800a9b4:	701a      	strb	r2, [r3, #0]
	resul = A;
 800a9b6:	4b13      	ldr	r3, [pc, #76]	@ (800aa04 <mult1x2+0xcc>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	4b10      	ldr	r3, [pc, #64]	@ (800aa00 <mult1x2+0xc8>)
 800a9be:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800a9c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <mult1x2+0xc4>)
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	0a1b      	lsrs	r3, r3, #8
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800aa04 <mult1x2+0xcc>)
 800a9cc:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800aa0c <mult1x2+0xd4>)
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa04 <mult1x2+0xcc>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	18d3      	adds	r3, r2, r3
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <mult1x2+0xcc>)
 800a9de:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800a9e0:	4b08      	ldr	r3, [pc, #32]	@ (800aa04 <mult1x2+0xcc>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	4b05      	ldr	r3, [pc, #20]	@ (800aa00 <mult1x2+0xc8>)
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	18d3      	adds	r3, r2, r3
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	4b03      	ldr	r3, [pc, #12]	@ (800aa00 <mult1x2+0xc8>)
 800a9f2:	801a      	strh	r2, [r3, #0]
}
 800a9f4:	46c0      	nop			@ (mov r8, r8)
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	46c0      	nop			@ (mov r8, r8)
 800a9fc:	20001154 	.word	0x20001154
 800aa00:	20001158 	.word	0x20001158
 800aa04:	20001152 	.word	0x20001152
 800aa08:	20000b77 	.word	0x20000b77
 800aa0c:	2000115c 	.word	0x2000115c

0800aa10 <capturaAD>:

void capturaAD (void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800aa16:	4b1a      	ldr	r3, [pc, #104]	@ (800aa80 <capturaAD+0x70>)
 800aa18:	689a      	ldr	r2, [r3, #8]
 800aa1a:	4b19      	ldr	r3, [pc, #100]	@ (800aa80 <capturaAD+0x70>)
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800aa22:	4b17      	ldr	r3, [pc, #92]	@ (800aa80 <capturaAD+0x70>)
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b16      	ldr	r3, [pc, #88]	@ (800aa80 <capturaAD+0x70>)
 800aa28:	211c      	movs	r1, #28
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800aa2e:	4b14      	ldr	r3, [pc, #80]	@ (800aa80 <capturaAD+0x70>)
 800aa30:	689a      	ldr	r2, [r3, #8]
 800aa32:	4b13      	ldr	r3, [pc, #76]	@ (800aa80 <capturaAD+0x70>)
 800aa34:	2104      	movs	r1, #4
 800aa36:	430a      	orrs	r2, r1
 800aa38:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800aa3a:	46c0      	nop			@ (mov r8, r8)
 800aa3c:	4b10      	ldr	r3, [pc, #64]	@ (800aa80 <capturaAD+0x70>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2204      	movs	r2, #4
 800aa42:	4013      	ands	r3, r2
 800aa44:	d0fa      	beq.n	800aa3c <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800aa46:	4b0e      	ldr	r3, [pc, #56]	@ (800aa80 <capturaAD+0x70>)
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa80 <capturaAD+0x70>)
 800aa4c:	210c      	movs	r1, #12
 800aa4e:	438a      	bics	r2, r1
 800aa50:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 250; i++)
 800aa52:	1dfb      	adds	r3, r7, #7
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
 800aa58:	e009      	b.n	800aa6e <capturaAD+0x5e>

	adcramh = ADC1->DR;
 800aa5a:	4b09      	ldr	r3, [pc, #36]	@ (800aa80 <capturaAD+0x70>)
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	4b08      	ldr	r3, [pc, #32]	@ (800aa84 <capturaAD+0x74>)
 800aa62:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i < 250; i++)
 800aa64:	1dfb      	adds	r3, r7, #7
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	1dfb      	adds	r3, r7, #7
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	1dfb      	adds	r3, r7, #7
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2bf9      	cmp	r3, #249	@ 0xf9
 800aa74:	d9f1      	bls.n	800aa5a <capturaAD+0x4a>
}
 800aa76:	46c0      	nop			@ (mov r8, r8)
 800aa78:	46c0      	nop			@ (mov r8, r8)
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	b002      	add	sp, #8
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	40012400 	.word	0x40012400
 800aa84:	20000b80 	.word	0x20000b80

0800aa88 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	0002      	movs	r2, r0
 800aa90:	1dfb      	adds	r3, r7, #7
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	1d3b      	adds	r3, r7, #4
 800aa96:	1c0a      	adds	r2, r1, #0
 800aa98:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	@ (800aad8 <wise_hot_rep+0x50>)
 800aa9c:	1dfa      	adds	r2, r7, #7
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800aadc <wise_hot_rep+0x54>)
 800aaa4:	881a      	ldrh	r2, [r3, #0]
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <wise_hot_rep+0x58>)
 800aaa8:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800aaaa:	f7ff ff45 	bl	800a938 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800aaae:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <wise_hot_rep+0x5c>)
 800aab0:	881a      	ldrh	r2, [r3, #0]
 800aab2:	4b0d      	ldr	r3, [pc, #52]	@ (800aae8 <wise_hot_rep+0x60>)
 800aab4:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800aab6:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <wise_hot_rep+0x60>)
 800aab8:	881a      	ldrh	r2, [r3, #0]
 800aaba:	1d3b      	adds	r3, r7, #4
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <wise_hot_rep+0x60>)
 800aac4:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800aac6:	4b08      	ldr	r3, [pc, #32]	@ (800aae8 <wise_hot_rep+0x60>)
 800aac8:	881a      	ldrh	r2, [r3, #0]
 800aaca:	4b08      	ldr	r3, [pc, #32]	@ (800aaec <wise_hot_rep+0x64>)
 800aacc:	801a      	strh	r2, [r3, #0]
}
 800aace:	46c0      	nop			@ (mov r8, r8)
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b002      	add	sp, #8
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	46c0      	nop			@ (mov r8, r8)
 800aad8:	20000b77 	.word	0x20000b77
 800aadc:	20001150 	.word	0x20001150
 800aae0:	20001154 	.word	0x20001154
 800aae4:	20001158 	.word	0x20001158
 800aae8:	20001156 	.word	0x20001156
 800aaec:	2000115a 	.word	0x2000115a

0800aaf0 <Y_A>:

void Y_A (void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
	Y = adcramh;
 800aaf4:	4b05      	ldr	r3, [pc, #20]	@ (800ab0c <Y_A+0x1c>)
 800aaf6:	881a      	ldrh	r2, [r3, #0]
 800aaf8:	4b05      	ldr	r3, [pc, #20]	@ (800ab10 <Y_A+0x20>)
 800aafa:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800aafc:	4b05      	ldr	r3, [pc, #20]	@ (800ab14 <Y_A+0x24>)
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	4b05      	ldr	r3, [pc, #20]	@ (800ab18 <Y_A+0x28>)
 800ab02:	701a      	strb	r2, [r3, #0]
}
 800ab04:	46c0      	nop			@ (mov r8, r8)
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	46c0      	nop			@ (mov r8, r8)
 800ab0c:	20000b80 	.word	0x20000b80
 800ab10:	20001154 	.word	0x20001154
 800ab14:	20000bb8 	.word	0x20000bb8
 800ab18:	20001152 	.word	0x20001152

0800ab1c <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	0019      	movs	r1, r3
 800ab28:	1dfb      	adds	r3, r7, #7
 800ab2a:	701a      	strb	r2, [r3, #0]
 800ab2c:	1dbb      	adds	r3, r7, #6
 800ab2e:	1c0a      	adds	r2, r1, #0
 800ab30:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800ab32:	1dfb      	adds	r3, r7, #7
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	18d3      	adds	r3, r2, r3
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800ab3e:	1dbb      	adds	r3, r7, #6
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	18d3      	adds	r3, r2, r3
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
}
 800ab4a:	46c0      	nop			@ (mov r8, r8)
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	b004      	add	sp, #16
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	0019      	movs	r1, r3
 800ab5e:	1dfb      	adds	r3, r7, #7
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	1dbb      	adds	r3, r7, #6
 800ab64:	1c0a      	adds	r2, r1, #0
 800ab66:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800ab68:	1dfb      	adds	r3, r7, #7
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	18d3      	adds	r3, r2, r3
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800ab74:	1dbb      	adds	r3, r7, #6
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	18d3      	adds	r3, r2, r3
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
}
 800ab80:	46c0      	nop			@ (mov r8, r8)
 800ab82:	46bd      	mov	sp, r7
 800ab84:	b004      	add	sp, #16
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0

    asm ("nop");
 800ab8c:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800ab8e:	4bd1      	ldr	r3, [pc, #836]	@ (800aed4 <tiempo+0x34c>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2b07      	cmp	r3, #7
 800ab94:	d900      	bls.n	800ab98 <tiempo+0x10>
 800ab96:	e194      	b.n	800aec2 <tiempo+0x33a>
			goto tiempo10;				//	jrult		tiempo10;
 800ab98:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800ab9a:	4bcf      	ldr	r3, [pc, #828]	@ (800aed8 <tiempo+0x350>)
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	4bcd      	ldr	r3, [pc, #820]	@ (800aed8 <tiempo+0x350>)
 800aba4:	801a      	strh	r2, [r3, #0]

			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800aba6:	4bcd      	ldr	r3, [pc, #820]	@ (800aedc <tiempo+0x354>)
 800aba8:	0018      	movs	r0, r3
 800abaa:	f7fa f9a8 	bl	8004efe <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800abae:	4bcc      	ldr	r3, [pc, #816]	@ (800aee0 <tiempo+0x358>)
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7fa f9a4 	bl	8004efe <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800abb6:	4bcb      	ldr	r3, [pc, #812]	@ (800aee4 <tiempo+0x35c>)
 800abb8:	0018      	movs	r0, r3
 800abba:	f7fa f9a0 	bl	8004efe <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800abbe:	4bca      	ldr	r3, [pc, #808]	@ (800aee8 <tiempo+0x360>)
 800abc0:	0018      	movs	r0, r3
 800abc2:	f7fa f99c 	bl	8004efe <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800abc6:	4bc9      	ldr	r3, [pc, #804]	@ (800aeec <tiempo+0x364>)
 800abc8:	0018      	movs	r0, r3
 800abca:	f7fa f998 	bl	8004efe <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800abce:	4bc8      	ldr	r3, [pc, #800]	@ (800aef0 <tiempo+0x368>)
 800abd0:	0018      	movs	r0, r3
 800abd2:	f7fa f994 	bl	8004efe <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800abd6:	4bc7      	ldr	r3, [pc, #796]	@ (800aef4 <tiempo+0x36c>)
 800abd8:	0018      	movs	r0, r3
 800abda:	f7fa f990 	bl	8004efe <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800abde:	4bc6      	ldr	r3, [pc, #792]	@ (800aef8 <tiempo+0x370>)
 800abe0:	0018      	movs	r0, r3
 800abe2:	f7fa f98c 	bl	8004efe <decwreg>

		       cntcent++;					//	Una centésima más
 800abe6:	4bc5      	ldr	r3, [pc, #788]	@ (800aefc <tiempo+0x374>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	3301      	adds	r3, #1
 800abec:	b2da      	uxtb	r2, r3
 800abee:	4bc3      	ldr	r3, [pc, #780]	@ (800aefc <tiempo+0x374>)
 800abf0:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800abf2:	4bc2      	ldr	r3, [pc, #776]	@ (800aefc <tiempo+0x374>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	001a      	movs	r2, r3
 800abf8:	2301      	movs	r3, #1
 800abfa:	4013      	ands	r3, r2
 800abfc:	d01c      	beq.n	800ac38 <tiempo+0xb0>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800abfe:	4bc0      	ldr	r3, [pc, #768]	@ (800af00 <tiempo+0x378>)
 800ac00:	0018      	movs	r0, r3
 800ac02:	f7fa f97c 	bl	8004efe <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800ac06:	4bbf      	ldr	r3, [pc, #764]	@ (800af04 <tiempo+0x37c>)
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7fa f978 	bl	8004efe <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800ac0e:	4bbe      	ldr	r3, [pc, #760]	@ (800af08 <tiempo+0x380>)
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7fa f974 	bl	8004efe <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800ac16:	4bbd      	ldr	r3, [pc, #756]	@ (800af0c <tiempo+0x384>)
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f7fa f970 	bl	8004efe <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800ac1e:	4bbc      	ldr	r3, [pc, #752]	@ (800af10 <tiempo+0x388>)
 800ac20:	0018      	movs	r0, r3
 800ac22:	f7fa f96c 	bl	8004efe <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800ac26:	4bbb      	ldr	r3, [pc, #748]	@ (800af14 <tiempo+0x38c>)
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f7fa f968 	bl	8004efe <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800ac2e:	4bba      	ldr	r3, [pc, #744]	@ (800af18 <tiempo+0x390>)
 800ac30:	0018      	movs	r0, r3
 800ac32:	f7fa f964 	bl	8004efe <decwreg>
 800ac36:	e000      	b.n	800ac3a <tiempo+0xb2>
			        goto no_dec_deb;
 800ac38:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800ac3a:	4bb0      	ldr	r3, [pc, #704]	@ (800aefc <tiempo+0x374>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b63      	cmp	r3, #99	@ 0x63
 800ac40:	d800      	bhi.n	800ac44 <tiempo+0xbc>
 800ac42:	e140      	b.n	800aec6 <tiempo+0x33e>
		        	goto tiempo12;			//;jruge		tiempo12
 800ac44:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;					//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800ac46:	4bad      	ldr	r3, [pc, #692]	@ (800aefc <tiempo+0x374>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	701a      	strb	r2, [r3, #0]
				if (flagsTime [f_timeConfigRTC]){ //btjt salta si es = 1--- flagsTime,#f_timeConfigRTC,noIncTime; ***********************
 800ac4c:	4bb3      	ldr	r3, [pc, #716]	@ (800af1c <tiempo+0x394>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d110      	bne.n	800ac76 <tiempo+0xee>
					goto	noIncTime;
				}
				timeSeconds_LW++;				// Incrementa parte baja del tiempo UNIX
 800ac54:	4bb2      	ldr	r3, [pc, #712]	@ (800af20 <tiempo+0x398>)
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	4bb0      	ldr	r3, [pc, #704]	@ (800af20 <tiempo+0x398>)
 800ac5e:	801a      	strh	r2, [r3, #0]
    		    if(timeSeconds_LW){  			//JRNE		no_inc_timeH;			/ Hubo overflow ?
 800ac60:	4baf      	ldr	r3, [pc, #700]	@ (800af20 <tiempo+0x398>)
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d108      	bne.n	800ac7a <tiempo+0xf2>
    		    	goto no_inc_timeH;			//
    		    }
    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
 800ac68:	4bae      	ldr	r3, [pc, #696]	@ (800af24 <tiempo+0x39c>)
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	4bac      	ldr	r3, [pc, #688]	@ (800af24 <tiempo+0x39c>)
 800ac72:	801a      	strh	r2, [r3, #0]
 800ac74:	e002      	b.n	800ac7c <tiempo+0xf4>
					goto	noIncTime;
 800ac76:	46c0      	nop			@ (mov r8, r8)
 800ac78:	e000      	b.n	800ac7c <tiempo+0xf4>
    		    	goto no_inc_timeH;			//
 800ac7a:	46c0      	nop			@ (mov r8, r8)
no_inc_timeH:

noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800ac7c:	4baa      	ldr	r3, [pc, #680]	@ (800af28 <tiempo+0x3a0>)
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f7fa f92b 	bl	8004eda <decword>
		    	decwreg(&timeTxTWF);
 800ac84:	4ba9      	ldr	r3, [pc, #676]	@ (800af2c <tiempo+0x3a4>)
 800ac86:	0018      	movs	r0, r3
 800ac88:	f7fa f939 	bl	8004efe <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800ac8c:	4ba8      	ldr	r3, [pc, #672]	@ (800af30 <tiempo+0x3a8>)
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f7fa f923 	bl	8004eda <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800ac94:	4ba7      	ldr	r3, [pc, #668]	@ (800af34 <tiempo+0x3ac>)
 800ac96:	0018      	movs	r0, r3
 800ac98:	f7fa f931 	bl	8004efe <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800ac9c:	4ba6      	ldr	r3, [pc, #664]	@ (800af38 <tiempo+0x3b0>)
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f7fa f92d 	bl	8004efe <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800aca4:	4ba5      	ldr	r3, [pc, #660]	@ (800af3c <tiempo+0x3b4>)
 800aca6:	0018      	movs	r0, r3
 800aca8:	f7fa f929 	bl	8004efe <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800acac:	4ba4      	ldr	r3, [pc, #656]	@ (800af40 <tiempo+0x3b8>)
 800acae:	0018      	movs	r0, r3
 800acb0:	f7fa f925 	bl	8004efe <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800acb4:	4ba3      	ldr	r3, [pc, #652]	@ (800af44 <tiempo+0x3bc>)
 800acb6:	0018      	movs	r0, r3
 800acb8:	f7fa f921 	bl	8004efe <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800acbc:	4ba2      	ldr	r3, [pc, #648]	@ (800af48 <tiempo+0x3c0>)
 800acbe:	0018      	movs	r0, r3
 800acc0:	f7fa f91d 	bl	8004efe <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800acc4:	4ba1      	ldr	r3, [pc, #644]	@ (800af4c <tiempo+0x3c4>)
 800acc6:	0018      	movs	r0, r3
 800acc8:	f7fa f907 	bl	8004eda <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800accc:	4ba0      	ldr	r3, [pc, #640]	@ (800af50 <tiempo+0x3c8>)
 800acce:	0018      	movs	r0, r3
 800acd0:	f7fa f915 	bl	8004efe <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800acd4:	4b9f      	ldr	r3, [pc, #636]	@ (800af54 <tiempo+0x3cc>)
 800acd6:	0018      	movs	r0, r3
 800acd8:	f7fa f911 	bl	8004efe <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800acdc:	4b9e      	ldr	r3, [pc, #632]	@ (800af58 <tiempo+0x3d0>)
 800acde:	0018      	movs	r0, r3
 800ace0:	f7fa f90d 	bl	8004efe <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800ace4:	4b9d      	ldr	r3, [pc, #628]	@ (800af5c <tiempo+0x3d4>)
 800ace6:	0018      	movs	r0, r3
 800ace8:	f7fa f909 	bl	8004efe <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800acec:	4b9c      	ldr	r3, [pc, #624]	@ (800af60 <tiempo+0x3d8>)
 800acee:	0018      	movs	r0, r3
 800acf0:	f7fa f905 	bl	8004efe <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800acf4:	4b9b      	ldr	r3, [pc, #620]	@ (800af64 <tiempo+0x3dc>)
 800acf6:	0018      	movs	r0, r3
 800acf8:	f7fa f901 	bl	8004efe <decwreg>
		    	decwreg(&valflvl);//
 800acfc:	4b9a      	ldr	r3, [pc, #616]	@ (800af68 <tiempo+0x3e0>)
 800acfe:	0018      	movs	r0, r3
 800ad00:	f7fa f8fd 	bl	8004efe <decwreg>
		    	decwreg(&valfhvl);//
 800ad04:	4b99      	ldr	r3, [pc, #612]	@ (800af6c <tiempo+0x3e4>)
 800ad06:	0018      	movs	r0, r3
 800ad08:	f7fa f8f9 	bl	8004efe <decwreg>
		    	decwreg(&cnt_prog);//
 800ad0c:	4b98      	ldr	r3, [pc, #608]	@ (800af70 <tiempo+0x3e8>)
 800ad0e:	0018      	movs	r0, r3
 800ad10:	f7fa f8f5 	bl	8004efe <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800ad14:	4b97      	ldr	r3, [pc, #604]	@ (800af74 <tiempo+0x3ec>)
 800ad16:	0018      	movs	r0, r3
 800ad18:	f7fa f8f1 	bl	8004efe <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800ad1c:	4b96      	ldr	r3, [pc, #600]	@ (800af78 <tiempo+0x3f0>)
 800ad1e:	0018      	movs	r0, r3
 800ad20:	f7fa f8ed 	bl	8004efe <decwreg>
		    	decwreg(&End_sec);//
 800ad24:	4b95      	ldr	r3, [pc, #596]	@ (800af7c <tiempo+0x3f4>)
 800ad26:	0018      	movs	r0, r3
 800ad28:	f7fa f8e9 	bl	8004efe <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800ad2c:	4b94      	ldr	r3, [pc, #592]	@ (800af80 <tiempo+0x3f8>)
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f7fa f8d3 	bl	8004eda <decword>

		    	decwreg(&timeOutRst);
 800ad34:	4b93      	ldr	r3, [pc, #588]	@ (800af84 <tiempo+0x3fc>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f7fa f8e1 	bl	8004efe <decwreg>
		    	decwreg(&timeOutRx);
 800ad3c:	4b92      	ldr	r3, [pc, #584]	@ (800af88 <tiempo+0x400>)
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f7fa f8dd 	bl	8004efe <decwreg>
		    	decwreg(&timeRstBLE);
 800ad44:	4b91      	ldr	r3, [pc, #580]	@ (800af8c <tiempo+0x404>)
 800ad46:	0018      	movs	r0, r3
 800ad48:	f7fa f8d9 	bl	8004efe <decwreg>
		    	decword(&cntLogger_H);			// decrementra contador de logger
 800ad4c:	4b90      	ldr	r3, [pc, #576]	@ (800af90 <tiempo+0x408>)
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f7fa f8c3 	bl	8004eda <decword>
		    	decwreg(&cntInitTx);
 800ad54:	4b8f      	ldr	r3, [pc, #572]	@ (800af94 <tiempo+0x40c>)
 800ad56:	0018      	movs	r0, r3
 800ad58:	f7fa f8d1 	bl	8004efe <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800ad5c:	4b8e      	ldr	r3, [pc, #568]	@ (800af98 <tiempo+0x410>)
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f7fa f8bb 	bl	8004eda <decword>

		    	decword(&t_ahorro1_H);
 800ad64:	4b8d      	ldr	r3, [pc, #564]	@ (800af9c <tiempo+0x414>)
 800ad66:	0018      	movs	r0, r3
 800ad68:	f7fa f8b7 	bl	8004eda <decword>
		    	decword(&t_ahorro2_H);
 800ad6c:	4b8c      	ldr	r3, [pc, #560]	@ (800afa0 <tiempo+0x418>)
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f7fa f8b3 	bl	8004eda <decword>
		    	decword(&cntNoct_H);
 800ad74:	4b8b      	ldr	r3, [pc, #556]	@ (800afa4 <tiempo+0x41c>)
 800ad76:	0018      	movs	r0, r3
 800ad78:	f7fa f8af 	bl	8004eda <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800ad7c:	4b76      	ldr	r3, [pc, #472]	@ (800af58 <tiempo+0x3d0>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	001a      	movs	r2, r3
 800ad82:	2301      	movs	r3, #1
 800ad84:	4013      	ands	r3, r2
 800ad86:	d104      	bne.n	800ad92 <tiempo+0x20a>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800ad88:	4b87      	ldr	r3, [pc, #540]	@ (800afa8 <tiempo+0x420>)
 800ad8a:	0018      	movs	r0, r3
 800ad8c:	f7fa f8b7 	bl	8004efe <decwreg>
 800ad90:	e000      	b.n	800ad94 <tiempo+0x20c>
		    		goto no_dec2;
 800ad92:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800ad94:	4b85      	ldr	r3, [pc, #532]	@ (800afac <tiempo+0x424>)
 800ad96:	0018      	movs	r0, r3
 800ad98:	f7fa f89f 	bl	8004eda <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800ad9c:	4b84      	ldr	r3, [pc, #528]	@ (800afb0 <tiempo+0x428>)
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f7fa f89b 	bl	8004eda <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800ada4:	4b83      	ldr	r3, [pc, #524]	@ (800afb4 <tiempo+0x42c>)
 800ada6:	0018      	movs	r0, r3
 800ada8:	f7fa f897 	bl	8004eda <decword>
		    	decword(&drp_fanh);
 800adac:	4b82      	ldr	r3, [pc, #520]	@ (800afb8 <tiempo+0x430>)
 800adae:	0018      	movs	r0, r3
 800adb0:	f7fa f893 	bl	8004eda <decword>
		    	decword(&drp_comph);
 800adb4:	4b81      	ldr	r3, [pc, #516]	@ (800afbc <tiempo+0x434>)
 800adb6:	0018      	movs	r0, r3
 800adb8:	f7fa f88f 	bl	8004eda <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800adbc:	4b80      	ldr	r3, [pc, #512]	@ (800afc0 <tiempo+0x438>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	001a      	movs	r2, r3
 800adc2:	4b80      	ldr	r3, [pc, #512]	@ (800afc4 <tiempo+0x43c>)
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d204      	bcs.n	800add4 <tiempo+0x24c>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800adca:	4b7f      	ldr	r3, [pc, #508]	@ (800afc8 <tiempo+0x440>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d006      	beq.n	800ade0 <tiempo+0x258>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800add2:	e000      	b.n	800add6 <tiempo+0x24e>
		    		goto tiempo_17;
 800add4:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800add6:	4b7a      	ldr	r3, [pc, #488]	@ (800afc0 <tiempo+0x438>)
 800add8:	0018      	movs	r0, r3
 800adda:	f7fa f87e 	bl	8004eda <decword>
 800adde:	e000      	b.n	800ade2 <tiempo+0x25a>
	        	goto tiempo20; //jra tiempo20
 800ade0:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800ade2:	4b7a      	ldr	r3, [pc, #488]	@ (800afcc <tiempo+0x444>)
 800ade4:	0018      	movs	r0, r3
 800ade6:	f7fa f878 	bl	8004eda <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800adea:	4b79      	ldr	r3, [pc, #484]	@ (800afd0 <tiempo+0x448>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	3301      	adds	r3, #1
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	4b77      	ldr	r3, [pc, #476]	@ (800afd0 <tiempo+0x448>)
 800adf4:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800adf6:	4b76      	ldr	r3, [pc, #472]	@ (800afd0 <tiempo+0x448>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b3b      	cmp	r3, #59	@ 0x3b
 800adfc:	d907      	bls.n	800ae0e <tiempo+0x286>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800adfe:	4b74      	ldr	r3, [pc, #464]	@ (800afd0 <tiempo+0x448>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800ae04:	4b73      	ldr	r3, [pc, #460]	@ (800afd4 <tiempo+0x44c>)
 800ae06:	0018      	movs	r0, r3
 800ae08:	f7fa f879 	bl	8004efe <decwreg>
 800ae0c:	e000      	b.n	800ae10 <tiempo+0x288>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800ae0e:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	4a70      	ldr	r2, [pc, #448]	@ (800afd8 <tiempo+0x450>)
 800ae16:	0019      	movs	r1, r3
 800ae18:	0010      	movs	r0, r2
 800ae1a:	f006 f963 	bl	80110e4 <HAL_GPIO_TogglePin>
				if(GetRegFlagState(cntseg, 3)){
 800ae1e:	4b6f      	ldr	r3, [pc, #444]	@ (800afdc <tiempo+0x454>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	001a      	movs	r2, r3
 800ae24:	2308      	movs	r3, #8
 800ae26:	4013      	ands	r3, r2
 800ae28:	d001      	beq.n	800ae2e <tiempo+0x2a6>
					asm ("nop");
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	e000      	b.n	800ae30 <tiempo+0x2a8>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800ae2e:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800ae30:	4b6a      	ldr	r3, [pc, #424]	@ (800afdc <tiempo+0x454>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	4b68      	ldr	r3, [pc, #416]	@ (800afdc <tiempo+0x454>)
 800ae3a:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800ae3c:	4b67      	ldr	r3, [pc, #412]	@ (800afdc <tiempo+0x454>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b08      	cmp	r3, #8
 800ae42:	d903      	bls.n	800ae4c <tiempo+0x2c4>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800ae44:	4b66      	ldr	r3, [pc, #408]	@ (800afe0 <tiempo+0x458>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	e000      	b.n	800ae4e <tiempo+0x2c6>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800ae4c:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800ae4e:	4b63      	ldr	r3, [pc, #396]	@ (800afdc <tiempo+0x454>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	001a      	movs	r2, r3
 800ae54:	2310      	movs	r3, #16
 800ae56:	4013      	ands	r3, r2
 800ae58:	d003      	beq.n	800ae62 <tiempo+0x2da>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800ae5a:	4b61      	ldr	r3, [pc, #388]	@ (800afe0 <tiempo+0x458>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	71da      	strb	r2, [r3, #7]
 800ae60:	e000      	b.n	800ae64 <tiempo+0x2dc>
					goto	tiempo_j01;		// Ya son 16 segundos?
 800ae62:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800ae64:	4b5d      	ldr	r3, [pc, #372]	@ (800afdc <tiempo+0x454>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b3b      	cmp	r3, #59	@ 0x3b
 800ae6a:	d92e      	bls.n	800aeca <tiempo+0x342>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800ae6c:	4b5b      	ldr	r3, [pc, #364]	@ (800afdc <tiempo+0x454>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800ae72:	4b5c      	ldr	r3, [pc, #368]	@ (800afe4 <tiempo+0x45c>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800ae78:	4b5b      	ldr	r3, [pc, #364]	@ (800afe8 <tiempo+0x460>)
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	f7fa f83f 	bl	8004efe <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800ae80:	4b5a      	ldr	r3, [pc, #360]	@ (800afec <tiempo+0x464>)
 800ae82:	0018      	movs	r0, r3
 800ae84:	f7fa f83b 	bl	8004efe <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800ae88:	4b59      	ldr	r3, [pc, #356]	@ (800aff0 <tiempo+0x468>)
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f7fa f837 	bl	8004efe <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800ae90:	4b58      	ldr	r3, [pc, #352]	@ (800aff4 <tiempo+0x46c>)
 800ae92:	0018      	movs	r0, r3
 800ae94:	f7fa f833 	bl	8004efe <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800ae98:	4b57      	ldr	r3, [pc, #348]	@ (800aff8 <tiempo+0x470>)
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f7fa f82f 	bl	8004efe <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800aea0:	4b56      	ldr	r3, [pc, #344]	@ (800affc <tiempo+0x474>)
 800aea2:	0018      	movs	r0, r3
 800aea4:	f7fa f819 	bl	8004eda <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800aea8:	4b55      	ldr	r3, [pc, #340]	@ (800b000 <tiempo+0x478>)
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f7fa f815 	bl	8004eda <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800aeb0:	4b54      	ldr	r3, [pc, #336]	@ (800b004 <tiempo+0x47c>)
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f7fa f811 	bl	8004eda <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800aeb8:	4b53      	ldr	r3, [pc, #332]	@ (800b008 <tiempo+0x480>)
 800aeba:	0018      	movs	r0, r3
 800aebc:	f7fa f81f 	bl	8004efe <decwreg>
	    		 goto fintiem;
 800aec0:	e004      	b.n	800aecc <tiempo+0x344>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	e002      	b.n	800aecc <tiempo+0x344>
		        goto fintiem;
 800aec6:	46c0      	nop			@ (mov r8, r8)
 800aec8:	e000      	b.n	800aecc <tiempo+0x344>
					goto fintiem;				//jrult fintiem
 800aeca:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800aecc:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800aece:	46c0      	nop			@ (mov r8, r8)
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20000bde 	.word	0x20000bde
 800aed8:	20000b6e 	.word	0x20000b6e
 800aedc:	20001084 	.word	0x20001084
 800aee0:	200010bd 	.word	0x200010bd
 800aee4:	20000be2 	.word	0x20000be2
 800aee8:	20000be9 	.word	0x20000be9
 800aeec:	20000c40 	.word	0x20000c40
 800aef0:	20000c41 	.word	0x20000c41
 800aef4:	20000c42 	.word	0x20000c42
 800aef8:	20000c54 	.word	0x20000c54
 800aefc:	20000b6c 	.word	0x20000b6c
 800af00:	20000c30 	.word	0x20000c30
 800af04:	20000c31 	.word	0x20000c31
 800af08:	20000c32 	.word	0x20000c32
 800af0c:	20000c33 	.word	0x20000c33
 800af10:	20000c34 	.word	0x20000c34
 800af14:	20000c35 	.word	0x20000c35
 800af18:	20000c36 	.word	0x20000c36
 800af1c:	20001088 	.word	0x20001088
 800af20:	20000dd2 	.word	0x20000dd2
 800af24:	20000dd0 	.word	0x20000dd0
 800af28:	20000ef8 	.word	0x20000ef8
 800af2c:	20000f5a 	.word	0x20000f5a
 800af30:	20000f6c 	.word	0x20000f6c
 800af34:	20000f9a 	.word	0x20000f9a
 800af38:	20000f9b 	.word	0x20000f9b
 800af3c:	20001086 	.word	0x20001086
 800af40:	200010be 	.word	0x200010be
 800af44:	20000f07 	.word	0x20000f07
 800af48:	200010c4 	.word	0x200010c4
 800af4c:	20000fc0 	.word	0x20000fc0
 800af50:	20000b8a 	.word	0x20000b8a
 800af54:	20000b8b 	.word	0x20000b8b
 800af58:	20000b8c 	.word	0x20000b8c
 800af5c:	20000b8d 	.word	0x20000b8d
 800af60:	20000b8e 	.word	0x20000b8e
 800af64:	20000b8f 	.word	0x20000b8f
 800af68:	20000b90 	.word	0x20000b90
 800af6c:	20000b91 	.word	0x20000b91
 800af70:	20000b92 	.word	0x20000b92
 800af74:	20000b93 	.word	0x20000b93
 800af78:	20000b94 	.word	0x20000b94
 800af7c:	20000b95 	.word	0x20000b95
 800af80:	20000c56 	.word	0x20000c56
 800af84:	20000f05 	.word	0x20000f05
 800af88:	20000f06 	.word	0x20000f06
 800af8c:	20000f08 	.word	0x20000f08
 800af90:	20000db8 	.word	0x20000db8
 800af94:	20000e3a 	.word	0x20000e3a
 800af98:	20000f6e 	.word	0x20000f6e
 800af9c:	20000c50 	.word	0x20000c50
 800afa0:	20000c52 	.word	0x20000c52
 800afa4:	20000c64 	.word	0x20000c64
 800afa8:	20000c48 	.word	0x20000c48
 800afac:	20000b88 	.word	0x20000b88
 800afb0:	20000b82 	.word	0x20000b82
 800afb4:	20000b86 	.word	0x20000b86
 800afb8:	20000c1c 	.word	0x20000c1c
 800afbc:	20000c1a 	.word	0x20000c1a
 800afc0:	20000bd6 	.word	0x20000bd6
 800afc4:	20000bdc 	.word	0x20000bdc
 800afc8:	20000b78 	.word	0x20000b78
 800afcc:	20000bd8 	.word	0x20000bd8
 800afd0:	20000b75 	.word	0x20000b75
 800afd4:	20000be7 	.word	0x20000be7
 800afd8:	50000400 	.word	0x50000400
 800afdc:	20000b6d 	.word	0x20000b6d
 800afe0:	20000b98 	.word	0x20000b98
 800afe4:	20000bf8 	.word	0x20000bf8
 800afe8:	20000c47 	.word	0x20000c47
 800afec:	20000c18 	.word	0x20000c18
 800aff0:	20000c19 	.word	0x20000c19
 800aff4:	20000be8 	.word	0x20000be8
 800aff8:	20000beb 	.word	0x20000beb
 800affc:	20000b84 	.word	0x20000b84
 800b000:	20000c4c 	.word	0x20000c4c
 800b004:	20000c4e 	.word	0x20000c4e
 800b008:	20000c71 	.word	0x20000c71

0800b00c <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800b012:	4b6f      	ldr	r3, [pc, #444]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b014:	789b      	ldrb	r3, [r3, #2]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d023      	beq.n	800b062 <tx_buffer_prep+0x56>
			goto	tx_header;
 800b01a:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800b01c:	4b6d      	ldr	r3, [pc, #436]	@ (800b1d4 <tx_buffer_prep+0x1c8>)
 800b01e:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800b020:	4b6d      	ldr	r3, [pc, #436]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b022:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	4b6c      	ldr	r3, [pc, #432]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b02a:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800b02c:	4b6b      	ldr	r3, [pc, #428]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800b034:	4b69      	ldr	r3, [pc, #420]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	0018      	movs	r0, r3
 800b03a:	f7f9 ff33 	bl	8004ea4 <build_chksum>
	    	point_X++;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3301      	adds	r3, #1
 800b042:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	3301      	adds	r3, #1
 800b048:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4b64      	ldr	r3, [pc, #400]	@ (800b1e0 <tx_buffer_prep+0x1d4>)
 800b04e:	429a      	cmp	r2, r3
 800b050:	d800      	bhi.n	800b054 <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800b052:	e7e7      	b.n	800b024 <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800b054:	4b63      	ldr	r3, [pc, #396]	@ (800b1e4 <tx_buffer_prep+0x1d8>)
 800b056:	2208      	movs	r2, #8
 800b058:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800b05a:	4b5d      	ldr	r3, [pc, #372]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800b060:	e0b1      	b.n	800b1c6 <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800b062:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800b064:	4b5a      	ldr	r3, [pc, #360]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	4053      	eors	r3, r2
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d107      	bne.n	800b082 <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800b072:	4b57      	ldr	r3, [pc, #348]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b074:	785b      	ldrb	r3, [r3, #1]
 800b076:	2201      	movs	r2, #1
 800b078:	4053      	eors	r3, r2
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d140      	bne.n	800b102 <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800b080:	e000      	b.n	800b084 <tx_buffer_prep+0x78>
			goto	notest;
 800b082:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800b084:	4b58      	ldr	r3, [pc, #352]	@ (800b1e8 <tx_buffer_prep+0x1dc>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	4b58      	ldr	r3, [pc, #352]	@ (800b1ec <tx_buffer_prep+0x1e0>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d33a      	bcc.n	800b106 <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800b090:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800b092:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b094:	78db      	ldrb	r3, [r3, #3]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d122      	bne.n	800b0e0 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800b09a:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b09c:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800b09e:	4b54      	ldr	r3, [pc, #336]	@ (800b1f0 <tx_buffer_prep+0x1e4>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800b0a4:	4b53      	ldr	r3, [pc, #332]	@ (800b1f4 <tx_buffer_prep+0x1e8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	0e1b      	lsrs	r3, r3, #24
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	4b4a      	ldr	r3, [pc, #296]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b0ae:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800b0b0:	4b50      	ldr	r3, [pc, #320]	@ (800b1f4 <tx_buffer_prep+0x1e8>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	0c1b      	lsrs	r3, r3, #16
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	4b47      	ldr	r3, [pc, #284]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b0ba:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800b0bc:	4b4d      	ldr	r3, [pc, #308]	@ (800b1f4 <tx_buffer_prep+0x1e8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	4b44      	ldr	r3, [pc, #272]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b0c6:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800b0c8:	4b4a      	ldr	r3, [pc, #296]	@ (800b1f4 <tx_buffer_prep+0x1e8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	4b42      	ldr	r3, [pc, #264]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b0d0:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800b0d2:	4b44      	ldr	r3, [pc, #272]	@ (800b1e4 <tx_buffer_prep+0x1d8>)
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800b0d8:	4b3d      	ldr	r3, [pc, #244]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800b0de:	e072      	b.n	800b1c6 <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800b0e0:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800b0e2:	4b45      	ldr	r3, [pc, #276]	@ (800b1f8 <tx_buffer_prep+0x1ec>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800b0e8:	4b39      	ldr	r3, [pc, #228]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800b0ee:	4b38      	ldr	r3, [pc, #224]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800b0f4:	4b41      	ldr	r3, [pc, #260]	@ (800b1fc <tx_buffer_prep+0x1f0>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800b0fa:	4b40      	ldr	r3, [pc, #256]	@ (800b1fc <tx_buffer_prep+0x1f0>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800b100:	e061      	b.n	800b1c6 <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	e000      	b.n	800b108 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800b106:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800b108:	4b37      	ldr	r3, [pc, #220]	@ (800b1e8 <tx_buffer_prep+0x1dc>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800b10e:	4b32      	ldr	r3, [pc, #200]	@ (800b1d8 <tx_buffer_prep+0x1cc>)
 800b110:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800b112:	4b37      	ldr	r3, [pc, #220]	@ (800b1f0 <tx_buffer_prep+0x1e4>)
 800b114:	2200      	movs	r2, #0
 800b116:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	4b2f      	ldr	r3, [pc, #188]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b11e:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800b120:	4b37      	ldr	r3, [pc, #220]	@ (800b200 <tx_buffer_prep+0x1f4>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d111      	bne.n	800b14c <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800b128:	4b34      	ldr	r3, [pc, #208]	@ (800b1fc <tx_buffer_prep+0x1f0>)
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d107      	bne.n	800b140 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800b130:	4b32      	ldr	r3, [pc, #200]	@ (800b1fc <tx_buffer_prep+0x1f0>)
 800b132:	795b      	ldrb	r3, [r3, #5]
 800b134:	2201      	movs	r2, #1
 800b136:	4053      	eors	r3, r2
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d108      	bne.n	800b150 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800b13e:	e000      	b.n	800b142 <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800b140:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	4b25      	ldr	r3, [pc, #148]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e002      	b.n	800b152 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800b14c:	46c0      	nop			@ (mov r8, r8)
 800b14e:	e000      	b.n	800b152 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800b150:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800b152:	4b22      	ldr	r3, [pc, #136]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3301      	adds	r3, #1
 800b15e:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800b166:	4b22      	ldr	r3, [pc, #136]	@ (800b1f0 <tx_buffer_prep+0x1e4>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	3301      	adds	r3, #1
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	4b20      	ldr	r3, [pc, #128]	@ (800b1f0 <tx_buffer_prep+0x1e4>)
 800b170:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800b172:	4b1a      	ldr	r3, [pc, #104]	@ (800b1dc <tx_buffer_prep+0x1d0>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	0018      	movs	r0, r3
 800b178:	f7f9 fe94 	bl	8004ea4 <build_chksum>

		if(!flagsTX [0]){
 800b17c:	4b14      	ldr	r3, [pc, #80]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2201      	movs	r2, #1
 800b182:	4053      	eors	r3, r2
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800b18a:	4b1e      	ldr	r3, [pc, #120]	@ (800b204 <tx_buffer_prep+0x1f8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d108      	bne.n	800b1a6 <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800b194:	4b1c      	ldr	r3, [pc, #112]	@ (800b208 <tx_buffer_prep+0x1fc>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800b19a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d0 <tx_buffer_prep+0x1c4>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	705a      	strb	r2, [r3, #1]
 800b1a0:	e002      	b.n	800b1a8 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	e000      	b.n	800b1a8 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800b1a6:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800b1a8:	4b11      	ldr	r3, [pc, #68]	@ (800b1f0 <tx_buffer_prep+0x1e4>)
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	4b17      	ldr	r3, [pc, #92]	@ (800b20c <tx_buffer_prep+0x200>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d200      	bcs.n	800b1b6 <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800b1b4:	e7b0      	b.n	800b118 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1e8 <tx_buffer_prep+0x1dc>)
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800b1bc:	4b13      	ldr	r3, [pc, #76]	@ (800b20c <tx_buffer_prep+0x200>)
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	4b08      	ldr	r3, [pc, #32]	@ (800b1e4 <tx_buffer_prep+0x1d8>)
 800b1c2:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800b1c4:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800b1c6:	46c0      	nop			@ (mov r8, r8)
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	b002      	add	sp, #8
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	20000e3c 	.word	0x20000e3c
 800b1d4:	20000df8 	.word	0x20000df8
 800b1d8:	20000e58 	.word	0x20000e58
 800b1dc:	20000920 	.word	0x20000920
 800b1e0:	20000dff 	.word	0x20000dff
 800b1e4:	20000e52 	.word	0x20000e52
 800b1e8:	20000e34 	.word	0x20000e34
 800b1ec:	20000e30 	.word	0x20000e30
 800b1f0:	20000e38 	.word	0x20000e38
 800b1f4:	20000e54 	.word	0x20000e54
 800b1f8:	20000e39 	.word	0x20000e39
 800b1fc:	20000e24 	.word	0x20000e24
 800b200:	20000efc 	.word	0x20000efc
 800b204:	20000e4c 	.word	0x20000e4c
 800b208:	20000e48 	.word	0x20000e48
 800b20c:	20000e50 	.word	0x20000e50

0800b210 <tx_control>:
uint32_t    direccion_fw = 0x8018800;
uint32_t    direccion_borrado = 0x8018800;

uint32_t   chksum_to_compare = 0;

void tx_control(void){
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b091      	sub	sp, #68	@ 0x44
 800b214:	af00      	add	r7, sp, #0
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800b216:	4bd9      	ldr	r3, [pc, #868]	@ (800b57c <tx_control+0x36c>)
 800b218:	781a      	ldrb	r2, [r3, #0]
 800b21a:	4bd9      	ldr	r3, [pc, #868]	@ (800b580 <tx_control+0x370>)
 800b21c:	795b      	ldrb	r3, [r3, #5]
 800b21e:	4313      	orrs	r3, r2
 800b220:	b2da      	uxtb	r2, r3
 800b222:	4bd7      	ldr	r3, [pc, #860]	@ (800b580 <tx_control+0x370>)
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	4313      	orrs	r3, r2
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	4bd6      	ldr	r3, [pc, #856]	@ (800b584 <tx_control+0x374>)
 800b22c:	78db      	ldrb	r3, [r3, #3]
 800b22e:	4313      	orrs	r3, r2
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4bd4      	ldr	r3, [pc, #848]	@ (800b584 <tx_control+0x374>)
 800b234:	791b      	ldrb	r3, [r3, #4]
 800b236:	4313      	orrs	r3, r2
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d000      	beq.n	800b240 <tx_control+0x30>
 800b23e:	e075      	b.n	800b32c <tx_control+0x11c>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800b240:	4bd1      	ldr	r3, [pc, #836]	@ (800b588 <tx_control+0x378>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d16b      	bne.n	800b320 <tx_control+0x110>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800b248:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800b24a:	4bd0      	ldr	r3, [pc, #832]	@ (800b58c <tx_control+0x37c>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d000      	beq.n	800b254 <tx_control+0x44>
 800b252:	e077      	b.n	800b344 <tx_control+0x134>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800b254:	4bce      	ldr	r3, [pc, #824]	@ (800b590 <tx_control+0x380>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d146      	bne.n	800b2ea <tx_control+0xda>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800b25c:	4bcc      	ldr	r3, [pc, #816]	@ (800b590 <tx_control+0x380>)
 800b25e:	221e      	movs	r2, #30
 800b260:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800b262:	4bcc      	ldr	r3, [pc, #816]	@ (800b594 <tx_control+0x384>)
 800b264:	2240      	movs	r2, #64	@ 0x40
 800b266:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800b268:	4bca      	ldr	r3, [pc, #808]	@ (800b594 <tx_control+0x384>)
 800b26a:	22f8      	movs	r2, #248	@ 0xf8
 800b26c:	705a      	strb	r2, [r3, #1]
		bufferTxControl[2] = eeLat1;	//ldw X,eeLat1
 800b26e:	4bca      	ldr	r3, [pc, #808]	@ (800b598 <tx_control+0x388>)
 800b270:	781a      	ldrb	r2, [r3, #0]
 800b272:	4bc8      	ldr	r3, [pc, #800]	@ (800b594 <tx_control+0x384>)
 800b274:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = eeLat2;	//ldw bufferTxControl+2,X
 800b276:	4bc9      	ldr	r3, [pc, #804]	@ (800b59c <tx_control+0x38c>)
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	4bc6      	ldr	r3, [pc, #792]	@ (800b594 <tx_control+0x384>)
 800b27c:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = eeLat3;	//ldw X,eeLat3
 800b27e:	4bc8      	ldr	r3, [pc, #800]	@ (800b5a0 <tx_control+0x390>)
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	4bc4      	ldr	r3, [pc, #784]	@ (800b594 <tx_control+0x384>)
 800b284:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = eeLat4;	//ldw bufferTxControl+4,X
 800b286:	4bc7      	ldr	r3, [pc, #796]	@ (800b5a4 <tx_control+0x394>)
 800b288:	781a      	ldrb	r2, [r3, #0]
 800b28a:	4bc2      	ldr	r3, [pc, #776]	@ (800b594 <tx_control+0x384>)
 800b28c:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
 800b28e:	4bc6      	ldr	r3, [pc, #792]	@ (800b5a8 <tx_control+0x398>)
 800b290:	781a      	ldrb	r2, [r3, #0]
 800b292:	4bc0      	ldr	r3, [pc, #768]	@ (800b594 <tx_control+0x384>)
 800b294:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
 800b296:	4bc5      	ldr	r3, [pc, #788]	@ (800b5ac <tx_control+0x39c>)
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	4bbe      	ldr	r3, [pc, #760]	@ (800b594 <tx_control+0x384>)
 800b29c:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
 800b29e:	4bc4      	ldr	r3, [pc, #784]	@ (800b5b0 <tx_control+0x3a0>)
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	4bbc      	ldr	r3, [pc, #752]	@ (800b594 <tx_control+0x384>)
 800b2a4:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X
 800b2a6:	4bc3      	ldr	r3, [pc, #780]	@ (800b5b4 <tx_control+0x3a4>)
 800b2a8:	781a      	ldrb	r2, [r3, #0]
 800b2aa:	4bba      	ldr	r3, [pc, #744]	@ (800b594 <tx_control+0x384>)
 800b2ac:	725a      	strb	r2, [r3, #9]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800b2ae:	4bc2      	ldr	r3, [pc, #776]	@ (800b5b8 <tx_control+0x3a8>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800b2b4:	4bb7      	ldr	r3, [pc, #732]	@ (800b594 <tx_control+0x384>)
 800b2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pointTx = point_X;				// ldw		pointTx,X
 800b2b8:	4bc0      	ldr	r3, [pc, #768]	@ (800b5bc <tx_control+0x3ac>)
 800b2ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2bc:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800b2be:	4bc0      	ldr	r3, [pc, #768]	@ (800b5c0 <tx_control+0x3b0>)
 800b2c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2c2:	601a      	str	r2, [r3, #0]

		pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
 800b2c4:	4bbf      	ldr	r3, [pc, #764]	@ (800b5c4 <tx_control+0x3b4>)
 800b2c6:	4ac0      	ldr	r2, [pc, #768]	@ (800b5c8 <tx_control+0x3b8>)
 800b2c8:	601a      	str	r2, [r3, #0]
    										// ldw		pointEndTx,X
		blockSizeTX = 10;						// mov		blockSizeTX,#10
 800b2ca:	4bc0      	ldr	r3, [pc, #768]	@ (800b5cc <tx_control+0x3bc>)
 800b2cc:	220a      	movs	r2, #10
 800b2ce:	701a      	strb	r2, [r3, #0]

		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800b2d0:	4bbf      	ldr	r3, [pc, #764]	@ (800b5d0 <tx_control+0x3c0>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800b2d6:	4bb8      	ldr	r3, [pc, #736]	@ (800b5b8 <tx_control+0x3a8>)
 800b2d8:	2201      	movs	r2, #1
 800b2da:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800b2dc:	4bab      	ldr	r3, [pc, #684]	@ (800b58c <tx_control+0x37c>)
 800b2de:	2255      	movs	r2, #85	@ 0x55
 800b2e0:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800b2e2:	4ba9      	ldr	r3, [pc, #676]	@ (800b588 <tx_control+0x378>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800b2e8:	e02f      	b.n	800b34a <tx_control+0x13a>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800b2ea:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800b2ec:	4ba6      	ldr	r3, [pc, #664]	@ (800b588 <tx_control+0x378>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b80      	cmp	r3, #128	@ 0x80
 800b2f2:	d00e      	beq.n	800b312 <tx_control+0x102>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800b2f4:	4bb7      	ldr	r3, [pc, #732]	@ (800b5d4 <tx_control+0x3c4>)
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d125      	bne.n	800b348 <tx_control+0x138>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800b2fc:	4bb6      	ldr	r3, [pc, #728]	@ (800b5d8 <tx_control+0x3c8>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800b302:	4bb6      	ldr	r3, [pc, #728]	@ (800b5dc <tx_control+0x3cc>)
 800b304:	2205      	movs	r2, #5
 800b306:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800b308:	4bb2      	ldr	r3, [pc, #712]	@ (800b5d4 <tx_control+0x3c4>)
 800b30a:	2296      	movs	r2, #150	@ 0x96
 800b30c:	0052      	lsls	r2, r2, #1
 800b30e:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800b310:	e01b      	b.n	800b34a <tx_control+0x13a>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800b312:	46c0      	nop			@ (mov r8, r8)
 800b314:	e000      	b.n	800b318 <tx_control+0x108>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800b316:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800b318:	4b9b      	ldr	r3, [pc, #620]	@ (800b588 <tx_control+0x378>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e000      	b.n	800b322 <tx_control+0x112>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800b320:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800b322:	4b99      	ldr	r3, [pc, #612]	@ (800b588 <tx_control+0x378>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b80      	cmp	r3, #128	@ 0x80
 800b328:	d0f5      	beq.n	800b316 <tx_control+0x106>
		}

rx_tokenWiFi_02:
 800b32a:	e000      	b.n	800b32e <tx_control+0x11e>
			goto rx_tokenWiFi_02;
 800b32c:	46c0      	nop			@ (mov r8, r8)

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800b32e:	4b98      	ldr	r3, [pc, #608]	@ (800b590 <tx_control+0x380>)
 800b330:	221e      	movs	r2, #30
 800b332:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800b334:	4ba8      	ldr	r3, [pc, #672]	@ (800b5d8 <tx_control+0x3c8>)
 800b336:	2201      	movs	r2, #1
 800b338:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
 800b33a:	4ba6      	ldr	r3, [pc, #664]	@ (800b5d4 <tx_control+0x3c4>)
 800b33c:	2296      	movs	r2, #150	@ 0x96
 800b33e:	0052      	lsls	r2, r2, #1
 800b340:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800b342:	e002      	b.n	800b34a <tx_control+0x13a>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800b344:	46c0      	nop			@ (mov r8, r8)
 800b346:	e000      	b.n	800b34a <tx_control+0x13a>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800b348:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800b34a:	4ba3      	ldr	r3, [pc, #652]	@ (800b5d8 <tx_control+0x3c8>)
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <tx_control+0x146>
 800b352:	f001 fe57 	bl	800d004 <tx_control+0x1df4>
			goto tokenWiFi_OK;
 800b356:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800b358:	4b8a      	ldr	r3, [pc, #552]	@ (800b584 <tx_control+0x374>)
 800b35a:	78db      	ldrb	r3, [r3, #3]
 800b35c:	2201      	movs	r2, #1
 800b35e:	4053      	eors	r3, r2
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <tx_control+0x15a>
 800b366:	f000 fc66 	bl	800bc36 <tx_control+0xa26>
			goto tx_control_00;
 800b36a:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800b36c:	4b85      	ldr	r3, [pc, #532]	@ (800b584 <tx_control+0x374>)
 800b36e:	791b      	ldrb	r3, [r3, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	4053      	eors	r3, r2
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <tx_control+0x16e>
 800b37a:	f000 fc5e 	bl	800bc3a <tx_control+0xa2a>
			goto tx_control_00b;
 800b37e:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800b380:	4b7e      	ldr	r3, [pc, #504]	@ (800b57c <tx_control+0x36c>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2201      	movs	r2, #1
 800b386:	4053      	eors	r3, r2
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d136      	bne.n	800b3fc <tx_control+0x1ec>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800b38e:	4b94      	ldr	r3, [pc, #592]	@ (800b5e0 <tx_control+0x3d0>)
 800b390:	22f1      	movs	r2, #241	@ 0xf1
 800b392:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800b394:	4b8f      	ldr	r3, [pc, #572]	@ (800b5d4 <tx_control+0x3c4>)
 800b396:	2296      	movs	r2, #150	@ 0x96
 800b398:	0052      	lsls	r2, r2, #1
 800b39a:	801a      	strh	r2, [r3, #0]

		if(timeOutRx != 0){//tnz timeOutRx
 800b39c:	4b91      	ldr	r3, [pc, #580]	@ (800b5e4 <tx_control+0x3d4>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d118      	bne.n	800b3d6 <tx_control+0x1c6>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800b3a4:	2337      	movs	r3, #55	@ 0x37
 800b3a6:	18fb      	adds	r3, r7, r3
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e00a      	b.n	800b3c4 <tx_control+0x1b4>
			flagsRxFirm [i]= 0;
 800b3ae:	2037      	movs	r0, #55	@ 0x37
 800b3b0:	183b      	adds	r3, r7, r0
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4a71      	ldr	r2, [pc, #452]	@ (800b57c <tx_control+0x36c>)
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800b3ba:	183b      	adds	r3, r7, r0
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	183b      	adds	r3, r7, r0
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	2337      	movs	r3, #55	@ 0x37
 800b3c6:	18fb      	adds	r3, r7, r3
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b07      	cmp	r3, #7
 800b3cc:	d9ef      	bls.n	800b3ae <tx_control+0x19e>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800b3ce:	4b6e      	ldr	r3, [pc, #440]	@ (800b588 <tx_control+0x378>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800b3d4:	e013      	b.n	800b3fe <tx_control+0x1ee>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800b3d6:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800b3d8:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800b3da:	4b69      	ldr	r3, [pc, #420]	@ (800b580 <tx_control+0x370>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800b3e0:	4b67      	ldr	r3, [pc, #412]	@ (800b580 <tx_control+0x370>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800b3e6:	4b65      	ldr	r3, [pc, #404]	@ (800b57c <tx_control+0x36c>)
 800b3e8:	78db      	ldrb	r3, [r3, #3]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	4053      	eors	r3, r2
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <tx_control+0x1e8>
 800b3f4:	f001 f8da 	bl	800c5ac <tx_control+0x139c>
				goto rx_firmware01;
 800b3f8:	f000 ffec 	bl	800c3d4 <tx_control+0x11c4>
			goto ask_tx_control_01;
 800b3fc:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800b3fe:	4b62      	ldr	r3, [pc, #392]	@ (800b588 <tx_control+0x378>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b21      	cmp	r3, #33	@ 0x21
 800b404:	d131      	bne.n	800b46a <tx_control+0x25a>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800b406:	4b76      	ldr	r3, [pc, #472]	@ (800b5e0 <tx_control+0x3d0>)
 800b408:	22f1      	movs	r2, #241	@ 0xf1
 800b40a:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800b40c:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800b40e:	4b76      	ldr	r3, [pc, #472]	@ (800b5e8 <tx_control+0x3d8>)
 800b410:	22f1      	movs	r2, #241	@ 0xf1
 800b412:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800b414:	4b74      	ldr	r3, [pc, #464]	@ (800b5e8 <tx_control+0x3d8>)
 800b416:	223f      	movs	r2, #63	@ 0x3f
 800b418:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800b41a:	4b74      	ldr	r3, [pc, #464]	@ (800b5ec <tx_control+0x3dc>)
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	4b72      	ldr	r3, [pc, #456]	@ (800b5e8 <tx_control+0x3d8>)
 800b420:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800b422:	4b73      	ldr	r3, [pc, #460]	@ (800b5f0 <tx_control+0x3e0>)
 800b424:	781a      	ldrb	r2, [r3, #0]
 800b426:	4b70      	ldr	r3, [pc, #448]	@ (800b5e8 <tx_control+0x3d8>)
 800b428:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800b42a:	4b72      	ldr	r3, [pc, #456]	@ (800b5f4 <tx_control+0x3e4>)
 800b42c:	781a      	ldrb	r2, [r3, #0]
 800b42e:	4b6e      	ldr	r3, [pc, #440]	@ (800b5e8 <tx_control+0x3d8>)
 800b430:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800b432:	4b71      	ldr	r3, [pc, #452]	@ (800b5f8 <tx_control+0x3e8>)
 800b434:	227d      	movs	r2, #125	@ 0x7d
 800b436:	5c9a      	ldrb	r2, [r3, r2]
 800b438:	4b6b      	ldr	r3, [pc, #428]	@ (800b5e8 <tx_control+0x3d8>)
 800b43a:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800b43c:	4b6e      	ldr	r3, [pc, #440]	@ (800b5f8 <tx_control+0x3e8>)
 800b43e:	227e      	movs	r2, #126	@ 0x7e
 800b440:	5c9a      	ldrb	r2, [r3, r2]
 800b442:	4b69      	ldr	r3, [pc, #420]	@ (800b5e8 <tx_control+0x3d8>)
 800b444:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800b446:	4b6d      	ldr	r3, [pc, #436]	@ (800b5fc <tx_control+0x3ec>)
 800b448:	781a      	ldrb	r2, [r3, #0]
 800b44a:	4b67      	ldr	r3, [pc, #412]	@ (800b5e8 <tx_control+0x3d8>)
 800b44c:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800b44e:	4b6c      	ldr	r3, [pc, #432]	@ (800b600 <tx_control+0x3f0>)
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	4b65      	ldr	r3, [pc, #404]	@ (800b5e8 <tx_control+0x3d8>)
 800b454:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800b456:	4b64      	ldr	r3, [pc, #400]	@ (800b5e8 <tx_control+0x3d8>)
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800b45a:	4b4e      	ldr	r3, [pc, #312]	@ (800b594 <tx_control+0x384>)
 800b45c:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800b45e:	2336      	movs	r3, #54	@ 0x36
 800b460:	18fb      	adds	r3, r7, r3
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	f000 fc09 	bl	800bc7c <tx_control+0xa6c>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800b46a:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800b46c:	4b45      	ldr	r3, [pc, #276]	@ (800b584 <tx_control+0x374>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d148      	bne.n	800b506 <tx_control+0x2f6>
		if(codeTX != 0x60){//	cp	A,#$60
 800b474:	4b44      	ldr	r3, [pc, #272]	@ (800b588 <tx_control+0x378>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b60      	cmp	r3, #96	@ 0x60
 800b47a:	d11f      	bne.n	800b4bc <tx_control+0x2ac>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800b47c:	4b58      	ldr	r3, [pc, #352]	@ (800b5e0 <tx_control+0x3d0>)
 800b47e:	22f1      	movs	r2, #241	@ 0xf1
 800b480:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800b482:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800b484:	4b5f      	ldr	r3, [pc, #380]	@ (800b604 <tx_control+0x3f4>)
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	4b5f      	ldr	r3, [pc, #380]	@ (800b608 <tx_control+0x3f8>)
 800b48a:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800b48c:	4b5f      	ldr	r3, [pc, #380]	@ (800b60c <tx_control+0x3fc>)
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	4b5f      	ldr	r3, [pc, #380]	@ (800b610 <tx_control+0x400>)
 800b492:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800b494:	4b5f      	ldr	r3, [pc, #380]	@ (800b614 <tx_control+0x404>)
 800b496:	2203      	movs	r2, #3
 800b498:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800b49a:	4b5f      	ldr	r3, [pc, #380]	@ (800b618 <tx_control+0x408>)
 800b49c:	4a5f      	ldr	r2, [pc, #380]	@ (800b61c <tx_control+0x40c>)
 800b49e:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800b4a0:	4b5f      	ldr	r3, [pc, #380]	@ (800b620 <tx_control+0x410>)
 800b4a2:	4a60      	ldr	r2, [pc, #384]	@ (800b624 <tx_control+0x414>)
 800b4a4:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800b4a6:	4b36      	ldr	r3, [pc, #216]	@ (800b580 <tx_control+0x370>)
 800b4a8:	785b      	ldrb	r3, [r3, #1]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4053      	eors	r3, r2
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <tx_control+0x2a8>
 800b4b4:	f000 fc29 	bl	800bd0a <tx_control+0xafa>
			goto noFullFlagTXDATA;
 800b4b8:	f000 fc2a 	bl	800bd10 <tx_control+0xb00>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800b4bc:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800b4be:	4b32      	ldr	r3, [pc, #200]	@ (800b588 <tx_control+0x378>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b61      	cmp	r3, #97	@ 0x61
 800b4c4:	d121      	bne.n	800b50a <tx_control+0x2fa>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800b4c6:	4b46      	ldr	r3, [pc, #280]	@ (800b5e0 <tx_control+0x3d0>)
 800b4c8:	22f1      	movs	r2, #241	@ 0xf1
 800b4ca:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800b4cc:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800b4ce:	4b56      	ldr	r3, [pc, #344]	@ (800b628 <tx_control+0x418>)
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	4b4d      	ldr	r3, [pc, #308]	@ (800b608 <tx_control+0x3f8>)
 800b4d4:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800b4d6:	4b55      	ldr	r3, [pc, #340]	@ (800b62c <tx_control+0x41c>)
 800b4d8:	781a      	ldrb	r2, [r3, #0]
 800b4da:	4b4d      	ldr	r3, [pc, #308]	@ (800b610 <tx_control+0x400>)
 800b4dc:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800b4de:	4b4d      	ldr	r3, [pc, #308]	@ (800b614 <tx_control+0x404>)
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800b4e4:	4b4c      	ldr	r3, [pc, #304]	@ (800b618 <tx_control+0x408>)
 800b4e6:	4a52      	ldr	r2, [pc, #328]	@ (800b630 <tx_control+0x420>)
 800b4e8:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800b4ea:	4b4d      	ldr	r3, [pc, #308]	@ (800b620 <tx_control+0x410>)
 800b4ec:	4a51      	ldr	r2, [pc, #324]	@ (800b634 <tx_control+0x424>)
 800b4ee:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800b4f0:	4b23      	ldr	r3, [pc, #140]	@ (800b580 <tx_control+0x370>)
 800b4f2:	789b      	ldrb	r3, [r3, #2]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	4053      	eors	r3, r2
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <tx_control+0x2f2>
 800b4fe:	f000 fc51 	bl	800bda4 <tx_control+0xb94>
			goto noFullFlagTXEVENT;
 800b502:	f000 fc52 	bl	800bdaa <tx_control+0xb9a>
			goto ask_tx_control_04;
 800b506:	46c0      	nop			@ (mov r8, r8)
 800b508:	e000      	b.n	800b50c <tx_control+0x2fc>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800b50a:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800b50c:	4b1e      	ldr	r3, [pc, #120]	@ (800b588 <tx_control+0x378>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b53      	cmp	r3, #83	@ 0x53
 800b512:	d000      	beq.n	800b516 <tx_control+0x306>
 800b514:	e0a0      	b.n	800b658 <tx_control+0x448>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800b516:	4b32      	ldr	r3, [pc, #200]	@ (800b5e0 <tx_control+0x3d0>)
 800b518:	22f1      	movs	r2, #241	@ 0xf1
 800b51a:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800b51c:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800b51e:	4b46      	ldr	r3, [pc, #280]	@ (800b638 <tx_control+0x428>)
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	4b46      	ldr	r3, [pc, #280]	@ (800b63c <tx_control+0x42c>)
 800b524:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800b526:	4b46      	ldr	r3, [pc, #280]	@ (800b640 <tx_control+0x430>)
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	4b44      	ldr	r3, [pc, #272]	@ (800b63c <tx_control+0x42c>)
 800b52c:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800b52e:	4b45      	ldr	r3, [pc, #276]	@ (800b644 <tx_control+0x434>)
 800b530:	781a      	ldrb	r2, [r3, #0]
 800b532:	4b42      	ldr	r3, [pc, #264]	@ (800b63c <tx_control+0x42c>)
 800b534:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800b536:	4b44      	ldr	r3, [pc, #272]	@ (800b648 <tx_control+0x438>)
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	4b40      	ldr	r3, [pc, #256]	@ (800b63c <tx_control+0x42c>)
 800b53c:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800b53e:	4b43      	ldr	r3, [pc, #268]	@ (800b64c <tx_control+0x43c>)
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	0a1b      	lsrs	r3, r3, #8
 800b544:	b29b      	uxth	r3, r3
 800b546:	b2da      	uxtb	r2, r3
 800b548:	4b3c      	ldr	r3, [pc, #240]	@ (800b63c <tx_control+0x42c>)
 800b54a:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800b54c:	4b3f      	ldr	r3, [pc, #252]	@ (800b64c <tx_control+0x43c>)
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	b2da      	uxtb	r2, r3
 800b552:	4b3a      	ldr	r3, [pc, #232]	@ (800b63c <tx_control+0x42c>)
 800b554:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800b556:	4b3e      	ldr	r3, [pc, #248]	@ (800b650 <tx_control+0x440>)
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	4b38      	ldr	r3, [pc, #224]	@ (800b63c <tx_control+0x42c>)
 800b55c:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800b55e:	4b37      	ldr	r3, [pc, #220]	@ (800b63c <tx_control+0x42c>)
 800b560:	2200      	movs	r2, #0
 800b562:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_comp])											// compresor activo ?
 800b564:	4b3b      	ldr	r3, [pc, #236]	@ (800b654 <tx_control+0x444>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2201      	movs	r2, #1
 800b56a:	4053      	eors	r3, r2
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <tx_control+0x366>
 800b572:	f000 fcb4 	bl	800bede <tx_control+0xcce>
 800b576:	f000 fcab 	bl	800bed0 <tx_control+0xcc0>
 800b57a:	46c0      	nop			@ (mov r8, r8)
 800b57c:	20000efc 	.word	0x20000efc
 800b580:	20000e24 	.word	0x20000e24
 800b584:	20000f70 	.word	0x20000f70
 800b588:	20000e44 	.word	0x20000e44
 800b58c:	20000e39 	.word	0x20000e39
 800b590:	20000f5a 	.word	0x20000f5a
 800b594:	20000fc8 	.word	0x20000fc8
 800b598:	2000038c 	.word	0x2000038c
 800b59c:	2000038d 	.word	0x2000038d
 800b5a0:	2000038e 	.word	0x2000038e
 800b5a4:	2000038f 	.word	0x2000038f
 800b5a8:	20000390 	.word	0x20000390
 800b5ac:	20000391 	.word	0x20000391
 800b5b0:	20000392 	.word	0x20000392
 800b5b4:	20000393 	.word	0x20000393
 800b5b8:	20000e3c 	.word	0x20000e3c
 800b5bc:	20000e34 	.word	0x20000e34
 800b5c0:	20000e2c 	.word	0x20000e2c
 800b5c4:	20000e30 	.word	0x20000e30
 800b5c8:	20000fd2 	.word	0x20000fd2
 800b5cc:	20000e50 	.word	0x20000e50
 800b5d0:	20000e54 	.word	0x20000e54
 800b5d4:	20000f6c 	.word	0x20000f6c
 800b5d8:	20000f64 	.word	0x20000f64
 800b5dc:	20000f08 	.word	0x20000f08
 800b5e0:	20000f05 	.word	0x20000f05
 800b5e4:	20000f06 	.word	0x20000f06
 800b5e8:	20000e00 	.word	0x20000e00
 800b5ec:	0801e7f4 	.word	0x0801e7f4
 800b5f0:	0801e7f0 	.word	0x0801e7f0
 800b5f4:	0801e7f1 	.word	0x0801e7f1
 800b5f8:	200000bc 	.word	0x200000bc
 800b5fc:	0801e7f3 	.word	0x0801e7f3
 800b600:	0801e7f2 	.word	0x0801e7f2
 800b604:	20000dcd 	.word	0x20000dcd
 800b608:	20000dba 	.word	0x20000dba
 800b60c:	20000dcc 	.word	0x20000dcc
 800b610:	20000dbb 	.word	0x20000dbb
 800b614:	20000e51 	.word	0x20000e51
 800b618:	20000dc4 	.word	0x20000dc4
 800b61c:	20000cac 	.word	0x20000cac
 800b620:	20000dc0 	.word	0x20000dc0
 800b624:	0803c000 	.word	0x0803c000
 800b628:	20000dcf 	.word	0x20000dcf
 800b62c:	20000dce 	.word	0x20000dce
 800b630:	20000d2c 	.word	0x20000d2c
 800b634:	08037000 	.word	0x08037000
 800b638:	20000bd0 	.word	0x20000bd0
 800b63c:	20000e18 	.word	0x20000e18
 800b640:	20000bd1 	.word	0x20000bd1
 800b644:	20000bd2 	.word	0x20000bd2
 800b648:	20000bd3 	.word	0x20000bd3
 800b64c:	20000c74 	.word	0x20000c74
 800b650:	20000bee 	.word	0x20000bee
 800b654:	20000bc4 	.word	0x20000bc4
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800b658:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800b65a:	4be8      	ldr	r3, [pc, #928]	@ (800b9fc <tx_control+0x7ec>)
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	2b51      	cmp	r3, #81	@ 0x51
 800b660:	d125      	bne.n	800b6ae <tx_control+0x49e>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800b662:	4be7      	ldr	r3, [pc, #924]	@ (800ba00 <tx_control+0x7f0>)
 800b664:	22f1      	movs	r2, #241	@ 0xf1
 800b666:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800b668:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800b66a:	4be6      	ldr	r3, [pc, #920]	@ (800ba04 <tx_control+0x7f4>)
 800b66c:	227b      	movs	r2, #123	@ 0x7b
 800b66e:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800b670:	4be4      	ldr	r3, [pc, #912]	@ (800ba04 <tx_control+0x7f4>)
 800b672:	227c      	movs	r2, #124	@ 0x7c
 800b674:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800b676:	4be3      	ldr	r3, [pc, #908]	@ (800ba04 <tx_control+0x7f4>)
 800b678:	2200      	movs	r2, #0
 800b67a:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800b67c:	4be1      	ldr	r3, [pc, #900]	@ (800ba04 <tx_control+0x7f4>)
 800b67e:	2200      	movs	r2, #0
 800b680:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800b682:	4be0      	ldr	r3, [pc, #896]	@ (800ba04 <tx_control+0x7f4>)
 800b684:	2200      	movs	r2, #0
 800b686:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800b688:	4bde      	ldr	r3, [pc, #888]	@ (800ba04 <tx_control+0x7f4>)
 800b68a:	2201      	movs	r2, #1
 800b68c:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800b68e:	4bdd      	ldr	r3, [pc, #884]	@ (800ba04 <tx_control+0x7f4>)
 800b690:	2204      	movs	r2, #4
 800b692:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800b694:	4bdb      	ldr	r3, [pc, #876]	@ (800ba04 <tx_control+0x7f4>)
 800b696:	2280      	movs	r2, #128	@ 0x80
 800b698:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800b69a:	4bda      	ldr	r3, [pc, #872]	@ (800ba04 <tx_control+0x7f4>)
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 //
 800b69e:	4bda      	ldr	r3, [pc, #872]	@ (800ba08 <tx_control+0x7f8>)
 800b6a0:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 8 ; i++ )
 800b6a2:	232c      	movs	r3, #44	@ 0x2c
 800b6a4:	18fb      	adds	r3, r7, r3
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	f000 fd6d 	bl	800c188 <tx_control+0xf78>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800b6ae:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800b6b0:	4bd2      	ldr	r3, [pc, #840]	@ (800b9fc <tx_control+0x7ec>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b50      	cmp	r3, #80	@ 0x50
 800b6b6:	d114      	bne.n	800b6e2 <tx_control+0x4d2>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800b6b8:	4bd1      	ldr	r3, [pc, #836]	@ (800ba00 <tx_control+0x7f0>)
 800b6ba:	22f1      	movs	r2, #241	@ 0xf1
 800b6bc:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800b6be:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1])){
 800b6c0:	4bd2      	ldr	r3, [pc, #840]	@ (800ba0c <tx_control+0x7fc>)
 800b6c2:	227d      	movs	r2, #125	@ 0x7d
 800b6c4:	5c9b      	ldrb	r3, [r3, r2]
 800b6c6:	001c      	movs	r4, r3
 800b6c8:	4bd1      	ldr	r3, [pc, #836]	@ (800ba10 <tx_control+0x800>)
 800b6ca:	4ad2      	ldr	r2, [pc, #840]	@ (800ba14 <tx_control+0x804>)
 800b6cc:	0019      	movs	r1, r3
 800b6ce:	0010      	movs	r0, r2
 800b6d0:	f7f5 f9f4 	bl	8000abc <findLastValue>
 800b6d4:	0003      	movs	r3, r0
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d001      	beq.n	800b6de <tx_control+0x4ce>
 800b6da:	f000 fe53 	bl	800c384 <tx_control+0x1174>
				goto 	verifica_version2;		//jreq	verifica_version2
 800b6de:	f000 fdeb 	bl	800c2b8 <tx_control+0x10a8>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800b6e2:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800b6e4:	4bc5      	ldr	r3, [pc, #788]	@ (800b9fc <tx_control+0x7ec>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b46      	cmp	r3, #70	@ 0x46
 800b6ea:	d126      	bne.n	800b73a <tx_control+0x52a>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800b6ec:	4bc4      	ldr	r3, [pc, #784]	@ (800ba00 <tx_control+0x7f0>)
 800b6ee:	22f1      	movs	r2, #241	@ 0xf1
 800b6f0:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800b6f2:	46c0      	nop			@ (mov r8, r8)
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800b6f4:	4bc8      	ldr	r3, [pc, #800]	@ (800ba18 <tx_control+0x808>)
 800b6f6:	22f1      	movs	r2, #241	@ 0xf1
 800b6f8:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800b6fa:	4bc7      	ldr	r3, [pc, #796]	@ (800ba18 <tx_control+0x808>)
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800b700:	4bc6      	ldr	r3, [pc, #792]	@ (800ba1c <tx_control+0x80c>)
 800b702:	2201      	movs	r2, #1
 800b704:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800b706:	4bc6      	ldr	r3, [pc, #792]	@ (800ba20 <tx_control+0x810>)
 800b708:	4ac3      	ldr	r2, [pc, #780]	@ (800ba18 <tx_control+0x808>)
 800b70a:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800b70c:	4bc5      	ldr	r3, [pc, #788]	@ (800ba24 <tx_control+0x814>)
 800b70e:	4ac2      	ldr	r2, [pc, #776]	@ (800ba18 <tx_control+0x808>)
 800b710:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800b712:	4bc5      	ldr	r3, [pc, #788]	@ (800ba28 <tx_control+0x818>)
 800b714:	4ac5      	ldr	r2, [pc, #788]	@ (800ba2c <tx_control+0x81c>)
 800b716:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800b718:	4bc5      	ldr	r3, [pc, #788]	@ (800ba30 <tx_control+0x820>)
 800b71a:	2202      	movs	r2, #2
 800b71c:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800b71e:	4bc5      	ldr	r3, [pc, #788]	@ (800ba34 <tx_control+0x824>)
 800b720:	2201      	movs	r2, #1
 800b722:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800b724:	4bc4      	ldr	r3, [pc, #784]	@ (800ba38 <tx_control+0x828>)
 800b726:	2255      	movs	r2, #85	@ 0x55
 800b728:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800b72a:	4bb4      	ldr	r3, [pc, #720]	@ (800b9fc <tx_control+0x7ec>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800b730:	4bc2      	ldr	r3, [pc, #776]	@ (800ba3c <tx_control+0x82c>)
 800b732:	2205      	movs	r2, #5
 800b734:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800b736:	f001 fc68 	bl	800d00a <tx_control+0x1dfa>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800b73a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800b73c:	4baf      	ldr	r3, [pc, #700]	@ (800b9fc <tx_control+0x7ec>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b54      	cmp	r3, #84	@ 0x54
 800b742:	d10a      	bne.n	800b75a <tx_control+0x54a>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800b744:	4bae      	ldr	r3, [pc, #696]	@ (800ba00 <tx_control+0x7f0>)
 800b746:	22f1      	movs	r2, #241	@ 0xf1
 800b748:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800b74a:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800b74c:	f7f9 fb6e 	bl	8004e2c <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800b750:	4bbb      	ldr	r3, [pc, #748]	@ (800ba40 <tx_control+0x830>)
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	f000 ffe5 	bl	800c724 <tx_control+0x1514>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800b75a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800b75c:	4ba7      	ldr	r3, [pc, #668]	@ (800b9fc <tx_control+0x7ec>)
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b55      	cmp	r3, #85	@ 0x55
 800b762:	d105      	bne.n	800b770 <tx_control+0x560>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b764:	4ba6      	ldr	r3, [pc, #664]	@ (800ba00 <tx_control+0x7f0>)
 800b766:	22f0      	movs	r2, #240	@ 0xf0
 800b768:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800b76a:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800b76c:	f001 fc4d 	bl	800d00a <tx_control+0x1dfa>
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800b770:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800b772:	4ba2      	ldr	r3, [pc, #648]	@ (800b9fc <tx_control+0x7ec>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	2b56      	cmp	r3, #86	@ 0x56
 800b778:	d132      	bne.n	800b7e0 <tx_control+0x5d0>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b77a:	4ba1      	ldr	r3, [pc, #644]	@ (800ba00 <tx_control+0x7f0>)
 800b77c:	22f0      	movs	r2, #240	@ 0xf0
 800b77e:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800b780:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b782:	4bb0      	ldr	r3, [pc, #704]	@ (800ba44 <tx_control+0x834>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800b788:	4baf      	ldr	r3, [pc, #700]	@ (800ba48 <tx_control+0x838>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800b78e:	4baf      	ldr	r3, [pc, #700]	@ (800ba4c <tx_control+0x83c>)
 800b790:	2206      	movs	r2, #6
 800b792:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800b794:	4b9d      	ldr	r3, [pc, #628]	@ (800ba0c <tx_control+0x7fc>)
 800b796:	2106      	movs	r1, #6
 800b798:	0018      	movs	r0, r3
 800b79a:	f7f9 fb11 	bl	8004dc0 <buildChksumBloq>
			chksum_to_compare = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800b7a2:	4b9a      	ldr	r3, [pc, #616]	@ (800ba0c <tx_control+0x7fc>)
 800b7a4:	799b      	ldrb	r3, [r3, #6]
 800b7a6:	061b      	lsls	r3, r3, #24
 800b7a8:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800b7aa:	4b98      	ldr	r3, [pc, #608]	@ (800ba0c <tx_control+0x7fc>)
 800b7ac:	79db      	ldrb	r3, [r3, #7]
 800b7ae:	041b      	lsls	r3, r3, #16
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	18d3      	adds	r3, r2, r3
 800b7b4:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800b7b6:	4b95      	ldr	r3, [pc, #596]	@ (800ba0c <tx_control+0x7fc>)
 800b7b8:	7a1b      	ldrb	r3, [r3, #8]
 800b7ba:	021b      	lsls	r3, r3, #8
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	18d3      	adds	r3, r2, r3
 800b7c0:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800b7c2:	4b92      	ldr	r3, [pc, #584]	@ (800ba0c <tx_control+0x7fc>)
 800b7c4:	7a5b      	ldrb	r3, [r3, #9]
 800b7c6:	001a      	movs	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	189b      	adds	r3, r3, r2
 800b7cc:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800b7ce:	4b9d      	ldr	r3, [pc, #628]	@ (800ba44 <tx_control+0x834>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d101      	bne.n	800b7dc <tx_control+0x5cc>
 800b7d8:	f001 f80d 	bl	800c7f6 <tx_control+0x15e6>
				goto tx_write_status_error;
 800b7dc:	f001 f8b6 	bl	800c94c <tx_control+0x173c>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800b7e0:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800b7e2:	4b86      	ldr	r3, [pc, #536]	@ (800b9fc <tx_control+0x7ec>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b57      	cmp	r3, #87	@ 0x57
 800b7e8:	d107      	bne.n	800b7fa <tx_control+0x5ea>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b7ea:	4b85      	ldr	r3, [pc, #532]	@ (800ba00 <tx_control+0x7f0>)
 800b7ec:	22f0      	movs	r2, #240	@ 0xf0
 800b7ee:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800b7f0:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		for(int k=0;k<8;k++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	f001 f8d8 	bl	800c9aa <tx_control+0x179a>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800b7fa:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800b7fc:	4b7f      	ldr	r3, [pc, #508]	@ (800b9fc <tx_control+0x7ec>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b58      	cmp	r3, #88	@ 0x58
 800b802:	d132      	bne.n	800b86a <tx_control+0x65a>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800b804:	4b7e      	ldr	r3, [pc, #504]	@ (800ba00 <tx_control+0x7f0>)
 800b806:	22f0      	movs	r2, #240	@ 0xf0
 800b808:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800b80a:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800b80c:	4b8d      	ldr	r3, [pc, #564]	@ (800ba44 <tx_control+0x834>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800b812:	4b8d      	ldr	r3, [pc, #564]	@ (800ba48 <tx_control+0x838>)
 800b814:	2200      	movs	r2, #0
 800b816:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800b818:	4b8c      	ldr	r3, [pc, #560]	@ (800ba4c <tx_control+0x83c>)
 800b81a:	2206      	movs	r2, #6
 800b81c:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800b81e:	4b7b      	ldr	r3, [pc, #492]	@ (800ba0c <tx_control+0x7fc>)
 800b820:	2106      	movs	r1, #6
 800b822:	0018      	movs	r0, r3
 800b824:	f7f9 facc 	bl	8004dc0 <buildChksumBloq>
		chksum_to_compare = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	603b      	str	r3, [r7, #0]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800b82c:	4b77      	ldr	r3, [pc, #476]	@ (800ba0c <tx_control+0x7fc>)
 800b82e:	799b      	ldrb	r3, [r3, #6]
 800b830:	061b      	lsls	r3, r3, #24
 800b832:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800b834:	4b75      	ldr	r3, [pc, #468]	@ (800ba0c <tx_control+0x7fc>)
 800b836:	79db      	ldrb	r3, [r3, #7]
 800b838:	041b      	lsls	r3, r3, #16
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	18d3      	adds	r3, r2, r3
 800b83e:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800b840:	4b72      	ldr	r3, [pc, #456]	@ (800ba0c <tx_control+0x7fc>)
 800b842:	7a1b      	ldrb	r3, [r3, #8]
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	18d3      	adds	r3, r2, r3
 800b84a:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800b84c:	4b6f      	ldr	r3, [pc, #444]	@ (800ba0c <tx_control+0x7fc>)
 800b84e:	7a5b      	ldrb	r3, [r3, #9]
 800b850:	001a      	movs	r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	189b      	adds	r3, r3, r2
 800b856:	603b      	str	r3, [r7, #0]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800b858:	4b7a      	ldr	r3, [pc, #488]	@ (800ba44 <tx_control+0x834>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d101      	bne.n	800b866 <tx_control+0x656>
 800b862:	f001 fa02 	bl	800cc6a <tx_control+0x1a5a>
			goto tx_write_status_error;
 800b866:	f001 f871 	bl	800c94c <tx_control+0x173c>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800b86a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800b86c:	4b63      	ldr	r3, [pc, #396]	@ (800b9fc <tx_control+0x7ec>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b59      	cmp	r3, #89	@ 0x59
 800b872:	d132      	bne.n	800b8da <tx_control+0x6ca>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800b874:	4b62      	ldr	r3, [pc, #392]	@ (800ba00 <tx_control+0x7f0>)
 800b876:	22f0      	movs	r2, #240	@ 0xf0
 800b878:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800b87a:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b87c:	4b71      	ldr	r3, [pc, #452]	@ (800ba44 <tx_control+0x834>)
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800b882:	4b71      	ldr	r3, [pc, #452]	@ (800ba48 <tx_control+0x838>)
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800b888:	4b70      	ldr	r3, [pc, #448]	@ (800ba4c <tx_control+0x83c>)
 800b88a:	220a      	movs	r2, #10
 800b88c:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800b88e:	4b5f      	ldr	r3, [pc, #380]	@ (800ba0c <tx_control+0x7fc>)
 800b890:	210a      	movs	r1, #10
 800b892:	0018      	movs	r0, r3
 800b894:	f7f9 fa94 	bl	8004dc0 <buildChksumBloq>
			chksum_to_compare = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800b89c:	4b5b      	ldr	r3, [pc, #364]	@ (800ba0c <tx_control+0x7fc>)
 800b89e:	7a9b      	ldrb	r3, [r3, #10]
 800b8a0:	061b      	lsls	r3, r3, #24
 800b8a2:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800b8a4:	4b59      	ldr	r3, [pc, #356]	@ (800ba0c <tx_control+0x7fc>)
 800b8a6:	7adb      	ldrb	r3, [r3, #11]
 800b8a8:	041b      	lsls	r3, r3, #16
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	18d3      	adds	r3, r2, r3
 800b8ae:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800b8b0:	4b56      	ldr	r3, [pc, #344]	@ (800ba0c <tx_control+0x7fc>)
 800b8b2:	7b1b      	ldrb	r3, [r3, #12]
 800b8b4:	021b      	lsls	r3, r3, #8
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	18d3      	adds	r3, r2, r3
 800b8ba:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800b8bc:	4b53      	ldr	r3, [pc, #332]	@ (800ba0c <tx_control+0x7fc>)
 800b8be:	7b5b      	ldrb	r3, [r3, #13]
 800b8c0:	001a      	movs	r2, r3
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	189b      	adds	r3, r3, r2
 800b8c6:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800b8c8:	4b5e      	ldr	r3, [pc, #376]	@ (800ba44 <tx_control+0x834>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d101      	bne.n	800b8d6 <tx_control+0x6c6>
 800b8d2:	f001 f9e7 	bl	800cca4 <tx_control+0x1a94>
				goto tx_write_GEO_error;
 800b8d6:	f001 fa4c 	bl	800cd72 <tx_control+0x1b62>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800b8da:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800b8dc:	4b47      	ldr	r3, [pc, #284]	@ (800b9fc <tx_control+0x7ec>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b5a      	cmp	r3, #90	@ 0x5a
 800b8e2:	d000      	beq.n	800b8e6 <tx_control+0x6d6>
 800b8e4:	e0c8      	b.n	800ba78 <tx_control+0x868>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b8e6:	4b46      	ldr	r3, [pc, #280]	@ (800ba00 <tx_control+0x7f0>)
 800b8e8:	22f0      	movs	r2, #240	@ 0xf0
 800b8ea:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800b8ec:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800b8ee:	4b50      	ldr	r3, [pc, #320]	@ (800ba30 <tx_control+0x820>)
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800b8f4:	4b56      	ldr	r3, [pc, #344]	@ (800ba50 <tx_control+0x840>)
 800b8f6:	227c      	movs	r2, #124	@ 0x7c
 800b8f8:	5c9a      	ldrb	r2, [r3, r2]
 800b8fa:	4b42      	ldr	r3, [pc, #264]	@ (800ba04 <tx_control+0x7f4>)
 800b8fc:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800b8fe:	4b41      	ldr	r3, [pc, #260]	@ (800ba04 <tx_control+0x7f4>)
 800b900:	2200      	movs	r2, #0
 800b902:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800b904:	4b3f      	ldr	r3, [pc, #252]	@ (800ba04 <tx_control+0x7f4>)
 800b906:	2200      	movs	r2, #0
 800b908:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800b90a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba04 <tx_control+0x7f4>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800b910:	4b3c      	ldr	r3, [pc, #240]	@ (800ba04 <tx_control+0x7f4>)
 800b912:	2201      	movs	r2, #1
 800b914:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800b916:	4b3b      	ldr	r3, [pc, #236]	@ (800ba04 <tx_control+0x7f4>)
 800b918:	2206      	movs	r2, #6
 800b91a:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800b91c:	4b44      	ldr	r3, [pc, #272]	@ (800ba30 <tx_control+0x820>)
 800b91e:	781a      	ldrb	r2, [r3, #0]
 800b920:	4b38      	ldr	r3, [pc, #224]	@ (800ba04 <tx_control+0x7f4>)
 800b922:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800b924:	4b48      	ldr	r3, [pc, #288]	@ (800ba48 <tx_control+0x838>)
 800b926:	2208      	movs	r2, #8
 800b928:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800b92a:	4a37      	ldr	r2, [pc, #220]	@ (800ba08 <tx_control+0x7f8>)
 800b92c:	4b35      	ldr	r3, [pc, #212]	@ (800ba04 <tx_control+0x7f4>)
 800b92e:	0011      	movs	r1, r2
 800b930:	0018      	movs	r0, r3
 800b932:	f7f9 fa93 	bl	8004e5c <copyVector>
			ldw		bufferTxControl+12,X
			ldw		X,eeLong3
			ldw		bufferTxControl+14,X
			*/

			bufferTxControl[8] = eeLat1;
 800b936:	4b47      	ldr	r3, [pc, #284]	@ (800ba54 <tx_control+0x844>)
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	4b33      	ldr	r3, [pc, #204]	@ (800ba08 <tx_control+0x7f8>)
 800b93c:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = eeLat2;
 800b93e:	4b46      	ldr	r3, [pc, #280]	@ (800ba58 <tx_control+0x848>)
 800b940:	781a      	ldrb	r2, [r3, #0]
 800b942:	4b31      	ldr	r3, [pc, #196]	@ (800ba08 <tx_control+0x7f8>)
 800b944:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = eeLat3;
 800b946:	4b45      	ldr	r3, [pc, #276]	@ (800ba5c <tx_control+0x84c>)
 800b948:	781a      	ldrb	r2, [r3, #0]
 800b94a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba08 <tx_control+0x7f8>)
 800b94c:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = eeLat4;
 800b94e:	4b44      	ldr	r3, [pc, #272]	@ (800ba60 <tx_control+0x850>)
 800b950:	781a      	ldrb	r2, [r3, #0]
 800b952:	4b2d      	ldr	r3, [pc, #180]	@ (800ba08 <tx_control+0x7f8>)
 800b954:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= eeLong1;
 800b956:	4b43      	ldr	r3, [pc, #268]	@ (800ba64 <tx_control+0x854>)
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	4b2b      	ldr	r3, [pc, #172]	@ (800ba08 <tx_control+0x7f8>)
 800b95c:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= eeLong2;
 800b95e:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <tx_control+0x858>)
 800b960:	781a      	ldrb	r2, [r3, #0]
 800b962:	4b29      	ldr	r3, [pc, #164]	@ (800ba08 <tx_control+0x7f8>)
 800b964:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = eeLong3;
 800b966:	4b41      	ldr	r3, [pc, #260]	@ (800ba6c <tx_control+0x85c>)
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	4b27      	ldr	r3, [pc, #156]	@ (800ba08 <tx_control+0x7f8>)
 800b96c:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = eeLong4;
 800b96e:	4b40      	ldr	r3, [pc, #256]	@ (800ba70 <tx_control+0x860>)
 800b970:	781a      	ldrb	r2, [r3, #0]
 800b972:	4b25      	ldr	r3, [pc, #148]	@ (800ba08 <tx_control+0x7f8>)
 800b974:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b976:	4b33      	ldr	r3, [pc, #204]	@ (800ba44 <tx_control+0x834>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800b97c:	4b32      	ldr	r3, [pc, #200]	@ (800ba48 <tx_control+0x838>)
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800b982:	4b32      	ldr	r3, [pc, #200]	@ (800ba4c <tx_control+0x83c>)
 800b984:	2210      	movs	r2, #16
 800b986:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800b988:	4b30      	ldr	r3, [pc, #192]	@ (800ba4c <tx_control+0x83c>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	001a      	movs	r2, r3
 800b98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba08 <tx_control+0x7f8>)
 800b990:	0011      	movs	r1, r2
 800b992:	0018      	movs	r0, r3
 800b994:	f7f9 fa14 	bl	8004dc0 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800b998:	4b2a      	ldr	r3, [pc, #168]	@ (800ba44 <tx_control+0x834>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	0e1b      	lsrs	r3, r3, #24
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	4b19      	ldr	r3, [pc, #100]	@ (800ba08 <tx_control+0x7f8>)
 800b9a2:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800b9a4:	4b27      	ldr	r3, [pc, #156]	@ (800ba44 <tx_control+0x834>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	4b16      	ldr	r3, [pc, #88]	@ (800ba08 <tx_control+0x7f8>)
 800b9ae:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800b9b0:	4b24      	ldr	r3, [pc, #144]	@ (800ba44 <tx_control+0x834>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	0a1b      	lsrs	r3, r3, #8
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	4b13      	ldr	r3, [pc, #76]	@ (800ba08 <tx_control+0x7f8>)
 800b9ba:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800b9bc:	4b21      	ldr	r3, [pc, #132]	@ (800ba44 <tx_control+0x834>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	4b11      	ldr	r3, [pc, #68]	@ (800ba08 <tx_control+0x7f8>)
 800b9c4:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800b9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ba20 <tx_control+0x810>)
 800b9c8:	4a0f      	ldr	r2, [pc, #60]	@ (800ba08 <tx_control+0x7f8>)
 800b9ca:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800b9cc:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <tx_control+0x814>)
 800b9ce:	4a0e      	ldr	r2, [pc, #56]	@ (800ba08 <tx_control+0x7f8>)
 800b9d0:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800b9d2:	4b15      	ldr	r3, [pc, #84]	@ (800ba28 <tx_control+0x818>)
 800b9d4:	4a27      	ldr	r2, [pc, #156]	@ (800ba74 <tx_control+0x864>)
 800b9d6:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800b9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <tx_control+0x820>)
 800b9da:	2214      	movs	r2, #20
 800b9dc:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800b9de:	4b15      	ldr	r3, [pc, #84]	@ (800ba34 <tx_control+0x824>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800b9e4:	4b13      	ldr	r3, [pc, #76]	@ (800ba34 <tx_control+0x824>)
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <tx_control+0x828>)
 800b9ec:	2255      	movs	r2, #85	@ 0x55
 800b9ee:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800b9f0:	4b02      	ldr	r3, [pc, #8]	@ (800b9fc <tx_control+0x7ec>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800b9f6:	f001 fb08 	bl	800d00a <tx_control+0x1dfa>
 800b9fa:	46c0      	nop			@ (mov r8, r8)
 800b9fc:	20000e44 	.word	0x20000e44
 800ba00:	20000f05 	.word	0x20000f05
 800ba04:	20000df8 	.word	0x20000df8
 800ba08:	20000fc8 	.word	0x20000fc8
 800ba0c:	200009d4 	.word	0x200009d4
 800ba10:	2000037f 	.word	0x2000037f
 800ba14:	0803f000 	.word	0x0803f000
 800ba18:	20000e00 	.word	0x20000e00
 800ba1c:	20000efc 	.word	0x20000efc
 800ba20:	20000e34 	.word	0x20000e34
 800ba24:	20000e2c 	.word	0x20000e2c
 800ba28:	20000e30 	.word	0x20000e30
 800ba2c:	20000e01 	.word	0x20000e01
 800ba30:	20000e50 	.word	0x20000e50
 800ba34:	20000e3c 	.word	0x20000e3c
 800ba38:	20000e39 	.word	0x20000e39
 800ba3c:	20000f06 	.word	0x20000f06
 800ba40:	20000ef1 	.word	0x20000ef1
 800ba44:	20000e54 	.word	0x20000e54
 800ba48:	20000b77 	.word	0x20000b77
 800ba4c:	20000b76 	.word	0x20000b76
 800ba50:	200000bc 	.word	0x200000bc
 800ba54:	2000038c 	.word	0x2000038c
 800ba58:	2000038d 	.word	0x2000038d
 800ba5c:	2000038e 	.word	0x2000038e
 800ba60:	2000038f 	.word	0x2000038f
 800ba64:	20000390 	.word	0x20000390
 800ba68:	20000391 	.word	0x20000391
 800ba6c:	20000392 	.word	0x20000392
 800ba70:	20000393 	.word	0x20000393
 800ba74:	20000fdc 	.word	0x20000fdc
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800ba78:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800ba7a:	4bf1      	ldr	r3, [pc, #964]	@ (800be40 <tx_control+0xc30>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2b5b      	cmp	r3, #91	@ 0x5b
 800ba80:	d000      	beq.n	800ba84 <tx_control+0x874>
 800ba82:	e089      	b.n	800bb98 <tx_control+0x988>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ba84:	4bef      	ldr	r3, [pc, #956]	@ (800be44 <tx_control+0xc34>)
 800ba86:	22f0      	movs	r2, #240	@ 0xf0
 800ba88:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800ba8a:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800ba8c:	4bee      	ldr	r3, [pc, #952]	@ (800be48 <tx_control+0xc38>)
 800ba8e:	2204      	movs	r2, #4
 800ba90:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800ba92:	4bee      	ldr	r3, [pc, #952]	@ (800be4c <tx_control+0xc3c>)
 800ba94:	227b      	movs	r2, #123	@ 0x7b
 800ba96:	5c9a      	ldrb	r2, [r3, r2]
 800ba98:	4bed      	ldr	r3, [pc, #948]	@ (800be50 <tx_control+0xc40>)
 800ba9a:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ba9c:	4beb      	ldr	r3, [pc, #940]	@ (800be4c <tx_control+0xc3c>)
 800ba9e:	227c      	movs	r2, #124	@ 0x7c
 800baa0:	5c9a      	ldrb	r2, [r3, r2]
 800baa2:	4beb      	ldr	r3, [pc, #940]	@ (800be50 <tx_control+0xc40>)
 800baa4:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800baa6:	4bea      	ldr	r3, [pc, #936]	@ (800be50 <tx_control+0xc40>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800baac:	4be8      	ldr	r3, [pc, #928]	@ (800be50 <tx_control+0xc40>)
 800baae:	2200      	movs	r2, #0
 800bab0:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800bab2:	4be7      	ldr	r3, [pc, #924]	@ (800be50 <tx_control+0xc40>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800bab8:	4be5      	ldr	r3, [pc, #916]	@ (800be50 <tx_control+0xc40>)
 800baba:	2201      	movs	r2, #1
 800babc:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800babe:	4be4      	ldr	r3, [pc, #912]	@ (800be50 <tx_control+0xc40>)
 800bac0:	2207      	movs	r2, #7
 800bac2:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800bac4:	4be0      	ldr	r3, [pc, #896]	@ (800be48 <tx_control+0xc38>)
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	4be1      	ldr	r3, [pc, #900]	@ (800be50 <tx_control+0xc40>)
 800baca:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800bacc:	4be1      	ldr	r3, [pc, #900]	@ (800be54 <tx_control+0xc44>)
 800bace:	2201      	movs	r2, #1
 800bad0:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800bad2:	4be1      	ldr	r3, [pc, #900]	@ (800be58 <tx_control+0xc48>)
 800bad4:	2208      	movs	r2, #8
 800bad6:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800bad8:	4ae0      	ldr	r2, [pc, #896]	@ (800be5c <tx_control+0xc4c>)
 800bada:	4bdd      	ldr	r3, [pc, #884]	@ (800be50 <tx_control+0xc40>)
 800badc:	0011      	movs	r1, r2
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f9 f9bc 	bl	8004e5c <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800bae4:	4bde      	ldr	r3, [pc, #888]	@ (800be60 <tx_control+0xc50>)
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	0a1b      	lsrs	r3, r3, #8
 800baea:	b29b      	uxth	r3, r3
 800baec:	b2da      	uxtb	r2, r3
 800baee:	4bdb      	ldr	r3, [pc, #876]	@ (800be5c <tx_control+0xc4c>)
 800baf0:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800baf2:	4bdb      	ldr	r3, [pc, #876]	@ (800be60 <tx_control+0xc50>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	4bd8      	ldr	r3, [pc, #864]	@ (800be5c <tx_control+0xc4c>)
 800bafa:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800bafc:	4bd9      	ldr	r3, [pc, #868]	@ (800be64 <tx_control+0xc54>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	0a1b      	lsrs	r3, r3, #8
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	4bd5      	ldr	r3, [pc, #852]	@ (800be5c <tx_control+0xc4c>)
 800bb08:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800bb0a:	4bd6      	ldr	r3, [pc, #856]	@ (800be64 <tx_control+0xc54>)
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	4bd2      	ldr	r3, [pc, #840]	@ (800be5c <tx_control+0xc4c>)
 800bb12:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800bb14:	4bd4      	ldr	r3, [pc, #848]	@ (800be68 <tx_control+0xc58>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800bb1a:	4bcf      	ldr	r3, [pc, #828]	@ (800be58 <tx_control+0xc48>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800bb20:	4bd2      	ldr	r3, [pc, #840]	@ (800be6c <tx_control+0xc5c>)
 800bb22:	220c      	movs	r2, #12
 800bb24:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800bb26:	4bd1      	ldr	r3, [pc, #836]	@ (800be6c <tx_control+0xc5c>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	001a      	movs	r2, r3
 800bb2c:	4bcb      	ldr	r3, [pc, #812]	@ (800be5c <tx_control+0xc4c>)
 800bb2e:	0011      	movs	r1, r2
 800bb30:	0018      	movs	r0, r3
 800bb32:	f7f9 f945 	bl	8004dc0 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800bb36:	4bcc      	ldr	r3, [pc, #816]	@ (800be68 <tx_control+0xc58>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	0e1b      	lsrs	r3, r3, #24
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	4bc7      	ldr	r3, [pc, #796]	@ (800be5c <tx_control+0xc4c>)
 800bb40:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800bb42:	4bc9      	ldr	r3, [pc, #804]	@ (800be68 <tx_control+0xc58>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	0c1b      	lsrs	r3, r3, #16
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4bc4      	ldr	r3, [pc, #784]	@ (800be5c <tx_control+0xc4c>)
 800bb4c:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800bb4e:	4bc6      	ldr	r3, [pc, #792]	@ (800be68 <tx_control+0xc58>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	4bc1      	ldr	r3, [pc, #772]	@ (800be5c <tx_control+0xc4c>)
 800bb58:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800bb5a:	4bc3      	ldr	r3, [pc, #780]	@ (800be68 <tx_control+0xc58>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4bbe      	ldr	r3, [pc, #760]	@ (800be5c <tx_control+0xc4c>)
 800bb62:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800bb64:	4bc2      	ldr	r3, [pc, #776]	@ (800be70 <tx_control+0xc60>)
 800bb66:	4abd      	ldr	r2, [pc, #756]	@ (800be5c <tx_control+0xc4c>)
 800bb68:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800bb6a:	4bc2      	ldr	r3, [pc, #776]	@ (800be74 <tx_control+0xc64>)
 800bb6c:	4abb      	ldr	r2, [pc, #748]	@ (800be5c <tx_control+0xc4c>)
 800bb6e:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800bb70:	4bc1      	ldr	r3, [pc, #772]	@ (800be78 <tx_control+0xc68>)
 800bb72:	4ac2      	ldr	r2, [pc, #776]	@ (800be7c <tx_control+0xc6c>)
 800bb74:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800bb76:	4bb4      	ldr	r3, [pc, #720]	@ (800be48 <tx_control+0xc38>)
 800bb78:	2210      	movs	r2, #16
 800bb7a:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800bb7c:	4bb5      	ldr	r3, [pc, #724]	@ (800be54 <tx_control+0xc44>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800bb82:	4bb4      	ldr	r3, [pc, #720]	@ (800be54 <tx_control+0xc44>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800bb88:	4bbd      	ldr	r3, [pc, #756]	@ (800be80 <tx_control+0xc70>)
 800bb8a:	2255      	movs	r2, #85	@ 0x55
 800bb8c:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800bb8e:	4bac      	ldr	r3, [pc, #688]	@ (800be40 <tx_control+0xc30>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800bb94:	f001 fa39 	bl	800d00a <tx_control+0x1dfa>
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800bb98:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800bb9a:	4ba9      	ldr	r3, [pc, #676]	@ (800be40 <tx_control+0xc30>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b5c      	cmp	r3, #92	@ 0x5c
 800bba0:	d132      	bne.n	800bc08 <tx_control+0x9f8>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800bba2:	4ba8      	ldr	r3, [pc, #672]	@ (800be44 <tx_control+0xc34>)
 800bba4:	22f0      	movs	r2, #240	@ 0xf0
 800bba6:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800bba8:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800bbaa:	4baf      	ldr	r3, [pc, #700]	@ (800be68 <tx_control+0xc58>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800bbb0:	4ba9      	ldr	r3, [pc, #676]	@ (800be58 <tx_control+0xc48>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800bbb6:	4bad      	ldr	r3, [pc, #692]	@ (800be6c <tx_control+0xc5c>)
 800bbb8:	220b      	movs	r2, #11
 800bbba:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800bbbc:	4bb1      	ldr	r3, [pc, #708]	@ (800be84 <tx_control+0xc74>)
 800bbbe:	210b      	movs	r1, #11
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f7f9 f8fd 	bl	8004dc0 <buildChksumBloq>
			chksum_to_compare = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800bbca:	4bae      	ldr	r3, [pc, #696]	@ (800be84 <tx_control+0xc74>)
 800bbcc:	7adb      	ldrb	r3, [r3, #11]
 800bbce:	061b      	lsls	r3, r3, #24
 800bbd0:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800bbd2:	4bac      	ldr	r3, [pc, #688]	@ (800be84 <tx_control+0xc74>)
 800bbd4:	7b1b      	ldrb	r3, [r3, #12]
 800bbd6:	041b      	lsls	r3, r3, #16
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	18d3      	adds	r3, r2, r3
 800bbdc:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800bbde:	4ba9      	ldr	r3, [pc, #676]	@ (800be84 <tx_control+0xc74>)
 800bbe0:	7b5b      	ldrb	r3, [r3, #13]
 800bbe2:	021b      	lsls	r3, r3, #8
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	18d3      	adds	r3, r2, r3
 800bbe8:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800bbea:	4ba6      	ldr	r3, [pc, #664]	@ (800be84 <tx_control+0xc74>)
 800bbec:	7b9b      	ldrb	r3, [r3, #14]
 800bbee:	001a      	movs	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	189b      	adds	r3, r3, r2
 800bbf4:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800bbf6:	4b9c      	ldr	r3, [pc, #624]	@ (800be68 <tx_control+0xc58>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d101      	bne.n	800bc04 <tx_control+0x9f4>
 800bc00:	f001 f8d3 	bl	800cdaa <tx_control+0x1b9a>
				goto tx_timeBCD_error;
 800bc04:	f001 f9a4 	bl	800cf50 <tx_control+0x1d40>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800bc08:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800bc0a:	4b8d      	ldr	r3, [pc, #564]	@ (800be40 <tx_control+0xc30>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b5f      	cmp	r3, #95	@ 0x5f
 800bc10:	d115      	bne.n	800bc3e <tx_control+0xa2e>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800bc12:	4b8c      	ldr	r3, [pc, #560]	@ (800be44 <tx_control+0xc34>)
 800bc14:	22f0      	movs	r2, #240	@ 0xf0
 800bc16:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800bc18:	46c0      	nop			@ (mov r8, r8)

fin_tx_timeBCD:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_infoReloj:
			typeClock = 0;					// mov		typeClock,#0;				Reloj interno
 800bc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800be88 <tx_control+0xc78>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
			// ;mov		typeClock,#1;				Reloj con señal de CA
			if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
 800bc20:	4b9a      	ldr	r3, [pc, #616]	@ (800be8c <tx_control+0xc7c>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2201      	movs	r2, #1
 800bc26:	4053      	eors	r3, r2
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <tx_control+0xa22>
 800bc2e:	f001 f9ab 	bl	800cf88 <tx_control+0x1d78>
				goto noCristal;
 800bc32:	f001 f9ac 	bl	800cf8e <tx_control+0x1d7e>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800bc36:	46c0      	nop			@ (mov r8, r8)
 800bc38:	e002      	b.n	800bc40 <tx_control+0xa30>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	e000      	b.n	800bc40 <tx_control+0xa30>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800bc3e:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800bc40:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b


tx_wifi:

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
 800bc42:	2380      	movs	r3, #128	@ 0x80
 800bc44:	015b      	lsls	r3, r3, #5
 800bc46:	4a92      	ldr	r2, [pc, #584]	@ (800be90 <tx_control+0xc80>)
 800bc48:	0019      	movs	r1, r3
 800bc4a:	0010      	movs	r0, r2
 800bc4c:	f005 fa10 	bl	8011070 <HAL_GPIO_ReadPin>
 800bc50:	1e03      	subs	r3, r0, #0
 800bc52:	d101      	bne.n	800bc58 <tx_control+0xa48>
 800bc54:	f001 f9ff 	bl	800d056 <tx_control+0x1e46>
			goto tx_wifi_OK;
 800bc58:	f001 fa0e 	bl	800d078 <tx_control+0x1e68>
	     	point_Y[i] = point_X[i];
 800bc5c:	2036      	movs	r0, #54	@ 0x36
 800bc5e:	183b      	adds	r3, r7, r0
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc64:	18d2      	adds	r2, r2, r3
 800bc66:	183b      	adds	r3, r7, r0
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bc6c:	18cb      	adds	r3, r1, r3
 800bc6e:	7812      	ldrb	r2, [r2, #0]
 800bc70:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800bc72:	183b      	adds	r3, r7, r0
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	183b      	adds	r3, r7, r0
 800bc78:	3201      	adds	r2, #1
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	2336      	movs	r3, #54	@ 0x36
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b14      	cmp	r3, #20
 800bc84:	d9ea      	bls.n	800bc5c <tx_control+0xa4c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800bc86:	4b78      	ldr	r3, [pc, #480]	@ (800be68 <tx_control+0xc58>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800bc8c:	4b73      	ldr	r3, [pc, #460]	@ (800be5c <tx_control+0xc4c>)
 800bc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, size_handshake);
 800bc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc92:	2115      	movs	r1, #21
 800bc94:	0018      	movs	r0, r3
 800bc96:	f7f9 f893 	bl	8004dc0 <buildChksumBloq>
		asm ("nop");
 800bc9a:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800bc9c:	4b72      	ldr	r3, [pc, #456]	@ (800be68 <tx_control+0xc58>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	0e1b      	lsrs	r3, r3, #24
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	4b6d      	ldr	r3, [pc, #436]	@ (800be5c <tx_control+0xc4c>)
 800bca6:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800bca8:	4b6f      	ldr	r3, [pc, #444]	@ (800be68 <tx_control+0xc58>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	4b6a      	ldr	r3, [pc, #424]	@ (800be5c <tx_control+0xc4c>)
 800bcb2:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800bcb4:	4b6c      	ldr	r3, [pc, #432]	@ (800be68 <tx_control+0xc58>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	0a1b      	lsrs	r3, r3, #8
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	4b67      	ldr	r3, [pc, #412]	@ (800be5c <tx_control+0xc4c>)
 800bcbe:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800bcc0:	4b69      	ldr	r3, [pc, #420]	@ (800be68 <tx_control+0xc58>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	4b65      	ldr	r3, [pc, #404]	@ (800be5c <tx_control+0xc4c>)
 800bcc8:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800bcca:	4b69      	ldr	r3, [pc, #420]	@ (800be70 <tx_control+0xc60>)
 800bccc:	4a63      	ldr	r2, [pc, #396]	@ (800be5c <tx_control+0xc4c>)
 800bcce:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800bcd0:	4b68      	ldr	r3, [pc, #416]	@ (800be74 <tx_control+0xc64>)
 800bcd2:	4a62      	ldr	r2, [pc, #392]	@ (800be5c <tx_control+0xc4c>)
 800bcd4:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800bcd6:	4b68      	ldr	r3, [pc, #416]	@ (800be78 <tx_control+0xc68>)
 800bcd8:	4a6e      	ldr	r2, [pc, #440]	@ (800be94 <tx_control+0xc84>)
 800bcda:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800bcdc:	4b5a      	ldr	r3, [pc, #360]	@ (800be48 <tx_control+0xc38>)
 800bcde:	2219      	movs	r2, #25
 800bce0:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800bce2:	4b5c      	ldr	r3, [pc, #368]	@ (800be54 <tx_control+0xc44>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800bce8:	4b5a      	ldr	r3, [pc, #360]	@ (800be54 <tx_control+0xc44>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800bcee:	4b5e      	ldr	r3, [pc, #376]	@ (800be68 <tx_control+0xc58>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800bcf4:	4b57      	ldr	r3, [pc, #348]	@ (800be54 <tx_control+0xc44>)
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800bcfa:	4b61      	ldr	r3, [pc, #388]	@ (800be80 <tx_control+0xc70>)
 800bcfc:	2255      	movs	r2, #85	@ 0x55
 800bcfe:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800bd00:	4b4f      	ldr	r3, [pc, #316]	@ (800be40 <tx_control+0xc30>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800bd06:	f001 f980 	bl	800d00a <tx_control+0x1dfa>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800bd0a:	4b52      	ldr	r3, [pc, #328]	@ (800be54 <tx_control+0xc44>)
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800bd10:	4b4d      	ldr	r3, [pc, #308]	@ (800be48 <tx_control+0xc38>)
 800bd12:	2208      	movs	r2, #8
 800bd14:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800bd16:	4b60      	ldr	r3, [pc, #384]	@ (800be98 <tx_control+0xc88>)
 800bd18:	2201      	movs	r2, #1
 800bd1a:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800bd1c:	4b5f      	ldr	r3, [pc, #380]	@ (800be9c <tx_control+0xc8c>)
 800bd1e:	4a60      	ldr	r2, [pc, #384]	@ (800bea0 <tx_control+0xc90>)
 800bd20:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800bd22:	4b60      	ldr	r3, [pc, #384]	@ (800bea4 <tx_control+0xc94>)
 800bd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_X++;		//incw X ******************************************
 800bd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd28:	3301      	adds	r3, #1
 800bd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800bd2c:	4b5e      	ldr	r3, [pc, #376]	@ (800bea8 <tx_control+0xc98>)
 800bd2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd30:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800bd32:	4b5e      	ldr	r3, [pc, #376]	@ (800beac <tx_control+0xc9c>)
 800bd34:	2260      	movs	r2, #96	@ 0x60
 800bd36:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800bd38:	4b5d      	ldr	r3, [pc, #372]	@ (800beb0 <tx_control+0xca0>)
 800bd3a:	881a      	ldrh	r2, [r3, #0]
 800bd3c:	4b5d      	ldr	r3, [pc, #372]	@ (800beb4 <tx_control+0xca4>)
 800bd3e:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800bd40:	4b5d      	ldr	r3, [pc, #372]	@ (800beb8 <tx_control+0xca8>)
 800bd42:	4a5e      	ldr	r2, [pc, #376]	@ (800bebc <tx_control+0xcac>)
 800bd44:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800bd46:	f002 fa65 	bl	800e214 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800bd4a:	4b40      	ldr	r3, [pc, #256]	@ (800be4c <tx_control+0xc3c>)
 800bd4c:	227b      	movs	r2, #123	@ 0x7b
 800bd4e:	5c9a      	ldrb	r2, [r3, r2]
 800bd50:	4b3f      	ldr	r3, [pc, #252]	@ (800be50 <tx_control+0xc40>)
 800bd52:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800bd54:	4b3d      	ldr	r3, [pc, #244]	@ (800be4c <tx_control+0xc3c>)
 800bd56:	227c      	movs	r2, #124	@ 0x7c
 800bd58:	5c9a      	ldrb	r2, [r3, r2]
 800bd5a:	4b3d      	ldr	r3, [pc, #244]	@ (800be50 <tx_control+0xc40>)
 800bd5c:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800bd5e:	4b3c      	ldr	r3, [pc, #240]	@ (800be50 <tx_control+0xc40>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800bd64:	4b3a      	ldr	r3, [pc, #232]	@ (800be50 <tx_control+0xc40>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800bd6a:	4b39      	ldr	r3, [pc, #228]	@ (800be50 <tx_control+0xc40>)
 800bd6c:	2205      	movs	r2, #5
 800bd6e:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800bd70:	4b37      	ldr	r3, [pc, #220]	@ (800be50 <tx_control+0xc40>)
 800bd72:	2240      	movs	r2, #64	@ 0x40
 800bd74:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800bd76:	4b36      	ldr	r3, [pc, #216]	@ (800be50 <tx_control+0xc40>)
 800bd78:	2201      	movs	r2, #1
 800bd7a:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800bd7c:	4b34      	ldr	r3, [pc, #208]	@ (800be50 <tx_control+0xc40>)
 800bd7e:	2209      	movs	r2, #9
 800bd80:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800bd82:	4b34      	ldr	r3, [pc, #208]	@ (800be54 <tx_control+0xc44>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800bd88:	4b37      	ldr	r3, [pc, #220]	@ (800be68 <tx_control+0xc58>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800bd8e:	4b31      	ldr	r3, [pc, #196]	@ (800be54 <tx_control+0xc44>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800bd94:	4b3a      	ldr	r3, [pc, #232]	@ (800be80 <tx_control+0xc70>)
 800bd96:	2255      	movs	r2, #85	@ 0x55
 800bd98:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800bd9a:	4b29      	ldr	r3, [pc, #164]	@ (800be40 <tx_control+0xc30>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800bda0:	f001 f933 	bl	800d00a <tx_control+0x1dfa>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800bda4:	4b2b      	ldr	r3, [pc, #172]	@ (800be54 <tx_control+0xc44>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800bdaa:	4b27      	ldr	r3, [pc, #156]	@ (800be48 <tx_control+0xc38>)
 800bdac:	2208      	movs	r2, #8
 800bdae:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800bdb0:	4b39      	ldr	r3, [pc, #228]	@ (800be98 <tx_control+0xc88>)
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800bdb6:	4b39      	ldr	r3, [pc, #228]	@ (800be9c <tx_control+0xc8c>)
 800bdb8:	4a41      	ldr	r2, [pc, #260]	@ (800bec0 <tx_control+0xcb0>)
 800bdba:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800bdbc:	4b41      	ldr	r3, [pc, #260]	@ (800bec4 <tx_control+0xcb4>)
 800bdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_X++;						//incw	X ******************
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800bdc6:	4b38      	ldr	r3, [pc, #224]	@ (800bea8 <tx_control+0xc98>)
 800bdc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bdca:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800bdcc:	4b37      	ldr	r3, [pc, #220]	@ (800beac <tx_control+0xc9c>)
 800bdce:	22a0      	movs	r2, #160	@ 0xa0
 800bdd0:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800bdd2:	4b3d      	ldr	r3, [pc, #244]	@ (800bec8 <tx_control+0xcb8>)
 800bdd4:	881a      	ldrh	r2, [r3, #0]
 800bdd6:	4b37      	ldr	r3, [pc, #220]	@ (800beb4 <tx_control+0xca4>)
 800bdd8:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800bdda:	4b37      	ldr	r3, [pc, #220]	@ (800beb8 <tx_control+0xca8>)
 800bddc:	4a3b      	ldr	r2, [pc, #236]	@ (800becc <tx_control+0xcbc>)
 800bdde:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800bde0:	f002 fa18 	bl	800e214 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800bde4:	4b19      	ldr	r3, [pc, #100]	@ (800be4c <tx_control+0xc3c>)
 800bde6:	227b      	movs	r2, #123	@ 0x7b
 800bde8:	5c9a      	ldrb	r2, [r3, r2]
 800bdea:	4b19      	ldr	r3, [pc, #100]	@ (800be50 <tx_control+0xc40>)
 800bdec:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800bdee:	4b17      	ldr	r3, [pc, #92]	@ (800be4c <tx_control+0xc3c>)
 800bdf0:	227c      	movs	r2, #124	@ 0x7c
 800bdf2:	5c9a      	ldrb	r2, [r3, r2]
 800bdf4:	4b16      	ldr	r3, [pc, #88]	@ (800be50 <tx_control+0xc40>)
 800bdf6:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800bdf8:	4b15      	ldr	r3, [pc, #84]	@ (800be50 <tx_control+0xc40>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800bdfe:	4b14      	ldr	r3, [pc, #80]	@ (800be50 <tx_control+0xc40>)
 800be00:	2200      	movs	r2, #0
 800be02:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800be04:	4b12      	ldr	r3, [pc, #72]	@ (800be50 <tx_control+0xc40>)
 800be06:	2205      	movs	r2, #5
 800be08:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800be0a:	4b11      	ldr	r3, [pc, #68]	@ (800be50 <tx_control+0xc40>)
 800be0c:	22a0      	movs	r2, #160	@ 0xa0
 800be0e:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800be10:	4b0f      	ldr	r3, [pc, #60]	@ (800be50 <tx_control+0xc40>)
 800be12:	2202      	movs	r2, #2
 800be14:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800be16:	4b0e      	ldr	r3, [pc, #56]	@ (800be50 <tx_control+0xc40>)
 800be18:	220e      	movs	r2, #14
 800be1a:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800be1c:	4b0d      	ldr	r3, [pc, #52]	@ (800be54 <tx_control+0xc44>)
 800be1e:	2201      	movs	r2, #1
 800be20:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800be22:	4b11      	ldr	r3, [pc, #68]	@ (800be68 <tx_control+0xc58>)
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <tx_control+0xc44>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800be2e:	4b14      	ldr	r3, [pc, #80]	@ (800be80 <tx_control+0xc70>)
 800be30:	2255      	movs	r2, #85	@ 0x55
 800be32:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800be34:	4b02      	ldr	r3, [pc, #8]	@ (800be40 <tx_control+0xc30>)
 800be36:	2200      	movs	r2, #0
 800be38:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800be3a:	f001 f8e6 	bl	800d00a <tx_control+0x1dfa>
 800be3e:	46c0      	nop			@ (mov r8, r8)
 800be40:	20000e44 	.word	0x20000e44
 800be44:	20000f05 	.word	0x20000f05
 800be48:	20000e50 	.word	0x20000e50
 800be4c:	200000bc 	.word	0x200000bc
 800be50:	20000df8 	.word	0x20000df8
 800be54:	20000e3c 	.word	0x20000e3c
 800be58:	20000b77 	.word	0x20000b77
 800be5c:	20000fc8 	.word	0x20000fc8
 800be60:	20000dd0 	.word	0x20000dd0
 800be64:	20000dd2 	.word	0x20000dd2
 800be68:	20000e54 	.word	0x20000e54
 800be6c:	20000b76 	.word	0x20000b76
 800be70:	20000e34 	.word	0x20000e34
 800be74:	20000e2c 	.word	0x20000e2c
 800be78:	20000e30 	.word	0x20000e30
 800be7c:	20000fd8 	.word	0x20000fd8
 800be80:	20000e39 	.word	0x20000e39
 800be84:	200009d4 	.word	0x200009d4
 800be88:	200010d1 	.word	0x200010d1
 800be8c:	20001088 	.word	0x20001088
 800be90:	50000400 	.word	0x50000400
 800be94:	20000fe1 	.word	0x20000fe1
 800be98:	20000e24 	.word	0x20000e24
 800be9c:	20000e48 	.word	0x20000e48
 800bea0:	0803c000 	.word	0x0803c000
 800bea4:	0803efff 	.word	0x0803efff
 800bea8:	20000e4c 	.word	0x20000e4c
 800beac:	20000dbd 	.word	0x20000dbd
 800beb0:	2000105a 	.word	0x2000105a
 800beb4:	2000105e 	.word	0x2000105e
 800beb8:	20001060 	.word	0x20001060
 800bebc:	20000394 	.word	0x20000394
 800bec0:	08037000 	.word	0x08037000
 800bec4:	0803bfff 	.word	0x0803bfff
 800bec8:	2000105c 	.word	0x2000105c
 800becc:	20000396 	.word	0x20000396
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800bed0:	4be2      	ldr	r3, [pc, #904]	@ (800c25c <tx_control+0x104c>)
 800bed2:	79db      	ldrb	r3, [r3, #7]
 800bed4:	2201      	movs	r2, #1
 800bed6:	4313      	orrs	r3, r2
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	4be0      	ldr	r3, [pc, #896]	@ (800c25c <tx_control+0x104c>)
 800bedc:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_dh])												// deshielo activo ?
 800bede:	4be0      	ldr	r3, [pc, #896]	@ (800c260 <tx_control+0x1050>)
 800bee0:	785b      	ldrb	r3, [r3, #1]
 800bee2:	2201      	movs	r2, #1
 800bee4:	4053      	eors	r3, r2
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <tx_control+0xcea>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800beec:	4bdb      	ldr	r3, [pc, #876]	@ (800c25c <tx_control+0x104c>)
 800beee:	79db      	ldrb	r3, [r3, #7]
 800bef0:	2202      	movs	r2, #2
 800bef2:	4313      	orrs	r3, r2
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	4bd9      	ldr	r3, [pc, #868]	@ (800c25c <tx_control+0x104c>)
 800bef8:	71da      	strb	r2, [r3, #7]
		if (!flagsC[0])													// puerta abierta ?
 800befa:	4bda      	ldr	r3, [pc, #872]	@ (800c264 <tx_control+0x1054>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2201      	movs	r2, #1
 800bf00:	4053      	eors	r3, r2
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d006      	beq.n	800bf16 <tx_control+0xd06>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800bf08:	4bd4      	ldr	r3, [pc, #848]	@ (800c25c <tx_control+0x104c>)
 800bf0a:	79db      	ldrb	r3, [r3, #7]
 800bf0c:	2204      	movs	r2, #4
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	4bd2      	ldr	r3, [pc, #840]	@ (800c25c <tx_control+0x104c>)
 800bf14:	71da      	strb	r2, [r3, #7]
		if (!flagsC[1])													// Modo ahorro 1 activo ?
 800bf16:	4bd3      	ldr	r3, [pc, #844]	@ (800c264 <tx_control+0x1054>)
 800bf18:	785b      	ldrb	r3, [r3, #1]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4053      	eors	r3, r2
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <tx_control+0xd22>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800bf24:	4bcd      	ldr	r3, [pc, #820]	@ (800c25c <tx_control+0x104c>)
 800bf26:	79db      	ldrb	r3, [r3, #7]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4bcb      	ldr	r3, [pc, #812]	@ (800c25c <tx_control+0x104c>)
 800bf30:	71da      	strb	r2, [r3, #7]
		if (!flagsC[2])													// Modo ahorro 1 activo ?
 800bf32:	4bcc      	ldr	r3, [pc, #816]	@ (800c264 <tx_control+0x1054>)
 800bf34:	789b      	ldrb	r3, [r3, #2]
 800bf36:	2201      	movs	r2, #1
 800bf38:	4053      	eors	r3, r2
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d006      	beq.n	800bf4e <tx_control+0xd3e>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800bf40:	4bc6      	ldr	r3, [pc, #792]	@ (800c25c <tx_control+0x104c>)
 800bf42:	79db      	ldrb	r3, [r3, #7]
 800bf44:	2210      	movs	r2, #16
 800bf46:	4313      	orrs	r3, r2
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	4bc4      	ldr	r3, [pc, #784]	@ (800c25c <tx_control+0x104c>)
 800bf4c:	71da      	strb	r2, [r3, #7]
		if (!flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800bf4e:	4bc6      	ldr	r3, [pc, #792]	@ (800c268 <tx_control+0x1058>)
 800bf50:	78db      	ldrb	r3, [r3, #3]
 800bf52:	2201      	movs	r2, #1
 800bf54:	4053      	eors	r3, r2
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <tx_control+0xd5a>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800bf5c:	4bbf      	ldr	r3, [pc, #764]	@ (800c25c <tx_control+0x104c>)
 800bf5e:	79db      	ldrb	r3, [r3, #7]
 800bf60:	2220      	movs	r2, #32
 800bf62:	4313      	orrs	r3, r2
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4bbd      	ldr	r3, [pc, #756]	@ (800c25c <tx_control+0x104c>)
 800bf68:	71da      	strb	r2, [r3, #7]
		if (!GPIOR1 [f_fan])												// ventilador activo ?
 800bf6a:	4bc0      	ldr	r3, [pc, #768]	@ (800c26c <tx_control+0x105c>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	4053      	eors	r3, r2
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <tx_control+0xd76>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800bf78:	4bb8      	ldr	r3, [pc, #736]	@ (800c25c <tx_control+0x104c>)
 800bf7a:	79db      	ldrb	r3, [r3, #7]
 800bf7c:	2240      	movs	r2, #64	@ 0x40
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	4bb6      	ldr	r3, [pc, #728]	@ (800c25c <tx_control+0x104c>)
 800bf84:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800bf86:	4bb6      	ldr	r3, [pc, #728]	@ (800c260 <tx_control+0x1050>)
 800bf88:	789b      	ldrb	r3, [r3, #2]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	4053      	eors	r3, r2
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d007      	beq.n	800bfa4 <tx_control+0xd94>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800bf94:	4bb1      	ldr	r3, [pc, #708]	@ (800c25c <tx_control+0x104c>)
 800bf96:	79db      	ldrb	r3, [r3, #7]
 800bf98:	2280      	movs	r2, #128	@ 0x80
 800bf9a:	4252      	negs	r2, r2
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	4bae      	ldr	r3, [pc, #696]	@ (800c25c <tx_control+0x104c>)
 800bfa2:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800bfa4:	4bad      	ldr	r3, [pc, #692]	@ (800c25c <tx_control+0x104c>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800bfaa:	2300      	movs	r3, #0
 800bfac:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfae:	e011      	b.n	800bfd4 <tx_control+0xdc4>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800bfb0:	4baa      	ldr	r3, [pc, #680]	@ (800c25c <tx_control+0x104c>)
 800bfb2:	7a1a      	ldrb	r2, [r3, #8]
 800bfb4:	49ae      	ldr	r1, [pc, #696]	@ (800c270 <tx_control+0x1060>)
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	18cb      	adds	r3, r1, r3
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	4099      	lsls	r1, r3
 800bfc2:	000b      	movs	r3, r1
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	4ba4      	ldr	r3, [pc, #656]	@ (800c25c <tx_control+0x104c>)
 800bfcc:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd6:	2b07      	cmp	r3, #7
 800bfd8:	ddea      	ble.n	800bfb0 <tx_control+0xda0>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800bfda:	4ba0      	ldr	r3, [pc, #640]	@ (800c25c <tx_control+0x104c>)
 800bfdc:	7a1b      	ldrb	r3, [r3, #8]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4393      	bics	r3, r2
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b9d      	ldr	r3, [pc, #628]	@ (800c25c <tx_control+0x104c>)
 800bfe6:	721a      	strb	r2, [r3, #8]
		Bloque_TiempoReal [alarmas_RT] = trefst;
 800bfe8:	4ba2      	ldr	r3, [pc, #648]	@ (800c274 <tx_control+0x1064>)
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	4b9b      	ldr	r3, [pc, #620]	@ (800c25c <tx_control+0x104c>)
 800bfee:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800bff0:	232f      	movs	r3, #47	@ 0x2f
 800bff2:	18fb      	adds	r3, r7, r3
 800bff4:	2200      	movs	r2, #0
 800bff6:	701a      	strb	r2, [r3, #0]
 800bff8:	e017      	b.n	800c02a <tx_control+0xe1a>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800bffa:	4b98      	ldr	r3, [pc, #608]	@ (800c25c <tx_control+0x104c>)
 800bffc:	7a5b      	ldrb	r3, [r3, #9]
 800bffe:	b25a      	sxtb	r2, r3
 800c000:	202f      	movs	r0, #47	@ 0x2f
 800c002:	183b      	adds	r3, r7, r0
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	499b      	ldr	r1, [pc, #620]	@ (800c274 <tx_control+0x1064>)
 800c008:	5ccb      	ldrb	r3, [r1, r3]
 800c00a:	0019      	movs	r1, r3
 800c00c:	183b      	adds	r3, r7, r0
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	4099      	lsls	r1, r3
 800c012:	000b      	movs	r3, r1
 800c014:	b25b      	sxtb	r3, r3
 800c016:	4313      	orrs	r3, r2
 800c018:	b25b      	sxtb	r3, r3
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	4b8f      	ldr	r3, [pc, #572]	@ (800c25c <tx_control+0x104c>)
 800c01e:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800c020:	183b      	adds	r3, r7, r0
 800c022:	781a      	ldrb	r2, [r3, #0]
 800c024:	183b      	adds	r3, r7, r0
 800c026:	3201      	adds	r2, #1
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	232f      	movs	r3, #47	@ 0x2f
 800c02c:	18fb      	adds	r3, r7, r3
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b07      	cmp	r3, #7
 800c032:	d9e2      	bls.n	800bffa <tx_control+0xdea>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800c034:	4b90      	ldr	r3, [pc, #576]	@ (800c278 <tx_control+0x1068>)
 800c036:	220a      	movs	r2, #10
 800c038:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800c03a:	4b90      	ldr	r3, [pc, #576]	@ (800c27c <tx_control+0x106c>)
 800c03c:	227b      	movs	r2, #123	@ 0x7b
 800c03e:	5c9a      	ldrb	r2, [r3, r2]
 800c040:	4b8f      	ldr	r3, [pc, #572]	@ (800c280 <tx_control+0x1070>)
 800c042:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800c044:	4b8d      	ldr	r3, [pc, #564]	@ (800c27c <tx_control+0x106c>)
 800c046:	227c      	movs	r2, #124	@ 0x7c
 800c048:	5c9a      	ldrb	r2, [r3, r2]
 800c04a:	4b8d      	ldr	r3, [pc, #564]	@ (800c280 <tx_control+0x1070>)
 800c04c:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800c04e:	4b8c      	ldr	r3, [pc, #560]	@ (800c280 <tx_control+0x1070>)
 800c050:	2200      	movs	r2, #0
 800c052:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800c054:	4b8a      	ldr	r3, [pc, #552]	@ (800c280 <tx_control+0x1070>)
 800c056:	2200      	movs	r2, #0
 800c058:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800c05a:	4b89      	ldr	r3, [pc, #548]	@ (800c280 <tx_control+0x1070>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800c060:	4b87      	ldr	r3, [pc, #540]	@ (800c280 <tx_control+0x1070>)
 800c062:	2201      	movs	r2, #1
 800c064:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800c066:	4b86      	ldr	r3, [pc, #536]	@ (800c280 <tx_control+0x1070>)
 800c068:	2203      	movs	r2, #3
 800c06a:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800c06c:	4b82      	ldr	r3, [pc, #520]	@ (800c278 <tx_control+0x1068>)
 800c06e:	781a      	ldrb	r2, [r3, #0]
 800c070:	4b83      	ldr	r3, [pc, #524]	@ (800c280 <tx_control+0x1070>)
 800c072:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800c074:	4b83      	ldr	r3, [pc, #524]	@ (800c284 <tx_control+0x1074>)
 800c076:	2201      	movs	r2, #1
 800c078:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800c07a:	4b81      	ldr	r3, [pc, #516]	@ (800c280 <tx_control+0x1070>)
 800c07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 //
 800c07e:	4b82      	ldr	r3, [pc, #520]	@ (800c288 <tx_control+0x1078>)
 800c080:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 8 ; i++ )
 800c082:	232e      	movs	r3, #46	@ 0x2e
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	2200      	movs	r2, #0
 800c088:	701a      	strb	r2, [r3, #0]
 800c08a:	e00f      	b.n	800c0ac <tx_control+0xe9c>
			point_Y[i] = point_X[i];
 800c08c:	202e      	movs	r0, #46	@ 0x2e
 800c08e:	183b      	adds	r3, r7, r0
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c094:	18d2      	adds	r2, r2, r3
 800c096:	183b      	adds	r3, r7, r0
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c09c:	18cb      	adds	r3, r1, r3
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800c0a2:	183b      	adds	r3, r7, r0
 800c0a4:	781a      	ldrb	r2, [r3, #0]
 800c0a6:	183b      	adds	r3, r7, r0
 800c0a8:	3201      	adds	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	232e      	movs	r3, #46	@ 0x2e
 800c0ae:	18fb      	adds	r3, r7, r3
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b07      	cmp	r3, #7
 800c0b4:	d9ea      	bls.n	800c08c <tx_control+0xe7c>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800c0b6:	4b69      	ldr	r3, [pc, #420]	@ (800c25c <tx_control+0x104c>)
 800c0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[8];	 //
 800c0ba:	4b74      	ldr	r3, [pc, #464]	@ (800c28c <tx_control+0x107c>)
 800c0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 10 ; i++ )
 800c0be:	232d      	movs	r3, #45	@ 0x2d
 800c0c0:	18fb      	adds	r3, r7, r3
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	e00f      	b.n	800c0e8 <tx_control+0xed8>
			point_Y[i] = point_X[i];
 800c0c8:	202d      	movs	r0, #45	@ 0x2d
 800c0ca:	183b      	adds	r3, r7, r0
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c0d0:	18d2      	adds	r2, r2, r3
 800c0d2:	183b      	adds	r3, r7, r0
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c0d8:	18cb      	adds	r3, r1, r3
 800c0da:	7812      	ldrb	r2, [r2, #0]
 800c0dc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800c0de:	183b      	adds	r3, r7, r0
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	3201      	adds	r2, #1
 800c0e6:	701a      	strb	r2, [r3, #0]
 800c0e8:	232d      	movs	r3, #45	@ 0x2d
 800c0ea:	18fb      	adds	r3, r7, r3
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b09      	cmp	r3, #9
 800c0f0:	d9ea      	bls.n	800c0c8 <tx_control+0xeb8>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800c0f2:	4b67      	ldr	r3, [pc, #412]	@ (800c290 <tx_control+0x1080>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800c0f8:	4b63      	ldr	r3, [pc, #396]	@ (800c288 <tx_control+0x1078>)
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fe:	2112      	movs	r1, #18
 800c100:	0018      	movs	r0, r3
 800c102:	f7f8 fe5d 	bl	8004dc0 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800c106:	4b62      	ldr	r3, [pc, #392]	@ (800c290 <tx_control+0x1080>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	0e1b      	lsrs	r3, r3, #24
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b5e      	ldr	r3, [pc, #376]	@ (800c288 <tx_control+0x1078>)
 800c110:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800c112:	4b5f      	ldr	r3, [pc, #380]	@ (800c290 <tx_control+0x1080>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	0c1b      	lsrs	r3, r3, #16
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	4b5b      	ldr	r3, [pc, #364]	@ (800c288 <tx_control+0x1078>)
 800c11c:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800c11e:	4b5c      	ldr	r3, [pc, #368]	@ (800c290 <tx_control+0x1080>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	0a1b      	lsrs	r3, r3, #8
 800c124:	b2da      	uxtb	r2, r3
 800c126:	4b58      	ldr	r3, [pc, #352]	@ (800c288 <tx_control+0x1078>)
 800c128:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800c12a:	4b59      	ldr	r3, [pc, #356]	@ (800c290 <tx_control+0x1080>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	4b55      	ldr	r3, [pc, #340]	@ (800c288 <tx_control+0x1078>)
 800c132:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800c134:	4b57      	ldr	r3, [pc, #348]	@ (800c294 <tx_control+0x1084>)
 800c136:	4a54      	ldr	r2, [pc, #336]	@ (800c288 <tx_control+0x1078>)
 800c138:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800c13a:	4b57      	ldr	r3, [pc, #348]	@ (800c298 <tx_control+0x1088>)
 800c13c:	4a52      	ldr	r2, [pc, #328]	@ (800c288 <tx_control+0x1078>)
 800c13e:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800c140:	4b56      	ldr	r3, [pc, #344]	@ (800c29c <tx_control+0x108c>)
 800c142:	4a57      	ldr	r2, [pc, #348]	@ (800c2a0 <tx_control+0x1090>)
 800c144:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800c146:	4b4c      	ldr	r3, [pc, #304]	@ (800c278 <tx_control+0x1068>)
 800c148:	2216      	movs	r2, #22
 800c14a:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800c14c:	4b4d      	ldr	r3, [pc, #308]	@ (800c284 <tx_control+0x1074>)
 800c14e:	2200      	movs	r2, #0
 800c150:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800c152:	4b4c      	ldr	r3, [pc, #304]	@ (800c284 <tx_control+0x1074>)
 800c154:	2201      	movs	r2, #1
 800c156:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800c158:	4b52      	ldr	r3, [pc, #328]	@ (800c2a4 <tx_control+0x1094>)
 800c15a:	2255      	movs	r2, #85	@ 0x55
 800c15c:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800c15e:	4b52      	ldr	r3, [pc, #328]	@ (800c2a8 <tx_control+0x1098>)
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800c164:	f000 ff51 	bl	800d00a <tx_control+0x1dfa>
			point_Y[i] = point_X[i];
 800c168:	202c      	movs	r0, #44	@ 0x2c
 800c16a:	183b      	adds	r3, r7, r0
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c170:	18d2      	adds	r2, r2, r3
 800c172:	183b      	adds	r3, r7, r0
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c178:	18cb      	adds	r3, r1, r3
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800c17e:	183b      	adds	r3, r7, r0
 800c180:	781a      	ldrb	r2, [r3, #0]
 800c182:	183b      	adds	r3, r7, r0
 800c184:	3201      	adds	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	232c      	movs	r3, #44	@ 0x2c
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b07      	cmp	r3, #7
 800c190:	d9ea      	bls.n	800c168 <tx_control+0xf58>
		point_Y = &bufferTxControl[8];	 //
 800c192:	4b3e      	ldr	r3, [pc, #248]	@ (800c28c <tx_control+0x107c>)
 800c194:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 128 ; i++ )
 800c196:	232b      	movs	r3, #43	@ 0x2b
 800c198:	18fb      	adds	r3, r7, r3
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e017      	b.n	800c1d0 <tx_control+0xfc0>
			point_Y[i] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[i]);
 800c1a0:	242b      	movs	r4, #43	@ 0x2b
 800c1a2:	193b      	adds	r3, r7, r4
 800c1a4:	781a      	ldrb	r2, [r3, #0]
 800c1a6:	4b41      	ldr	r3, [pc, #260]	@ (800c2ac <tx_control+0x109c>)
 800c1a8:	18d3      	adds	r3, r2, r3
 800c1aa:	001a      	movs	r2, r3
 800c1ac:	4b40      	ldr	r3, [pc, #256]	@ (800c2b0 <tx_control+0x10a0>)
 800c1ae:	0011      	movs	r1, r2
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7f4 fc83 	bl	8000abc <findLastValue>
 800c1b6:	0001      	movs	r1, r0
 800c1b8:	0020      	movs	r0, r4
 800c1ba:	183b      	adds	r3, r7, r0
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1c0:	18d3      	adds	r3, r2, r3
 800c1c2:	b2ca      	uxtb	r2, r1
 800c1c4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800c1c6:	183b      	adds	r3, r7, r0
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	183b      	adds	r3, r7, r0
 800c1cc:	3201      	adds	r2, #1
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	232b      	movs	r3, #43	@ 0x2b
 800c1d2:	18fb      	adds	r3, r7, r3
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b25b      	sxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dae1      	bge.n	800c1a0 <tx_control+0xf90>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800c1dc:	4b2c      	ldr	r3, [pc, #176]	@ (800c290 <tx_control+0x1080>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800c1e2:	4b29      	ldr	r3, [pc, #164]	@ (800c288 <tx_control+0x1078>)
 800c1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800c1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e8:	2188      	movs	r1, #136	@ 0x88
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f7f8 fde8 	bl	8004dc0 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800c1f0:	4b27      	ldr	r3, [pc, #156]	@ (800c290 <tx_control+0x1080>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	0e1b      	lsrs	r3, r3, #24
 800c1f6:	b2d9      	uxtb	r1, r3
 800c1f8:	4b23      	ldr	r3, [pc, #140]	@ (800c288 <tx_control+0x1078>)
 800c1fa:	2288      	movs	r2, #136	@ 0x88
 800c1fc:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800c1fe:	4b24      	ldr	r3, [pc, #144]	@ (800c290 <tx_control+0x1080>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	b2d9      	uxtb	r1, r3
 800c206:	4b20      	ldr	r3, [pc, #128]	@ (800c288 <tx_control+0x1078>)
 800c208:	2289      	movs	r2, #137	@ 0x89
 800c20a:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800c20c:	4b20      	ldr	r3, [pc, #128]	@ (800c290 <tx_control+0x1080>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	0a1b      	lsrs	r3, r3, #8
 800c212:	b2d9      	uxtb	r1, r3
 800c214:	4b1c      	ldr	r3, [pc, #112]	@ (800c288 <tx_control+0x1078>)
 800c216:	228a      	movs	r2, #138	@ 0x8a
 800c218:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800c21a:	4b1d      	ldr	r3, [pc, #116]	@ (800c290 <tx_control+0x1080>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	b2d9      	uxtb	r1, r3
 800c220:	4b19      	ldr	r3, [pc, #100]	@ (800c288 <tx_control+0x1078>)
 800c222:	228b      	movs	r2, #139	@ 0x8b
 800c224:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800c226:	4b1b      	ldr	r3, [pc, #108]	@ (800c294 <tx_control+0x1084>)
 800c228:	4a17      	ldr	r2, [pc, #92]	@ (800c288 <tx_control+0x1078>)
 800c22a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800c22c:	4b1a      	ldr	r3, [pc, #104]	@ (800c298 <tx_control+0x1088>)
 800c22e:	4a16      	ldr	r2, [pc, #88]	@ (800c288 <tx_control+0x1078>)
 800c230:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800c232:	4b1a      	ldr	r3, [pc, #104]	@ (800c29c <tx_control+0x108c>)
 800c234:	4a1f      	ldr	r2, [pc, #124]	@ (800c2b4 <tx_control+0x10a4>)
 800c236:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800c238:	4b0f      	ldr	r3, [pc, #60]	@ (800c278 <tx_control+0x1068>)
 800c23a:	228c      	movs	r2, #140	@ 0x8c
 800c23c:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800c23e:	4b11      	ldr	r3, [pc, #68]	@ (800c284 <tx_control+0x1074>)
 800c240:	2200      	movs	r2, #0
 800c242:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800c244:	4b0f      	ldr	r3, [pc, #60]	@ (800c284 <tx_control+0x1074>)
 800c246:	2201      	movs	r2, #1
 800c248:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800c24a:	4b16      	ldr	r3, [pc, #88]	@ (800c2a4 <tx_control+0x1094>)
 800c24c:	2255      	movs	r2, #85	@ 0x55
 800c24e:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800c250:	4b15      	ldr	r3, [pc, #84]	@ (800c2a8 <tx_control+0x1098>)
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800c256:	f000 fed8 	bl	800d00a <tx_control+0x1dfa>
 800c25a:	46c0      	nop			@ (mov r8, r8)
 800c25c:	20000e18 	.word	0x20000e18
 800c260:	20000bc4 	.word	0x20000bc4
 800c264:	20000c5c 	.word	0x20000c5c
 800c268:	20000b98 	.word	0x20000b98
 800c26c:	20000c00 	.word	0x20000c00
 800c270:	20000ba0 	.word	0x20000ba0
 800c274:	20000ba8 	.word	0x20000ba8
 800c278:	20000e50 	.word	0x20000e50
 800c27c:	200000bc 	.word	0x200000bc
 800c280:	20000df8 	.word	0x20000df8
 800c284:	20000e3c 	.word	0x20000e3c
 800c288:	20000fc8 	.word	0x20000fc8
 800c28c:	20000fd0 	.word	0x20000fd0
 800c290:	20000e54 	.word	0x20000e54
 800c294:	20000e34 	.word	0x20000e34
 800c298:	20000e2c 	.word	0x20000e2c
 800c29c:	20000e30 	.word	0x20000e30
 800c2a0:	20000fde 	.word	0x20000fde
 800c2a4:	20000e39 	.word	0x20000e39
 800c2a8:	20000e44 	.word	0x20000e44
 800c2ac:	20000304 	.word	0x20000304
 800c2b0:	0803f000 	.word	0x0803f000
 800c2b4:	20001054 	.word	0x20001054
				goto 	verifica_version2;		//jreq	verifica_version2
 800c2b8:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2])){
 800c2ba:	4be5      	ldr	r3, [pc, #916]	@ (800c650 <tx_control+0x1440>)
 800c2bc:	227e      	movs	r2, #126	@ 0x7e
 800c2be:	5c9b      	ldrb	r3, [r3, r2]
 800c2c0:	001c      	movs	r4, r3
 800c2c2:	4be4      	ldr	r3, [pc, #912]	@ (800c654 <tx_control+0x1444>)
 800c2c4:	4ae4      	ldr	r2, [pc, #912]	@ (800c658 <tx_control+0x1448>)
 800c2c6:	0019      	movs	r1, r3
 800c2c8:	0010      	movs	r0, r2
 800c2ca:	f7f4 fbf7 	bl	8000abc <findLastValue>
 800c2ce:	0003      	movs	r3, r0
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	d159      	bne.n	800c388 <tx_control+0x1178>
				goto 	verifica_version3;		//jreq	verifica_version3
 800c2d4:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800c2d6:	4bde      	ldr	r3, [pc, #888]	@ (800c650 <tx_control+0x1440>)
 800c2d8:	789b      	ldrb	r3, [r3, #2]
 800c2da:	2baa      	cmp	r3, #170	@ 0xaa
 800c2dc:	d156      	bne.n	800c38c <tx_control+0x117c>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800c2de:	4bdc      	ldr	r3, [pc, #880]	@ (800c650 <tx_control+0x1440>)
 800c2e0:	2243      	movs	r2, #67	@ 0x43
 800c2e2:	5c9b      	ldrb	r3, [r3, r2]
 800c2e4:	2b66      	cmp	r3, #102	@ 0x66
 800c2e6:	d153      	bne.n	800c390 <tx_control+0x1180>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800c2e8:	4bd9      	ldr	r3, [pc, #868]	@ (800c650 <tx_control+0x1440>)
 800c2ea:	2281      	movs	r2, #129	@ 0x81
 800c2ec:	5c9b      	ldrb	r3, [r3, r2]
 800c2ee:	2bcc      	cmp	r3, #204	@ 0xcc
 800c2f0:	d150      	bne.n	800c394 <tx_control+0x1184>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800c2f2:	4bda      	ldr	r3, [pc, #872]	@ (800c65c <tx_control+0x144c>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800c2f8:	4bd5      	ldr	r3, [pc, #852]	@ (800c650 <tx_control+0x1440>)
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800c2fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fe:	2182      	movs	r1, #130	@ 0x82
 800c300:	0018      	movs	r0, r3
 800c302:	f7f8 fd5d 	bl	8004dc0 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800c30a:	4bd1      	ldr	r3, [pc, #836]	@ (800c650 <tx_control+0x1440>)
 800c30c:	2282      	movs	r2, #130	@ 0x82
 800c30e:	5c9b      	ldrb	r3, [r3, r2]
 800c310:	061b      	lsls	r3, r3, #24
 800c312:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800c314:	4bce      	ldr	r3, [pc, #824]	@ (800c650 <tx_control+0x1440>)
 800c316:	2283      	movs	r2, #131	@ 0x83
 800c318:	5c9b      	ldrb	r3, [r3, r2]
 800c31a:	041b      	lsls	r3, r3, #16
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	18d3      	adds	r3, r2, r3
 800c320:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800c322:	4bcb      	ldr	r3, [pc, #812]	@ (800c650 <tx_control+0x1440>)
 800c324:	2284      	movs	r2, #132	@ 0x84
 800c326:	5c9b      	ldrb	r3, [r3, r2]
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	18d3      	adds	r3, r2, r3
 800c32e:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800c330:	4bc7      	ldr	r3, [pc, #796]	@ (800c650 <tx_control+0x1440>)
 800c332:	2285      	movs	r2, #133	@ 0x85
 800c334:	5c9b      	ldrb	r3, [r3, r2]
 800c336:	001a      	movs	r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	189b      	adds	r3, r3, r2
 800c33c:	603b      	str	r3, [r7, #0]
			if (chksum_32_HW_LW != chksum_to_compare){
 800c33e:	4bc7      	ldr	r3, [pc, #796]	@ (800c65c <tx_control+0x144c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d127      	bne.n	800c398 <tx_control+0x1188>
write_param:
 800c348:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800c34a:	4bc5      	ldr	r3, [pc, #788]	@ (800c660 <tx_control+0x1450>)
 800c34c:	2255      	movs	r2, #85	@ 0x55
 800c34e:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800c350:	4bbf      	ldr	r3, [pc, #764]	@ (800c650 <tx_control+0x1440>)
 800c352:	63fb      	str	r3, [r7, #60]	@ 0x3c
			point_X++;
 800c354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c356:	3301      	adds	r3, #1
 800c358:	63fb      	str	r3, [r7, #60]	@ 0x3c
			point_X++;
 800c35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c35c:	3301      	adds	r3, #1
 800c35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			dataPointer =	point_X;	// LDW		dataPointer,X
 800c360:	4bc0      	ldr	r3, [pc, #768]	@ (800c664 <tx_control+0x1454>)
 800c362:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c364:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800c366:	4bc0      	ldr	r3, [pc, #768]	@ (800c668 <tx_control+0x1458>)
 800c368:	4ac0      	ldr	r2, [pc, #768]	@ (800c66c <tx_control+0x145c>)
 800c36a:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800c36c:	f7f8 fdae 	bl	8004ecc <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800c370:	4bbf      	ldr	r3, [pc, #764]	@ (800c670 <tx_control+0x1460>)
 800c372:	22f1      	movs	r2, #241	@ 0xf1
 800c374:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c376:	4bbe      	ldr	r3, [pc, #760]	@ (800c670 <tx_control+0x1460>)
 800c378:	223d      	movs	r2, #61	@ 0x3d
 800c37a:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800c37c:	4bbd      	ldr	r3, [pc, #756]	@ (800c674 <tx_control+0x1464>)
 800c37e:	2201      	movs	r2, #1
 800c380:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800c382:	e010      	b.n	800c3a6 <tx_control+0x1196>
			goto	no_writeParam;				//jp		no_writeParam
 800c384:	46c0      	nop			@ (mov r8, r8)
 800c386:	e008      	b.n	800c39a <tx_control+0x118a>
			goto	no_writeParam;				//jp		no_writeParam
 800c388:	46c0      	nop			@ (mov r8, r8)
 800c38a:	e006      	b.n	800c39a <tx_control+0x118a>
				goto	no_writeParam;			//jrne	no_writeParam
 800c38c:	46c0      	nop			@ (mov r8, r8)
 800c38e:	e004      	b.n	800c39a <tx_control+0x118a>
				goto	no_writeParam;			//jrne	no_writeParam
 800c390:	46c0      	nop			@ (mov r8, r8)
 800c392:	e002      	b.n	800c39a <tx_control+0x118a>
				goto	no_writeParam;			//jrne	no_writeParam
 800c394:	46c0      	nop			@ (mov r8, r8)
 800c396:	e000      	b.n	800c39a <tx_control+0x118a>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800c398:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800c39a:	4bb5      	ldr	r3, [pc, #724]	@ (800c670 <tx_control+0x1460>)
 800c39c:	22f1      	movs	r2, #241	@ 0xf1
 800c39e:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800c3a0:	4bb3      	ldr	r3, [pc, #716]	@ (800c670 <tx_control+0x1460>)
 800c3a2:	223e      	movs	r2, #62	@ 0x3e
 800c3a4:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800c3a6:	4bb4      	ldr	r3, [pc, #720]	@ (800c678 <tx_control+0x1468>)
 800c3a8:	4ab1      	ldr	r2, [pc, #708]	@ (800c670 <tx_control+0x1460>)
 800c3aa:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800c3ac:	4bb3      	ldr	r3, [pc, #716]	@ (800c67c <tx_control+0x146c>)
 800c3ae:	4ab0      	ldr	r2, [pc, #704]	@ (800c670 <tx_control+0x1460>)
 800c3b0:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800c3b2:	4bb3      	ldr	r3, [pc, #716]	@ (800c680 <tx_control+0x1470>)
 800c3b4:	4ab3      	ldr	r2, [pc, #716]	@ (800c684 <tx_control+0x1474>)
 800c3b6:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800c3b8:	4bb3      	ldr	r3, [pc, #716]	@ (800c688 <tx_control+0x1478>)
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800c3be:	4bad      	ldr	r3, [pc, #692]	@ (800c674 <tx_control+0x1464>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800c3c4:	4bb1      	ldr	r3, [pc, #708]	@ (800c68c <tx_control+0x147c>)
 800c3c6:	2255      	movs	r2, #85	@ 0x55
 800c3c8:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800c3ca:	4bb1      	ldr	r3, [pc, #708]	@ (800c690 <tx_control+0x1480>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800c3d0:	f000 fe1b 	bl	800d00a <tx_control+0x1dfa>
				goto rx_firmware01;
 800c3d4:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800c3d6:	4baf      	ldr	r3, [pc, #700]	@ (800c694 <tx_control+0x1484>)
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d133      	bne.n	800c446 <tx_control+0x1236>
rx_numBloqFirm:
 800c3de:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800c3e0:	4bab      	ldr	r3, [pc, #684]	@ (800c690 <tx_control+0x1480>)
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b49      	cmp	r3, #73	@ 0x49
 800c3e6:	d000      	beq.n	800c3ea <tx_control+0x11da>
 800c3e8:	e193      	b.n	800c712 <tx_control+0x1502>
				goto rx_numBloqFirm_01;
 800c3ea:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = RxBuffer_Ble[2];
 800c3ec:	4b98      	ldr	r3, [pc, #608]	@ (800c650 <tx_control+0x1440>)
 800c3ee:	789a      	ldrb	r2, [r3, #2]
 800c3f0:	4ba9      	ldr	r3, [pc, #676]	@ (800c698 <tx_control+0x1488>)
 800c3f2:	701a      	strb	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800c3f4:	4ba9      	ldr	r3, [pc, #676]	@ (800c69c <tx_control+0x148c>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800c3fa:	4ba9      	ldr	r3, [pc, #676]	@ (800c6a0 <tx_control+0x1490>)
 800c3fc:	22f1      	movs	r2, #241	@ 0xf1
 800c3fe:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800c400:	4ba7      	ldr	r3, [pc, #668]	@ (800c6a0 <tx_control+0x1490>)
 800c402:	2207      	movs	r2, #7
 800c404:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800c406:	4ba3      	ldr	r3, [pc, #652]	@ (800c694 <tx_control+0x1484>)
 800c408:	2201      	movs	r2, #1
 800c40a:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800c40c:	4ba5      	ldr	r3, [pc, #660]	@ (800c6a4 <tx_control+0x1494>)
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800c412:	4b99      	ldr	r3, [pc, #612]	@ (800c678 <tx_control+0x1468>)
 800c414:	4aa2      	ldr	r2, [pc, #648]	@ (800c6a0 <tx_control+0x1490>)
 800c416:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c418:	4b98      	ldr	r3, [pc, #608]	@ (800c67c <tx_control+0x146c>)
 800c41a:	4aa1      	ldr	r2, [pc, #644]	@ (800c6a0 <tx_control+0x1490>)
 800c41c:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800c41e:	4b98      	ldr	r3, [pc, #608]	@ (800c680 <tx_control+0x1470>)
 800c420:	4aa1      	ldr	r2, [pc, #644]	@ (800c6a8 <tx_control+0x1498>)
 800c422:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800c424:	4b98      	ldr	r3, [pc, #608]	@ (800c688 <tx_control+0x1478>)
 800c426:	2202      	movs	r2, #2
 800c428:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800c42a:	4b92      	ldr	r3, [pc, #584]	@ (800c674 <tx_control+0x1464>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c430:	4b96      	ldr	r3, [pc, #600]	@ (800c68c <tx_control+0x147c>)
 800c432:	2255      	movs	r2, #85	@ 0x55
 800c434:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800c436:	4b96      	ldr	r3, [pc, #600]	@ (800c690 <tx_control+0x1480>)
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;							// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800c43c:	4b9b      	ldr	r3, [pc, #620]	@ (800c6ac <tx_control+0x149c>)
 800c43e:	2205      	movs	r2, #5
 800c440:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800c442:	f000 fde2 	bl	800d00a <tx_control+0x1dfa>
				goto rxBloqFirm;
 800c446:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800c448:	4b92      	ldr	r3, [pc, #584]	@ (800c694 <tx_control+0x1484>)
 800c44a:	789b      	ldrb	r3, [r3, #2]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <tx_control+0x1244>
 800c450:	f000 fdda 	bl	800d008 <tx_control+0x1df8>
				goto rxBloqFirm_01;
 800c454:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800c456:	4b8f      	ldr	r3, [pc, #572]	@ (800c694 <tx_control+0x1484>)
 800c458:	2200      	movs	r2, #0
 800c45a:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800c45c:	4b7f      	ldr	r3, [pc, #508]	@ (800c65c <tx_control+0x144c>)
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800c462:	4b93      	ldr	r3, [pc, #588]	@ (800c6b0 <tx_control+0x14a0>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[0]); // call	build_chksum;	/ ve calculando el checksum
 800c468:	4b79      	ldr	r3, [pc, #484]	@ (800c650 <tx_control+0x1440>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	0018      	movs	r0, r3
 800c46e:	f7f8 fd19 	bl	8004ea4 <build_chksum>
			wreg++;			// inc		wreg
 800c472:	4b8f      	ldr	r3, [pc, #572]	@ (800c6b0 <tx_control+0x14a0>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	3301      	adds	r3, #1
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	4b8d      	ldr	r3, [pc, #564]	@ (800c6b0 <tx_control+0x14a0>)
 800c47c:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800c47e:	4b8c      	ldr	r3, [pc, #560]	@ (800c6b0 <tx_control+0x14a0>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b25b      	sxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	db00      	blt.n	800c48a <tx_control+0x127a>
				goto load_bloqFirm;
 800c488:	e7ee      	b.n	800c468 <tx_control+0x1258>
			resulh = RxBuffer_Ble[1]; // ld		resulh,a
 800c48a:	4b71      	ldr	r3, [pc, #452]	@ (800c650 <tx_control+0x1440>)
 800c48c:	785a      	ldrb	r2, [r3, #1]
 800c48e:	4b89      	ldr	r3, [pc, #548]	@ (800c6b4 <tx_control+0x14a4>)
 800c490:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[2]; // ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800c492:	4b6f      	ldr	r3, [pc, #444]	@ (800c650 <tx_control+0x1440>)
 800c494:	789a      	ldrb	r2, [r3, #2]
 800c496:	4b88      	ldr	r3, [pc, #544]	@ (800c6b8 <tx_control+0x14a8>)
 800c498:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[3];// ld		tempo2,a
 800c49a:	4b6d      	ldr	r3, [pc, #436]	@ (800c650 <tx_control+0x1440>)
 800c49c:	78da      	ldrb	r2, [r3, #3]
 800c49e:	4b87      	ldr	r3, [pc, #540]	@ (800c6bc <tx_control+0x14ac>)
 800c4a0:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[4];// ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800c4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800c650 <tx_control+0x1440>)
 800c4a4:	791a      	ldrb	r2, [r3, #4]
 800c4a6:	4b86      	ldr	r3, [pc, #536]	@ (800c6c0 <tx_control+0x14b0>)
 800c4a8:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1))!=((uint16_t)(chksum_32_HW_LW & 0x0000FFFF))){// jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800c4aa:	4b84      	ldr	r3, [pc, #528]	@ (800c6bc <tx_control+0x14ac>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	021b      	lsls	r3, r3, #8
 800c4b0:	b21a      	sxth	r2, r3
 800c4b2:	4b83      	ldr	r3, [pc, #524]	@ (800c6c0 <tx_control+0x14b0>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	b21a      	sxth	r2, r3
 800c4bc:	4b67      	ldr	r3, [pc, #412]	@ (800c65c <tx_control+0x144c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	b21b      	sxth	r3, r3
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d141      	bne.n	800c54a <tx_control+0x133a>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksum_32_HW_LW & 0xFFFF0000)>>16))){ //jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800c4c6:	4b7b      	ldr	r3, [pc, #492]	@ (800c6b4 <tx_control+0x14a4>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	021b      	lsls	r3, r3, #8
 800c4cc:	b21a      	sxth	r2, r3
 800c4ce:	4b7a      	ldr	r3, [pc, #488]	@ (800c6b8 <tx_control+0x14a8>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	b21b      	sxth	r3, r3
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	b21a      	sxth	r2, r3
 800c4d8:	4b60      	ldr	r3, [pc, #384]	@ (800c65c <tx_control+0x144c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	0c1b      	lsrs	r3, r3, #16
 800c4de:	b21b      	sxth	r3, r3
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d134      	bne.n	800c54e <tx_control+0x133e>
no_inc_chksumFirm_HW:
 800c4e4:	46c0      	nop			@ (mov r8, r8)
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800c4e6:	4b6f      	ldr	r3, [pc, #444]	@ (800c6a4 <tx_control+0x1494>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	4b5c      	ldr	r3, [pc, #368]	@ (800c65c <tx_control+0x144c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	18d2      	adds	r2, r2, r3
 800c4f0:	4b6c      	ldr	r3, [pc, #432]	@ (800c6a4 <tx_control+0x1494>)
 800c4f2:	601a      	str	r2, [r3, #0]
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800c4f4:	4b5a      	ldr	r3, [pc, #360]	@ (800c660 <tx_control+0x1450>)
 800c4f6:	22aa      	movs	r2, #170	@ 0xaa
 800c4f8:	701a      	strb	r2, [r3, #0]
			dataPointer = &RxBuffer_Ble[0];// LDW		dataPointer,X
 800c4fa:	4b5a      	ldr	r3, [pc, #360]	@ (800c664 <tx_control+0x1454>)
 800c4fc:	4a54      	ldr	r2, [pc, #336]	@ (800c650 <tx_control+0x1440>)
 800c4fe:	601a      	str	r2, [r3, #0]
			dirPointer = (128 * cntBloqFirm + eventLogger);// LDW		dirPointer,X
 800c500:	4b66      	ldr	r3, [pc, #408]	@ (800c69c <tx_control+0x148c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	01db      	lsls	r3, r3, #7
 800c506:	001a      	movs	r2, r3
 800c508:	4b6e      	ldr	r3, [pc, #440]	@ (800c6c4 <tx_control+0x14b4>)
 800c50a:	18d2      	adds	r2, r2, r3
 800c50c:	4b56      	ldr	r3, [pc, #344]	@ (800c668 <tx_control+0x1458>)
 800c50e:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();// call	GRABA_BLOCK;					/ graba bloque de 128bytes en FLASH
 800c510:	f7f8 fcdc 	bl	8004ecc <GRABA_BLOCK>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800c514:	4b61      	ldr	r3, [pc, #388]	@ (800c69c <tx_control+0x148c>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	3301      	adds	r3, #1
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	4b5f      	ldr	r3, [pc, #380]	@ (800c69c <tx_control+0x148c>)
 800c51e:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800c520:	4b5e      	ldr	r3, [pc, #376]	@ (800c69c <tx_control+0x148c>)
 800c522:	781a      	ldrb	r2, [r3, #0]
 800c524:	4b5c      	ldr	r3, [pc, #368]	@ (800c698 <tx_control+0x1488>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d103      	bne.n	800c534 <tx_control+0x1324>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800c52c:	4b59      	ldr	r3, [pc, #356]	@ (800c694 <tx_control+0x1484>)
 800c52e:	2201      	movs	r2, #1
 800c530:	70da      	strb	r2, [r3, #3]
 800c532:	e000      	b.n	800c536 <tx_control+0x1326>
				goto rxFirm_noComplete ;
 800c534:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800c536:	4b5a      	ldr	r3, [pc, #360]	@ (800c6a0 <tx_control+0x1490>)
 800c538:	22f1      	movs	r2, #241	@ 0xf1
 800c53a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c53c:	4b58      	ldr	r3, [pc, #352]	@ (800c6a0 <tx_control+0x1490>)
 800c53e:	223d      	movs	r2, #61	@ 0x3d
 800c540:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800c542:	4b5a      	ldr	r3, [pc, #360]	@ (800c6ac <tx_control+0x149c>)
 800c544:	2205      	movs	r2, #5
 800c546:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800c548:	e019      	b.n	800c57e <tx_control+0x136e>
				goto no_writeBloqFirm;
 800c54a:	46c0      	nop			@ (mov r8, r8)
 800c54c:	e000      	b.n	800c550 <tx_control+0x1340>
				goto no_writeBloqFirm;
 800c54e:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800c550:	4b53      	ldr	r3, [pc, #332]	@ (800c6a0 <tx_control+0x1490>)
 800c552:	22f1      	movs	r2, #241	@ 0xf1
 800c554:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800c556:	4b52      	ldr	r3, [pc, #328]	@ (800c6a0 <tx_control+0x1490>)
 800c558:	223e      	movs	r2, #62	@ 0x3e
 800c55a:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800c55c:	2300      	movs	r3, #0
 800c55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c560:	e007      	b.n	800c572 <tx_control+0x1362>
				flagsRxFirm[i]=0;
 800c562:	4a4c      	ldr	r2, [pc, #304]	@ (800c694 <tx_control+0x1484>)
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	18d3      	adds	r3, r2, r3
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	3301      	adds	r3, #1
 800c570:	627b      	str	r3, [r7, #36]	@ 0x24
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	2b07      	cmp	r3, #7
 800c576:	ddf4      	ble.n	800c562 <tx_control+0x1352>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800c578:	4b45      	ldr	r3, [pc, #276]	@ (800c690 <tx_control+0x1480>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800c57e:	4b3e      	ldr	r3, [pc, #248]	@ (800c678 <tx_control+0x1468>)
 800c580:	4a47      	ldr	r2, [pc, #284]	@ (800c6a0 <tx_control+0x1490>)
 800c582:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c584:	4b3d      	ldr	r3, [pc, #244]	@ (800c67c <tx_control+0x146c>)
 800c586:	4a46      	ldr	r2, [pc, #280]	@ (800c6a0 <tx_control+0x1490>)
 800c588:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800c58a:	4b3d      	ldr	r3, [pc, #244]	@ (800c680 <tx_control+0x1470>)
 800c58c:	4a46      	ldr	r2, [pc, #280]	@ (800c6a8 <tx_control+0x1498>)
 800c58e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800c590:	4b3d      	ldr	r3, [pc, #244]	@ (800c688 <tx_control+0x1478>)
 800c592:	2202      	movs	r2, #2
 800c594:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800c596:	4b37      	ldr	r3, [pc, #220]	@ (800c674 <tx_control+0x1464>)
 800c598:	2201      	movs	r2, #1
 800c59a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c59c:	4b3b      	ldr	r3, [pc, #236]	@ (800c68c <tx_control+0x147c>)
 800c59e:	2255      	movs	r2, #85	@ 0x55
 800c5a0:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800c5a2:	4b3b      	ldr	r3, [pc, #236]	@ (800c690 <tx_control+0x1480>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;				// jp		end_tx_control
 800c5a8:	f000 fd2f 	bl	800d00a <tx_control+0x1dfa>
			goto rxChkFirm;				// jp		rxChkFirm;
 800c5ac:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800c5ae:	4b39      	ldr	r3, [pc, #228]	@ (800c694 <tx_control+0x1484>)
 800c5b0:	791b      	ldrb	r3, [r3, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d000      	beq.n	800c5b8 <tx_control+0x13a8>
 800c5b6:	e0af      	b.n	800c718 <tx_control+0x1508>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800c5b8:	4b35      	ldr	r3, [pc, #212]	@ (800c690 <tx_control+0x1480>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b4a      	cmp	r3, #74	@ 0x4a
 800c5be:	d000      	beq.n	800c5c2 <tx_control+0x13b2>
 800c5c0:	e0ad      	b.n	800c71e <tx_control+0x150e>
			resulh = RxBuffer_Ble[2];	// ld		resulh,a
 800c5c2:	4b23      	ldr	r3, [pc, #140]	@ (800c650 <tx_control+0x1440>)
 800c5c4:	789a      	ldrb	r2, [r3, #2]
 800c5c6:	4b3b      	ldr	r3, [pc, #236]	@ (800c6b4 <tx_control+0x14a4>)
 800c5c8:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[3];	// ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800c5ca:	4b21      	ldr	r3, [pc, #132]	@ (800c650 <tx_control+0x1440>)
 800c5cc:	78da      	ldrb	r2, [r3, #3]
 800c5ce:	4b3a      	ldr	r3, [pc, #232]	@ (800c6b8 <tx_control+0x14a8>)
 800c5d0:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[4];// ld		tempo2,a
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c650 <tx_control+0x1440>)
 800c5d4:	791a      	ldrb	r2, [r3, #4]
 800c5d6:	4b39      	ldr	r3, [pc, #228]	@ (800c6bc <tx_control+0x14ac>)
 800c5d8:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[5]; // ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800c5da:	4b1d      	ldr	r3, [pc, #116]	@ (800c650 <tx_control+0x1440>)
 800c5dc:	795a      	ldrb	r2, [r3, #5]
 800c5de:	4b38      	ldr	r3, [pc, #224]	@ (800c6c0 <tx_control+0x14b0>)
 800c5e0:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1)) != ((uint16_t)(chksumFirm_HW_LW & 0x0000FFFF))){		// jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800c5e2:	4b36      	ldr	r3, [pc, #216]	@ (800c6bc <tx_control+0x14ac>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	b21a      	sxth	r2, r3
 800c5ea:	4b35      	ldr	r3, [pc, #212]	@ (800c6c0 <tx_control+0x14b0>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	b21b      	sxth	r3, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b21a      	sxth	r2, r3
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c6a4 <tx_control+0x1494>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	b21b      	sxth	r3, r3
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d11b      	bne.n	800c636 <tx_control+0x1426>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksumFirm_HW_LW & 0xFFFF0000)>>16))){//		jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800c5fe:	4b2d      	ldr	r3, [pc, #180]	@ (800c6b4 <tx_control+0x14a4>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	b21a      	sxth	r2, r3
 800c606:	4b2c      	ldr	r3, [pc, #176]	@ (800c6b8 <tx_control+0x14a8>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	b21b      	sxth	r3, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	b21a      	sxth	r2, r3
 800c610:	4b24      	ldr	r3, [pc, #144]	@ (800c6a4 <tx_control+0x1494>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	0c1b      	lsrs	r3, r3, #16
 800c616:	b21b      	sxth	r3, r3
 800c618:	429a      	cmp	r2, r3
 800c61a:	d10e      	bne.n	800c63a <tx_control+0x142a>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800c61c:	4b20      	ldr	r3, [pc, #128]	@ (800c6a0 <tx_control+0x1490>)
 800c61e:	22f1      	movs	r2, #241	@ 0xf1
 800c620:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c622:	4b1f      	ldr	r3, [pc, #124]	@ (800c6a0 <tx_control+0x1490>)
 800c624:	223d      	movs	r2, #61	@ 0x3d
 800c626:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800c628:	4b1a      	ldr	r3, [pc, #104]	@ (800c694 <tx_control+0x1484>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800c62e:	4b1f      	ldr	r3, [pc, #124]	@ (800c6ac <tx_control+0x149c>)
 800c630:	2205      	movs	r2, #5
 800c632:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800c634:	e056      	b.n	800c6e4 <tx_control+0x14d4>
				goto rxFirmErr;
 800c636:	46c0      	nop			@ (mov r8, r8)
 800c638:	e000      	b.n	800c63c <tx_control+0x142c>
				goto rxFirmErr;
 800c63a:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800c63c:	4b18      	ldr	r3, [pc, #96]	@ (800c6a0 <tx_control+0x1490>)
 800c63e:	22f1      	movs	r2, #241	@ 0xf1
 800c640:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800c642:	4b17      	ldr	r3, [pc, #92]	@ (800c6a0 <tx_control+0x1490>)
 800c644:	223e      	movs	r2, #62	@ 0x3e
 800c646:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800c648:	2300      	movs	r3, #0
 800c64a:	623b      	str	r3, [r7, #32]
 800c64c:	e044      	b.n	800c6d8 <tx_control+0x14c8>
 800c64e:	46c0      	nop			@ (mov r8, r8)
 800c650:	200009d4 	.word	0x200009d4
 800c654:	20000380 	.word	0x20000380
 800c658:	0803f000 	.word	0x0803f000
 800c65c:	20000e54 	.word	0x20000e54
 800c660:	20000dac 	.word	0x20000dac
 800c664:	20000db4 	.word	0x20000db4
 800c668:	20000db0 	.word	0x20000db0
 800c66c:	20000304 	.word	0x20000304
 800c670:	20000e00 	.word	0x20000e00
 800c674:	20000e3c 	.word	0x20000e3c
 800c678:	20000e34 	.word	0x20000e34
 800c67c:	20000e2c 	.word	0x20000e2c
 800c680:	20000e30 	.word	0x20000e30
 800c684:	20000e01 	.word	0x20000e01
 800c688:	20000e50 	.word	0x20000e50
 800c68c:	20000e39 	.word	0x20000e39
 800c690:	20000e44 	.word	0x20000e44
 800c694:	20000efc 	.word	0x20000efc
 800c698:	20000ef0 	.word	0x20000ef0
 800c69c:	20000ef1 	.word	0x20000ef1
 800c6a0:	20000dd4 	.word	0x20000dd4
 800c6a4:	20000ef4 	.word	0x20000ef4
 800c6a8:	20000dd5 	.word	0x20000dd5
 800c6ac:	20000f06 	.word	0x20000f06
 800c6b0:	20000b77 	.word	0x20000b77
 800c6b4:	20000b69 	.word	0x20000b69
 800c6b8:	20000b6a 	.word	0x20000b6a
 800c6bc:	20000b70 	.word	0x20000b70
 800c6c0:	20000b71 	.word	0x20000b71
 800c6c4:	08037000 	.word	0x08037000
				flagsRxFirm[i]=0;
 800c6c8:	4adf      	ldr	r2, [pc, #892]	@ (800ca48 <tx_control+0x1838>)
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	18d3      	adds	r3, r2, r3
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	623b      	str	r3, [r7, #32]
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	2b07      	cmp	r3, #7
 800c6dc:	ddf4      	ble.n	800c6c8 <tx_control+0x14b8>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800c6de:	4bdb      	ldr	r3, [pc, #876]	@ (800ca4c <tx_control+0x183c>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800c6e4:	4bda      	ldr	r3, [pc, #872]	@ (800ca50 <tx_control+0x1840>)
 800c6e6:	4adb      	ldr	r2, [pc, #876]	@ (800ca54 <tx_control+0x1844>)
 800c6e8:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c6ea:	4bdb      	ldr	r3, [pc, #876]	@ (800ca58 <tx_control+0x1848>)
 800c6ec:	4ad9      	ldr	r2, [pc, #868]	@ (800ca54 <tx_control+0x1844>)
 800c6ee:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800c6f0:	4bda      	ldr	r3, [pc, #872]	@ (800ca5c <tx_control+0x184c>)
 800c6f2:	4adb      	ldr	r2, [pc, #876]	@ (800ca60 <tx_control+0x1850>)
 800c6f4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800c6f6:	4bdb      	ldr	r3, [pc, #876]	@ (800ca64 <tx_control+0x1854>)
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800c6fc:	4bda      	ldr	r3, [pc, #872]	@ (800ca68 <tx_control+0x1858>)
 800c6fe:	2201      	movs	r2, #1
 800c700:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800c702:	4bda      	ldr	r3, [pc, #872]	@ (800ca6c <tx_control+0x185c>)
 800c704:	2255      	movs	r2, #85	@ 0x55
 800c706:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800c708:	4bd0      	ldr	r3, [pc, #832]	@ (800ca4c <tx_control+0x183c>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800c70e:	f000 fc7c 	bl	800d00a <tx_control+0x1dfa>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800c712:	46c0      	nop			@ (mov r8, r8)
 800c714:	f000 fc79 	bl	800d00a <tx_control+0x1dfa>
				goto end_rx_firmware;
 800c718:	46c0      	nop			@ (mov r8, r8)
 800c71a:	f000 fc76 	bl	800d00a <tx_control+0x1dfa>
					goto end_rx_firmware;
 800c71e:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800c720:	f000 fc73 	bl	800d00a <tx_control+0x1dfa>
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800c724:	4bd2      	ldr	r3, [pc, #840]	@ (800ca70 <tx_control+0x1860>)
 800c726:	22aa      	movs	r2, #170	@ 0xaa
 800c728:	701a      	strb	r2, [r3, #0]
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800c72a:	4bd2      	ldr	r3, [pc, #840]	@ (800ca74 <tx_control+0x1864>)
 800c72c:	4ad2      	ldr	r2, [pc, #840]	@ (800ca78 <tx_control+0x1868>)
 800c72e:	601a      	str	r2, [r3, #0]
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800c730:	4bd2      	ldr	r3, [pc, #840]	@ (800ca7c <tx_control+0x186c>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	01db      	lsls	r3, r3, #7
 800c736:	001a      	movs	r2, r3
 800c738:	4bd1      	ldr	r3, [pc, #836]	@ (800ca80 <tx_control+0x1870>)
 800c73a:	18d2      	adds	r2, r2, r3
 800c73c:	4bd1      	ldr	r3, [pc, #836]	@ (800ca84 <tx_control+0x1874>)
 800c73e:	601a      	str	r2, [r3, #0]
			cntBloqFirm++; // inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800c740:	4bce      	ldr	r3, [pc, #824]	@ (800ca7c <tx_control+0x186c>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	3301      	adds	r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	4bcc      	ldr	r3, [pc, #816]	@ (800ca7c <tx_control+0x186c>)
 800c74a:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm!= 0){ // jrne	tx_clean_logger_loop
 800c74c:	4bcb      	ldr	r3, [pc, #812]	@ (800ca7c <tx_control+0x186c>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d000      	beq.n	800c756 <tx_control+0x1546>
				goto tx_clean_logger_loop;
 800c754:	e7e6      	b.n	800c724 <tx_control+0x1514>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800c756:	4bbf      	ldr	r3, [pc, #764]	@ (800ca54 <tx_control+0x1844>)
 800c758:	22f1      	movs	r2, #241	@ 0xf1
 800c75a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c75c:	4bbd      	ldr	r3, [pc, #756]	@ (800ca54 <tx_control+0x1844>)
 800c75e:	223d      	movs	r2, #61	@ 0x3d
 800c760:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800c762:	4bc9      	ldr	r3, [pc, #804]	@ (800ca88 <tx_control+0x1878>)
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800c768:	4bc8      	ldr	r3, [pc, #800]	@ (800ca8c <tx_control+0x187c>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800c76e:	4bc8      	ldr	r3, [pc, #800]	@ (800ca90 <tx_control+0x1880>)
 800c770:	2200      	movs	r2, #0
 800c772:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800c774:	4bc7      	ldr	r3, [pc, #796]	@ (800ca94 <tx_control+0x1884>)
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800c77a:	4bc7      	ldr	r3, [pc, #796]	@ (800ca98 <tx_control+0x1888>)
 800c77c:	4abe      	ldr	r2, [pc, #760]	@ (800ca78 <tx_control+0x1868>)
 800c77e:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800c780:	4bc6      	ldr	r3, [pc, #792]	@ (800ca9c <tx_control+0x188c>)
 800c782:	4ac7      	ldr	r2, [pc, #796]	@ (800caa0 <tx_control+0x1890>)
 800c784:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800c786:	4bc1      	ldr	r3, [pc, #772]	@ (800ca8c <tx_control+0x187c>)
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	4bc6      	ldr	r3, [pc, #792]	@ (800caa4 <tx_control+0x1894>)
 800c78c:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800c78e:	f7f8 fa45 	bl	8004c1c <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800c792:	4bc1      	ldr	r3, [pc, #772]	@ (800ca98 <tx_control+0x1888>)
 800c794:	4ac4      	ldr	r2, [pc, #784]	@ (800caa8 <tx_control+0x1898>)
 800c796:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800c798:	4bc0      	ldr	r3, [pc, #768]	@ (800ca9c <tx_control+0x188c>)
 800c79a:	4ab9      	ldr	r2, [pc, #740]	@ (800ca80 <tx_control+0x1870>)
 800c79c:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800c79e:	4bbd      	ldr	r3, [pc, #756]	@ (800ca94 <tx_control+0x1884>)
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	4bc0      	ldr	r3, [pc, #768]	@ (800caa4 <tx_control+0x1894>)
 800c7a4:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800c7a6:	f7f8 fa39 	bl	8004c1c <load_next_buffer>
			for(int i = 0; i<8; i++)
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e007      	b.n	800c7c0 <tx_control+0x15b0>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800c7b0:	4abe      	ldr	r2, [pc, #760]	@ (800caac <tx_control+0x189c>)
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	18d3      	adds	r3, r2, r3
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	2b07      	cmp	r3, #7
 800c7c4:	ddf4      	ble.n	800c7b0 <tx_control+0x15a0>
			goto ok_clean_logger; //jp		ok_clean_logger
 800c7c6:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800c7c8:	4ba1      	ldr	r3, [pc, #644]	@ (800ca50 <tx_control+0x1840>)
 800c7ca:	4aa2      	ldr	r2, [pc, #648]	@ (800ca54 <tx_control+0x1844>)
 800c7cc:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800c7ce:	4ba2      	ldr	r3, [pc, #648]	@ (800ca58 <tx_control+0x1848>)
 800c7d0:	4aa0      	ldr	r2, [pc, #640]	@ (800ca54 <tx_control+0x1844>)
 800c7d2:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800c7d4:	4ba1      	ldr	r3, [pc, #644]	@ (800ca5c <tx_control+0x184c>)
 800c7d6:	4aa2      	ldr	r2, [pc, #648]	@ (800ca60 <tx_control+0x1850>)
 800c7d8:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800c7da:	4ba2      	ldr	r3, [pc, #648]	@ (800ca64 <tx_control+0x1854>)
 800c7dc:	2202      	movs	r2, #2
 800c7de:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800c7e0:	4ba1      	ldr	r3, [pc, #644]	@ (800ca68 <tx_control+0x1858>)
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c7e6:	4ba1      	ldr	r3, [pc, #644]	@ (800ca6c <tx_control+0x185c>)
 800c7e8:	2255      	movs	r2, #85	@ 0x55
 800c7ea:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800c7ec:	4b97      	ldr	r3, [pc, #604]	@ (800ca4c <tx_control+0x183c>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800c7f2:	f000 fc0a 	bl	800d00a <tx_control+0x1dfa>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800c7f6:	4bae      	ldr	r3, [pc, #696]	@ (800cab0 <tx_control+0x18a0>)
 800c7f8:	789a      	ldrb	r2, [r3, #2]
 800c7fa:	4bae      	ldr	r3, [pc, #696]	@ (800cab4 <tx_control+0x18a4>)
 800c7fc:	701a      	strb	r2, [r3, #0]
			waux = eeEstado1; // mov		waux,eeEstado1;				/ carga estados actuales
 800c7fe:	4bae      	ldr	r3, [pc, #696]	@ (800cab8 <tx_control+0x18a8>)
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	4bae      	ldr	r3, [pc, #696]	@ (800cabc <tx_control+0x18ac>)
 800c804:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800c806:	4bab      	ldr	r3, [pc, #684]	@ (800cab4 <tx_control+0x18a4>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	001a      	movs	r2, r3
 800c80c:	2301      	movs	r3, #1
 800c80e:	4013      	ands	r3, r2
 800c810:	d00d      	beq.n	800c82e <tx_control+0x161e>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800c812:	4baa      	ldr	r3, [pc, #680]	@ (800cabc <tx_control+0x18ac>)
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2201      	movs	r2, #1
 800c818:	4053      	eors	r3, r2
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	4ba7      	ldr	r3, [pc, #668]	@ (800cabc <tx_control+0x18ac>)
 800c81e:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800c820:	4ba7      	ldr	r3, [pc, #668]	@ (800cac0 <tx_control+0x18b0>)
 800c822:	22fa      	movs	r2, #250	@ 0xfa
 800c824:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800c826:	4ba7      	ldr	r3, [pc, #668]	@ (800cac4 <tx_control+0x18b4>)
 800c828:	2201      	movs	r2, #1
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	e000      	b.n	800c830 <tx_control+0x1620>
				goto chk_est1_b1;
 800c82e:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800c830:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800c832:	4ba0      	ldr	r3, [pc, #640]	@ (800cab4 <tx_control+0x18a4>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	001a      	movs	r2, r3
 800c838:	2304      	movs	r3, #4
 800c83a:	4013      	ands	r3, r2
 800c83c:	d027      	beq.n	800c88e <tx_control+0x167e>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800c83e:	4ba2      	ldr	r3, [pc, #648]	@ (800cac8 <tx_control+0x18b8>)
 800c840:	799b      	ldrb	r3, [r3, #6]
 800c842:	2201      	movs	r2, #1
 800c844:	4053      	eors	r3, r2
 800c846:	b2db      	uxtb	r3, r3
 800c848:	1e5a      	subs	r2, r3, #1
 800c84a:	4193      	sbcs	r3, r2
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	4b9e      	ldr	r3, [pc, #632]	@ (800cac8 <tx_control+0x18b8>)
 800c850:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800c852:	4b9a      	ldr	r3, [pc, #616]	@ (800cabc <tx_control+0x18ac>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	2204      	movs	r2, #4
 800c858:	4393      	bics	r3, r2
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	4b97      	ldr	r3, [pc, #604]	@ (800cabc <tx_control+0x18ac>)
 800c85e:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800c860:	4b99      	ldr	r3, [pc, #612]	@ (800cac8 <tx_control+0x18b8>)
 800c862:	799b      	ldrb	r3, [r3, #6]
 800c864:	2201      	movs	r2, #1
 800c866:	4053      	eors	r3, r2
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d107      	bne.n	800c87e <tx_control+0x166e>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800c86e:	4b93      	ldr	r3, [pc, #588]	@ (800cabc <tx_control+0x18ac>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2204      	movs	r2, #4
 800c874:	4313      	orrs	r3, r2
 800c876:	b2da      	uxtb	r2, r3
 800c878:	4b90      	ldr	r3, [pc, #576]	@ (800cabc <tx_control+0x18ac>)
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	e000      	b.n	800c880 <tx_control+0x1670>
				goto chk_est1_b2_01;
 800c87e:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800c880:	4b8f      	ldr	r3, [pc, #572]	@ (800cac0 <tx_control+0x18b0>)
 800c882:	22fa      	movs	r2, #250	@ 0xfa
 800c884:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800c886:	4b8f      	ldr	r3, [pc, #572]	@ (800cac4 <tx_control+0x18b4>)
 800c888:	2202      	movs	r2, #2
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	e000      	b.n	800c890 <tx_control+0x1680>
				goto chk_est1_b3;
 800c88e:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800c890:	4b88      	ldr	r3, [pc, #544]	@ (800cab4 <tx_control+0x18a4>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	001a      	movs	r2, r3
 800c896:	2308      	movs	r3, #8
 800c898:	4013      	ands	r3, r2
 800c89a:	d019      	beq.n	800c8d0 <tx_control+0x16c0>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800c89c:	4b8a      	ldr	r3, [pc, #552]	@ (800cac8 <tx_control+0x18b8>)
 800c89e:	789b      	ldrb	r3, [r3, #2]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d106      	bne.n	800c8b2 <tx_control+0x16a2>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800c8a4:	4b89      	ldr	r3, [pc, #548]	@ (800cacc <tx_control+0x18bc>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800c8aa:	4b89      	ldr	r3, [pc, #548]	@ (800cad0 <tx_control+0x18c0>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800c8b0:	e00f      	b.n	800c8d2 <tx_control+0x16c2>
				goto chk_est1_b3_01;
 800c8b2:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800c8b4:	4b87      	ldr	r3, [pc, #540]	@ (800cad4 <tx_control+0x18c4>)
 800c8b6:	22f0      	movs	r2, #240	@ 0xf0
 800c8b8:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800c8ba:	4b83      	ldr	r3, [pc, #524]	@ (800cac8 <tx_control+0x18b8>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800c8c0:	4b81      	ldr	r3, [pc, #516]	@ (800cac8 <tx_control+0x18b8>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800c8c6:	f7f8 f94d 	bl	8004b64 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800c8ca:	f7f8 f96d 	bl	8004ba8 <load_tiempoAhorro2>
 800c8ce:	e000      	b.n	800c8d2 <tx_control+0x16c2>
				goto chk_est1_b4;
 800c8d0:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800c8d2:	4b78      	ldr	r3, [pc, #480]	@ (800cab4 <tx_control+0x18a4>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	001a      	movs	r2, r3
 800c8d8:	2310      	movs	r3, #16
 800c8da:	4013      	ands	r3, r2
 800c8dc:	d003      	beq.n	800c8e6 <tx_control+0x16d6>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800c8de:	4b7e      	ldr	r3, [pc, #504]	@ (800cad8 <tx_control+0x18c8>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	711a      	strb	r2, [r3, #4]
 800c8e4:	e000      	b.n	800c8e8 <tx_control+0x16d8>
				goto chk_est1_b5;
 800c8e6:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800c8e8:	4b72      	ldr	r3, [pc, #456]	@ (800cab4 <tx_control+0x18a4>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	001a      	movs	r2, r3
 800c8ee:	2320      	movs	r3, #32
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	d002      	beq.n	800c8fa <tx_control+0x16ea>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800c8f4:	f7f8 fa88 	bl	8004e08 <ld_alarmDelay>
 800c8f8:	e000      	b.n	800c8fc <tx_control+0x16ec>
				goto chk_est1_b6;
 800c8fa:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800c8fc:	4b6d      	ldr	r3, [pc, #436]	@ (800cab4 <tx_control+0x18a4>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	001a      	movs	r2, r3
 800c902:	2340      	movs	r3, #64	@ 0x40
 800c904:	4013      	ands	r3, r2
 800c906:	d00d      	beq.n	800c924 <tx_control+0x1714>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800c908:	4b6c      	ldr	r3, [pc, #432]	@ (800cabc <tx_control+0x18ac>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2240      	movs	r2, #64	@ 0x40
 800c90e:	4053      	eors	r3, r2
 800c910:	b2da      	uxtb	r2, r3
 800c912:	4b6a      	ldr	r3, [pc, #424]	@ (800cabc <tx_control+0x18ac>)
 800c914:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800c916:	4b6a      	ldr	r3, [pc, #424]	@ (800cac0 <tx_control+0x18b0>)
 800c918:	22fa      	movs	r2, #250	@ 0xfa
 800c91a:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800c91c:	4b69      	ldr	r3, [pc, #420]	@ (800cac4 <tx_control+0x18b4>)
 800c91e:	2203      	movs	r2, #3
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	e000      	b.n	800c926 <tx_control+0x1716>
				goto chk_est1_b7;
 800c924:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800c926:	4b65      	ldr	r3, [pc, #404]	@ (800cabc <tx_control+0x18ac>)
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	001a      	movs	r2, r3
 800c92c:	4b62      	ldr	r3, [pc, #392]	@ (800cab8 <tx_control+0x18a8>)
 800c92e:	0019      	movs	r1, r3
 800c930:	0010      	movs	r0, r2
 800c932:	f7f8 fbe9 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c936:	4b69      	ldr	r3, [pc, #420]	@ (800cadc <tx_control+0x18cc>)
 800c938:	0018      	movs	r0, r3
 800c93a:	f006 fd89 	bl	8013450 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800c93e:	4b45      	ldr	r3, [pc, #276]	@ (800ca54 <tx_control+0x1844>)
 800c940:	22f1      	movs	r2, #241	@ 0xf1
 800c942:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c944:	4b43      	ldr	r3, [pc, #268]	@ (800ca54 <tx_control+0x1844>)
 800c946:	223d      	movs	r2, #61	@ 0x3d
 800c948:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800c94a:	e005      	b.n	800c958 <tx_control+0x1748>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800c94c:	4b41      	ldr	r3, [pc, #260]	@ (800ca54 <tx_control+0x1844>)
 800c94e:	22f1      	movs	r2, #241	@ 0xf1
 800c950:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c952:	4b40      	ldr	r3, [pc, #256]	@ (800ca54 <tx_control+0x1844>)
 800c954:	223d      	movs	r2, #61	@ 0x3d
 800c956:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800c958:	4b3d      	ldr	r3, [pc, #244]	@ (800ca50 <tx_control+0x1840>)
 800c95a:	4a3e      	ldr	r2, [pc, #248]	@ (800ca54 <tx_control+0x1844>)
 800c95c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c95e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca58 <tx_control+0x1848>)
 800c960:	4a3c      	ldr	r2, [pc, #240]	@ (800ca54 <tx_control+0x1844>)
 800c962:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800c964:	4b3d      	ldr	r3, [pc, #244]	@ (800ca5c <tx_control+0x184c>)
 800c966:	4a3e      	ldr	r2, [pc, #248]	@ (800ca60 <tx_control+0x1850>)
 800c968:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800c96a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca64 <tx_control+0x1854>)
 800c96c:	2202      	movs	r2, #2
 800c96e:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800c970:	4b3d      	ldr	r3, [pc, #244]	@ (800ca68 <tx_control+0x1858>)
 800c972:	2201      	movs	r2, #1
 800c974:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c976:	4b3d      	ldr	r3, [pc, #244]	@ (800ca6c <tx_control+0x185c>)
 800c978:	2255      	movs	r2, #85	@ 0x55
 800c97a:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800c97c:	4b33      	ldr	r3, [pc, #204]	@ (800ca4c <tx_control+0x183c>)
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800c982:	e342      	b.n	800d00a <tx_control+0x1dfa>
			estado1[k] = ((eeEstado1>>k) & 0x1);
 800c984:	4b4c      	ldr	r3, [pc, #304]	@ (800cab8 <tx_control+0x18a8>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	001a      	movs	r2, r3
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	411a      	asrs	r2, r3
 800c98e:	0013      	movs	r3, r2
 800c990:	2201      	movs	r2, #1
 800c992:	4013      	ands	r3, r2
 800c994:	1e5a      	subs	r2, r3, #1
 800c996:	4193      	sbcs	r3, r2
 800c998:	b2d9      	uxtb	r1, r3
 800c99a:	4a4f      	ldr	r2, [pc, #316]	@ (800cad8 <tx_control+0x18c8>)
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	18d3      	adds	r3, r2, r3
 800c9a0:	1c0a      	adds	r2, r1, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	61bb      	str	r3, [r7, #24]
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b07      	cmp	r3, #7
 800c9ae:	dde9      	ble.n	800c984 <tx_control+0x1774>
estado1_b1:
 800c9b0:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800c9b2:	4b49      	ldr	r3, [pc, #292]	@ (800cad8 <tx_control+0x18c8>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800c9b8:	4b49      	ldr	r3, [pc, #292]	@ (800cae0 <tx_control+0x18d0>)
 800c9ba:	78db      	ldrb	r3, [r3, #3]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4053      	eors	r3, r2
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d103      	bne.n	800c9ce <tx_control+0x17be>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800c9c6:	4b44      	ldr	r3, [pc, #272]	@ (800cad8 <tx_control+0x18c8>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	705a      	strb	r2, [r3, #1]
 800c9cc:	e000      	b.n	800c9d0 <tx_control+0x17c0>
			goto estado1_b2;
 800c9ce:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800c9d0:	4b41      	ldr	r3, [pc, #260]	@ (800cad8 <tx_control+0x18c8>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800c9d6:	4b43      	ldr	r3, [pc, #268]	@ (800cae4 <tx_control+0x18d4>)
 800c9d8:	789b      	ldrb	r3, [r3, #2]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	4053      	eors	r3, r2
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d103      	bne.n	800c9ec <tx_control+0x17dc>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800c9e4:	4b3c      	ldr	r3, [pc, #240]	@ (800cad8 <tx_control+0x18c8>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	709a      	strb	r2, [r3, #2]
 800c9ea:	e000      	b.n	800c9ee <tx_control+0x17de>
			goto estado1_b3;
 800c9ec:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800c9ee:	4b3a      	ldr	r3, [pc, #232]	@ (800cad8 <tx_control+0x18c8>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800c9f4:	4b34      	ldr	r3, [pc, #208]	@ (800cac8 <tx_control+0x18b8>)
 800c9f6:	789b      	ldrb	r3, [r3, #2]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	4053      	eors	r3, r2
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d103      	bne.n	800ca0a <tx_control+0x17fa>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800ca02:	4b35      	ldr	r3, [pc, #212]	@ (800cad8 <tx_control+0x18c8>)
 800ca04:	2201      	movs	r2, #1
 800ca06:	70da      	strb	r2, [r3, #3]
 800ca08:	e000      	b.n	800ca0c <tx_control+0x17fc>
			goto estado1_b4;
 800ca0a:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800ca0c:	4b32      	ldr	r3, [pc, #200]	@ (800cad8 <tx_control+0x18c8>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800ca12:	4b35      	ldr	r3, [pc, #212]	@ (800cae8 <tx_control+0x18d8>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2201      	movs	r2, #1
 800ca18:	4053      	eors	r3, r2
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <tx_control+0x1818>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800ca20:	4b2d      	ldr	r3, [pc, #180]	@ (800cad8 <tx_control+0x18c8>)
 800ca22:	2201      	movs	r2, #1
 800ca24:	715a      	strb	r2, [r3, #5]
 800ca26:	e000      	b.n	800ca2a <tx_control+0x181a>
			goto estado1_b6;
 800ca28:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800ca2a:	4b2b      	ldr	r3, [pc, #172]	@ (800cad8 <tx_control+0x18c8>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800ca30:	4b2c      	ldr	r3, [pc, #176]	@ (800cae4 <tx_control+0x18d4>)
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	2201      	movs	r2, #1
 800ca36:	4053      	eors	r3, r2
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d156      	bne.n	800caec <tx_control+0x18dc>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800ca3e:	4b26      	ldr	r3, [pc, #152]	@ (800cad8 <tx_control+0x18c8>)
 800ca40:	2201      	movs	r2, #1
 800ca42:	719a      	strb	r2, [r3, #6]
 800ca44:	e053      	b.n	800caee <tx_control+0x18de>
 800ca46:	46c0      	nop			@ (mov r8, r8)
 800ca48:	20000efc 	.word	0x20000efc
 800ca4c:	20000e44 	.word	0x20000e44
 800ca50:	20000e34 	.word	0x20000e34
 800ca54:	20000dd4 	.word	0x20000dd4
 800ca58:	20000e2c 	.word	0x20000e2c
 800ca5c:	20000e30 	.word	0x20000e30
 800ca60:	20000dd5 	.word	0x20000dd5
 800ca64:	20000e50 	.word	0x20000e50
 800ca68:	20000e3c 	.word	0x20000e3c
 800ca6c:	20000e39 	.word	0x20000e39
 800ca70:	20000dac 	.word	0x20000dac
 800ca74:	20000db4 	.word	0x20000db4
 800ca78:	20000cac 	.word	0x20000cac
 800ca7c:	20000ef1 	.word	0x20000ef1
 800ca80:	08037000 	.word	0x08037000
 800ca84:	20000db0 	.word	0x20000db0
 800ca88:	20000dcc 	.word	0x20000dcc
 800ca8c:	20000dcd 	.word	0x20000dcd
 800ca90:	20000dce 	.word	0x20000dce
 800ca94:	20000dcf 	.word	0x20000dcf
 800ca98:	20000dc4 	.word	0x20000dc4
 800ca9c:	20000dc0 	.word	0x20000dc0
 800caa0:	0803c000 	.word	0x0803c000
 800caa4:	20000dba 	.word	0x20000dba
 800caa8:	20000d2c 	.word	0x20000d2c
 800caac:	20000ee8 	.word	0x20000ee8
 800cab0:	200009d4 	.word	0x200009d4
 800cab4:	20000b77 	.word	0x20000b77
 800cab8:	20000387 	.word	0x20000387
 800cabc:	20000b76 	.word	0x20000b76
 800cac0:	20001084 	.word	0x20001084
 800cac4:	20001085 	.word	0x20001085
 800cac8:	20000c5c 	.word	0x20000c5c
 800cacc:	20000c50 	.word	0x20000c50
 800cad0:	20000c52 	.word	0x20000c52
 800cad4:	20000be2 	.word	0x20000be2
 800cad8:	20001064 	.word	0x20001064
 800cadc:	2000059c 	.word	0x2000059c
 800cae0:	20000b98 	.word	0x20000b98
 800cae4:	20000bc4 	.word	0x20000bc4
 800cae8:	20000fb8 	.word	0x20000fb8
			goto estado1_b7;
 800caec:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800caee:	4bef      	ldr	r3, [pc, #956]	@ (800ceac <tx_control+0x1c9c>)
 800caf0:	2204      	movs	r2, #4
 800caf2:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800caf4:	4bee      	ldr	r3, [pc, #952]	@ (800ceb0 <tx_control+0x1ca0>)
 800caf6:	227b      	movs	r2, #123	@ 0x7b
 800caf8:	5c9a      	ldrb	r2, [r3, r2]
 800cafa:	4bee      	ldr	r3, [pc, #952]	@ (800ceb4 <tx_control+0x1ca4>)
 800cafc:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800cafe:	4bec      	ldr	r3, [pc, #944]	@ (800ceb0 <tx_control+0x1ca0>)
 800cb00:	227c      	movs	r2, #124	@ 0x7c
 800cb02:	5c9a      	ldrb	r2, [r3, r2]
 800cb04:	4beb      	ldr	r3, [pc, #940]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb06:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800cb08:	4bea      	ldr	r3, [pc, #936]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800cb0e:	4be9      	ldr	r3, [pc, #932]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800cb14:	4be7      	ldr	r3, [pc, #924]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800cb1a:	4be6      	ldr	r3, [pc, #920]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800cb20:	4be4      	ldr	r3, [pc, #912]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb22:	2205      	movs	r2, #5
 800cb24:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800cb26:	4be1      	ldr	r3, [pc, #900]	@ (800ceac <tx_control+0x1c9c>)
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	4be2      	ldr	r3, [pc, #904]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb2c:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800cb2e:	4be2      	ldr	r3, [pc, #904]	@ (800ceb8 <tx_control+0x1ca8>)
 800cb30:	2201      	movs	r2, #1
 800cb32:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800cb34:	4be1      	ldr	r3, [pc, #900]	@ (800cebc <tx_control+0x1cac>)
 800cb36:	2208      	movs	r2, #8
 800cb38:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800cb3a:	4ae1      	ldr	r2, [pc, #900]	@ (800cec0 <tx_control+0x1cb0>)
 800cb3c:	4bdd      	ldr	r3, [pc, #884]	@ (800ceb4 <tx_control+0x1ca4>)
 800cb3e:	0011      	movs	r1, r2
 800cb40:	0018      	movs	r0, r3
 800cb42:	f7f8 f98b 	bl	8004e5c <copyVector>
		bufferTxControl[8] = 0;
 800cb46:	4bde      	ldr	r3, [pc, #888]	@ (800cec0 <tx_control+0x1cb0>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800cb4c:	4bdc      	ldr	r3, [pc, #880]	@ (800cec0 <tx_control+0x1cb0>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800cb52:	4bdb      	ldr	r3, [pc, #876]	@ (800cec0 <tx_control+0x1cb0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800cb58:	4bd9      	ldr	r3, [pc, #868]	@ (800cec0 <tx_control+0x1cb0>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	e03e      	b.n	800cbe2 <tx_control+0x19d2>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800cb64:	4bd6      	ldr	r3, [pc, #856]	@ (800cec0 <tx_control+0x1cb0>)
 800cb66:	7a1a      	ldrb	r2, [r3, #8]
 800cb68:	49d6      	ldr	r1, [pc, #856]	@ (800cec4 <tx_control+0x1cb4>)
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	18cb      	adds	r3, r1, r3
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	0019      	movs	r1, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	4099      	lsls	r1, r3
 800cb76:	000b      	movs	r3, r1
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	4bd0      	ldr	r3, [pc, #832]	@ (800cec0 <tx_control+0x1cb0>)
 800cb80:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800cb82:	4bcf      	ldr	r3, [pc, #828]	@ (800cec0 <tx_control+0x1cb0>)
 800cb84:	7a5a      	ldrb	r2, [r3, #9]
 800cb86:	49d0      	ldr	r1, [pc, #832]	@ (800cec8 <tx_control+0x1cb8>)
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	18cb      	adds	r3, r1, r3
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	0019      	movs	r1, r3
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	4099      	lsls	r1, r3
 800cb94:	000b      	movs	r3, r1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	4bc8      	ldr	r3, [pc, #800]	@ (800cec0 <tx_control+0x1cb0>)
 800cb9e:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800cba0:	4bc7      	ldr	r3, [pc, #796]	@ (800cec0 <tx_control+0x1cb0>)
 800cba2:	7a9a      	ldrb	r2, [r3, #10]
 800cba4:	49c9      	ldr	r1, [pc, #804]	@ (800cecc <tx_control+0x1cbc>)
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	18cb      	adds	r3, r1, r3
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	0019      	movs	r1, r3
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	4099      	lsls	r1, r3
 800cbb2:	000b      	movs	r3, r1
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	4bc1      	ldr	r3, [pc, #772]	@ (800cec0 <tx_control+0x1cb0>)
 800cbbc:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800cbbe:	4bc0      	ldr	r3, [pc, #768]	@ (800cec0 <tx_control+0x1cb0>)
 800cbc0:	7ada      	ldrb	r2, [r3, #11]
 800cbc2:	49c3      	ldr	r1, [pc, #780]	@ (800ced0 <tx_control+0x1cc0>)
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	18cb      	adds	r3, r1, r3
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	0019      	movs	r1, r3
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	4099      	lsls	r1, r3
 800cbd0:	000b      	movs	r3, r1
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	4bb9      	ldr	r3, [pc, #740]	@ (800cec0 <tx_control+0x1cb0>)
 800cbda:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2b07      	cmp	r3, #7
 800cbe6:	ddbd      	ble.n	800cb64 <tx_control+0x1954>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800cbe8:	4bba      	ldr	r3, [pc, #744]	@ (800ced4 <tx_control+0x1cc4>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800cbee:	4bb3      	ldr	r3, [pc, #716]	@ (800cebc <tx_control+0x1cac>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800cbf4:	4bb8      	ldr	r3, [pc, #736]	@ (800ced8 <tx_control+0x1cc8>)
 800cbf6:	220c      	movs	r2, #12
 800cbf8:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800cbfa:	4bb7      	ldr	r3, [pc, #732]	@ (800ced8 <tx_control+0x1cc8>)
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	001a      	movs	r2, r3
 800cc00:	4baf      	ldr	r3, [pc, #700]	@ (800cec0 <tx_control+0x1cb0>)
 800cc02:	0011      	movs	r1, r2
 800cc04:	0018      	movs	r0, r3
 800cc06:	f7f8 f8db 	bl	8004dc0 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800cc0a:	4bb2      	ldr	r3, [pc, #712]	@ (800ced4 <tx_control+0x1cc4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	0e1b      	lsrs	r3, r3, #24
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	4bab      	ldr	r3, [pc, #684]	@ (800cec0 <tx_control+0x1cb0>)
 800cc14:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800cc16:	4baf      	ldr	r3, [pc, #700]	@ (800ced4 <tx_control+0x1cc4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	0c1b      	lsrs	r3, r3, #16
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	4ba8      	ldr	r3, [pc, #672]	@ (800cec0 <tx_control+0x1cb0>)
 800cc20:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800cc22:	4bac      	ldr	r3, [pc, #688]	@ (800ced4 <tx_control+0x1cc4>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	0a1b      	lsrs	r3, r3, #8
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	4ba5      	ldr	r3, [pc, #660]	@ (800cec0 <tx_control+0x1cb0>)
 800cc2c:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800cc2e:	4ba9      	ldr	r3, [pc, #676]	@ (800ced4 <tx_control+0x1cc4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	4ba2      	ldr	r3, [pc, #648]	@ (800cec0 <tx_control+0x1cb0>)
 800cc36:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800cc38:	4ba8      	ldr	r3, [pc, #672]	@ (800cedc <tx_control+0x1ccc>)
 800cc3a:	4aa1      	ldr	r2, [pc, #644]	@ (800cec0 <tx_control+0x1cb0>)
 800cc3c:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800cc3e:	4ba8      	ldr	r3, [pc, #672]	@ (800cee0 <tx_control+0x1cd0>)
 800cc40:	4a9f      	ldr	r2, [pc, #636]	@ (800cec0 <tx_control+0x1cb0>)
 800cc42:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800cc44:	4ba7      	ldr	r3, [pc, #668]	@ (800cee4 <tx_control+0x1cd4>)
 800cc46:	4aa8      	ldr	r2, [pc, #672]	@ (800cee8 <tx_control+0x1cd8>)
 800cc48:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800cc4a:	4b98      	ldr	r3, [pc, #608]	@ (800ceac <tx_control+0x1c9c>)
 800cc4c:	2210      	movs	r2, #16
 800cc4e:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800cc50:	4b99      	ldr	r3, [pc, #612]	@ (800ceb8 <tx_control+0x1ca8>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800cc56:	4b98      	ldr	r3, [pc, #608]	@ (800ceb8 <tx_control+0x1ca8>)
 800cc58:	2201      	movs	r2, #1
 800cc5a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cc5c:	4ba3      	ldr	r3, [pc, #652]	@ (800ceec <tx_control+0x1cdc>)
 800cc5e:	2255      	movs	r2, #85	@ 0x55
 800cc60:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800cc62:	4ba3      	ldr	r3, [pc, #652]	@ (800cef0 <tx_control+0x1ce0>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800cc68:	e1cf      	b.n	800d00a <tx_control+0x1dfa>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800cc6a:	4ba2      	ldr	r3, [pc, #648]	@ (800cef4 <tx_control+0x1ce4>)
 800cc6c:	22f1      	movs	r2, #241	@ 0xf1
 800cc6e:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800cc70:	4ba0      	ldr	r3, [pc, #640]	@ (800cef4 <tx_control+0x1ce4>)
 800cc72:	223d      	movs	r2, #61	@ 0x3d
 800cc74:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800cc76:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800cc78:	4b98      	ldr	r3, [pc, #608]	@ (800cedc <tx_control+0x1ccc>)
 800cc7a:	4a9e      	ldr	r2, [pc, #632]	@ (800cef4 <tx_control+0x1ce4>)
 800cc7c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800cc7e:	4b98      	ldr	r3, [pc, #608]	@ (800cee0 <tx_control+0x1cd0>)
 800cc80:	4a9c      	ldr	r2, [pc, #624]	@ (800cef4 <tx_control+0x1ce4>)
 800cc82:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800cc84:	4b97      	ldr	r3, [pc, #604]	@ (800cee4 <tx_control+0x1cd4>)
 800cc86:	4a9c      	ldr	r2, [pc, #624]	@ (800cef8 <tx_control+0x1ce8>)
 800cc88:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800cc8a:	4b88      	ldr	r3, [pc, #544]	@ (800ceac <tx_control+0x1c9c>)
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800cc90:	4b89      	ldr	r3, [pc, #548]	@ (800ceb8 <tx_control+0x1ca8>)
 800cc92:	2201      	movs	r2, #1
 800cc94:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cc96:	4b95      	ldr	r3, [pc, #596]	@ (800ceec <tx_control+0x1cdc>)
 800cc98:	2255      	movs	r2, #85	@ 0x55
 800cc9a:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800cc9c:	4b94      	ldr	r3, [pc, #592]	@ (800cef0 <tx_control+0x1ce0>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800cca2:	e1b2      	b.n	800d00a <tx_control+0x1dfa>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800cca4:	4b95      	ldr	r3, [pc, #596]	@ (800cefc <tx_control+0x1cec>)
 800cca6:	789b      	ldrb	r3, [r3, #2]
 800cca8:	001a      	movs	r2, r3
 800ccaa:	4b95      	ldr	r3, [pc, #596]	@ (800cf00 <tx_control+0x1cf0>)
 800ccac:	0019      	movs	r1, r3
 800ccae:	0010      	movs	r0, r2
 800ccb0:	f7f8 fa2a 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ccb4:	4b93      	ldr	r3, [pc, #588]	@ (800cf04 <tx_control+0x1cf4>)
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	f006 fbca 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800ccbc:	4b8f      	ldr	r3, [pc, #572]	@ (800cefc <tx_control+0x1cec>)
 800ccbe:	78db      	ldrb	r3, [r3, #3]
 800ccc0:	001a      	movs	r2, r3
 800ccc2:	4b91      	ldr	r3, [pc, #580]	@ (800cf08 <tx_control+0x1cf8>)
 800ccc4:	0019      	movs	r1, r3
 800ccc6:	0010      	movs	r0, r2
 800ccc8:	f7f8 fa1e 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800cccc:	4b8d      	ldr	r3, [pc, #564]	@ (800cf04 <tx_control+0x1cf4>)
 800ccce:	0018      	movs	r0, r3
 800ccd0:	f006 fbbe 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800ccd4:	4b89      	ldr	r3, [pc, #548]	@ (800cefc <tx_control+0x1cec>)
 800ccd6:	791b      	ldrb	r3, [r3, #4]
 800ccd8:	001a      	movs	r2, r3
 800ccda:	4b8c      	ldr	r3, [pc, #560]	@ (800cf0c <tx_control+0x1cfc>)
 800ccdc:	0019      	movs	r1, r3
 800ccde:	0010      	movs	r0, r2
 800cce0:	f7f8 fa12 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800cce4:	4b87      	ldr	r3, [pc, #540]	@ (800cf04 <tx_control+0x1cf4>)
 800cce6:	0018      	movs	r0, r3
 800cce8:	f006 fbb2 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800ccec:	4b83      	ldr	r3, [pc, #524]	@ (800cefc <tx_control+0x1cec>)
 800ccee:	795b      	ldrb	r3, [r3, #5]
 800ccf0:	001a      	movs	r2, r3
 800ccf2:	4b87      	ldr	r3, [pc, #540]	@ (800cf10 <tx_control+0x1d00>)
 800ccf4:	0019      	movs	r1, r3
 800ccf6:	0010      	movs	r0, r2
 800ccf8:	f7f8 fa06 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ccfc:	4b81      	ldr	r3, [pc, #516]	@ (800cf04 <tx_control+0x1cf4>)
 800ccfe:	0018      	movs	r0, r3
 800cd00:	f006 fba6 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800cd04:	4b7d      	ldr	r3, [pc, #500]	@ (800cefc <tx_control+0x1cec>)
 800cd06:	799b      	ldrb	r3, [r3, #6]
 800cd08:	001a      	movs	r2, r3
 800cd0a:	4b82      	ldr	r3, [pc, #520]	@ (800cf14 <tx_control+0x1d04>)
 800cd0c:	0019      	movs	r1, r3
 800cd0e:	0010      	movs	r0, r2
 800cd10:	f7f8 f9fa 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800cd14:	4b7b      	ldr	r3, [pc, #492]	@ (800cf04 <tx_control+0x1cf4>)
 800cd16:	0018      	movs	r0, r3
 800cd18:	f006 fb9a 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800cd1c:	4b77      	ldr	r3, [pc, #476]	@ (800cefc <tx_control+0x1cec>)
 800cd1e:	79db      	ldrb	r3, [r3, #7]
 800cd20:	001a      	movs	r2, r3
 800cd22:	4b7d      	ldr	r3, [pc, #500]	@ (800cf18 <tx_control+0x1d08>)
 800cd24:	0019      	movs	r1, r3
 800cd26:	0010      	movs	r0, r2
 800cd28:	f7f8 f9ee 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800cd2c:	4b75      	ldr	r3, [pc, #468]	@ (800cf04 <tx_control+0x1cf4>)
 800cd2e:	0018      	movs	r0, r3
 800cd30:	f006 fb8e 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800cd34:	4b71      	ldr	r3, [pc, #452]	@ (800cefc <tx_control+0x1cec>)
 800cd36:	7a1b      	ldrb	r3, [r3, #8]
 800cd38:	001a      	movs	r2, r3
 800cd3a:	4b78      	ldr	r3, [pc, #480]	@ (800cf1c <tx_control+0x1d0c>)
 800cd3c:	0019      	movs	r1, r3
 800cd3e:	0010      	movs	r0, r2
 800cd40:	f7f8 f9e2 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800cd44:	4b6f      	ldr	r3, [pc, #444]	@ (800cf04 <tx_control+0x1cf4>)
 800cd46:	0018      	movs	r0, r3
 800cd48:	f006 fb82 	bl	8013450 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800cd4c:	4b6b      	ldr	r3, [pc, #428]	@ (800cefc <tx_control+0x1cec>)
 800cd4e:	7a5b      	ldrb	r3, [r3, #9]
 800cd50:	001a      	movs	r2, r3
 800cd52:	4b73      	ldr	r3, [pc, #460]	@ (800cf20 <tx_control+0x1d10>)
 800cd54:	0019      	movs	r1, r3
 800cd56:	0010      	movs	r0, r2
 800cd58:	f7f8 f9d6 	bl	8005108 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800cd5c:	4b69      	ldr	r3, [pc, #420]	@ (800cf04 <tx_control+0x1cf4>)
 800cd5e:	0018      	movs	r0, r3
 800cd60:	f006 fb76 	bl	8013450 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800cd64:	4b63      	ldr	r3, [pc, #396]	@ (800cef4 <tx_control+0x1ce4>)
 800cd66:	22f1      	movs	r2, #241	@ 0xf1
 800cd68:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800cd6a:	4b62      	ldr	r3, [pc, #392]	@ (800cef4 <tx_control+0x1ce4>)
 800cd6c:	223d      	movs	r2, #61	@ 0x3d
 800cd6e:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800cd70:	e005      	b.n	800cd7e <tx_control+0x1b6e>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800cd72:	4b60      	ldr	r3, [pc, #384]	@ (800cef4 <tx_control+0x1ce4>)
 800cd74:	22f1      	movs	r2, #241	@ 0xf1
 800cd76:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800cd78:	4b5e      	ldr	r3, [pc, #376]	@ (800cef4 <tx_control+0x1ce4>)
 800cd7a:	223e      	movs	r2, #62	@ 0x3e
 800cd7c:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800cd7e:	4b57      	ldr	r3, [pc, #348]	@ (800cedc <tx_control+0x1ccc>)
 800cd80:	4a5c      	ldr	r2, [pc, #368]	@ (800cef4 <tx_control+0x1ce4>)
 800cd82:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800cd84:	4b56      	ldr	r3, [pc, #344]	@ (800cee0 <tx_control+0x1cd0>)
 800cd86:	4a5b      	ldr	r2, [pc, #364]	@ (800cef4 <tx_control+0x1ce4>)
 800cd88:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800cd8a:	4b56      	ldr	r3, [pc, #344]	@ (800cee4 <tx_control+0x1cd4>)
 800cd8c:	4a5a      	ldr	r2, [pc, #360]	@ (800cef8 <tx_control+0x1ce8>)
 800cd8e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800cd90:	4b46      	ldr	r3, [pc, #280]	@ (800ceac <tx_control+0x1c9c>)
 800cd92:	2202      	movs	r2, #2
 800cd94:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800cd96:	4b48      	ldr	r3, [pc, #288]	@ (800ceb8 <tx_control+0x1ca8>)
 800cd98:	2201      	movs	r2, #1
 800cd9a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cd9c:	4b53      	ldr	r3, [pc, #332]	@ (800ceec <tx_control+0x1cdc>)
 800cd9e:	2255      	movs	r2, #85	@ 0x55
 800cda0:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800cda2:	4b53      	ldr	r3, [pc, #332]	@ (800cef0 <tx_control+0x1ce0>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800cda8:	e12f      	b.n	800d00a <tx_control+0x1dfa>
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800cdaa:	4b54      	ldr	r3, [pc, #336]	@ (800cefc <tx_control+0x1cec>)
 800cdac:	789a      	ldrb	r2, [r3, #2]
 800cdae:	4b5d      	ldr	r3, [pc, #372]	@ (800cf24 <tx_control+0x1d14>)
 800cdb0:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800cdb2:	4b52      	ldr	r3, [pc, #328]	@ (800cefc <tx_control+0x1cec>)
 800cdb4:	78da      	ldrb	r2, [r3, #3]
 800cdb6:	4b5c      	ldr	r3, [pc, #368]	@ (800cf28 <tx_control+0x1d18>)
 800cdb8:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800cdba:	4b50      	ldr	r3, [pc, #320]	@ (800cefc <tx_control+0x1cec>)
 800cdbc:	791a      	ldrb	r2, [r3, #4]
 800cdbe:	4b5b      	ldr	r3, [pc, #364]	@ (800cf2c <tx_control+0x1d1c>)
 800cdc0:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800cdc2:	4b4e      	ldr	r3, [pc, #312]	@ (800cefc <tx_control+0x1cec>)
 800cdc4:	795a      	ldrb	r2, [r3, #5]
 800cdc6:	4b5a      	ldr	r3, [pc, #360]	@ (800cf30 <tx_control+0x1d20>)
 800cdc8:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800cdca:	4b4c      	ldr	r3, [pc, #304]	@ (800cefc <tx_control+0x1cec>)
 800cdcc:	799a      	ldrb	r2, [r3, #6]
 800cdce:	4b59      	ldr	r3, [pc, #356]	@ (800cf34 <tx_control+0x1d24>)
 800cdd0:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800cdd2:	4b4a      	ldr	r3, [pc, #296]	@ (800cefc <tx_control+0x1cec>)
 800cdd4:	79da      	ldrb	r2, [r3, #7]
 800cdd6:	4b58      	ldr	r3, [pc, #352]	@ (800cf38 <tx_control+0x1d28>)
 800cdd8:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800cdda:	4b48      	ldr	r3, [pc, #288]	@ (800cefc <tx_control+0x1cec>)
 800cddc:	7a1a      	ldrb	r2, [r3, #8]
 800cdde:	4b3e      	ldr	r3, [pc, #248]	@ (800ced8 <tx_control+0x1cc8>)
 800cde0:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800cde2:	4b3d      	ldr	r3, [pc, #244]	@ (800ced8 <tx_control+0x1cc8>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	015b      	lsls	r3, r3, #5
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	4b3b      	ldr	r3, [pc, #236]	@ (800ced8 <tx_control+0x1cc8>)
 800cdec:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800cdee:	4b3a      	ldr	r3, [pc, #232]	@ (800ced8 <tx_control+0x1cc8>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b25b      	sxtb	r3, r3
 800cdf4:	221f      	movs	r2, #31
 800cdf6:	4393      	bics	r3, r2
 800cdf8:	b25a      	sxtb	r2, r3
 800cdfa:	4b4b      	ldr	r3, [pc, #300]	@ (800cf28 <tx_control+0x1d18>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b25b      	sxtb	r3, r3
 800ce00:	4313      	orrs	r3, r2
 800ce02:	b25b      	sxtb	r3, r3
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	4b48      	ldr	r3, [pc, #288]	@ (800cf28 <tx_control+0x1d18>)
 800ce08:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800ce0a:	4b3c      	ldr	r3, [pc, #240]	@ (800cefc <tx_control+0x1cec>)
 800ce0c:	7a5a      	ldrb	r2, [r3, #9]
 800ce0e:	4b32      	ldr	r3, [pc, #200]	@ (800ced8 <tx_control+0x1cc8>)
 800ce10:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800ce12:	4b47      	ldr	r3, [pc, #284]	@ (800cf30 <tx_control+0x1d20>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2240      	movs	r2, #64	@ 0x40
 800ce18:	4393      	bics	r3, r2
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	4b44      	ldr	r3, [pc, #272]	@ (800cf30 <tx_control+0x1d20>)
 800ce1e:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800ce20:	4b40      	ldr	r3, [pc, #256]	@ (800cf24 <tx_control+0x1d14>)
 800ce22:	781a      	ldrb	r2, [r3, #0]
 800ce24:	4b45      	ldr	r3, [pc, #276]	@ (800cf3c <tx_control+0x1d2c>)
 800ce26:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800ce28:	4b3f      	ldr	r3, [pc, #252]	@ (800cf28 <tx_control+0x1d18>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	221f      	movs	r2, #31
 800ce2e:	4013      	ands	r3, r2
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	4b42      	ldr	r3, [pc, #264]	@ (800cf3c <tx_control+0x1d2c>)
 800ce34:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800ce36:	4b3d      	ldr	r3, [pc, #244]	@ (800cf2c <tx_control+0x1d1c>)
 800ce38:	781a      	ldrb	r2, [r3, #0]
 800ce3a:	4b40      	ldr	r3, [pc, #256]	@ (800cf3c <tx_control+0x1d2c>)
 800ce3c:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800ce3e:	4b3a      	ldr	r3, [pc, #232]	@ (800cf28 <tx_control+0x1d18>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	095b      	lsrs	r3, r3, #5
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	4b3d      	ldr	r3, [pc, #244]	@ (800cf3c <tx_control+0x1d2c>)
 800ce48:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800ce4a:	493c      	ldr	r1, [pc, #240]	@ (800cf3c <tx_control+0x1d2c>)
 800ce4c:	4b3c      	ldr	r3, [pc, #240]	@ (800cf40 <tx_control+0x1d30>)
 800ce4e:	2201      	movs	r2, #1
 800ce50:	0018      	movs	r0, r3
 800ce52:	f008 fbb3 	bl	80155bc <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800ce56:	4b36      	ldr	r3, [pc, #216]	@ (800cf30 <tx_control+0x1d20>)
 800ce58:	781a      	ldrb	r2, [r3, #0]
 800ce5a:	4b3a      	ldr	r3, [pc, #232]	@ (800cf44 <tx_control+0x1d34>)
 800ce5c:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800ce5e:	4b35      	ldr	r3, [pc, #212]	@ (800cf34 <tx_control+0x1d24>)
 800ce60:	781a      	ldrb	r2, [r3, #0]
 800ce62:	4b38      	ldr	r3, [pc, #224]	@ (800cf44 <tx_control+0x1d34>)
 800ce64:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800ce66:	4b34      	ldr	r3, [pc, #208]	@ (800cf38 <tx_control+0x1d28>)
 800ce68:	781a      	ldrb	r2, [r3, #0]
 800ce6a:	4b36      	ldr	r3, [pc, #216]	@ (800cf44 <tx_control+0x1d34>)
 800ce6c:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800ce6e:	4b23      	ldr	r3, [pc, #140]	@ (800cefc <tx_control+0x1cec>)
 800ce70:	7a5a      	ldrb	r2, [r3, #9]
 800ce72:	4b34      	ldr	r3, [pc, #208]	@ (800cf44 <tx_control+0x1d34>)
 800ce74:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ce76:	4b33      	ldr	r3, [pc, #204]	@ (800cf44 <tx_control+0x1d34>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ce7c:	4b31      	ldr	r3, [pc, #196]	@ (800cf44 <tx_control+0x1d34>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800ce82:	4930      	ldr	r1, [pc, #192]	@ (800cf44 <tx_control+0x1d34>)
 800ce84:	4b2e      	ldr	r3, [pc, #184]	@ (800cf40 <tx_control+0x1d30>)
 800ce86:	2201      	movs	r2, #1
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f008 fa73 	bl	8015374 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800ce8e:	4b2a      	ldr	r3, [pc, #168]	@ (800cf38 <tx_control+0x1d28>)
 800ce90:	781a      	ldrb	r2, [r3, #0]
 800ce92:	4b2d      	ldr	r3, [pc, #180]	@ (800cf48 <tx_control+0x1d38>)
 800ce94:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800ce96:	4b2d      	ldr	r3, [pc, #180]	@ (800cf4c <tx_control+0x1d3c>)
 800ce98:	2201      	movs	r2, #1
 800ce9a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800ce9c:	4b15      	ldr	r3, [pc, #84]	@ (800cef4 <tx_control+0x1ce4>)
 800ce9e:	22f1      	movs	r2, #241	@ 0xf1
 800cea0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800cea2:	4b14      	ldr	r3, [pc, #80]	@ (800cef4 <tx_control+0x1ce4>)
 800cea4:	223d      	movs	r2, #61	@ 0x3d
 800cea6:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800cea8:	e058      	b.n	800cf5c <tx_control+0x1d4c>
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	20000e50 	.word	0x20000e50
 800ceb0:	200000bc 	.word	0x200000bc
 800ceb4:	20000df8 	.word	0x20000df8
 800ceb8:	20000e3c 	.word	0x20000e3c
 800cebc:	20000b77 	.word	0x20000b77
 800cec0:	20000fc8 	.word	0x20000fc8
 800cec4:	20001064 	.word	0x20001064
 800cec8:	2000106c 	.word	0x2000106c
 800cecc:	20001074 	.word	0x20001074
 800ced0:	2000107c 	.word	0x2000107c
 800ced4:	20000e54 	.word	0x20000e54
 800ced8:	20000b76 	.word	0x20000b76
 800cedc:	20000e34 	.word	0x20000e34
 800cee0:	20000e2c 	.word	0x20000e2c
 800cee4:	20000e30 	.word	0x20000e30
 800cee8:	20000fd8 	.word	0x20000fd8
 800ceec:	20000e39 	.word	0x20000e39
 800cef0:	20000e44 	.word	0x20000e44
 800cef4:	20000dd4 	.word	0x20000dd4
 800cef8:	20000dd5 	.word	0x20000dd5
 800cefc:	200009d4 	.word	0x200009d4
 800cf00:	2000038c 	.word	0x2000038c
 800cf04:	2000059c 	.word	0x2000059c
 800cf08:	2000038d 	.word	0x2000038d
 800cf0c:	2000038e 	.word	0x2000038e
 800cf10:	2000038f 	.word	0x2000038f
 800cf14:	20000390 	.word	0x20000390
 800cf18:	20000391 	.word	0x20000391
 800cf1c:	20000392 	.word	0x20000392
 800cf20:	20000393 	.word	0x20000393
 800cf24:	20001090 	.word	0x20001090
 800cf28:	20001091 	.word	0x20001091
 800cf2c:	20001092 	.word	0x20001092
 800cf30:	20001093 	.word	0x20001093
 800cf34:	20001094 	.word	0x20001094
 800cf38:	20001095 	.word	0x20001095
 800cf3c:	200010ac 	.word	0x200010ac
 800cf40:	200005b0 	.word	0x200005b0
 800cf44:	20001098 	.word	0x20001098
 800cf48:	20001109 	.word	0x20001109
 800cf4c:	20001088 	.word	0x20001088
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 800cf50:	4be7      	ldr	r3, [pc, #924]	@ (800d2f0 <tx_control+0x20e0>)
 800cf52:	22f1      	movs	r2, #241	@ 0xf1
 800cf54:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800cf56:	4be6      	ldr	r3, [pc, #920]	@ (800d2f0 <tx_control+0x20e0>)
 800cf58:	223e      	movs	r2, #62	@ 0x3e
 800cf5a:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 800cf5c:	4be5      	ldr	r3, [pc, #916]	@ (800d2f4 <tx_control+0x20e4>)
 800cf5e:	4ae4      	ldr	r2, [pc, #912]	@ (800d2f0 <tx_control+0x20e0>)
 800cf60:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800cf62:	4be5      	ldr	r3, [pc, #916]	@ (800d2f8 <tx_control+0x20e8>)
 800cf64:	4ae2      	ldr	r2, [pc, #904]	@ (800d2f0 <tx_control+0x20e0>)
 800cf66:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 800cf68:	4be4      	ldr	r3, [pc, #912]	@ (800d2fc <tx_control+0x20ec>)
 800cf6a:	4ae5      	ldr	r2, [pc, #916]	@ (800d300 <tx_control+0x20f0>)
 800cf6c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 800cf6e:	4be5      	ldr	r3, [pc, #916]	@ (800d304 <tx_control+0x20f4>)
 800cf70:	2202      	movs	r2, #2
 800cf72:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 800cf74:	4be4      	ldr	r3, [pc, #912]	@ (800d308 <tx_control+0x20f8>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cf7a:	4be4      	ldr	r3, [pc, #912]	@ (800d30c <tx_control+0x20fc>)
 800cf7c:	2255      	movs	r2, #85	@ 0x55
 800cf7e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800cf80:	4be3      	ldr	r3, [pc, #908]	@ (800d310 <tx_control+0x2100>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800cf86:	e040      	b.n	800d00a <tx_control+0x1dfa>
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800cf88:	4be2      	ldr	r3, [pc, #904]	@ (800d314 <tx_control+0x2104>)
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	701a      	strb	r2, [r3, #0]
			pointTx = &typeClock ;				// ldw		pointTx,X
 800cf8e:	4bd9      	ldr	r3, [pc, #868]	@ (800d2f4 <tx_control+0x20e4>)
 800cf90:	4ae0      	ldr	r2, [pc, #896]	@ (800d314 <tx_control+0x2104>)
 800cf92:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800cf94:	4bd8      	ldr	r3, [pc, #864]	@ (800d2f8 <tx_control+0x20e8>)
 800cf96:	4adf      	ldr	r2, [pc, #892]	@ (800d314 <tx_control+0x2104>)
 800cf98:	601a      	str	r2, [r3, #0]
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800cf9a:	4bd7      	ldr	r3, [pc, #860]	@ (800d2f8 <tx_control+0x20e8>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	1c5a      	adds	r2, r3, #1
 800cfa0:	4bd6      	ldr	r3, [pc, #856]	@ (800d2fc <tx_control+0x20ec>)
 800cfa2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800cfa4:	4bd7      	ldr	r3, [pc, #860]	@ (800d304 <tx_control+0x20f4>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800cfaa:	4bdb      	ldr	r3, [pc, #876]	@ (800d318 <tx_control+0x2108>)
 800cfac:	227b      	movs	r2, #123	@ 0x7b
 800cfae:	5c9a      	ldrb	r2, [r3, r2]
 800cfb0:	4bda      	ldr	r3, [pc, #872]	@ (800d31c <tx_control+0x210c>)
 800cfb2:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800cfb4:	4bd8      	ldr	r3, [pc, #864]	@ (800d318 <tx_control+0x2108>)
 800cfb6:	227c      	movs	r2, #124	@ 0x7c
 800cfb8:	5c9a      	ldrb	r2, [r3, r2]
 800cfba:	4bd8      	ldr	r3, [pc, #864]	@ (800d31c <tx_control+0x210c>)
 800cfbc:	705a      	strb	r2, [r3, #1]
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800cfbe:	4bd7      	ldr	r3, [pc, #860]	@ (800d31c <tx_control+0x210c>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800cfc4:	4bd5      	ldr	r3, [pc, #852]	@ (800d31c <tx_control+0x210c>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	70da      	strb	r2, [r3, #3]
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800cfca:	4bd4      	ldr	r3, [pc, #848]	@ (800d31c <tx_control+0x210c>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800cfd0:	4bd2      	ldr	r3, [pc, #840]	@ (800d31c <tx_control+0x210c>)
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	715a      	strb	r2, [r3, #5]
			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800cfd6:	4bd1      	ldr	r3, [pc, #836]	@ (800d31c <tx_control+0x210c>)
 800cfd8:	2209      	movs	r2, #9
 800cfda:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800cfdc:	4bc9      	ldr	r3, [pc, #804]	@ (800d304 <tx_control+0x20f4>)
 800cfde:	781a      	ldrb	r2, [r3, #0]
 800cfe0:	4bce      	ldr	r3, [pc, #824]	@ (800d31c <tx_control+0x210c>)
 800cfe2:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800cfe4:	4bc8      	ldr	r3, [pc, #800]	@ (800d308 <tx_control+0x20f8>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800cfea:	4bcd      	ldr	r3, [pc, #820]	@ (800d320 <tx_control+0x2110>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800cff0:	4bc5      	ldr	r3, [pc, #788]	@ (800d308 <tx_control+0x20f8>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cff6:	4bc5      	ldr	r3, [pc, #788]	@ (800d30c <tx_control+0x20fc>)
 800cff8:	2255      	movs	r2, #85	@ 0x55
 800cffa:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800cffc:	4bc4      	ldr	r3, [pc, #784]	@ (800d310 <tx_control+0x2100>)
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800d002:	e002      	b.n	800d00a <tx_control+0x1dfa>
		goto end_tx_control;//	jp end_tx_control
 800d004:	46c0      	nop			@ (mov r8, r8)
 800d006:	e000      	b.n	800d00a <tx_control+0x1dfa>
			goto end_tx_control;		//jp		end_tx_control
 800d008:	46c0      	nop			@ (mov r8, r8)
		if (!keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 800d00a:	4bc0      	ldr	r3, [pc, #768]	@ (800d30c <tx_control+0x20fc>)
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01b      	beq.n	800d04a <tx_control+0x1e3a>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 800d012:	4bc4      	ldr	r3, [pc, #784]	@ (800d324 <tx_control+0x2114>)
 800d014:	791b      	ldrb	r3, [r3, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	4053      	eors	r3, r2
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <tx_control+0x1e18>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 800d020:	4bc1      	ldr	r3, [pc, #772]	@ (800d328 <tx_control+0x2118>)
 800d022:	22aa      	movs	r2, #170	@ 0xaa
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	e000      	b.n	800d02a <tx_control+0x1e1a>
			goto ask_resetLoopTx;
 800d028:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 800d02a:	4bc0      	ldr	r3, [pc, #768]	@ (800d32c <tx_control+0x211c>)
 800d02c:	791b      	ldrb	r3, [r3, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d109      	bne.n	800d046 <tx_control+0x1e36>
resetLoopTx:
 800d032:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 800d034:	4bb4      	ldr	r3, [pc, #720]	@ (800d308 <tx_control+0x20f8>)
 800d036:	795b      	ldrb	r3, [r3, #5]
 800d038:	2201      	movs	r2, #1
 800d03a:	4053      	eors	r3, r2
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <tx_control+0x1e40>
		asm ("nop");
 800d042:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 800d044:	e7f6      	b.n	800d034 <tx_control+0x1e24>
		asm ("nop");
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	e7fd      	b.n	800d046 <tx_control+0x1e36>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 800d04a:	46c0      	nop			@ (mov r8, r8)
 800d04c:	f001 f8a8 	bl	800e1a0 <tx_control+0x2f90>
			goto no_resetLoopTx;
 800d050:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 800d052:	f001 f8a5 	bl	800e1a0 <tx_control+0x2f90>
		}
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 800d056:	4bb6      	ldr	r3, [pc, #728]	@ (800d330 <tx_control+0x2120>)
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 800d05c:	4bb4      	ldr	r3, [pc, #720]	@ (800d330 <tx_control+0x2120>)
 800d05e:	2200      	movs	r2, #0
 800d060:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 800d062:	4bb3      	ldr	r3, [pc, #716]	@ (800d330 <tx_control+0x2120>)
 800d064:	2200      	movs	r2, #0
 800d066:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 800d068:	4bb1      	ldr	r3, [pc, #708]	@ (800d330 <tx_control+0x2120>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 800d06e:	4bb0      	ldr	r3, [pc, #704]	@ (800d330 <tx_control+0x2120>)
 800d070:	2200      	movs	r2, #0
 800d072:	711a      	strb	r2, [r3, #4]
		goto end_tx_wifi;// jp			end_tx_wifi
 800d074:	f001 f892 	bl	800e19c <tx_control+0x2f8c>

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 800d078:	4bad      	ldr	r3, [pc, #692]	@ (800d330 <tx_control+0x2120>)
 800d07a:	2201      	movs	r2, #1
 800d07c:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 800d07e:	4ba9      	ldr	r3, [pc, #676]	@ (800d324 <tx_control+0x2114>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2201      	movs	r2, #1
 800d084:	4053      	eors	r3, r2
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <tx_control+0x1e80>
 800d08c:	f001 f876 	bl	800e17c <tx_control+0x2f6c>
			goto tx_wifi_OK_01;
 800d090:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 800d092:	4b9e      	ldr	r3, [pc, #632]	@ (800d30c <tx_control+0x20fc>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <tx_control+0x1e8e>
 800d09a:	f001 f872 	bl	800e182 <tx_control+0x2f72>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 800d09e:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		if(!flagsWIFI[f_timeLoggerSend]){
 800d0a0:	4ba3      	ldr	r3, [pc, #652]	@ (800d330 <tx_control+0x2120>)
 800d0a2:	785b      	ldrb	r3, [r3, #1]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4053      	eors	r3, r2
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d100      	bne.n	800d0b0 <tx_control+0x1ea0>
 800d0ae:	e1eb      	b.n	800d488 <tx_control+0x2278>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 800d0b0:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 800d0b2:	4b9f      	ldr	r3, [pc, #636]	@ (800d330 <tx_control+0x2120>)
 800d0b4:	78db      	ldrb	r3, [r3, #3]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d000      	beq.n	800d0bc <tx_control+0x1eac>
 800d0ba:	e0b7      	b.n	800d22c <tx_control+0x201c>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 800d0bc:	4b9c      	ldr	r3, [pc, #624]	@ (800d330 <tx_control+0x2120>)
 800d0be:	2201      	movs	r2, #1
 800d0c0:	70da      	strb	r2, [r3, #3]

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 800d0c2:	4b9c      	ldr	r3, [pc, #624]	@ (800d334 <tx_control+0x2124>)
 800d0c4:	781a      	ldrb	r2, [r3, #0]
 800d0c6:	4b9c      	ldr	r3, [pc, #624]	@ (800d338 <tx_control+0x2128>)
 800d0c8:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 800d0ca:	4b9c      	ldr	r3, [pc, #624]	@ (800d33c <tx_control+0x212c>)
 800d0cc:	781a      	ldrb	r2, [r3, #0]
 800d0ce:	4b9c      	ldr	r3, [pc, #624]	@ (800d340 <tx_control+0x2130>)
 800d0d0:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 800d0d2:	4b9c      	ldr	r3, [pc, #624]	@ (800d344 <tx_control+0x2134>)
 800d0d4:	4a9c      	ldr	r2, [pc, #624]	@ (800d348 <tx_control+0x2138>)
 800d0d6:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 800d0d8:	4b9c      	ldr	r3, [pc, #624]	@ (800d34c <tx_control+0x213c>)
 800d0da:	4a9d      	ldr	r2, [pc, #628]	@ (800d350 <tx_control+0x2140>)
 800d0dc:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 800d0de:	4b99      	ldr	r3, [pc, #612]	@ (800d344 <tx_control+0x2134>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	337e      	adds	r3, #126	@ 0x7e
 800d0e4:	4a96      	ldr	r2, [pc, #600]	@ (800d340 <tx_control+0x2130>)
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800d0ea:	4b9a      	ldr	r3, [pc, #616]	@ (800d354 <tx_control+0x2144>)
 800d0ec:	22aa      	movs	r2, #170	@ 0xaa
 800d0ee:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 800d0f0:	4b96      	ldr	r3, [pc, #600]	@ (800d34c <tx_control+0x213c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a90      	ldr	r2, [pc, #576]	@ (800d338 <tx_control+0x2128>)
 800d0f6:	7812      	ldrb	r2, [r2, #0]
 800d0f8:	01d2      	lsls	r2, r2, #7
 800d0fa:	189a      	adds	r2, r3, r2
 800d0fc:	4b96      	ldr	r3, [pc, #600]	@ (800d358 <tx_control+0x2148>)
 800d0fe:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800d100:	4b90      	ldr	r3, [pc, #576]	@ (800d344 <tx_control+0x2134>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	4b95      	ldr	r3, [pc, #596]	@ (800d35c <tx_control+0x214c>)
 800d106:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800d108:	f7f7 fee0 	bl	8004ecc <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 800d10c:	4b94      	ldr	r3, [pc, #592]	@ (800d360 <tx_control+0x2150>)
 800d10e:	881a      	ldrh	r2, [r3, #0]
 800d110:	4b94      	ldr	r3, [pc, #592]	@ (800d364 <tx_control+0x2154>)
 800d112:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800d114:	4b94      	ldr	r3, [pc, #592]	@ (800d368 <tx_control+0x2158>)
 800d116:	4a95      	ldr	r2, [pc, #596]	@ (800d36c <tx_control+0x215c>)
 800d118:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800d11a:	f7f7 fdb9 	bl	8004c90 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 800d11e:	f7f7 fdf1 	bl	8004d04 <save_timeUNIX>

		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800d122:	4b93      	ldr	r3, [pc, #588]	@ (800d370 <tx_control+0x2160>)
 800d124:	2240      	movs	r2, #64	@ 0x40
 800d126:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 800d128:	4b91      	ldr	r3, [pc, #580]	@ (800d370 <tx_control+0x2160>)
 800d12a:	2285      	movs	r2, #133	@ 0x85
 800d12c:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d12e:	4b91      	ldr	r3, [pc, #580]	@ (800d374 <tx_control+0x2164>)
 800d130:	4a91      	ldr	r2, [pc, #580]	@ (800d378 <tx_control+0x2168>)
 800d132:	0019      	movs	r1, r3
 800d134:	0010      	movs	r0, r2
 800d136:	f7f3 fcc1 	bl	8000abc <findLastValue>
 800d13a:	0003      	movs	r3, r0
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	4b8c      	ldr	r3, [pc, #560]	@ (800d370 <tx_control+0x2160>)
 800d140:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d142:	4b8e      	ldr	r3, [pc, #568]	@ (800d37c <tx_control+0x216c>)
 800d144:	4a8c      	ldr	r2, [pc, #560]	@ (800d378 <tx_control+0x2168>)
 800d146:	0019      	movs	r1, r3
 800d148:	0010      	movs	r0, r2
 800d14a:	f7f3 fcb7 	bl	8000abc <findLastValue>
 800d14e:	0003      	movs	r3, r0
 800d150:	b2da      	uxtb	r2, r3
 800d152:	4b87      	ldr	r3, [pc, #540]	@ (800d370 <tx_control+0x2160>)
 800d154:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 800d156:	4b8a      	ldr	r3, [pc, #552]	@ (800d380 <tx_control+0x2170>)
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	0a1b      	lsrs	r3, r3, #8
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	4b83      	ldr	r3, [pc, #524]	@ (800d370 <tx_control+0x2160>)
 800d162:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800d164:	4b86      	ldr	r3, [pc, #536]	@ (800d380 <tx_control+0x2170>)
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	4b81      	ldr	r3, [pc, #516]	@ (800d370 <tx_control+0x2160>)
 800d16c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 800d16e:	4b85      	ldr	r3, [pc, #532]	@ (800d384 <tx_control+0x2174>)
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	0a1b      	lsrs	r3, r3, #8
 800d174:	b29b      	uxth	r3, r3
 800d176:	b2da      	uxtb	r2, r3
 800d178:	4b7d      	ldr	r3, [pc, #500]	@ (800d370 <tx_control+0x2160>)
 800d17a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800d17c:	4b81      	ldr	r3, [pc, #516]	@ (800d384 <tx_control+0x2174>)
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b2da      	uxtb	r2, r3
 800d182:	4b7b      	ldr	r3, [pc, #492]	@ (800d370 <tx_control+0x2160>)
 800d184:	71da      	strb	r2, [r3, #7]
		// ldw		X,eeLong1
		//ldw		bufferWifiTx+12,X
		//ldw		X,eeLong3
		//ldw		bufferWifiTx+14,X

		bufferWifiTx[8] = eeLat1;
 800d186:	4b80      	ldr	r3, [pc, #512]	@ (800d388 <tx_control+0x2178>)
 800d188:	781a      	ldrb	r2, [r3, #0]
 800d18a:	4b79      	ldr	r3, [pc, #484]	@ (800d370 <tx_control+0x2160>)
 800d18c:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = eeLat2;
 800d18e:	4b7f      	ldr	r3, [pc, #508]	@ (800d38c <tx_control+0x217c>)
 800d190:	781a      	ldrb	r2, [r3, #0]
 800d192:	4b77      	ldr	r3, [pc, #476]	@ (800d370 <tx_control+0x2160>)
 800d194:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = eeLat3;
 800d196:	4b7e      	ldr	r3, [pc, #504]	@ (800d390 <tx_control+0x2180>)
 800d198:	781a      	ldrb	r2, [r3, #0]
 800d19a:	4b75      	ldr	r3, [pc, #468]	@ (800d370 <tx_control+0x2160>)
 800d19c:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = eeLat4;
 800d19e:	4b7d      	ldr	r3, [pc, #500]	@ (800d394 <tx_control+0x2184>)
 800d1a0:	781a      	ldrb	r2, [r3, #0]
 800d1a2:	4b73      	ldr	r3, [pc, #460]	@ (800d370 <tx_control+0x2160>)
 800d1a4:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = eeLong1;
 800d1a6:	4b7c      	ldr	r3, [pc, #496]	@ (800d398 <tx_control+0x2188>)
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	4b71      	ldr	r3, [pc, #452]	@ (800d370 <tx_control+0x2160>)
 800d1ac:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = eeLong2;
 800d1ae:	4b7b      	ldr	r3, [pc, #492]	@ (800d39c <tx_control+0x218c>)
 800d1b0:	781a      	ldrb	r2, [r3, #0]
 800d1b2:	4b6f      	ldr	r3, [pc, #444]	@ (800d370 <tx_control+0x2160>)
 800d1b4:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = eeLong3;
 800d1b6:	4b7a      	ldr	r3, [pc, #488]	@ (800d3a0 <tx_control+0x2190>)
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	4b6d      	ldr	r3, [pc, #436]	@ (800d370 <tx_control+0x2160>)
 800d1bc:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = eeLong4;
 800d1be:	4b79      	ldr	r3, [pc, #484]	@ (800d3a4 <tx_control+0x2194>)
 800d1c0:	781a      	ldrb	r2, [r3, #0]
 800d1c2:	4b6b      	ldr	r3, [pc, #428]	@ (800d370 <tx_control+0x2160>)
 800d1c4:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800d1c6:	4b4b      	ldr	r3, [pc, #300]	@ (800d2f4 <tx_control+0x20e4>)
 800d1c8:	4a69      	ldr	r2, [pc, #420]	@ (800d370 <tx_control+0x2160>)
 800d1ca:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800d1cc:	4b4a      	ldr	r3, [pc, #296]	@ (800d2f8 <tx_control+0x20e8>)
 800d1ce:	4a68      	ldr	r2, [pc, #416]	@ (800d370 <tx_control+0x2160>)
 800d1d0:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800d1d2:	4b4a      	ldr	r3, [pc, #296]	@ (800d2fc <tx_control+0x20ec>)
 800d1d4:	4a74      	ldr	r2, [pc, #464]	@ (800d3a8 <tx_control+0x2198>)
 800d1d6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800d1d8:	4b4a      	ldr	r3, [pc, #296]	@ (800d304 <tx_control+0x20f4>)
 800d1da:	2210      	movs	r2, #16
 800d1dc:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d1de:	4b4a      	ldr	r3, [pc, #296]	@ (800d308 <tx_control+0x20f8>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800d1e4:	4b4e      	ldr	r3, [pc, #312]	@ (800d320 <tx_control+0x2110>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d1ea:	4b47      	ldr	r3, [pc, #284]	@ (800d308 <tx_control+0x20f8>)
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 800d1f0:	4b46      	ldr	r3, [pc, #280]	@ (800d30c <tx_control+0x20fc>)
 800d1f2:	2255      	movs	r2, #85	@ 0x55
 800d1f4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800d1f6:	4b46      	ldr	r3, [pc, #280]	@ (800d310 <tx_control+0x2100>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 800d1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d334 <tx_control+0x2124>)
 800d1fe:	781a      	ldrb	r2, [r3, #0]
 800d200:	4b6a      	ldr	r3, [pc, #424]	@ (800d3ac <tx_control+0x219c>)
 800d202:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 800d204:	4b4d      	ldr	r3, [pc, #308]	@ (800d33c <tx_control+0x212c>)
 800d206:	781a      	ldrb	r2, [r3, #0]
 800d208:	4b69      	ldr	r3, [pc, #420]	@ (800d3b0 <tx_control+0x21a0>)
 800d20a:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 800d20c:	4b69      	ldr	r3, [pc, #420]	@ (800d3b4 <tx_control+0x21a4>)
 800d20e:	2200      	movs	r2, #0
 800d210:	801a      	strh	r2, [r3, #0]
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800d212:	4b69      	ldr	r3, [pc, #420]	@ (800d3b8 <tx_control+0x21a8>)
 800d214:	2203      	movs	r2, #3
 800d216:	701a      	strb	r2, [r3, #0]

		//; Indica cuantos registros se loggearon para mandar unicamente esa cantidad de registros
		// ldw		X,eeCntRegDATA
		// tnzw	X;										/ se logearon registros ?
		if(eeCntRegDATA==0){
 800d218:	4b54      	ldr	r3, [pc, #336]	@ (800d36c <tx_control+0x215c>)
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d02c      	beq.n	800d27a <tx_control+0x206a>
			goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		}
		numRegTx = eeCntRegDATA;// ldw		numRegTx,X
 800d220:	4b52      	ldr	r3, [pc, #328]	@ (800d36c <tx_control+0x215c>)
 800d222:	881a      	ldrh	r2, [r3, #0]
 800d224:	4b65      	ldr	r3, [pc, #404]	@ (800d3bc <tx_control+0x21ac>)
 800d226:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800d228:	f000 ffb8 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_timeLogger_01;
 800d22c:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 800d22e:	4b38      	ldr	r3, [pc, #224]	@ (800d310 <tx_control+0x2100>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b3d      	cmp	r3, #61	@ 0x3d
 800d234:	d00b      	beq.n	800d24e <tx_control+0x203e>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800d236:	4b60      	ldr	r3, [pc, #384]	@ (800d3b8 <tx_control+0x21a8>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d104      	bne.n	800d248 <tx_control+0x2038>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 800d23e:	4b3c      	ldr	r3, [pc, #240]	@ (800d330 <tx_control+0x2120>)
 800d240:	2200      	movs	r2, #0
 800d242:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800d244:	f000 ffaa 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 800d248:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800d24a:	f000 ffa7 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 800d24e:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800d250:	4b59      	ldr	r3, [pc, #356]	@ (800d3b8 <tx_control+0x21a8>)
 800d252:	2203      	movs	r2, #3
 800d254:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 800d256:	4b59      	ldr	r3, [pc, #356]	@ (800d3bc <tx_control+0x21ac>)
 800d258:	881a      	ldrh	r2, [r3, #0]
 800d25a:	4b56      	ldr	r3, [pc, #344]	@ (800d3b4 <tx_control+0x21a4>)
 800d25c:	881b      	ldrh	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d317      	bcc.n	800d292 <tx_control+0x2082>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
		 }

		// clrw	X
		cntRegDATA = 0;// ldw		cntRegDATA,X
 800d262:	4b3f      	ldr	r3, [pc, #252]	@ (800d360 <tx_control+0x2150>)
 800d264:	2200      	movs	r2, #0
 800d266:	801a      	strh	r2, [r3, #0]
		cntReg = 0;// ldw		cntReg,X
 800d268:	4b3e      	ldr	r3, [pc, #248]	@ (800d364 <tx_control+0x2154>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800d26e:	4b3e      	ldr	r3, [pc, #248]	@ (800d368 <tx_control+0x2158>)
 800d270:	4a3e      	ldr	r2, [pc, #248]	@ (800d36c <tx_control+0x215c>)
 800d272:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800d274:	f7f7 fd0c 	bl	8004c90 <save_cntReg>
 800d278:	e000      	b.n	800d27c <tx_control+0x206c>
			goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
 800d27a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_END:
		//; indica que ya es enviaron todos los paquetes
		flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
 800d27c:	4b2c      	ldr	r3, [pc, #176]	@ (800d330 <tx_control+0x2120>)
 800d27e:	2201      	movs	r2, #1
 800d280:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 800d282:	4b2b      	ldr	r3, [pc, #172]	@ (800d330 <tx_control+0x2120>)
 800d284:	2200      	movs	r2, #0
 800d286:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800d288:	4b4d      	ldr	r3, [pc, #308]	@ (800d3c0 <tx_control+0x21b0>)
 800d28a:	220a      	movs	r2, #10
 800d28c:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800d28e:	f000 ff85 	bl	800e19c <tx_control+0x2f8c>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 800d292:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 800d294:	4b36      	ldr	r3, [pc, #216]	@ (800d370 <tx_control+0x2160>)
 800d296:	2240      	movs	r2, #64	@ 0x40
 800d298:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 800d29a:	4b35      	ldr	r3, [pc, #212]	@ (800d370 <tx_control+0x2160>)
 800d29c:	2283      	movs	r2, #131	@ 0x83
 800d29e:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800d2a0:	4b33      	ldr	r3, [pc, #204]	@ (800d370 <tx_control+0x2160>)
 800d2a2:	2203      	movs	r2, #3
 800d2a4:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d2a6:	4b33      	ldr	r3, [pc, #204]	@ (800d374 <tx_control+0x2164>)
 800d2a8:	4a33      	ldr	r2, [pc, #204]	@ (800d378 <tx_control+0x2168>)
 800d2aa:	0019      	movs	r1, r3
 800d2ac:	0010      	movs	r0, r2
 800d2ae:	f7f3 fc05 	bl	8000abc <findLastValue>
 800d2b2:	0003      	movs	r3, r0
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	4b2e      	ldr	r3, [pc, #184]	@ (800d370 <tx_control+0x2160>)
 800d2b8:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d2ba:	4b30      	ldr	r3, [pc, #192]	@ (800d37c <tx_control+0x216c>)
 800d2bc:	4a2e      	ldr	r2, [pc, #184]	@ (800d378 <tx_control+0x2168>)
 800d2be:	0019      	movs	r1, r3
 800d2c0:	0010      	movs	r0, r2
 800d2c2:	f7f3 fbfb 	bl	8000abc <findLastValue>
 800d2c6:	0003      	movs	r3, r0
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b29      	ldr	r3, [pc, #164]	@ (800d370 <tx_control+0x2160>)
 800d2cc:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 800d2ce:	4b38      	ldr	r3, [pc, #224]	@ (800d3b0 <tx_control+0x21a0>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d000      	beq.n	800d2d8 <tx_control+0x20c8>
 800d2d6:	e07d      	b.n	800d3d4 <tx_control+0x21c4>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 800d2d8:	4b35      	ldr	r3, [pc, #212]	@ (800d3b0 <tx_control+0x21a0>)
 800d2da:	227e      	movs	r2, #126	@ 0x7e
 800d2dc:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 800d2de:	4b33      	ldr	r3, [pc, #204]	@ (800d3ac <tx_control+0x219c>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d16e      	bne.n	800d3c4 <tx_control+0x21b4>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 800d2e6:	4b31      	ldr	r3, [pc, #196]	@ (800d3ac <tx_control+0x219c>)
 800d2e8:	2260      	movs	r2, #96	@ 0x60
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	e06b      	b.n	800d3c6 <tx_control+0x21b6>
 800d2ee:	46c0      	nop			@ (mov r8, r8)
 800d2f0:	20000dd4 	.word	0x20000dd4
 800d2f4:	20000e34 	.word	0x20000e34
 800d2f8:	20000e2c 	.word	0x20000e2c
 800d2fc:	20000e30 	.word	0x20000e30
 800d300:	20000dd5 	.word	0x20000dd5
 800d304:	20000e50 	.word	0x20000e50
 800d308:	20000e3c 	.word	0x20000e3c
 800d30c:	20000e39 	.word	0x20000e39
 800d310:	20000e44 	.word	0x20000e44
 800d314:	200010d1 	.word	0x200010d1
 800d318:	200000bc 	.word	0x200000bc
 800d31c:	20000df8 	.word	0x20000df8
 800d320:	20000e54 	.word	0x20000e54
 800d324:	20000efc 	.word	0x20000efc
 800d328:	20000f04 	.word	0x20000f04
 800d32c:	20001064 	.word	0x20001064
 800d330:	20000f70 	.word	0x20000f70
 800d334:	20000dcd 	.word	0x20000dcd
 800d338:	20000dba 	.word	0x20000dba
 800d33c:	20000dcc 	.word	0x20000dcc
 800d340:	20000dbb 	.word	0x20000dbb
 800d344:	20000dc4 	.word	0x20000dc4
 800d348:	20000cac 	.word	0x20000cac
 800d34c:	20000dc0 	.word	0x20000dc0
 800d350:	0803c000 	.word	0x0803c000
 800d354:	20000dac 	.word	0x20000dac
 800d358:	20000db0 	.word	0x20000db0
 800d35c:	20000db4 	.word	0x20000db4
 800d360:	2000105a 	.word	0x2000105a
 800d364:	2000105e 	.word	0x2000105e
 800d368:	20001060 	.word	0x20001060
 800d36c:	20000394 	.word	0x20000394
 800d370:	20000f78 	.word	0x20000f78
 800d374:	2000037f 	.word	0x2000037f
 800d378:	0803f000 	.word	0x0803f000
 800d37c:	20000380 	.word	0x20000380
 800d380:	20000dd0 	.word	0x20000dd0
 800d384:	20000dd2 	.word	0x20000dd2
 800d388:	2000038c 	.word	0x2000038c
 800d38c:	2000038d 	.word	0x2000038d
 800d390:	2000038e 	.word	0x2000038e
 800d394:	2000038f 	.word	0x2000038f
 800d398:	20000390 	.word	0x20000390
 800d39c:	20000391 	.word	0x20000391
 800d3a0:	20000392 	.word	0x20000392
 800d3a4:	20000393 	.word	0x20000393
 800d3a8:	20000f88 	.word	0x20000f88
 800d3ac:	20000f96 	.word	0x20000f96
 800d3b0:	20000f97 	.word	0x20000f97
 800d3b4:	20000f98 	.word	0x20000f98
 800d3b8:	20000f9a 	.word	0x20000f9a
 800d3bc:	20001058 	.word	0x20001058
 800d3c0:	20000f9b 	.word	0x20000f9b
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 800d3c4:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800d3c6:	4be1      	ldr	r3, [pc, #900]	@ (800d74c <tx_control+0x253c>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	4bdf      	ldr	r3, [pc, #892]	@ (800d74c <tx_control+0x253c>)
 800d3d0:	701a      	strb	r2, [r3, #0]
 800d3d2:	e000      	b.n	800d3d6 <tx_control+0x21c6>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 800d3d4:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 800d3d6:	4bde      	ldr	r3, [pc, #888]	@ (800d750 <tx_control+0x2540>)
 800d3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 800d3da:	4bdc      	ldr	r3, [pc, #880]	@ (800d74c <tx_control+0x253c>)
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	01db      	lsls	r3, r3, #7
 800d3e0:	4adc      	ldr	r2, [pc, #880]	@ (800d754 <tx_control+0x2544>)
 800d3e2:	7812      	ldrb	r2, [r2, #0]
 800d3e4:	189a      	adds	r2, r3, r2
 800d3e6:	4bdc      	ldr	r3, [pc, #880]	@ (800d758 <tx_control+0x2548>)
 800d3e8:	18d3      	adds	r3, r2, r3
 800d3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		wreg = 0;// clr		wreg
 800d3ec:	4bdb      	ldr	r3, [pc, #876]	@ (800d75c <tx_control+0x254c>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 800d3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	63bb      	str	r3, [r7, #56]	@ 0x38
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800d3fe:	4bd5      	ldr	r3, [pc, #852]	@ (800d754 <tx_control+0x2544>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	3b01      	subs	r3, #1
 800d404:	b2da      	uxtb	r2, r3
 800d406:	4bd3      	ldr	r3, [pc, #844]	@ (800d754 <tx_control+0x2544>)
 800d408:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800d40a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d40c:	2380      	movs	r3, #128	@ 0x80
 800d40e:	025b      	lsls	r3, r3, #9
 800d410:	5cd2      	ldrb	r2, [r2, r3]
 800d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d414:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800d416:	4bd1      	ldr	r3, [pc, #836]	@ (800d75c <tx_control+0x254c>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	4bcf      	ldr	r3, [pc, #828]	@ (800d75c <tx_control+0x254c>)
 800d420:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 800d422:	4bce      	ldr	r3, [pc, #824]	@ (800d75c <tx_control+0x254c>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b08      	cmp	r3, #8
 800d428:	d800      	bhi.n	800d42c <tx_control+0x221c>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 800d42a:	e7e2      	b.n	800d3f2 <tx_control+0x21e2>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 800d42c:	4bcc      	ldr	r3, [pc, #816]	@ (800d760 <tx_control+0x2550>)
 800d42e:	7b5a      	ldrb	r2, [r3, #13]
 800d430:	4bcc      	ldr	r3, [pc, #816]	@ (800d764 <tx_control+0x2554>)
 800d432:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 800d434:	4bca      	ldr	r3, [pc, #808]	@ (800d760 <tx_control+0x2550>)
 800d436:	2200      	movs	r2, #0
 800d438:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 800d43a:	4bca      	ldr	r3, [pc, #808]	@ (800d764 <tx_control+0x2554>)
 800d43c:	781a      	ldrb	r2, [r3, #0]
 800d43e:	4bc8      	ldr	r3, [pc, #800]	@ (800d760 <tx_control+0x2550>)
 800d440:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800d442:	4bc9      	ldr	r3, [pc, #804]	@ (800d768 <tx_control+0x2558>)
 800d444:	4ac6      	ldr	r2, [pc, #792]	@ (800d760 <tx_control+0x2550>)
 800d446:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800d448:	4bc8      	ldr	r3, [pc, #800]	@ (800d76c <tx_control+0x255c>)
 800d44a:	4ac5      	ldr	r2, [pc, #788]	@ (800d760 <tx_control+0x2550>)
 800d44c:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 800d44e:	4bc8      	ldr	r3, [pc, #800]	@ (800d770 <tx_control+0x2560>)
 800d450:	4ac8      	ldr	r2, [pc, #800]	@ (800d774 <tx_control+0x2564>)
 800d452:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 800d454:	4bc8      	ldr	r3, [pc, #800]	@ (800d778 <tx_control+0x2568>)
 800d456:	220f      	movs	r2, #15
 800d458:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d45a:	4bc8      	ldr	r3, [pc, #800]	@ (800d77c <tx_control+0x256c>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800d460:	4bc7      	ldr	r3, [pc, #796]	@ (800d780 <tx_control+0x2570>)
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d466:	4bc5      	ldr	r3, [pc, #788]	@ (800d77c <tx_control+0x256c>)
 800d468:	2201      	movs	r2, #1
 800d46a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800d46c:	4bc5      	ldr	r3, [pc, #788]	@ (800d784 <tx_control+0x2574>)
 800d46e:	2255      	movs	r2, #85	@ 0x55
 800d470:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800d472:	4bc5      	ldr	r3, [pc, #788]	@ (800d788 <tx_control+0x2578>)
 800d474:	2200      	movs	r2, #0
 800d476:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 800d478:	4bc4      	ldr	r3, [pc, #784]	@ (800d78c <tx_control+0x257c>)
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	3301      	adds	r3, #1
 800d47e:	b29a      	uxth	r2, r3
 800d480:	4bc2      	ldr	r3, [pc, #776]	@ (800d78c <tx_control+0x257c>)
 800d482:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 800d484:	f000 fe8a 	bl	800e19c <tx_control+0x2f8c>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 800d488:	46c0      	nop			@ (mov r8, r8)
		// ;===========================================================
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		if(!flagsWIFI[f_eventLoggerSend]){
 800d48a:	4bc1      	ldr	r3, [pc, #772]	@ (800d790 <tx_control+0x2580>)
 800d48c:	789b      	ldrb	r3, [r3, #2]
 800d48e:	2201      	movs	r2, #1
 800d490:	4053      	eors	r3, r2
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d100      	bne.n	800d49a <tx_control+0x228a>
 800d498:	e1ec      	b.n	800d874 <tx_control+0x2664>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 800d49a:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger:
		//;------------------------------------------------------------
		//;------------- Espera retardo para comenzar con rutina Tx logger eventos
		//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi==0){
 800d49c:	4bbd      	ldr	r3, [pc, #756]	@ (800d794 <tx_control+0x2584>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <tx_control+0x2298>
 800d4a4:	f000 fe70 	bl	800e188 <tx_control+0x2f78>
			goto tx_wifi_eventDelayAsk;// jreq	tx_wifi_eventDelayAsk
 800d4a8:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 800d4aa:	4bb9      	ldr	r3, [pc, #740]	@ (800d790 <tx_control+0x2580>)
 800d4ac:	791b      	ldrb	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d000      	beq.n	800d4b4 <tx_control+0x22a4>
 800d4b2:	e0b6      	b.n	800d622 <tx_control+0x2412>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 800d4b4:	4bb6      	ldr	r3, [pc, #728]	@ (800d790 <tx_control+0x2580>)
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	711a      	strb	r2, [r3, #4]

		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800d4ba:	4bb7      	ldr	r3, [pc, #732]	@ (800d798 <tx_control+0x2588>)
 800d4bc:	781a      	ldrb	r2, [r3, #0]
 800d4be:	4bb7      	ldr	r3, [pc, #732]	@ (800d79c <tx_control+0x258c>)
 800d4c0:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 800d4c2:	4bb7      	ldr	r3, [pc, #732]	@ (800d7a0 <tx_control+0x2590>)
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	4bb7      	ldr	r3, [pc, #732]	@ (800d7a4 <tx_control+0x2594>)
 800d4c8:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 800d4ca:	4bb7      	ldr	r3, [pc, #732]	@ (800d7a8 <tx_control+0x2598>)
 800d4cc:	4ab7      	ldr	r2, [pc, #732]	@ (800d7ac <tx_control+0x259c>)
 800d4ce:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 800d4d0:	4bb7      	ldr	r3, [pc, #732]	@ (800d7b0 <tx_control+0x25a0>)
 800d4d2:	4ab8      	ldr	r2, [pc, #736]	@ (800d7b4 <tx_control+0x25a4>)
 800d4d4:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 800d4d6:	4bb3      	ldr	r3, [pc, #716]	@ (800d7a4 <tx_control+0x2594>)
 800d4d8:	7819      	ldrb	r1, [r3, #0]
 800d4da:	4bb4      	ldr	r3, [pc, #720]	@ (800d7ac <tx_control+0x259c>)
 800d4dc:	227e      	movs	r2, #126	@ 0x7e
 800d4de:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800d4e0:	4bb5      	ldr	r3, [pc, #724]	@ (800d7b8 <tx_control+0x25a8>)
 800d4e2:	22aa      	movs	r2, #170	@ 0xaa
 800d4e4:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 800d4e6:	4bb2      	ldr	r3, [pc, #712]	@ (800d7b0 <tx_control+0x25a0>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4aac      	ldr	r2, [pc, #688]	@ (800d79c <tx_control+0x258c>)
 800d4ec:	7812      	ldrb	r2, [r2, #0]
 800d4ee:	01d2      	lsls	r2, r2, #7
 800d4f0:	189a      	adds	r2, r3, r2
 800d4f2:	4bb2      	ldr	r3, [pc, #712]	@ (800d7bc <tx_control+0x25ac>)
 800d4f4:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800d4f6:	4bac      	ldr	r3, [pc, #688]	@ (800d7a8 <tx_control+0x2598>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4bb1      	ldr	r3, [pc, #708]	@ (800d7c0 <tx_control+0x25b0>)
 800d4fc:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800d4fe:	f7f7 fce5 	bl	8004ecc <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 800d502:	4bb0      	ldr	r3, [pc, #704]	@ (800d7c4 <tx_control+0x25b4>)
 800d504:	881a      	ldrh	r2, [r3, #0]
 800d506:	4bb0      	ldr	r3, [pc, #704]	@ (800d7c8 <tx_control+0x25b8>)
 800d508:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800d50a:	4bb0      	ldr	r3, [pc, #704]	@ (800d7cc <tx_control+0x25bc>)
 800d50c:	4ab0      	ldr	r2, [pc, #704]	@ (800d7d0 <tx_control+0x25c0>)
 800d50e:	601a      	str	r2, [r3, #0]
		save_cntReg();		// call	save_cntReg
 800d510:	f7f7 fbbe 	bl	8004c90 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 800d514:	f7f7 fbf6 	bl	8004d04 <save_timeUNIX>

		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800d518:	4b91      	ldr	r3, [pc, #580]	@ (800d760 <tx_control+0x2550>)
 800d51a:	2240      	movs	r2, #64	@ 0x40
 800d51c:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 800d51e:	4b90      	ldr	r3, [pc, #576]	@ (800d760 <tx_control+0x2550>)
 800d520:	2286      	movs	r2, #134	@ 0x86
 800d522:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d524:	4bab      	ldr	r3, [pc, #684]	@ (800d7d4 <tx_control+0x25c4>)
 800d526:	4aac      	ldr	r2, [pc, #688]	@ (800d7d8 <tx_control+0x25c8>)
 800d528:	0019      	movs	r1, r3
 800d52a:	0010      	movs	r0, r2
 800d52c:	f7f3 fac6 	bl	8000abc <findLastValue>
 800d530:	0003      	movs	r3, r0
 800d532:	b2da      	uxtb	r2, r3
 800d534:	4b8a      	ldr	r3, [pc, #552]	@ (800d760 <tx_control+0x2550>)
 800d536:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d538:	4ba8      	ldr	r3, [pc, #672]	@ (800d7dc <tx_control+0x25cc>)
 800d53a:	4aa7      	ldr	r2, [pc, #668]	@ (800d7d8 <tx_control+0x25c8>)
 800d53c:	0019      	movs	r1, r3
 800d53e:	0010      	movs	r0, r2
 800d540:	f7f3 fabc 	bl	8000abc <findLastValue>
 800d544:	0003      	movs	r3, r0
 800d546:	b2da      	uxtb	r2, r3
 800d548:	4b85      	ldr	r3, [pc, #532]	@ (800d760 <tx_control+0x2550>)
 800d54a:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 800d54c:	4ba4      	ldr	r3, [pc, #656]	@ (800d7e0 <tx_control+0x25d0>)
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	b29b      	uxth	r3, r3
 800d554:	b2da      	uxtb	r2, r3
 800d556:	4b82      	ldr	r3, [pc, #520]	@ (800d760 <tx_control+0x2550>)
 800d558:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800d55a:	4ba1      	ldr	r3, [pc, #644]	@ (800d7e0 <tx_control+0x25d0>)
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	4b7f      	ldr	r3, [pc, #508]	@ (800d760 <tx_control+0x2550>)
 800d562:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 800d564:	4b9f      	ldr	r3, [pc, #636]	@ (800d7e4 <tx_control+0x25d4>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	0a1b      	lsrs	r3, r3, #8
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	4b7c      	ldr	r3, [pc, #496]	@ (800d760 <tx_control+0x2550>)
 800d570:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800d572:	4b9c      	ldr	r3, [pc, #624]	@ (800d7e4 <tx_control+0x25d4>)
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	b2da      	uxtb	r2, r3
 800d578:	4b79      	ldr	r3, [pc, #484]	@ (800d760 <tx_control+0x2550>)
 800d57a:	71da      	strb	r2, [r3, #7]
		ldw		bufferWifiTx+10,X
		ldw		X,eeLong1
		ldw		bufferWifiTx+12,X
		ldw		X,eeLong3
		ldw		bufferWifiTx+14,X*/
		bufferWifiTx[8] = eeLat1;
 800d57c:	4b9a      	ldr	r3, [pc, #616]	@ (800d7e8 <tx_control+0x25d8>)
 800d57e:	781a      	ldrb	r2, [r3, #0]
 800d580:	4b77      	ldr	r3, [pc, #476]	@ (800d760 <tx_control+0x2550>)
 800d582:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = eeLat2;
 800d584:	4b99      	ldr	r3, [pc, #612]	@ (800d7ec <tx_control+0x25dc>)
 800d586:	781a      	ldrb	r2, [r3, #0]
 800d588:	4b75      	ldr	r3, [pc, #468]	@ (800d760 <tx_control+0x2550>)
 800d58a:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = eeLat3;
 800d58c:	4b98      	ldr	r3, [pc, #608]	@ (800d7f0 <tx_control+0x25e0>)
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	4b73      	ldr	r3, [pc, #460]	@ (800d760 <tx_control+0x2550>)
 800d592:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = eeLat4;
 800d594:	4b97      	ldr	r3, [pc, #604]	@ (800d7f4 <tx_control+0x25e4>)
 800d596:	781a      	ldrb	r2, [r3, #0]
 800d598:	4b71      	ldr	r3, [pc, #452]	@ (800d760 <tx_control+0x2550>)
 800d59a:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = eeLong1;
 800d59c:	4b96      	ldr	r3, [pc, #600]	@ (800d7f8 <tx_control+0x25e8>)
 800d59e:	781a      	ldrb	r2, [r3, #0]
 800d5a0:	4b6f      	ldr	r3, [pc, #444]	@ (800d760 <tx_control+0x2550>)
 800d5a2:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = eeLong2;
 800d5a4:	4b95      	ldr	r3, [pc, #596]	@ (800d7fc <tx_control+0x25ec>)
 800d5a6:	781a      	ldrb	r2, [r3, #0]
 800d5a8:	4b6d      	ldr	r3, [pc, #436]	@ (800d760 <tx_control+0x2550>)
 800d5aa:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = eeLong3;
 800d5ac:	4b94      	ldr	r3, [pc, #592]	@ (800d800 <tx_control+0x25f0>)
 800d5ae:	781a      	ldrb	r2, [r3, #0]
 800d5b0:	4b6b      	ldr	r3, [pc, #428]	@ (800d760 <tx_control+0x2550>)
 800d5b2:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = eeLong4;
 800d5b4:	4b93      	ldr	r3, [pc, #588]	@ (800d804 <tx_control+0x25f4>)
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	4b69      	ldr	r3, [pc, #420]	@ (800d760 <tx_control+0x2550>)
 800d5ba:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800d5bc:	4b6a      	ldr	r3, [pc, #424]	@ (800d768 <tx_control+0x2558>)
 800d5be:	4a68      	ldr	r2, [pc, #416]	@ (800d760 <tx_control+0x2550>)
 800d5c0:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800d5c2:	4b6a      	ldr	r3, [pc, #424]	@ (800d76c <tx_control+0x255c>)
 800d5c4:	4a66      	ldr	r2, [pc, #408]	@ (800d760 <tx_control+0x2550>)
 800d5c6:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800d5c8:	4b69      	ldr	r3, [pc, #420]	@ (800d770 <tx_control+0x2560>)
 800d5ca:	4a8f      	ldr	r2, [pc, #572]	@ (800d808 <tx_control+0x25f8>)
 800d5cc:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800d5ce:	4b6a      	ldr	r3, [pc, #424]	@ (800d778 <tx_control+0x2568>)
 800d5d0:	2210      	movs	r2, #16
 800d5d2:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d5d4:	4b69      	ldr	r3, [pc, #420]	@ (800d77c <tx_control+0x256c>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800d5da:	4b69      	ldr	r3, [pc, #420]	@ (800d780 <tx_control+0x2570>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d5e0:	4b66      	ldr	r3, [pc, #408]	@ (800d77c <tx_control+0x256c>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800d5e6:	4b67      	ldr	r3, [pc, #412]	@ (800d784 <tx_control+0x2574>)
 800d5e8:	2255      	movs	r2, #85	@ 0x55
 800d5ea:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 800d5ec:	4b66      	ldr	r3, [pc, #408]	@ (800d788 <tx_control+0x2578>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	701a      	strb	r2, [r3, #0]

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 800d5f2:	4b69      	ldr	r3, [pc, #420]	@ (800d798 <tx_control+0x2588>)
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	4b55      	ldr	r3, [pc, #340]	@ (800d74c <tx_control+0x253c>)
 800d5f8:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 800d5fa:	4b69      	ldr	r3, [pc, #420]	@ (800d7a0 <tx_control+0x2590>)
 800d5fc:	781a      	ldrb	r2, [r3, #0]
 800d5fe:	4b55      	ldr	r3, [pc, #340]	@ (800d754 <tx_control+0x2544>)
 800d600:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 800d602:	4b62      	ldr	r3, [pc, #392]	@ (800d78c <tx_control+0x257c>)
 800d604:	2200      	movs	r2, #0
 800d606:	801a      	strh	r2, [r3, #0]
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 800d608:	4b80      	ldr	r3, [pc, #512]	@ (800d80c <tx_control+0x25fc>)
 800d60a:	2203      	movs	r2, #3
 800d60c:	701a      	strb	r2, [r3, #0]

		//; Indica cuantos registros se loggearon para mandar unicamente esa cantidad de registros
		// ldw		X,eeCntRegEVENT
		// tnzw	X;										/ se logearon registros ?
		if(eeCntRegEVENT==0){
 800d60e:	4b70      	ldr	r3, [pc, #448]	@ (800d7d0 <tx_control+0x25c0>)
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d02c      	beq.n	800d670 <tx_control+0x2460>
			goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		}
		numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
 800d616:	4b6e      	ldr	r3, [pc, #440]	@ (800d7d0 <tx_control+0x25c0>)
 800d618:	881a      	ldrh	r2, [r3, #0]
 800d61a:	4b7d      	ldr	r3, [pc, #500]	@ (800d810 <tx_control+0x2600>)
 800d61c:	801a      	strh	r2, [r3, #0]


		goto end_tx_wifi;// jp		end_tx_wifi
 800d61e:	f000 fdbd 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 800d622:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 800d624:	4b58      	ldr	r3, [pc, #352]	@ (800d788 <tx_control+0x2578>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b3d      	cmp	r3, #61	@ 0x3d
 800d62a:	d00b      	beq.n	800d644 <tx_control+0x2434>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800d62c:	4b77      	ldr	r3, [pc, #476]	@ (800d80c <tx_control+0x25fc>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d104      	bne.n	800d63e <tx_control+0x242e>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 800d634:	4b56      	ldr	r3, [pc, #344]	@ (800d790 <tx_control+0x2580>)
 800d636:	2200      	movs	r2, #0
 800d638:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800d63a:	f000 fdaf 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 800d63e:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800d640:	f000 fdac 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 800d644:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_03:
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800d646:	4b71      	ldr	r3, [pc, #452]	@ (800d80c <tx_control+0x25fc>)
 800d648:	2203      	movs	r2, #3
 800d64a:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 800d64c:	4b70      	ldr	r3, [pc, #448]	@ (800d810 <tx_control+0x2600>)
 800d64e:	881a      	ldrh	r2, [r3, #0]
 800d650:	4b4e      	ldr	r3, [pc, #312]	@ (800d78c <tx_control+0x257c>)
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d317      	bcc.n	800d688 <tx_control+0x2478>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
		}

		// clrw	X
		cntRegEVENT = 0;// ldw		cntRegEVENT,X
 800d658:	4b5a      	ldr	r3, [pc, #360]	@ (800d7c4 <tx_control+0x25b4>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	801a      	strh	r2, [r3, #0]
		cntReg = 0;// ldw		cntReg,X
 800d65e:	4b5a      	ldr	r3, [pc, #360]	@ (800d7c8 <tx_control+0x25b8>)
 800d660:	2200      	movs	r2, #0
 800d662:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800d664:	4b59      	ldr	r3, [pc, #356]	@ (800d7cc <tx_control+0x25bc>)
 800d666:	4a5a      	ldr	r2, [pc, #360]	@ (800d7d0 <tx_control+0x25c0>)
 800d668:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800d66a:	f7f7 fb11 	bl	8004c90 <save_cntReg>
 800d66e:	e000      	b.n	800d672 <tx_control+0x2462>
			goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
 800d670:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_END:
		//; indica que ya es enviaron todos los paquetes
		flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
 800d672:	4b47      	ldr	r3, [pc, #284]	@ (800d790 <tx_control+0x2580>)
 800d674:	2201      	movs	r2, #1
 800d676:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 800d678:	4b45      	ldr	r3, [pc, #276]	@ (800d790 <tx_control+0x2580>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800d67e:	4b45      	ldr	r3, [pc, #276]	@ (800d794 <tx_control+0x2584>)
 800d680:	220a      	movs	r2, #10
 800d682:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;//jp		end_tx_wifi
 800d684:	f000 fd8a 	bl	800e19c <tx_control+0x2f8c>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 800d688:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800d68a:	4b35      	ldr	r3, [pc, #212]	@ (800d760 <tx_control+0x2550>)
 800d68c:	2240      	movs	r2, #64	@ 0x40
 800d68e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 800d690:	4b33      	ldr	r3, [pc, #204]	@ (800d760 <tx_control+0x2550>)
 800d692:	2284      	movs	r2, #132	@ 0x84
 800d694:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800d696:	4b32      	ldr	r3, [pc, #200]	@ (800d760 <tx_control+0x2550>)
 800d698:	2203      	movs	r2, #3
 800d69a:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d69c:	4b4d      	ldr	r3, [pc, #308]	@ (800d7d4 <tx_control+0x25c4>)
 800d69e:	4a4e      	ldr	r2, [pc, #312]	@ (800d7d8 <tx_control+0x25c8>)
 800d6a0:	0019      	movs	r1, r3
 800d6a2:	0010      	movs	r0, r2
 800d6a4:	f7f3 fa0a 	bl	8000abc <findLastValue>
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	4b2c      	ldr	r3, [pc, #176]	@ (800d760 <tx_control+0x2550>)
 800d6ae:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d6b0:	4b4a      	ldr	r3, [pc, #296]	@ (800d7dc <tx_control+0x25cc>)
 800d6b2:	4a49      	ldr	r2, [pc, #292]	@ (800d7d8 <tx_control+0x25c8>)
 800d6b4:	0019      	movs	r1, r3
 800d6b6:	0010      	movs	r0, r2
 800d6b8:	f7f3 fa00 	bl	8000abc <findLastValue>
 800d6bc:	0003      	movs	r3, r0
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	4b27      	ldr	r3, [pc, #156]	@ (800d760 <tx_control+0x2550>)
 800d6c2:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 800d6c4:	4b23      	ldr	r3, [pc, #140]	@ (800d754 <tx_control+0x2544>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d112      	bne.n	800d6f2 <tx_control+0x24e2>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 800d6cc:	4b21      	ldr	r3, [pc, #132]	@ (800d754 <tx_control+0x2544>)
 800d6ce:	227e      	movs	r2, #126	@ 0x7e
 800d6d0:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 800d6d2:	4b1e      	ldr	r3, [pc, #120]	@ (800d74c <tx_control+0x253c>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <tx_control+0x24d2>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 800d6da:	4b1c      	ldr	r3, [pc, #112]	@ (800d74c <tx_control+0x253c>)
 800d6dc:	22a0      	movs	r2, #160	@ 0xa0
 800d6de:	701a      	strb	r2, [r3, #0]
 800d6e0:	e000      	b.n	800d6e4 <tx_control+0x24d4>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 800d6e2:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800d6e4:	4b19      	ldr	r3, [pc, #100]	@ (800d74c <tx_control+0x253c>)
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	4b17      	ldr	r3, [pc, #92]	@ (800d74c <tx_control+0x253c>)
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e000      	b.n	800d6f4 <tx_control+0x24e4>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 800d6f2:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 800d6f4:	4b47      	ldr	r3, [pc, #284]	@ (800d814 <tx_control+0x2604>)
 800d6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 800d6f8:	4b16      	ldr	r3, [pc, #88]	@ (800d754 <tx_control+0x2544>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	001a      	movs	r2, r3
 800d6fe:	4b13      	ldr	r3, [pc, #76]	@ (800d74c <tx_control+0x253c>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	01db      	lsls	r3, r3, #7
 800d704:	18d2      	adds	r2, r2, r3
 800d706:	4b2b      	ldr	r3, [pc, #172]	@ (800d7b4 <tx_control+0x25a4>)
 800d708:	18d3      	adds	r3, r2, r3
 800d70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		wreg = 0;// clr		wreg
 800d70c:	4b13      	ldr	r3, [pc, #76]	@ (800d75c <tx_control+0x254c>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 800d712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d714:	3b01      	subs	r3, #1
 800d716:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800d718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71a:	3b01      	subs	r3, #1
 800d71c:	63bb      	str	r3, [r7, #56]	@ 0x38
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800d71e:	4b0d      	ldr	r3, [pc, #52]	@ (800d754 <tx_control+0x2544>)
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	3b01      	subs	r3, #1
 800d724:	b2da      	uxtb	r2, r3
 800d726:	4b0b      	ldr	r3, [pc, #44]	@ (800d754 <tx_control+0x2544>)
 800d728:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800d72a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d72c:	2380      	movs	r3, #128	@ 0x80
 800d72e:	025b      	lsls	r3, r3, #9
 800d730:	5cd2      	ldrb	r2, [r2, r3]
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800d736:	4b09      	ldr	r3, [pc, #36]	@ (800d75c <tx_control+0x254c>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	3301      	adds	r3, #1
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b07      	ldr	r3, [pc, #28]	@ (800d75c <tx_control+0x254c>)
 800d740:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 800d742:	4b06      	ldr	r3, [pc, #24]	@ (800d75c <tx_control+0x254c>)
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b0d      	cmp	r3, #13
 800d748:	d866      	bhi.n	800d818 <tx_control+0x2608>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 800d74a:	e7e2      	b.n	800d712 <tx_control+0x2502>
 800d74c:	20000f96 	.word	0x20000f96
 800d750:	20000f86 	.word	0x20000f86
 800d754:	20000f97 	.word	0x20000f97
 800d758:	0803c000 	.word	0x0803c000
 800d75c:	20000b77 	.word	0x20000b77
 800d760:	20000f78 	.word	0x20000f78
 800d764:	20000b76 	.word	0x20000b76
 800d768:	20000e34 	.word	0x20000e34
 800d76c:	20000e2c 	.word	0x20000e2c
 800d770:	20000e30 	.word	0x20000e30
 800d774:	20000f87 	.word	0x20000f87
 800d778:	20000e50 	.word	0x20000e50
 800d77c:	20000e3c 	.word	0x20000e3c
 800d780:	20000e54 	.word	0x20000e54
 800d784:	20000e39 	.word	0x20000e39
 800d788:	20000e44 	.word	0x20000e44
 800d78c:	20000f98 	.word	0x20000f98
 800d790:	20000f70 	.word	0x20000f70
 800d794:	20000f9b 	.word	0x20000f9b
 800d798:	20000dcf 	.word	0x20000dcf
 800d79c:	20000dba 	.word	0x20000dba
 800d7a0:	20000dce 	.word	0x20000dce
 800d7a4:	20000dbb 	.word	0x20000dbb
 800d7a8:	20000dc4 	.word	0x20000dc4
 800d7ac:	20000d2c 	.word	0x20000d2c
 800d7b0:	20000dc0 	.word	0x20000dc0
 800d7b4:	08037000 	.word	0x08037000
 800d7b8:	20000dac 	.word	0x20000dac
 800d7bc:	20000db0 	.word	0x20000db0
 800d7c0:	20000db4 	.word	0x20000db4
 800d7c4:	2000105c 	.word	0x2000105c
 800d7c8:	2000105e 	.word	0x2000105e
 800d7cc:	20001060 	.word	0x20001060
 800d7d0:	20000396 	.word	0x20000396
 800d7d4:	2000037f 	.word	0x2000037f
 800d7d8:	0803f000 	.word	0x0803f000
 800d7dc:	20000380 	.word	0x20000380
 800d7e0:	20000dd0 	.word	0x20000dd0
 800d7e4:	20000dd2 	.word	0x20000dd2
 800d7e8:	2000038c 	.word	0x2000038c
 800d7ec:	2000038d 	.word	0x2000038d
 800d7f0:	2000038e 	.word	0x2000038e
 800d7f4:	2000038f 	.word	0x2000038f
 800d7f8:	20000390 	.word	0x20000390
 800d7fc:	20000391 	.word	0x20000391
 800d800:	20000392 	.word	0x20000392
 800d804:	20000393 	.word	0x20000393
 800d808:	20000f88 	.word	0x20000f88
 800d80c:	20000f9a 	.word	0x20000f9a
 800d810:	20001058 	.word	0x20001058
 800d814:	20000f8b 	.word	0x20000f8b
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 800d818:	4bd3      	ldr	r3, [pc, #844]	@ (800db68 <tx_control+0x2958>)
 800d81a:	7c9a      	ldrb	r2, [r3, #18]
 800d81c:	4bd3      	ldr	r3, [pc, #844]	@ (800db6c <tx_control+0x295c>)
 800d81e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 800d820:	4bd1      	ldr	r3, [pc, #836]	@ (800db68 <tx_control+0x2958>)
 800d822:	2200      	movs	r2, #0
 800d824:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 800d826:	4bd1      	ldr	r3, [pc, #836]	@ (800db6c <tx_control+0x295c>)
 800d828:	781a      	ldrb	r2, [r3, #0]
 800d82a:	4bcf      	ldr	r3, [pc, #828]	@ (800db68 <tx_control+0x2958>)
 800d82c:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800d82e:	4bd0      	ldr	r3, [pc, #832]	@ (800db70 <tx_control+0x2960>)
 800d830:	4acd      	ldr	r2, [pc, #820]	@ (800db68 <tx_control+0x2958>)
 800d832:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800d834:	4bcf      	ldr	r3, [pc, #828]	@ (800db74 <tx_control+0x2964>)
 800d836:	4acc      	ldr	r2, [pc, #816]	@ (800db68 <tx_control+0x2958>)
 800d838:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 800d83a:	4bcf      	ldr	r3, [pc, #828]	@ (800db78 <tx_control+0x2968>)
 800d83c:	4acf      	ldr	r2, [pc, #828]	@ (800db7c <tx_control+0x296c>)
 800d83e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 800d840:	4bcf      	ldr	r3, [pc, #828]	@ (800db80 <tx_control+0x2970>)
 800d842:	2214      	movs	r2, #20
 800d844:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d846:	4bcf      	ldr	r3, [pc, #828]	@ (800db84 <tx_control+0x2974>)
 800d848:	2200      	movs	r2, #0
 800d84a:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800d84c:	4bce      	ldr	r3, [pc, #824]	@ (800db88 <tx_control+0x2978>)
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d852:	4bcc      	ldr	r3, [pc, #816]	@ (800db84 <tx_control+0x2974>)
 800d854:	2201      	movs	r2, #1
 800d856:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800d858:	4bcc      	ldr	r3, [pc, #816]	@ (800db8c <tx_control+0x297c>)
 800d85a:	2255      	movs	r2, #85	@ 0x55
 800d85c:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 800d85e:	4bcc      	ldr	r3, [pc, #816]	@ (800db90 <tx_control+0x2980>)
 800d860:	2200      	movs	r2, #0
 800d862:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 800d864:	4bcb      	ldr	r3, [pc, #812]	@ (800db94 <tx_control+0x2984>)
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	4bc9      	ldr	r3, [pc, #804]	@ (800db94 <tx_control+0x2984>)
 800d86e:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 800d870:	f000 fc94 	bl	800e19c <tx_control+0x2f8c>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 800d874:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 800d876:	4bc8      	ldr	r3, [pc, #800]	@ (800db98 <tx_control+0x2988>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <tx_control+0x2672>
 800d87e:	f000 fc86 	bl	800e18e <tx_control+0x2f7e>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 800d882:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 800d884:	4bc1      	ldr	r3, [pc, #772]	@ (800db8c <tx_control+0x297c>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <tx_control+0x2680>
 800d88c:	f000 fc82 	bl	800e194 <tx_control+0x2f84>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 800d890:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 800d892:	4bc2      	ldr	r3, [pc, #776]	@ (800db9c <tx_control+0x298c>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d151      	bne.n	800d93e <tx_control+0x272e>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 800d89a:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 800d89c:	4bc0      	ldr	r3, [pc, #768]	@ (800dba0 <tx_control+0x2990>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d100      	bne.n	800d8a6 <tx_control+0x2696>
 800d8a4:	e089      	b.n	800d9ba <tx_control+0x27aa>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 800d8a6:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 800d8a8:	4bbe      	ldr	r3, [pc, #760]	@ (800dba4 <tx_control+0x2994>)
 800d8aa:	2240      	movs	r2, #64	@ 0x40
 800d8ac:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 800d8ae:	4bbd      	ldr	r3, [pc, #756]	@ (800dba4 <tx_control+0x2994>)
 800d8b0:	2282      	movs	r2, #130	@ 0x82
 800d8b2:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d8b4:	4bbc      	ldr	r3, [pc, #752]	@ (800dba8 <tx_control+0x2998>)
 800d8b6:	4abd      	ldr	r2, [pc, #756]	@ (800dbac <tx_control+0x299c>)
 800d8b8:	0019      	movs	r1, r3
 800d8ba:	0010      	movs	r0, r2
 800d8bc:	f7f3 f8fe 	bl	8000abc <findLastValue>
 800d8c0:	0003      	movs	r3, r0
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	4bb7      	ldr	r3, [pc, #732]	@ (800dba4 <tx_control+0x2994>)
 800d8c6:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d8c8:	4bb9      	ldr	r3, [pc, #740]	@ (800dbb0 <tx_control+0x29a0>)
 800d8ca:	4ab8      	ldr	r2, [pc, #736]	@ (800dbac <tx_control+0x299c>)
 800d8cc:	0019      	movs	r1, r3
 800d8ce:	0010      	movs	r0, r2
 800d8d0:	f7f3 f8f4 	bl	8000abc <findLastValue>
 800d8d4:	0003      	movs	r3, r0
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	4bb2      	ldr	r3, [pc, #712]	@ (800dba4 <tx_control+0x2994>)
 800d8da:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 800d8dc:	4bb5      	ldr	r3, [pc, #724]	@ (800dbb4 <tx_control+0x29a4>)
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	0a1b      	lsrs	r3, r3, #8
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	4baf      	ldr	r3, [pc, #700]	@ (800dba4 <tx_control+0x2994>)
 800d8e8:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800d8ea:	4bb2      	ldr	r3, [pc, #712]	@ (800dbb4 <tx_control+0x29a4>)
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	4bac      	ldr	r3, [pc, #688]	@ (800dba4 <tx_control+0x2994>)
 800d8f2:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 800d8f4:	4bb0      	ldr	r3, [pc, #704]	@ (800dbb8 <tx_control+0x29a8>)
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	0a1b      	lsrs	r3, r3, #8
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4ba9      	ldr	r3, [pc, #676]	@ (800dba4 <tx_control+0x2994>)
 800d900:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800d902:	4bad      	ldr	r3, [pc, #692]	@ (800dbb8 <tx_control+0x29a8>)
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	b2da      	uxtb	r2, r3
 800d908:	4ba6      	ldr	r3, [pc, #664]	@ (800dba4 <tx_control+0x2994>)
 800d90a:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 800d90c:	4ba5      	ldr	r3, [pc, #660]	@ (800dba4 <tx_control+0x2994>)
 800d90e:	2201      	movs	r2, #1
 800d910:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 800d912:	4baa      	ldr	r3, [pc, #680]	@ (800dbbc <tx_control+0x29ac>)
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	4ba3      	ldr	r3, [pc, #652]	@ (800dba4 <tx_control+0x2994>)
 800d918:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 800d91a:	4ba9      	ldr	r3, [pc, #676]	@ (800dbc0 <tx_control+0x29b0>)
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	4ba1      	ldr	r3, [pc, #644]	@ (800dba4 <tx_control+0x2994>)
 800d920:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 800d922:	4ba8      	ldr	r3, [pc, #672]	@ (800dbc4 <tx_control+0x29b4>)
 800d924:	781a      	ldrb	r2, [r3, #0]
 800d926:	4b9f      	ldr	r3, [pc, #636]	@ (800dba4 <tx_control+0x2994>)
 800d928:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 800d92a:	4b9c      	ldr	r3, [pc, #624]	@ (800db9c <tx_control+0x298c>)
 800d92c:	2201      	movs	r2, #1
 800d92e:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 800d930:	4ba5      	ldr	r3, [pc, #660]	@ (800dbc8 <tx_control+0x29b8>)
 800d932:	2250      	movs	r2, #80	@ 0x50
 800d934:	5c9b      	ldrb	r3, [r3, r2]
 800d936:	001a      	movs	r2, r3
 800d938:	4ba4      	ldr	r3, [pc, #656]	@ (800dbcc <tx_control+0x29bc>)
 800d93a:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 800d93c:	e040      	b.n	800d9c0 <tx_control+0x27b0>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 800d93e:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 800d940:	4b97      	ldr	r3, [pc, #604]	@ (800dba0 <tx_control+0x2990>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d13a      	bne.n	800d9be <tx_control+0x27ae>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 800d948:	4ba0      	ldr	r3, [pc, #640]	@ (800dbcc <tx_control+0x29bc>)
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d003      	beq.n	800d958 <tx_control+0x2748>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 800d950:	4b92      	ldr	r3, [pc, #584]	@ (800db9c <tx_control+0x298c>)
 800d952:	2200      	movs	r2, #0
 800d954:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 800d956:	e033      	b.n	800d9c0 <tx_control+0x27b0>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 800d958:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 800d95a:	4b96      	ldr	r3, [pc, #600]	@ (800dbb4 <tx_control+0x29a4>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	0a1b      	lsrs	r3, r3, #8
 800d960:	b29b      	uxth	r3, r3
 800d962:	b2da      	uxtb	r2, r3
 800d964:	4b8f      	ldr	r3, [pc, #572]	@ (800dba4 <tx_control+0x2994>)
 800d966:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 800d968:	4b92      	ldr	r3, [pc, #584]	@ (800dbb4 <tx_control+0x29a4>)
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	4b8d      	ldr	r3, [pc, #564]	@ (800dba4 <tx_control+0x2994>)
 800d970:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 800d972:	4b91      	ldr	r3, [pc, #580]	@ (800dbb8 <tx_control+0x29a8>)
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	0a1b      	lsrs	r3, r3, #8
 800d978:	b29b      	uxth	r3, r3
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	4b89      	ldr	r3, [pc, #548]	@ (800dba4 <tx_control+0x2994>)
 800d97e:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 800d980:	4b8d      	ldr	r3, [pc, #564]	@ (800dbb8 <tx_control+0x29a8>)
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	b2da      	uxtb	r2, r3
 800d986:	4b87      	ldr	r3, [pc, #540]	@ (800dba4 <tx_control+0x2994>)
 800d988:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 800d98a:	4b91      	ldr	r3, [pc, #580]	@ (800dbd0 <tx_control+0x29c0>)
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	4b85      	ldr	r3, [pc, #532]	@ (800dba4 <tx_control+0x2994>)
 800d990:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 800d992:	4b90      	ldr	r3, [pc, #576]	@ (800dbd4 <tx_control+0x29c4>)
 800d994:	781a      	ldrb	r2, [r3, #0]
 800d996:	4b83      	ldr	r3, [pc, #524]	@ (800dba4 <tx_control+0x2994>)
 800d998:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 800d99a:	4b80      	ldr	r3, [pc, #512]	@ (800db9c <tx_control+0x298c>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 800d9a0:	4b73      	ldr	r3, [pc, #460]	@ (800db70 <tx_control+0x2960>)
 800d9a2:	4a8d      	ldr	r2, [pc, #564]	@ (800dbd8 <tx_control+0x29c8>)
 800d9a4:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 800d9a6:	4b73      	ldr	r3, [pc, #460]	@ (800db74 <tx_control+0x2964>)
 800d9a8:	4a8b      	ldr	r2, [pc, #556]	@ (800dbd8 <tx_control+0x29c8>)
 800d9aa:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 800d9ac:	4b72      	ldr	r3, [pc, #456]	@ (800db78 <tx_control+0x2968>)
 800d9ae:	4a8b      	ldr	r2, [pc, #556]	@ (800dbdc <tx_control+0x29cc>)
 800d9b0:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 800d9b2:	4b73      	ldr	r3, [pc, #460]	@ (800db80 <tx_control+0x2970>)
 800d9b4:	2212      	movs	r2, #18
 800d9b6:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 800d9b8:	e1d2      	b.n	800dd60 <tx_control+0x2b50>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	e000      	b.n	800d9c0 <tx_control+0x27b0>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 800d9be:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 800d9c0:	4b76      	ldr	r3, [pc, #472]	@ (800db9c <tx_control+0x298c>)
 800d9c2:	785b      	ldrb	r3, [r3, #1]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d14b      	bne.n	800da60 <tx_control+0x2850>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 800d9c8:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 800d9ca:	4b85      	ldr	r3, [pc, #532]	@ (800dbe0 <tx_control+0x29d0>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d100      	bne.n	800d9d4 <tx_control+0x27c4>
 800d9d2:	e07b      	b.n	800dacc <tx_control+0x28bc>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 800d9d4:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 800d9d6:	4b83      	ldr	r3, [pc, #524]	@ (800dbe4 <tx_control+0x29d4>)
 800d9d8:	2240      	movs	r2, #64	@ 0x40
 800d9da:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 800d9dc:	4b81      	ldr	r3, [pc, #516]	@ (800dbe4 <tx_control+0x29d4>)
 800d9de:	2282      	movs	r2, #130	@ 0x82
 800d9e0:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800d9e2:	4b71      	ldr	r3, [pc, #452]	@ (800dba8 <tx_control+0x2998>)
 800d9e4:	4a71      	ldr	r2, [pc, #452]	@ (800dbac <tx_control+0x299c>)
 800d9e6:	0019      	movs	r1, r3
 800d9e8:	0010      	movs	r0, r2
 800d9ea:	f7f3 f867 	bl	8000abc <findLastValue>
 800d9ee:	0003      	movs	r3, r0
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	4b7c      	ldr	r3, [pc, #496]	@ (800dbe4 <tx_control+0x29d4>)
 800d9f4:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800d9f6:	4b6e      	ldr	r3, [pc, #440]	@ (800dbb0 <tx_control+0x29a0>)
 800d9f8:	4a6c      	ldr	r2, [pc, #432]	@ (800dbac <tx_control+0x299c>)
 800d9fa:	0019      	movs	r1, r3
 800d9fc:	0010      	movs	r0, r2
 800d9fe:	f7f3 f85d 	bl	8000abc <findLastValue>
 800da02:	0003      	movs	r3, r0
 800da04:	b2da      	uxtb	r2, r3
 800da06:	4b77      	ldr	r3, [pc, #476]	@ (800dbe4 <tx_control+0x29d4>)
 800da08:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800da0a:	4b6a      	ldr	r3, [pc, #424]	@ (800dbb4 <tx_control+0x29a4>)
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	0a1b      	lsrs	r3, r3, #8
 800da10:	b29b      	uxth	r3, r3
 800da12:	b2da      	uxtb	r2, r3
 800da14:	4b73      	ldr	r3, [pc, #460]	@ (800dbe4 <tx_control+0x29d4>)
 800da16:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800da18:	4b66      	ldr	r3, [pc, #408]	@ (800dbb4 <tx_control+0x29a4>)
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	4b71      	ldr	r3, [pc, #452]	@ (800dbe4 <tx_control+0x29d4>)
 800da20:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 800da22:	4b65      	ldr	r3, [pc, #404]	@ (800dbb8 <tx_control+0x29a8>)
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	b29b      	uxth	r3, r3
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	4b6d      	ldr	r3, [pc, #436]	@ (800dbe4 <tx_control+0x29d4>)
 800da2e:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800da30:	4b61      	ldr	r3, [pc, #388]	@ (800dbb8 <tx_control+0x29a8>)
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	b2da      	uxtb	r2, r3
 800da36:	4b6b      	ldr	r3, [pc, #428]	@ (800dbe4 <tx_control+0x29d4>)
 800da38:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 800da3a:	4b6a      	ldr	r3, [pc, #424]	@ (800dbe4 <tx_control+0x29d4>)
 800da3c:	2202      	movs	r2, #2
 800da3e:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 800da40:	4b5e      	ldr	r3, [pc, #376]	@ (800dbbc <tx_control+0x29ac>)
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	4b67      	ldr	r3, [pc, #412]	@ (800dbe4 <tx_control+0x29d4>)
 800da46:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 800da48:	4b5d      	ldr	r3, [pc, #372]	@ (800dbc0 <tx_control+0x29b0>)
 800da4a:	781a      	ldrb	r2, [r3, #0]
 800da4c:	4b65      	ldr	r3, [pc, #404]	@ (800dbe4 <tx_control+0x29d4>)
 800da4e:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 800da50:	4b5c      	ldr	r3, [pc, #368]	@ (800dbc4 <tx_control+0x29b4>)
 800da52:	781a      	ldrb	r2, [r3, #0]
 800da54:	4b63      	ldr	r3, [pc, #396]	@ (800dbe4 <tx_control+0x29d4>)
 800da56:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 800da58:	4b50      	ldr	r3, [pc, #320]	@ (800db9c <tx_control+0x298c>)
 800da5a:	2201      	movs	r2, #1
 800da5c:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 800da5e:	e038      	b.n	800dad2 <tx_control+0x28c2>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 800da60:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 800da62:	4b5f      	ldr	r3, [pc, #380]	@ (800dbe0 <tx_control+0x29d0>)
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d132      	bne.n	800dad0 <tx_control+0x28c0>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 800da6a:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800da6c:	4b51      	ldr	r3, [pc, #324]	@ (800dbb4 <tx_control+0x29a4>)
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	0a1b      	lsrs	r3, r3, #8
 800da72:	b29b      	uxth	r3, r3
 800da74:	b2da      	uxtb	r2, r3
 800da76:	4b5b      	ldr	r3, [pc, #364]	@ (800dbe4 <tx_control+0x29d4>)
 800da78:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800da7a:	4b4e      	ldr	r3, [pc, #312]	@ (800dbb4 <tx_control+0x29a4>)
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	b2da      	uxtb	r2, r3
 800da80:	4b58      	ldr	r3, [pc, #352]	@ (800dbe4 <tx_control+0x29d4>)
 800da82:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800da84:	4b4c      	ldr	r3, [pc, #304]	@ (800dbb8 <tx_control+0x29a8>)
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	0a1b      	lsrs	r3, r3, #8
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	4b55      	ldr	r3, [pc, #340]	@ (800dbe4 <tx_control+0x29d4>)
 800da90:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800da92:	4b49      	ldr	r3, [pc, #292]	@ (800dbb8 <tx_control+0x29a8>)
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	b2da      	uxtb	r2, r3
 800da98:	4b52      	ldr	r3, [pc, #328]	@ (800dbe4 <tx_control+0x29d4>)
 800da9a:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 800da9c:	4b4c      	ldr	r3, [pc, #304]	@ (800dbd0 <tx_control+0x29c0>)
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	4b50      	ldr	r3, [pc, #320]	@ (800dbe4 <tx_control+0x29d4>)
 800daa2:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 800daa4:	4b4b      	ldr	r3, [pc, #300]	@ (800dbd4 <tx_control+0x29c4>)
 800daa6:	781a      	ldrb	r2, [r3, #0]
 800daa8:	4b4e      	ldr	r3, [pc, #312]	@ (800dbe4 <tx_control+0x29d4>)
 800daaa:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 800daac:	4b3b      	ldr	r3, [pc, #236]	@ (800db9c <tx_control+0x298c>)
 800daae:	2200      	movs	r2, #0
 800dab0:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 800dab2:	4b2f      	ldr	r3, [pc, #188]	@ (800db70 <tx_control+0x2960>)
 800dab4:	4a4b      	ldr	r2, [pc, #300]	@ (800dbe4 <tx_control+0x29d4>)
 800dab6:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 800dab8:	4b2e      	ldr	r3, [pc, #184]	@ (800db74 <tx_control+0x2964>)
 800daba:	4a4a      	ldr	r2, [pc, #296]	@ (800dbe4 <tx_control+0x29d4>)
 800dabc:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 800dabe:	4b2e      	ldr	r3, [pc, #184]	@ (800db78 <tx_control+0x2968>)
 800dac0:	4a49      	ldr	r2, [pc, #292]	@ (800dbe8 <tx_control+0x29d8>)
 800dac2:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800dac4:	4b2e      	ldr	r3, [pc, #184]	@ (800db80 <tx_control+0x2970>)
 800dac6:	2212      	movs	r2, #18
 800dac8:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 800daca:	e149      	b.n	800dd60 <tx_control+0x2b50>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 800dacc:	46c0      	nop			@ (mov r8, r8)
 800dace:	e000      	b.n	800dad2 <tx_control+0x28c2>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 800dad0:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 800dad2:	4b32      	ldr	r3, [pc, #200]	@ (800db9c <tx_control+0x298c>)
 800dad4:	789b      	ldrb	r3, [r3, #2]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d000      	beq.n	800dadc <tx_control+0x28cc>
 800dada:	e08b      	b.n	800dbf4 <tx_control+0x29e4>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 800dadc:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 800dade:	4b43      	ldr	r3, [pc, #268]	@ (800dbec <tx_control+0x29dc>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d000      	beq.n	800dae8 <tx_control+0x28d8>
 800dae6:	e0bb      	b.n	800dc60 <tx_control+0x2a50>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800dae8:	4b2f      	ldr	r3, [pc, #188]	@ (800dba8 <tx_control+0x2998>)
 800daea:	4a30      	ldr	r2, [pc, #192]	@ (800dbac <tx_control+0x299c>)
 800daec:	0019      	movs	r1, r3
 800daee:	0010      	movs	r0, r2
 800daf0:	f7f2 ffe4 	bl	8000abc <findLastValue>
 800daf4:	0003      	movs	r3, r0
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	4b3d      	ldr	r3, [pc, #244]	@ (800dbf0 <tx_control+0x29e0>)
 800dafa:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800dafc:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb0 <tx_control+0x29a0>)
 800dafe:	4a2b      	ldr	r2, [pc, #172]	@ (800dbac <tx_control+0x299c>)
 800db00:	0019      	movs	r1, r3
 800db02:	0010      	movs	r0, r2
 800db04:	f7f2 ffda 	bl	8000abc <findLastValue>
 800db08:	0003      	movs	r3, r0
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	4b38      	ldr	r3, [pc, #224]	@ (800dbf0 <tx_control+0x29e0>)
 800db0e:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800db10:	4b28      	ldr	r3, [pc, #160]	@ (800dbb4 <tx_control+0x29a4>)
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	0a1b      	lsrs	r3, r3, #8
 800db16:	b29b      	uxth	r3, r3
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	4b35      	ldr	r3, [pc, #212]	@ (800dbf0 <tx_control+0x29e0>)
 800db1c:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800db1e:	4b25      	ldr	r3, [pc, #148]	@ (800dbb4 <tx_control+0x29a4>)
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	b2da      	uxtb	r2, r3
 800db24:	4b32      	ldr	r3, [pc, #200]	@ (800dbf0 <tx_control+0x29e0>)
 800db26:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800db28:	4b23      	ldr	r3, [pc, #140]	@ (800dbb8 <tx_control+0x29a8>)
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	0a1b      	lsrs	r3, r3, #8
 800db2e:	b29b      	uxth	r3, r3
 800db30:	b2da      	uxtb	r2, r3
 800db32:	4b2f      	ldr	r3, [pc, #188]	@ (800dbf0 <tx_control+0x29e0>)
 800db34:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800db36:	4b20      	ldr	r3, [pc, #128]	@ (800dbb8 <tx_control+0x29a8>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	4b2c      	ldr	r3, [pc, #176]	@ (800dbf0 <tx_control+0x29e0>)
 800db3e:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 800db40:	4b2b      	ldr	r3, [pc, #172]	@ (800dbf0 <tx_control+0x29e0>)
 800db42:	2203      	movs	r2, #3
 800db44:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 800db46:	4b1d      	ldr	r3, [pc, #116]	@ (800dbbc <tx_control+0x29ac>)
 800db48:	781a      	ldrb	r2, [r3, #0]
 800db4a:	4b29      	ldr	r3, [pc, #164]	@ (800dbf0 <tx_control+0x29e0>)
 800db4c:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 800db4e:	4b1c      	ldr	r3, [pc, #112]	@ (800dbc0 <tx_control+0x29b0>)
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	4b27      	ldr	r3, [pc, #156]	@ (800dbf0 <tx_control+0x29e0>)
 800db54:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 800db56:	4b1b      	ldr	r3, [pc, #108]	@ (800dbc4 <tx_control+0x29b4>)
 800db58:	781a      	ldrb	r2, [r3, #0]
 800db5a:	4b25      	ldr	r3, [pc, #148]	@ (800dbf0 <tx_control+0x29e0>)
 800db5c:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 800db5e:	4b0f      	ldr	r3, [pc, #60]	@ (800db9c <tx_control+0x298c>)
 800db60:	2201      	movs	r2, #1
 800db62:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 800db64:	e07f      	b.n	800dc66 <tx_control+0x2a56>
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	20000f78 	.word	0x20000f78
 800db6c:	20000b76 	.word	0x20000b76
 800db70:	20000e34 	.word	0x20000e34
 800db74:	20000e2c 	.word	0x20000e2c
 800db78:	20000e30 	.word	0x20000e30
 800db7c:	20000f8c 	.word	0x20000f8c
 800db80:	20000e50 	.word	0x20000e50
 800db84:	20000e3c 	.word	0x20000e3c
 800db88:	20000e54 	.word	0x20000e54
 800db8c:	20000e39 	.word	0x20000e39
 800db90:	20000e44 	.word	0x20000e44
 800db94:	20000f98 	.word	0x20000f98
 800db98:	20000f9b 	.word	0x20000f9b
 800db9c:	20000f5c 	.word	0x20000f5c
 800dba0:	20000c5c 	.word	0x20000c5c
 800dba4:	20000f0c 	.word	0x20000f0c
 800dba8:	2000037f 	.word	0x2000037f
 800dbac:	0803f000 	.word	0x0803f000
 800dbb0:	20000380 	.word	0x20000380
 800dbb4:	20000dd0 	.word	0x20000dd0
 800dbb8:	20000dd2 	.word	0x20000dd2
 800dbbc:	20000bd0 	.word	0x20000bd0
 800dbc0:	20000bd1 	.word	0x20000bd1
 800dbc4:	20000bee 	.word	0x20000bee
 800dbc8:	200000bc 	.word	0x200000bc
 800dbcc:	20000ef8 	.word	0x20000ef8
 800dbd0:	20000bd2 	.word	0x20000bd2
 800dbd4:	20000bd3 	.word	0x20000bd3
 800dbd8:	20000f48 	.word	0x20000f48
 800dbdc:	20000f59 	.word	0x20000f59
 800dbe0:	20000bc4 	.word	0x20000bc4
 800dbe4:	20000f20 	.word	0x20000f20
 800dbe8:	20000f31 	.word	0x20000f31
 800dbec:	20000bb8 	.word	0x20000bb8
 800dbf0:	20000f34 	.word	0x20000f34
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 800dbf4:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 800dbf6:	4bcd      	ldr	r3, [pc, #820]	@ (800df2c <tx_control+0x2d1c>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	d032      	beq.n	800dc64 <tx_control+0x2a54>
			goto power_event_WF;
		}
desh_event_end_WF:
 800dbfe:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800dc00:	4bcb      	ldr	r3, [pc, #812]	@ (800df30 <tx_control+0x2d20>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	0a1b      	lsrs	r3, r3, #8
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	4bca      	ldr	r3, [pc, #808]	@ (800df34 <tx_control+0x2d24>)
 800dc0c:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800dc0e:	4bc8      	ldr	r3, [pc, #800]	@ (800df30 <tx_control+0x2d20>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	4bc7      	ldr	r3, [pc, #796]	@ (800df34 <tx_control+0x2d24>)
 800dc16:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800dc18:	4bc7      	ldr	r3, [pc, #796]	@ (800df38 <tx_control+0x2d28>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	0a1b      	lsrs	r3, r3, #8
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	4bc4      	ldr	r3, [pc, #784]	@ (800df34 <tx_control+0x2d24>)
 800dc24:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800dc26:	4bc4      	ldr	r3, [pc, #784]	@ (800df38 <tx_control+0x2d28>)
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	4bc1      	ldr	r3, [pc, #772]	@ (800df34 <tx_control+0x2d24>)
 800dc2e:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 800dc30:	4bc2      	ldr	r3, [pc, #776]	@ (800df3c <tx_control+0x2d2c>)
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	4bbf      	ldr	r3, [pc, #764]	@ (800df34 <tx_control+0x2d24>)
 800dc36:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 800dc38:	4bc1      	ldr	r3, [pc, #772]	@ (800df40 <tx_control+0x2d30>)
 800dc3a:	781a      	ldrb	r2, [r3, #0]
 800dc3c:	4bbd      	ldr	r3, [pc, #756]	@ (800df34 <tx_control+0x2d24>)
 800dc3e:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 800dc40:	4bc0      	ldr	r3, [pc, #768]	@ (800df44 <tx_control+0x2d34>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 800dc46:	4bc0      	ldr	r3, [pc, #768]	@ (800df48 <tx_control+0x2d38>)
 800dc48:	4aba      	ldr	r2, [pc, #744]	@ (800df34 <tx_control+0x2d24>)
 800dc4a:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 800dc4c:	4bbf      	ldr	r3, [pc, #764]	@ (800df4c <tx_control+0x2d3c>)
 800dc4e:	4ab9      	ldr	r2, [pc, #740]	@ (800df34 <tx_control+0x2d24>)
 800dc50:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 800dc52:	4bbf      	ldr	r3, [pc, #764]	@ (800df50 <tx_control+0x2d40>)
 800dc54:	4abf      	ldr	r2, [pc, #764]	@ (800df54 <tx_control+0x2d44>)
 800dc56:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800dc58:	4bbf      	ldr	r3, [pc, #764]	@ (800df58 <tx_control+0x2d48>)
 800dc5a:	2212      	movs	r2, #18
 800dc5c:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 800dc5e:	e07f      	b.n	800dd60 <tx_control+0x2b50>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 800dc60:	46c0      	nop			@ (mov r8, r8)
 800dc62:	e000      	b.n	800dc66 <tx_control+0x2a56>
			goto power_event_WF;
 800dc64:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 800dc66:	4bb7      	ldr	r3, [pc, #732]	@ (800df44 <tx_control+0x2d34>)
 800dc68:	78db      	ldrb	r3, [r3, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d071      	beq.n	800dd52 <tx_control+0x2b42>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 800dc6e:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 800dc70:	4bba      	ldr	r3, [pc, #744]	@ (800df5c <tx_control+0x2d4c>)
 800dc72:	2240      	movs	r2, #64	@ 0x40
 800dc74:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 800dc76:	4bb9      	ldr	r3, [pc, #740]	@ (800df5c <tx_control+0x2d4c>)
 800dc78:	2282      	movs	r2, #130	@ 0x82
 800dc7a:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);
 800dc7c:	4bb8      	ldr	r3, [pc, #736]	@ (800df60 <tx_control+0x2d50>)
 800dc7e:	4ab9      	ldr	r2, [pc, #740]	@ (800df64 <tx_control+0x2d54>)
 800dc80:	0019      	movs	r1, r3
 800dc82:	0010      	movs	r0, r2
 800dc84:	f7f2 ff1a 	bl	8000abc <findLastValue>
 800dc88:	0003      	movs	r3, r0
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	4bb3      	ldr	r3, [pc, #716]	@ (800df5c <tx_control+0x2d4c>)
 800dc8e:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800dc90:	4bb5      	ldr	r3, [pc, #724]	@ (800df68 <tx_control+0x2d58>)
 800dc92:	4ab4      	ldr	r2, [pc, #720]	@ (800df64 <tx_control+0x2d54>)
 800dc94:	0019      	movs	r1, r3
 800dc96:	0010      	movs	r0, r2
 800dc98:	f7f2 ff10 	bl	8000abc <findLastValue>
 800dc9c:	0003      	movs	r3, r0
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	4bae      	ldr	r3, [pc, #696]	@ (800df5c <tx_control+0x2d4c>)
 800dca2:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800dca4:	4ba2      	ldr	r3, [pc, #648]	@ (800df30 <tx_control+0x2d20>)
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	0a1b      	lsrs	r3, r3, #8
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	4bab      	ldr	r3, [pc, #684]	@ (800df5c <tx_control+0x2d4c>)
 800dcb0:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800dcb2:	4b9f      	ldr	r3, [pc, #636]	@ (800df30 <tx_control+0x2d20>)
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	4ba8      	ldr	r3, [pc, #672]	@ (800df5c <tx_control+0x2d4c>)
 800dcba:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800dcbc:	4b9e      	ldr	r3, [pc, #632]	@ (800df38 <tx_control+0x2d28>)
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	0a1b      	lsrs	r3, r3, #8
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	4ba5      	ldr	r3, [pc, #660]	@ (800df5c <tx_control+0x2d4c>)
 800dcc8:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800dcca:	4b9b      	ldr	r3, [pc, #620]	@ (800df38 <tx_control+0x2d28>)
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	4ba2      	ldr	r3, [pc, #648]	@ (800df5c <tx_control+0x2d4c>)
 800dcd2:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 800dcd4:	4ba1      	ldr	r3, [pc, #644]	@ (800df5c <tx_control+0x2d4c>)
 800dcd6:	2204      	movs	r2, #4
 800dcd8:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 800dcda:	4ba4      	ldr	r3, [pc, #656]	@ (800df6c <tx_control+0x2d5c>)
 800dcdc:	781a      	ldrb	r2, [r3, #0]
 800dcde:	4b9f      	ldr	r3, [pc, #636]	@ (800df5c <tx_control+0x2d4c>)
 800dce0:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 800dce2:	4ba3      	ldr	r3, [pc, #652]	@ (800df70 <tx_control+0x2d60>)
 800dce4:	781a      	ldrb	r2, [r3, #0]
 800dce6:	4b9d      	ldr	r3, [pc, #628]	@ (800df5c <tx_control+0x2d4c>)
 800dce8:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 800dcea:	4ba2      	ldr	r3, [pc, #648]	@ (800df74 <tx_control+0x2d64>)
 800dcec:	781a      	ldrb	r2, [r3, #0]
 800dcee:	4b9b      	ldr	r3, [pc, #620]	@ (800df5c <tx_control+0x2d4c>)
 800dcf0:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800dcf2:	4b8f      	ldr	r3, [pc, #572]	@ (800df30 <tx_control+0x2d20>)
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	4b97      	ldr	r3, [pc, #604]	@ (800df5c <tx_control+0x2d4c>)
 800dcfe:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800dd00:	4b8b      	ldr	r3, [pc, #556]	@ (800df30 <tx_control+0x2d20>)
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	4b95      	ldr	r3, [pc, #596]	@ (800df5c <tx_control+0x2d4c>)
 800dd08:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800dd0a:	4b8b      	ldr	r3, [pc, #556]	@ (800df38 <tx_control+0x2d28>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	0a1b      	lsrs	r3, r3, #8
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	4b91      	ldr	r3, [pc, #580]	@ (800df5c <tx_control+0x2d4c>)
 800dd16:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800dd18:	4b87      	ldr	r3, [pc, #540]	@ (800df38 <tx_control+0x2d28>)
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	4b8f      	ldr	r3, [pc, #572]	@ (800df5c <tx_control+0x2d4c>)
 800dd20:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 800dd22:	4b86      	ldr	r3, [pc, #536]	@ (800df3c <tx_control+0x2d2c>)
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	4b8d      	ldr	r3, [pc, #564]	@ (800df5c <tx_control+0x2d4c>)
 800dd28:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 800dd2a:	4b85      	ldr	r3, [pc, #532]	@ (800df40 <tx_control+0x2d30>)
 800dd2c:	781a      	ldrb	r2, [r3, #0]
 800dd2e:	4b8b      	ldr	r3, [pc, #556]	@ (800df5c <tx_control+0x2d4c>)
 800dd30:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 800dd32:	4b84      	ldr	r3, [pc, #528]	@ (800df44 <tx_control+0x2d34>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 800dd38:	4b83      	ldr	r3, [pc, #524]	@ (800df48 <tx_control+0x2d38>)
 800dd3a:	4a88      	ldr	r2, [pc, #544]	@ (800df5c <tx_control+0x2d4c>)
 800dd3c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 800dd3e:	4b83      	ldr	r3, [pc, #524]	@ (800df4c <tx_control+0x2d3c>)
 800dd40:	4a86      	ldr	r2, [pc, #536]	@ (800df5c <tx_control+0x2d4c>)
 800dd42:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 800dd44:	4b82      	ldr	r3, [pc, #520]	@ (800df50 <tx_control+0x2d40>)
 800dd46:	4a8c      	ldr	r2, [pc, #560]	@ (800df78 <tx_control+0x2d68>)
 800dd48:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800dd4a:	4b83      	ldr	r3, [pc, #524]	@ (800df58 <tx_control+0x2d48>)
 800dd4c:	2212      	movs	r2, #18
 800dd4e:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 800dd50:	e006      	b.n	800dd60 <tx_control+0x2b50>
		goto alarm_event_WF;// jra		alarm_event_WF
 800dd52:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 800dd54:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 800dd56:	4b89      	ldr	r3, [pc, #548]	@ (800df7c <tx_control+0x2d6c>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d04f      	beq.n	800ddfe <tx_control+0x2bee>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 800dd5e:	e21d      	b.n	800e19c <tx_control+0x2f8c>
		bufferWifiTx[0] = 0x40;
 800dd60:	4b87      	ldr	r3, [pc, #540]	@ (800df80 <tx_control+0x2d70>)
 800dd62:	2240      	movs	r2, #64	@ 0x40
 800dd64:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 800dd66:	4b86      	ldr	r3, [pc, #536]	@ (800df80 <tx_control+0x2d70>)
 800dd68:	2282      	movs	r2, #130	@ 0x82
 800dd6a:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800dd6c:	4b84      	ldr	r3, [pc, #528]	@ (800df80 <tx_control+0x2d70>)
 800dd6e:	2203      	movs	r2, #3
 800dd70:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
 800dd72:	4b7b      	ldr	r3, [pc, #492]	@ (800df60 <tx_control+0x2d50>)
 800dd74:	4a7b      	ldr	r2, [pc, #492]	@ (800df64 <tx_control+0x2d54>)
 800dd76:	0019      	movs	r1, r3
 800dd78:	0010      	movs	r0, r2
 800dd7a:	f7f2 fe9f 	bl	8000abc <findLastValue>
 800dd7e:	0003      	movs	r3, r0
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	4b7f      	ldr	r3, [pc, #508]	@ (800df80 <tx_control+0x2d70>)
 800dd84:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);;
 800dd86:	4b78      	ldr	r3, [pc, #480]	@ (800df68 <tx_control+0x2d58>)
 800dd88:	4a76      	ldr	r2, [pc, #472]	@ (800df64 <tx_control+0x2d54>)
 800dd8a:	0019      	movs	r1, r3
 800dd8c:	0010      	movs	r0, r2
 800dd8e:	f7f2 fe95 	bl	8000abc <findLastValue>
 800dd92:	0003      	movs	r3, r0
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	4b7a      	ldr	r3, [pc, #488]	@ (800df80 <tx_control+0x2d70>)
 800dd98:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 800dd9a:	4b7a      	ldr	r3, [pc, #488]	@ (800df84 <tx_control+0x2d74>)
 800dd9c:	220e      	movs	r2, #14
 800dd9e:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 800dda0:	4b69      	ldr	r3, [pc, #420]	@ (800df48 <tx_control+0x2d38>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4a78      	ldr	r2, [pc, #480]	@ (800df88 <tx_control+0x2d78>)
 800dda8:	0011      	movs	r1, r2
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f7f7 f856 	bl	8004e5c <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 800ddb0:	4b73      	ldr	r3, [pc, #460]	@ (800df80 <tx_control+0x2d70>)
 800ddb2:	7c9a      	ldrb	r2, [r3, #18]
 800ddb4:	4b75      	ldr	r3, [pc, #468]	@ (800df8c <tx_control+0x2d7c>)
 800ddb6:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 800ddb8:	4b71      	ldr	r3, [pc, #452]	@ (800df80 <tx_control+0x2d70>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 800ddbe:	4b73      	ldr	r3, [pc, #460]	@ (800df8c <tx_control+0x2d7c>)
 800ddc0:	781a      	ldrb	r2, [r3, #0]
 800ddc2:	4b6f      	ldr	r3, [pc, #444]	@ (800df80 <tx_control+0x2d70>)
 800ddc4:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 800ddc6:	4b60      	ldr	r3, [pc, #384]	@ (800df48 <tx_control+0x2d38>)
 800ddc8:	4a6d      	ldr	r2, [pc, #436]	@ (800df80 <tx_control+0x2d70>)
 800ddca:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 800ddcc:	4b5f      	ldr	r3, [pc, #380]	@ (800df4c <tx_control+0x2d3c>)
 800ddce:	4a6c      	ldr	r2, [pc, #432]	@ (800df80 <tx_control+0x2d70>)
 800ddd0:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 800ddd2:	4b5f      	ldr	r3, [pc, #380]	@ (800df50 <tx_control+0x2d40>)
 800ddd4:	4a6e      	ldr	r2, [pc, #440]	@ (800df90 <tx_control+0x2d80>)
 800ddd6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 800ddd8:	4b5f      	ldr	r3, [pc, #380]	@ (800df58 <tx_control+0x2d48>)
 800ddda:	2214      	movs	r2, #20
 800dddc:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ddde:	4b6d      	ldr	r3, [pc, #436]	@ (800df94 <tx_control+0x2d84>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800dde4:	4b6c      	ldr	r3, [pc, #432]	@ (800df98 <tx_control+0x2d88>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800ddea:	4b6a      	ldr	r3, [pc, #424]	@ (800df94 <tx_control+0x2d84>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ddf0:	4b62      	ldr	r3, [pc, #392]	@ (800df7c <tx_control+0x2d6c>)
 800ddf2:	2255      	movs	r2, #85	@ 0x55
 800ddf4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 800ddf6:	4b69      	ldr	r3, [pc, #420]	@ (800df9c <tx_control+0x2d8c>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800ddfc:	e1ce      	b.n	800e19c <tx_control+0x2f8c>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 800ddfe:	4b68      	ldr	r3, [pc, #416]	@ (800dfa0 <tx_control+0x2d90>)
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d000      	beq.n	800de08 <tx_control+0x2bf8>
 800de06:	e1c8      	b.n	800e19a <tx_control+0x2f8a>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 800de08:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 800de0a:	4b66      	ldr	r3, [pc, #408]	@ (800dfa4 <tx_control+0x2d94>)
 800de0c:	2251      	movs	r2, #81	@ 0x51
 800de0e:	5c9a      	ldrb	r2, [r3, r2]
 800de10:	4b5c      	ldr	r3, [pc, #368]	@ (800df84 <tx_control+0x2d74>)
 800de12:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 800de14:	4b5b      	ldr	r3, [pc, #364]	@ (800df84 <tx_control+0x2d74>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	001a      	movs	r2, r3
 800de1a:	233c      	movs	r3, #60	@ 0x3c
 800de1c:	4353      	muls	r3, r2
 800de1e:	b29a      	uxth	r2, r3
 800de20:	4b5f      	ldr	r3, [pc, #380]	@ (800dfa0 <tx_control+0x2d90>)
 800de22:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 800de24:	4b60      	ldr	r3, [pc, #384]	@ (800dfa8 <tx_control+0x2d98>)
 800de26:	781a      	ldrb	r2, [r3, #0]
 800de28:	4b60      	ldr	r3, [pc, #384]	@ (800dfac <tx_control+0x2d9c>)
 800de2a:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 800de2c:	4b5e      	ldr	r3, [pc, #376]	@ (800dfa8 <tx_control+0x2d98>)
 800de2e:	785a      	ldrb	r2, [r3, #1]
 800de30:	4b5e      	ldr	r3, [pc, #376]	@ (800dfac <tx_control+0x2d9c>)
 800de32:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 800de34:	4b5d      	ldr	r3, [pc, #372]	@ (800dfac <tx_control+0x2d9c>)
 800de36:	2200      	movs	r2, #0
 800de38:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 800de3a:	4b5c      	ldr	r3, [pc, #368]	@ (800dfac <tx_control+0x2d9c>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 800de40:	4b5a      	ldr	r3, [pc, #360]	@ (800dfac <tx_control+0x2d9c>)
 800de42:	2200      	movs	r2, #0
 800de44:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 800de46:	4b59      	ldr	r3, [pc, #356]	@ (800dfac <tx_control+0x2d9c>)
 800de48:	2200      	movs	r2, #0
 800de4a:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 800de4c:	4b57      	ldr	r3, [pc, #348]	@ (800dfac <tx_control+0x2d9c>)
 800de4e:	2200      	movs	r2, #0
 800de50:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 800de52:	4b56      	ldr	r3, [pc, #344]	@ (800dfac <tx_control+0x2d9c>)
 800de54:	2200      	movs	r2, #0
 800de56:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 800de58:	4b55      	ldr	r3, [pc, #340]	@ (800dfb0 <tx_control+0x2da0>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2201      	movs	r2, #1
 800de5e:	4053      	eors	r3, r2
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d103      	bne.n	800de6e <tx_control+0x2c5e>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 800de66:	4b51      	ldr	r3, [pc, #324]	@ (800dfac <tx_control+0x2d9c>)
 800de68:	2201      	movs	r2, #1
 800de6a:	709a      	strb	r2, [r3, #2]
 800de6c:	e000      	b.n	800de70 <tx_control+0x2c60>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 800de6e:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 800de70:	4b4f      	ldr	r3, [pc, #316]	@ (800dfb0 <tx_control+0x2da0>)
 800de72:	785b      	ldrb	r3, [r3, #1]
 800de74:	2201      	movs	r2, #1
 800de76:	4053      	eors	r3, r2
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d103      	bne.n	800de86 <tx_control+0x2c76>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 800de7e:	4b4b      	ldr	r3, [pc, #300]	@ (800dfac <tx_control+0x2d9c>)
 800de80:	2201      	movs	r2, #1
 800de82:	70da      	strb	r2, [r3, #3]
 800de84:	e000      	b.n	800de88 <tx_control+0x2c78>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 800de86:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 800de88:	4b49      	ldr	r3, [pc, #292]	@ (800dfb0 <tx_control+0x2da0>)
 800de8a:	789b      	ldrb	r3, [r3, #2]
 800de8c:	2201      	movs	r2, #1
 800de8e:	4053      	eors	r3, r2
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d103      	bne.n	800de9e <tx_control+0x2c8e>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 800de96:	4b45      	ldr	r3, [pc, #276]	@ (800dfac <tx_control+0x2d9c>)
 800de98:	2201      	movs	r2, #1
 800de9a:	711a      	strb	r2, [r3, #4]
 800de9c:	e000      	b.n	800dea0 <tx_control+0x2c90>
			goto noFlag_ahorro2_TD;
 800de9e:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 800dea0:	4b44      	ldr	r3, [pc, #272]	@ (800dfb4 <tx_control+0x2da4>)
 800dea2:	78db      	ldrb	r3, [r3, #3]
 800dea4:	2201      	movs	r2, #1
 800dea6:	4053      	eors	r3, r2
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <tx_control+0x2ca6>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 800deae:	4b3f      	ldr	r3, [pc, #252]	@ (800dfac <tx_control+0x2d9c>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	715a      	strb	r2, [r3, #5]
 800deb4:	e000      	b.n	800deb8 <tx_control+0x2ca8>
			goto noFlag_nocturno_TD;
 800deb6:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 800deb8:	4b3f      	ldr	r3, [pc, #252]	@ (800dfb8 <tx_control+0x2da8>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2201      	movs	r2, #1
 800debe:	4053      	eors	r3, r2
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d103      	bne.n	800dece <tx_control+0x2cbe>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 800dec6:	4b39      	ldr	r3, [pc, #228]	@ (800dfac <tx_control+0x2d9c>)
 800dec8:	2201      	movs	r2, #1
 800deca:	719a      	strb	r2, [r3, #6]
 800decc:	e000      	b.n	800ded0 <tx_control+0x2cc0>
			goto noFlag_vent_TD;
 800dece:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 800ded0:	4b35      	ldr	r3, [pc, #212]	@ (800dfa8 <tx_control+0x2d98>)
 800ded2:	789b      	ldrb	r3, [r3, #2]
 800ded4:	2201      	movs	r2, #1
 800ded6:	4053      	eors	r3, r2
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d103      	bne.n	800dee6 <tx_control+0x2cd6>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 800dede:	4b33      	ldr	r3, [pc, #204]	@ (800dfac <tx_control+0x2d9c>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	71da      	strb	r2, [r3, #7]
 800dee4:	e000      	b.n	800dee8 <tx_control+0x2cd8>
			goto noFlag_Aux_TD;
 800dee6:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 800dee8:	2313      	movs	r3, #19
 800deea:	18fb      	adds	r3, r7, r3
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e00d      	b.n	800df0e <tx_control+0x2cfe>
			alarmas2_TD[k] = (trefst2[k]);
 800def2:	2013      	movs	r0, #19
 800def4:	183b      	adds	r3, r7, r0
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	183b      	adds	r3, r7, r0
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	492f      	ldr	r1, [pc, #188]	@ (800dfbc <tx_control+0x2dac>)
 800defe:	5c89      	ldrb	r1, [r1, r2]
 800df00:	4a2f      	ldr	r2, [pc, #188]	@ (800dfc0 <tx_control+0x2db0>)
 800df02:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 800df04:	183b      	adds	r3, r7, r0
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	183b      	adds	r3, r7, r0
 800df0a:	3201      	adds	r2, #1
 800df0c:	701a      	strb	r2, [r3, #0]
 800df0e:	2313      	movs	r3, #19
 800df10:	18fb      	adds	r3, r7, r3
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b07      	cmp	r3, #7
 800df16:	d9ec      	bls.n	800def2 <tx_control+0x2ce2>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 800df18:	4b29      	ldr	r3, [pc, #164]	@ (800dfc0 <tx_control+0x2db0>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 800df1e:	4b29      	ldr	r3, [pc, #164]	@ (800dfc4 <tx_control+0x2db4>)
 800df20:	2200      	movs	r2, #0
 800df22:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e062      	b.n	800dff0 <tx_control+0x2de0>
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	20000bb8 	.word	0x20000bb8
 800df30:	20000dd0 	.word	0x20000dd0
 800df34:	20000f34 	.word	0x20000f34
 800df38:	20000dd2 	.word	0x20000dd2
 800df3c:	20000bd2 	.word	0x20000bd2
 800df40:	20000bd3 	.word	0x20000bd3
 800df44:	20000f5c 	.word	0x20000f5c
 800df48:	20000e34 	.word	0x20000e34
 800df4c:	20000e2c 	.word	0x20000e2c
 800df50:	20000e30 	.word	0x20000e30
 800df54:	20000f45 	.word	0x20000f45
 800df58:	20000e50 	.word	0x20000e50
 800df5c:	20000f48 	.word	0x20000f48
 800df60:	2000037f 	.word	0x2000037f
 800df64:	0803f000 	.word	0x0803f000
 800df68:	20000380 	.word	0x20000380
 800df6c:	20000bd0 	.word	0x20000bd0
 800df70:	20000bd1 	.word	0x20000bd1
 800df74:	20000bee 	.word	0x20000bee
 800df78:	20000f59 	.word	0x20000f59
 800df7c:	20000e39 	.word	0x20000e39
 800df80:	20000f78 	.word	0x20000f78
 800df84:	20000b77 	.word	0x20000b77
 800df88:	20000f7d 	.word	0x20000f7d
 800df8c:	20000b76 	.word	0x20000b76
 800df90:	20000f8c 	.word	0x20000f8c
 800df94:	20000e3c 	.word	0x20000e3c
 800df98:	20000e54 	.word	0x20000e54
 800df9c:	20000e44 	.word	0x20000e44
 800dfa0:	20000f6e 	.word	0x20000f6e
 800dfa4:	200000bc 	.word	0x200000bc
 800dfa8:	20000bc4 	.word	0x20000bc4
 800dfac:	20000de0 	.word	0x20000de0
 800dfb0:	20000c5c 	.word	0x20000c5c
 800dfb4:	20000b98 	.word	0x20000b98
 800dfb8:	20000c00 	.word	0x20000c00
 800dfbc:	20000ba0 	.word	0x20000ba0
 800dfc0:	20000dec 	.word	0x20000dec
 800dfc4:	20000df4 	.word	0x20000df4
			alarmas_TD |= (trefst[k] << k);
 800dfc8:	4a78      	ldr	r2, [pc, #480]	@ (800e1ac <tx_control+0x2f9c>)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	18d3      	adds	r3, r2, r3
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	001a      	movs	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	409a      	lsls	r2, r3
 800dfd6:	0013      	movs	r3, r2
 800dfd8:	b25a      	sxtb	r2, r3
 800dfda:	4b75      	ldr	r3, [pc, #468]	@ (800e1b0 <tx_control+0x2fa0>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b25b      	sxtb	r3, r3
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	b25b      	sxtb	r3, r3
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	4b72      	ldr	r3, [pc, #456]	@ (800e1b0 <tx_control+0x2fa0>)
 800dfe8:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3301      	adds	r3, #1
 800dfee:	60fb      	str	r3, [r7, #12]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b07      	cmp	r3, #7
 800dff4:	dde8      	ble.n	800dfc8 <tx_control+0x2db8>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 800dff6:	4b6f      	ldr	r3, [pc, #444]	@ (800e1b4 <tx_control+0x2fa4>)
 800dff8:	2240      	movs	r2, #64	@ 0x40
 800dffa:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 800dffc:	4b6d      	ldr	r3, [pc, #436]	@ (800e1b4 <tx_control+0x2fa4>)
 800dffe:	2281      	movs	r2, #129	@ 0x81
 800e000:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 800e002:	4b6c      	ldr	r3, [pc, #432]	@ (800e1b4 <tx_control+0x2fa4>)
 800e004:	2207      	movs	r2, #7
 800e006:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
 800e008:	4b6b      	ldr	r3, [pc, #428]	@ (800e1b8 <tx_control+0x2fa8>)
 800e00a:	4a6c      	ldr	r2, [pc, #432]	@ (800e1bc <tx_control+0x2fac>)
 800e00c:	0019      	movs	r1, r3
 800e00e:	0010      	movs	r0, r2
 800e010:	f7f2 fd54 	bl	8000abc <findLastValue>
 800e014:	0003      	movs	r3, r0
 800e016:	b2da      	uxtb	r2, r3
 800e018:	4b66      	ldr	r3, [pc, #408]	@ (800e1b4 <tx_control+0x2fa4>)
 800e01a:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t *)Page_126, (uint32_t) &eePlantilla[eeversion2]);
 800e01c:	4b68      	ldr	r3, [pc, #416]	@ (800e1c0 <tx_control+0x2fb0>)
 800e01e:	4a67      	ldr	r2, [pc, #412]	@ (800e1bc <tx_control+0x2fac>)
 800e020:	0019      	movs	r1, r3
 800e022:	0010      	movs	r0, r2
 800e024:	f7f2 fd4a 	bl	8000abc <findLastValue>
 800e028:	0003      	movs	r3, r0
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	4b61      	ldr	r3, [pc, #388]	@ (800e1b4 <tx_control+0x2fa4>)
 800e02e:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800e030:	4b64      	ldr	r3, [pc, #400]	@ (800e1c4 <tx_control+0x2fb4>)
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	b29b      	uxth	r3, r3
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	4b5e      	ldr	r3, [pc, #376]	@ (800e1b4 <tx_control+0x2fa4>)
 800e03c:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 800e03e:	4b61      	ldr	r3, [pc, #388]	@ (800e1c4 <tx_control+0x2fb4>)
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	b2da      	uxtb	r2, r3
 800e044:	4b5b      	ldr	r3, [pc, #364]	@ (800e1b4 <tx_control+0x2fa4>)
 800e046:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800e048:	4b5f      	ldr	r3, [pc, #380]	@ (800e1c8 <tx_control+0x2fb8>)
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	0a1b      	lsrs	r3, r3, #8
 800e04e:	b29b      	uxth	r3, r3
 800e050:	b2da      	uxtb	r2, r3
 800e052:	4b58      	ldr	r3, [pc, #352]	@ (800e1b4 <tx_control+0x2fa4>)
 800e054:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 800e056:	4b5c      	ldr	r3, [pc, #368]	@ (800e1c8 <tx_control+0x2fb8>)
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	4b55      	ldr	r3, [pc, #340]	@ (800e1b4 <tx_control+0x2fa4>)
 800e05e:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 800e060:	4b5a      	ldr	r3, [pc, #360]	@ (800e1cc <tx_control+0x2fbc>)
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	4b53      	ldr	r3, [pc, #332]	@ (800e1b4 <tx_control+0x2fa4>)
 800e066:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 800e068:	4b59      	ldr	r3, [pc, #356]	@ (800e1d0 <tx_control+0x2fc0>)
 800e06a:	781a      	ldrb	r2, [r3, #0]
 800e06c:	4b51      	ldr	r3, [pc, #324]	@ (800e1b4 <tx_control+0x2fa4>)
 800e06e:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 800e070:	4b58      	ldr	r3, [pc, #352]	@ (800e1d4 <tx_control+0x2fc4>)
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	4b4f      	ldr	r3, [pc, #316]	@ (800e1b4 <tx_control+0x2fa4>)
 800e076:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 800e078:	4b57      	ldr	r3, [pc, #348]	@ (800e1d8 <tx_control+0x2fc8>)
 800e07a:	781a      	ldrb	r2, [r3, #0]
 800e07c:	4b4d      	ldr	r3, [pc, #308]	@ (800e1b4 <tx_control+0x2fa4>)
 800e07e:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 800e080:	4b4c      	ldr	r3, [pc, #304]	@ (800e1b4 <tx_control+0x2fa4>)
 800e082:	2200      	movs	r2, #0
 800e084:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 800e086:	4b55      	ldr	r3, [pc, #340]	@ (800e1dc <tx_control+0x2fcc>)
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	4b4a      	ldr	r3, [pc, #296]	@ (800e1b4 <tx_control+0x2fa4>)
 800e08c:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 800e08e:	4b49      	ldr	r3, [pc, #292]	@ (800e1b4 <tx_control+0x2fa4>)
 800e090:	2200      	movs	r2, #0
 800e092:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 800e094:	2300      	movs	r3, #0
 800e096:	60bb      	str	r3, [r7, #8]
 800e098:	e011      	b.n	800e0be <tx_control+0x2eae>
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 800e09a:	4b46      	ldr	r3, [pc, #280]	@ (800e1b4 <tx_control+0x2fa4>)
 800e09c:	7bda      	ldrb	r2, [r3, #15]
 800e09e:	4950      	ldr	r1, [pc, #320]	@ (800e1e0 <tx_control+0x2fd0>)
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	18cb      	adds	r3, r1, r3
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	0019      	movs	r1, r3
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	4099      	lsls	r1, r3
 800e0ac:	000b      	movs	r3, r1
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800e1b4 <tx_control+0x2fa4>)
 800e0b6:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	60bb      	str	r3, [r7, #8]
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b07      	cmp	r3, #7
 800e0c2:	ddea      	ble.n	800e09a <tx_control+0x2e8a>
		}
		bufferWifiTx[16] =estados_TD;
 800e0c4:	4b47      	ldr	r3, [pc, #284]	@ (800e1e4 <tx_control+0x2fd4>)
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	4b3a      	ldr	r3, [pc, #232]	@ (800e1b4 <tx_control+0x2fa4>)
 800e0ca:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 800e0cc:	4b39      	ldr	r3, [pc, #228]	@ (800e1b4 <tx_control+0x2fa4>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 800e0d2:	1dfb      	adds	r3, r7, #7
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	701a      	strb	r2, [r3, #0]
 800e0d8:	e014      	b.n	800e104 <tx_control+0x2ef4>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 800e0da:	4b36      	ldr	r3, [pc, #216]	@ (800e1b4 <tx_control+0x2fa4>)
 800e0dc:	7c5a      	ldrb	r2, [r3, #17]
 800e0de:	1dfb      	adds	r3, r7, #7
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	4941      	ldr	r1, [pc, #260]	@ (800e1e8 <tx_control+0x2fd8>)
 800e0e4:	5ccb      	ldrb	r3, [r1, r3]
 800e0e6:	0019      	movs	r1, r3
 800e0e8:	1dfb      	adds	r3, r7, #7
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	4099      	lsls	r1, r3
 800e0ee:	000b      	movs	r3, r1
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	4b2f      	ldr	r3, [pc, #188]	@ (800e1b4 <tx_control+0x2fa4>)
 800e0f8:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 800e0fa:	1dfb      	adds	r3, r7, #7
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	1dfb      	adds	r3, r7, #7
 800e100:	3201      	adds	r2, #1
 800e102:	701a      	strb	r2, [r3, #0]
 800e104:	1dfb      	adds	r3, r7, #7
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b07      	cmp	r3, #7
 800e10a:	d9e6      	bls.n	800e0da <tx_control+0x2eca>
		}

		bufferWifiTx[18] = alarmas_TD;
 800e10c:	4b28      	ldr	r3, [pc, #160]	@ (800e1b0 <tx_control+0x2fa0>)
 800e10e:	781a      	ldrb	r2, [r3, #0]
 800e110:	4b28      	ldr	r3, [pc, #160]	@ (800e1b4 <tx_control+0x2fa4>)
 800e112:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 800e114:	4b35      	ldr	r3, [pc, #212]	@ (800e1ec <tx_control+0x2fdc>)
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	0a1b      	lsrs	r3, r3, #8
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	4b25      	ldr	r3, [pc, #148]	@ (800e1b4 <tx_control+0x2fa4>)
 800e120:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 800e122:	4b32      	ldr	r3, [pc, #200]	@ (800e1ec <tx_control+0x2fdc>)
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	b2da      	uxtb	r2, r3
 800e128:	4b22      	ldr	r3, [pc, #136]	@ (800e1b4 <tx_control+0x2fa4>)
 800e12a:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 800e12c:	4b2f      	ldr	r3, [pc, #188]	@ (800e1ec <tx_control+0x2fdc>)
 800e12e:	881b      	ldrh	r3, [r3, #0]
 800e130:	0a1b      	lsrs	r3, r3, #8
 800e132:	b29b      	uxth	r3, r3
 800e134:	b2da      	uxtb	r2, r3
 800e136:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b4 <tx_control+0x2fa4>)
 800e138:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 800e13a:	4b2c      	ldr	r3, [pc, #176]	@ (800e1ec <tx_control+0x2fdc>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	4b1c      	ldr	r3, [pc, #112]	@ (800e1b4 <tx_control+0x2fa4>)
 800e142:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800e144:	4b2a      	ldr	r3, [pc, #168]	@ (800e1f0 <tx_control+0x2fe0>)
 800e146:	4a1b      	ldr	r2, [pc, #108]	@ (800e1b4 <tx_control+0x2fa4>)
 800e148:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800e14a:	4b2a      	ldr	r3, [pc, #168]	@ (800e1f4 <tx_control+0x2fe4>)
 800e14c:	4a19      	ldr	r2, [pc, #100]	@ (800e1b4 <tx_control+0x2fa4>)
 800e14e:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 800e150:	4b29      	ldr	r3, [pc, #164]	@ (800e1f8 <tx_control+0x2fe8>)
 800e152:	4a2a      	ldr	r2, [pc, #168]	@ (800e1fc <tx_control+0x2fec>)
 800e154:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 800e156:	4b2a      	ldr	r3, [pc, #168]	@ (800e200 <tx_control+0x2ff0>)
 800e158:	2217      	movs	r2, #23
 800e15a:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e15c:	4b29      	ldr	r3, [pc, #164]	@ (800e204 <tx_control+0x2ff4>)
 800e15e:	2200      	movs	r2, #0
 800e160:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e162:	4b29      	ldr	r3, [pc, #164]	@ (800e208 <tx_control+0x2ff8>)
 800e164:	2200      	movs	r2, #0
 800e166:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e168:	4b26      	ldr	r3, [pc, #152]	@ (800e204 <tx_control+0x2ff4>)
 800e16a:	2201      	movs	r2, #1
 800e16c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 800e16e:	4b27      	ldr	r3, [pc, #156]	@ (800e20c <tx_control+0x2ffc>)
 800e170:	2255      	movs	r2, #85	@ 0x55
 800e172:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800e174:	4b26      	ldr	r3, [pc, #152]	@ (800e210 <tx_control+0x3000>)
 800e176:	2200      	movs	r2, #0
 800e178:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800e17a:	e00f      	b.n	800e19c <tx_control+0x2f8c>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 800e17c:	46c0      	nop			@ (mov r8, r8)
 800e17e:	f7fe ff44 	bl	800d00a <tx_control+0x1dfa>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 800e182:	46c0      	nop			@ (mov r8, r8)
 800e184:	f7fe ff41 	bl	800d00a <tx_control+0x1dfa>
		goto end_tx_wifi;// jp		end_tx_wifi
 800e188:	46c0      	nop			@ (mov r8, r8)
 800e18a:	f7fe ff3e 	bl	800d00a <tx_control+0x1dfa>
		goto end_tx_wifi;// jp		end_tx_wifi
 800e18e:	46c0      	nop			@ (mov r8, r8)
 800e190:	f7fe ff3b 	bl	800d00a <tx_control+0x1dfa>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 800e194:	46c0      	nop			@ (mov r8, r8)
 800e196:	f7fe ff38 	bl	800d00a <tx_control+0x1dfa>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 800e19a:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 800e19c:	f7fe ff35 	bl	800d00a <tx_control+0x1dfa>

end_tx_control_b:
		asm ("nop");
 800e1a0:	46c0      	nop			@ (mov r8, r8)

}
 800e1a2:	46c0      	nop			@ (mov r8, r8)
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	b011      	add	sp, #68	@ 0x44
 800e1a8:	bd90      	pop	{r4, r7, pc}
 800e1aa:	46c0      	nop			@ (mov r8, r8)
 800e1ac:	20000ba8 	.word	0x20000ba8
 800e1b0:	20000df4 	.word	0x20000df4
 800e1b4:	20000f78 	.word	0x20000f78
 800e1b8:	2000037f 	.word	0x2000037f
 800e1bc:	0803f000 	.word	0x0803f000
 800e1c0:	20000380 	.word	0x20000380
 800e1c4:	20000dd0 	.word	0x20000dd0
 800e1c8:	20000dd2 	.word	0x20000dd2
 800e1cc:	20000bd0 	.word	0x20000bd0
 800e1d0:	20000bd1 	.word	0x20000bd1
 800e1d4:	20000bd2 	.word	0x20000bd2
 800e1d8:	20000bd3 	.word	0x20000bd3
 800e1dc:	20000bee 	.word	0x20000bee
 800e1e0:	20000de0 	.word	0x20000de0
 800e1e4:	20000de8 	.word	0x20000de8
 800e1e8:	20000dec 	.word	0x20000dec
 800e1ec:	20000c74 	.word	0x20000c74
 800e1f0:	20000e34 	.word	0x20000e34
 800e1f4:	20000e2c 	.word	0x20000e2c
 800e1f8:	20000e30 	.word	0x20000e30
 800e1fc:	20000f8f 	.word	0x20000f8f
 800e200:	20000e50 	.word	0x20000e50
 800e204:	20000e3c 	.word	0x20000e3c
 800e208:	20000e54 	.word	0x20000e54
 800e20c:	20000e39 	.word	0x20000e39
 800e210:	20000e44 	.word	0x20000e44

0800e214 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 800e21a:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d8 <prepTXlogg_2+0xc4>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	337e      	adds	r3, #126	@ 0x7e
 800e224:	4a2d      	ldr	r2, [pc, #180]	@ (800e2dc <prepTXlogg_2+0xc8>)
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800e22a:	4b2d      	ldr	r3, [pc, #180]	@ (800e2e0 <prepTXlogg_2+0xcc>)
 800e22c:	22aa      	movs	r2, #170	@ 0xaa
 800e22e:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 800e230:	4b2c      	ldr	r3, [pc, #176]	@ (800e2e4 <prepTXlogg_2+0xd0>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	01db      	lsls	r3, r3, #7
 800e236:	b29a      	uxth	r2, r3
 800e238:	4b2b      	ldr	r3, [pc, #172]	@ (800e2e8 <prepTXlogg_2+0xd4>)
 800e23a:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 800e23c:	4b2b      	ldr	r3, [pc, #172]	@ (800e2ec <prepTXlogg_2+0xd8>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a29      	ldr	r2, [pc, #164]	@ (800e2e8 <prepTXlogg_2+0xd4>)
 800e242:	8812      	ldrh	r2, [r2, #0]
 800e244:	189a      	adds	r2, r3, r2
 800e246:	4b2a      	ldr	r3, [pc, #168]	@ (800e2f0 <prepTXlogg_2+0xdc>)
 800e248:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 800e24a:	4b23      	ldr	r3, [pc, #140]	@ (800e2d8 <prepTXlogg_2+0xc4>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	4b29      	ldr	r3, [pc, #164]	@ (800e2f4 <prepTXlogg_2+0xe0>)
 800e250:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 800e252:	f7f6 fe3b 	bl	8004ecc <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 800e256:	f7f6 fd55 	bl	8004d04 <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 800e25a:	f7f6 fd19 	bl	8004c90 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 800e25e:	4b21      	ldr	r3, [pc, #132]	@ (800e2e4 <prepTXlogg_2+0xd0>)
 800e260:	781a      	ldrb	r2, [r3, #0]
 800e262:	4b25      	ldr	r3, [pc, #148]	@ (800e2f8 <prepTXlogg_2+0xe4>)
 800e264:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 800e266:	4b1d      	ldr	r3, [pc, #116]	@ (800e2dc <prepTXlogg_2+0xc8>)
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d006      	beq.n	800e27c <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 800e26e:	4b22      	ldr	r3, [pc, #136]	@ (800e2f8 <prepTXlogg_2+0xe4>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	3301      	adds	r3, #1
 800e274:	b2da      	uxtb	r2, r3
 800e276:	4b20      	ldr	r3, [pc, #128]	@ (800e2f8 <prepTXlogg_2+0xe4>)
 800e278:	701a      	strb	r2, [r3, #0]
 800e27a:	e000      	b.n	800e27e <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 800e27c:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 800e27e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2f8 <prepTXlogg_2+0xe4>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	01db      	lsls	r3, r3, #7
 800e284:	b29a      	uxth	r2, r3
 800e286:	4b18      	ldr	r3, [pc, #96]	@ (800e2e8 <prepTXlogg_2+0xd4>)
 800e288:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 800e28a:	4b18      	ldr	r3, [pc, #96]	@ (800e2ec <prepTXlogg_2+0xd8>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a16      	ldr	r2, [pc, #88]	@ (800e2e8 <prepTXlogg_2+0xd4>)
 800e290:	8812      	ldrh	r2, [r2, #0]
 800e292:	189b      	adds	r3, r3, r2
 800e294:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 800e296:	4b19      	ldr	r3, [pc, #100]	@ (800e2fc <prepTXlogg_2+0xe8>)
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 800e29c:	4b18      	ldr	r3, [pc, #96]	@ (800e300 <prepTXlogg_2+0xec>)
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 800e2a2:	4b18      	ldr	r3, [pc, #96]	@ (800e304 <prepTXlogg_2+0xf0>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 800e2a8:	4b15      	ldr	r3, [pc, #84]	@ (800e300 <prepTXlogg_2+0xec>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	4b16      	ldr	r3, [pc, #88]	@ (800e308 <prepTXlogg_2+0xf4>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d106      	bne.n	800e2c2 <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 800e2b4:	4b15      	ldr	r3, [pc, #84]	@ (800e30c <prepTXlogg_2+0xf8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 800e2ba:	4b12      	ldr	r3, [pc, #72]	@ (800e304 <prepTXlogg_2+0xf0>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 800e2c0:	e003      	b.n	800e2ca <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 800e2c2:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 800e2ca:	4b11      	ldr	r3, [pc, #68]	@ (800e310 <prepTXlogg_2+0xfc>)
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	601a      	str	r2, [r3, #0]
			//ret
}
 800e2d0:	46c0      	nop			@ (mov r8, r8)
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	b002      	add	sp, #8
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000dc4 	.word	0x20000dc4
 800e2dc:	20000dbb 	.word	0x20000dbb
 800e2e0:	20000dac 	.word	0x20000dac
 800e2e4:	20000dba 	.word	0x20000dba
 800e2e8:	20000922 	.word	0x20000922
 800e2ec:	20000dc0 	.word	0x20000dc0
 800e2f0:	20000db0 	.word	0x20000db0
 800e2f4:	20000db4 	.word	0x20000db4
 800e2f8:	20000920 	.word	0x20000920
 800e2fc:	20000e2c 	.word	0x20000e2c
 800e300:	20000e34 	.word	0x20000e34
 800e304:	20000e3c 	.word	0x20000e3c
 800e308:	20000e48 	.word	0x20000e48
 800e30c:	20000e4c 	.word	0x20000e4c
 800e310:	20000e30 	.word	0x20000e30

0800e314 <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 800e314:	b580      	push	{r7, lr}
 800e316:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 800e318:	4b8b      	ldr	r3, [pc, #556]	@ (800e548 <voltmetro+0x234>)
 800e31a:	799b      	ldrb	r3, [r3, #6]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d100      	bne.n	800e322 <voltmetro+0xe>
 800e320:	e0fb      	b.n	800e51a <voltmetro+0x206>
					goto voltmetro1;
 800e322:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 800e324:	4b89      	ldr	r3, [pc, #548]	@ (800e54c <voltmetro+0x238>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	3301      	adds	r3, #1
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	4b87      	ldr	r3, [pc, #540]	@ (800e54c <voltmetro+0x238>)
 800e32e:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 800e330:	4b86      	ldr	r3, [pc, #536]	@ (800e54c <voltmetro+0x238>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b18      	cmp	r3, #24
 800e336:	d800      	bhi.n	800e33a <voltmetro+0x26>
 800e338:	e06f      	b.n	800e41a <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 800e33a:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 800e33c:	4b83      	ldr	r3, [pc, #524]	@ (800e54c <voltmetro+0x238>)
 800e33e:	2200      	movs	r2, #0
 800e340:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 800e342:	4b83      	ldr	r3, [pc, #524]	@ (800e550 <voltmetro+0x23c>)
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	4b83      	ldr	r3, [pc, #524]	@ (800e554 <voltmetro+0x240>)
 800e348:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 800e34a:	4b82      	ldr	r3, [pc, #520]	@ (800e554 <voltmetro+0x240>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2bff      	cmp	r3, #255	@ 0xff
 800e350:	d10a      	bne.n	800e368 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 800e352:	4b81      	ldr	r3, [pc, #516]	@ (800e558 <voltmetro+0x244>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	2b02      	cmp	r3, #2
 800e358:	d019      	beq.n	800e38e <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 800e35a:	4b7f      	ldr	r3, [pc, #508]	@ (800e558 <voltmetro+0x244>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	3301      	adds	r3, #1
 800e360:	b2da      	uxtb	r2, r3
 800e362:	4b7d      	ldr	r3, [pc, #500]	@ (800e558 <voltmetro+0x244>)
 800e364:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 800e366:	e05b      	b.n	800e420 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 800e368:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 800e36a:	4b7b      	ldr	r3, [pc, #492]	@ (800e558 <voltmetro+0x244>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 800e370:	4b78      	ldr	r3, [pc, #480]	@ (800e554 <voltmetro+0x240>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b32      	cmp	r3, #50	@ 0x32
 800e376:	d82a      	bhi.n	800e3ce <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 800e378:	4b78      	ldr	r3, [pc, #480]	@ (800e55c <voltmetro+0x248>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d008      	beq.n	800e392 <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 800e380:	4b76      	ldr	r3, [pc, #472]	@ (800e55c <voltmetro+0x248>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	3301      	adds	r3, #1
 800e386:	b2da      	uxtb	r2, r3
 800e388:	4b74      	ldr	r3, [pc, #464]	@ (800e55c <voltmetro+0x248>)
 800e38a:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 800e38c:	e048      	b.n	800e420 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 800e38e:	46c0      	nop			@ (mov r8, r8)
 800e390:	e000      	b.n	800e394 <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 800e392:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 800e394:	4b72      	ldr	r3, [pc, #456]	@ (800e560 <voltmetro+0x24c>)
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 800e39a:	4b72      	ldr	r3, [pc, #456]	@ (800e564 <voltmetro+0x250>)
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d103      	bne.n	800e3aa <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 800e3a2:	4b6f      	ldr	r3, [pc, #444]	@ (800e560 <voltmetro+0x24c>)
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	701a      	strb	r2, [r3, #0]
 800e3a8:	e000      	b.n	800e3ac <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 800e3aa:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 800e3ac:	4b6e      	ldr	r3, [pc, #440]	@ (800e568 <voltmetro+0x254>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 800e3b2:	4b6e      	ldr	r3, [pc, #440]	@ (800e56c <voltmetro+0x258>)
 800e3b4:	2273      	movs	r2, #115	@ 0x73
 800e3b6:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 800e3b8:	4b6d      	ldr	r3, [pc, #436]	@ (800e570 <voltmetro+0x25c>)
 800e3ba:	2257      	movs	r2, #87	@ 0x57
 800e3bc:	5c9b      	ldrb	r3, [r3, r2]
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d103      	bne.n	800e3ca <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 800e3c2:	4b6a      	ldr	r3, [pc, #424]	@ (800e56c <voltmetro+0x258>)
 800e3c4:	22d2      	movs	r2, #210	@ 0xd2
 800e3c6:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 800e3c8:	e02a      	b.n	800e420 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 800e3ca:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 800e3cc:	e028      	b.n	800e420 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 800e3ce:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 800e3d0:	4b62      	ldr	r3, [pc, #392]	@ (800e55c <voltmetro+0x248>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 800e3d6:	4b62      	ldr	r3, [pc, #392]	@ (800e560 <voltmetro+0x24c>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 800e3dc:	4b62      	ldr	r3, [pc, #392]	@ (800e568 <voltmetro+0x254>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	001a      	movs	r2, r3
 800e3e2:	4b5c      	ldr	r3, [pc, #368]	@ (800e554 <voltmetro+0x240>)
 800e3e4:	7819      	ldrb	r1, [r3, #0]
 800e3e6:	4b63      	ldr	r3, [pc, #396]	@ (800e574 <voltmetro+0x260>)
 800e3e8:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 800e3ea:	4b5f      	ldr	r3, [pc, #380]	@ (800e568 <voltmetro+0x254>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	4b5d      	ldr	r3, [pc, #372]	@ (800e568 <voltmetro+0x254>)
 800e3f4:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 800e3f6:	4b5c      	ldr	r3, [pc, #368]	@ (800e568 <voltmetro+0x254>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b07      	cmp	r3, #7
 800e3fc:	d90f      	bls.n	800e41e <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 800e3fe:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 800e400:	4b59      	ldr	r3, [pc, #356]	@ (800e568 <voltmetro+0x254>)
 800e402:	2200      	movs	r2, #0
 800e404:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 800e406:	4b5b      	ldr	r3, [pc, #364]	@ (800e574 <voltmetro+0x260>)
 800e408:	2108      	movs	r1, #8
 800e40a:	0018      	movs	r0, r3
 800e40c:	f7f5 f83c 	bl	8003488 <prom8m1b>
 800e410:	0003      	movs	r3, r0
 800e412:	b2da      	uxtb	r2, r3
 800e414:	4b55      	ldr	r3, [pc, #340]	@ (800e56c <voltmetro+0x258>)
 800e416:	701a      	strb	r2, [r3, #0]
 800e418:	e002      	b.n	800e420 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	e000      	b.n	800e420 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 800e41e:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 800e420:	4b55      	ldr	r3, [pc, #340]	@ (800e578 <voltmetro+0x264>)
 800e422:	79db      	ldrb	r3, [r3, #7]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 800e428:	4b54      	ldr	r3, [pc, #336]	@ (800e57c <voltmetro+0x268>)
 800e42a:	781a      	ldrb	r2, [r3, #0]
 800e42c:	4b54      	ldr	r3, [pc, #336]	@ (800e580 <voltmetro+0x26c>)
 800e42e:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 800e430:	e004      	b.n	800e43c <voltmetro+0x128>
					goto hist_vla;
 800e432:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 800e434:	4b53      	ldr	r3, [pc, #332]	@ (800e584 <voltmetro+0x270>)
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	4b51      	ldr	r3, [pc, #324]	@ (800e580 <voltmetro+0x26c>)
 800e43a:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 800e43c:	4b50      	ldr	r3, [pc, #320]	@ (800e580 <voltmetro+0x26c>)
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	4b4a      	ldr	r3, [pc, #296]	@ (800e56c <voltmetro+0x258>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	429a      	cmp	r2, r3
 800e446:	d80c      	bhi.n	800e462 <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 800e448:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 800e44a:	4b4f      	ldr	r3, [pc, #316]	@ (800e588 <voltmetro+0x274>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d165      	bne.n	800e51e <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 800e452:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 800e454:	4948      	ldr	r1, [pc, #288]	@ (800e578 <voltmetro+0x264>)
 800e456:	4848      	ldr	r0, [pc, #288]	@ (800e578 <voltmetro+0x264>)
 800e458:	2306      	movs	r3, #6
 800e45a:	2207      	movs	r2, #7
 800e45c:	f7fc fb5e 	bl	800ab1c <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 800e460:	e02e      	b.n	800e4c0 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 800e462:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 800e464:	4b42      	ldr	r3, [pc, #264]	@ (800e570 <voltmetro+0x25c>)
 800e466:	2245      	movs	r2, #69	@ 0x45
 800e468:	5c9a      	ldrb	r2, [r3, r2]
 800e46a:	4b47      	ldr	r3, [pc, #284]	@ (800e588 <voltmetro+0x274>)
 800e46c:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 800e46e:	4b3d      	ldr	r3, [pc, #244]	@ (800e564 <voltmetro+0x250>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d103      	bne.n	800e47e <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 800e476:	4b44      	ldr	r3, [pc, #272]	@ (800e588 <voltmetro+0x274>)
 800e478:	2202      	movs	r2, #2
 800e47a:	701a      	strb	r2, [r3, #0]
 800e47c:	e000      	b.n	800e480 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 800e47e:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 800e480:	4b3d      	ldr	r3, [pc, #244]	@ (800e578 <voltmetro+0x264>)
 800e482:	799b      	ldrb	r3, [r3, #6]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d104      	bne.n	800e492 <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 800e488:	4b40      	ldr	r3, [pc, #256]	@ (800e58c <voltmetro+0x278>)
 800e48a:	781a      	ldrb	r2, [r3, #0]
 800e48c:	4b3c      	ldr	r3, [pc, #240]	@ (800e580 <voltmetro+0x26c>)
 800e48e:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 800e490:	e004      	b.n	800e49c <voltmetro+0x188>
						goto hist_vlb; //
 800e492:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 800e494:	4b3e      	ldr	r3, [pc, #248]	@ (800e590 <voltmetro+0x27c>)
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	4b39      	ldr	r3, [pc, #228]	@ (800e580 <voltmetro+0x26c>)
 800e49a:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 800e49c:	4b38      	ldr	r3, [pc, #224]	@ (800e580 <voltmetro+0x26c>)
 800e49e:	781a      	ldrb	r2, [r3, #0]
 800e4a0:	4b32      	ldr	r3, [pc, #200]	@ (800e56c <voltmetro+0x258>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d31d      	bcc.n	800e4e4 <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 800e4a8:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 800e4aa:	4b3a      	ldr	r3, [pc, #232]	@ (800e594 <voltmetro+0x280>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d137      	bne.n	800e522 <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 800e4b2:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 800e4b4:	4930      	ldr	r1, [pc, #192]	@ (800e578 <voltmetro+0x264>)
 800e4b6:	4830      	ldr	r0, [pc, #192]	@ (800e578 <voltmetro+0x264>)
 800e4b8:	2307      	movs	r3, #7
 800e4ba:	2206      	movs	r2, #6
 800e4bc:	f7fc fb2e 	bl	800ab1c <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 800e4c0:	4b2b      	ldr	r3, [pc, #172]	@ (800e570 <voltmetro+0x25c>)
 800e4c2:	2263      	movs	r2, #99	@ 0x63
 800e4c4:	5c9a      	ldrb	r2, [r3, r2]
 800e4c6:	4b23      	ldr	r3, [pc, #140]	@ (800e554 <voltmetro+0x240>)
 800e4c8:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 800e4ca:	f7f5 ffc9 	bl	8004460 <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 800e4ce:	4b32      	ldr	r3, [pc, #200]	@ (800e598 <voltmetro+0x284>)
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	021b      	lsls	r3, r3, #8
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	4a31      	ldr	r2, [pc, #196]	@ (800e59c <voltmetro+0x288>)
 800e4d8:	7812      	ldrb	r2, [r2, #0]
 800e4da:	189b      	adds	r3, r3, r2
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	4b30      	ldr	r3, [pc, #192]	@ (800e5a0 <voltmetro+0x28c>)
 800e4e0:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 800e4e2:	e021      	b.n	800e528 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 800e4e4:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 800e4e6:	4b22      	ldr	r3, [pc, #136]	@ (800e570 <voltmetro+0x25c>)
 800e4e8:	2245      	movs	r2, #69	@ 0x45
 800e4ea:	5c9a      	ldrb	r2, [r3, r2]
 800e4ec:	4b29      	ldr	r3, [pc, #164]	@ (800e594 <voltmetro+0x280>)
 800e4ee:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 800e4f0:	4b1c      	ldr	r3, [pc, #112]	@ (800e564 <voltmetro+0x250>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d103      	bne.n	800e500 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 800e4f8:	4b26      	ldr	r3, [pc, #152]	@ (800e594 <voltmetro+0x280>)
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	e000      	b.n	800e502 <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 800e500:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 800e502:	4b27      	ldr	r3, [pc, #156]	@ (800e5a0 <voltmetro+0x28c>)
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10d      	bne.n	800e526 <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 800e50a:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 800e50c:	491a      	ldr	r1, [pc, #104]	@ (800e578 <voltmetro+0x264>)
 800e50e:	481a      	ldr	r0, [pc, #104]	@ (800e578 <voltmetro+0x264>)
 800e510:	2307      	movs	r3, #7
 800e512:	2206      	movs	r2, #6
 800e514:	f7fc fb1d 	bl	800ab52 <Bclear_Clear_trfst>
 800e518:	e006      	b.n	800e528 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 800e51a:	46c0      	nop			@ (mov r8, r8)
 800e51c:	e004      	b.n	800e528 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	e002      	b.n	800e528 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 800e522:	46c0      	nop			@ (mov r8, r8)
 800e524:	e000      	b.n	800e528 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 800e526:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 800e528:	4b07      	ldr	r3, [pc, #28]	@ (800e548 <voltmetro+0x234>)
 800e52a:	799b      	ldrb	r3, [r3, #6]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 800e530:	4911      	ldr	r1, [pc, #68]	@ (800e578 <voltmetro+0x264>)
 800e532:	4811      	ldr	r0, [pc, #68]	@ (800e578 <voltmetro+0x264>)
 800e534:	2307      	movs	r3, #7
 800e536:	2206      	movs	r2, #6
 800e538:	f7fc fb0b 	bl	800ab52 <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 800e53c:	e000      	b.n	800e540 <voltmetro+0x22c>
						goto fin_voltmetro1;
 800e53e:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 800e540:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 800e542:	46c0      	nop			@ (mov r8, r8)
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20000bc4 	.word	0x20000bc4
 800e54c:	20000bec 	.word	0x20000bec
 800e550:	20000b68 	.word	0x20000b68
 800e554:	20000b77 	.word	0x20000b77
 800e558:	20000c4a 	.word	0x20000c4a
 800e55c:	20000c49 	.word	0x20000c49
 800e560:	20000ba0 	.word	0x20000ba0
 800e564:	20000bb8 	.word	0x20000bb8
 800e568:	20000bed 	.word	0x20000bed
 800e56c:	20000bee 	.word	0x20000bee
 800e570:	200000bc 	.word	0x200000bc
 800e574:	20000c88 	.word	0x20000c88
 800e578:	20000ba8 	.word	0x20000ba8
 800e57c:	20000c43 	.word	0x20000c43
 800e580:	20000920 	.word	0x20000920
 800e584:	20000c45 	.word	0x20000c45
 800e588:	20000b91 	.word	0x20000b91
 800e58c:	20000c44 	.word	0x20000c44
 800e590:	20000c46 	.word	0x20000c46
 800e594:	20000b90 	.word	0x20000b90
 800e598:	20000b69 	.word	0x20000b69
 800e59c:	20000b6a 	.word	0x20000b6a
 800e5a0:	20000b88 	.word	0x20000b88

0800e5a4 <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	af00      	add	r7, sp, #0


				memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 800e5a8:	f7f6 fd54 	bl	8005054 <memodriver>


////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 800e5ac:	4b45      	ldr	r3, [pc, #276]	@ (800e6c4 <watch+0x120>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 800e5b2:	4b44      	ldr	r3, [pc, #272]	@ (800e6c4 <watch+0x120>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 800e5b8:	4b42      	ldr	r3, [pc, #264]	@ (800e6c4 <watch+0x120>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 800e5be:	4b41      	ldr	r3, [pc, #260]	@ (800e6c4 <watch+0x120>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 800e5c4:	4b3f      	ldr	r3, [pc, #252]	@ (800e6c4 <watch+0x120>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 800e5ca:	4b3f      	ldr	r3, [pc, #252]	@ (800e6c8 <watch+0x124>)
 800e5cc:	785b      	ldrb	r3, [r3, #1]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	4053      	eors	r3, r2
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d103      	bne.n	800e5e0 <watch+0x3c>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 800e5d8:	4b3a      	ldr	r3, [pc, #232]	@ (800e6c4 <watch+0x120>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	715a      	strb	r2, [r3, #5]
 800e5de:	e000      	b.n	800e5e2 <watch+0x3e>
					goto	jmp_watch_02;
 800e5e0:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 800e5e2:	4b3a      	ldr	r3, [pc, #232]	@ (800e6cc <watch+0x128>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d000      	beq.n	800e5ec <watch+0x48>
 800e5ea:	e064      	b.n	800e6b6 <watch+0x112>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 800e5ec:	4b38      	ldr	r3, [pc, #224]	@ (800e6d0 <watch+0x12c>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	4053      	eors	r3, r2
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d107      	bne.n	800e60a <watch+0x66>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 800e5fa:	4b36      	ldr	r3, [pc, #216]	@ (800e6d4 <watch+0x130>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d108      	bne.n	800e614 <watch+0x70>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 800e602:	4b30      	ldr	r3, [pc, #192]	@ (800e6c4 <watch+0x120>)
 800e604:	2201      	movs	r2, #1
 800e606:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 800e608:	e005      	b.n	800e616 <watch+0x72>
					goto	jmp_watch_03_00;
 800e60a:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 800e60c:	4b31      	ldr	r3, [pc, #196]	@ (800e6d4 <watch+0x130>)
 800e60e:	22a4      	movs	r2, #164	@ 0xa4
 800e610:	701a      	strb	r2, [r3, #0]
 800e612:	e000      	b.n	800e616 <watch+0x72>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 800e614:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 800e616:	4b2e      	ldr	r3, [pc, #184]	@ (800e6d0 <watch+0x12c>)
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10c      	bne.n	800e638 <watch+0x94>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 800e61e:	4b2a      	ldr	r3, [pc, #168]	@ (800e6c8 <watch+0x124>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d103      	bne.n	800e62e <watch+0x8a>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 800e626:	4b2c      	ldr	r3, [pc, #176]	@ (800e6d8 <watch+0x134>)
 800e628:	220f      	movs	r2, #15
 800e62a:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 800e62c:	e005      	b.n	800e63a <watch+0x96>
					goto	jmp_watch_04;
 800e62e:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 800e630:	4b29      	ldr	r3, [pc, #164]	@ (800e6d8 <watch+0x134>)
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
 800e636:	e000      	b.n	800e63a <watch+0x96>
					goto	jmp_watch_05;
 800e638:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 800e63a:	4b25      	ldr	r3, [pc, #148]	@ (800e6d0 <watch+0x12c>)
 800e63c:	785b      	ldrb	r3, [r3, #1]
 800e63e:	2201      	movs	r2, #1
 800e640:	4053      	eors	r3, r2
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	d107      	bne.n	800e658 <watch+0xb4>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 800e648:	4b24      	ldr	r3, [pc, #144]	@ (800e6dc <watch+0x138>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d108      	bne.n	800e662 <watch+0xbe>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 800e650:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c4 <watch+0x120>)
 800e652:	2201      	movs	r2, #1
 800e654:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 800e656:	e005      	b.n	800e664 <watch+0xc0>
					goto	jmp_watch_07_00;
 800e658:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 800e65a:	4b20      	ldr	r3, [pc, #128]	@ (800e6dc <watch+0x138>)
 800e65c:	2204      	movs	r2, #4
 800e65e:	701a      	strb	r2, [r3, #0]
 800e660:	e000      	b.n	800e664 <watch+0xc0>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 800e662:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 800e664:	4b1a      	ldr	r3, [pc, #104]	@ (800e6d0 <watch+0x12c>)
 800e666:	789b      	ldrb	r3, [r3, #2]
 800e668:	2201      	movs	r2, #1
 800e66a:	4053      	eors	r3, r2
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d107      	bne.n	800e682 <watch+0xde>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 800e672:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e0 <watch+0x13c>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d108      	bne.n	800e68c <watch+0xe8>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 800e67a:	4b12      	ldr	r3, [pc, #72]	@ (800e6c4 <watch+0x120>)
 800e67c:	2201      	movs	r2, #1
 800e67e:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 800e680:	e005      	b.n	800e68e <watch+0xea>
					goto	jmp_watch_11_00;
 800e682:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 800e684:	4b16      	ldr	r3, [pc, #88]	@ (800e6e0 <watch+0x13c>)
 800e686:	220f      	movs	r2, #15
 800e688:	701a      	strb	r2, [r3, #0]
 800e68a:	e000      	b.n	800e68e <watch+0xea>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 800e68c:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 800e68e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c8 <watch+0x124>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2201      	movs	r2, #1
 800e694:	4053      	eors	r3, r2
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d107      	bne.n	800e6ac <watch+0x108>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 800e69c:	4b11      	ldr	r3, [pc, #68]	@ (800e6e4 <watch+0x140>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10a      	bne.n	800e6ba <watch+0x116>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 800e6a4:	4b07      	ldr	r3, [pc, #28]	@ (800e6c4 <watch+0x120>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 800e6aa:	e007      	b.n	800e6bc <watch+0x118>
					goto jmp_watch_12_00;
 800e6ac:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e4 <watch+0x140>)
 800e6b0:	22c5      	movs	r2, #197	@ 0xc5
 800e6b2:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 800e6b4:	e002      	b.n	800e6bc <watch+0x118>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	e000      	b.n	800e6bc <watch+0x118>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 800e6ba:	46c0      	nop			@ (mov r8, r8)
}
 800e6bc:	46c0      	nop			@ (mov r8, r8)
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	46c0      	nop			@ (mov r8, r8)
 800e6c4:	20000b78 	.word	0x20000b78
 800e6c8:	20000c00 	.word	0x20000c00
 800e6cc:	20000c71 	.word	0x20000c71
 800e6d0:	20000bc4 	.word	0x20000bc4
 800e6d4:	20000c76 	.word	0x20000c76
 800e6d8:	20000b94 	.word	0x20000b94
 800e6dc:	20000c77 	.word	0x20000c77
 800e6e0:	20000c79 	.word	0x20000c79
 800e6e4:	20000c78 	.word	0x20000c78

0800e6e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e6e8:	480d      	ldr	r0, [pc, #52]	@ (800e720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e6ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e6ec:	f7fb fae2 	bl	8009cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e6f0:	480c      	ldr	r0, [pc, #48]	@ (800e724 <LoopForever+0x6>)
  ldr r1, =_edata
 800e6f2:	490d      	ldr	r1, [pc, #52]	@ (800e728 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e6f4:	4a0d      	ldr	r2, [pc, #52]	@ (800e72c <LoopForever+0xe>)
  movs r3, #0
 800e6f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e6f8:	e002      	b.n	800e700 <LoopCopyDataInit>

0800e6fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e6fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e6fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e6fe:	3304      	adds	r3, #4

0800e700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e704:	d3f9      	bcc.n	800e6fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e706:	4a0a      	ldr	r2, [pc, #40]	@ (800e730 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e708:	4c0a      	ldr	r4, [pc, #40]	@ (800e734 <LoopForever+0x16>)
  movs r3, #0
 800e70a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e70c:	e001      	b.n	800e712 <LoopFillZerobss>

0800e70e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e70e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e710:	3204      	adds	r2, #4

0800e712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e714:	d3fb      	bcc.n	800e70e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e716:	f00a f85f 	bl	80187d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e71a:	f7f8 fdc9 	bl	80072b0 <main>

0800e71e <LoopForever>:

LoopForever:
  b LoopForever
 800e71e:	e7fe      	b.n	800e71e <LoopForever>
  ldr   r0, =_estack
 800e720:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800e724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e728:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800e72c:	08018be4 	.word	0x08018be4
  ldr r2, =_sbss
 800e730:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 800e734:	200012cc 	.word	0x200012cc

0800e738 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e738:	e7fe      	b.n	800e738 <ADC_COMP1_2_IRQHandler>

0800e73a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b082      	sub	sp, #8
 800e73e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e740:	1dfb      	adds	r3, r7, #7
 800e742:	2200      	movs	r2, #0
 800e744:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e746:	2003      	movs	r0, #3
 800e748:	f000 f80e 	bl	800e768 <HAL_InitTick>
 800e74c:	1e03      	subs	r3, r0, #0
 800e74e:	d003      	beq.n	800e758 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800e750:	1dfb      	adds	r3, r7, #7
 800e752:	2201      	movs	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	e001      	b.n	800e75c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e758:	f7fa fe0a 	bl	8009370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e75c:	1dfb      	adds	r3, r7, #7
 800e75e:	781b      	ldrb	r3, [r3, #0]
}
 800e760:	0018      	movs	r0, r3
 800e762:	46bd      	mov	sp, r7
 800e764:	b002      	add	sp, #8
 800e766:	bd80      	pop	{r7, pc}

0800e768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e770:	230f      	movs	r3, #15
 800e772:	18fb      	adds	r3, r7, r3
 800e774:	2200      	movs	r2, #0
 800e776:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800e778:	4b1d      	ldr	r3, [pc, #116]	@ (800e7f0 <HAL_InitTick+0x88>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d02b      	beq.n	800e7d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800e780:	4b1c      	ldr	r3, [pc, #112]	@ (800e7f4 <HAL_InitTick+0x8c>)
 800e782:	681c      	ldr	r4, [r3, #0]
 800e784:	4b1a      	ldr	r3, [pc, #104]	@ (800e7f0 <HAL_InitTick+0x88>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	0019      	movs	r1, r3
 800e78a:	23fa      	movs	r3, #250	@ 0xfa
 800e78c:	0098      	lsls	r0, r3, #2
 800e78e:	f7f1 fcc3 	bl	8000118 <__udivsi3>
 800e792:	0003      	movs	r3, r0
 800e794:	0019      	movs	r1, r3
 800e796:	0020      	movs	r0, r4
 800e798:	f7f1 fcbe 	bl	8000118 <__udivsi3>
 800e79c:	0003      	movs	r3, r0
 800e79e:	0018      	movs	r0, r3
 800e7a0:	f001 fab7 	bl	800fd12 <HAL_SYSTICK_Config>
 800e7a4:	1e03      	subs	r3, r0, #0
 800e7a6:	d112      	bne.n	800e7ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d80a      	bhi.n	800e7c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	425b      	negs	r3, r3
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	f001 fa76 	bl	800fca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e7bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e7f8 <HAL_InitTick+0x90>)
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	601a      	str	r2, [r3, #0]
 800e7c2:	e00d      	b.n	800e7e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800e7c4:	230f      	movs	r3, #15
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	701a      	strb	r2, [r3, #0]
 800e7cc:	e008      	b.n	800e7e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800e7ce:	230f      	movs	r3, #15
 800e7d0:	18fb      	adds	r3, r7, r3
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	701a      	strb	r2, [r3, #0]
 800e7d6:	e003      	b.n	800e7e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800e7d8:	230f      	movs	r3, #15
 800e7da:	18fb      	adds	r3, r7, r3
 800e7dc:	2201      	movs	r2, #1
 800e7de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800e7e0:	230f      	movs	r3, #15
 800e7e2:	18fb      	adds	r3, r7, r3
 800e7e4:	781b      	ldrb	r3, [r3, #0]
}
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	b005      	add	sp, #20
 800e7ec:	bd90      	pop	{r4, r7, pc}
 800e7ee:	46c0      	nop			@ (mov r8, r8)
 800e7f0:	20000228 	.word	0x20000228
 800e7f4:	20000220 	.word	0x20000220
 800e7f8:	20000224 	.word	0x20000224

0800e7fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e800:	4b04      	ldr	r3, [pc, #16]	@ (800e814 <HAL_IncTick+0x18>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	4b04      	ldr	r3, [pc, #16]	@ (800e818 <HAL_IncTick+0x1c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	18d2      	adds	r2, r2, r3
 800e80a:	4b02      	ldr	r3, [pc, #8]	@ (800e814 <HAL_IncTick+0x18>)
 800e80c:	601a      	str	r2, [r3, #0]
}
 800e80e:	46c0      	nop			@ (mov r8, r8)
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	20001164 	.word	0x20001164
 800e818:	20000228 	.word	0x20000228

0800e81c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	af00      	add	r7, sp, #0
  return uwTick;
 800e820:	4b02      	ldr	r3, [pc, #8]	@ (800e82c <HAL_GetTick+0x10>)
 800e822:	681b      	ldr	r3, [r3, #0]
}
 800e824:	0018      	movs	r0, r3
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	46c0      	nop			@ (mov r8, r8)
 800e82c:	20001164 	.word	0x20001164

0800e830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e838:	f7ff fff0 	bl	800e81c <HAL_GetTick>
 800e83c:	0003      	movs	r3, r0
 800e83e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3301      	adds	r3, #1
 800e848:	d004      	beq.n	800e854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800e84a:	4b09      	ldr	r3, [pc, #36]	@ (800e870 <HAL_Delay+0x40>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	18d3      	adds	r3, r2, r3
 800e852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e854:	46c0      	nop			@ (mov r8, r8)
 800e856:	f7ff ffe1 	bl	800e81c <HAL_GetTick>
 800e85a:	0002      	movs	r2, r0
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	429a      	cmp	r2, r3
 800e864:	d8f7      	bhi.n	800e856 <HAL_Delay+0x26>
  {
  }
}
 800e866:	46c0      	nop			@ (mov r8, r8)
 800e868:	46c0      	nop			@ (mov r8, r8)
 800e86a:	46bd      	mov	sp, r7
 800e86c:	b004      	add	sp, #16
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20000228 	.word	0x20000228

0800e874 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a05      	ldr	r2, [pc, #20]	@ (800e898 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800e884:	401a      	ands	r2, r3
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	431a      	orrs	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	601a      	str	r2, [r3, #0]
}
 800e88e:	46c0      	nop			@ (mov r8, r8)
 800e890:	46bd      	mov	sp, r7
 800e892:	b002      	add	sp, #8
 800e894:	bd80      	pop	{r7, pc}
 800e896:	46c0      	nop			@ (mov r8, r8)
 800e898:	fe3fffff 	.word	0xfe3fffff

0800e89c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	23e0      	movs	r3, #224	@ 0xe0
 800e8aa:	045b      	lsls	r3, r3, #17
 800e8ac:	4013      	ands	r3, r2
}
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b002      	add	sp, #8
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	60f8      	str	r0, [r7, #12]
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	2104      	movs	r1, #4
 800e8ca:	400a      	ands	r2, r1
 800e8cc:	2107      	movs	r1, #7
 800e8ce:	4091      	lsls	r1, r2
 800e8d0:	000a      	movs	r2, r1
 800e8d2:	43d2      	mvns	r2, r2
 800e8d4:	401a      	ands	r2, r3
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	2104      	movs	r1, #4
 800e8da:	400b      	ands	r3, r1
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	4099      	lsls	r1, r3
 800e8e0:	000b      	movs	r3, r1
 800e8e2:	431a      	orrs	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800e8e8:	46c0      	nop			@ (mov r8, r8)
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	b004      	add	sp, #16
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	2104      	movs	r1, #4
 800e902:	400a      	ands	r2, r1
 800e904:	2107      	movs	r1, #7
 800e906:	4091      	lsls	r1, r2
 800e908:	000a      	movs	r2, r1
 800e90a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2104      	movs	r1, #4
 800e910:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800e912:	40da      	lsrs	r2, r3
 800e914:	0013      	movs	r3, r2
}
 800e916:	0018      	movs	r0, r3
 800e918:	46bd      	mov	sp, r7
 800e91a:	b002      	add	sp, #8
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800e91e:	b580      	push	{r7, lr}
 800e920:	b084      	sub	sp, #16
 800e922:	af00      	add	r7, sp, #0
 800e924:	60f8      	str	r0, [r7, #12]
 800e926:	60b9      	str	r1, [r7, #8]
 800e928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	211f      	movs	r1, #31
 800e932:	400a      	ands	r2, r1
 800e934:	210f      	movs	r1, #15
 800e936:	4091      	lsls	r1, r2
 800e938:	000a      	movs	r2, r1
 800e93a:	43d2      	mvns	r2, r2
 800e93c:	401a      	ands	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	0e9b      	lsrs	r3, r3, #26
 800e942:	210f      	movs	r1, #15
 800e944:	4019      	ands	r1, r3
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	201f      	movs	r0, #31
 800e94a:	4003      	ands	r3, r0
 800e94c:	4099      	lsls	r1, r3
 800e94e:	000b      	movs	r3, r1
 800e950:	431a      	orrs	r2, r3
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	46bd      	mov	sp, r7
 800e95a:	b004      	add	sp, #16
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b082      	sub	sp, #8
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	025b      	lsls	r3, r3, #9
 800e970:	0a5b      	lsrs	r3, r3, #9
 800e972:	431a      	orrs	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e978:	46c0      	nop			@ (mov r8, r8)
 800e97a:	46bd      	mov	sp, r7
 800e97c:	b002      	add	sp, #8
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	0252      	lsls	r2, r2, #9
 800e992:	0a52      	lsrs	r2, r2, #9
 800e994:	43d2      	mvns	r2, r2
 800e996:	401a      	ands	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e99c:	46c0      	nop			@ (mov r8, r8)
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	b002      	add	sp, #8
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	695b      	ldr	r3, [r3, #20]
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	0212      	lsls	r2, r2, #8
 800e9b8:	43d2      	mvns	r2, r2
 800e9ba:	401a      	ands	r2, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	6879      	ldr	r1, [r7, #4]
 800e9c2:	400b      	ands	r3, r1
 800e9c4:	4904      	ldr	r1, [pc, #16]	@ (800e9d8 <LL_ADC_SetChannelSamplingTime+0x34>)
 800e9c6:	400b      	ands	r3, r1
 800e9c8:	431a      	orrs	r2, r3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800e9ce:	46c0      	nop			@ (mov r8, r8)
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	b004      	add	sp, #16
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	46c0      	nop			@ (mov r8, r8)
 800e9d8:	7fffff00 	.word	0x7fffff00

0800e9dc <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	4a11      	ldr	r2, [pc, #68]	@ (800ea30 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d103      	bne.n	800e9f8 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	330c      	adds	r3, #12
 800e9f4:	617b      	str	r3, [r7, #20]
 800e9f6:	e009      	b.n	800ea0c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	33a0      	adds	r3, #160	@ 0xa0
 800e9fc:	0019      	movs	r1, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	0d5b      	lsrs	r3, r3, #21
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	2204      	movs	r2, #4
 800ea06:	4013      	ands	r3, r2
 800ea08:	18cb      	adds	r3, r1, r3
 800ea0a:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	4908      	ldr	r1, [pc, #32]	@ (800ea34 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 800ea14:	400a      	ands	r2, r1
 800ea16:	43d2      	mvns	r2, r2
 800ea18:	401a      	ands	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	400b      	ands	r3, r1
 800ea20:	431a      	orrs	r2, r3
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800ea26:	46c0      	nop			@ (mov r8, r8)
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	b006      	add	sp, #24
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	7cc00000 	.word	0x7cc00000
 800ea34:	7cc7ffff 	.word	0x7cc7ffff

0800ea38 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	3320      	adds	r3, #32
 800ea4a:	0018      	movs	r0, r3
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	0d1b      	lsrs	r3, r3, #20
 800ea50:	2203      	movs	r2, #3
 800ea52:	401a      	ands	r2, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	0d5b      	lsrs	r3, r3, #21
 800ea58:	2101      	movs	r1, #1
 800ea5a:	400b      	ands	r3, r1
 800ea5c:	18d3      	adds	r3, r2, r3
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	18c3      	adds	r3, r0, r3
 800ea62:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a06      	ldr	r2, [pc, #24]	@ (800ea84 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 800ea6a:	401a      	ands	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	0419      	lsls	r1, r3, #16
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	430b      	orrs	r3, r1
 800ea74:	431a      	orrs	r2, r3
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800ea7a:	46c0      	nop			@ (mov r8, r8)
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	b006      	add	sp, #24
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	46c0      	nop			@ (mov r8, r8)
 800ea84:	f000f000 	.word	0xf000f000

0800ea88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	4a05      	ldr	r2, [pc, #20]	@ (800eaac <LL_ADC_EnableInternalRegulator+0x24>)
 800ea96:	4013      	ands	r3, r2
 800ea98:	2280      	movs	r2, #128	@ 0x80
 800ea9a:	0552      	lsls	r2, r2, #21
 800ea9c:	431a      	orrs	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800eaa2:	46c0      	nop			@ (mov r8, r8)
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	b002      	add	sp, #8
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	46c0      	nop			@ (mov r8, r8)
 800eaac:	6fffffe8 	.word	0x6fffffe8

0800eab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	689a      	ldr	r2, [r3, #8]
 800eabc:	2380      	movs	r3, #128	@ 0x80
 800eabe:	055b      	lsls	r3, r3, #21
 800eac0:	401a      	ands	r2, r3
 800eac2:	2380      	movs	r3, #128	@ 0x80
 800eac4:	055b      	lsls	r3, r3, #21
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d101      	bne.n	800eace <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e000      	b.n	800ead0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800eace:	2300      	movs	r3, #0
}
 800ead0:	0018      	movs	r0, r3
 800ead2:	46bd      	mov	sp, r7
 800ead4:	b002      	add	sp, #8
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	4a04      	ldr	r2, [pc, #16]	@ (800eaf8 <LL_ADC_Enable+0x20>)
 800eae6:	4013      	ands	r3, r2
 800eae8:	2201      	movs	r2, #1
 800eaea:	431a      	orrs	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800eaf0:	46c0      	nop			@ (mov r8, r8)
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	b002      	add	sp, #8
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	7fffffe8 	.word	0x7fffffe8

0800eafc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	4a04      	ldr	r2, [pc, #16]	@ (800eb1c <LL_ADC_Disable+0x20>)
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	2202      	movs	r2, #2
 800eb0e:	431a      	orrs	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800eb14:	46c0      	nop			@ (mov r8, r8)
 800eb16:	46bd      	mov	sp, r7
 800eb18:	b002      	add	sp, #8
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	7fffffe8 	.word	0x7fffffe8

0800eb20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	4013      	ands	r3, r2
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d101      	bne.n	800eb38 <LL_ADC_IsEnabled+0x18>
 800eb34:	2301      	movs	r3, #1
 800eb36:	e000      	b.n	800eb3a <LL_ADC_IsEnabled+0x1a>
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	0018      	movs	r0, r3
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	b002      	add	sp, #8
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b082      	sub	sp, #8
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	4013      	ands	r3, r2
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d101      	bne.n	800eb5a <LL_ADC_IsDisableOngoing+0x18>
 800eb56:	2301      	movs	r3, #1
 800eb58:	e000      	b.n	800eb5c <LL_ADC_IsDisableOngoing+0x1a>
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	0018      	movs	r0, r3
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	b002      	add	sp, #8
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	2204      	movs	r2, #4
 800eb72:	4013      	ands	r3, r2
 800eb74:	2b04      	cmp	r3, #4
 800eb76:	d101      	bne.n	800eb7c <LL_ADC_REG_IsConversionOngoing+0x18>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e000      	b.n	800eb7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	0018      	movs	r0, r3
 800eb80:	46bd      	mov	sp, r7
 800eb82:	b002      	add	sp, #8
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b082      	sub	sp, #8
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2280      	movs	r2, #128	@ 0x80
 800eb92:	601a      	str	r2, [r3, #0]
}
 800eb94:	46c0      	nop			@ (mov r8, r8)
 800eb96:	46bd      	mov	sp, r7
 800eb98:	b002      	add	sp, #8
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2280      	movs	r2, #128	@ 0x80
 800eba8:	0052      	lsls	r2, r2, #1
 800ebaa:	601a      	str	r2, [r3, #0]
}
 800ebac:	46c0      	nop			@ (mov r8, r8)
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	b002      	add	sp, #8
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2280      	movs	r2, #128	@ 0x80
 800ebc0:	0092      	lsls	r2, r2, #2
 800ebc2:	601a      	str	r2, [r3, #0]
}
 800ebc4:	46c0      	nop			@ (mov r8, r8)
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	b002      	add	sp, #8
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	2280      	movs	r2, #128	@ 0x80
 800ebda:	431a      	orrs	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	605a      	str	r2, [r3, #4]
}
 800ebe0:	46c0      	nop			@ (mov r8, r8)
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	b002      	add	sp, #8
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2280      	movs	r2, #128	@ 0x80
 800ebf6:	0052      	lsls	r2, r2, #1
 800ebf8:	431a      	orrs	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	605a      	str	r2, [r3, #4]
}
 800ebfe:	46c0      	nop			@ (mov r8, r8)
 800ec00:	46bd      	mov	sp, r7
 800ec02:	b002      	add	sp, #8
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b082      	sub	sp, #8
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	2280      	movs	r2, #128	@ 0x80
 800ec14:	0092      	lsls	r2, r2, #2
 800ec16:	431a      	orrs	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	605a      	str	r2, [r3, #4]
}
 800ec1c:	46c0      	nop			@ (mov r8, r8)
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	b002      	add	sp, #8
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	2280      	movs	r2, #128	@ 0x80
 800ec32:	4393      	bics	r3, r2
 800ec34:	001a      	movs	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	605a      	str	r2, [r3, #4]
}
 800ec3a:	46c0      	nop			@ (mov r8, r8)
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b002      	add	sp, #8
 800ec40:	bd80      	pop	{r7, pc}
	...

0800ec44 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	4a03      	ldr	r2, [pc, #12]	@ (800ec60 <LL_ADC_DisableIT_AWD2+0x1c>)
 800ec52:	401a      	ands	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	605a      	str	r2, [r3, #4]
}
 800ec58:	46c0      	nop			@ (mov r8, r8)
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	b002      	add	sp, #8
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	fffffeff 	.word	0xfffffeff

0800ec64 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	4a03      	ldr	r2, [pc, #12]	@ (800ec80 <LL_ADC_DisableIT_AWD3+0x1c>)
 800ec72:	401a      	ands	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	605a      	str	r2, [r3, #4]
}
 800ec78:	46c0      	nop			@ (mov r8, r8)
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	b002      	add	sp, #8
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	fffffdff 	.word	0xfffffdff

0800ec84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b088      	sub	sp, #32
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ec8c:	231f      	movs	r3, #31
 800ec8e:	18fb      	adds	r3, r7, r3
 800ec90:	2200      	movs	r2, #0
 800ec92:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	e17f      	b.n	800efaa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	0018      	movs	r0, r3
 800ecb6:	f7fa fb7f 	bl	80093b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2254      	movs	r2, #84	@ 0x54
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	0018      	movs	r0, r3
 800ecce:	f7ff feef 	bl	800eab0 <LL_ADC_IsInternalRegulatorEnabled>
 800ecd2:	1e03      	subs	r3, r0, #0
 800ecd4:	d115      	bne.n	800ed02 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	0018      	movs	r0, r3
 800ecdc:	f7ff fed4 	bl	800ea88 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ece0:	4bb4      	ldr	r3, [pc, #720]	@ (800efb4 <HAL_ADC_Init+0x330>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	49b4      	ldr	r1, [pc, #720]	@ (800efb8 <HAL_ADC_Init+0x334>)
 800ece6:	0018      	movs	r0, r3
 800ece8:	f7f1 fa16 	bl	8000118 <__udivsi3>
 800ecec:	0003      	movs	r3, r0
 800ecee:	3301      	adds	r3, #1
 800ecf0:	005b      	lsls	r3, r3, #1
 800ecf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800ecf4:	e002      	b.n	800ecfc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1f9      	bne.n	800ecf6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	0018      	movs	r0, r3
 800ed08:	f7ff fed2 	bl	800eab0 <LL_ADC_IsInternalRegulatorEnabled>
 800ed0c:	1e03      	subs	r3, r0, #0
 800ed0e:	d10f      	bne.n	800ed30 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed14:	2210      	movs	r2, #16
 800ed16:	431a      	orrs	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed20:	2201      	movs	r2, #1
 800ed22:	431a      	orrs	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ed28:	231f      	movs	r3, #31
 800ed2a:	18fb      	adds	r3, r7, r3
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	0018      	movs	r0, r3
 800ed36:	f7ff ff15 	bl	800eb64 <LL_ADC_REG_IsConversionOngoing>
 800ed3a:	0003      	movs	r3, r0
 800ed3c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed42:	2210      	movs	r2, #16
 800ed44:	4013      	ands	r3, r2
 800ed46:	d000      	beq.n	800ed4a <HAL_ADC_Init+0xc6>
 800ed48:	e122      	b.n	800ef90 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d000      	beq.n	800ed52 <HAL_ADC_Init+0xce>
 800ed50:	e11e      	b.n	800ef90 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed56:	4a99      	ldr	r2, [pc, #612]	@ (800efbc <HAL_ADC_Init+0x338>)
 800ed58:	4013      	ands	r3, r2
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	431a      	orrs	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	0018      	movs	r0, r3
 800ed68:	f7ff feda 	bl	800eb20 <LL_ADC_IsEnabled>
 800ed6c:	1e03      	subs	r3, r0, #0
 800ed6e:	d000      	beq.n	800ed72 <HAL_ADC_Init+0xee>
 800ed70:	e0ad      	b.n	800eece <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7e1b      	ldrb	r3, [r3, #24]
 800ed7a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800ed7c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	7e5b      	ldrb	r3, [r3, #25]
 800ed82:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800ed84:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7e9b      	ldrb	r3, [r3, #26]
 800ed8a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800ed8c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <HAL_ADC_Init+0x118>
 800ed96:	2380      	movs	r3, #128	@ 0x80
 800ed98:	015b      	lsls	r3, r3, #5
 800ed9a:	e000      	b.n	800ed9e <HAL_ADC_Init+0x11a>
 800ed9c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800ed9e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800eda4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	da04      	bge.n	800edb8 <HAL_ADC_Init+0x134>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	005b      	lsls	r3, r3, #1
 800edb4:	085b      	lsrs	r3, r3, #1
 800edb6:	e001      	b.n	800edbc <HAL_ADC_Init+0x138>
 800edb8:	2380      	movs	r3, #128	@ 0x80
 800edba:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800edbc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	212c      	movs	r1, #44	@ 0x2c
 800edc2:	5c5b      	ldrb	r3, [r3, r1]
 800edc4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800edc6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	4313      	orrs	r3, r2
 800edcc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2220      	movs	r2, #32
 800edd2:	5c9b      	ldrb	r3, [r3, r2]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d115      	bne.n	800ee04 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7e9b      	ldrb	r3, [r3, #26]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d105      	bne.n	800edec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	2280      	movs	r2, #128	@ 0x80
 800ede4:	0252      	lsls	r2, r2, #9
 800ede6:	4313      	orrs	r3, r2
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	e00b      	b.n	800ee04 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edf0:	2220      	movs	r2, #32
 800edf2:	431a      	orrs	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edfc:	2201      	movs	r2, #1
 800edfe:	431a      	orrs	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00a      	beq.n	800ee22 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee10:	23e0      	movs	r3, #224	@ 0xe0
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	69ba      	ldr	r2, [r7, #24]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	4a65      	ldr	r2, [pc, #404]	@ (800efc0 <HAL_ADC_Init+0x33c>)
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	0019      	movs	r1, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	69ba      	ldr	r2, [r7, #24]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	0f9b      	lsrs	r3, r3, #30
 800ee3e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ee44:	4313      	orrs	r3, r2
 800ee46:	697a      	ldr	r2, [r7, #20]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	223c      	movs	r2, #60	@ 0x3c
 800ee50:	5c9b      	ldrb	r3, [r3, r2]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d111      	bne.n	800ee7a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	0f9b      	lsrs	r3, r3, #30
 800ee5c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ee62:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800ee68:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800ee6e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	2201      	movs	r2, #1
 800ee76:	4313      	orrs	r3, r2
 800ee78:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	691b      	ldr	r3, [r3, #16]
 800ee80:	4a50      	ldr	r2, [pc, #320]	@ (800efc4 <HAL_ADC_Init+0x340>)
 800ee82:	4013      	ands	r3, r2
 800ee84:	0019      	movs	r1, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	685a      	ldr	r2, [r3, #4]
 800ee94:	23c0      	movs	r3, #192	@ 0xc0
 800ee96:	061b      	lsls	r3, r3, #24
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d018      	beq.n	800eece <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800eea0:	2380      	movs	r3, #128	@ 0x80
 800eea2:	05db      	lsls	r3, r3, #23
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d012      	beq.n	800eece <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800eeac:	2380      	movs	r3, #128	@ 0x80
 800eeae:	061b      	lsls	r3, r3, #24
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d00c      	beq.n	800eece <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800eeb4:	4b44      	ldr	r3, [pc, #272]	@ (800efc8 <HAL_ADC_Init+0x344>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a44      	ldr	r2, [pc, #272]	@ (800efcc <HAL_ADC_Init+0x348>)
 800eeba:	4013      	ands	r3, r2
 800eebc:	0019      	movs	r1, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	23f0      	movs	r3, #240	@ 0xf0
 800eec4:	039b      	lsls	r3, r3, #14
 800eec6:	401a      	ands	r2, r3
 800eec8:	4b3f      	ldr	r3, [pc, #252]	@ (800efc8 <HAL_ADC_Init+0x344>)
 800eeca:	430a      	orrs	r2, r1
 800eecc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eed6:	001a      	movs	r2, r3
 800eed8:	2100      	movs	r1, #0
 800eeda:	f7ff fcec 	bl	800e8b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee6:	493a      	ldr	r1, [pc, #232]	@ (800efd0 <HAL_ADC_Init+0x34c>)
 800eee8:	001a      	movs	r2, r3
 800eeea:	f7ff fce4 	bl	800e8b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d109      	bne.n	800ef0a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2110      	movs	r1, #16
 800ef02:	4249      	negs	r1, r1
 800ef04:	430a      	orrs	r2, r1
 800ef06:	629a      	str	r2, [r3, #40]	@ 0x28
 800ef08:	e018      	b.n	800ef3c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	691a      	ldr	r2, [r3, #16]
 800ef0e:	2380      	movs	r3, #128	@ 0x80
 800ef10:	039b      	lsls	r3, r3, #14
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d112      	bne.n	800ef3c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	69db      	ldr	r3, [r3, #28]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	221c      	movs	r2, #28
 800ef26:	4013      	ands	r3, r2
 800ef28:	2210      	movs	r2, #16
 800ef2a:	4252      	negs	r2, r2
 800ef2c:	409a      	lsls	r2, r3
 800ef2e:	0011      	movs	r1, r2
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	430a      	orrs	r2, r1
 800ef3a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2100      	movs	r1, #0
 800ef42:	0018      	movs	r0, r3
 800ef44:	f7ff fcd4 	bl	800e8f0 <LL_ADC_GetSamplingTimeCommonChannels>
 800ef48:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d10b      	bne.n	800ef6a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef5c:	2203      	movs	r2, #3
 800ef5e:	4393      	bics	r3, r2
 800ef60:	2201      	movs	r2, #1
 800ef62:	431a      	orrs	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ef68:	e01c      	b.n	800efa4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef6e:	2212      	movs	r2, #18
 800ef70:	4393      	bics	r3, r2
 800ef72:	2210      	movs	r2, #16
 800ef74:	431a      	orrs	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef7e:	2201      	movs	r2, #1
 800ef80:	431a      	orrs	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800ef86:	231f      	movs	r3, #31
 800ef88:	18fb      	adds	r3, r7, r3
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ef8e:	e009      	b.n	800efa4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef94:	2210      	movs	r2, #16
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800ef9c:	231f      	movs	r3, #31
 800ef9e:	18fb      	adds	r3, r7, r3
 800efa0:	2201      	movs	r2, #1
 800efa2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800efa4:	231f      	movs	r3, #31
 800efa6:	18fb      	adds	r3, r7, r3
 800efa8:	781b      	ldrb	r3, [r3, #0]
}
 800efaa:	0018      	movs	r0, r3
 800efac:	46bd      	mov	sp, r7
 800efae:	b008      	add	sp, #32
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	46c0      	nop			@ (mov r8, r8)
 800efb4:	20000220 	.word	0x20000220
 800efb8:	00030d40 	.word	0x00030d40
 800efbc:	fffffefd 	.word	0xfffffefd
 800efc0:	ffde0201 	.word	0xffde0201
 800efc4:	1ffffc02 	.word	0x1ffffc02
 800efc8:	40012708 	.word	0x40012708
 800efcc:	ffc3ffff 	.word	0xffc3ffff
 800efd0:	7fffff04 	.word	0x7fffff04

0800efd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800efd4:	b590      	push	{r4, r7, lr}
 800efd6:	b08b      	sub	sp, #44	@ 0x2c
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800efde:	2327      	movs	r3, #39	@ 0x27
 800efe0:	18fb      	adds	r3, r7, r3
 800efe2:	2200      	movs	r2, #0
 800efe4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2254      	movs	r2, #84	@ 0x54
 800efee:	5c9b      	ldrb	r3, [r3, r2]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_ADC_ConfigChannel+0x24>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e141      	b.n	800f27c <HAL_ADC_ConfigChannel+0x2a8>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2254      	movs	r2, #84	@ 0x54
 800effc:	2101      	movs	r1, #1
 800effe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	0018      	movs	r0, r3
 800f006:	f7ff fdad 	bl	800eb64 <LL_ADC_REG_IsConversionOngoing>
 800f00a:	1e03      	subs	r3, r0, #0
 800f00c:	d000      	beq.n	800f010 <HAL_ADC_ConfigChannel+0x3c>
 800f00e:	e124      	b.n	800f25a <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	2b02      	cmp	r3, #2
 800f016:	d100      	bne.n	800f01a <HAL_ADC_ConfigChannel+0x46>
 800f018:	e0d8      	b.n	800f1cc <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	691a      	ldr	r2, [r3, #16]
 800f01e:	2380      	movs	r3, #128	@ 0x80
 800f020:	061b      	lsls	r3, r3, #24
 800f022:	429a      	cmp	r2, r3
 800f024:	d004      	beq.n	800f030 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800f02a:	4a96      	ldr	r2, [pc, #600]	@ (800f284 <HAL_ADC_ConfigChannel+0x2b0>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d108      	bne.n	800f042 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	0019      	movs	r1, r3
 800f03a:	0010      	movs	r0, r2
 800f03c:	f7ff fc8f 	bl	800e95e <LL_ADC_REG_SetSequencerChAdd>
 800f040:	e060      	b.n	800f104 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	211f      	movs	r1, #31
 800f04c:	400b      	ands	r3, r1
 800f04e:	210f      	movs	r1, #15
 800f050:	4099      	lsls	r1, r3
 800f052:	000b      	movs	r3, r1
 800f054:	43db      	mvns	r3, r3
 800f056:	4013      	ands	r3, r2
 800f058:	001c      	movs	r4, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	025b      	lsls	r3, r3, #9
 800f060:	0a5b      	lsrs	r3, r3, #9
 800f062:	d105      	bne.n	800f070 <HAL_ADC_ConfigChannel+0x9c>
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	0e9b      	lsrs	r3, r3, #26
 800f06a:	221f      	movs	r2, #31
 800f06c:	401a      	ands	r2, r3
 800f06e:	e02e      	b.n	800f0ce <HAL_ADC_ConfigChannel+0xfa>
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800f076:	231f      	movs	r3, #31
 800f078:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	085b      	lsrs	r3, r3, #1
 800f082:	61bb      	str	r3, [r7, #24]
 800f084:	e00e      	b.n	800f0a4 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	2201      	movs	r2, #1
 800f090:	4013      	ands	r3, r2
 800f092:	693a      	ldr	r2, [r7, #16]
 800f094:	4313      	orrs	r3, r2
 800f096:	613b      	str	r3, [r7, #16]
    s--;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	3b01      	subs	r3, #1
 800f09c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	085b      	lsrs	r3, r3, #1
 800f0a2:	61bb      	str	r3, [r7, #24]
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1ed      	bne.n	800f086 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800f0aa:	693a      	ldr	r2, [r7, #16]
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	409a      	lsls	r2, r3
 800f0b0:	0013      	movs	r3, r2
 800f0b2:	613b      	str	r3, [r7, #16]
  return result;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d101      	bne.n	800f0c2 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800f0be:	2320      	movs	r3, #32
 800f0c0:	e004      	b.n	800f0cc <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 800f0c2:	69f8      	ldr	r0, [r7, #28]
 800f0c4:	f7f1 f99e 	bl	8000404 <__clzsi2>
 800f0c8:	0003      	movs	r3, r0
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	001a      	movs	r2, r3
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	211f      	movs	r1, #31
 800f0d4:	400b      	ands	r3, r1
 800f0d6:	409a      	lsls	r2, r3
 800f0d8:	0013      	movs	r3, r2
 800f0da:	0022      	movs	r2, r4
 800f0dc:	431a      	orrs	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	089b      	lsrs	r3, r3, #2
 800f0e8:	1c5a      	adds	r2, r3, #1
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	69db      	ldr	r3, [r3, #28]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d808      	bhi.n	800f104 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6818      	ldr	r0, [r3, #0]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	6859      	ldr	r1, [r3, #4]
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	001a      	movs	r2, r3
 800f100:	f7ff fc0d 	bl	800e91e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6818      	ldr	r0, [r3, #0]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	6819      	ldr	r1, [r3, #0]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	001a      	movs	r2, r3
 800f112:	f7ff fc47 	bl	800e9a4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	db00      	blt.n	800f120 <HAL_ADC_ConfigChannel+0x14c>
 800f11e:	e0a6      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f120:	4b59      	ldr	r3, [pc, #356]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f122:	0018      	movs	r0, r3
 800f124:	f7ff fbba 	bl	800e89c <LL_ADC_GetCommonPathInternalCh>
 800f128:	0003      	movs	r3, r0
 800f12a:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a56      	ldr	r2, [pc, #344]	@ (800f28c <HAL_ADC_ConfigChannel+0x2b8>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d122      	bne.n	800f17c <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800f136:	6a3a      	ldr	r2, [r7, #32]
 800f138:	2380      	movs	r3, #128	@ 0x80
 800f13a:	041b      	lsls	r3, r3, #16
 800f13c:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800f13e:	d11d      	bne.n	800f17c <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	2280      	movs	r2, #128	@ 0x80
 800f144:	0412      	lsls	r2, r2, #16
 800f146:	4313      	orrs	r3, r2
 800f148:	4a4f      	ldr	r2, [pc, #316]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f14a:	0019      	movs	r1, r3
 800f14c:	0010      	movs	r0, r2
 800f14e:	f7ff fb91 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f152:	4b4f      	ldr	r3, [pc, #316]	@ (800f290 <HAL_ADC_ConfigChannel+0x2bc>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	494f      	ldr	r1, [pc, #316]	@ (800f294 <HAL_ADC_ConfigChannel+0x2c0>)
 800f158:	0018      	movs	r0, r3
 800f15a:	f7f0 ffdd 	bl	8000118 <__udivsi3>
 800f15e:	0003      	movs	r3, r0
 800f160:	1c5a      	adds	r2, r3, #1
 800f162:	0013      	movs	r3, r2
 800f164:	005b      	lsls	r3, r3, #1
 800f166:	189b      	adds	r3, r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800f16c:	e002      	b.n	800f174 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3b01      	subs	r3, #1
 800f172:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1f9      	bne.n	800f16e <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800f17a:	e078      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a45      	ldr	r2, [pc, #276]	@ (800f298 <HAL_ADC_ConfigChannel+0x2c4>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d10e      	bne.n	800f1a4 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800f186:	6a3a      	ldr	r2, [r7, #32]
 800f188:	2380      	movs	r3, #128	@ 0x80
 800f18a:	045b      	lsls	r3, r3, #17
 800f18c:	4013      	ands	r3, r2
 800f18e:	d109      	bne.n	800f1a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	2280      	movs	r2, #128	@ 0x80
 800f194:	0452      	lsls	r2, r2, #17
 800f196:	4313      	orrs	r3, r2
 800f198:	4a3b      	ldr	r2, [pc, #236]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f19a:	0019      	movs	r1, r3
 800f19c:	0010      	movs	r0, r2
 800f19e:	f7ff fb69 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
 800f1a2:	e064      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a3c      	ldr	r2, [pc, #240]	@ (800f29c <HAL_ADC_ConfigChannel+0x2c8>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d15f      	bne.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800f1ae:	6a3a      	ldr	r2, [r7, #32]
 800f1b0:	2380      	movs	r3, #128	@ 0x80
 800f1b2:	03db      	lsls	r3, r3, #15
 800f1b4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800f1b6:	d15a      	bne.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	2280      	movs	r2, #128	@ 0x80
 800f1bc:	03d2      	lsls	r2, r2, #15
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	4a31      	ldr	r2, [pc, #196]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f1c2:	0019      	movs	r1, r3
 800f1c4:	0010      	movs	r0, r2
 800f1c6:	f7ff fb55 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
 800f1ca:	e050      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691a      	ldr	r2, [r3, #16]
 800f1d0:	2380      	movs	r3, #128	@ 0x80
 800f1d2:	061b      	lsls	r3, r3, #24
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d004      	beq.n	800f1e2 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800f1dc:	4a29      	ldr	r2, [pc, #164]	@ (800f284 <HAL_ADC_ConfigChannel+0x2b0>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d107      	bne.n	800f1f2 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	0019      	movs	r1, r3
 800f1ec:	0010      	movs	r0, r2
 800f1ee:	f7ff fbc7 	bl	800e980 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	da39      	bge.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f1fa:	4b23      	ldr	r3, [pc, #140]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	f7ff fb4d 	bl	800e89c <LL_ADC_GetCommonPathInternalCh>
 800f202:	0003      	movs	r3, r0
 800f204:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a20      	ldr	r2, [pc, #128]	@ (800f28c <HAL_ADC_ConfigChannel+0x2b8>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d108      	bne.n	800f222 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f210:	6a3b      	ldr	r3, [r7, #32]
 800f212:	4a23      	ldr	r2, [pc, #140]	@ (800f2a0 <HAL_ADC_ConfigChannel+0x2cc>)
 800f214:	4013      	ands	r3, r2
 800f216:	4a1c      	ldr	r2, [pc, #112]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f218:	0019      	movs	r1, r3
 800f21a:	0010      	movs	r0, r2
 800f21c:	f7ff fb2a 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
 800f220:	e025      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a1c      	ldr	r2, [pc, #112]	@ (800f298 <HAL_ADC_ConfigChannel+0x2c4>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d108      	bne.n	800f23e <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	4a1d      	ldr	r2, [pc, #116]	@ (800f2a4 <HAL_ADC_ConfigChannel+0x2d0>)
 800f230:	4013      	ands	r3, r2
 800f232:	4a15      	ldr	r2, [pc, #84]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f234:	0019      	movs	r1, r3
 800f236:	0010      	movs	r0, r2
 800f238:	f7ff fb1c 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
 800f23c:	e017      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a16      	ldr	r2, [pc, #88]	@ (800f29c <HAL_ADC_ConfigChannel+0x2c8>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d112      	bne.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	4a17      	ldr	r2, [pc, #92]	@ (800f2a8 <HAL_ADC_ConfigChannel+0x2d4>)
 800f24c:	4013      	ands	r3, r2
 800f24e:	4a0e      	ldr	r2, [pc, #56]	@ (800f288 <HAL_ADC_ConfigChannel+0x2b4>)
 800f250:	0019      	movs	r1, r3
 800f252:	0010      	movs	r0, r2
 800f254:	f7ff fb0e 	bl	800e874 <LL_ADC_SetCommonPathInternalCh>
 800f258:	e009      	b.n	800f26e <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f25e:	2220      	movs	r2, #32
 800f260:	431a      	orrs	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800f266:	2327      	movs	r3, #39	@ 0x27
 800f268:	18fb      	adds	r3, r7, r3
 800f26a:	2201      	movs	r2, #1
 800f26c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2254      	movs	r2, #84	@ 0x54
 800f272:	2100      	movs	r1, #0
 800f274:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800f276:	2327      	movs	r3, #39	@ 0x27
 800f278:	18fb      	adds	r3, r7, r3
 800f27a:	781b      	ldrb	r3, [r3, #0]
}
 800f27c:	0018      	movs	r0, r3
 800f27e:	46bd      	mov	sp, r7
 800f280:	b00b      	add	sp, #44	@ 0x2c
 800f282:	bd90      	pop	{r4, r7, pc}
 800f284:	80000004 	.word	0x80000004
 800f288:	40012708 	.word	0x40012708
 800f28c:	ac000800 	.word	0xac000800
 800f290:	20000220 	.word	0x20000220
 800f294:	00030d40 	.word	0x00030d40
 800f298:	b4002000 	.word	0xb4002000
 800f29c:	b0001000 	.word	0xb0001000
 800f2a0:	ff7fffff 	.word	0xff7fffff
 800f2a4:	feffffff 	.word	0xfeffffff
 800f2a8:	ffbfffff 	.word	0xffbfffff

0800f2ac <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 800f2ac:	b590      	push	{r4, r7, lr}
 800f2ae:	b08f      	sub	sp, #60	@ 0x3c
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2b6:	2337      	movs	r3, #55	@ 0x37
 800f2b8:	18fb      	adds	r3, r7, r3
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2254      	movs	r2, #84	@ 0x54
 800f2c6:	5c9b      	ldrb	r3, [r3, r2]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d101      	bne.n	800f2d0 <HAL_ADC_AnalogWDGConfig+0x24>
 800f2cc:	2302      	movs	r3, #2
 800f2ce:	e195      	b.n	800f5fc <HAL_ADC_AnalogWDGConfig+0x350>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2254      	movs	r2, #84	@ 0x54
 800f2d4:	2101      	movs	r1, #1
 800f2d6:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	0018      	movs	r0, r3
 800f2de:	f7ff fc41 	bl	800eb64 <LL_ADC_REG_IsConversionOngoing>
 800f2e2:	1e03      	subs	r3, r0, #0
 800f2e4:	d000      	beq.n	800f2e8 <HAL_ADC_AnalogWDGConfig+0x3c>
 800f2e6:	e156      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4ac5      	ldr	r2, [pc, #788]	@ (800f604 <HAL_ADC_AnalogWDGConfig+0x358>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d162      	bne.n	800f3b8 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	0018      	movs	r0, r3
 800f2f8:	f7ff fc12 	bl	800eb20 <LL_ADC_IsEnabled>
 800f2fc:	1e03      	subs	r3, r0, #0
 800f2fe:	d009      	beq.n	800f314 <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 800f300:	2301      	movs	r3, #1
 800f302:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 800f304:	2337      	movs	r3, #55	@ 0x37
 800f306:	18fc      	adds	r4, r7, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	0018      	movs	r0, r3
 800f30c:	f000 fa0e 	bl	800f72c <ADC_Disable>
 800f310:	0003      	movs	r3, r0
 800f312:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	2280      	movs	r2, #128	@ 0x80
 800f31a:	0412      	lsls	r2, r2, #16
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d011      	beq.n	800f344 <HAL_ADC_AnalogWDGConfig+0x98>
 800f320:	22c0      	movs	r2, #192	@ 0xc0
 800f322:	0412      	lsls	r2, r2, #16
 800f324:	4293      	cmp	r3, r2
 800f326:	d115      	bne.n	800f354 <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	4ab5      	ldr	r2, [pc, #724]	@ (800f608 <HAL_ADC_AnalogWDGConfig+0x35c>)
 800f332:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800f334:	22c0      	movs	r2, #192	@ 0xc0
 800f336:	0412      	lsls	r2, r2, #16
 800f338:	4313      	orrs	r3, r2
 800f33a:	49b2      	ldr	r1, [pc, #712]	@ (800f604 <HAL_ADC_AnalogWDGConfig+0x358>)
 800f33c:	001a      	movs	r2, r3
 800f33e:	f7ff fb4d 	bl	800e9dc <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800f342:	e00f      	b.n	800f364 <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4ab0      	ldr	r2, [pc, #704]	@ (800f60c <HAL_ADC_AnalogWDGConfig+0x360>)
 800f34a:	49ae      	ldr	r1, [pc, #696]	@ (800f604 <HAL_ADC_AnalogWDGConfig+0x358>)
 800f34c:	0018      	movs	r0, r3
 800f34e:	f7ff fb45 	bl	800e9dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800f352:	e007      	b.n	800f364 <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	49aa      	ldr	r1, [pc, #680]	@ (800f604 <HAL_ADC_AnalogWDGConfig+0x358>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	0018      	movs	r0, r3
 800f35e:	f7ff fb3d 	bl	800e9dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800f362:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 800f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f366:	2b01      	cmp	r3, #1
 800f368:	d10b      	bne.n	800f382 <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 800f36a:	2237      	movs	r2, #55	@ 0x37
 800f36c:	18bb      	adds	r3, r7, r2
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d106      	bne.n	800f382 <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 800f374:	18bc      	adds	r4, r7, r2
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	0018      	movs	r0, r3
 800f37a:	f000 f951 	bl	800f620 <ADC_Enable>
 800f37e:	0003      	movs	r3, r0
 800f380:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f386:	4aa2      	ldr	r2, [pc, #648]	@ (800f610 <HAL_ADC_AnalogWDGConfig+0x364>)
 800f388:	401a      	ands	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	0018      	movs	r0, r3
 800f394:	f7ff fbf7 	bl	800eb86 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	7b1b      	ldrb	r3, [r3, #12]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d105      	bne.n	800f3ac <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	0018      	movs	r0, r3
 800f3a6:	f7ff fc11 	bl	800ebcc <LL_ADC_EnableIT_AWD1>
 800f3aa:	e0f4      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	0018      	movs	r0, r3
 800f3b2:	f7ff fc37 	bl	800ec24 <LL_ADC_DisableIT_AWD1>
 800f3b6:	e0ee      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2280      	movs	r2, #128	@ 0x80
 800f3be:	0412      	lsls	r2, r2, #16
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d100      	bne.n	800f3c6 <HAL_ADC_AnalogWDGConfig+0x11a>
 800f3c4:	e09b      	b.n	800f4fe <HAL_ADC_AnalogWDGConfig+0x252>
 800f3c6:	22c0      	movs	r2, #192	@ 0xc0
 800f3c8:	0412      	lsls	r2, r2, #16
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d000      	beq.n	800f3d0 <HAL_ADC_AnalogWDGConfig+0x124>
 800f3ce:	e09f      	b.n	800f510 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a8f      	ldr	r2, [pc, #572]	@ (800f614 <HAL_ADC_AnalogWDGConfig+0x368>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d148      	bne.n	800f46c <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	025b      	lsls	r3, r3, #9
 800f3e0:	0a5b      	lsrs	r3, r3, #9
 800f3e2:	d108      	bne.n	800f3f6 <HAL_ADC_AnalogWDGConfig+0x14a>
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	0e9b      	lsrs	r3, r3, #26
 800f3ea:	221f      	movs	r2, #31
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	409a      	lsls	r2, r3
 800f3f2:	0013      	movs	r3, r2
 800f3f4:	e030      	b.n	800f458 <HAL_ADC_AnalogWDGConfig+0x1ac>
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800f3fc:	231f      	movs	r3, #31
 800f3fe:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	085b      	lsrs	r3, r3, #1
 800f408:	623b      	str	r3, [r7, #32]
 800f40a:	e00e      	b.n	800f42a <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 800f412:	6a3b      	ldr	r3, [r7, #32]
 800f414:	2201      	movs	r2, #1
 800f416:	4013      	ands	r3, r2
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	61bb      	str	r3, [r7, #24]
    s--;
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	3b01      	subs	r3, #1
 800f422:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	085b      	lsrs	r3, r3, #1
 800f428:	623b      	str	r3, [r7, #32]
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d1ed      	bne.n	800f40c <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	409a      	lsls	r2, r3
 800f436:	0013      	movs	r3, r2
 800f438:	61bb      	str	r3, [r7, #24]
  return result;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 800f444:	2320      	movs	r3, #32
 800f446:	e004      	b.n	800f452 <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 800f448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f44a:	f7f0 ffdb 	bl	8000404 <__clzsi2>
 800f44e:	0003      	movs	r3, r0
 800f450:	b2db      	uxtb	r3, r3
 800f452:	001a      	movs	r2, r3
 800f454:	2301      	movs	r3, #1
 800f456:	4093      	lsls	r3, r2
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	6812      	ldr	r2, [r2, #0]
 800f45c:	21a0      	movs	r1, #160	@ 0xa0
 800f45e:	5851      	ldr	r1, [r2, r1]
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	6812      	ldr	r2, [r2, #0]
 800f464:	430b      	orrs	r3, r1
 800f466:	21a0      	movs	r1, #160	@ 0xa0
 800f468:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 800f46a:	e05a      	b.n	800f522 <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	025b      	lsls	r3, r3, #9
 800f472:	0a5b      	lsrs	r3, r3, #9
 800f474:	d108      	bne.n	800f488 <HAL_ADC_AnalogWDGConfig+0x1dc>
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	0e9b      	lsrs	r3, r3, #26
 800f47c:	221f      	movs	r2, #31
 800f47e:	4013      	ands	r3, r2
 800f480:	2201      	movs	r2, #1
 800f482:	409a      	lsls	r2, r3
 800f484:	0013      	movs	r3, r2
 800f486:	e030      	b.n	800f4ea <HAL_ADC_AnalogWDGConfig+0x23e>
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800f48e:	231f      	movs	r3, #31
 800f490:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	085b      	lsrs	r3, r3, #1
 800f49a:	613b      	str	r3, [r7, #16]
 800f49c:	e00e      	b.n	800f4bc <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	68ba      	ldr	r2, [r7, #8]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	60bb      	str	r3, [r7, #8]
    s--;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	085b      	lsrs	r3, r3, #1
 800f4ba:	613b      	str	r3, [r7, #16]
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1ed      	bne.n	800f49e <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	409a      	lsls	r2, r3
 800f4c8:	0013      	movs	r3, r2
 800f4ca:	60bb      	str	r3, [r7, #8]
  return result;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 800f4d6:	2320      	movs	r3, #32
 800f4d8:	e004      	b.n	800f4e4 <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 800f4da:	6978      	ldr	r0, [r7, #20]
 800f4dc:	f7f0 ff92 	bl	8000404 <__clzsi2>
 800f4e0:	0003      	movs	r3, r0
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	001a      	movs	r2, r3
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	4093      	lsls	r3, r2
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	21a4      	movs	r1, #164	@ 0xa4
 800f4f0:	5851      	ldr	r1, [r2, r1]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	6812      	ldr	r2, [r2, #0]
 800f4f6:	430b      	orrs	r3, r1
 800f4f8:	21a4      	movs	r1, #164	@ 0xa4
 800f4fa:	5053      	str	r3, [r2, r1]
          break;
 800f4fc:	e011      	b.n	800f522 <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800f506:	4a41      	ldr	r2, [pc, #260]	@ (800f60c <HAL_ADC_AnalogWDGConfig+0x360>)
 800f508:	0019      	movs	r1, r3
 800f50a:	f7ff fa67 	bl	800e9dc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 800f50e:	e008      	b.n	800f522 <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6818      	ldr	r0, [r3, #0]
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2200      	movs	r2, #0
 800f51a:	0019      	movs	r1, r3
 800f51c:	f7ff fa5e 	bl	800e9dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800f520:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a3b      	ldr	r2, [pc, #236]	@ (800f614 <HAL_ADC_AnalogWDGConfig+0x368>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d11a      	bne.n	800f562 <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f530:	4a39      	ldr	r2, [pc, #228]	@ (800f618 <HAL_ADC_AnalogWDGConfig+0x36c>)
 800f532:	401a      	ands	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	0018      	movs	r0, r3
 800f53e:	f7ff fb2d 	bl	800eb9c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	7b1b      	ldrb	r3, [r3, #12]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d105      	bne.n	800f556 <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	0018      	movs	r0, r3
 800f550:	f7ff fb4a 	bl	800ebe8 <LL_ADC_EnableIT_AWD2>
 800f554:	e01f      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	0018      	movs	r0, r3
 800f55c:	f7ff fb72 	bl	800ec44 <LL_ADC_DisableIT_AWD2>
 800f560:	e019      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f566:	4a2d      	ldr	r2, [pc, #180]	@ (800f61c <HAL_ADC_AnalogWDGConfig+0x370>)
 800f568:	401a      	ands	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	0018      	movs	r0, r3
 800f574:	f7ff fb1e 	bl	800ebb4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	7b1b      	ldrb	r3, [r3, #12]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d105      	bne.n	800f58c <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	0018      	movs	r0, r3
 800f586:	f7ff fb3e 	bl	800ec06 <LL_ADC_EnableIT_AWD3>
 800f58a:	e004      	b.n	800f596 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	0018      	movs	r0, r3
 800f592:	f7ff fb67 	bl	800ec64 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a1a      	ldr	r2, [pc, #104]	@ (800f604 <HAL_ADC_AnalogWDGConfig+0x358>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d118      	bne.n	800f5d2 <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	691a      	ldr	r2, [r3, #16]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	08db      	lsrs	r3, r3, #3
 800f5ac:	2103      	movs	r1, #3
 800f5ae:	400b      	ands	r3, r1
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	409a      	lsls	r2, r3
 800f5b4:	0013      	movs	r3, r2
 800f5b6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	695a      	ldr	r2, [r3, #20]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	08db      	lsrs	r3, r3, #3
 800f5c4:	2103      	movs	r1, #3
 800f5c6:	400b      	ands	r3, r1
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	409a      	lsls	r2, r3
 800f5cc:	0013      	movs	r3, r2
 800f5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5d0:	e005      	b.n	800f5de <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6818      	ldr	r0, [r3, #0]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	6819      	ldr	r1, [r3, #0]
 800f5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5ea:	f7ff fa25 	bl	800ea38 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2254      	movs	r2, #84	@ 0x54
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800f5f6:	2337      	movs	r3, #55	@ 0x37
 800f5f8:	18fb      	adds	r3, r7, r3
 800f5fa:	781b      	ldrb	r3, [r3, #0]
}
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	46bd      	mov	sp, r7
 800f600:	b00f      	add	sp, #60	@ 0x3c
 800f602:	bd90      	pop	{r4, r7, pc}
 800f604:	7cc00000 	.word	0x7cc00000
 800f608:	fc3fffff 	.word	0xfc3fffff
 800f60c:	0087ffff 	.word	0x0087ffff
 800f610:	fffeffff 	.word	0xfffeffff
 800f614:	0017ffff 	.word	0x0017ffff
 800f618:	fffdffff 	.word	0xfffdffff
 800f61c:	fffbffff 	.word	0xfffbffff

0800f620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800f628:	2300      	movs	r3, #0
 800f62a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	0018      	movs	r0, r3
 800f632:	f7ff fa75 	bl	800eb20 <LL_ADC_IsEnabled>
 800f636:	1e03      	subs	r3, r0, #0
 800f638:	d000      	beq.n	800f63c <ADC_Enable+0x1c>
 800f63a:	e069      	b.n	800f710 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	4a36      	ldr	r2, [pc, #216]	@ (800f71c <ADC_Enable+0xfc>)
 800f644:	4013      	ands	r3, r2
 800f646:	d00d      	beq.n	800f664 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f64c:	2210      	movs	r2, #16
 800f64e:	431a      	orrs	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f658:	2201      	movs	r2, #1
 800f65a:	431a      	orrs	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800f660:	2301      	movs	r3, #1
 800f662:	e056      	b.n	800f712 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	0018      	movs	r0, r3
 800f66a:	f7ff fa35 	bl	800ead8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800f66e:	4b2c      	ldr	r3, [pc, #176]	@ (800f720 <ADC_Enable+0x100>)
 800f670:	0018      	movs	r0, r3
 800f672:	f7ff f913 	bl	800e89c <LL_ADC_GetCommonPathInternalCh>
 800f676:	0002      	movs	r2, r0
 800f678:	2380      	movs	r3, #128	@ 0x80
 800f67a:	041b      	lsls	r3, r3, #16
 800f67c:	4013      	ands	r3, r2
 800f67e:	d00f      	beq.n	800f6a0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f680:	4b28      	ldr	r3, [pc, #160]	@ (800f724 <ADC_Enable+0x104>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4928      	ldr	r1, [pc, #160]	@ (800f728 <ADC_Enable+0x108>)
 800f686:	0018      	movs	r0, r3
 800f688:	f7f0 fd46 	bl	8000118 <__udivsi3>
 800f68c:	0003      	movs	r3, r0
 800f68e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800f690:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800f692:	e002      	b.n	800f69a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	3b01      	subs	r3, #1
 800f698:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1f9      	bne.n	800f694 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	7e5b      	ldrb	r3, [r3, #25]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d033      	beq.n	800f710 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800f6a8:	f7ff f8b8 	bl	800e81c <HAL_GetTick>
 800f6ac:	0003      	movs	r3, r0
 800f6ae:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f6b0:	e027      	b.n	800f702 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f7ff fa32 	bl	800eb20 <LL_ADC_IsEnabled>
 800f6bc:	1e03      	subs	r3, r0, #0
 800f6be:	d104      	bne.n	800f6ca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	0018      	movs	r0, r3
 800f6c6:	f7ff fa07 	bl	800ead8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f6ca:	f7ff f8a7 	bl	800e81c <HAL_GetTick>
 800f6ce:	0002      	movs	r2, r0
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d914      	bls.n	800f702 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	4013      	ands	r3, r2
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d00d      	beq.n	800f702 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	431a      	orrs	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	431a      	orrs	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800f6fe:	2301      	movs	r3, #1
 800f700:	e007      	b.n	800f712 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2201      	movs	r2, #1
 800f70a:	4013      	ands	r3, r2
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d1d0      	bne.n	800f6b2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	0018      	movs	r0, r3
 800f714:	46bd      	mov	sp, r7
 800f716:	b004      	add	sp, #16
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	46c0      	nop			@ (mov r8, r8)
 800f71c:	80000017 	.word	0x80000017
 800f720:	40012708 	.word	0x40012708
 800f724:	20000220 	.word	0x20000220
 800f728:	00030d40 	.word	0x00030d40

0800f72c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	0018      	movs	r0, r3
 800f73a:	f7ff fa02 	bl	800eb42 <LL_ADC_IsDisableOngoing>
 800f73e:	0003      	movs	r3, r0
 800f740:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	0018      	movs	r0, r3
 800f748:	f7ff f9ea 	bl	800eb20 <LL_ADC_IsEnabled>
 800f74c:	1e03      	subs	r3, r0, #0
 800f74e:	d046      	beq.n	800f7de <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d143      	bne.n	800f7de <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	2205      	movs	r2, #5
 800f75e:	4013      	ands	r3, r2
 800f760:	2b01      	cmp	r3, #1
 800f762:	d10d      	bne.n	800f780 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	0018      	movs	r0, r3
 800f76a:	f7ff f9c7 	bl	800eafc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2203      	movs	r2, #3
 800f774:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f776:	f7ff f851 	bl	800e81c <HAL_GetTick>
 800f77a:	0003      	movs	r3, r0
 800f77c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800f77e:	e028      	b.n	800f7d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f784:	2210      	movs	r2, #16
 800f786:	431a      	orrs	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f790:	2201      	movs	r2, #1
 800f792:	431a      	orrs	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	e021      	b.n	800f7e0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f79c:	f7ff f83e 	bl	800e81c <HAL_GetTick>
 800f7a0:	0002      	movs	r2, r0
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	2b02      	cmp	r3, #2
 800f7a8:	d913      	bls.n	800f7d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	d00d      	beq.n	800f7d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7ba:	2210      	movs	r2, #16
 800f7bc:	431a      	orrs	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e006      	b.n	800f7e0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	4013      	ands	r3, r2
 800f7dc:	d1de      	bne.n	800f79c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	0018      	movs	r0, r3
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	b004      	add	sp, #16
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <LL_ADC_GetCommonClock>:
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	23f0      	movs	r3, #240	@ 0xf0
 800f7f6:	039b      	lsls	r3, r3, #14
 800f7f8:	4013      	ands	r3, r2
}
 800f7fa:	0018      	movs	r0, r3
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	b002      	add	sp, #8
 800f800:	bd80      	pop	{r7, pc}

0800f802 <LL_ADC_GetClock>:
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b082      	sub	sp, #8
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	0f9b      	lsrs	r3, r3, #30
 800f810:	079b      	lsls	r3, r3, #30
}
 800f812:	0018      	movs	r0, r3
 800f814:	46bd      	mov	sp, r7
 800f816:	b002      	add	sp, #8
 800f818:	bd80      	pop	{r7, pc}

0800f81a <LL_ADC_SetCalibrationFactor>:
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
 800f822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	22b4      	movs	r2, #180	@ 0xb4
 800f828:	589b      	ldr	r3, [r3, r2]
 800f82a:	227f      	movs	r2, #127	@ 0x7f
 800f82c:	4393      	bics	r3, r2
 800f82e:	001a      	movs	r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	431a      	orrs	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	21b4      	movs	r1, #180	@ 0xb4
 800f838:	505a      	str	r2, [r3, r1]
}
 800f83a:	46c0      	nop			@ (mov r8, r8)
 800f83c:	46bd      	mov	sp, r7
 800f83e:	b002      	add	sp, #8
 800f840:	bd80      	pop	{r7, pc}

0800f842 <LL_ADC_GetCalibrationFactor>:
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	22b4      	movs	r2, #180	@ 0xb4
 800f84e:	589b      	ldr	r3, [r3, r2]
 800f850:	227f      	movs	r2, #127	@ 0x7f
 800f852:	4013      	ands	r3, r2
}
 800f854:	0018      	movs	r0, r3
 800f856:	46bd      	mov	sp, r7
 800f858:	b002      	add	sp, #8
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <LL_ADC_Enable>:
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	4a04      	ldr	r2, [pc, #16]	@ (800f87c <LL_ADC_Enable+0x20>)
 800f86a:	4013      	ands	r3, r2
 800f86c:	2201      	movs	r2, #1
 800f86e:	431a      	orrs	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	609a      	str	r2, [r3, #8]
}
 800f874:	46c0      	nop			@ (mov r8, r8)
 800f876:	46bd      	mov	sp, r7
 800f878:	b002      	add	sp, #8
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	7fffffe8 	.word	0x7fffffe8

0800f880 <LL_ADC_Disable>:
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	4a04      	ldr	r2, [pc, #16]	@ (800f8a0 <LL_ADC_Disable+0x20>)
 800f88e:	4013      	ands	r3, r2
 800f890:	2202      	movs	r2, #2
 800f892:	431a      	orrs	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	609a      	str	r2, [r3, #8]
}
 800f898:	46c0      	nop			@ (mov r8, r8)
 800f89a:	46bd      	mov	sp, r7
 800f89c:	b002      	add	sp, #8
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	7fffffe8 	.word	0x7fffffe8

0800f8a4 <LL_ADC_IsEnabled>:
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	4013      	ands	r3, r2
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d101      	bne.n	800f8bc <LL_ADC_IsEnabled+0x18>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e000      	b.n	800f8be <LL_ADC_IsEnabled+0x1a>
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	0018      	movs	r0, r3
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	b002      	add	sp, #8
 800f8c4:	bd80      	pop	{r7, pc}
	...

0800f8c8 <LL_ADC_StartCalibration>:
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	4a05      	ldr	r2, [pc, #20]	@ (800f8ec <LL_ADC_StartCalibration+0x24>)
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	2280      	movs	r2, #128	@ 0x80
 800f8da:	0612      	lsls	r2, r2, #24
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	609a      	str	r2, [r3, #8]
}
 800f8e2:	46c0      	nop			@ (mov r8, r8)
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	b002      	add	sp, #8
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	46c0      	nop			@ (mov r8, r8)
 800f8ec:	7fffffe8 	.word	0x7fffffe8

0800f8f0 <LL_ADC_IsCalibrationOnGoing>:
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	0fdb      	lsrs	r3, r3, #31
 800f8fe:	07da      	lsls	r2, r3, #31
 800f900:	2380      	movs	r3, #128	@ 0x80
 800f902:	061b      	lsls	r3, r3, #24
 800f904:	429a      	cmp	r2, r3
 800f906:	d101      	bne.n	800f90c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800f908:	2301      	movs	r3, #1
 800f90a:	e000      	b.n	800f90e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800f90c:	2300      	movs	r3, #0
}
 800f90e:	0018      	movs	r0, r3
 800f910:	46bd      	mov	sp, r7
 800f912:	b002      	add	sp, #8
 800f914:	bd80      	pop	{r7, pc}
	...

0800f918 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800f918:	b590      	push	{r4, r7, lr}
 800f91a:	b08b      	sub	sp, #44	@ 0x2c
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800f920:	2300      	movs	r3, #0
 800f922:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2254      	movs	r2, #84	@ 0x54
 800f92c:	5c9b      	ldrb	r3, [r3, r2]
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d101      	bne.n	800f936 <HAL_ADCEx_Calibration_Start+0x1e>
 800f932:	2302      	movs	r3, #2
 800f934:	e0de      	b.n	800faf4 <HAL_ADCEx_Calibration_Start+0x1dc>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2254      	movs	r2, #84	@ 0x54
 800f93a:	2101      	movs	r1, #1
 800f93c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800f93e:	231f      	movs	r3, #31
 800f940:	18fc      	adds	r4, r7, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	0018      	movs	r0, r3
 800f946:	f7ff fef1 	bl	800f72c <ADC_Disable>
 800f94a:	0003      	movs	r3, r0
 800f94c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	0018      	movs	r0, r3
 800f954:	f7ff ffa6 	bl	800f8a4 <LL_ADC_IsEnabled>
 800f958:	1e03      	subs	r3, r0, #0
 800f95a:	d000      	beq.n	800f95e <HAL_ADCEx_Calibration_Start+0x46>
 800f95c:	e0bd      	b.n	800fada <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f962:	4a66      	ldr	r2, [pc, #408]	@ (800fafc <HAL_ADCEx_Calibration_Start+0x1e4>)
 800f964:	4013      	ands	r3, r2
 800f966:	2202      	movs	r2, #2
 800f968:	431a      	orrs	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	4a62      	ldr	r2, [pc, #392]	@ (800fb00 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800f976:	4013      	ands	r3, r2
 800f978:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	495f      	ldr	r1, [pc, #380]	@ (800fb04 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800f986:	400a      	ands	r2, r1
 800f988:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800f98a:	2300      	movs	r3, #0
 800f98c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f98e:	e02e      	b.n	800f9ee <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	0018      	movs	r0, r3
 800f996:	f7ff ff97 	bl	800f8c8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800f99a:	e015      	b.n	800f9c8 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	23ae      	movs	r3, #174	@ 0xae
 800f9a6:	029b      	lsls	r3, r3, #10
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d30d      	bcc.n	800f9c8 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9b0:	2212      	movs	r2, #18
 800f9b2:	4393      	bics	r3, r2
 800f9b4:	2210      	movs	r2, #16
 800f9b6:	431a      	orrs	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2254      	movs	r2, #84	@ 0x54
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e095      	b.n	800faf4 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	f7ff ff8f 	bl	800f8f0 <LL_ADC_IsCalibrationOnGoing>
 800f9d2:	1e03      	subs	r3, r0, #0
 800f9d4:	d1e2      	bne.n	800f99c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	0018      	movs	r0, r3
 800f9dc:	f7ff ff31 	bl	800f842 <LL_ADC_GetCalibrationFactor>
 800f9e0:	0002      	movs	r2, r0
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	189b      	adds	r3, r3, r2
 800f9e6:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f0:	2b07      	cmp	r3, #7
 800f9f2:	d9cd      	bls.n	800f990 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800f9f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9f6:	6a38      	ldr	r0, [r7, #32]
 800f9f8:	f7f0 fb8e 	bl	8000118 <__udivsi3>
 800f9fc:	0003      	movs	r3, r0
 800f9fe:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	0018      	movs	r0, r3
 800fa06:	f7ff ff29 	bl	800f85c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	0018      	movs	r0, r3
 800fa10:	f7ff fef7 	bl	800f802 <LL_ADC_GetClock>
 800fa14:	1e03      	subs	r3, r0, #0
 800fa16:	d11b      	bne.n	800fa50 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800fa18:	4b3b      	ldr	r3, [pc, #236]	@ (800fb08 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800fa1a:	0018      	movs	r0, r3
 800fa1c:	f7ff fee4 	bl	800f7e8 <LL_ADC_GetCommonClock>
 800fa20:	0003      	movs	r3, r0
 800fa22:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	23e0      	movs	r3, #224	@ 0xe0
 800fa28:	035b      	lsls	r3, r3, #13
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d310      	bcc.n	800fa50 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	0c9b      	lsrs	r3, r3, #18
 800fa32:	3b03      	subs	r3, #3
 800fa34:	2201      	movs	r2, #1
 800fa36:	409a      	lsls	r2, r3
 800fa38:	0013      	movs	r3, r2
 800fa3a:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	085b      	lsrs	r3, r3, #1
 800fa40:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800fa42:	e002      	b.n	800fa4a <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1f9      	bne.n	800fa44 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6a3a      	ldr	r2, [r7, #32]
 800fa56:	0011      	movs	r1, r2
 800fa58:	0018      	movs	r0, r3
 800fa5a:	f7ff fede 	bl	800f81a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7ff ff0c 	bl	800f880 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800fa68:	f7fe fed8 	bl	800e81c <HAL_GetTick>
 800fa6c:	0003      	movs	r3, r0
 800fa6e:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800fa70:	e01b      	b.n	800faaa <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fa72:	f7fe fed3 	bl	800e81c <HAL_GetTick>
 800fa76:	0002      	movs	r2, r0
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	1ad3      	subs	r3, r2, r3
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d914      	bls.n	800faaa <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	0018      	movs	r0, r3
 800fa86:	f7ff ff0d 	bl	800f8a4 <LL_ADC_IsEnabled>
 800fa8a:	1e03      	subs	r3, r0, #0
 800fa8c:	d00d      	beq.n	800faaa <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa92:	2210      	movs	r2, #16
 800fa94:	431a      	orrs	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa9e:	2201      	movs	r2, #1
 800faa0:	431a      	orrs	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e024      	b.n	800faf4 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	0018      	movs	r0, r3
 800fab0:	f7ff fef8 	bl	800f8a4 <LL_ADC_IsEnabled>
 800fab4:	1e03      	subs	r3, r0, #0
 800fab6:	d1dc      	bne.n	800fa72 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68d9      	ldr	r1, [r3, #12]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	69ba      	ldr	r2, [r7, #24]
 800fac4:	430a      	orrs	r2, r1
 800fac6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800facc:	2203      	movs	r2, #3
 800face:	4393      	bics	r3, r2
 800fad0:	2201      	movs	r2, #1
 800fad2:	431a      	orrs	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	659a      	str	r2, [r3, #88]	@ 0x58
 800fad8:	e005      	b.n	800fae6 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fade:	2210      	movs	r2, #16
 800fae0:	431a      	orrs	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2254      	movs	r2, #84	@ 0x54
 800faea:	2100      	movs	r1, #0
 800faec:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800faee:	231f      	movs	r3, #31
 800faf0:	18fb      	adds	r3, r7, r3
 800faf2:	781b      	ldrb	r3, [r3, #0]
}
 800faf4:	0018      	movs	r0, r3
 800faf6:	46bd      	mov	sp, r7
 800faf8:	b00b      	add	sp, #44	@ 0x2c
 800fafa:	bd90      	pop	{r4, r7, pc}
 800fafc:	fffffefd 	.word	0xfffffefd
 800fb00:	00008003 	.word	0x00008003
 800fb04:	ffff7ffc 	.word	0xffff7ffc
 800fb08:	40012708 	.word	0x40012708

0800fb0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	0002      	movs	r2, r0
 800fb14:	1dfb      	adds	r3, r7, #7
 800fb16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fb18:	1dfb      	adds	r3, r7, #7
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb1e:	d809      	bhi.n	800fb34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fb20:	1dfb      	adds	r3, r7, #7
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	001a      	movs	r2, r3
 800fb26:	231f      	movs	r3, #31
 800fb28:	401a      	ands	r2, r3
 800fb2a:	4b04      	ldr	r3, [pc, #16]	@ (800fb3c <__NVIC_EnableIRQ+0x30>)
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	4091      	lsls	r1, r2
 800fb30:	000a      	movs	r2, r1
 800fb32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800fb34:	46c0      	nop			@ (mov r8, r8)
 800fb36:	46bd      	mov	sp, r7
 800fb38:	b002      	add	sp, #8
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	e000e100 	.word	0xe000e100

0800fb40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	0002      	movs	r2, r0
 800fb48:	1dfb      	adds	r3, r7, #7
 800fb4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fb4c:	1dfb      	adds	r3, r7, #7
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb52:	d810      	bhi.n	800fb76 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fb54:	1dfb      	adds	r3, r7, #7
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	001a      	movs	r2, r3
 800fb5a:	231f      	movs	r3, #31
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	4908      	ldr	r1, [pc, #32]	@ (800fb80 <__NVIC_DisableIRQ+0x40>)
 800fb60:	2201      	movs	r2, #1
 800fb62:	409a      	lsls	r2, r3
 800fb64:	0013      	movs	r3, r2
 800fb66:	2280      	movs	r2, #128	@ 0x80
 800fb68:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fb6a:	f3bf 8f4f 	dsb	sy
}
 800fb6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800fb70:	f3bf 8f6f 	isb	sy
}
 800fb74:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800fb76:	46c0      	nop			@ (mov r8, r8)
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	b002      	add	sp, #8
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	46c0      	nop			@ (mov r8, r8)
 800fb80:	e000e100 	.word	0xe000e100

0800fb84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fb84:	b590      	push	{r4, r7, lr}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	0002      	movs	r2, r0
 800fb8c:	6039      	str	r1, [r7, #0]
 800fb8e:	1dfb      	adds	r3, r7, #7
 800fb90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fb92:	1dfb      	adds	r3, r7, #7
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb98:	d828      	bhi.n	800fbec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb9a:	4a2f      	ldr	r2, [pc, #188]	@ (800fc58 <__NVIC_SetPriority+0xd4>)
 800fb9c:	1dfb      	adds	r3, r7, #7
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	b25b      	sxtb	r3, r3
 800fba2:	089b      	lsrs	r3, r3, #2
 800fba4:	33c0      	adds	r3, #192	@ 0xc0
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	589b      	ldr	r3, [r3, r2]
 800fbaa:	1dfa      	adds	r2, r7, #7
 800fbac:	7812      	ldrb	r2, [r2, #0]
 800fbae:	0011      	movs	r1, r2
 800fbb0:	2203      	movs	r2, #3
 800fbb2:	400a      	ands	r2, r1
 800fbb4:	00d2      	lsls	r2, r2, #3
 800fbb6:	21ff      	movs	r1, #255	@ 0xff
 800fbb8:	4091      	lsls	r1, r2
 800fbba:	000a      	movs	r2, r1
 800fbbc:	43d2      	mvns	r2, r2
 800fbbe:	401a      	ands	r2, r3
 800fbc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	019b      	lsls	r3, r3, #6
 800fbc6:	22ff      	movs	r2, #255	@ 0xff
 800fbc8:	401a      	ands	r2, r3
 800fbca:	1dfb      	adds	r3, r7, #7
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	0018      	movs	r0, r3
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	4003      	ands	r3, r0
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbd8:	481f      	ldr	r0, [pc, #124]	@ (800fc58 <__NVIC_SetPriority+0xd4>)
 800fbda:	1dfb      	adds	r3, r7, #7
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	b25b      	sxtb	r3, r3
 800fbe0:	089b      	lsrs	r3, r3, #2
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	33c0      	adds	r3, #192	@ 0xc0
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800fbea:	e031      	b.n	800fc50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbec:	4a1b      	ldr	r2, [pc, #108]	@ (800fc5c <__NVIC_SetPriority+0xd8>)
 800fbee:	1dfb      	adds	r3, r7, #7
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	0019      	movs	r1, r3
 800fbf4:	230f      	movs	r3, #15
 800fbf6:	400b      	ands	r3, r1
 800fbf8:	3b08      	subs	r3, #8
 800fbfa:	089b      	lsrs	r3, r3, #2
 800fbfc:	3306      	adds	r3, #6
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	18d3      	adds	r3, r2, r3
 800fc02:	3304      	adds	r3, #4
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	1dfa      	adds	r2, r7, #7
 800fc08:	7812      	ldrb	r2, [r2, #0]
 800fc0a:	0011      	movs	r1, r2
 800fc0c:	2203      	movs	r2, #3
 800fc0e:	400a      	ands	r2, r1
 800fc10:	00d2      	lsls	r2, r2, #3
 800fc12:	21ff      	movs	r1, #255	@ 0xff
 800fc14:	4091      	lsls	r1, r2
 800fc16:	000a      	movs	r2, r1
 800fc18:	43d2      	mvns	r2, r2
 800fc1a:	401a      	ands	r2, r3
 800fc1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	019b      	lsls	r3, r3, #6
 800fc22:	22ff      	movs	r2, #255	@ 0xff
 800fc24:	401a      	ands	r2, r3
 800fc26:	1dfb      	adds	r3, r7, #7
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	4003      	ands	r3, r0
 800fc30:	00db      	lsls	r3, r3, #3
 800fc32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fc34:	4809      	ldr	r0, [pc, #36]	@ (800fc5c <__NVIC_SetPriority+0xd8>)
 800fc36:	1dfb      	adds	r3, r7, #7
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	001c      	movs	r4, r3
 800fc3c:	230f      	movs	r3, #15
 800fc3e:	4023      	ands	r3, r4
 800fc40:	3b08      	subs	r3, #8
 800fc42:	089b      	lsrs	r3, r3, #2
 800fc44:	430a      	orrs	r2, r1
 800fc46:	3306      	adds	r3, #6
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	18c3      	adds	r3, r0, r3
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	601a      	str	r2, [r3, #0]
}
 800fc50:	46c0      	nop			@ (mov r8, r8)
 800fc52:	46bd      	mov	sp, r7
 800fc54:	b003      	add	sp, #12
 800fc56:	bd90      	pop	{r4, r7, pc}
 800fc58:	e000e100 	.word	0xe000e100
 800fc5c:	e000ed00 	.word	0xe000ed00

0800fc60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	1e5a      	subs	r2, r3, #1
 800fc6c:	2380      	movs	r3, #128	@ 0x80
 800fc6e:	045b      	lsls	r3, r3, #17
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d301      	bcc.n	800fc78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fc74:	2301      	movs	r3, #1
 800fc76:	e010      	b.n	800fc9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fc78:	4b0a      	ldr	r3, [pc, #40]	@ (800fca4 <SysTick_Config+0x44>)
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	3a01      	subs	r2, #1
 800fc7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fc80:	2301      	movs	r3, #1
 800fc82:	425b      	negs	r3, r3
 800fc84:	2103      	movs	r1, #3
 800fc86:	0018      	movs	r0, r3
 800fc88:	f7ff ff7c 	bl	800fb84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fc8c:	4b05      	ldr	r3, [pc, #20]	@ (800fca4 <SysTick_Config+0x44>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fc92:	4b04      	ldr	r3, [pc, #16]	@ (800fca4 <SysTick_Config+0x44>)
 800fc94:	2207      	movs	r2, #7
 800fc96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	0018      	movs	r0, r3
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	b002      	add	sp, #8
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	46c0      	nop			@ (mov r8, r8)
 800fca4:	e000e010 	.word	0xe000e010

0800fca8 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60b9      	str	r1, [r7, #8]
 800fcb0:	607a      	str	r2, [r7, #4]
 800fcb2:	210f      	movs	r1, #15
 800fcb4:	187b      	adds	r3, r7, r1
 800fcb6:	1c02      	adds	r2, r0, #0
 800fcb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	187b      	adds	r3, r7, r1
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	b25b      	sxtb	r3, r3
 800fcc2:	0011      	movs	r1, r2
 800fcc4:	0018      	movs	r0, r3
 800fcc6:	f7ff ff5d 	bl	800fb84 <__NVIC_SetPriority>
}
 800fcca:	46c0      	nop			@ (mov r8, r8)
 800fccc:	46bd      	mov	sp, r7
 800fcce:	b004      	add	sp, #16
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	0002      	movs	r2, r0
 800fcda:	1dfb      	adds	r3, r7, #7
 800fcdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fcde:	1dfb      	adds	r3, r7, #7
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	b25b      	sxtb	r3, r3
 800fce4:	0018      	movs	r0, r3
 800fce6:	f7ff ff11 	bl	800fb0c <__NVIC_EnableIRQ>
}
 800fcea:	46c0      	nop			@ (mov r8, r8)
 800fcec:	46bd      	mov	sp, r7
 800fcee:	b002      	add	sp, #8
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b082      	sub	sp, #8
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	0002      	movs	r2, r0
 800fcfa:	1dfb      	adds	r3, r7, #7
 800fcfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800fcfe:	1dfb      	adds	r3, r7, #7
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	b25b      	sxtb	r3, r3
 800fd04:	0018      	movs	r0, r3
 800fd06:	f7ff ff1b 	bl	800fb40 <__NVIC_DisableIRQ>
}
 800fd0a:	46c0      	nop			@ (mov r8, r8)
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	b002      	add	sp, #8
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	0018      	movs	r0, r3
 800fd1e:	f7ff ff9f 	bl	800fc60 <SysTick_Config>
 800fd22:	0003      	movs	r3, r0
}
 800fd24:	0018      	movs	r0, r3
 800fd26:	46bd      	mov	sp, r7
 800fd28:	b002      	add	sp, #8
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e091      	b.n	800fe62 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	001a      	movs	r2, r3
 800fd44:	4b49      	ldr	r3, [pc, #292]	@ (800fe6c <HAL_DMA_Init+0x140>)
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d810      	bhi.n	800fd6c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a48      	ldr	r2, [pc, #288]	@ (800fe70 <HAL_DMA_Init+0x144>)
 800fd50:	4694      	mov	ip, r2
 800fd52:	4463      	add	r3, ip
 800fd54:	2114      	movs	r1, #20
 800fd56:	0018      	movs	r0, r3
 800fd58:	f7f0 f9de 	bl	8000118 <__udivsi3>
 800fd5c:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800fd5e:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a43      	ldr	r2, [pc, #268]	@ (800fe74 <HAL_DMA_Init+0x148>)
 800fd68:	641a      	str	r2, [r3, #64]	@ 0x40
 800fd6a:	e00f      	b.n	800fd8c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a41      	ldr	r2, [pc, #260]	@ (800fe78 <HAL_DMA_Init+0x14c>)
 800fd72:	4694      	mov	ip, r2
 800fd74:	4463      	add	r3, ip
 800fd76:	2114      	movs	r1, #20
 800fd78:	0018      	movs	r0, r3
 800fd7a:	f7f0 f9cd 	bl	8000118 <__udivsi3>
 800fd7e:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800fd80:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4a3c      	ldr	r2, [pc, #240]	@ (800fe7c <HAL_DMA_Init+0x150>)
 800fd8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2225      	movs	r2, #37	@ 0x25
 800fd90:	2102      	movs	r1, #2
 800fd92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4938      	ldr	r1, [pc, #224]	@ (800fe80 <HAL_DMA_Init+0x154>)
 800fda0:	400a      	ands	r2, r1
 800fda2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6819      	ldr	r1, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	689a      	ldr	r2, [r3, #8]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	431a      	orrs	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	431a      	orrs	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	431a      	orrs	r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	69db      	ldr	r3, [r3, #28]
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a1b      	ldr	r3, [r3, #32]
 800fdd0:	431a      	orrs	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	430a      	orrs	r2, r1
 800fdd8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	0018      	movs	r0, r3
 800fdde:	f000 fb4d 	bl	801047c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	689a      	ldr	r2, [r3, #8]
 800fde6:	2380      	movs	r3, #128	@ 0x80
 800fde8:	01db      	lsls	r3, r3, #7
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d102      	bne.n	800fdf4 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdfc:	21ff      	movs	r1, #255	@ 0xff
 800fdfe:	400a      	ands	r2, r1
 800fe00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800fe0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d011      	beq.n	800fe38 <HAL_DMA_Init+0x10c>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	2b04      	cmp	r3, #4
 800fe1a:	d80d      	bhi.n	800fe38 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	0018      	movs	r0, r3
 800fe20:	f000 fb76 	bl	8010510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800fe34:	605a      	str	r2, [r3, #4]
 800fe36:	e008      	b.n	800fe4a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2225      	movs	r2, #37	@ 0x25
 800fe54:	2101      	movs	r1, #1
 800fe56:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2224      	movs	r2, #36	@ 0x24
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	0018      	movs	r0, r3
 800fe64:	46bd      	mov	sp, r7
 800fe66:	b002      	add	sp, #8
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	46c0      	nop			@ (mov r8, r8)
 800fe6c:	40020407 	.word	0x40020407
 800fe70:	bffdfff8 	.word	0xbffdfff8
 800fe74:	40020000 	.word	0x40020000
 800fe78:	bffdfbf8 	.word	0xbffdfbf8
 800fe7c:	40020400 	.word	0x40020400
 800fe80:	ffff800f 	.word	0xffff800f

0800fe84 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d101      	bne.n	800fe96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e07f      	b.n	800ff96 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2101      	movs	r1, #1
 800fea2:	438a      	bics	r2, r1
 800fea4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	001a      	movs	r2, r3
 800feac:	4b3c      	ldr	r3, [pc, #240]	@ (800ffa0 <HAL_DMA_DeInit+0x11c>)
 800feae:	429a      	cmp	r2, r3
 800feb0:	d810      	bhi.n	800fed4 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a3b      	ldr	r2, [pc, #236]	@ (800ffa4 <HAL_DMA_DeInit+0x120>)
 800feb8:	4694      	mov	ip, r2
 800feba:	4463      	add	r3, ip
 800febc:	2114      	movs	r1, #20
 800febe:	0018      	movs	r0, r3
 800fec0:	f7f0 f92a 	bl	8000118 <__udivsi3>
 800fec4:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800fec6:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a36      	ldr	r2, [pc, #216]	@ (800ffa8 <HAL_DMA_DeInit+0x124>)
 800fed0:	641a      	str	r2, [r3, #64]	@ 0x40
 800fed2:	e00f      	b.n	800fef4 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a34      	ldr	r2, [pc, #208]	@ (800ffac <HAL_DMA_DeInit+0x128>)
 800feda:	4694      	mov	ip, r2
 800fedc:	4463      	add	r3, ip
 800fede:	2114      	movs	r1, #20
 800fee0:	0018      	movs	r0, r3
 800fee2:	f7f0 f919 	bl	8000118 <__udivsi3>
 800fee6:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800fee8:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a2f      	ldr	r2, [pc, #188]	@ (800ffb0 <HAL_DMA_DeInit+0x12c>)
 800fef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff00:	221c      	movs	r2, #28
 800ff02:	401a      	ands	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff08:	2101      	movs	r1, #1
 800ff0a:	4091      	lsls	r1, r2
 800ff0c:	000a      	movs	r2, r1
 800ff0e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	0018      	movs	r0, r3
 800ff14:	f000 fab2 	bl	801047c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ff28:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d010      	beq.n	800ff54 <HAL_DMA_DeInit+0xd0>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	2b04      	cmp	r3, #4
 800ff38:	d80c      	bhi.n	800ff54 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	f000 fae7 	bl	8010510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ff52:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2225      	movs	r2, #37	@ 0x25
 800ff88:	2100      	movs	r1, #0
 800ff8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2224      	movs	r2, #36	@ 0x24
 800ff90:	2100      	movs	r1, #0
 800ff92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	0018      	movs	r0, r3
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	b002      	add	sp, #8
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	46c0      	nop			@ (mov r8, r8)
 800ffa0:	40020407 	.word	0x40020407
 800ffa4:	bffdfff8 	.word	0xbffdfff8
 800ffa8:	40020000 	.word	0x40020000
 800ffac:	bffdfbf8 	.word	0xbffdfbf8
 800ffb0:	40020400 	.word	0x40020400

0800ffb4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ffc2:	2317      	movs	r3, #23
 800ffc4:	18fb      	adds	r3, r7, r3
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2224      	movs	r2, #36	@ 0x24
 800ffce:	5c9b      	ldrb	r3, [r3, r2]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d101      	bne.n	800ffd8 <HAL_DMA_Start_IT+0x24>
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	e06f      	b.n	80100b8 <HAL_DMA_Start_IT+0x104>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2224      	movs	r2, #36	@ 0x24
 800ffdc:	2101      	movs	r1, #1
 800ffde:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2225      	movs	r2, #37	@ 0x25
 800ffe4:	5c9b      	ldrb	r3, [r3, r2]
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d157      	bne.n	801009c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2225      	movs	r2, #37	@ 0x25
 800fff0:	2102      	movs	r1, #2
 800fff2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2200      	movs	r2, #0
 800fff8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2101      	movs	r1, #1
 8010006:	438a      	bics	r2, r1
 8010008:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	68b9      	ldr	r1, [r7, #8]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 f9f7 	bl	8010404 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801001a:	2b00      	cmp	r3, #0
 801001c:	d008      	beq.n	8010030 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	210e      	movs	r1, #14
 801002a:	430a      	orrs	r2, r1
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	e00f      	b.n	8010050 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2104      	movs	r1, #4
 801003c:	438a      	bics	r2, r1
 801003e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	210a      	movs	r1, #10
 801004c:	430a      	orrs	r2, r1
 801004e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	2380      	movs	r3, #128	@ 0x80
 8010058:	025b      	lsls	r3, r3, #9
 801005a:	4013      	ands	r3, r2
 801005c:	d008      	beq.n	8010070 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010068:	2180      	movs	r1, #128	@ 0x80
 801006a:	0049      	lsls	r1, r1, #1
 801006c:	430a      	orrs	r2, r1
 801006e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010074:	2b00      	cmp	r3, #0
 8010076:	d008      	beq.n	801008a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010082:	2180      	movs	r1, #128	@ 0x80
 8010084:	0049      	lsls	r1, r1, #1
 8010086:	430a      	orrs	r2, r1
 8010088:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2101      	movs	r1, #1
 8010096:	430a      	orrs	r2, r1
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	e00a      	b.n	80100b2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2280      	movs	r2, #128	@ 0x80
 80100a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2224      	movs	r2, #36	@ 0x24
 80100a6:	2100      	movs	r1, #0
 80100a8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80100aa:	2317      	movs	r3, #23
 80100ac:	18fb      	adds	r3, r7, r3
 80100ae:	2201      	movs	r2, #1
 80100b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80100b2:	2317      	movs	r3, #23
 80100b4:	18fb      	adds	r3, r7, r3
 80100b6:	781b      	ldrb	r3, [r3, #0]
}
 80100b8:	0018      	movs	r0, r3
 80100ba:	46bd      	mov	sp, r7
 80100bc:	b006      	add	sp, #24
 80100be:	bd80      	pop	{r7, pc}

080100c0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e04f      	b.n	8010172 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2225      	movs	r2, #37	@ 0x25
 80100d6:	5c9b      	ldrb	r3, [r3, r2]
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d008      	beq.n	80100f0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2204      	movs	r2, #4
 80100e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2224      	movs	r2, #36	@ 0x24
 80100e8:	2100      	movs	r1, #0
 80100ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e040      	b.n	8010172 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	210e      	movs	r1, #14
 80100fc:	438a      	bics	r2, r1
 80100fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801010a:	491c      	ldr	r1, [pc, #112]	@ (801017c <HAL_DMA_Abort+0xbc>)
 801010c:	400a      	ands	r2, r1
 801010e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2101      	movs	r1, #1
 801011c:	438a      	bics	r2, r1
 801011e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010124:	221c      	movs	r2, #28
 8010126:	401a      	ands	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801012c:	2101      	movs	r1, #1
 801012e:	4091      	lsls	r1, r2
 8010130:	000a      	movs	r2, r1
 8010132:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801013c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00c      	beq.n	8010160 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010150:	490a      	ldr	r1, [pc, #40]	@ (801017c <HAL_DMA_Abort+0xbc>)
 8010152:	400a      	ands	r2, r1
 8010154:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801015e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2225      	movs	r2, #37	@ 0x25
 8010164:	2101      	movs	r1, #1
 8010166:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2224      	movs	r2, #36	@ 0x24
 801016c:	2100      	movs	r1, #0
 801016e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8010170:	2300      	movs	r3, #0
}
 8010172:	0018      	movs	r0, r3
 8010174:	46bd      	mov	sp, r7
 8010176:	b002      	add	sp, #8
 8010178:	bd80      	pop	{r7, pc}
 801017a:	46c0      	nop			@ (mov r8, r8)
 801017c:	fffffeff 	.word	0xfffffeff

08010180 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010188:	210f      	movs	r1, #15
 801018a:	187b      	adds	r3, r7, r1
 801018c:	2200      	movs	r2, #0
 801018e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2225      	movs	r2, #37	@ 0x25
 8010194:	5c9b      	ldrb	r3, [r3, r2]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	2b02      	cmp	r3, #2
 801019a:	d006      	beq.n	80101aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2204      	movs	r2, #4
 80101a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80101a2:	187b      	adds	r3, r7, r1
 80101a4:	2201      	movs	r2, #1
 80101a6:	701a      	strb	r2, [r3, #0]
 80101a8:	e048      	b.n	801023c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	210e      	movs	r1, #14
 80101b6:	438a      	bics	r2, r1
 80101b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2101      	movs	r1, #1
 80101c6:	438a      	bics	r2, r1
 80101c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101d4:	491d      	ldr	r1, [pc, #116]	@ (801024c <HAL_DMA_Abort_IT+0xcc>)
 80101d6:	400a      	ands	r2, r1
 80101d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101de:	221c      	movs	r2, #28
 80101e0:	401a      	ands	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101e6:	2101      	movs	r1, #1
 80101e8:	4091      	lsls	r1, r2
 80101ea:	000a      	movs	r2, r1
 80101ec:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80101f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00c      	beq.n	801021a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801020a:	4910      	ldr	r1, [pc, #64]	@ (801024c <HAL_DMA_Abort_IT+0xcc>)
 801020c:	400a      	ands	r2, r1
 801020e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8010218:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2225      	movs	r2, #37	@ 0x25
 801021e:	2101      	movs	r1, #1
 8010220:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2224      	movs	r2, #36	@ 0x24
 8010226:	2100      	movs	r1, #0
 8010228:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801022e:	2b00      	cmp	r3, #0
 8010230:	d004      	beq.n	801023c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	0010      	movs	r0, r2
 801023a:	4798      	blx	r3
    }
  }
  return status;
 801023c:	230f      	movs	r3, #15
 801023e:	18fb      	adds	r3, r7, r3
 8010240:	781b      	ldrb	r3, [r3, #0]
}
 8010242:	0018      	movs	r0, r3
 8010244:	46bd      	mov	sp, r7
 8010246:	b004      	add	sp, #16
 8010248:	bd80      	pop	{r7, pc}
 801024a:	46c0      	nop			@ (mov r8, r8)
 801024c:	fffffeff 	.word	0xfffffeff

08010250 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801026c:	221c      	movs	r2, #28
 801026e:	4013      	ands	r3, r2
 8010270:	2204      	movs	r2, #4
 8010272:	409a      	lsls	r2, r3
 8010274:	0013      	movs	r3, r2
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	4013      	ands	r3, r2
 801027a:	d026      	beq.n	80102ca <HAL_DMA_IRQHandler+0x7a>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2204      	movs	r2, #4
 8010280:	4013      	ands	r3, r2
 8010282:	d022      	beq.n	80102ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2220      	movs	r2, #32
 801028c:	4013      	ands	r3, r2
 801028e:	d107      	bne.n	80102a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2104      	movs	r1, #4
 801029c:	438a      	bics	r2, r1
 801029e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102a4:	221c      	movs	r2, #28
 80102a6:	401a      	ands	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ac:	2104      	movs	r1, #4
 80102ae:	4091      	lsls	r1, r2
 80102b0:	000a      	movs	r2, r1
 80102b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d100      	bne.n	80102be <HAL_DMA_IRQHandler+0x6e>
 80102bc:	e080      	b.n	80103c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	0010      	movs	r0, r2
 80102c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80102c8:	e07a      	b.n	80103c0 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102ce:	221c      	movs	r2, #28
 80102d0:	4013      	ands	r3, r2
 80102d2:	2202      	movs	r2, #2
 80102d4:	409a      	lsls	r2, r3
 80102d6:	0013      	movs	r3, r2
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	4013      	ands	r3, r2
 80102dc:	d03c      	beq.n	8010358 <HAL_DMA_IRQHandler+0x108>
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	2202      	movs	r2, #2
 80102e2:	4013      	ands	r3, r2
 80102e4:	d038      	beq.n	8010358 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2220      	movs	r2, #32
 80102ee:	4013      	ands	r3, r2
 80102f0:	d10b      	bne.n	801030a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	210a      	movs	r1, #10
 80102fe:	438a      	bics	r2, r1
 8010300:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2225      	movs	r2, #37	@ 0x25
 8010306:	2101      	movs	r1, #1
 8010308:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	001a      	movs	r2, r3
 8010310:	4b2e      	ldr	r3, [pc, #184]	@ (80103cc <HAL_DMA_IRQHandler+0x17c>)
 8010312:	429a      	cmp	r2, r3
 8010314:	d909      	bls.n	801032a <HAL_DMA_IRQHandler+0xda>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801031a:	221c      	movs	r2, #28
 801031c:	401a      	ands	r2, r3
 801031e:	4b2c      	ldr	r3, [pc, #176]	@ (80103d0 <HAL_DMA_IRQHandler+0x180>)
 8010320:	2102      	movs	r1, #2
 8010322:	4091      	lsls	r1, r2
 8010324:	000a      	movs	r2, r1
 8010326:	605a      	str	r2, [r3, #4]
 8010328:	e008      	b.n	801033c <HAL_DMA_IRQHandler+0xec>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801032e:	221c      	movs	r2, #28
 8010330:	401a      	ands	r2, r3
 8010332:	4b28      	ldr	r3, [pc, #160]	@ (80103d4 <HAL_DMA_IRQHandler+0x184>)
 8010334:	2102      	movs	r1, #2
 8010336:	4091      	lsls	r1, r2
 8010338:	000a      	movs	r2, r1
 801033a:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2224      	movs	r2, #36	@ 0x24
 8010340:	2100      	movs	r1, #0
 8010342:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010348:	2b00      	cmp	r3, #0
 801034a:	d039      	beq.n	80103c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	0010      	movs	r0, r2
 8010354:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8010356:	e033      	b.n	80103c0 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801035c:	221c      	movs	r2, #28
 801035e:	4013      	ands	r3, r2
 8010360:	2208      	movs	r2, #8
 8010362:	409a      	lsls	r2, r3
 8010364:	0013      	movs	r3, r2
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	4013      	ands	r3, r2
 801036a:	d02a      	beq.n	80103c2 <HAL_DMA_IRQHandler+0x172>
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2208      	movs	r2, #8
 8010370:	4013      	ands	r3, r2
 8010372:	d026      	beq.n	80103c2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	210e      	movs	r1, #14
 8010380:	438a      	bics	r2, r1
 8010382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010388:	221c      	movs	r2, #28
 801038a:	401a      	ands	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010390:	2101      	movs	r1, #1
 8010392:	4091      	lsls	r1, r2
 8010394:	000a      	movs	r2, r1
 8010396:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2225      	movs	r2, #37	@ 0x25
 80103a2:	2101      	movs	r1, #1
 80103a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2224      	movs	r2, #36	@ 0x24
 80103aa:	2100      	movs	r1, #0
 80103ac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d005      	beq.n	80103c2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	0010      	movs	r0, r2
 80103be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80103c0:	46c0      	nop			@ (mov r8, r8)
 80103c2:	46c0      	nop			@ (mov r8, r8)
}
 80103c4:	46bd      	mov	sp, r7
 80103c6:	b004      	add	sp, #16
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	46c0      	nop			@ (mov r8, r8)
 80103cc:	40020080 	.word	0x40020080
 80103d0:	40020400 	.word	0x40020400
 80103d4:	40020000 	.word	0x40020000

080103d8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2225      	movs	r2, #37	@ 0x25
 80103e4:	5c9b      	ldrb	r3, [r3, r2]
 80103e6:	b2db      	uxtb	r3, r3
}
 80103e8:	0018      	movs	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	b002      	add	sp, #8
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80103fc:	0018      	movs	r0, r3
 80103fe:	46bd      	mov	sp, r7
 8010400:	b002      	add	sp, #8
 8010402:	bd80      	pop	{r7, pc}

08010404 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801041a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010420:	2b00      	cmp	r3, #0
 8010422:	d004      	beq.n	801042e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801042c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010432:	221c      	movs	r2, #28
 8010434:	401a      	ands	r2, r3
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801043a:	2101      	movs	r1, #1
 801043c:	4091      	lsls	r1, r2
 801043e:	000a      	movs	r2, r1
 8010440:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	683a      	ldr	r2, [r7, #0]
 8010448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	689b      	ldr	r3, [r3, #8]
 801044e:	2b10      	cmp	r3, #16
 8010450:	d108      	bne.n	8010464 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8010462:	e007      	b.n	8010474 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	68ba      	ldr	r2, [r7, #8]
 801046a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	60da      	str	r2, [r3, #12]
}
 8010474:	46c0      	nop			@ (mov r8, r8)
 8010476:	46bd      	mov	sp, r7
 8010478:	b004      	add	sp, #16
 801047a:	bd80      	pop	{r7, pc}

0801047c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	001a      	movs	r2, r3
 801048a:	4b1d      	ldr	r3, [pc, #116]	@ (8010500 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 801048c:	429a      	cmp	r2, r3
 801048e:	d814      	bhi.n	80104ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010494:	089b      	lsrs	r3, r3, #2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4a1a      	ldr	r2, [pc, #104]	@ (8010504 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 801049a:	189a      	adds	r2, r3, r2
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	001a      	movs	r2, r3
 80104a6:	23ff      	movs	r3, #255	@ 0xff
 80104a8:	4013      	ands	r3, r2
 80104aa:	3b08      	subs	r3, #8
 80104ac:	2114      	movs	r1, #20
 80104ae:	0018      	movs	r0, r3
 80104b0:	f7ef fe32 	bl	8000118 <__udivsi3>
 80104b4:	0003      	movs	r3, r0
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	e014      	b.n	80104e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104be:	089b      	lsrs	r3, r3, #2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	4a11      	ldr	r2, [pc, #68]	@ (8010508 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80104c4:	189a      	adds	r2, r3, r2
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	001a      	movs	r2, r3
 80104d0:	23ff      	movs	r3, #255	@ 0xff
 80104d2:	4013      	ands	r3, r2
 80104d4:	3b08      	subs	r3, #8
 80104d6:	2114      	movs	r1, #20
 80104d8:	0018      	movs	r0, r3
 80104da:	f7ef fe1d 	bl	8000118 <__udivsi3>
 80104de:	0003      	movs	r3, r0
 80104e0:	3307      	adds	r3, #7
 80104e2:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4a09      	ldr	r2, [pc, #36]	@ (801050c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80104e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	221f      	movs	r2, #31
 80104ee:	4013      	ands	r3, r2
 80104f0:	2201      	movs	r2, #1
 80104f2:	409a      	lsls	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80104f8:	46c0      	nop			@ (mov r8, r8)
 80104fa:	46bd      	mov	sp, r7
 80104fc:	b004      	add	sp, #16
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	40020407 	.word	0x40020407
 8010504:	40020800 	.word	0x40020800
 8010508:	4002081c 	.word	0x4002081c
 801050c:	40020880 	.word	0x40020880

08010510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	22ff      	movs	r2, #255	@ 0xff
 801051e:	4013      	ands	r3, r2
 8010520:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	4a0a      	ldr	r2, [pc, #40]	@ (8010550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8010526:	4694      	mov	ip, r2
 8010528:	4463      	add	r3, ip
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	001a      	movs	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a07      	ldr	r2, [pc, #28]	@ (8010554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8010536:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3b01      	subs	r3, #1
 801053c:	2203      	movs	r2, #3
 801053e:	4013      	ands	r3, r2
 8010540:	2201      	movs	r2, #1
 8010542:	409a      	lsls	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010548:	46c0      	nop			@ (mov r8, r8)
 801054a:	46bd      	mov	sp, r7
 801054c:	b004      	add	sp, #16
 801054e:	bd80      	pop	{r7, pc}
 8010550:	1000823f 	.word	0x1000823f
 8010554:	40020940 	.word	0x40020940

08010558 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010558:	b5b0      	push	{r4, r5, r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	603a      	str	r2, [r7, #0]
 8010564:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010566:	4b21      	ldr	r3, [pc, #132]	@ (80105ec <HAL_FLASH_Program+0x94>)
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d101      	bne.n	8010572 <HAL_FLASH_Program+0x1a>
 801056e:	2302      	movs	r3, #2
 8010570:	e038      	b.n	80105e4 <HAL_FLASH_Program+0x8c>
 8010572:	4b1e      	ldr	r3, [pc, #120]	@ (80105ec <HAL_FLASH_Program+0x94>)
 8010574:	2201      	movs	r2, #1
 8010576:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010578:	4b1c      	ldr	r3, [pc, #112]	@ (80105ec <HAL_FLASH_Program+0x94>)
 801057a:	2200      	movs	r2, #0
 801057c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801057e:	2517      	movs	r5, #23
 8010580:	197c      	adds	r4, r7, r5
 8010582:	23fa      	movs	r3, #250	@ 0xfa
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	0018      	movs	r0, r3
 8010588:	f000 f8ba 	bl	8010700 <FLASH_WaitForLastOperation>
 801058c:	0003      	movs	r3, r0
 801058e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010590:	197b      	adds	r3, r7, r5
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d11f      	bne.n	80105d8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b01      	cmp	r3, #1
 801059c:	d106      	bne.n	80105ac <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801059e:	683a      	ldr	r2, [r7, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68b9      	ldr	r1, [r7, #8]
 80105a4:	0008      	movs	r0, r1
 80105a6:	f000 f8f9 	bl	801079c <FLASH_Program_DoubleWord>
 80105aa:	e005      	b.n	80105b8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80105ac:	683a      	ldr	r2, [r7, #0]
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	0011      	movs	r1, r2
 80105b2:	0018      	movs	r0, r3
 80105b4:	f008 f998 	bl	80188e8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80105b8:	2317      	movs	r3, #23
 80105ba:	18fc      	adds	r4, r7, r3
 80105bc:	23fa      	movs	r3, #250	@ 0xfa
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	0018      	movs	r0, r3
 80105c2:	f000 f89d 	bl	8010700 <FLASH_WaitForLastOperation>
 80105c6:	0003      	movs	r3, r0
 80105c8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80105ca:	4b09      	ldr	r3, [pc, #36]	@ (80105f0 <HAL_FLASH_Program+0x98>)
 80105cc:	695a      	ldr	r2, [r3, #20]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	43d9      	mvns	r1, r3
 80105d2:	4b07      	ldr	r3, [pc, #28]	@ (80105f0 <HAL_FLASH_Program+0x98>)
 80105d4:	400a      	ands	r2, r1
 80105d6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80105d8:	4b04      	ldr	r3, [pc, #16]	@ (80105ec <HAL_FLASH_Program+0x94>)
 80105da:	2200      	movs	r2, #0
 80105dc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80105de:	2317      	movs	r3, #23
 80105e0:	18fb      	adds	r3, r7, r3
 80105e2:	781b      	ldrb	r3, [r3, #0]
}
 80105e4:	0018      	movs	r0, r3
 80105e6:	46bd      	mov	sp, r7
 80105e8:	b006      	add	sp, #24
 80105ea:	bdb0      	pop	{r4, r5, r7, pc}
 80105ec:	20001168 	.word	0x20001168
 80105f0:	40022000 	.word	0x40022000

080105f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80105fa:	1dfb      	adds	r3, r7, #7
 80105fc:	2200      	movs	r2, #0
 80105fe:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8010600:	4b0b      	ldr	r3, [pc, #44]	@ (8010630 <HAL_FLASH_Unlock+0x3c>)
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	2b00      	cmp	r3, #0
 8010606:	da0c      	bge.n	8010622 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010608:	4b09      	ldr	r3, [pc, #36]	@ (8010630 <HAL_FLASH_Unlock+0x3c>)
 801060a:	4a0a      	ldr	r2, [pc, #40]	@ (8010634 <HAL_FLASH_Unlock+0x40>)
 801060c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801060e:	4b08      	ldr	r3, [pc, #32]	@ (8010630 <HAL_FLASH_Unlock+0x3c>)
 8010610:	4a09      	ldr	r2, [pc, #36]	@ (8010638 <HAL_FLASH_Unlock+0x44>)
 8010612:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8010614:	4b06      	ldr	r3, [pc, #24]	@ (8010630 <HAL_FLASH_Unlock+0x3c>)
 8010616:	695b      	ldr	r3, [r3, #20]
 8010618:	2b00      	cmp	r3, #0
 801061a:	da02      	bge.n	8010622 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 801061c:	1dfb      	adds	r3, r7, #7
 801061e:	2201      	movs	r2, #1
 8010620:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010622:	1dfb      	adds	r3, r7, #7
 8010624:	781b      	ldrb	r3, [r3, #0]
}
 8010626:	0018      	movs	r0, r3
 8010628:	46bd      	mov	sp, r7
 801062a:	b002      	add	sp, #8
 801062c:	bd80      	pop	{r7, pc}
 801062e:	46c0      	nop			@ (mov r8, r8)
 8010630:	40022000 	.word	0x40022000
 8010634:	45670123 	.word	0x45670123
 8010638:	cdef89ab 	.word	0xcdef89ab

0801063c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8010642:	1dfb      	adds	r3, r7, #7
 8010644:	2201      	movs	r2, #1
 8010646:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010648:	4b09      	ldr	r3, [pc, #36]	@ (8010670 <HAL_FLASH_Lock+0x34>)
 801064a:	695a      	ldr	r2, [r3, #20]
 801064c:	4b08      	ldr	r3, [pc, #32]	@ (8010670 <HAL_FLASH_Lock+0x34>)
 801064e:	2180      	movs	r1, #128	@ 0x80
 8010650:	0609      	lsls	r1, r1, #24
 8010652:	430a      	orrs	r2, r1
 8010654:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8010656:	4b06      	ldr	r3, [pc, #24]	@ (8010670 <HAL_FLASH_Lock+0x34>)
 8010658:	695b      	ldr	r3, [r3, #20]
 801065a:	2b00      	cmp	r3, #0
 801065c:	da02      	bge.n	8010664 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 801065e:	1dfb      	adds	r3, r7, #7
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8010664:	1dfb      	adds	r3, r7, #7
 8010666:	781b      	ldrb	r3, [r3, #0]
}
 8010668:	0018      	movs	r0, r3
 801066a:	46bd      	mov	sp, r7
 801066c:	b002      	add	sp, #8
 801066e:	bd80      	pop	{r7, pc}
 8010670:	40022000 	.word	0x40022000

08010674 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801067a:	1dfb      	adds	r3, r7, #7
 801067c:	2201      	movs	r2, #1
 801067e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8010680:	4b0d      	ldr	r3, [pc, #52]	@ (80106b8 <HAL_FLASH_OB_Unlock+0x44>)
 8010682:	695a      	ldr	r2, [r3, #20]
 8010684:	2380      	movs	r3, #128	@ 0x80
 8010686:	05db      	lsls	r3, r3, #23
 8010688:	4013      	ands	r3, r2
 801068a:	d00e      	beq.n	80106aa <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 801068c:	4b0a      	ldr	r3, [pc, #40]	@ (80106b8 <HAL_FLASH_OB_Unlock+0x44>)
 801068e:	4a0b      	ldr	r2, [pc, #44]	@ (80106bc <HAL_FLASH_OB_Unlock+0x48>)
 8010690:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8010692:	4b09      	ldr	r3, [pc, #36]	@ (80106b8 <HAL_FLASH_OB_Unlock+0x44>)
 8010694:	4a0a      	ldr	r2, [pc, #40]	@ (80106c0 <HAL_FLASH_OB_Unlock+0x4c>)
 8010696:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8010698:	4b07      	ldr	r3, [pc, #28]	@ (80106b8 <HAL_FLASH_OB_Unlock+0x44>)
 801069a:	695a      	ldr	r2, [r3, #20]
 801069c:	2380      	movs	r3, #128	@ 0x80
 801069e:	05db      	lsls	r3, r3, #23
 80106a0:	4013      	ands	r3, r2
 80106a2:	d102      	bne.n	80106aa <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 80106a4:	1dfb      	adds	r3, r7, #7
 80106a6:	2200      	movs	r2, #0
 80106a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80106aa:	1dfb      	adds	r3, r7, #7
 80106ac:	781b      	ldrb	r3, [r3, #0]
}
 80106ae:	0018      	movs	r0, r3
 80106b0:	46bd      	mov	sp, r7
 80106b2:	b002      	add	sp, #8
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	46c0      	nop			@ (mov r8, r8)
 80106b8:	40022000 	.word	0x40022000
 80106bc:	08192a3b 	.word	0x08192a3b
 80106c0:	4c5d6e7f 	.word	0x4c5d6e7f

080106c4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80106ca:	1dfb      	adds	r3, r7, #7
 80106cc:	2201      	movs	r2, #1
 80106ce:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80106d0:	4b0a      	ldr	r3, [pc, #40]	@ (80106fc <HAL_FLASH_OB_Lock+0x38>)
 80106d2:	695a      	ldr	r2, [r3, #20]
 80106d4:	4b09      	ldr	r3, [pc, #36]	@ (80106fc <HAL_FLASH_OB_Lock+0x38>)
 80106d6:	2180      	movs	r1, #128	@ 0x80
 80106d8:	05c9      	lsls	r1, r1, #23
 80106da:	430a      	orrs	r2, r1
 80106dc:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 80106de:	4b07      	ldr	r3, [pc, #28]	@ (80106fc <HAL_FLASH_OB_Lock+0x38>)
 80106e0:	695a      	ldr	r2, [r3, #20]
 80106e2:	2380      	movs	r3, #128	@ 0x80
 80106e4:	05db      	lsls	r3, r3, #23
 80106e6:	4013      	ands	r3, r2
 80106e8:	d002      	beq.n	80106f0 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 80106ea:	1dfb      	adds	r3, r7, #7
 80106ec:	2200      	movs	r2, #0
 80106ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80106f0:	1dfb      	adds	r3, r7, #7
 80106f2:	781b      	ldrb	r3, [r3, #0]
}
 80106f4:	0018      	movs	r0, r3
 80106f6:	46bd      	mov	sp, r7
 80106f8:	b002      	add	sp, #8
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	40022000 	.word	0x40022000

08010700 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8010708:	f7fe f888 	bl	800e81c <HAL_GetTick>
 801070c:	0002      	movs	r2, r0
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	189b      	adds	r3, r3, r2
 8010712:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8010714:	2380      	movs	r3, #128	@ 0x80
 8010716:	025b      	lsls	r3, r3, #9
 8010718:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 801071a:	e007      	b.n	801072c <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 801071c:	f7fe f87e 	bl	800e81c <HAL_GetTick>
 8010720:	0002      	movs	r2, r0
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4293      	cmp	r3, r2
 8010726:	d801      	bhi.n	801072c <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8010728:	2303      	movs	r3, #3
 801072a:	e02a      	b.n	8010782 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 801072c:	4b17      	ldr	r3, [pc, #92]	@ (801078c <FLASH_WaitForLastOperation+0x8c>)
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	68ba      	ldr	r2, [r7, #8]
 8010732:	4013      	ands	r3, r2
 8010734:	d1f2      	bne.n	801071c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8010736:	4b15      	ldr	r3, [pc, #84]	@ (801078c <FLASH_WaitForLastOperation+0x8c>)
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	4a15      	ldr	r2, [pc, #84]	@ (8010790 <FLASH_WaitForLastOperation+0x90>)
 801073c:	4013      	ands	r3, r2
 801073e:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8010740:	4b12      	ldr	r3, [pc, #72]	@ (801078c <FLASH_WaitForLastOperation+0x8c>)
 8010742:	4a14      	ldr	r2, [pc, #80]	@ (8010794 <FLASH_WaitForLastOperation+0x94>)
 8010744:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d004      	beq.n	8010756 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 801074c:	4b12      	ldr	r3, [pc, #72]	@ (8010798 <FLASH_WaitForLastOperation+0x98>)
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	e015      	b.n	8010782 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8010756:	f7fe f861 	bl	800e81c <HAL_GetTick>
 801075a:	0002      	movs	r2, r0
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	189b      	adds	r3, r3, r2
 8010760:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8010762:	e007      	b.n	8010774 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8010764:	f7fe f85a 	bl	800e81c <HAL_GetTick>
 8010768:	0002      	movs	r2, r0
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	4293      	cmp	r3, r2
 801076e:	d801      	bhi.n	8010774 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8010770:	2303      	movs	r3, #3
 8010772:	e006      	b.n	8010782 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8010774:	4b05      	ldr	r3, [pc, #20]	@ (801078c <FLASH_WaitForLastOperation+0x8c>)
 8010776:	691a      	ldr	r2, [r3, #16]
 8010778:	2380      	movs	r3, #128	@ 0x80
 801077a:	02db      	lsls	r3, r3, #11
 801077c:	4013      	ands	r3, r2
 801077e:	d1f1      	bne.n	8010764 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	0018      	movs	r0, r3
 8010784:	46bd      	mov	sp, r7
 8010786:	b004      	add	sp, #16
 8010788:	bd80      	pop	{r7, pc}
 801078a:	46c0      	nop			@ (mov r8, r8)
 801078c:	40022000 	.word	0x40022000
 8010790:	000083fa 	.word	0x000083fa
 8010794:	000083fb 	.word	0x000083fb
 8010798:	20001168 	.word	0x20001168

0801079c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801079c:	b5b0      	push	{r4, r5, r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	603a      	str	r2, [r7, #0]
 80107a6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80107a8:	4b0b      	ldr	r3, [pc, #44]	@ (80107d8 <FLASH_Program_DoubleWord+0x3c>)
 80107aa:	695a      	ldr	r2, [r3, #20]
 80107ac:	4b0a      	ldr	r3, [pc, #40]	@ (80107d8 <FLASH_Program_DoubleWord+0x3c>)
 80107ae:	2101      	movs	r1, #1
 80107b0:	430a      	orrs	r2, r1
 80107b2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80107ba:	f3bf 8f6f 	isb	sy
}
 80107be:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	001c      	movs	r4, r3
 80107c4:	2300      	movs	r3, #0
 80107c6:	001d      	movs	r5, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	3304      	adds	r3, #4
 80107cc:	0022      	movs	r2, r4
 80107ce:	601a      	str	r2, [r3, #0]
}
 80107d0:	46c0      	nop			@ (mov r8, r8)
 80107d2:	46bd      	mov	sp, r7
 80107d4:	b004      	add	sp, #16
 80107d6:	bdb0      	pop	{r4, r5, r7, pc}
 80107d8:	40022000 	.word	0x40022000

080107dc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80107dc:	b5b0      	push	{r4, r5, r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80107e6:	4b32      	ldr	r3, [pc, #200]	@ (80108b0 <HAL_FLASHEx_Erase+0xd4>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d101      	bne.n	80107f2 <HAL_FLASHEx_Erase+0x16>
 80107ee:	2302      	movs	r3, #2
 80107f0:	e059      	b.n	80108a6 <HAL_FLASHEx_Erase+0xca>
 80107f2:	4b2f      	ldr	r3, [pc, #188]	@ (80108b0 <HAL_FLASHEx_Erase+0xd4>)
 80107f4:	2201      	movs	r2, #1
 80107f6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107f8:	4b2d      	ldr	r3, [pc, #180]	@ (80108b0 <HAL_FLASHEx_Erase+0xd4>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80107fe:	250f      	movs	r5, #15
 8010800:	197c      	adds	r4, r7, r5
 8010802:	23fa      	movs	r3, #250	@ 0xfa
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	0018      	movs	r0, r3
 8010808:	f7ff ff7a 	bl	8010700 <FLASH_WaitForLastOperation>
 801080c:	0003      	movs	r3, r0
 801080e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010810:	002c      	movs	r4, r5
 8010812:	193b      	adds	r3, r7, r4
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d13f      	bne.n	801089a <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b04      	cmp	r3, #4
 8010826:	d10a      	bne.n	801083e <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8010828:	f000 f8ea 	bl	8010a00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801082c:	193c      	adds	r4, r7, r4
 801082e:	23fa      	movs	r3, #250	@ 0xfa
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	0018      	movs	r0, r3
 8010834:	f7ff ff64 	bl	8010700 <FLASH_WaitForLastOperation>
 8010838:	0003      	movs	r3, r0
 801083a:	7023      	strb	r3, [r4, #0]
 801083c:	e02d      	b.n	801089a <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2201      	movs	r2, #1
 8010842:	4252      	negs	r2, r2
 8010844:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	60bb      	str	r3, [r7, #8]
 801084c:	e017      	b.n	801087e <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	0018      	movs	r0, r3
 8010852:	f000 f8e5 	bl	8010a20 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010856:	250f      	movs	r5, #15
 8010858:	197c      	adds	r4, r7, r5
 801085a:	23fa      	movs	r3, #250	@ 0xfa
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	0018      	movs	r0, r3
 8010860:	f7ff ff4e 	bl	8010700 <FLASH_WaitForLastOperation>
 8010864:	0003      	movs	r3, r0
 8010866:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8010868:	197b      	adds	r3, r7, r5
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d003      	beq.n	8010878 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	601a      	str	r2, [r3, #0]
          break;
 8010876:	e00a      	b.n	801088e <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	3301      	adds	r3, #1
 801087c:	60bb      	str	r3, [r7, #8]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	689a      	ldr	r2, [r3, #8]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	18d3      	adds	r3, r2, r3
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	429a      	cmp	r2, r3
 801088c:	d3df      	bcc.n	801084e <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801088e:	4b09      	ldr	r3, [pc, #36]	@ (80108b4 <HAL_FLASHEx_Erase+0xd8>)
 8010890:	695a      	ldr	r2, [r3, #20]
 8010892:	4b08      	ldr	r3, [pc, #32]	@ (80108b4 <HAL_FLASHEx_Erase+0xd8>)
 8010894:	2102      	movs	r1, #2
 8010896:	438a      	bics	r2, r1
 8010898:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801089a:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <HAL_FLASHEx_Erase+0xd4>)
 801089c:	2200      	movs	r2, #0
 801089e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80108a0:	230f      	movs	r3, #15
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	781b      	ldrb	r3, [r3, #0]
}
 80108a6:	0018      	movs	r0, r3
 80108a8:	46bd      	mov	sp, r7
 80108aa:	b004      	add	sp, #16
 80108ac:	bdb0      	pop	{r4, r5, r7, pc}
 80108ae:	46c0      	nop			@ (mov r8, r8)
 80108b0:	20001168 	.word	0x20001168
 80108b4:	40022000 	.word	0x40022000

080108b8 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80108b8:	b5b0      	push	{r4, r5, r7, lr}
 80108ba:	b086      	sub	sp, #24
 80108bc:	af02      	add	r7, sp, #8
 80108be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80108c0:	4b4c      	ldr	r3, [pc, #304]	@ (80109f4 <HAL_FLASHEx_OBProgram+0x13c>)
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d101      	bne.n	80108cc <HAL_FLASHEx_OBProgram+0x14>
 80108c8:	2302      	movs	r3, #2
 80108ca:	e08f      	b.n	80109ec <HAL_FLASHEx_OBProgram+0x134>
 80108cc:	4b49      	ldr	r3, [pc, #292]	@ (80109f4 <HAL_FLASHEx_OBProgram+0x13c>)
 80108ce:	2201      	movs	r2, #1
 80108d0:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108d2:	4b48      	ldr	r3, [pc, #288]	@ (80109f4 <HAL_FLASHEx_OBProgram+0x13c>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2201      	movs	r2, #1
 80108de:	4013      	ands	r3, r2
 80108e0:	d008      	beq.n	80108f4 <HAL_FLASHEx_OBProgram+0x3c>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6858      	ldr	r0, [r3, #4]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6899      	ldr	r1, [r3, #8]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	001a      	movs	r2, r3
 80108f0:	f000 f8b2 	bl	8010a58 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2206      	movs	r2, #6
 80108fa:	4013      	ands	r3, r2
 80108fc:	2b06      	cmp	r3, #6
 80108fe:	d109      	bne.n	8010914 <HAL_FLASHEx_OBProgram+0x5c>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6958      	ldr	r0, [r3, #20]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6999      	ldr	r1, [r3, #24]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	691b      	ldr	r3, [r3, #16]
 801090c:	001a      	movs	r2, r3
 801090e:	f000 f8bf 	bl	8010a90 <FLASH_OB_OptrConfig>
 8010912:	e021      	b.n	8010958 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2202      	movs	r2, #2
 801091a:	4013      	ands	r3, r2
 801091c:	d00b      	beq.n	8010936 <HAL_FLASHEx_OBProgram+0x7e>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 801091e:	f000 f8ed 	bl	8010afc <FLASH_OB_GetUser>
 8010922:	0003      	movs	r3, r0
 8010924:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	691a      	ldr	r2, [r3, #16]
 801092a:	68b9      	ldr	r1, [r7, #8]
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	0018      	movs	r0, r3
 8010930:	f000 f8ae 	bl	8010a90 <FLASH_OB_OptrConfig>
 8010934:	e010      	b.n	8010958 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2204      	movs	r2, #4
 801093c:	4013      	ands	r3, r2
 801093e:	d00b      	beq.n	8010958 <HAL_FLASHEx_OBProgram+0xa0>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 8010940:	f000 f8c4 	bl	8010acc <FLASH_OB_GetRDP>
 8010944:	0003      	movs	r3, r0
 8010946:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6958      	ldr	r0, [r3, #20]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	0019      	movs	r1, r3
 8010954:	f000 f89c 	bl	8010a90 <FLASH_OB_OptrConfig>
  {
    /* nothing to do */
  }

  /* HDP Area Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_HDP) != 0x00U)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2208      	movs	r2, #8
 801095e:	4013      	ands	r3, r2
 8010960:	d008      	beq.n	8010974 <HAL_FLASHEx_OBProgram+0xbc>
  {
    /* Configure the HDP area protection */
    FLASH_OB_HDPConfig(pOBInit->BootLock, pOBInit->HDPEndPage, pOBInit->HDPState);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801096e:	001a      	movs	r2, r3
 8010970:	f000 f8d6 	bl	8010b20 <FLASH_OB_HDPConfig>
  }

  /* RDP Keys OEM1/2 Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDPKEY) != 0x00U)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2210      	movs	r2, #16
 801097a:	4013      	ands	r3, r2
 801097c:	d00d      	beq.n	801099a <HAL_FLASHEx_OBProgram+0xe2>
  {
    /* Configure the RDP keys */
    FLASH_OB_RDPKeyConfig(pOBInit->RDPKeyType, pOBInit->RDPKey1, pOBInit->RDPKey2, pOBInit->RDPKey3, pOBInit->RDPKey4);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	69d8      	ldr	r0, [r3, #28]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6a19      	ldr	r1, [r3, #32]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	0023      	movs	r3, r4
 8010996:	f000 f8e3 	bl	8010b60 <FLASH_OB_RDPKeyConfig>
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801099a:	250f      	movs	r5, #15
 801099c:	197c      	adds	r4, r7, r5
 801099e:	23fa      	movs	r3, #250	@ 0xfa
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	0018      	movs	r0, r3
 80109a4:	f7ff feac 	bl	8010700 <FLASH_WaitForLastOperation>
 80109a8:	0003      	movs	r3, r0
 80109aa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80109ac:	0028      	movs	r0, r5
 80109ae:	183b      	adds	r3, r7, r0
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d114      	bne.n	80109e0 <HAL_FLASHEx_OBProgram+0x128>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80109b6:	4b10      	ldr	r3, [pc, #64]	@ (80109f8 <HAL_FLASHEx_OBProgram+0x140>)
 80109b8:	695a      	ldr	r2, [r3, #20]
 80109ba:	4b0f      	ldr	r3, [pc, #60]	@ (80109f8 <HAL_FLASHEx_OBProgram+0x140>)
 80109bc:	2180      	movs	r1, #128	@ 0x80
 80109be:	0289      	lsls	r1, r1, #10
 80109c0:	430a      	orrs	r2, r1
 80109c2:	615a      	str	r2, [r3, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80109c4:	183c      	adds	r4, r7, r0
 80109c6:	23fa      	movs	r3, #250	@ 0xfa
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	0018      	movs	r0, r3
 80109cc:	f7ff fe98 	bl	8010700 <FLASH_WaitForLastOperation>
 80109d0:	0003      	movs	r3, r0
 80109d2:	7023      	strb	r3, [r4, #0]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80109d4:	4b08      	ldr	r3, [pc, #32]	@ (80109f8 <HAL_FLASHEx_OBProgram+0x140>)
 80109d6:	695a      	ldr	r2, [r3, #20]
 80109d8:	4b07      	ldr	r3, [pc, #28]	@ (80109f8 <HAL_FLASHEx_OBProgram+0x140>)
 80109da:	4908      	ldr	r1, [pc, #32]	@ (80109fc <HAL_FLASHEx_OBProgram+0x144>)
 80109dc:	400a      	ands	r2, r1
 80109de:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80109e0:	4b04      	ldr	r3, [pc, #16]	@ (80109f4 <HAL_FLASHEx_OBProgram+0x13c>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80109e6:	230f      	movs	r3, #15
 80109e8:	18fb      	adds	r3, r7, r3
 80109ea:	781b      	ldrb	r3, [r3, #0]
}
 80109ec:	0018      	movs	r0, r3
 80109ee:	46bd      	mov	sp, r7
 80109f0:	b004      	add	sp, #16
 80109f2:	bdb0      	pop	{r4, r5, r7, pc}
 80109f4:	20001168 	.word	0x20001168
 80109f8:	40022000 	.word	0x40022000
 80109fc:	fffdffff 	.word	0xfffdffff

08010a00 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 8010a04:	4b04      	ldr	r3, [pc, #16]	@ (8010a18 <FLASH_MassErase+0x18>)
 8010a06:	695a      	ldr	r2, [r3, #20]
 8010a08:	4b03      	ldr	r3, [pc, #12]	@ (8010a18 <FLASH_MassErase+0x18>)
 8010a0a:	4904      	ldr	r1, [pc, #16]	@ (8010a1c <FLASH_MassErase+0x1c>)
 8010a0c:	430a      	orrs	r2, r1
 8010a0e:	615a      	str	r2, [r3, #20]
}
 8010a10:	46c0      	nop			@ (mov r8, r8)
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	46c0      	nop			@ (mov r8, r8)
 8010a18:	40022000 	.word	0x40022000
 8010a1c:	00010004 	.word	0x00010004

08010a20 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8010a28:	4b08      	ldr	r3, [pc, #32]	@ (8010a4c <FLASH_PageErase+0x2c>)
 8010a2a:	695b      	ldr	r3, [r3, #20]
 8010a2c:	4a08      	ldr	r2, [pc, #32]	@ (8010a50 <FLASH_PageErase+0x30>)
 8010a2e:	4013      	ands	r3, r2
 8010a30:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	00da      	lsls	r2, r3, #3
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	431a      	orrs	r2, r3
 8010a3a:	4b04      	ldr	r3, [pc, #16]	@ (8010a4c <FLASH_PageErase+0x2c>)
 8010a3c:	4905      	ldr	r1, [pc, #20]	@ (8010a54 <FLASH_PageErase+0x34>)
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	615a      	str	r2, [r3, #20]
}
 8010a42:	46c0      	nop			@ (mov r8, r8)
 8010a44:	46bd      	mov	sp, r7
 8010a46:	b004      	add	sp, #16
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	46c0      	nop			@ (mov r8, r8)
 8010a4c:	40022000 	.word	0x40022000
 8010a50:	fffffc07 	.word	0xfffffc07
 8010a54:	00010002 	.word	0x00010002

08010a58 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset  Specifies the end page of the write protected area
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the Flash Bank - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d106      	bne.n	8010a78 <FLASH_OB_WRPConfig+0x20>
  {
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	0419      	lsls	r1, r3, #16
 8010a6e:	4b07      	ldr	r3, [pc, #28]	@ (8010a8c <FLASH_OB_WRPConfig+0x34>)
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	430a      	orrs	r2, r1
 8010a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
  }
}
 8010a76:	e005      	b.n	8010a84 <FLASH_OB_WRPConfig+0x2c>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	0419      	lsls	r1, r3, #16
 8010a7c:	4b03      	ldr	r3, [pc, #12]	@ (8010a8c <FLASH_OB_WRPConfig+0x34>)
 8010a7e:	68ba      	ldr	r2, [r7, #8]
 8010a80:	430a      	orrs	r2, r1
 8010a82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010a84:	46c0      	nop			@ (mov r8, r8)
 8010a86:	46bd      	mov	sp, r7
 8010a88:	b004      	add	sp, #16
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	40022000 	.word	0x40022000

08010a90 <FLASH_OB_OptrConfig>:
  *           @arg @ref OB_RDP_LEVEL_1 Memory Read protection
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010ac8 <FLASH_OB_OptrConfig+0x38>)
 8010a9e:	6a1b      	ldr	r3, [r3, #32]
 8010aa0:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	22ff      	movs	r2, #255	@ 0xff
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	43da      	mvns	r2, r3
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	4013      	ands	r3, r2
 8010aae:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8010ab0:	697a      	ldr	r2, [r7, #20]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	431a      	orrs	r2, r3
 8010ab6:	0011      	movs	r1, r2
 8010ab8:	4b03      	ldr	r3, [pc, #12]	@ (8010ac8 <FLASH_OB_OptrConfig+0x38>)
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	430a      	orrs	r2, r1
 8010abe:	621a      	str	r2, [r3, #32]
}
 8010ac0:	46c0      	nop			@ (mov r8, r8)
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	b006      	add	sp, #24
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	40022000 	.word	0x40022000

08010acc <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8010ad2:	4b09      	ldr	r3, [pc, #36]	@ (8010af8 <FLASH_OB_GetRDP+0x2c>)
 8010ad4:	6a1b      	ldr	r3, [r3, #32]
 8010ad6:	22ff      	movs	r2, #255	@ 0xff
 8010ad8:	4013      	ands	r3, r2
 8010ada:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2baa      	cmp	r3, #170	@ 0xaa
 8010ae0:	d004      	beq.n	8010aec <FLASH_OB_GetRDP+0x20>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2bcc      	cmp	r3, #204	@ 0xcc
 8010ae6:	d001      	beq.n	8010aec <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8010ae8:	23bb      	movs	r3, #187	@ 0xbb
 8010aea:	e000      	b.n	8010aee <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 8010aec:	687b      	ldr	r3, [r7, #4]
  }
}
 8010aee:	0018      	movs	r0, r3
 8010af0:	46bd      	mov	sp, r7
 8010af2:	b002      	add	sp, #8
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	40022000 	.word	0x40022000

08010afc <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_NBOOT1
  *           @arg @ref FLASH_OB_USER_NBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 8010b02:	4b05      	ldr	r3, [pc, #20]	@ (8010b18 <FLASH_OB_GetUser+0x1c>)
 8010b04:	6a1b      	ldr	r3, [r3, #32]
 8010b06:	4a05      	ldr	r2, [pc, #20]	@ (8010b1c <FLASH_OB_GetUser+0x20>)
 8010b08:	4013      	ands	r3, r2
 8010b0a:	607b      	str	r3, [r7, #4]
  return user;
 8010b0c:	687b      	ldr	r3, [r7, #4]
}
 8010b0e:	0018      	movs	r0, r3
 8010b10:	46bd      	mov	sp, r7
 8010b12:	b002      	add	sp, #8
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	46c0      	nop			@ (mov r8, r8)
 8010b18:	40022000 	.word	0x40022000
 8010b1c:	3f4fff00 	.word	0x3f4fff00

08010b20 <FLASH_OB_HDPConfig>:
  * @param   HDPEndPage specifies the end page of the hide protection area
  * @param   HDPEn     Enable and disable the HDP area
  * @retval None
  */
static void FLASH_OB_HDPConfig(uint32_t BootEntry, uint32_t HDPEndPage, uint32_t HDPEn)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootEntry));
  assert_param(IS_FLASH_PAGE(HDPEndPage));
  /* Set securable memory area configuration */
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_HDP1_PEND | FLASH_SECR_HDP1EN));
 8010b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010b58 <FLASH_OB_HDPConfig+0x38>)
 8010b2e:	2380      	movs	r3, #128	@ 0x80
 8010b30:	58d3      	ldr	r3, [r2, r3]
 8010b32:	4a0a      	ldr	r2, [pc, #40]	@ (8010b5c <FLASH_OB_HDPConfig+0x3c>)
 8010b34:	4013      	ands	r3, r2
 8010b36:	617b      	str	r3, [r7, #20]
  FLASH->SECR = (secmem | BootEntry | HDPEndPage | (HDPEn << FLASH_SECR_HDP1EN_Pos));
 8010b38:	697a      	ldr	r2, [r7, #20]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	431a      	orrs	r2, r3
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	431a      	orrs	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	061b      	lsls	r3, r3, #24
 8010b46:	4904      	ldr	r1, [pc, #16]	@ (8010b58 <FLASH_OB_HDPConfig+0x38>)
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	2280      	movs	r2, #128	@ 0x80
 8010b4c:	508b      	str	r3, [r1, r2]
}
 8010b4e:	46c0      	nop			@ (mov r8, r8)
 8010b50:	46bd      	mov	sp, r7
 8010b52:	b006      	add	sp, #24
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	46c0      	nop			@ (mov r8, r8)
 8010b58:	40022000 	.word	0x40022000
 8010b5c:	00feffc0 	.word	0x00feffc0

08010b60 <FLASH_OB_RDPKeyConfig>:
  * @param  RDPKey3 specifies the RDP key 3.
  * @retval None
  */
static void FLASH_OB_RDPKeyConfig(uint32_t RDPKeyType, uint32_t RDPKey0, uint32_t RDPKey1,
                                  uint32_t RDPKey2, uint32_t RDPKey3)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_RDP_KEY_TYPE(RDPKeyType));

  /* Configure the RDP OEM1/2 key */
  if (RDPKeyType == OB_RDP_KEY_OEM1)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d110      	bne.n	8010b96 <FLASH_OB_RDPKeyConfig+0x36>
  {
    WRITE_REG(FLASH->OEM1KEYW0R, RDPKey0);
 8010b74:	4913      	ldr	r1, [pc, #76]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010b76:	2288      	movs	r2, #136	@ 0x88
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW1R, RDPKey1);
 8010b7c:	4911      	ldr	r1, [pc, #68]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010b7e:	228c      	movs	r2, #140	@ 0x8c
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW2R, RDPKey2);
 8010b84:	490f      	ldr	r1, [pc, #60]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010b86:	2290      	movs	r2, #144	@ 0x90
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW3R, RDPKey3);
 8010b8c:	490d      	ldr	r1, [pc, #52]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010b8e:	2294      	movs	r2, #148	@ 0x94
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	508b      	str	r3, [r1, r2]
  }
  else
  {
    /* nothing to do */
  }
}
 8010b94:	e012      	b.n	8010bbc <FLASH_OB_RDPKeyConfig+0x5c>
  else if (RDPKeyType == OB_RDP_KEY_OEM2)
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d10f      	bne.n	8010bbc <FLASH_OB_RDPKeyConfig+0x5c>
    WRITE_REG(FLASH->OEM2KEYW0R, RDPKey0);
 8010b9c:	4909      	ldr	r1, [pc, #36]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010b9e:	2298      	movs	r2, #152	@ 0x98
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW1R, RDPKey1);
 8010ba4:	4907      	ldr	r1, [pc, #28]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010ba6:	229c      	movs	r2, #156	@ 0x9c
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW2R, RDPKey2);
 8010bac:	4905      	ldr	r1, [pc, #20]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010bae:	22a0      	movs	r2, #160	@ 0xa0
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW3R, RDPKey3);
 8010bb4:	4903      	ldr	r1, [pc, #12]	@ (8010bc4 <FLASH_OB_RDPKeyConfig+0x64>)
 8010bb6:	22a4      	movs	r2, #164	@ 0xa4
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	508b      	str	r3, [r1, r2]
}
 8010bbc:	46c0      	nop			@ (mov r8, r8)
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	b004      	add	sp, #16
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	40022000 	.word	0x40022000

08010bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b086      	sub	sp, #24
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010bd6:	e153      	b.n	8010e80 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2101      	movs	r1, #1
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	4091      	lsls	r1, r2
 8010be2:	000a      	movs	r2, r1
 8010be4:	4013      	ands	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d100      	bne.n	8010bf0 <HAL_GPIO_Init+0x28>
 8010bee:	e144      	b.n	8010e7a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	2203      	movs	r2, #3
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d005      	beq.n	8010c08 <HAL_GPIO_Init+0x40>
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	2203      	movs	r2, #3
 8010c02:	4013      	ands	r3, r2
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d130      	bne.n	8010c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	689b      	ldr	r3, [r3, #8]
 8010c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	2203      	movs	r2, #3
 8010c14:	409a      	lsls	r2, r3
 8010c16:	0013      	movs	r3, r2
 8010c18:	43da      	mvns	r2, r3
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	68da      	ldr	r2, [r3, #12]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	005b      	lsls	r3, r3, #1
 8010c28:	409a      	lsls	r2, r3
 8010c2a:	0013      	movs	r3, r2
 8010c2c:	693a      	ldr	r2, [r7, #16]
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010c3e:	2201      	movs	r2, #1
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	409a      	lsls	r2, r3
 8010c44:	0013      	movs	r3, r2
 8010c46:	43da      	mvns	r2, r3
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	4013      	ands	r3, r2
 8010c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	091b      	lsrs	r3, r3, #4
 8010c54:	2201      	movs	r2, #1
 8010c56:	401a      	ands	r2, r3
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	409a      	lsls	r2, r3
 8010c5c:	0013      	movs	r3, r2
 8010c5e:	693a      	ldr	r2, [r7, #16]
 8010c60:	4313      	orrs	r3, r2
 8010c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	693a      	ldr	r2, [r7, #16]
 8010c68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	2203      	movs	r2, #3
 8010c70:	4013      	ands	r3, r2
 8010c72:	2b03      	cmp	r3, #3
 8010c74:	d017      	beq.n	8010ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	2203      	movs	r2, #3
 8010c82:	409a      	lsls	r2, r3
 8010c84:	0013      	movs	r3, r2
 8010c86:	43da      	mvns	r2, r3
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	4013      	ands	r3, r2
 8010c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	689a      	ldr	r2, [r3, #8]
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	409a      	lsls	r2, r3
 8010c98:	0013      	movs	r3, r2
 8010c9a:	693a      	ldr	r2, [r7, #16]
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	2203      	movs	r2, #3
 8010cac:	4013      	ands	r3, r2
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d123      	bne.n	8010cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	08da      	lsrs	r2, r3, #3
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	3208      	adds	r2, #8
 8010cba:	0092      	lsls	r2, r2, #2
 8010cbc:	58d3      	ldr	r3, [r2, r3]
 8010cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2207      	movs	r2, #7
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	220f      	movs	r2, #15
 8010cca:	409a      	lsls	r2, r3
 8010ccc:	0013      	movs	r3, r2
 8010cce:	43da      	mvns	r2, r3
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	4013      	ands	r3, r2
 8010cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	691a      	ldr	r2, [r3, #16]
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	2107      	movs	r1, #7
 8010cde:	400b      	ands	r3, r1
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	409a      	lsls	r2, r3
 8010ce4:	0013      	movs	r3, r2
 8010ce6:	693a      	ldr	r2, [r7, #16]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	08da      	lsrs	r2, r3, #3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	3208      	adds	r2, #8
 8010cf4:	0092      	lsls	r2, r2, #2
 8010cf6:	6939      	ldr	r1, [r7, #16]
 8010cf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	2203      	movs	r2, #3
 8010d06:	409a      	lsls	r2, r3
 8010d08:	0013      	movs	r3, r2
 8010d0a:	43da      	mvns	r2, r3
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	4013      	ands	r3, r2
 8010d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	2203      	movs	r2, #3
 8010d18:	401a      	ands	r2, r3
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	409a      	lsls	r2, r3
 8010d20:	0013      	movs	r3, r2
 8010d22:	693a      	ldr	r2, [r7, #16]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	693a      	ldr	r2, [r7, #16]
 8010d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	23c0      	movs	r3, #192	@ 0xc0
 8010d34:	029b      	lsls	r3, r3, #10
 8010d36:	4013      	ands	r3, r2
 8010d38:	d100      	bne.n	8010d3c <HAL_GPIO_Init+0x174>
 8010d3a:	e09e      	b.n	8010e7a <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8010d3c:	4a56      	ldr	r2, [pc, #344]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	089b      	lsrs	r3, r3, #2
 8010d42:	3318      	adds	r3, #24
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	589b      	ldr	r3, [r3, r2]
 8010d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2203      	movs	r2, #3
 8010d4e:	4013      	ands	r3, r2
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	220f      	movs	r2, #15
 8010d54:	409a      	lsls	r2, r3
 8010d56:	0013      	movs	r3, r2
 8010d58:	43da      	mvns	r2, r3
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	23a0      	movs	r3, #160	@ 0xa0
 8010d64:	05db      	lsls	r3, r3, #23
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d01f      	beq.n	8010daa <HAL_GPIO_Init+0x1e2>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8010e9c <HAL_GPIO_Init+0x2d4>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d019      	beq.n	8010da6 <HAL_GPIO_Init+0x1de>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4a4a      	ldr	r2, [pc, #296]	@ (8010ea0 <HAL_GPIO_Init+0x2d8>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d013      	beq.n	8010da2 <HAL_GPIO_Init+0x1da>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4a49      	ldr	r2, [pc, #292]	@ (8010ea4 <HAL_GPIO_Init+0x2dc>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d00d      	beq.n	8010d9e <HAL_GPIO_Init+0x1d6>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	4a48      	ldr	r2, [pc, #288]	@ (8010ea8 <HAL_GPIO_Init+0x2e0>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d007      	beq.n	8010d9a <HAL_GPIO_Init+0x1d2>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4a47      	ldr	r2, [pc, #284]	@ (8010eac <HAL_GPIO_Init+0x2e4>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d101      	bne.n	8010d96 <HAL_GPIO_Init+0x1ce>
 8010d92:	2305      	movs	r3, #5
 8010d94:	e00a      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010d96:	2306      	movs	r3, #6
 8010d98:	e008      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010d9a:	2304      	movs	r3, #4
 8010d9c:	e006      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e004      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010da2:	2302      	movs	r3, #2
 8010da4:	e002      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010da6:	2301      	movs	r3, #1
 8010da8:	e000      	b.n	8010dac <HAL_GPIO_Init+0x1e4>
 8010daa:	2300      	movs	r3, #0
 8010dac:	697a      	ldr	r2, [r7, #20]
 8010dae:	2103      	movs	r1, #3
 8010db0:	400a      	ands	r2, r1
 8010db2:	00d2      	lsls	r2, r2, #3
 8010db4:	4093      	lsls	r3, r2
 8010db6:	693a      	ldr	r2, [r7, #16]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8010dbc:	4936      	ldr	r1, [pc, #216]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	089b      	lsrs	r3, r3, #2
 8010dc2:	3318      	adds	r3, #24
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	693a      	ldr	r2, [r7, #16]
 8010dc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010dca:	4b33      	ldr	r3, [pc, #204]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	43da      	mvns	r2, r3
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	685a      	ldr	r2, [r3, #4]
 8010dde:	2380      	movs	r3, #128	@ 0x80
 8010de0:	035b      	lsls	r3, r3, #13
 8010de2:	4013      	ands	r3, r2
 8010de4:	d003      	beq.n	8010dee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	4313      	orrs	r3, r2
 8010dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010dee:	4b2a      	ldr	r3, [pc, #168]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010df0:	693a      	ldr	r2, [r7, #16]
 8010df2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8010df4:	4b28      	ldr	r3, [pc, #160]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	43da      	mvns	r2, r3
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	4013      	ands	r3, r2
 8010e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	2380      	movs	r3, #128	@ 0x80
 8010e0a:	039b      	lsls	r3, r3, #14
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	d003      	beq.n	8010e18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8010e10:	693a      	ldr	r2, [r7, #16]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	4313      	orrs	r3, r2
 8010e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010e18:	4b1f      	ldr	r3, [pc, #124]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010e1a:	693a      	ldr	r2, [r7, #16]
 8010e1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8010e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010e20:	2384      	movs	r3, #132	@ 0x84
 8010e22:	58d3      	ldr	r3, [r2, r3]
 8010e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	43da      	mvns	r2, r3
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	4013      	ands	r3, r2
 8010e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	685a      	ldr	r2, [r3, #4]
 8010e34:	2380      	movs	r3, #128	@ 0x80
 8010e36:	029b      	lsls	r3, r3, #10
 8010e38:	4013      	ands	r3, r2
 8010e3a:	d003      	beq.n	8010e44 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8010e3c:	693a      	ldr	r2, [r7, #16]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	4313      	orrs	r3, r2
 8010e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010e44:	4914      	ldr	r1, [pc, #80]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010e46:	2284      	movs	r2, #132	@ 0x84
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8010e4c:	4a12      	ldr	r2, [pc, #72]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010e4e:	2380      	movs	r3, #128	@ 0x80
 8010e50:	58d3      	ldr	r3, [r2, r3]
 8010e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	43da      	mvns	r2, r3
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	685a      	ldr	r2, [r3, #4]
 8010e62:	2380      	movs	r3, #128	@ 0x80
 8010e64:	025b      	lsls	r3, r3, #9
 8010e66:	4013      	ands	r3, r2
 8010e68:	d003      	beq.n	8010e72 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8010e6a:	693a      	ldr	r2, [r7, #16]
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010e72:	4909      	ldr	r1, [pc, #36]	@ (8010e98 <HAL_GPIO_Init+0x2d0>)
 8010e74:	2280      	movs	r2, #128	@ 0x80
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	40da      	lsrs	r2, r3
 8010e88:	1e13      	subs	r3, r2, #0
 8010e8a:	d000      	beq.n	8010e8e <HAL_GPIO_Init+0x2c6>
 8010e8c:	e6a4      	b.n	8010bd8 <HAL_GPIO_Init+0x10>
  }
}
 8010e8e:	46c0      	nop			@ (mov r8, r8)
 8010e90:	46c0      	nop			@ (mov r8, r8)
 8010e92:	46bd      	mov	sp, r7
 8010e94:	b006      	add	sp, #24
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	40021800 	.word	0x40021800
 8010e9c:	50000400 	.word	0x50000400
 8010ea0:	50000800 	.word	0x50000800
 8010ea4:	50000c00 	.word	0x50000c00
 8010ea8:	50001000 	.word	0x50001000
 8010eac:	50001400 	.word	0x50001400

08010eb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8010ebe:	e0c0      	b.n	8011042 <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	409a      	lsls	r2, r3
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	4013      	ands	r3, r2
 8010eca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d100      	bne.n	8010ed4 <HAL_GPIO_DeInit+0x24>
 8010ed2:	e0b3      	b.n	801103c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8010ed4:	4a60      	ldr	r2, [pc, #384]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	089b      	lsrs	r3, r3, #2
 8010eda:	3318      	adds	r3, #24
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	589b      	ldr	r3, [r3, r2]
 8010ee0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	2203      	movs	r2, #3
 8010ee6:	4013      	ands	r3, r2
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	220f      	movs	r2, #15
 8010eec:	409a      	lsls	r2, r3
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	23a0      	movs	r3, #160	@ 0xa0
 8010ef8:	05db      	lsls	r3, r3, #23
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d01f      	beq.n	8010f3e <HAL_GPIO_DeInit+0x8e>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a56      	ldr	r2, [pc, #344]	@ (801105c <HAL_GPIO_DeInit+0x1ac>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d019      	beq.n	8010f3a <HAL_GPIO_DeInit+0x8a>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a55      	ldr	r2, [pc, #340]	@ (8011060 <HAL_GPIO_DeInit+0x1b0>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d013      	beq.n	8010f36 <HAL_GPIO_DeInit+0x86>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4a54      	ldr	r2, [pc, #336]	@ (8011064 <HAL_GPIO_DeInit+0x1b4>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d00d      	beq.n	8010f32 <HAL_GPIO_DeInit+0x82>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a53      	ldr	r2, [pc, #332]	@ (8011068 <HAL_GPIO_DeInit+0x1b8>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d007      	beq.n	8010f2e <HAL_GPIO_DeInit+0x7e>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a52      	ldr	r2, [pc, #328]	@ (801106c <HAL_GPIO_DeInit+0x1bc>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d101      	bne.n	8010f2a <HAL_GPIO_DeInit+0x7a>
 8010f26:	2305      	movs	r3, #5
 8010f28:	e00a      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f2a:	2306      	movs	r3, #6
 8010f2c:	e008      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f2e:	2304      	movs	r3, #4
 8010f30:	e006      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f32:	2303      	movs	r3, #3
 8010f34:	e004      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f36:	2302      	movs	r3, #2
 8010f38:	e002      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e000      	b.n	8010f40 <HAL_GPIO_DeInit+0x90>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	2103      	movs	r1, #3
 8010f44:	400a      	ands	r2, r1
 8010f46:	00d2      	lsls	r2, r2, #3
 8010f48:	4093      	lsls	r3, r2
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d136      	bne.n	8010fbe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8010f50:	4a41      	ldr	r2, [pc, #260]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f52:	2380      	movs	r3, #128	@ 0x80
 8010f54:	58d3      	ldr	r3, [r2, r3]
 8010f56:	693a      	ldr	r2, [r7, #16]
 8010f58:	43d2      	mvns	r2, r2
 8010f5a:	493f      	ldr	r1, [pc, #252]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	2280      	movs	r2, #128	@ 0x80
 8010f60:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8010f62:	4a3d      	ldr	r2, [pc, #244]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f64:	2384      	movs	r3, #132	@ 0x84
 8010f66:	58d3      	ldr	r3, [r2, r3]
 8010f68:	693a      	ldr	r2, [r7, #16]
 8010f6a:	43d2      	mvns	r2, r2
 8010f6c:	493a      	ldr	r1, [pc, #232]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f6e:	4013      	ands	r3, r2
 8010f70:	2284      	movs	r2, #132	@ 0x84
 8010f72:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8010f74:	4b38      	ldr	r3, [pc, #224]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f76:	685a      	ldr	r2, [r3, #4]
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	43d9      	mvns	r1, r3
 8010f7c:	4b36      	ldr	r3, [pc, #216]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f7e:	400a      	ands	r2, r1
 8010f80:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8010f82:	4b35      	ldr	r3, [pc, #212]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	43d9      	mvns	r1, r3
 8010f8a:	4b33      	ldr	r3, [pc, #204]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010f8c:	400a      	ands	r2, r1
 8010f8e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2203      	movs	r2, #3
 8010f94:	4013      	ands	r3, r2
 8010f96:	00db      	lsls	r3, r3, #3
 8010f98:	220f      	movs	r2, #15
 8010f9a:	409a      	lsls	r2, r3
 8010f9c:	0013      	movs	r3, r2
 8010f9e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8010fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	089b      	lsrs	r3, r3, #2
 8010fa6:	3318      	adds	r3, #24
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	589a      	ldr	r2, [r3, r2]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	43d9      	mvns	r1, r3
 8010fb0:	4829      	ldr	r0, [pc, #164]	@ (8011058 <HAL_GPIO_DeInit+0x1a8>)
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	089b      	lsrs	r3, r3, #2
 8010fb6:	400a      	ands	r2, r1
 8010fb8:	3318      	adds	r3, #24
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	2103      	movs	r1, #3
 8010fc8:	4099      	lsls	r1, r3
 8010fca:	000b      	movs	r3, r1
 8010fcc:	431a      	orrs	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	08da      	lsrs	r2, r3, #3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	3208      	adds	r2, #8
 8010fda:	0092      	lsls	r2, r2, #2
 8010fdc:	58d3      	ldr	r3, [r2, r3]
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	2107      	movs	r1, #7
 8010fe2:	400a      	ands	r2, r1
 8010fe4:	0092      	lsls	r2, r2, #2
 8010fe6:	210f      	movs	r1, #15
 8010fe8:	4091      	lsls	r1, r2
 8010fea:	000a      	movs	r2, r1
 8010fec:	43d1      	mvns	r1, r2
 8010fee:	697a      	ldr	r2, [r7, #20]
 8010ff0:	08d2      	lsrs	r2, r2, #3
 8010ff2:	4019      	ands	r1, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3208      	adds	r2, #8
 8010ff8:	0092      	lsls	r2, r2, #2
 8010ffa:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	697a      	ldr	r2, [r7, #20]
 8011002:	0052      	lsls	r2, r2, #1
 8011004:	2103      	movs	r1, #3
 8011006:	4091      	lsls	r1, r2
 8011008:	000a      	movs	r2, r1
 801100a:	43d2      	mvns	r2, r2
 801100c:	401a      	ands	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	2101      	movs	r1, #1
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	4091      	lsls	r1, r2
 801101c:	000a      	movs	r2, r1
 801101e:	43d2      	mvns	r2, r2
 8011020:	401a      	ands	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	697a      	ldr	r2, [r7, #20]
 801102c:	0052      	lsls	r2, r2, #1
 801102e:	2103      	movs	r1, #3
 8011030:	4091      	lsls	r1, r2
 8011032:	000a      	movs	r2, r1
 8011034:	43d2      	mvns	r2, r2
 8011036:	401a      	ands	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	60da      	str	r2, [r3, #12]
    }

    position++;
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	3301      	adds	r3, #1
 8011040:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	40da      	lsrs	r2, r3
 8011048:	1e13      	subs	r3, r2, #0
 801104a:	d000      	beq.n	801104e <HAL_GPIO_DeInit+0x19e>
 801104c:	e738      	b.n	8010ec0 <HAL_GPIO_DeInit+0x10>
  }
}
 801104e:	46c0      	nop			@ (mov r8, r8)
 8011050:	46c0      	nop			@ (mov r8, r8)
 8011052:	46bd      	mov	sp, r7
 8011054:	b006      	add	sp, #24
 8011056:	bd80      	pop	{r7, pc}
 8011058:	40021800 	.word	0x40021800
 801105c:	50000400 	.word	0x50000400
 8011060:	50000800 	.word	0x50000800
 8011064:	50000c00 	.word	0x50000c00
 8011068:	50001000 	.word	0x50001000
 801106c:	50001400 	.word	0x50001400

08011070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	000a      	movs	r2, r1
 801107a:	1cbb      	adds	r3, r7, #2
 801107c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	691b      	ldr	r3, [r3, #16]
 8011082:	1cba      	adds	r2, r7, #2
 8011084:	8812      	ldrh	r2, [r2, #0]
 8011086:	4013      	ands	r3, r2
 8011088:	d004      	beq.n	8011094 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801108a:	230f      	movs	r3, #15
 801108c:	18fb      	adds	r3, r7, r3
 801108e:	2201      	movs	r2, #1
 8011090:	701a      	strb	r2, [r3, #0]
 8011092:	e003      	b.n	801109c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011094:	230f      	movs	r3, #15
 8011096:	18fb      	adds	r3, r7, r3
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 801109c:	230f      	movs	r3, #15
 801109e:	18fb      	adds	r3, r7, r3
 80110a0:	781b      	ldrb	r3, [r3, #0]
}
 80110a2:	0018      	movs	r0, r3
 80110a4:	46bd      	mov	sp, r7
 80110a6:	b004      	add	sp, #16
 80110a8:	bd80      	pop	{r7, pc}

080110aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b082      	sub	sp, #8
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
 80110b2:	0008      	movs	r0, r1
 80110b4:	0011      	movs	r1, r2
 80110b6:	1cbb      	adds	r3, r7, #2
 80110b8:	1c02      	adds	r2, r0, #0
 80110ba:	801a      	strh	r2, [r3, #0]
 80110bc:	1c7b      	adds	r3, r7, #1
 80110be:	1c0a      	adds	r2, r1, #0
 80110c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80110c2:	1c7b      	adds	r3, r7, #1
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80110ca:	1cbb      	adds	r3, r7, #2
 80110cc:	881a      	ldrh	r2, [r3, #0]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80110d2:	e003      	b.n	80110dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80110d4:	1cbb      	adds	r3, r7, #2
 80110d6:	881a      	ldrh	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80110dc:	46c0      	nop			@ (mov r8, r8)
 80110de:	46bd      	mov	sp, r7
 80110e0:	b002      	add	sp, #8
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	000a      	movs	r2, r1
 80110ee:	1cbb      	adds	r3, r7, #2
 80110f0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	695b      	ldr	r3, [r3, #20]
 80110f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80110f8:	1cbb      	adds	r3, r7, #2
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	4013      	ands	r3, r2
 8011100:	041a      	lsls	r2, r3, #16
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	43db      	mvns	r3, r3
 8011106:	1cb9      	adds	r1, r7, #2
 8011108:	8809      	ldrh	r1, [r1, #0]
 801110a:	400b      	ands	r3, r1
 801110c:	431a      	orrs	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	619a      	str	r2, [r3, #24]
}
 8011112:	46c0      	nop			@ (mov r8, r8)
 8011114:	46bd      	mov	sp, r7
 8011116:	b004      	add	sp, #16
 8011118:	bd80      	pop	{r7, pc}
	...

0801111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	0002      	movs	r2, r0
 8011124:	1dbb      	adds	r3, r7, #6
 8011126:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8011128:	4b10      	ldr	r3, [pc, #64]	@ (801116c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	1dba      	adds	r2, r7, #6
 801112e:	8812      	ldrh	r2, [r2, #0]
 8011130:	4013      	ands	r3, r2
 8011132:	d008      	beq.n	8011146 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8011134:	4b0d      	ldr	r3, [pc, #52]	@ (801116c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8011136:	1dba      	adds	r2, r7, #6
 8011138:	8812      	ldrh	r2, [r2, #0]
 801113a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 801113c:	1dbb      	adds	r3, r7, #6
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	0018      	movs	r0, r3
 8011142:	f000 f815 	bl	8011170 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8011146:	4b09      	ldr	r3, [pc, #36]	@ (801116c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	1dba      	adds	r2, r7, #6
 801114c:	8812      	ldrh	r2, [r2, #0]
 801114e:	4013      	ands	r3, r2
 8011150:	d008      	beq.n	8011164 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8011152:	4b06      	ldr	r3, [pc, #24]	@ (801116c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8011154:	1dba      	adds	r2, r7, #6
 8011156:	8812      	ldrh	r2, [r2, #0]
 8011158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 801115a:	1dbb      	adds	r3, r7, #6
 801115c:	881b      	ldrh	r3, [r3, #0]
 801115e:	0018      	movs	r0, r3
 8011160:	f000 f810 	bl	8011184 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8011164:	46c0      	nop			@ (mov r8, r8)
 8011166:	46bd      	mov	sp, r7
 8011168:	b002      	add	sp, #8
 801116a:	bd80      	pop	{r7, pc}
 801116c:	40021800 	.word	0x40021800

08011170 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	0002      	movs	r2, r0
 8011178:	1dbb      	adds	r3, r7, #6
 801117a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 801117c:	46c0      	nop			@ (mov r8, r8)
 801117e:	46bd      	mov	sp, r7
 8011180:	b002      	add	sp, #8
 8011182:	bd80      	pop	{r7, pc}

08011184 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	0002      	movs	r2, r0
 801118c:	1dbb      	adds	r3, r7, #6
 801118e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8011190:	46c0      	nop			@ (mov r8, r8)
 8011192:	46bd      	mov	sp, r7
 8011194:	b002      	add	sp, #8
 8011196:	bd80      	pop	{r7, pc}

08011198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e08f      	b.n	80112ca <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2241      	movs	r2, #65	@ 0x41
 80111ae:	5c9b      	ldrb	r3, [r3, r2]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d107      	bne.n	80111c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2240      	movs	r2, #64	@ 0x40
 80111ba:	2100      	movs	r1, #0
 80111bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	0018      	movs	r0, r3
 80111c2:	f7f8 f98f 	bl	80094e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2241      	movs	r2, #65	@ 0x41
 80111ca:	2124      	movs	r1, #36	@ 0x24
 80111cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2101      	movs	r1, #1
 80111da:	438a      	bics	r2, r1
 80111dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	685a      	ldr	r2, [r3, #4]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	493b      	ldr	r1, [pc, #236]	@ (80112d4 <HAL_I2C_Init+0x13c>)
 80111e8:	400a      	ands	r2, r1
 80111ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	689a      	ldr	r2, [r3, #8]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4938      	ldr	r1, [pc, #224]	@ (80112d8 <HAL_I2C_Init+0x140>)
 80111f8:	400a      	ands	r2, r1
 80111fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d108      	bne.n	8011216 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	689a      	ldr	r2, [r3, #8]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2180      	movs	r1, #128	@ 0x80
 801120e:	0209      	lsls	r1, r1, #8
 8011210:	430a      	orrs	r2, r1
 8011212:	609a      	str	r2, [r3, #8]
 8011214:	e007      	b.n	8011226 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	689a      	ldr	r2, [r3, #8]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2184      	movs	r1, #132	@ 0x84
 8011220:	0209      	lsls	r1, r1, #8
 8011222:	430a      	orrs	r2, r1
 8011224:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	2b02      	cmp	r3, #2
 801122c:	d109      	bne.n	8011242 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	685a      	ldr	r2, [r3, #4]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2180      	movs	r1, #128	@ 0x80
 801123a:	0109      	lsls	r1, r1, #4
 801123c:	430a      	orrs	r2, r1
 801123e:	605a      	str	r2, [r3, #4]
 8011240:	e007      	b.n	8011252 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	685a      	ldr	r2, [r3, #4]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4923      	ldr	r1, [pc, #140]	@ (80112dc <HAL_I2C_Init+0x144>)
 801124e:	400a      	ands	r2, r1
 8011250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	685a      	ldr	r2, [r3, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4920      	ldr	r1, [pc, #128]	@ (80112e0 <HAL_I2C_Init+0x148>)
 801125e:	430a      	orrs	r2, r1
 8011260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	491a      	ldr	r1, [pc, #104]	@ (80112d8 <HAL_I2C_Init+0x140>)
 801126e:	400a      	ands	r2, r1
 8011270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	691a      	ldr	r2, [r3, #16]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	695b      	ldr	r3, [r3, #20]
 801127a:	431a      	orrs	r2, r3
 801127c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	69d9      	ldr	r1, [r3, #28]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6a1a      	ldr	r2, [r3, #32]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	430a      	orrs	r2, r1
 801129a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2101      	movs	r1, #1
 80112a8:	430a      	orrs	r2, r1
 80112aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2241      	movs	r2, #65	@ 0x41
 80112b6:	2120      	movs	r1, #32
 80112b8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2242      	movs	r2, #66	@ 0x42
 80112c4:	2100      	movs	r1, #0
 80112c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	0018      	movs	r0, r3
 80112cc:	46bd      	mov	sp, r7
 80112ce:	b002      	add	sp, #8
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	46c0      	nop			@ (mov r8, r8)
 80112d4:	f0ffffff 	.word	0xf0ffffff
 80112d8:	ffff7fff 	.word	0xffff7fff
 80112dc:	fffff7ff 	.word	0xfffff7ff
 80112e0:	02008000 	.word	0x02008000

080112e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e022      	b.n	801133c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2241      	movs	r2, #65	@ 0x41
 80112fa:	2124      	movs	r1, #36	@ 0x24
 80112fc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2101      	movs	r1, #1
 801130a:	438a      	bics	r2, r1
 801130c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	0018      	movs	r0, r3
 8011312:	f7f8 f9ad 	bl	8009670 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2241      	movs	r2, #65	@ 0x41
 8011320:	2100      	movs	r1, #0
 8011322:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2242      	movs	r2, #66	@ 0x42
 801132e:	2100      	movs	r1, #0
 8011330:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2240      	movs	r2, #64	@ 0x40
 8011336:	2100      	movs	r1, #0
 8011338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	0018      	movs	r0, r3
 801133e:	46bd      	mov	sp, r7
 8011340:	b002      	add	sp, #8
 8011342:	bd80      	pop	{r7, pc}

08011344 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8011344:	b5b0      	push	{r4, r5, r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af02      	add	r7, sp, #8
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	0008      	movs	r0, r1
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	0019      	movs	r1, r3
 8011352:	230a      	movs	r3, #10
 8011354:	18fb      	adds	r3, r7, r3
 8011356:	1c02      	adds	r2, r0, #0
 8011358:	801a      	strh	r2, [r3, #0]
 801135a:	2308      	movs	r3, #8
 801135c:	18fb      	adds	r3, r7, r3
 801135e:	1c0a      	adds	r2, r1, #0
 8011360:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2241      	movs	r2, #65	@ 0x41
 8011366:	5c9b      	ldrb	r3, [r3, r2]
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b20      	cmp	r3, #32
 801136c:	d000      	beq.n	8011370 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801136e:	e0dd      	b.n	801152c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	699a      	ldr	r2, [r3, #24]
 8011376:	2380      	movs	r3, #128	@ 0x80
 8011378:	021b      	lsls	r3, r3, #8
 801137a:	401a      	ands	r2, r3
 801137c:	2380      	movs	r3, #128	@ 0x80
 801137e:	021b      	lsls	r3, r3, #8
 8011380:	429a      	cmp	r2, r3
 8011382:	d101      	bne.n	8011388 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8011384:	2302      	movs	r3, #2
 8011386:	e0d2      	b.n	801152e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2240      	movs	r2, #64	@ 0x40
 801138c:	5c9b      	ldrb	r3, [r3, r2]
 801138e:	2b01      	cmp	r3, #1
 8011390:	d101      	bne.n	8011396 <HAL_I2C_Master_Transmit_DMA+0x52>
 8011392:	2302      	movs	r3, #2
 8011394:	e0cb      	b.n	801152e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2240      	movs	r2, #64	@ 0x40
 801139a:	2101      	movs	r1, #1
 801139c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2241      	movs	r2, #65	@ 0x41
 80113a2:	2121      	movs	r1, #33	@ 0x21
 80113a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2242      	movs	r2, #66	@ 0x42
 80113aa:	2110      	movs	r1, #16
 80113ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2200      	movs	r2, #0
 80113b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2208      	movs	r2, #8
 80113be:	18ba      	adds	r2, r7, r2
 80113c0:	8812      	ldrh	r2, [r2, #0]
 80113c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	4a5c      	ldr	r2, [pc, #368]	@ (8011538 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80113c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	4a5b      	ldr	r2, [pc, #364]	@ (801153c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80113ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	2bff      	cmp	r3, #255	@ 0xff
 80113d8:	d906      	bls.n	80113e8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	22ff      	movs	r2, #255	@ 0xff
 80113de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80113e0:	2380      	movs	r3, #128	@ 0x80
 80113e2:	045b      	lsls	r3, r3, #17
 80113e4:	617b      	str	r3, [r7, #20]
 80113e6:	e007      	b.n	80113f8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80113f2:	2380      	movs	r3, #128	@ 0x80
 80113f4:	049b      	lsls	r3, r3, #18
 80113f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d100      	bne.n	8011402 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8011400:	e078      	b.n	80114f4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011406:	2b00      	cmp	r3, #0
 8011408:	d023      	beq.n	8011452 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801140e:	4a4c      	ldr	r2, [pc, #304]	@ (8011540 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8011410:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011416:	4a4b      	ldr	r2, [pc, #300]	@ (8011544 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8011418:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801141e:	2200      	movs	r2, #0
 8011420:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011426:	2200      	movs	r2, #0
 8011428:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801142e:	6879      	ldr	r1, [r7, #4]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	3328      	adds	r3, #40	@ 0x28
 8011436:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801143c:	2513      	movs	r5, #19
 801143e:	197c      	adds	r4, r7, r5
 8011440:	f7fe fdb8 	bl	800ffb4 <HAL_DMA_Start_IT>
 8011444:	0003      	movs	r3, r0
 8011446:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011448:	197b      	adds	r3, r7, r5
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d13d      	bne.n	80114cc <HAL_I2C_Master_Transmit_DMA+0x188>
 8011450:	e013      	b.n	801147a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2241      	movs	r2, #65	@ 0x41
 8011456:	2120      	movs	r1, #32
 8011458:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2242      	movs	r2, #66	@ 0x42
 801145e:	2100      	movs	r1, #0
 8011460:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011466:	2280      	movs	r2, #128	@ 0x80
 8011468:	431a      	orrs	r2, r3
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2240      	movs	r2, #64	@ 0x40
 8011472:	2100      	movs	r1, #0
 8011474:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e059      	b.n	801152e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801147e:	b2da      	uxtb	r2, r3
 8011480:	697c      	ldr	r4, [r7, #20]
 8011482:	230a      	movs	r3, #10
 8011484:	18fb      	adds	r3, r7, r3
 8011486:	8819      	ldrh	r1, [r3, #0]
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	4b2f      	ldr	r3, [pc, #188]	@ (8011548 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	0023      	movs	r3, r4
 8011490:	f001 fd94 	bl	8012fbc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011498:	b29a      	uxth	r2, r3
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2240      	movs	r2, #64	@ 0x40
 80114aa:	2100      	movs	r1, #0
 80114ac:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2110      	movs	r1, #16
 80114b2:	0018      	movs	r0, r3
 80114b4:	f001 fdbc 	bl	8013030 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2180      	movs	r1, #128	@ 0x80
 80114c4:	01c9      	lsls	r1, r1, #7
 80114c6:	430a      	orrs	r2, r1
 80114c8:	601a      	str	r2, [r3, #0]
 80114ca:	e02d      	b.n	8011528 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2241      	movs	r2, #65	@ 0x41
 80114d0:	2120      	movs	r1, #32
 80114d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2242      	movs	r2, #66	@ 0x42
 80114d8:	2100      	movs	r1, #0
 80114da:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114e0:	2210      	movs	r2, #16
 80114e2:	431a      	orrs	r2, r3
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2240      	movs	r2, #64	@ 0x40
 80114ec:	2100      	movs	r1, #0
 80114ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80114f0:	2301      	movs	r3, #1
 80114f2:	e01c      	b.n	801152e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4a15      	ldr	r2, [pc, #84]	@ (801154c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80114f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	2380      	movs	r3, #128	@ 0x80
 8011502:	049c      	lsls	r4, r3, #18
 8011504:	230a      	movs	r3, #10
 8011506:	18fb      	adds	r3, r7, r3
 8011508:	8819      	ldrh	r1, [r3, #0]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	4b0e      	ldr	r3, [pc, #56]	@ (8011548 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	0023      	movs	r3, r4
 8011512:	f001 fd53 	bl	8012fbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2240      	movs	r2, #64	@ 0x40
 801151a:	2100      	movs	r1, #0
 801151c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2101      	movs	r1, #1
 8011522:	0018      	movs	r0, r3
 8011524:	f001 fd84 	bl	8013030 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	e000      	b.n	801152e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801152c:	2302      	movs	r3, #2
  }
}
 801152e:	0018      	movs	r0, r3
 8011530:	46bd      	mov	sp, r7
 8011532:	b006      	add	sp, #24
 8011534:	bdb0      	pop	{r4, r5, r7, pc}
 8011536:	46c0      	nop			@ (mov r8, r8)
 8011538:	ffff0000 	.word	0xffff0000
 801153c:	08011d61 	.word	0x08011d61
 8011540:	08012e0d 	.word	0x08012e0d
 8011544:	08012f4d 	.word	0x08012f4d
 8011548:	80002000 	.word	0x80002000
 801154c:	0801190d 	.word	0x0801190d

08011550 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8011550:	b5b0      	push	{r4, r5, r7, lr}
 8011552:	b088      	sub	sp, #32
 8011554:	af02      	add	r7, sp, #8
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	0008      	movs	r0, r1
 801155a:	607a      	str	r2, [r7, #4]
 801155c:	0019      	movs	r1, r3
 801155e:	230a      	movs	r3, #10
 8011560:	18fb      	adds	r3, r7, r3
 8011562:	1c02      	adds	r2, r0, #0
 8011564:	801a      	strh	r2, [r3, #0]
 8011566:	2308      	movs	r3, #8
 8011568:	18fb      	adds	r3, r7, r3
 801156a:	1c0a      	adds	r2, r1, #0
 801156c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2241      	movs	r2, #65	@ 0x41
 8011572:	5c9b      	ldrb	r3, [r3, r2]
 8011574:	b2db      	uxtb	r3, r3
 8011576:	2b20      	cmp	r3, #32
 8011578:	d000      	beq.n	801157c <HAL_I2C_Master_Receive_DMA+0x2c>
 801157a:	e0dd      	b.n	8011738 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	699a      	ldr	r2, [r3, #24]
 8011582:	2380      	movs	r3, #128	@ 0x80
 8011584:	021b      	lsls	r3, r3, #8
 8011586:	401a      	ands	r2, r3
 8011588:	2380      	movs	r3, #128	@ 0x80
 801158a:	021b      	lsls	r3, r3, #8
 801158c:	429a      	cmp	r2, r3
 801158e:	d101      	bne.n	8011594 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8011590:	2302      	movs	r3, #2
 8011592:	e0d2      	b.n	801173a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2240      	movs	r2, #64	@ 0x40
 8011598:	5c9b      	ldrb	r3, [r3, r2]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d101      	bne.n	80115a2 <HAL_I2C_Master_Receive_DMA+0x52>
 801159e:	2302      	movs	r3, #2
 80115a0:	e0cb      	b.n	801173a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2240      	movs	r2, #64	@ 0x40
 80115a6:	2101      	movs	r1, #1
 80115a8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	2241      	movs	r2, #65	@ 0x41
 80115ae:	2122      	movs	r1, #34	@ 0x22
 80115b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2242      	movs	r2, #66	@ 0x42
 80115b6:	2110      	movs	r1, #16
 80115b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2200      	movs	r2, #0
 80115be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2208      	movs	r2, #8
 80115ca:	18ba      	adds	r2, r7, r2
 80115cc:	8812      	ldrh	r2, [r2, #0]
 80115ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	4a5c      	ldr	r2, [pc, #368]	@ (8011744 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80115d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	4a5b      	ldr	r2, [pc, #364]	@ (8011748 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80115da:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	2bff      	cmp	r3, #255	@ 0xff
 80115e4:	d906      	bls.n	80115f4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	22ff      	movs	r2, #255	@ 0xff
 80115ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80115ec:	2380      	movs	r3, #128	@ 0x80
 80115ee:	045b      	lsls	r3, r3, #17
 80115f0:	617b      	str	r3, [r7, #20]
 80115f2:	e007      	b.n	8011604 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80115fe:	2380      	movs	r3, #128	@ 0x80
 8011600:	049b      	lsls	r3, r3, #18
 8011602:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011608:	2b00      	cmp	r3, #0
 801160a:	d100      	bne.n	801160e <HAL_I2C_Master_Receive_DMA+0xbe>
 801160c:	e078      	b.n	8011700 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011612:	2b00      	cmp	r3, #0
 8011614:	d023      	beq.n	801165e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801161a:	4a4c      	ldr	r2, [pc, #304]	@ (801174c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 801161c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011622:	4a4b      	ldr	r2, [pc, #300]	@ (8011750 <HAL_I2C_Master_Receive_DMA+0x200>)
 8011624:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801162a:	2200      	movs	r2, #0
 801162c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011632:	2200      	movs	r2, #0
 8011634:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	3324      	adds	r3, #36	@ 0x24
 8011640:	0019      	movs	r1, r3
 8011642:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8011648:	2513      	movs	r5, #19
 801164a:	197c      	adds	r4, r7, r5
 801164c:	f7fe fcb2 	bl	800ffb4 <HAL_DMA_Start_IT>
 8011650:	0003      	movs	r3, r0
 8011652:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011654:	197b      	adds	r3, r7, r5
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d13d      	bne.n	80116d8 <HAL_I2C_Master_Receive_DMA+0x188>
 801165c:	e013      	b.n	8011686 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2241      	movs	r2, #65	@ 0x41
 8011662:	2120      	movs	r1, #32
 8011664:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2242      	movs	r2, #66	@ 0x42
 801166a:	2100      	movs	r1, #0
 801166c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011672:	2280      	movs	r2, #128	@ 0x80
 8011674:	431a      	orrs	r2, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2240      	movs	r2, #64	@ 0x40
 801167e:	2100      	movs	r1, #0
 8011680:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	e059      	b.n	801173a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801168a:	b2da      	uxtb	r2, r3
 801168c:	697c      	ldr	r4, [r7, #20]
 801168e:	230a      	movs	r3, #10
 8011690:	18fb      	adds	r3, r7, r3
 8011692:	8819      	ldrh	r1, [r3, #0]
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	4b2f      	ldr	r3, [pc, #188]	@ (8011754 <HAL_I2C_Master_Receive_DMA+0x204>)
 8011698:	9300      	str	r3, [sp, #0]
 801169a:	0023      	movs	r3, r4
 801169c:	f001 fc8e 	bl	8012fbc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116aa:	1ad3      	subs	r3, r2, r3
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2240      	movs	r2, #64	@ 0x40
 80116b6:	2100      	movs	r1, #0
 80116b8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2110      	movs	r1, #16
 80116be:	0018      	movs	r0, r3
 80116c0:	f001 fcb6 	bl	8013030 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2180      	movs	r1, #128	@ 0x80
 80116d0:	0209      	lsls	r1, r1, #8
 80116d2:	430a      	orrs	r2, r1
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	e02d      	b.n	8011734 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2241      	movs	r2, #65	@ 0x41
 80116dc:	2120      	movs	r1, #32
 80116de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2242      	movs	r2, #66	@ 0x42
 80116e4:	2100      	movs	r1, #0
 80116e6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116ec:	2210      	movs	r2, #16
 80116ee:	431a      	orrs	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2240      	movs	r2, #64	@ 0x40
 80116f8:	2100      	movs	r1, #0
 80116fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e01c      	b.n	801173a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	4a15      	ldr	r2, [pc, #84]	@ (8011758 <HAL_I2C_Master_Receive_DMA+0x208>)
 8011704:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801170a:	b2da      	uxtb	r2, r3
 801170c:	2380      	movs	r3, #128	@ 0x80
 801170e:	049c      	lsls	r4, r3, #18
 8011710:	230a      	movs	r3, #10
 8011712:	18fb      	adds	r3, r7, r3
 8011714:	8819      	ldrh	r1, [r3, #0]
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	4b0e      	ldr	r3, [pc, #56]	@ (8011754 <HAL_I2C_Master_Receive_DMA+0x204>)
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	0023      	movs	r3, r4
 801171e:	f001 fc4d 	bl	8012fbc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2240      	movs	r2, #64	@ 0x40
 8011726:	2100      	movs	r1, #0
 8011728:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2102      	movs	r1, #2
 801172e:	0018      	movs	r0, r3
 8011730:	f001 fc7e 	bl	8013030 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011734:	2300      	movs	r3, #0
 8011736:	e000      	b.n	801173a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8011738:	2302      	movs	r3, #2
  }
}
 801173a:	0018      	movs	r0, r3
 801173c:	46bd      	mov	sp, r7
 801173e:	b006      	add	sp, #24
 8011740:	bdb0      	pop	{r4, r5, r7, pc}
 8011742:	46c0      	nop			@ (mov r8, r8)
 8011744:	ffff0000 	.word	0xffff0000
 8011748:	08011d61 	.word	0x08011d61
 801174c:	08012ead 	.word	0x08012ead
 8011750:	08012f4d 	.word	0x08012f4d
 8011754:	80002400 	.word	0x80002400
 8011758:	0801190d 	.word	0x0801190d

0801175c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	699b      	ldr	r3, [r3, #24]
 801176a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011778:	2b00      	cmp	r3, #0
 801177a:	d005      	beq.n	8011788 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	68f9      	ldr	r1, [r7, #12]
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	4798      	blx	r3
  }
}
 8011788:	46c0      	nop			@ (mov r8, r8)
 801178a:	46bd      	mov	sp, r7
 801178c:	b004      	add	sp, #16
 801178e:	bd80      	pop	{r7, pc}

08011790 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b086      	sub	sp, #24
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80117a8:	697a      	ldr	r2, [r7, #20]
 80117aa:	2380      	movs	r3, #128	@ 0x80
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	4013      	ands	r3, r2
 80117b0:	d00e      	beq.n	80117d0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2280      	movs	r2, #128	@ 0x80
 80117b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80117b8:	d00a      	beq.n	80117d0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117be:	2201      	movs	r2, #1
 80117c0:	431a      	orrs	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2280      	movs	r2, #128	@ 0x80
 80117cc:	0052      	lsls	r2, r2, #1
 80117ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	2380      	movs	r3, #128	@ 0x80
 80117d4:	00db      	lsls	r3, r3, #3
 80117d6:	4013      	ands	r3, r2
 80117d8:	d00e      	beq.n	80117f8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	2280      	movs	r2, #128	@ 0x80
 80117de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80117e0:	d00a      	beq.n	80117f8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117e6:	2208      	movs	r2, #8
 80117e8:	431a      	orrs	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2280      	movs	r2, #128	@ 0x80
 80117f4:	00d2      	lsls	r2, r2, #3
 80117f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	2380      	movs	r3, #128	@ 0x80
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4013      	ands	r3, r2
 8011800:	d00e      	beq.n	8011820 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	2280      	movs	r2, #128	@ 0x80
 8011806:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8011808:	d00a      	beq.n	8011820 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801180e:	2202      	movs	r2, #2
 8011810:	431a      	orrs	r2, r3
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2280      	movs	r2, #128	@ 0x80
 801181c:	0092      	lsls	r2, r2, #2
 801181e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011824:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	220b      	movs	r2, #11
 801182a:	4013      	ands	r3, r2
 801182c:	d005      	beq.n	801183a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	0011      	movs	r1, r2
 8011834:	0018      	movs	r0, r3
 8011836:	f001 f99b 	bl	8012b70 <I2C_ITError>
  }
}
 801183a:	46c0      	nop			@ (mov r8, r8)
 801183c:	46bd      	mov	sp, r7
 801183e:	b006      	add	sp, #24
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b082      	sub	sp, #8
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801184a:	46c0      	nop			@ (mov r8, r8)
 801184c:	46bd      	mov	sp, r7
 801184e:	b002      	add	sp, #8
 8011850:	bd80      	pop	{r7, pc}

08011852 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b082      	sub	sp, #8
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801185a:	46c0      	nop			@ (mov r8, r8)
 801185c:	46bd      	mov	sp, r7
 801185e:	b002      	add	sp, #8
 8011860:	bd80      	pop	{r7, pc}

08011862 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011862:	b580      	push	{r7, lr}
 8011864:	b082      	sub	sp, #8
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801186a:	46c0      	nop			@ (mov r8, r8)
 801186c:	46bd      	mov	sp, r7
 801186e:	b002      	add	sp, #8
 8011870:	bd80      	pop	{r7, pc}

08011872 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011872:	b580      	push	{r7, lr}
 8011874:	b082      	sub	sp, #8
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801187a:	46c0      	nop			@ (mov r8, r8)
 801187c:	46bd      	mov	sp, r7
 801187e:	b002      	add	sp, #8
 8011880:	bd80      	pop	{r7, pc}

08011882 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	0008      	movs	r0, r1
 801188c:	0011      	movs	r1, r2
 801188e:	1cfb      	adds	r3, r7, #3
 8011890:	1c02      	adds	r2, r0, #0
 8011892:	701a      	strb	r2, [r3, #0]
 8011894:	003b      	movs	r3, r7
 8011896:	1c0a      	adds	r2, r1, #0
 8011898:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801189a:	46c0      	nop			@ (mov r8, r8)
 801189c:	46bd      	mov	sp, r7
 801189e:	b002      	add	sp, #8
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80118aa:	46c0      	nop			@ (mov r8, r8)
 80118ac:	46bd      	mov	sp, r7
 80118ae:	b002      	add	sp, #8
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b082      	sub	sp, #8
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80118ba:	46c0      	nop			@ (mov r8, r8)
 80118bc:	46bd      	mov	sp, r7
 80118be:	b002      	add	sp, #8
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b082      	sub	sp, #8
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80118ca:	46c0      	nop			@ (mov r8, r8)
 80118cc:	46bd      	mov	sp, r7
 80118ce:	b002      	add	sp, #8
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b082      	sub	sp, #8
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80118da:	46c0      	nop			@ (mov r8, r8)
 80118dc:	46bd      	mov	sp, r7
 80118de:	b002      	add	sp, #8
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80118ea:	46c0      	nop			@ (mov r8, r8)
 80118ec:	46bd      	mov	sp, r7
 80118ee:	b002      	add	sp, #8
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b082      	sub	sp, #8
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2241      	movs	r2, #65	@ 0x41
 80118fe:	5c9b      	ldrb	r3, [r3, r2]
 8011900:	b2db      	uxtb	r3, r3
}
 8011902:	0018      	movs	r0, r3
 8011904:	46bd      	mov	sp, r7
 8011906:	b002      	add	sp, #8
 8011908:	bd80      	pop	{r7, pc}
	...

0801190c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801190c:	b590      	push	{r4, r7, lr}
 801190e:	b089      	sub	sp, #36	@ 0x24
 8011910:	af02      	add	r7, sp, #8
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2240      	movs	r2, #64	@ 0x40
 8011920:	5c9b      	ldrb	r3, [r3, r2]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d101      	bne.n	801192a <I2C_Master_ISR_IT+0x1e>
 8011926:	2302      	movs	r3, #2
 8011928:	e113      	b.n	8011b52 <I2C_Master_ISR_IT+0x246>
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2240      	movs	r2, #64	@ 0x40
 801192e:	2101      	movs	r1, #1
 8011930:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	2210      	movs	r2, #16
 8011936:	4013      	ands	r3, r2
 8011938:	d012      	beq.n	8011960 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2210      	movs	r2, #16
 801193e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011940:	d00e      	beq.n	8011960 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2210      	movs	r2, #16
 8011948:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801194e:	2204      	movs	r2, #4
 8011950:	431a      	orrs	r2, r3
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	0018      	movs	r0, r3
 801195a:	f001 fa34 	bl	8012dc6 <I2C_Flush_TXDR>
 801195e:	e0e5      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	2204      	movs	r2, #4
 8011964:	4013      	ands	r3, r2
 8011966:	d021      	beq.n	80119ac <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2204      	movs	r2, #4
 801196c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801196e:	d01d      	beq.n	80119ac <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2204      	movs	r2, #4
 8011974:	4393      	bics	r3, r2
 8011976:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011982:	b2d2      	uxtb	r2, r2
 8011984:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011994:	3b01      	subs	r3, #1
 8011996:	b29a      	uxth	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	3b01      	subs	r3, #1
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80119aa:	e0bf      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	2202      	movs	r2, #2
 80119b0:	4013      	ands	r3, r2
 80119b2:	d01c      	beq.n	80119ee <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2202      	movs	r2, #2
 80119b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80119ba:	d018      	beq.n	80119ee <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c0:	781a      	ldrb	r2, [r3, #0]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119d6:	3b01      	subs	r3, #1
 80119d8:	b29a      	uxth	r2, r3
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	3b01      	subs	r3, #1
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80119ec:	e09e      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	2280      	movs	r2, #128	@ 0x80
 80119f2:	4013      	ands	r3, r2
 80119f4:	d100      	bne.n	80119f8 <I2C_Master_ISR_IT+0xec>
 80119f6:	e069      	b.n	8011acc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2240      	movs	r2, #64	@ 0x40
 80119fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80119fe:	d065      	beq.n	8011acc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d04a      	beq.n	8011aa0 <I2C_Master_ISR_IT+0x194>
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d146      	bne.n	8011aa0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	2112      	movs	r1, #18
 8011a1c:	187b      	adds	r3, r7, r1
 8011a1e:	0592      	lsls	r2, r2, #22
 8011a20:	0d92      	lsrs	r2, r2, #22
 8011a22:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	2bff      	cmp	r3, #255	@ 0xff
 8011a2c:	d910      	bls.n	8011a50 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	22ff      	movs	r2, #255	@ 0xff
 8011a32:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a38:	b2da      	uxtb	r2, r3
 8011a3a:	2380      	movs	r3, #128	@ 0x80
 8011a3c:	045c      	lsls	r4, r3, #17
 8011a3e:	187b      	adds	r3, r7, r1
 8011a40:	8819      	ldrh	r1, [r3, #0]
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	2300      	movs	r3, #0
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	0023      	movs	r3, r4
 8011a4a:	f001 fab7 	bl	8012fbc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a4e:	e03c      	b.n	8011aca <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8011b5c <I2C_Master_ISR_IT+0x250>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d00e      	beq.n	8011a82 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a68:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a6e:	2312      	movs	r3, #18
 8011a70:	18fb      	adds	r3, r7, r3
 8011a72:	8819      	ldrh	r1, [r3, #0]
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	2300      	movs	r3, #0
 8011a78:	9300      	str	r3, [sp, #0]
 8011a7a:	0023      	movs	r3, r4
 8011a7c:	f001 fa9e 	bl	8012fbc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a80:	e023      	b.n	8011aca <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a86:	b2da      	uxtb	r2, r3
 8011a88:	2380      	movs	r3, #128	@ 0x80
 8011a8a:	049c      	lsls	r4, r3, #18
 8011a8c:	2312      	movs	r3, #18
 8011a8e:	18fb      	adds	r3, r7, r3
 8011a90:	8819      	ldrh	r1, [r3, #0]
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	2300      	movs	r3, #0
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	0023      	movs	r3, r4
 8011a9a:	f001 fa8f 	bl	8012fbc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a9e:	e014      	b.n	8011aca <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	685a      	ldr	r2, [r3, #4]
 8011aa6:	2380      	movs	r3, #128	@ 0x80
 8011aa8:	049b      	lsls	r3, r3, #18
 8011aaa:	401a      	ands	r2, r3
 8011aac:	2380      	movs	r3, #128	@ 0x80
 8011aae:	049b      	lsls	r3, r3, #18
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d004      	beq.n	8011abe <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	0018      	movs	r0, r3
 8011ab8:	f000 fd06 	bl	80124c8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011abc:	e036      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2140      	movs	r1, #64	@ 0x40
 8011ac2:	0018      	movs	r0, r3
 8011ac4:	f001 f854 	bl	8012b70 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011ac8:	e030      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
 8011aca:	e02f      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2240      	movs	r2, #64	@ 0x40
 8011ad0:	4013      	ands	r3, r2
 8011ad2:	d02b      	beq.n	8011b2c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2240      	movs	r2, #64	@ 0x40
 8011ad8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011ada:	d027      	beq.n	8011b2c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d11d      	bne.n	8011b22 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	685a      	ldr	r2, [r3, #4]
 8011aec:	2380      	movs	r3, #128	@ 0x80
 8011aee:	049b      	lsls	r3, r3, #18
 8011af0:	401a      	ands	r2, r3
 8011af2:	2380      	movs	r3, #128	@ 0x80
 8011af4:	049b      	lsls	r3, r3, #18
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d018      	beq.n	8011b2c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011afe:	4a17      	ldr	r2, [pc, #92]	@ (8011b5c <I2C_Master_ISR_IT+0x250>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d109      	bne.n	8011b18 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2180      	movs	r1, #128	@ 0x80
 8011b10:	01c9      	lsls	r1, r1, #7
 8011b12:	430a      	orrs	r2, r1
 8011b14:	605a      	str	r2, [r3, #4]
 8011b16:	e009      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	0018      	movs	r0, r3
 8011b1c:	f000 fcd4 	bl	80124c8 <I2C_ITMasterSeqCplt>
 8011b20:	e004      	b.n	8011b2c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2140      	movs	r1, #64	@ 0x40
 8011b26:	0018      	movs	r0, r3
 8011b28:	f001 f822 	bl	8012b70 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	2220      	movs	r2, #32
 8011b30:	4013      	ands	r3, r2
 8011b32:	d009      	beq.n	8011b48 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2220      	movs	r2, #32
 8011b38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b3a:	d005      	beq.n	8011b48 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011b3c:	697a      	ldr	r2, [r7, #20]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	0011      	movs	r1, r2
 8011b42:	0018      	movs	r0, r3
 8011b44:	f000 fd66 	bl	8012614 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2240      	movs	r2, #64	@ 0x40
 8011b4c:	2100      	movs	r1, #0
 8011b4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	0018      	movs	r0, r3
 8011b54:	46bd      	mov	sp, r7
 8011b56:	b007      	add	sp, #28
 8011b58:	bd90      	pop	{r4, r7, pc}
 8011b5a:	46c0      	nop			@ (mov r8, r8)
 8011b5c:	ffff0000 	.word	0xffff0000

08011b60 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2240      	movs	r2, #64	@ 0x40
 8011b7a:	5c9b      	ldrb	r3, [r3, r2]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d101      	bne.n	8011b84 <I2C_Slave_ISR_IT+0x24>
 8011b80:	2302      	movs	r3, #2
 8011b82:	e0e7      	b.n	8011d54 <I2C_Slave_ISR_IT+0x1f4>
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2240      	movs	r2, #64	@ 0x40
 8011b88:	2101      	movs	r1, #1
 8011b8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	2220      	movs	r2, #32
 8011b90:	4013      	ands	r3, r2
 8011b92:	d00a      	beq.n	8011baa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2220      	movs	r2, #32
 8011b98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b9a:	d006      	beq.n	8011baa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011b9c:	693a      	ldr	r2, [r7, #16]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	0011      	movs	r1, r2
 8011ba2:	0018      	movs	r0, r3
 8011ba4:	f000 fe04 	bl	80127b0 <I2C_ITSlaveCplt>
 8011ba8:	e0cf      	b.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	2210      	movs	r2, #16
 8011bae:	4013      	ands	r3, r2
 8011bb0:	d052      	beq.n	8011c58 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2210      	movs	r2, #16
 8011bb6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011bb8:	d04e      	beq.n	8011c58 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d12d      	bne.n	8011c20 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2241      	movs	r2, #65	@ 0x41
 8011bc8:	5c9b      	ldrb	r3, [r3, r2]
 8011bca:	b2db      	uxtb	r3, r3
 8011bcc:	2b28      	cmp	r3, #40	@ 0x28
 8011bce:	d10b      	bne.n	8011be8 <I2C_Slave_ISR_IT+0x88>
 8011bd0:	697a      	ldr	r2, [r7, #20]
 8011bd2:	2380      	movs	r3, #128	@ 0x80
 8011bd4:	049b      	lsls	r3, r3, #18
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d106      	bne.n	8011be8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	0011      	movs	r1, r2
 8011be0:	0018      	movs	r0, r3
 8011be2:	f000 ff6d 	bl	8012ac0 <I2C_ITListenCplt>
 8011be6:	e036      	b.n	8011c56 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2241      	movs	r2, #65	@ 0x41
 8011bec:	5c9b      	ldrb	r3, [r3, r2]
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	2b29      	cmp	r3, #41	@ 0x29
 8011bf2:	d110      	bne.n	8011c16 <I2C_Slave_ISR_IT+0xb6>
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	4a59      	ldr	r2, [pc, #356]	@ (8011d5c <I2C_Slave_ISR_IT+0x1fc>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d00c      	beq.n	8011c16 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2210      	movs	r2, #16
 8011c02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	0018      	movs	r0, r3
 8011c08:	f001 f8dd 	bl	8012dc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	0018      	movs	r0, r3
 8011c10:	f000 fc9c 	bl	801254c <I2C_ITSlaveSeqCplt>
 8011c14:	e01f      	b.n	8011c56 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2210      	movs	r2, #16
 8011c1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011c1e:	e091      	b.n	8011d44 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	2210      	movs	r2, #16
 8011c26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c2c:	2204      	movs	r2, #4
 8011c2e:	431a      	orrs	r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d005      	beq.n	8011c46 <I2C_Slave_ISR_IT+0xe6>
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	2380      	movs	r3, #128	@ 0x80
 8011c3e:	045b      	lsls	r3, r3, #17
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d000      	beq.n	8011c46 <I2C_Slave_ISR_IT+0xe6>
 8011c44:	e07e      	b.n	8011d44 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	0011      	movs	r1, r2
 8011c4e:	0018      	movs	r0, r3
 8011c50:	f000 ff8e 	bl	8012b70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011c54:	e076      	b.n	8011d44 <I2C_Slave_ISR_IT+0x1e4>
 8011c56:	e075      	b.n	8011d44 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	2204      	movs	r2, #4
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	d02f      	beq.n	8011cc0 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2204      	movs	r2, #4
 8011c64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011c66:	d02b      	beq.n	8011cc0 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d018      	beq.n	8011ca4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c7c:	b2d2      	uxtb	r2, r2
 8011c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c84:	1c5a      	adds	r2, r3, #1
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d14c      	bne.n	8011d48 <I2C_Slave_ISR_IT+0x1e8>
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8011d5c <I2C_Slave_ISR_IT+0x1fc>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d048      	beq.n	8011d48 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	0018      	movs	r0, r3
 8011cba:	f000 fc47 	bl	801254c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011cbe:	e043      	b.n	8011d48 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	2208      	movs	r2, #8
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	d00a      	beq.n	8011cde <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2208      	movs	r2, #8
 8011ccc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011cce:	d006      	beq.n	8011cde <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011cd0:	693a      	ldr	r2, [r7, #16]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	0011      	movs	r1, r2
 8011cd6:	0018      	movs	r0, r3
 8011cd8:	f000 fb52 	bl	8012380 <I2C_ITAddrCplt>
 8011cdc:	e035      	b.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	2202      	movs	r2, #2
 8011ce2:	4013      	ands	r3, r2
 8011ce4:	d031      	beq.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2202      	movs	r2, #2
 8011cea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011cec:	d02d      	beq.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d018      	beq.n	8011d2a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cfc:	781a      	ldrb	r2, [r3, #0]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d08:	1c5a      	adds	r2, r3, #1
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	3b01      	subs	r3, #1
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d20:	3b01      	subs	r3, #1
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011d28:	e00f      	b.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011d2a:	697a      	ldr	r2, [r7, #20]
 8011d2c:	2380      	movs	r3, #128	@ 0x80
 8011d2e:	045b      	lsls	r3, r3, #17
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d002      	beq.n	8011d3a <I2C_Slave_ISR_IT+0x1da>
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d107      	bne.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	0018      	movs	r0, r3
 8011d3e:	f000 fc05 	bl	801254c <I2C_ITSlaveSeqCplt>
 8011d42:	e002      	b.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8011d44:	46c0      	nop			@ (mov r8, r8)
 8011d46:	e000      	b.n	8011d4a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8011d48:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2240      	movs	r2, #64	@ 0x40
 8011d4e:	2100      	movs	r1, #0
 8011d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011d52:	2300      	movs	r3, #0
}
 8011d54:	0018      	movs	r0, r3
 8011d56:	46bd      	mov	sp, r7
 8011d58:	b006      	add	sp, #24
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	ffff0000 	.word	0xffff0000

08011d60 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011d60:	b590      	push	{r4, r7, lr}
 8011d62:	b089      	sub	sp, #36	@ 0x24
 8011d64:	af02      	add	r7, sp, #8
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2240      	movs	r2, #64	@ 0x40
 8011d70:	5c9b      	ldrb	r3, [r3, r2]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d101      	bne.n	8011d7a <I2C_Master_ISR_DMA+0x1a>
 8011d76:	2302      	movs	r3, #2
 8011d78:	e0e7      	b.n	8011f4a <I2C_Master_ISR_DMA+0x1ea>
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2240      	movs	r2, #64	@ 0x40
 8011d7e:	2101      	movs	r1, #1
 8011d80:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2210      	movs	r2, #16
 8011d86:	4013      	ands	r3, r2
 8011d88:	d017      	beq.n	8011dba <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2210      	movs	r2, #16
 8011d8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011d90:	d013      	beq.n	8011dba <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2210      	movs	r2, #16
 8011d98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d9e:	2204      	movs	r2, #4
 8011da0:	431a      	orrs	r2, r3
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2120      	movs	r1, #32
 8011daa:	0018      	movs	r0, r3
 8011dac:	f001 f940 	bl	8013030 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	0018      	movs	r0, r3
 8011db4:	f001 f807 	bl	8012dc6 <I2C_Flush_TXDR>
 8011db8:	e0c2      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2280      	movs	r2, #128	@ 0x80
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	d100      	bne.n	8011dc4 <I2C_Master_ISR_DMA+0x64>
 8011dc2:	e07c      	b.n	8011ebe <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2240      	movs	r2, #64	@ 0x40
 8011dc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011dca:	d100      	bne.n	8011dce <I2C_Master_ISR_DMA+0x6e>
 8011dcc:	e077      	b.n	8011ebe <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2140      	movs	r1, #64	@ 0x40
 8011dda:	438a      	bics	r2, r1
 8011ddc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d055      	beq.n	8011e94 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	2312      	movs	r3, #18
 8011df2:	18fb      	adds	r3, r7, r3
 8011df4:	0592      	lsls	r2, r2, #22
 8011df6:	0d92      	lsrs	r2, r2, #22
 8011df8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	2bff      	cmp	r3, #255	@ 0xff
 8011e02:	d906      	bls.n	8011e12 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	22ff      	movs	r2, #255	@ 0xff
 8011e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011e0a:	2380      	movs	r3, #128	@ 0x80
 8011e0c:	045b      	lsls	r3, r3, #17
 8011e0e:	617b      	str	r3, [r7, #20]
 8011e10:	e010      	b.n	8011e34 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e20:	4a4c      	ldr	r2, [pc, #304]	@ (8011f54 <I2C_Master_ISR_DMA+0x1f4>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d003      	beq.n	8011e2e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	e002      	b.n	8011e34 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011e2e:	2380      	movs	r3, #128	@ 0x80
 8011e30:	049b      	lsls	r3, r3, #18
 8011e32:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	697c      	ldr	r4, [r7, #20]
 8011e3c:	2312      	movs	r3, #18
 8011e3e:	18fb      	adds	r3, r7, r3
 8011e40:	8819      	ldrh	r1, [r3, #0]
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	2300      	movs	r3, #0
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	0023      	movs	r3, r4
 8011e4a:	f001 f8b7 	bl	8012fbc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2241      	movs	r2, #65	@ 0x41
 8011e64:	5c9b      	ldrb	r3, [r3, r2]
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b22      	cmp	r3, #34	@ 0x22
 8011e6a:	d109      	bne.n	8011e80 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2180      	movs	r1, #128	@ 0x80
 8011e78:	0209      	lsls	r1, r1, #8
 8011e7a:	430a      	orrs	r2, r1
 8011e7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011e7e:	e05f      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2180      	movs	r1, #128	@ 0x80
 8011e8c:	01c9      	lsls	r1, r1, #7
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011e92:	e055      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	685a      	ldr	r2, [r3, #4]
 8011e9a:	2380      	movs	r3, #128	@ 0x80
 8011e9c:	049b      	lsls	r3, r3, #18
 8011e9e:	401a      	ands	r2, r3
 8011ea0:	2380      	movs	r3, #128	@ 0x80
 8011ea2:	049b      	lsls	r3, r3, #18
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d004      	beq.n	8011eb2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	0018      	movs	r0, r3
 8011eac:	f000 fb0c 	bl	80124c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011eb0:	e046      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2140      	movs	r1, #64	@ 0x40
 8011eb6:	0018      	movs	r0, r3
 8011eb8:	f000 fe5a 	bl	8012b70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011ebc:	e040      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2240      	movs	r2, #64	@ 0x40
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	d02c      	beq.n	8011f20 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2240      	movs	r2, #64	@ 0x40
 8011eca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011ecc:	d028      	beq.n	8011f20 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d11d      	bne.n	8011f14 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	685a      	ldr	r2, [r3, #4]
 8011ede:	2380      	movs	r3, #128	@ 0x80
 8011ee0:	049b      	lsls	r3, r3, #18
 8011ee2:	401a      	ands	r2, r3
 8011ee4:	2380      	movs	r3, #128	@ 0x80
 8011ee6:	049b      	lsls	r3, r3, #18
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d028      	beq.n	8011f3e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ef0:	4a18      	ldr	r2, [pc, #96]	@ (8011f54 <I2C_Master_ISR_DMA+0x1f4>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d109      	bne.n	8011f0a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	685a      	ldr	r2, [r3, #4]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2180      	movs	r1, #128	@ 0x80
 8011f02:	01c9      	lsls	r1, r1, #7
 8011f04:	430a      	orrs	r2, r1
 8011f06:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011f08:	e019      	b.n	8011f3e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	0018      	movs	r0, r3
 8011f0e:	f000 fadb 	bl	80124c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011f12:	e014      	b.n	8011f3e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2140      	movs	r1, #64	@ 0x40
 8011f18:	0018      	movs	r0, r3
 8011f1a:	f000 fe29 	bl	8012b70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011f1e:	e00e      	b.n	8011f3e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	2220      	movs	r2, #32
 8011f24:	4013      	ands	r3, r2
 8011f26:	d00b      	beq.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2220      	movs	r2, #32
 8011f2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011f2e:	d007      	beq.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	0011      	movs	r1, r2
 8011f36:	0018      	movs	r0, r3
 8011f38:	f000 fb6c 	bl	8012614 <I2C_ITMasterCplt>
 8011f3c:	e000      	b.n	8011f40 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011f3e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2240      	movs	r2, #64	@ 0x40
 8011f44:	2100      	movs	r1, #0
 8011f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	0018      	movs	r0, r3
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	b007      	add	sp, #28
 8011f50:	bd90      	pop	{r4, r7, pc}
 8011f52:	46c0      	nop			@ (mov r8, r8)
 8011f54:	ffff0000 	.word	0xffff0000

08011f58 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011f58:	b590      	push	{r4, r7, lr}
 8011f5a:	b089      	sub	sp, #36	@ 0x24
 8011f5c:	af02      	add	r7, sp, #8
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011f64:	4b90      	ldr	r3, [pc, #576]	@ (80121a8 <I2C_Mem_ISR_DMA+0x250>)
 8011f66:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2240      	movs	r2, #64	@ 0x40
 8011f6c:	5c9b      	ldrb	r3, [r3, r2]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d101      	bne.n	8011f76 <I2C_Mem_ISR_DMA+0x1e>
 8011f72:	2302      	movs	r3, #2
 8011f74:	e113      	b.n	801219e <I2C_Mem_ISR_DMA+0x246>
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2240      	movs	r2, #64	@ 0x40
 8011f7a:	2101      	movs	r1, #1
 8011f7c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2210      	movs	r2, #16
 8011f82:	4013      	ands	r3, r2
 8011f84:	d017      	beq.n	8011fb6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2210      	movs	r2, #16
 8011f8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011f8c:	d013      	beq.n	8011fb6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2210      	movs	r2, #16
 8011f94:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f9a:	2204      	movs	r2, #4
 8011f9c:	431a      	orrs	r2, r3
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2120      	movs	r1, #32
 8011fa6:	0018      	movs	r0, r3
 8011fa8:	f001 f842 	bl	8013030 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	0018      	movs	r0, r3
 8011fb0:	f000 ff09 	bl	8012dc6 <I2C_Flush_TXDR>
 8011fb4:	e0ee      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2202      	movs	r2, #2
 8011fba:	4013      	ands	r3, r2
 8011fbc:	d00d      	beq.n	8011fda <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2202      	movs	r2, #2
 8011fc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011fc4:	d009      	beq.n	8011fda <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	68fa      	ldr	r2, [r7, #12]
 8011fcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011fce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4252      	negs	r2, r2
 8011fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8011fd8:	e0dc      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	2280      	movs	r2, #128	@ 0x80
 8011fde:	4013      	ands	r3, r2
 8011fe0:	d063      	beq.n	80120aa <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2240      	movs	r2, #64	@ 0x40
 8011fe6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011fe8:	d05f      	beq.n	80120aa <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2101      	movs	r1, #1
 8011fee:	0018      	movs	r0, r3
 8011ff0:	f001 f8a8 	bl	8013144 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2110      	movs	r1, #16
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	f001 f819 	bl	8013030 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012002:	b29b      	uxth	r3, r3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d04a      	beq.n	801209e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801200c:	b29b      	uxth	r3, r3
 801200e:	2bff      	cmp	r3, #255	@ 0xff
 8012010:	d910      	bls.n	8012034 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	22ff      	movs	r2, #255	@ 0xff
 8012016:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801201c:	b299      	uxth	r1, r3
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012022:	b2da      	uxtb	r2, r3
 8012024:	2380      	movs	r3, #128	@ 0x80
 8012026:	045b      	lsls	r3, r3, #17
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	2400      	movs	r4, #0
 801202c:	9400      	str	r4, [sp, #0]
 801202e:	f000 ffc5 	bl	8012fbc <I2C_TransferConfig>
 8012032:	e011      	b.n	8012058 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012038:	b29a      	uxth	r2, r3
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012042:	b299      	uxth	r1, r3
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012048:	b2da      	uxtb	r2, r3
 801204a:	2380      	movs	r3, #128	@ 0x80
 801204c:	049b      	lsls	r3, r3, #18
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	2400      	movs	r4, #0
 8012052:	9400      	str	r4, [sp, #0]
 8012054:	f000 ffb2 	bl	8012fbc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801205c:	b29a      	uxth	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	b29a      	uxth	r2, r3
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2241      	movs	r2, #65	@ 0x41
 801206e:	5c9b      	ldrb	r3, [r3, r2]
 8012070:	b2db      	uxtb	r3, r3
 8012072:	2b22      	cmp	r3, #34	@ 0x22
 8012074:	d109      	bne.n	801208a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2180      	movs	r1, #128	@ 0x80
 8012082:	0209      	lsls	r1, r1, #8
 8012084:	430a      	orrs	r2, r1
 8012086:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8012088:	e084      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2180      	movs	r1, #128	@ 0x80
 8012096:	01c9      	lsls	r1, r1, #7
 8012098:	430a      	orrs	r2, r1
 801209a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801209c:	e07a      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2140      	movs	r1, #64	@ 0x40
 80120a2:	0018      	movs	r0, r3
 80120a4:	f000 fd64 	bl	8012b70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80120a8:	e074      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2240      	movs	r2, #64	@ 0x40
 80120ae:	4013      	ands	r3, r2
 80120b0:	d062      	beq.n	8012178 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2240      	movs	r2, #64	@ 0x40
 80120b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80120b8:	d05e      	beq.n	8012178 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2101      	movs	r1, #1
 80120be:	0018      	movs	r0, r3
 80120c0:	f001 f840 	bl	8013144 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2110      	movs	r1, #16
 80120c8:	0018      	movs	r0, r3
 80120ca:	f000 ffb1 	bl	8013030 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2241      	movs	r2, #65	@ 0x41
 80120d2:	5c9b      	ldrb	r3, [r3, r2]
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b22      	cmp	r3, #34	@ 0x22
 80120d8:	d101      	bne.n	80120de <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80120da:	4b34      	ldr	r3, [pc, #208]	@ (80121ac <I2C_Mem_ISR_DMA+0x254>)
 80120dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	2bff      	cmp	r3, #255	@ 0xff
 80120e6:	d911      	bls.n	801210c <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	22ff      	movs	r2, #255	@ 0xff
 80120ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120f2:	b299      	uxth	r1, r3
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	2380      	movs	r3, #128	@ 0x80
 80120fc:	045c      	lsls	r4, r3, #17
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	0023      	movs	r3, r4
 8012106:	f000 ff59 	bl	8012fbc <I2C_TransferConfig>
 801210a:	e012      	b.n	8012132 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012110:	b29a      	uxth	r2, r3
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801211a:	b299      	uxth	r1, r3
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012120:	b2da      	uxtb	r2, r3
 8012122:	2380      	movs	r3, #128	@ 0x80
 8012124:	049c      	lsls	r4, r3, #18
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	0023      	movs	r3, r4
 801212e:	f000 ff45 	bl	8012fbc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012136:	b29a      	uxth	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	b29a      	uxth	r2, r3
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2241      	movs	r2, #65	@ 0x41
 8012148:	5c9b      	ldrb	r3, [r3, r2]
 801214a:	b2db      	uxtb	r3, r3
 801214c:	2b22      	cmp	r3, #34	@ 0x22
 801214e:	d109      	bne.n	8012164 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2180      	movs	r1, #128	@ 0x80
 801215c:	0209      	lsls	r1, r1, #8
 801215e:	430a      	orrs	r2, r1
 8012160:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012162:	e017      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2180      	movs	r1, #128	@ 0x80
 8012170:	01c9      	lsls	r1, r1, #7
 8012172:	430a      	orrs	r2, r1
 8012174:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012176:	e00d      	b.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2220      	movs	r2, #32
 801217c:	4013      	ands	r3, r2
 801217e:	d009      	beq.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2220      	movs	r2, #32
 8012184:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012186:	d005      	beq.n	8012194 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	0011      	movs	r1, r2
 801218e:	0018      	movs	r0, r3
 8012190:	f000 fa40 	bl	8012614 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2240      	movs	r2, #64	@ 0x40
 8012198:	2100      	movs	r1, #0
 801219a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	0018      	movs	r0, r3
 80121a0:	46bd      	mov	sp, r7
 80121a2:	b007      	add	sp, #28
 80121a4:	bd90      	pop	{r4, r7, pc}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	80002000 	.word	0x80002000
 80121ac:	80002400 	.word	0x80002400

080121b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80121c2:	2300      	movs	r3, #0
 80121c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2240      	movs	r2, #64	@ 0x40
 80121ca:	5c9b      	ldrb	r3, [r3, r2]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d101      	bne.n	80121d4 <I2C_Slave_ISR_DMA+0x24>
 80121d0:	2302      	movs	r3, #2
 80121d2:	e0ce      	b.n	8012372 <I2C_Slave_ISR_DMA+0x1c2>
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2240      	movs	r2, #64	@ 0x40
 80121d8:	2101      	movs	r1, #1
 80121da:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2220      	movs	r2, #32
 80121e0:	4013      	ands	r3, r2
 80121e2:	d00a      	beq.n	80121fa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2220      	movs	r2, #32
 80121e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80121ea:	d006      	beq.n	80121fa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	0011      	movs	r1, r2
 80121f2:	0018      	movs	r0, r3
 80121f4:	f000 fadc 	bl	80127b0 <I2C_ITSlaveCplt>
 80121f8:	e0b6      	b.n	8012368 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2210      	movs	r2, #16
 80121fe:	4013      	ands	r3, r2
 8012200:	d100      	bne.n	8012204 <I2C_Slave_ISR_DMA+0x54>
 8012202:	e0a3      	b.n	801234c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2210      	movs	r2, #16
 8012208:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801220a:	d100      	bne.n	801220e <I2C_Slave_ISR_DMA+0x5e>
 801220c:	e09e      	b.n	801234c <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	2380      	movs	r3, #128	@ 0x80
 8012212:	01db      	lsls	r3, r3, #7
 8012214:	4013      	ands	r3, r2
 8012216:	d105      	bne.n	8012224 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	2380      	movs	r3, #128	@ 0x80
 801221c:	021b      	lsls	r3, r3, #8
 801221e:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012220:	d100      	bne.n	8012224 <I2C_Slave_ISR_DMA+0x74>
 8012222:	e08c      	b.n	801233e <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00c      	beq.n	8012246 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	2380      	movs	r3, #128	@ 0x80
 8012230:	021b      	lsls	r3, r3, #8
 8012232:	4013      	ands	r3, r2
 8012234:	d007      	beq.n	8012246 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d101      	bne.n	8012246 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8012242:	2301      	movs	r3, #1
 8012244:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00c      	beq.n	8012268 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	2380      	movs	r3, #128	@ 0x80
 8012252:	01db      	lsls	r3, r3, #7
 8012254:	4013      	ands	r3, r2
 8012256:	d007      	beq.n	8012268 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d101      	bne.n	8012268 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8012264:	2301      	movs	r3, #1
 8012266:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d12d      	bne.n	80122ca <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2241      	movs	r2, #65	@ 0x41
 8012272:	5c9b      	ldrb	r3, [r3, r2]
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b28      	cmp	r3, #40	@ 0x28
 8012278:	d10b      	bne.n	8012292 <I2C_Slave_ISR_DMA+0xe2>
 801227a:	69ba      	ldr	r2, [r7, #24]
 801227c:	2380      	movs	r3, #128	@ 0x80
 801227e:	049b      	lsls	r3, r3, #18
 8012280:	429a      	cmp	r2, r3
 8012282:	d106      	bne.n	8012292 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	0011      	movs	r1, r2
 801228a:	0018      	movs	r0, r3
 801228c:	f000 fc18 	bl	8012ac0 <I2C_ITListenCplt>
 8012290:	e054      	b.n	801233c <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2241      	movs	r2, #65	@ 0x41
 8012296:	5c9b      	ldrb	r3, [r3, r2]
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b29      	cmp	r3, #41	@ 0x29
 801229c:	d110      	bne.n	80122c0 <I2C_Slave_ISR_DMA+0x110>
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	4a36      	ldr	r2, [pc, #216]	@ (801237c <I2C_Slave_ISR_DMA+0x1cc>)
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d00c      	beq.n	80122c0 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2210      	movs	r2, #16
 80122ac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	0018      	movs	r0, r3
 80122b2:	f000 fd88 	bl	8012dc6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	0018      	movs	r0, r3
 80122ba:	f000 f947 	bl	801254c <I2C_ITSlaveSeqCplt>
 80122be:	e03d      	b.n	801233c <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2210      	movs	r2, #16
 80122c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80122c8:	e03e      	b.n	8012348 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2210      	movs	r2, #16
 80122d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122d6:	2204      	movs	r2, #4
 80122d8:	431a      	orrs	r2, r3
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80122de:	2317      	movs	r3, #23
 80122e0:	18fb      	adds	r3, r7, r3
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	2141      	movs	r1, #65	@ 0x41
 80122e6:	5c52      	ldrb	r2, [r2, r1]
 80122e8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d004      	beq.n	80122fa <I2C_Slave_ISR_DMA+0x14a>
 80122f0:	69ba      	ldr	r2, [r7, #24]
 80122f2:	2380      	movs	r3, #128	@ 0x80
 80122f4:	045b      	lsls	r3, r3, #17
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d126      	bne.n	8012348 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80122fa:	2217      	movs	r2, #23
 80122fc:	18bb      	adds	r3, r7, r2
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b21      	cmp	r3, #33	@ 0x21
 8012302:	d003      	beq.n	801230c <I2C_Slave_ISR_DMA+0x15c>
 8012304:	18bb      	adds	r3, r7, r2
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	2b29      	cmp	r3, #41	@ 0x29
 801230a:	d103      	bne.n	8012314 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2221      	movs	r2, #33	@ 0x21
 8012310:	631a      	str	r2, [r3, #48]	@ 0x30
 8012312:	e00b      	b.n	801232c <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012314:	2217      	movs	r2, #23
 8012316:	18bb      	adds	r3, r7, r2
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	2b22      	cmp	r3, #34	@ 0x22
 801231c:	d003      	beq.n	8012326 <I2C_Slave_ISR_DMA+0x176>
 801231e:	18bb      	adds	r3, r7, r2
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b2a      	cmp	r3, #42	@ 0x2a
 8012324:	d102      	bne.n	801232c <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2222      	movs	r2, #34	@ 0x22
 801232a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	0011      	movs	r1, r2
 8012334:	0018      	movs	r0, r3
 8012336:	f000 fc1b 	bl	8012b70 <I2C_ITError>
      if (treatdmanack == 1U)
 801233a:	e005      	b.n	8012348 <I2C_Slave_ISR_DMA+0x198>
 801233c:	e004      	b.n	8012348 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2210      	movs	r2, #16
 8012344:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012346:	e00f      	b.n	8012368 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8012348:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801234a:	e00d      	b.n	8012368 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	2208      	movs	r2, #8
 8012350:	4013      	ands	r3, r2
 8012352:	d009      	beq.n	8012368 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2208      	movs	r2, #8
 8012358:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801235a:	d005      	beq.n	8012368 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	0011      	movs	r1, r2
 8012362:	0018      	movs	r0, r3
 8012364:	f000 f80c 	bl	8012380 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2240      	movs	r2, #64	@ 0x40
 801236c:	2100      	movs	r1, #0
 801236e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012370:	2300      	movs	r3, #0
}
 8012372:	0018      	movs	r0, r3
 8012374:	46bd      	mov	sp, r7
 8012376:	b008      	add	sp, #32
 8012378:	bd80      	pop	{r7, pc}
 801237a:	46c0      	nop			@ (mov r8, r8)
 801237c:	ffff0000 	.word	0xffff0000

08012380 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012380:	b5b0      	push	{r4, r5, r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2241      	movs	r2, #65	@ 0x41
 801238e:	5c9b      	ldrb	r3, [r3, r2]
 8012390:	b2db      	uxtb	r3, r3
 8012392:	001a      	movs	r2, r3
 8012394:	2328      	movs	r3, #40	@ 0x28
 8012396:	4013      	ands	r3, r2
 8012398:	2b28      	cmp	r3, #40	@ 0x28
 801239a:	d000      	beq.n	801239e <I2C_ITAddrCplt+0x1e>
 801239c:	e088      	b.n	80124b0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	699b      	ldr	r3, [r3, #24]
 80123a4:	0c1b      	lsrs	r3, r3, #16
 80123a6:	b2da      	uxtb	r2, r3
 80123a8:	250f      	movs	r5, #15
 80123aa:	197b      	adds	r3, r7, r5
 80123ac:	2101      	movs	r1, #1
 80123ae:	400a      	ands	r2, r1
 80123b0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	699b      	ldr	r3, [r3, #24]
 80123b8:	0c1b      	lsrs	r3, r3, #16
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	200c      	movs	r0, #12
 80123be:	183b      	adds	r3, r7, r0
 80123c0:	21fe      	movs	r1, #254	@ 0xfe
 80123c2:	400a      	ands	r2, r1
 80123c4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	240a      	movs	r4, #10
 80123d0:	193b      	adds	r3, r7, r4
 80123d2:	0592      	lsls	r2, r2, #22
 80123d4:	0d92      	lsrs	r2, r2, #22
 80123d6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	b29a      	uxth	r2, r3
 80123e0:	2308      	movs	r3, #8
 80123e2:	18fb      	adds	r3, r7, r3
 80123e4:	21fe      	movs	r1, #254	@ 0xfe
 80123e6:	400a      	ands	r2, r1
 80123e8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d148      	bne.n	8012484 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80123f2:	0021      	movs	r1, r4
 80123f4:	187b      	adds	r3, r7, r1
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	09db      	lsrs	r3, r3, #7
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	183b      	adds	r3, r7, r0
 80123fe:	881b      	ldrh	r3, [r3, #0]
 8012400:	4053      	eors	r3, r2
 8012402:	b29b      	uxth	r3, r3
 8012404:	001a      	movs	r2, r3
 8012406:	2306      	movs	r3, #6
 8012408:	4013      	ands	r3, r2
 801240a:	d120      	bne.n	801244e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 801240c:	183b      	adds	r3, r7, r0
 801240e:	187a      	adds	r2, r7, r1
 8012410:	8812      	ldrh	r2, [r2, #0]
 8012412:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012418:	1c5a      	adds	r2, r3, #1
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012422:	2b02      	cmp	r3, #2
 8012424:	d14c      	bne.n	80124c0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2208      	movs	r2, #8
 8012432:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2240      	movs	r2, #64	@ 0x40
 8012438:	2100      	movs	r1, #0
 801243a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801243c:	183b      	adds	r3, r7, r0
 801243e:	881a      	ldrh	r2, [r3, #0]
 8012440:	197b      	adds	r3, r7, r5
 8012442:	7819      	ldrb	r1, [r3, #0]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	0018      	movs	r0, r3
 8012448:	f7ff fa1b 	bl	8011882 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801244c:	e038      	b.n	80124c0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801244e:	240c      	movs	r4, #12
 8012450:	193b      	adds	r3, r7, r4
 8012452:	2208      	movs	r2, #8
 8012454:	18ba      	adds	r2, r7, r2
 8012456:	8812      	ldrh	r2, [r2, #0]
 8012458:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801245a:	2380      	movs	r3, #128	@ 0x80
 801245c:	021a      	lsls	r2, r3, #8
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	0011      	movs	r1, r2
 8012462:	0018      	movs	r0, r3
 8012464:	f000 fe6e 	bl	8013144 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2240      	movs	r2, #64	@ 0x40
 801246c:	2100      	movs	r1, #0
 801246e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012470:	193b      	adds	r3, r7, r4
 8012472:	881a      	ldrh	r2, [r3, #0]
 8012474:	230f      	movs	r3, #15
 8012476:	18fb      	adds	r3, r7, r3
 8012478:	7819      	ldrb	r1, [r3, #0]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	0018      	movs	r0, r3
 801247e:	f7ff fa00 	bl	8011882 <HAL_I2C_AddrCallback>
}
 8012482:	e01d      	b.n	80124c0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8012484:	2380      	movs	r3, #128	@ 0x80
 8012486:	021a      	lsls	r2, r3, #8
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	0011      	movs	r1, r2
 801248c:	0018      	movs	r0, r3
 801248e:	f000 fe59 	bl	8013144 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2240      	movs	r2, #64	@ 0x40
 8012496:	2100      	movs	r1, #0
 8012498:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801249a:	230c      	movs	r3, #12
 801249c:	18fb      	adds	r3, r7, r3
 801249e:	881a      	ldrh	r2, [r3, #0]
 80124a0:	230f      	movs	r3, #15
 80124a2:	18fb      	adds	r3, r7, r3
 80124a4:	7819      	ldrb	r1, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	0018      	movs	r0, r3
 80124aa:	f7ff f9ea 	bl	8011882 <HAL_I2C_AddrCallback>
}
 80124ae:	e007      	b.n	80124c0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2208      	movs	r2, #8
 80124b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2240      	movs	r2, #64	@ 0x40
 80124bc:	2100      	movs	r1, #0
 80124be:	5499      	strb	r1, [r3, r2]
}
 80124c0:	46c0      	nop			@ (mov r8, r8)
 80124c2:	46bd      	mov	sp, r7
 80124c4:	b004      	add	sp, #16
 80124c6:	bdb0      	pop	{r4, r5, r7, pc}

080124c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2242      	movs	r2, #66	@ 0x42
 80124d4:	2100      	movs	r1, #0
 80124d6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2241      	movs	r2, #65	@ 0x41
 80124dc:	5c9b      	ldrb	r3, [r3, r2]
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	2b21      	cmp	r3, #33	@ 0x21
 80124e2:	d117      	bne.n	8012514 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2241      	movs	r2, #65	@ 0x41
 80124e8:	2120      	movs	r1, #32
 80124ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2211      	movs	r2, #17
 80124f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2101      	movs	r1, #1
 80124fc:	0018      	movs	r0, r3
 80124fe:	f000 fe21 	bl	8013144 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2240      	movs	r2, #64	@ 0x40
 8012506:	2100      	movs	r1, #0
 8012508:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	0018      	movs	r0, r3
 801250e:	f7ff f998 	bl	8011842 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012512:	e016      	b.n	8012542 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2241      	movs	r2, #65	@ 0x41
 8012518:	2120      	movs	r1, #32
 801251a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2212      	movs	r2, #18
 8012520:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2102      	movs	r1, #2
 801252c:	0018      	movs	r0, r3
 801252e:	f000 fe09 	bl	8013144 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2240      	movs	r2, #64	@ 0x40
 8012536:	2100      	movs	r1, #0
 8012538:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	0018      	movs	r0, r3
 801253e:	f7ff f988 	bl	8011852 <HAL_I2C_MasterRxCpltCallback>
}
 8012542:	46c0      	nop			@ (mov r8, r8)
 8012544:	46bd      	mov	sp, r7
 8012546:	b002      	add	sp, #8
 8012548:	bd80      	pop	{r7, pc}
	...

0801254c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2242      	movs	r2, #66	@ 0x42
 8012560:	2100      	movs	r1, #0
 8012562:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	2380      	movs	r3, #128	@ 0x80
 8012568:	01db      	lsls	r3, r3, #7
 801256a:	4013      	ands	r3, r2
 801256c:	d008      	beq.n	8012580 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4924      	ldr	r1, [pc, #144]	@ (801260c <I2C_ITSlaveSeqCplt+0xc0>)
 801257a:	400a      	ands	r2, r1
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	e00c      	b.n	801259a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	2380      	movs	r3, #128	@ 0x80
 8012584:	021b      	lsls	r3, r3, #8
 8012586:	4013      	ands	r3, r2
 8012588:	d007      	beq.n	801259a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	491e      	ldr	r1, [pc, #120]	@ (8012610 <I2C_ITSlaveSeqCplt+0xc4>)
 8012596:	400a      	ands	r2, r1
 8012598:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2241      	movs	r2, #65	@ 0x41
 801259e:	5c9b      	ldrb	r3, [r3, r2]
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	2b29      	cmp	r3, #41	@ 0x29
 80125a4:	d114      	bne.n	80125d0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2241      	movs	r2, #65	@ 0x41
 80125aa:	2128      	movs	r1, #40	@ 0x28
 80125ac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2221      	movs	r2, #33	@ 0x21
 80125b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2101      	movs	r1, #1
 80125b8:	0018      	movs	r0, r3
 80125ba:	f000 fdc3 	bl	8013144 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2240      	movs	r2, #64	@ 0x40
 80125c2:	2100      	movs	r1, #0
 80125c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	0018      	movs	r0, r3
 80125ca:	f7ff f94a 	bl	8011862 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80125ce:	e019      	b.n	8012604 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2241      	movs	r2, #65	@ 0x41
 80125d4:	5c9b      	ldrb	r3, [r3, r2]
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125da:	d113      	bne.n	8012604 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2241      	movs	r2, #65	@ 0x41
 80125e0:	2128      	movs	r1, #40	@ 0x28
 80125e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2222      	movs	r2, #34	@ 0x22
 80125e8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2102      	movs	r1, #2
 80125ee:	0018      	movs	r0, r3
 80125f0:	f000 fda8 	bl	8013144 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2240      	movs	r2, #64	@ 0x40
 80125f8:	2100      	movs	r1, #0
 80125fa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	0018      	movs	r0, r3
 8012600:	f7ff f937 	bl	8011872 <HAL_I2C_SlaveRxCpltCallback>
}
 8012604:	46c0      	nop			@ (mov r8, r8)
 8012606:	46bd      	mov	sp, r7
 8012608:	b004      	add	sp, #16
 801260a:	bd80      	pop	{r7, pc}
 801260c:	ffffbfff 	.word	0xffffbfff
 8012610:	ffff7fff 	.word	0xffff7fff

08012614 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2220      	movs	r2, #32
 8012628:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2241      	movs	r2, #65	@ 0x41
 801262e:	5c9b      	ldrb	r3, [r3, r2]
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b21      	cmp	r3, #33	@ 0x21
 8012634:	d108      	bne.n	8012648 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2101      	movs	r1, #1
 801263a:	0018      	movs	r0, r3
 801263c:	f000 fd82 	bl	8013144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2211      	movs	r2, #17
 8012644:	631a      	str	r2, [r3, #48]	@ 0x30
 8012646:	e00d      	b.n	8012664 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2241      	movs	r2, #65	@ 0x41
 801264c:	5c9b      	ldrb	r3, [r3, r2]
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b22      	cmp	r3, #34	@ 0x22
 8012652:	d107      	bne.n	8012664 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2102      	movs	r1, #2
 8012658:	0018      	movs	r0, r3
 801265a:	f000 fd73 	bl	8013144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2212      	movs	r2, #18
 8012662:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	685a      	ldr	r2, [r3, #4]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	494e      	ldr	r1, [pc, #312]	@ (80127a8 <I2C_ITMasterCplt+0x194>)
 8012670:	400a      	ands	r2, r1
 8012672:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4a4b      	ldr	r2, [pc, #300]	@ (80127ac <I2C_ITMasterCplt+0x198>)
 801267e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	2210      	movs	r2, #16
 8012684:	4013      	ands	r3, r2
 8012686:	d009      	beq.n	801269c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2210      	movs	r2, #16
 801268e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012694:	2204      	movs	r2, #4
 8012696:	431a      	orrs	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2241      	movs	r2, #65	@ 0x41
 80126a0:	5c9b      	ldrb	r3, [r3, r2]
 80126a2:	b2db      	uxtb	r3, r3
 80126a4:	2b60      	cmp	r3, #96	@ 0x60
 80126a6:	d109      	bne.n	80126bc <I2C_ITMasterCplt+0xa8>
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	2204      	movs	r2, #4
 80126ac:	4013      	ands	r3, r2
 80126ae:	d005      	beq.n	80126bc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80126ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	0018      	movs	r0, r3
 80126c0:	f000 fb81 	bl	8012dc6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126c8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2241      	movs	r2, #65	@ 0x41
 80126ce:	5c9b      	ldrb	r3, [r3, r2]
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b60      	cmp	r3, #96	@ 0x60
 80126d4:	d002      	beq.n	80126dc <I2C_ITMasterCplt+0xc8>
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d007      	beq.n	80126ec <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	0011      	movs	r1, r2
 80126e4:	0018      	movs	r0, r3
 80126e6:	f000 fa43 	bl	8012b70 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80126ea:	e058      	b.n	801279e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2241      	movs	r2, #65	@ 0x41
 80126f0:	5c9b      	ldrb	r3, [r3, r2]
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	2b21      	cmp	r3, #33	@ 0x21
 80126f6:	d126      	bne.n	8012746 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2241      	movs	r2, #65	@ 0x41
 80126fc:	2120      	movs	r1, #32
 80126fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2242      	movs	r2, #66	@ 0x42
 801270a:	5c9b      	ldrb	r3, [r3, r2]
 801270c:	b2db      	uxtb	r3, r3
 801270e:	2b40      	cmp	r3, #64	@ 0x40
 8012710:	d10c      	bne.n	801272c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2242      	movs	r2, #66	@ 0x42
 8012716:	2100      	movs	r1, #0
 8012718:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2240      	movs	r2, #64	@ 0x40
 801271e:	2100      	movs	r1, #0
 8012720:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	0018      	movs	r0, r3
 8012726:	f7ff f8c4 	bl	80118b2 <HAL_I2C_MemTxCpltCallback>
}
 801272a:	e038      	b.n	801279e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2242      	movs	r2, #66	@ 0x42
 8012730:	2100      	movs	r1, #0
 8012732:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2240      	movs	r2, #64	@ 0x40
 8012738:	2100      	movs	r1, #0
 801273a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	0018      	movs	r0, r3
 8012740:	f7ff f87f 	bl	8011842 <HAL_I2C_MasterTxCpltCallback>
}
 8012744:	e02b      	b.n	801279e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2241      	movs	r2, #65	@ 0x41
 801274a:	5c9b      	ldrb	r3, [r3, r2]
 801274c:	b2db      	uxtb	r3, r3
 801274e:	2b22      	cmp	r3, #34	@ 0x22
 8012750:	d125      	bne.n	801279e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2241      	movs	r2, #65	@ 0x41
 8012756:	2120      	movs	r1, #32
 8012758:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2242      	movs	r2, #66	@ 0x42
 8012764:	5c9b      	ldrb	r3, [r3, r2]
 8012766:	b2db      	uxtb	r3, r3
 8012768:	2b40      	cmp	r3, #64	@ 0x40
 801276a:	d10c      	bne.n	8012786 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2242      	movs	r2, #66	@ 0x42
 8012770:	2100      	movs	r1, #0
 8012772:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2240      	movs	r2, #64	@ 0x40
 8012778:	2100      	movs	r1, #0
 801277a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	0018      	movs	r0, r3
 8012780:	f7ff f89f 	bl	80118c2 <HAL_I2C_MemRxCpltCallback>
}
 8012784:	e00b      	b.n	801279e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2242      	movs	r2, #66	@ 0x42
 801278a:	2100      	movs	r1, #0
 801278c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2240      	movs	r2, #64	@ 0x40
 8012792:	2100      	movs	r1, #0
 8012794:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	0018      	movs	r0, r3
 801279a:	f7ff f85a 	bl	8011852 <HAL_I2C_MasterRxCpltCallback>
}
 801279e:	46c0      	nop			@ (mov r8, r8)
 80127a0:	46bd      	mov	sp, r7
 80127a2:	b006      	add	sp, #24
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	46c0      	nop			@ (mov r8, r8)
 80127a8:	fe00e800 	.word	0xfe00e800
 80127ac:	ffff0000 	.word	0xffff0000

080127b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80127cc:	200b      	movs	r0, #11
 80127ce:	183b      	adds	r3, r7, r0
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	2141      	movs	r1, #65	@ 0x41
 80127d4:	5c52      	ldrb	r2, [r2, r1]
 80127d6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2220      	movs	r2, #32
 80127de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80127e0:	183b      	adds	r3, r7, r0
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	2b21      	cmp	r3, #33	@ 0x21
 80127e6:	d003      	beq.n	80127f0 <I2C_ITSlaveCplt+0x40>
 80127e8:	183b      	adds	r3, r7, r0
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	2b29      	cmp	r3, #41	@ 0x29
 80127ee:	d109      	bne.n	8012804 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80127f0:	4aac      	ldr	r2, [pc, #688]	@ (8012aa4 <I2C_ITSlaveCplt+0x2f4>)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	0011      	movs	r1, r2
 80127f6:	0018      	movs	r0, r3
 80127f8:	f000 fca4 	bl	8013144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2221      	movs	r2, #33	@ 0x21
 8012800:	631a      	str	r2, [r3, #48]	@ 0x30
 8012802:	e020      	b.n	8012846 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012804:	220b      	movs	r2, #11
 8012806:	18bb      	adds	r3, r7, r2
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	2b22      	cmp	r3, #34	@ 0x22
 801280c:	d003      	beq.n	8012816 <I2C_ITSlaveCplt+0x66>
 801280e:	18bb      	adds	r3, r7, r2
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	2b2a      	cmp	r3, #42	@ 0x2a
 8012814:	d109      	bne.n	801282a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8012816:	4aa4      	ldr	r2, [pc, #656]	@ (8012aa8 <I2C_ITSlaveCplt+0x2f8>)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	0011      	movs	r1, r2
 801281c:	0018      	movs	r0, r3
 801281e:	f000 fc91 	bl	8013144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2222      	movs	r2, #34	@ 0x22
 8012826:	631a      	str	r2, [r3, #48]	@ 0x30
 8012828:	e00d      	b.n	8012846 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 801282a:	230b      	movs	r3, #11
 801282c:	18fb      	adds	r3, r7, r3
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b28      	cmp	r3, #40	@ 0x28
 8012832:	d108      	bne.n	8012846 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8012834:	4a9d      	ldr	r2, [pc, #628]	@ (8012aac <I2C_ITSlaveCplt+0x2fc>)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	0011      	movs	r1, r2
 801283a:	0018      	movs	r0, r3
 801283c:	f000 fc82 	bl	8013144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	685a      	ldr	r2, [r3, #4]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2180      	movs	r1, #128	@ 0x80
 8012852:	0209      	lsls	r1, r1, #8
 8012854:	430a      	orrs	r2, r1
 8012856:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	685a      	ldr	r2, [r3, #4]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4993      	ldr	r1, [pc, #588]	@ (8012ab0 <I2C_ITSlaveCplt+0x300>)
 8012864:	400a      	ands	r2, r1
 8012866:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	0018      	movs	r0, r3
 801286c:	f000 faab 	bl	8012dc6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012870:	693a      	ldr	r2, [r7, #16]
 8012872:	2380      	movs	r3, #128	@ 0x80
 8012874:	01db      	lsls	r3, r3, #7
 8012876:	4013      	ands	r3, r2
 8012878:	d013      	beq.n	80128a2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	498b      	ldr	r1, [pc, #556]	@ (8012ab4 <I2C_ITSlaveCplt+0x304>)
 8012886:	400a      	ands	r2, r1
 8012888:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801288e:	2b00      	cmp	r3, #0
 8012890:	d01f      	beq.n	80128d2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	b29a      	uxth	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80128a0:	e017      	b.n	80128d2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80128a2:	693a      	ldr	r2, [r7, #16]
 80128a4:	2380      	movs	r3, #128	@ 0x80
 80128a6:	021b      	lsls	r3, r3, #8
 80128a8:	4013      	ands	r3, r2
 80128aa:	d012      	beq.n	80128d2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	4980      	ldr	r1, [pc, #512]	@ (8012ab8 <I2C_ITSlaveCplt+0x308>)
 80128b8:	400a      	ands	r2, r1
 80128ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d006      	beq.n	80128d2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	2204      	movs	r2, #4
 80128d6:	4013      	ands	r3, r2
 80128d8:	d020      	beq.n	801291c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2204      	movs	r2, #4
 80128de:	4393      	bics	r3, r2
 80128e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ec:	b2d2      	uxtb	r2, r2
 80128ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00c      	beq.n	801291c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012906:	3b01      	subs	r3, #1
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012912:	b29b      	uxth	r3, r3
 8012914:	3b01      	subs	r3, #1
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012920:	b29b      	uxth	r3, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d005      	beq.n	8012932 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801292a:	2204      	movs	r2, #4
 801292c:	431a      	orrs	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2210      	movs	r2, #16
 8012936:	4013      	ands	r3, r2
 8012938:	d04f      	beq.n	80129da <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	2210      	movs	r2, #16
 801293e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8012940:	d04b      	beq.n	80129da <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012946:	b29b      	uxth	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	d12d      	bne.n	80129a8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2241      	movs	r2, #65	@ 0x41
 8012950:	5c9b      	ldrb	r3, [r3, r2]
 8012952:	b2db      	uxtb	r3, r3
 8012954:	2b28      	cmp	r3, #40	@ 0x28
 8012956:	d10b      	bne.n	8012970 <I2C_ITSlaveCplt+0x1c0>
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	2380      	movs	r3, #128	@ 0x80
 801295c:	049b      	lsls	r3, r3, #18
 801295e:	429a      	cmp	r2, r3
 8012960:	d106      	bne.n	8012970 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8012962:	697a      	ldr	r2, [r7, #20]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	0011      	movs	r1, r2
 8012968:	0018      	movs	r0, r3
 801296a:	f000 f8a9 	bl	8012ac0 <I2C_ITListenCplt>
 801296e:	e034      	b.n	80129da <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2241      	movs	r2, #65	@ 0x41
 8012974:	5c9b      	ldrb	r3, [r3, r2]
 8012976:	b2db      	uxtb	r3, r3
 8012978:	2b29      	cmp	r3, #41	@ 0x29
 801297a:	d110      	bne.n	801299e <I2C_ITSlaveCplt+0x1ee>
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	4a4f      	ldr	r2, [pc, #316]	@ (8012abc <I2C_ITSlaveCplt+0x30c>)
 8012980:	4293      	cmp	r3, r2
 8012982:	d00c      	beq.n	801299e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2210      	movs	r2, #16
 801298a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	0018      	movs	r0, r3
 8012990:	f000 fa19 	bl	8012dc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	0018      	movs	r0, r3
 8012998:	f7ff fdd8 	bl	801254c <I2C_ITSlaveSeqCplt>
 801299c:	e01d      	b.n	80129da <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2210      	movs	r2, #16
 80129a4:	61da      	str	r2, [r3, #28]
 80129a6:	e018      	b.n	80129da <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2210      	movs	r2, #16
 80129ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129b4:	2204      	movs	r2, #4
 80129b6:	431a      	orrs	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d004      	beq.n	80129cc <I2C_ITSlaveCplt+0x21c>
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	2380      	movs	r3, #128	@ 0x80
 80129c6:	045b      	lsls	r3, r3, #17
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d106      	bne.n	80129da <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	0011      	movs	r1, r2
 80129d4:	0018      	movs	r0, r3
 80129d6:	f000 f8cb 	bl	8012b70 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2242      	movs	r2, #66	@ 0x42
 80129de:	2100      	movs	r1, #0
 80129e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2200      	movs	r2, #0
 80129e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d013      	beq.n	8012a18 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	0011      	movs	r1, r2
 80129f8:	0018      	movs	r0, r3
 80129fa:	f000 f8b9 	bl	8012b70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2241      	movs	r2, #65	@ 0x41
 8012a02:	5c9b      	ldrb	r3, [r3, r2]
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b28      	cmp	r3, #40	@ 0x28
 8012a08:	d147      	bne.n	8012a9a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	0011      	movs	r1, r2
 8012a10:	0018      	movs	r0, r3
 8012a12:	f000 f855 	bl	8012ac0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012a16:	e040      	b.n	8012a9a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a1c:	4a27      	ldr	r2, [pc, #156]	@ (8012abc <I2C_ITSlaveCplt+0x30c>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d016      	beq.n	8012a50 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	0018      	movs	r0, r3
 8012a26:	f7ff fd91 	bl	801254c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4a23      	ldr	r2, [pc, #140]	@ (8012abc <I2C_ITSlaveCplt+0x30c>)
 8012a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2241      	movs	r2, #65	@ 0x41
 8012a34:	2120      	movs	r1, #32
 8012a36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2240      	movs	r2, #64	@ 0x40
 8012a42:	2100      	movs	r1, #0
 8012a44:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	0018      	movs	r0, r3
 8012a4a:	f7fe ff2a 	bl	80118a2 <HAL_I2C_ListenCpltCallback>
}
 8012a4e:	e024      	b.n	8012a9a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2241      	movs	r2, #65	@ 0x41
 8012a54:	5c9b      	ldrb	r3, [r3, r2]
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	2b22      	cmp	r3, #34	@ 0x22
 8012a5a:	d10f      	bne.n	8012a7c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2241      	movs	r2, #65	@ 0x41
 8012a60:	2120      	movs	r1, #32
 8012a62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2240      	movs	r2, #64	@ 0x40
 8012a6e:	2100      	movs	r1, #0
 8012a70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	0018      	movs	r0, r3
 8012a76:	f7fe fefc 	bl	8011872 <HAL_I2C_SlaveRxCpltCallback>
}
 8012a7a:	e00e      	b.n	8012a9a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2241      	movs	r2, #65	@ 0x41
 8012a80:	2120      	movs	r1, #32
 8012a82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2240      	movs	r2, #64	@ 0x40
 8012a8e:	2100      	movs	r1, #0
 8012a90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	0018      	movs	r0, r3
 8012a96:	f7fe fee4 	bl	8011862 <HAL_I2C_SlaveTxCpltCallback>
}
 8012a9a:	46c0      	nop			@ (mov r8, r8)
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	b006      	add	sp, #24
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	46c0      	nop			@ (mov r8, r8)
 8012aa4:	00008001 	.word	0x00008001
 8012aa8:	00008002 	.word	0x00008002
 8012aac:	00008003 	.word	0x00008003
 8012ab0:	fe00e800 	.word	0xfe00e800
 8012ab4:	ffffbfff 	.word	0xffffbfff
 8012ab8:	ffff7fff 	.word	0xffff7fff
 8012abc:	ffff0000 	.word	0xffff0000

08012ac0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	4a26      	ldr	r2, [pc, #152]	@ (8012b68 <I2C_ITListenCplt+0xa8>)
 8012ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2241      	movs	r2, #65	@ 0x41
 8012ada:	2120      	movs	r1, #32
 8012adc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2242      	movs	r2, #66	@ 0x42
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2204      	movs	r2, #4
 8012af0:	4013      	ands	r3, r2
 8012af2:	d022      	beq.n	8012b3a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b06:	1c5a      	adds	r2, r3, #1
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d012      	beq.n	8012b3a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	3b01      	subs	r3, #1
 8012b28:	b29a      	uxth	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b32:	2204      	movs	r2, #4
 8012b34:	431a      	orrs	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8012b6c <I2C_ITListenCplt+0xac>)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	0011      	movs	r1, r2
 8012b40:	0018      	movs	r0, r3
 8012b42:	f000 faff 	bl	8013144 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2210      	movs	r2, #16
 8012b4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2240      	movs	r2, #64	@ 0x40
 8012b52:	2100      	movs	r1, #0
 8012b54:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	0018      	movs	r0, r3
 8012b5a:	f7fe fea2 	bl	80118a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012b5e:	46c0      	nop			@ (mov r8, r8)
 8012b60:	46bd      	mov	sp, r7
 8012b62:	b002      	add	sp, #8
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	46c0      	nop			@ (mov r8, r8)
 8012b68:	ffff0000 	.word	0xffff0000
 8012b6c:	00008003 	.word	0x00008003

08012b70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012b7a:	200f      	movs	r0, #15
 8012b7c:	183b      	adds	r3, r7, r0
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	2141      	movs	r1, #65	@ 0x41
 8012b82:	5c52      	ldrb	r2, [r2, r1]
 8012b84:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2242      	movs	r2, #66	@ 0x42
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4a72      	ldr	r2, [pc, #456]	@ (8012d5c <I2C_ITError+0x1ec>)
 8012b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	431a      	orrs	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8012ba6:	183b      	adds	r3, r7, r0
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	2b28      	cmp	r3, #40	@ 0x28
 8012bac:	d007      	beq.n	8012bbe <I2C_ITError+0x4e>
 8012bae:	183b      	adds	r3, r7, r0
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	2b29      	cmp	r3, #41	@ 0x29
 8012bb4:	d003      	beq.n	8012bbe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8012bb6:	183b      	adds	r3, r7, r0
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bbc:	d10c      	bne.n	8012bd8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2103      	movs	r1, #3
 8012bc2:	0018      	movs	r0, r3
 8012bc4:	f000 fabe 	bl	8013144 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2241      	movs	r2, #65	@ 0x41
 8012bcc:	2128      	movs	r1, #40	@ 0x28
 8012bce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	4a63      	ldr	r2, [pc, #396]	@ (8012d60 <I2C_ITError+0x1f0>)
 8012bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8012bd6:	e032      	b.n	8012c3e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012bd8:	4a62      	ldr	r2, [pc, #392]	@ (8012d64 <I2C_ITError+0x1f4>)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	0011      	movs	r1, r2
 8012bde:	0018      	movs	r0, r3
 8012be0:	f000 fab0 	bl	8013144 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	0018      	movs	r0, r3
 8012be8:	f000 f8ed 	bl	8012dc6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2241      	movs	r2, #65	@ 0x41
 8012bf0:	5c9b      	ldrb	r3, [r3, r2]
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	2b60      	cmp	r3, #96	@ 0x60
 8012bf6:	d01f      	beq.n	8012c38 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2241      	movs	r2, #65	@ 0x41
 8012bfc:	2120      	movs	r1, #32
 8012bfe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	699b      	ldr	r3, [r3, #24]
 8012c06:	2220      	movs	r2, #32
 8012c08:	4013      	ands	r3, r2
 8012c0a:	2b20      	cmp	r3, #32
 8012c0c:	d114      	bne.n	8012c38 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	699b      	ldr	r3, [r3, #24]
 8012c14:	2210      	movs	r2, #16
 8012c16:	4013      	ands	r3, r2
 8012c18:	2b10      	cmp	r3, #16
 8012c1a:	d109      	bne.n	8012c30 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2210      	movs	r2, #16
 8012c22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c28:	2204      	movs	r2, #4
 8012c2a:	431a      	orrs	r2, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2220      	movs	r2, #32
 8012c36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d03b      	beq.n	8012cc4 <I2C_ITError+0x154>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	2b11      	cmp	r3, #17
 8012c50:	d002      	beq.n	8012c58 <I2C_ITError+0xe8>
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	2b21      	cmp	r3, #33	@ 0x21
 8012c56:	d135      	bne.n	8012cc4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	2380      	movs	r3, #128	@ 0x80
 8012c60:	01db      	lsls	r3, r3, #7
 8012c62:	401a      	ands	r2, r3
 8012c64:	2380      	movs	r3, #128	@ 0x80
 8012c66:	01db      	lsls	r3, r3, #7
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d107      	bne.n	8012c7c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	493c      	ldr	r1, [pc, #240]	@ (8012d68 <I2C_ITError+0x1f8>)
 8012c78:	400a      	ands	r2, r1
 8012c7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c80:	0018      	movs	r0, r3
 8012c82:	f7fd fba9 	bl	80103d8 <HAL_DMA_GetState>
 8012c86:	0003      	movs	r3, r0
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d016      	beq.n	8012cba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c90:	4a36      	ldr	r2, [pc, #216]	@ (8012d6c <I2C_ITError+0x1fc>)
 8012c92:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2240      	movs	r2, #64	@ 0x40
 8012c98:	2100      	movs	r1, #0
 8012c9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	f7fd fa6d 	bl	8010180 <HAL_DMA_Abort_IT>
 8012ca6:	1e03      	subs	r3, r0, #0
 8012ca8:	d051      	beq.n	8012d4e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012cb8:	e049      	b.n	8012d4e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	0018      	movs	r0, r3
 8012cbe:	f000 f859 	bl	8012d74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012cc2:	e044      	b.n	8012d4e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d03b      	beq.n	8012d44 <I2C_ITError+0x1d4>
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	2b12      	cmp	r3, #18
 8012cd0:	d002      	beq.n	8012cd8 <I2C_ITError+0x168>
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	2b22      	cmp	r3, #34	@ 0x22
 8012cd6:	d135      	bne.n	8012d44 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	2380      	movs	r3, #128	@ 0x80
 8012ce0:	021b      	lsls	r3, r3, #8
 8012ce2:	401a      	ands	r2, r3
 8012ce4:	2380      	movs	r3, #128	@ 0x80
 8012ce6:	021b      	lsls	r3, r3, #8
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d107      	bne.n	8012cfc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	681a      	ldr	r2, [r3, #0]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	491e      	ldr	r1, [pc, #120]	@ (8012d70 <I2C_ITError+0x200>)
 8012cf8:	400a      	ands	r2, r1
 8012cfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d00:	0018      	movs	r0, r3
 8012d02:	f7fd fb69 	bl	80103d8 <HAL_DMA_GetState>
 8012d06:	0003      	movs	r3, r0
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d016      	beq.n	8012d3a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d10:	4a16      	ldr	r2, [pc, #88]	@ (8012d6c <I2C_ITError+0x1fc>)
 8012d12:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2240      	movs	r2, #64	@ 0x40
 8012d18:	2100      	movs	r1, #0
 8012d1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d20:	0018      	movs	r0, r3
 8012d22:	f7fd fa2d 	bl	8010180 <HAL_DMA_Abort_IT>
 8012d26:	1e03      	subs	r3, r0, #0
 8012d28:	d013      	beq.n	8012d52 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d34:	0018      	movs	r0, r3
 8012d36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012d38:	e00b      	b.n	8012d52 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	0018      	movs	r0, r3
 8012d3e:	f000 f819 	bl	8012d74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012d42:	e006      	b.n	8012d52 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	0018      	movs	r0, r3
 8012d48:	f000 f814 	bl	8012d74 <I2C_TreatErrorCallback>
  }
}
 8012d4c:	e002      	b.n	8012d54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012d4e:	46c0      	nop			@ (mov r8, r8)
 8012d50:	e000      	b.n	8012d54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012d52:	46c0      	nop			@ (mov r8, r8)
}
 8012d54:	46c0      	nop			@ (mov r8, r8)
 8012d56:	46bd      	mov	sp, r7
 8012d58:	b004      	add	sp, #16
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	ffff0000 	.word	0xffff0000
 8012d60:	08011b61 	.word	0x08011b61
 8012d64:	00008003 	.word	0x00008003
 8012d68:	ffffbfff 	.word	0xffffbfff
 8012d6c:	08012f7f 	.word	0x08012f7f
 8012d70:	ffff7fff 	.word	0xffff7fff

08012d74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2241      	movs	r2, #65	@ 0x41
 8012d80:	5c9b      	ldrb	r3, [r3, r2]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	2b60      	cmp	r3, #96	@ 0x60
 8012d86:	d10f      	bne.n	8012da8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2241      	movs	r2, #65	@ 0x41
 8012d8c:	2120      	movs	r1, #32
 8012d8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2240      	movs	r2, #64	@ 0x40
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	0018      	movs	r0, r3
 8012da2:	f7fe fd9e 	bl	80118e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012da6:	e00a      	b.n	8012dbe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2240      	movs	r2, #64	@ 0x40
 8012db2:	2100      	movs	r1, #0
 8012db4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	0018      	movs	r0, r3
 8012dba:	f7fe fd8a 	bl	80118d2 <HAL_I2C_ErrorCallback>
}
 8012dbe:	46c0      	nop			@ (mov r8, r8)
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	b002      	add	sp, #8
 8012dc4:	bd80      	pop	{r7, pc}

08012dc6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b082      	sub	sp, #8
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	699b      	ldr	r3, [r3, #24]
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	4013      	ands	r3, r2
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d103      	bne.n	8012de4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2200      	movs	r2, #0
 8012de2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	699b      	ldr	r3, [r3, #24]
 8012dea:	2201      	movs	r2, #1
 8012dec:	4013      	ands	r3, r2
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d007      	beq.n	8012e02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	699a      	ldr	r2, [r3, #24]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2101      	movs	r1, #1
 8012dfe:	430a      	orrs	r2, r1
 8012e00:	619a      	str	r2, [r3, #24]
  }
}
 8012e02:	46c0      	nop			@ (mov r8, r8)
 8012e04:	46bd      	mov	sp, r7
 8012e06:	b002      	add	sp, #8
 8012e08:	bd80      	pop	{r7, pc}
	...

08012e0c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e18:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4920      	ldr	r1, [pc, #128]	@ (8012ea8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012e26:	400a      	ands	r2, r1
 8012e28:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d105      	bne.n	8012e40 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2120      	movs	r1, #32
 8012e38:	0018      	movs	r0, r3
 8012e3a:	f000 f8f9 	bl	8013030 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012e3e:	e02e      	b.n	8012e9e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012e48:	189a      	adds	r2, r3, r2
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	2bff      	cmp	r3, #255	@ 0xff
 8012e56:	d903      	bls.n	8012e60 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	22ff      	movs	r2, #255	@ 0xff
 8012e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012e5e:	e004      	b.n	8012e6a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e72:	0019      	movs	r1, r3
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	3328      	adds	r3, #40	@ 0x28
 8012e7a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012e80:	f7fd f898 	bl	800ffb4 <HAL_DMA_Start_IT>
 8012e84:	1e03      	subs	r3, r0, #0
 8012e86:	d005      	beq.n	8012e94 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2110      	movs	r1, #16
 8012e8c:	0018      	movs	r0, r3
 8012e8e:	f7ff fe6f 	bl	8012b70 <I2C_ITError>
}
 8012e92:	e004      	b.n	8012e9e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2140      	movs	r1, #64	@ 0x40
 8012e98:	0018      	movs	r0, r3
 8012e9a:	f000 f8c9 	bl	8013030 <I2C_Enable_IRQ>
}
 8012e9e:	46c0      	nop			@ (mov r8, r8)
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	b004      	add	sp, #16
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	46c0      	nop			@ (mov r8, r8)
 8012ea8:	ffffbfff 	.word	0xffffbfff

08012eac <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eb8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4920      	ldr	r1, [pc, #128]	@ (8012f48 <I2C_DMAMasterReceiveCplt+0x9c>)
 8012ec6:	400a      	ands	r2, r1
 8012ec8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d105      	bne.n	8012ee0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2120      	movs	r1, #32
 8012ed8:	0018      	movs	r0, r3
 8012eda:	f000 f8a9 	bl	8013030 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012ede:	e02e      	b.n	8012f3e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012ee8:	189a      	adds	r2, r3, r2
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	2bff      	cmp	r3, #255	@ 0xff
 8012ef6:	d903      	bls.n	8012f00 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	22ff      	movs	r2, #255	@ 0xff
 8012efc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012efe:	e004      	b.n	8012f0a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f04:	b29a      	uxth	r2, r3
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	3324      	adds	r3, #36	@ 0x24
 8012f14:	0019      	movs	r1, r3
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012f20:	f7fd f848 	bl	800ffb4 <HAL_DMA_Start_IT>
 8012f24:	1e03      	subs	r3, r0, #0
 8012f26:	d005      	beq.n	8012f34 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2110      	movs	r1, #16
 8012f2c:	0018      	movs	r0, r3
 8012f2e:	f7ff fe1f 	bl	8012b70 <I2C_ITError>
}
 8012f32:	e004      	b.n	8012f3e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2140      	movs	r1, #64	@ 0x40
 8012f38:	0018      	movs	r0, r3
 8012f3a:	f000 f879 	bl	8013030 <I2C_Enable_IRQ>
}
 8012f3e:	46c0      	nop			@ (mov r8, r8)
 8012f40:	46bd      	mov	sp, r7
 8012f42:	b004      	add	sp, #16
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	46c0      	nop			@ (mov r8, r8)
 8012f48:	ffff7fff 	.word	0xffff7fff

08012f4c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f58:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2180      	movs	r1, #128	@ 0x80
 8012f66:	0209      	lsls	r1, r1, #8
 8012f68:	430a      	orrs	r2, r1
 8012f6a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2110      	movs	r1, #16
 8012f70:	0018      	movs	r0, r3
 8012f72:	f7ff fdfd 	bl	8012b70 <I2C_ITError>
}
 8012f76:	46c0      	nop			@ (mov r8, r8)
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	b004      	add	sp, #16
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b084      	sub	sp, #16
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d003      	beq.n	8012f9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f98:	2200      	movs	r2, #0
 8012f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d003      	beq.n	8012fac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fa8:	2200      	movs	r2, #0
 8012faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	0018      	movs	r0, r3
 8012fb0:	f7ff fee0 	bl	8012d74 <I2C_TreatErrorCallback>
}
 8012fb4:	46c0      	nop			@ (mov r8, r8)
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	b004      	add	sp, #16
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012fbc:	b590      	push	{r4, r7, lr}
 8012fbe:	b087      	sub	sp, #28
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	0008      	movs	r0, r1
 8012fc6:	0011      	movs	r1, r2
 8012fc8:	607b      	str	r3, [r7, #4]
 8012fca:	240a      	movs	r4, #10
 8012fcc:	193b      	adds	r3, r7, r4
 8012fce:	1c02      	adds	r2, r0, #0
 8012fd0:	801a      	strh	r2, [r3, #0]
 8012fd2:	2009      	movs	r0, #9
 8012fd4:	183b      	adds	r3, r7, r0
 8012fd6:	1c0a      	adds	r2, r1, #0
 8012fd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012fda:	193b      	adds	r3, r7, r4
 8012fdc:	881b      	ldrh	r3, [r3, #0]
 8012fde:	059b      	lsls	r3, r3, #22
 8012fe0:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012fe2:	183b      	adds	r3, r7, r0
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	0419      	lsls	r1, r3, #16
 8012fe8:	23ff      	movs	r3, #255	@ 0xff
 8012fea:	041b      	lsls	r3, r3, #16
 8012fec:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012fee:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	005b      	lsls	r3, r3, #1
 8012ffa:	085b      	lsrs	r3, r3, #1
 8012ffc:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013006:	0d51      	lsrs	r1, r2, #21
 8013008:	2280      	movs	r2, #128	@ 0x80
 801300a:	00d2      	lsls	r2, r2, #3
 801300c:	400a      	ands	r2, r1
 801300e:	4907      	ldr	r1, [pc, #28]	@ (801302c <I2C_TransferConfig+0x70>)
 8013010:	430a      	orrs	r2, r1
 8013012:	43d2      	mvns	r2, r2
 8013014:	401a      	ands	r2, r3
 8013016:	0011      	movs	r1, r2
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	430a      	orrs	r2, r1
 8013020:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8013022:	46c0      	nop			@ (mov r8, r8)
 8013024:	46bd      	mov	sp, r7
 8013026:	b007      	add	sp, #28
 8013028:	bd90      	pop	{r4, r7, pc}
 801302a:	46c0      	nop			@ (mov r8, r8)
 801302c:	03ff63ff 	.word	0x03ff63ff

08013030 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	000a      	movs	r2, r1
 801303a:	1cbb      	adds	r3, r7, #2
 801303c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801303e:	2300      	movs	r3, #0
 8013040:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013046:	4b3c      	ldr	r3, [pc, #240]	@ (8013138 <I2C_Enable_IRQ+0x108>)
 8013048:	429a      	cmp	r2, r3
 801304a:	d035      	beq.n	80130b8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8013050:	4b3a      	ldr	r3, [pc, #232]	@ (801313c <I2C_Enable_IRQ+0x10c>)
 8013052:	429a      	cmp	r2, r3
 8013054:	d030      	beq.n	80130b8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801305a:	4b39      	ldr	r3, [pc, #228]	@ (8013140 <I2C_Enable_IRQ+0x110>)
 801305c:	429a      	cmp	r2, r3
 801305e:	d02b      	beq.n	80130b8 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8013060:	1cbb      	adds	r3, r7, #2
 8013062:	2200      	movs	r2, #0
 8013064:	5e9b      	ldrsh	r3, [r3, r2]
 8013066:	2b00      	cmp	r3, #0
 8013068:	da03      	bge.n	8013072 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	22b8      	movs	r2, #184	@ 0xb8
 801306e:	4313      	orrs	r3, r2
 8013070:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8013072:	1cbb      	adds	r3, r7, #2
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	2201      	movs	r2, #1
 8013078:	4013      	ands	r3, r2
 801307a:	d003      	beq.n	8013084 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	22f2      	movs	r2, #242	@ 0xf2
 8013080:	4313      	orrs	r3, r2
 8013082:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013084:	1cbb      	adds	r3, r7, #2
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	2202      	movs	r2, #2
 801308a:	4013      	ands	r3, r2
 801308c:	d003      	beq.n	8013096 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	22f4      	movs	r2, #244	@ 0xf4
 8013092:	4313      	orrs	r3, r2
 8013094:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8013096:	1cbb      	adds	r3, r7, #2
 8013098:	881b      	ldrh	r3, [r3, #0]
 801309a:	2b10      	cmp	r3, #16
 801309c:	d103      	bne.n	80130a6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2290      	movs	r2, #144	@ 0x90
 80130a2:	4313      	orrs	r3, r2
 80130a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80130a6:	1cbb      	adds	r3, r7, #2
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	2b20      	cmp	r3, #32
 80130ac:	d137      	bne.n	801311e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2220      	movs	r2, #32
 80130b2:	4313      	orrs	r3, r2
 80130b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80130b6:	e032      	b.n	801311e <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80130b8:	1cbb      	adds	r3, r7, #2
 80130ba:	2200      	movs	r2, #0
 80130bc:	5e9b      	ldrsh	r3, [r3, r2]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	da03      	bge.n	80130ca <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	22b8      	movs	r2, #184	@ 0xb8
 80130c6:	4313      	orrs	r3, r2
 80130c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80130ca:	1cbb      	adds	r3, r7, #2
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	2201      	movs	r2, #1
 80130d0:	4013      	ands	r3, r2
 80130d2:	d003      	beq.n	80130dc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	22f2      	movs	r2, #242	@ 0xf2
 80130d8:	4313      	orrs	r3, r2
 80130da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80130dc:	1cbb      	adds	r3, r7, #2
 80130de:	881b      	ldrh	r3, [r3, #0]
 80130e0:	2202      	movs	r2, #2
 80130e2:	4013      	ands	r3, r2
 80130e4:	d003      	beq.n	80130ee <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	22f4      	movs	r2, #244	@ 0xf4
 80130ea:	4313      	orrs	r3, r2
 80130ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80130ee:	1cbb      	adds	r3, r7, #2
 80130f0:	881b      	ldrh	r3, [r3, #0]
 80130f2:	2b10      	cmp	r3, #16
 80130f4:	d103      	bne.n	80130fe <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2290      	movs	r2, #144	@ 0x90
 80130fa:	4313      	orrs	r3, r2
 80130fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80130fe:	1cbb      	adds	r3, r7, #2
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	2b20      	cmp	r3, #32
 8013104:	d103      	bne.n	801310e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2260      	movs	r2, #96	@ 0x60
 801310a:	4313      	orrs	r3, r2
 801310c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801310e:	1cbb      	adds	r3, r7, #2
 8013110:	881b      	ldrh	r3, [r3, #0]
 8013112:	2b40      	cmp	r3, #64	@ 0x40
 8013114:	d103      	bne.n	801311e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2240      	movs	r2, #64	@ 0x40
 801311a:	4313      	orrs	r3, r2
 801311c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	6819      	ldr	r1, [r3, #0]
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	430a      	orrs	r2, r1
 801312c:	601a      	str	r2, [r3, #0]
}
 801312e:	46c0      	nop			@ (mov r8, r8)
 8013130:	46bd      	mov	sp, r7
 8013132:	b004      	add	sp, #16
 8013134:	bd80      	pop	{r7, pc}
 8013136:	46c0      	nop			@ (mov r8, r8)
 8013138:	08011d61 	.word	0x08011d61
 801313c:	080121b1 	.word	0x080121b1
 8013140:	08011f59 	.word	0x08011f59

08013144 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	000a      	movs	r2, r1
 801314e:	1cbb      	adds	r3, r7, #2
 8013150:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8013152:	2300      	movs	r3, #0
 8013154:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8013156:	1cbb      	adds	r3, r7, #2
 8013158:	881b      	ldrh	r3, [r3, #0]
 801315a:	2201      	movs	r2, #1
 801315c:	4013      	ands	r3, r2
 801315e:	d010      	beq.n	8013182 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2242      	movs	r2, #66	@ 0x42
 8013164:	4313      	orrs	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2241      	movs	r2, #65	@ 0x41
 801316c:	5c9b      	ldrb	r3, [r3, r2]
 801316e:	b2db      	uxtb	r3, r3
 8013170:	001a      	movs	r2, r3
 8013172:	2328      	movs	r3, #40	@ 0x28
 8013174:	4013      	ands	r3, r2
 8013176:	2b28      	cmp	r3, #40	@ 0x28
 8013178:	d003      	beq.n	8013182 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	22b0      	movs	r2, #176	@ 0xb0
 801317e:	4313      	orrs	r3, r2
 8013180:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013182:	1cbb      	adds	r3, r7, #2
 8013184:	881b      	ldrh	r3, [r3, #0]
 8013186:	2202      	movs	r2, #2
 8013188:	4013      	ands	r3, r2
 801318a:	d010      	beq.n	80131ae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2244      	movs	r2, #68	@ 0x44
 8013190:	4313      	orrs	r3, r2
 8013192:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2241      	movs	r2, #65	@ 0x41
 8013198:	5c9b      	ldrb	r3, [r3, r2]
 801319a:	b2db      	uxtb	r3, r3
 801319c:	001a      	movs	r2, r3
 801319e:	2328      	movs	r3, #40	@ 0x28
 80131a0:	4013      	ands	r3, r2
 80131a2:	2b28      	cmp	r3, #40	@ 0x28
 80131a4:	d003      	beq.n	80131ae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	22b0      	movs	r2, #176	@ 0xb0
 80131aa:	4313      	orrs	r3, r2
 80131ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80131ae:	1cbb      	adds	r3, r7, #2
 80131b0:	2200      	movs	r2, #0
 80131b2:	5e9b      	ldrsh	r3, [r3, r2]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	da03      	bge.n	80131c0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	22b8      	movs	r2, #184	@ 0xb8
 80131bc:	4313      	orrs	r3, r2
 80131be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80131c0:	1cbb      	adds	r3, r7, #2
 80131c2:	881b      	ldrh	r3, [r3, #0]
 80131c4:	2b10      	cmp	r3, #16
 80131c6:	d103      	bne.n	80131d0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2290      	movs	r2, #144	@ 0x90
 80131cc:	4313      	orrs	r3, r2
 80131ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80131d0:	1cbb      	adds	r3, r7, #2
 80131d2:	881b      	ldrh	r3, [r3, #0]
 80131d4:	2b20      	cmp	r3, #32
 80131d6:	d103      	bne.n	80131e0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2220      	movs	r2, #32
 80131dc:	4313      	orrs	r3, r2
 80131de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80131e0:	1cbb      	adds	r3, r7, #2
 80131e2:	881b      	ldrh	r3, [r3, #0]
 80131e4:	2b40      	cmp	r3, #64	@ 0x40
 80131e6:	d103      	bne.n	80131f0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2240      	movs	r2, #64	@ 0x40
 80131ec:	4313      	orrs	r3, r2
 80131ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	43d9      	mvns	r1, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	400a      	ands	r2, r1
 8013200:	601a      	str	r2, [r3, #0]
}
 8013202:	46c0      	nop			@ (mov r8, r8)
 8013204:	46bd      	mov	sp, r7
 8013206:	b004      	add	sp, #16
 8013208:	bd80      	pop	{r7, pc}
	...

0801320c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2241      	movs	r2, #65	@ 0x41
 801321a:	5c9b      	ldrb	r3, [r3, r2]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b20      	cmp	r3, #32
 8013220:	d138      	bne.n	8013294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2240      	movs	r2, #64	@ 0x40
 8013226:	5c9b      	ldrb	r3, [r3, r2]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d101      	bne.n	8013230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801322c:	2302      	movs	r3, #2
 801322e:	e032      	b.n	8013296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2240      	movs	r2, #64	@ 0x40
 8013234:	2101      	movs	r1, #1
 8013236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2241      	movs	r2, #65	@ 0x41
 801323c:	2124      	movs	r1, #36	@ 0x24
 801323e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2101      	movs	r1, #1
 801324c:	438a      	bics	r2, r1
 801324e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	681a      	ldr	r2, [r3, #0]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	4911      	ldr	r1, [pc, #68]	@ (80132a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801325c:	400a      	ands	r2, r1
 801325e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	6819      	ldr	r1, [r3, #0]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	683a      	ldr	r2, [r7, #0]
 801326c:	430a      	orrs	r2, r1
 801326e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2101      	movs	r1, #1
 801327c:	430a      	orrs	r2, r1
 801327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2241      	movs	r2, #65	@ 0x41
 8013284:	2120      	movs	r1, #32
 8013286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2240      	movs	r2, #64	@ 0x40
 801328c:	2100      	movs	r1, #0
 801328e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013290:	2300      	movs	r3, #0
 8013292:	e000      	b.n	8013296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013294:	2302      	movs	r3, #2
  }
}
 8013296:	0018      	movs	r0, r3
 8013298:	46bd      	mov	sp, r7
 801329a:	b002      	add	sp, #8
 801329c:	bd80      	pop	{r7, pc}
 801329e:	46c0      	nop			@ (mov r8, r8)
 80132a0:	ffffefff 	.word	0xffffefff

080132a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2241      	movs	r2, #65	@ 0x41
 80132b2:	5c9b      	ldrb	r3, [r3, r2]
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b20      	cmp	r3, #32
 80132b8:	d139      	bne.n	801332e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2240      	movs	r2, #64	@ 0x40
 80132be:	5c9b      	ldrb	r3, [r3, r2]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d101      	bne.n	80132c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80132c4:	2302      	movs	r3, #2
 80132c6:	e033      	b.n	8013330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2240      	movs	r2, #64	@ 0x40
 80132cc:	2101      	movs	r1, #1
 80132ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2241      	movs	r2, #65	@ 0x41
 80132d4:	2124      	movs	r1, #36	@ 0x24
 80132d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2101      	movs	r1, #1
 80132e4:	438a      	bics	r2, r1
 80132e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4a11      	ldr	r2, [pc, #68]	@ (8013338 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80132f4:	4013      	ands	r3, r2
 80132f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	021b      	lsls	r3, r3, #8
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	4313      	orrs	r3, r2
 8013300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2101      	movs	r1, #1
 8013316:	430a      	orrs	r2, r1
 8013318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2241      	movs	r2, #65	@ 0x41
 801331e:	2120      	movs	r1, #32
 8013320:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2240      	movs	r2, #64	@ 0x40
 8013326:	2100      	movs	r1, #0
 8013328:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	e000      	b.n	8013330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801332e:	2302      	movs	r3, #2
  }
}
 8013330:	0018      	movs	r0, r3
 8013332:	46bd      	mov	sp, r7
 8013334:	b004      	add	sp, #16
 8013336:	bd80      	pop	{r7, pc}
 8013338:	fffff0ff 	.word	0xfffff0ff

0801333c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e06d      	b.n	801342a <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	0018      	movs	r0, r3
 8013352:	f000 f875 	bl	8013440 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4a36      	ldr	r2, [pc, #216]	@ (8013434 <HAL_IWDG_Init+0xf8>)
 801335c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4a35      	ldr	r2, [pc, #212]	@ (8013438 <HAL_IWDG_Init+0xfc>)
 8013364:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	6852      	ldr	r2, [r2, #4]
 801336e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	6892      	ldr	r2, [r2, #8]
 8013378:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 801337a:	f7fb fa4f 	bl	800e81c <HAL_GetTick>
 801337e:	0003      	movs	r3, r0
 8013380:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8013382:	e00e      	b.n	80133a2 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8013384:	f7fb fa4a 	bl	800e81c <HAL_GetTick>
 8013388:	0002      	movs	r2, r0
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	2b21      	cmp	r3, #33	@ 0x21
 8013390:	d907      	bls.n	80133a2 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68db      	ldr	r3, [r3, #12]
 8013398:	2202      	movs	r2, #2
 801339a:	4013      	ands	r3, r2
 801339c:	d001      	beq.n	80133a2 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 801339e:	2303      	movs	r3, #3
 80133a0:	e043      	b.n	801342a <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	2202      	movs	r2, #2
 80133aa:	4013      	ands	r3, r2
 80133ac:	d1ea      	bne.n	8013384 <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d105      	bne.n	80133c2 <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2280      	movs	r2, #128	@ 0x80
 80133bc:	01d2      	lsls	r2, r2, #7
 80133be:	615a      	str	r2, [r3, #20]
 80133c0:	e007      	b.n	80133d2 <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	691a      	ldr	r2, [r3, #16]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	21c0      	movs	r1, #192	@ 0xc0
 80133cc:	0209      	lsls	r1, r1, #8
 80133ce:	430a      	orrs	r2, r1
 80133d0:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80133d2:	f7fb fa23 	bl	800e81c <HAL_GetTick>
 80133d6:	0003      	movs	r3, r0
 80133d8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80133da:	e00e      	b.n	80133fa <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80133dc:	f7fb fa1e 	bl	800e81c <HAL_GetTick>
 80133e0:	0002      	movs	r2, r0
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	2b21      	cmp	r3, #33	@ 0x21
 80133e8:	d907      	bls.n	80133fa <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	220f      	movs	r2, #15
 80133f2:	4013      	ands	r3, r2
 80133f4:	d001      	beq.n	80133fa <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 80133f6:	2303      	movs	r3, #3
 80133f8:	e017      	b.n	801342a <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	220f      	movs	r2, #15
 8013402:	4013      	ands	r3, r2
 8013404:	d1ea      	bne.n	80133dc <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	691a      	ldr	r2, [r3, #16]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	429a      	cmp	r2, r3
 8013412:	d005      	beq.n	8013420 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	68d2      	ldr	r2, [r2, #12]
 801341c:	611a      	str	r2, [r3, #16]
 801341e:	e003      	b.n	8013428 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	4a05      	ldr	r2, [pc, #20]	@ (801343c <HAL_IWDG_Init+0x100>)
 8013426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013428:	2300      	movs	r3, #0
}
 801342a:	0018      	movs	r0, r3
 801342c:	46bd      	mov	sp, r7
 801342e:	b004      	add	sp, #16
 8013430:	bd80      	pop	{r7, pc}
 8013432:	46c0      	nop			@ (mov r8, r8)
 8013434:	0000cccc 	.word	0x0000cccc
 8013438:	00005555 	.word	0x00005555
 801343c:	0000aaaa 	.word	0x0000aaaa

08013440 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8013448:	46c0      	nop			@ (mov r8, r8)
 801344a:	46bd      	mov	sp, r7
 801344c:	b002      	add	sp, #8
 801344e:	bd80      	pop	{r7, pc}

08013450 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4a03      	ldr	r2, [pc, #12]	@ (801346c <HAL_IWDG_Refresh+0x1c>)
 801345e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013460:	2300      	movs	r3, #0
}
 8013462:	0018      	movs	r0, r3
 8013464:	46bd      	mov	sp, r7
 8013466:	b002      	add	sp, #8
 8013468:	bd80      	pop	{r7, pc}
 801346a:	46c0      	nop			@ (mov r8, r8)
 801346c:	0000aaaa 	.word	0x0000aaaa

08013470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	2380      	movs	r3, #128	@ 0x80
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	429a      	cmp	r2, r3
 8013480:	d137      	bne.n	80134f2 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8013482:	4b27      	ldr	r3, [pc, #156]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	23c0      	movs	r3, #192	@ 0xc0
 8013488:	00db      	lsls	r3, r3, #3
 801348a:	401a      	ands	r2, r3
 801348c:	2380      	movs	r3, #128	@ 0x80
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	429a      	cmp	r2, r3
 8013492:	d040      	beq.n	8013516 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013494:	4b22      	ldr	r3, [pc, #136]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a22      	ldr	r2, [pc, #136]	@ (8013524 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 801349a:	401a      	ands	r2, r3
 801349c:	4b20      	ldr	r3, [pc, #128]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801349e:	2180      	movs	r1, #128	@ 0x80
 80134a0:	0089      	lsls	r1, r1, #2
 80134a2:	430a      	orrs	r2, r1
 80134a4:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80134a6:	4b20      	ldr	r3, [pc, #128]	@ (8013528 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2232      	movs	r2, #50	@ 0x32
 80134ac:	4353      	muls	r3, r2
 80134ae:	491f      	ldr	r1, [pc, #124]	@ (801352c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80134b0:	0018      	movs	r0, r3
 80134b2:	f7ec fe31 	bl	8000118 <__udivsi3>
 80134b6:	0003      	movs	r3, r0
 80134b8:	3301      	adds	r3, #1
 80134ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80134bc:	e002      	b.n	80134c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	3b01      	subs	r3, #1
 80134c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80134c4:	4b16      	ldr	r3, [pc, #88]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80134c6:	695a      	ldr	r2, [r3, #20]
 80134c8:	2380      	movs	r3, #128	@ 0x80
 80134ca:	00db      	lsls	r3, r3, #3
 80134cc:	401a      	ands	r2, r3
 80134ce:	2380      	movs	r3, #128	@ 0x80
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d102      	bne.n	80134dc <HAL_PWREx_ControlVoltageScaling+0x6c>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1f0      	bne.n	80134be <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80134dc:	4b10      	ldr	r3, [pc, #64]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80134de:	695a      	ldr	r2, [r3, #20]
 80134e0:	2380      	movs	r3, #128	@ 0x80
 80134e2:	00db      	lsls	r3, r3, #3
 80134e4:	401a      	ands	r2, r3
 80134e6:	2380      	movs	r3, #128	@ 0x80
 80134e8:	00db      	lsls	r3, r3, #3
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d113      	bne.n	8013516 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80134ee:	2303      	movs	r3, #3
 80134f0:	e012      	b.n	8013518 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80134f2:	4b0b      	ldr	r3, [pc, #44]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	23c0      	movs	r3, #192	@ 0xc0
 80134f8:	00db      	lsls	r3, r3, #3
 80134fa:	401a      	ands	r2, r3
 80134fc:	2380      	movs	r3, #128	@ 0x80
 80134fe:	00db      	lsls	r3, r3, #3
 8013500:	429a      	cmp	r2, r3
 8013502:	d008      	beq.n	8013516 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8013504:	4b06      	ldr	r3, [pc, #24]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	4a06      	ldr	r2, [pc, #24]	@ (8013524 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 801350a:	401a      	ands	r2, r3
 801350c:	4b04      	ldr	r3, [pc, #16]	@ (8013520 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801350e:	2180      	movs	r1, #128	@ 0x80
 8013510:	00c9      	lsls	r1, r1, #3
 8013512:	430a      	orrs	r2, r1
 8013514:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8013516:	2300      	movs	r3, #0
}
 8013518:	0018      	movs	r0, r3
 801351a:	46bd      	mov	sp, r7
 801351c:	b004      	add	sp, #16
 801351e:	bd80      	pop	{r7, pc}
 8013520:	40007000 	.word	0x40007000
 8013524:	fffff9ff 	.word	0xfffff9ff
 8013528:	20000220 	.word	0x20000220
 801352c:	000f4240 	.word	0x000f4240

08013530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8013534:	4b03      	ldr	r3, [pc, #12]	@ (8013544 <HAL_PWREx_GetVoltageRange+0x14>)
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	23c0      	movs	r3, #192	@ 0xc0
 801353a:	00db      	lsls	r3, r3, #3
 801353c:	4013      	ands	r3, r2
}
 801353e:	0018      	movs	r0, r3
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	40007000 	.word	0x40007000

08013548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013548:	b5b0      	push	{r4, r5, r7, lr}
 801354a:	b088      	sub	sp, #32
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013550:	4bc9      	ldr	r3, [pc, #804]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	2238      	movs	r2, #56	@ 0x38
 8013556:	4013      	ands	r3, r2
 8013558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801355a:	4bc7      	ldr	r3, [pc, #796]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	2203      	movs	r2, #3
 8013560:	4013      	ands	r3, r2
 8013562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2210      	movs	r2, #16
 801356a:	4013      	ands	r3, r2
 801356c:	d100      	bne.n	8013570 <HAL_RCC_OscConfig+0x28>
 801356e:	e0ef      	b.n	8013750 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d007      	beq.n	8013586 <HAL_RCC_OscConfig+0x3e>
 8013576:	69bb      	ldr	r3, [r7, #24]
 8013578:	2b18      	cmp	r3, #24
 801357a:	d000      	beq.n	801357e <HAL_RCC_OscConfig+0x36>
 801357c:	e093      	b.n	80136a6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d000      	beq.n	8013586 <HAL_RCC_OscConfig+0x3e>
 8013584:	e08f      	b.n	80136a6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013586:	4bbc      	ldr	r3, [pc, #752]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2202      	movs	r2, #2
 801358c:	4013      	ands	r3, r2
 801358e:	d006      	beq.n	801359e <HAL_RCC_OscConfig+0x56>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	69db      	ldr	r3, [r3, #28]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d102      	bne.n	801359e <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8013598:	2301      	movs	r3, #1
 801359a:	f000 fbf2 	bl	8013d82 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135a2:	4bb5      	ldr	r3, [pc, #724]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2108      	movs	r1, #8
 80135a8:	400b      	ands	r3, r1
 80135aa:	d004      	beq.n	80135b6 <HAL_RCC_OscConfig+0x6e>
 80135ac:	4bb2      	ldr	r3, [pc, #712]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	21f0      	movs	r1, #240	@ 0xf0
 80135b2:	400b      	ands	r3, r1
 80135b4:	e005      	b.n	80135c2 <HAL_RCC_OscConfig+0x7a>
 80135b6:	49b0      	ldr	r1, [pc, #704]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135b8:	2394      	movs	r3, #148	@ 0x94
 80135ba:	58cb      	ldr	r3, [r1, r3]
 80135bc:	091b      	lsrs	r3, r3, #4
 80135be:	21f0      	movs	r1, #240	@ 0xf0
 80135c0:	400b      	ands	r3, r1
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d225      	bcs.n	8013612 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135ca:	0018      	movs	r0, r3
 80135cc:	f000 fd90 	bl	80140f0 <RCC_SetFlashLatencyFromMSIRange>
 80135d0:	1e03      	subs	r3, r0, #0
 80135d2:	d002      	beq.n	80135da <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80135d4:	2301      	movs	r3, #1
 80135d6:	f000 fbd4 	bl	8013d82 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80135da:	4ba7      	ldr	r3, [pc, #668]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	4ba6      	ldr	r3, [pc, #664]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135e0:	2108      	movs	r1, #8
 80135e2:	430a      	orrs	r2, r1
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	4ba4      	ldr	r3, [pc, #656]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	22f0      	movs	r2, #240	@ 0xf0
 80135ec:	4393      	bics	r3, r2
 80135ee:	0019      	movs	r1, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135f4:	4ba0      	ldr	r3, [pc, #640]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135f6:	430a      	orrs	r2, r1
 80135f8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80135fa:	4b9f      	ldr	r3, [pc, #636]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	4a9f      	ldr	r2, [pc, #636]	@ (801387c <HAL_RCC_OscConfig+0x334>)
 8013600:	4013      	ands	r3, r2
 8013602:	0019      	movs	r1, r3
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a1b      	ldr	r3, [r3, #32]
 8013608:	021a      	lsls	r2, r3, #8
 801360a:	4b9b      	ldr	r3, [pc, #620]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801360c:	430a      	orrs	r2, r1
 801360e:	605a      	str	r2, [r3, #4]
 8013610:	e027      	b.n	8013662 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013612:	4b99      	ldr	r3, [pc, #612]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013614:	681a      	ldr	r2, [r3, #0]
 8013616:	4b98      	ldr	r3, [pc, #608]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013618:	2108      	movs	r1, #8
 801361a:	430a      	orrs	r2, r1
 801361c:	601a      	str	r2, [r3, #0]
 801361e:	4b96      	ldr	r3, [pc, #600]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	22f0      	movs	r2, #240	@ 0xf0
 8013624:	4393      	bics	r3, r2
 8013626:	0019      	movs	r1, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801362c:	4b92      	ldr	r3, [pc, #584]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801362e:	430a      	orrs	r2, r1
 8013630:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013632:	4b91      	ldr	r3, [pc, #580]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	4a91      	ldr	r2, [pc, #580]	@ (801387c <HAL_RCC_OscConfig+0x334>)
 8013638:	4013      	ands	r3, r2
 801363a:	0019      	movs	r1, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6a1b      	ldr	r3, [r3, #32]
 8013640:	021a      	lsls	r2, r3, #8
 8013642:	4b8d      	ldr	r3, [pc, #564]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013644:	430a      	orrs	r2, r1
 8013646:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d109      	bne.n	8013662 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013652:	0018      	movs	r0, r3
 8013654:	f000 fd4c 	bl	80140f0 <RCC_SetFlashLatencyFromMSIRange>
 8013658:	1e03      	subs	r3, r0, #0
 801365a:	d002      	beq.n	8013662 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 801365c:	2301      	movs	r3, #1
 801365e:	f000 fb90 	bl	8013d82 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013662:	f000 fc87 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8013666:	0001      	movs	r1, r0
 8013668:	4b83      	ldr	r3, [pc, #524]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801366a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801366c:	0a1b      	lsrs	r3, r3, #8
 801366e:	220f      	movs	r2, #15
 8013670:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013672:	4a83      	ldr	r2, [pc, #524]	@ (8013880 <HAL_RCC_OscConfig+0x338>)
 8013674:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013676:	001a      	movs	r2, r3
 8013678:	231f      	movs	r3, #31
 801367a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 801367c:	000a      	movs	r2, r1
 801367e:	40da      	lsrs	r2, r3
 8013680:	4b80      	ldr	r3, [pc, #512]	@ (8013884 <HAL_RCC_OscConfig+0x33c>)
 8013682:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8013684:	4b80      	ldr	r3, [pc, #512]	@ (8013888 <HAL_RCC_OscConfig+0x340>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	250f      	movs	r5, #15
 801368a:	197c      	adds	r4, r7, r5
 801368c:	0018      	movs	r0, r3
 801368e:	f7fb f86b 	bl	800e768 <HAL_InitTick>
 8013692:	0003      	movs	r3, r0
 8013694:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8013696:	197b      	adds	r3, r7, r5
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d057      	beq.n	801374e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 801369e:	197b      	adds	r3, r7, r5
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	f000 fb6e 	bl	8013d82 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	69db      	ldr	r3, [r3, #28]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d035      	beq.n	801371a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80136ae:	4b72      	ldr	r3, [pc, #456]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	4b71      	ldr	r3, [pc, #452]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136b4:	2101      	movs	r1, #1
 80136b6:	430a      	orrs	r2, r1
 80136b8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80136ba:	f7fb f8af 	bl	800e81c <HAL_GetTick>
 80136be:	0003      	movs	r3, r0
 80136c0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80136c2:	e009      	b.n	80136d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80136c4:	f7fb f8aa 	bl	800e81c <HAL_GetTick>
 80136c8:	0002      	movs	r2, r0
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	1ad3      	subs	r3, r2, r3
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	d902      	bls.n	80136d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80136d2:	2303      	movs	r3, #3
 80136d4:	f000 fb55 	bl	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80136d8:	4b67      	ldr	r3, [pc, #412]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2202      	movs	r2, #2
 80136de:	4013      	ands	r3, r2
 80136e0:	d0f0      	beq.n	80136c4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80136e2:	4b65      	ldr	r3, [pc, #404]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	4b64      	ldr	r3, [pc, #400]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136e8:	2108      	movs	r1, #8
 80136ea:	430a      	orrs	r2, r1
 80136ec:	601a      	str	r2, [r3, #0]
 80136ee:	4b62      	ldr	r3, [pc, #392]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	22f0      	movs	r2, #240	@ 0xf0
 80136f4:	4393      	bics	r3, r2
 80136f6:	0019      	movs	r1, r3
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80136fc:	4b5e      	ldr	r3, [pc, #376]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80136fe:	430a      	orrs	r2, r1
 8013700:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013702:	4b5d      	ldr	r3, [pc, #372]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	4a5d      	ldr	r2, [pc, #372]	@ (801387c <HAL_RCC_OscConfig+0x334>)
 8013708:	4013      	ands	r3, r2
 801370a:	0019      	movs	r1, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a1b      	ldr	r3, [r3, #32]
 8013710:	021a      	lsls	r2, r3, #8
 8013712:	4b59      	ldr	r3, [pc, #356]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013714:	430a      	orrs	r2, r1
 8013716:	605a      	str	r2, [r3, #4]
 8013718:	e01a      	b.n	8013750 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801371a:	4b57      	ldr	r3, [pc, #348]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	4b56      	ldr	r3, [pc, #344]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013720:	2101      	movs	r1, #1
 8013722:	438a      	bics	r2, r1
 8013724:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013726:	f7fb f879 	bl	800e81c <HAL_GetTick>
 801372a:	0003      	movs	r3, r0
 801372c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801372e:	e008      	b.n	8013742 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8013730:	f7fb f874 	bl	800e81c <HAL_GetTick>
 8013734:	0002      	movs	r2, r0
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	1ad3      	subs	r3, r2, r3
 801373a:	2b02      	cmp	r3, #2
 801373c:	d901      	bls.n	8013742 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 801373e:	2303      	movs	r3, #3
 8013740:	e31f      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013742:	4b4d      	ldr	r3, [pc, #308]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	2202      	movs	r2, #2
 8013748:	4013      	ands	r3, r2
 801374a:	d1f1      	bne.n	8013730 <HAL_RCC_OscConfig+0x1e8>
 801374c:	e000      	b.n	8013750 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801374e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	2201      	movs	r2, #1
 8013756:	4013      	ands	r3, r2
 8013758:	d100      	bne.n	801375c <HAL_RCC_OscConfig+0x214>
 801375a:	e065      	b.n	8013828 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	2b10      	cmp	r3, #16
 8013760:	d005      	beq.n	801376e <HAL_RCC_OscConfig+0x226>
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	2b18      	cmp	r3, #24
 8013766:	d10e      	bne.n	8013786 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	2b03      	cmp	r3, #3
 801376c:	d10b      	bne.n	8013786 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801376e:	4b42      	ldr	r3, [pc, #264]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	2380      	movs	r3, #128	@ 0x80
 8013774:	029b      	lsls	r3, r3, #10
 8013776:	4013      	ands	r3, r2
 8013778:	d055      	beq.n	8013826 <HAL_RCC_OscConfig+0x2de>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d151      	bne.n	8013826 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8013782:	2301      	movs	r3, #1
 8013784:	e2fd      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	685a      	ldr	r2, [r3, #4]
 801378a:	2380      	movs	r3, #128	@ 0x80
 801378c:	025b      	lsls	r3, r3, #9
 801378e:	429a      	cmp	r2, r3
 8013790:	d107      	bne.n	80137a2 <HAL_RCC_OscConfig+0x25a>
 8013792:	4b39      	ldr	r3, [pc, #228]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	4b38      	ldr	r3, [pc, #224]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013798:	2180      	movs	r1, #128	@ 0x80
 801379a:	0249      	lsls	r1, r1, #9
 801379c:	430a      	orrs	r2, r1
 801379e:	601a      	str	r2, [r3, #0]
 80137a0:	e013      	b.n	80137ca <HAL_RCC_OscConfig+0x282>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	685a      	ldr	r2, [r3, #4]
 80137a6:	23a0      	movs	r3, #160	@ 0xa0
 80137a8:	02db      	lsls	r3, r3, #11
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d107      	bne.n	80137be <HAL_RCC_OscConfig+0x276>
 80137ae:	4b32      	ldr	r3, [pc, #200]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	4b31      	ldr	r3, [pc, #196]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80137b4:	21a0      	movs	r1, #160	@ 0xa0
 80137b6:	02c9      	lsls	r1, r1, #11
 80137b8:	430a      	orrs	r2, r1
 80137ba:	601a      	str	r2, [r3, #0]
 80137bc:	e005      	b.n	80137ca <HAL_RCC_OscConfig+0x282>
 80137be:	4b2e      	ldr	r3, [pc, #184]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	4b2d      	ldr	r3, [pc, #180]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80137c4:	4931      	ldr	r1, [pc, #196]	@ (801388c <HAL_RCC_OscConfig+0x344>)
 80137c6:	400a      	ands	r2, r1
 80137c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d014      	beq.n	80137fc <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137d2:	f7fb f823 	bl	800e81c <HAL_GetTick>
 80137d6:	0003      	movs	r3, r0
 80137d8:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80137da:	e008      	b.n	80137ee <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80137dc:	f7fb f81e 	bl	800e81c <HAL_GetTick>
 80137e0:	0002      	movs	r2, r0
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	2b64      	cmp	r3, #100	@ 0x64
 80137e8:	d901      	bls.n	80137ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80137ea:	2303      	movs	r3, #3
 80137ec:	e2c9      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80137ee:	4b22      	ldr	r3, [pc, #136]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	2380      	movs	r3, #128	@ 0x80
 80137f4:	029b      	lsls	r3, r3, #10
 80137f6:	4013      	ands	r3, r2
 80137f8:	d0f0      	beq.n	80137dc <HAL_RCC_OscConfig+0x294>
 80137fa:	e015      	b.n	8013828 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137fc:	f7fb f80e 	bl	800e81c <HAL_GetTick>
 8013800:	0003      	movs	r3, r0
 8013802:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013804:	e008      	b.n	8013818 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8013806:	f7fb f809 	bl	800e81c <HAL_GetTick>
 801380a:	0002      	movs	r2, r0
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	2b64      	cmp	r3, #100	@ 0x64
 8013812:	d901      	bls.n	8013818 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8013814:	2303      	movs	r3, #3
 8013816:	e2b4      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013818:	4b17      	ldr	r3, [pc, #92]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	2380      	movs	r3, #128	@ 0x80
 801381e:	029b      	lsls	r3, r3, #10
 8013820:	4013      	ands	r3, r2
 8013822:	d1f0      	bne.n	8013806 <HAL_RCC_OscConfig+0x2be>
 8013824:	e000      	b.n	8013828 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013826:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2202      	movs	r2, #2
 801382e:	4013      	ands	r3, r2
 8013830:	d100      	bne.n	8013834 <HAL_RCC_OscConfig+0x2ec>
 8013832:	e074      	b.n	801391e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	2b08      	cmp	r3, #8
 8013838:	d005      	beq.n	8013846 <HAL_RCC_OscConfig+0x2fe>
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	2b18      	cmp	r3, #24
 801383e:	d129      	bne.n	8013894 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	2b02      	cmp	r3, #2
 8013844:	d126      	bne.n	8013894 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013846:	4b0c      	ldr	r3, [pc, #48]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	2380      	movs	r3, #128	@ 0x80
 801384c:	00db      	lsls	r3, r3, #3
 801384e:	4013      	ands	r3, r2
 8013850:	d005      	beq.n	801385e <HAL_RCC_OscConfig+0x316>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d101      	bne.n	801385e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 801385a:	2301      	movs	r3, #1
 801385c:	e291      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801385e:	4b06      	ldr	r3, [pc, #24]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	4a0b      	ldr	r2, [pc, #44]	@ (8013890 <HAL_RCC_OscConfig+0x348>)
 8013864:	4013      	ands	r3, r2
 8013866:	0019      	movs	r1, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	061a      	lsls	r2, r3, #24
 801386e:	4b02      	ldr	r3, [pc, #8]	@ (8013878 <HAL_RCC_OscConfig+0x330>)
 8013870:	430a      	orrs	r2, r1
 8013872:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013874:	e053      	b.n	801391e <HAL_RCC_OscConfig+0x3d6>
 8013876:	46c0      	nop			@ (mov r8, r8)
 8013878:	40021000 	.word	0x40021000
 801387c:	ffff00ff 	.word	0xffff00ff
 8013880:	08018a8c 	.word	0x08018a8c
 8013884:	20000220 	.word	0x20000220
 8013888:	20000224 	.word	0x20000224
 801388c:	fffaffff 	.word	0xfffaffff
 8013890:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d026      	beq.n	80138ea <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801389c:	4bc7      	ldr	r3, [pc, #796]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	4bc6      	ldr	r3, [pc, #792]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138a2:	2180      	movs	r1, #128	@ 0x80
 80138a4:	0049      	lsls	r1, r1, #1
 80138a6:	430a      	orrs	r2, r1
 80138a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138aa:	f7fa ffb7 	bl	800e81c <HAL_GetTick>
 80138ae:	0003      	movs	r3, r0
 80138b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80138b2:	e008      	b.n	80138c6 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80138b4:	f7fa ffb2 	bl	800e81c <HAL_GetTick>
 80138b8:	0002      	movs	r2, r0
 80138ba:	693b      	ldr	r3, [r7, #16]
 80138bc:	1ad3      	subs	r3, r2, r3
 80138be:	2b02      	cmp	r3, #2
 80138c0:	d901      	bls.n	80138c6 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80138c2:	2303      	movs	r3, #3
 80138c4:	e25d      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80138c6:	4bbd      	ldr	r3, [pc, #756]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	2380      	movs	r3, #128	@ 0x80
 80138cc:	00db      	lsls	r3, r3, #3
 80138ce:	4013      	ands	r3, r2
 80138d0:	d0f0      	beq.n	80138b4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80138d2:	4bba      	ldr	r3, [pc, #744]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4aba      	ldr	r2, [pc, #744]	@ (8013bc0 <HAL_RCC_OscConfig+0x678>)
 80138d8:	4013      	ands	r3, r2
 80138da:	0019      	movs	r1, r3
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	691b      	ldr	r3, [r3, #16]
 80138e0:	061a      	lsls	r2, r3, #24
 80138e2:	4bb6      	ldr	r3, [pc, #728]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138e4:	430a      	orrs	r2, r1
 80138e6:	605a      	str	r2, [r3, #4]
 80138e8:	e019      	b.n	801391e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80138ea:	4bb4      	ldr	r3, [pc, #720]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138ec:	681a      	ldr	r2, [r3, #0]
 80138ee:	4bb3      	ldr	r3, [pc, #716]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80138f0:	49b4      	ldr	r1, [pc, #720]	@ (8013bc4 <HAL_RCC_OscConfig+0x67c>)
 80138f2:	400a      	ands	r2, r1
 80138f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138f6:	f7fa ff91 	bl	800e81c <HAL_GetTick>
 80138fa:	0003      	movs	r3, r0
 80138fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80138fe:	e008      	b.n	8013912 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8013900:	f7fa ff8c 	bl	800e81c <HAL_GetTick>
 8013904:	0002      	movs	r2, r0
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	2b02      	cmp	r3, #2
 801390c:	d901      	bls.n	8013912 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 801390e:	2303      	movs	r3, #3
 8013910:	e237      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013912:	4baa      	ldr	r3, [pc, #680]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	2380      	movs	r3, #128	@ 0x80
 8013918:	00db      	lsls	r3, r3, #3
 801391a:	4013      	ands	r3, r2
 801391c:	d1f0      	bne.n	8013900 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2208      	movs	r2, #8
 8013924:	4013      	ands	r3, r2
 8013926:	d051      	beq.n	80139cc <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	695b      	ldr	r3, [r3, #20]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d031      	beq.n	8013994 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	699b      	ldr	r3, [r3, #24]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d108      	bne.n	801394a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8013938:	4aa0      	ldr	r2, [pc, #640]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 801393a:	2394      	movs	r3, #148	@ 0x94
 801393c:	58d3      	ldr	r3, [r2, r3]
 801393e:	499f      	ldr	r1, [pc, #636]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013940:	2204      	movs	r2, #4
 8013942:	4393      	bics	r3, r2
 8013944:	2294      	movs	r2, #148	@ 0x94
 8013946:	508b      	str	r3, [r1, r2]
 8013948:	e007      	b.n	801395a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 801394a:	4a9c      	ldr	r2, [pc, #624]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 801394c:	2394      	movs	r3, #148	@ 0x94
 801394e:	58d3      	ldr	r3, [r2, r3]
 8013950:	499a      	ldr	r1, [pc, #616]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013952:	2204      	movs	r2, #4
 8013954:	4313      	orrs	r3, r2
 8013956:	2294      	movs	r2, #148	@ 0x94
 8013958:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801395a:	4a98      	ldr	r2, [pc, #608]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 801395c:	2394      	movs	r3, #148	@ 0x94
 801395e:	58d3      	ldr	r3, [r2, r3]
 8013960:	4996      	ldr	r1, [pc, #600]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013962:	2201      	movs	r2, #1
 8013964:	4313      	orrs	r3, r2
 8013966:	2294      	movs	r2, #148	@ 0x94
 8013968:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801396a:	f7fa ff57 	bl	800e81c <HAL_GetTick>
 801396e:	0003      	movs	r3, r0
 8013970:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013972:	e008      	b.n	8013986 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013974:	f7fa ff52 	bl	800e81c <HAL_GetTick>
 8013978:	0002      	movs	r2, r0
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	2b11      	cmp	r3, #17
 8013980:	d901      	bls.n	8013986 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8013982:	2303      	movs	r3, #3
 8013984:	e1fd      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013986:	4a8d      	ldr	r2, [pc, #564]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013988:	2394      	movs	r3, #148	@ 0x94
 801398a:	58d3      	ldr	r3, [r2, r3]
 801398c:	2202      	movs	r2, #2
 801398e:	4013      	ands	r3, r2
 8013990:	d0f0      	beq.n	8013974 <HAL_RCC_OscConfig+0x42c>
 8013992:	e01b      	b.n	80139cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013994:	4a89      	ldr	r2, [pc, #548]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013996:	2394      	movs	r3, #148	@ 0x94
 8013998:	58d3      	ldr	r3, [r2, r3]
 801399a:	4988      	ldr	r1, [pc, #544]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 801399c:	2201      	movs	r2, #1
 801399e:	4393      	bics	r3, r2
 80139a0:	2294      	movs	r2, #148	@ 0x94
 80139a2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80139a4:	f7fa ff3a 	bl	800e81c <HAL_GetTick>
 80139a8:	0003      	movs	r3, r0
 80139aa:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80139ac:	e008      	b.n	80139c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80139ae:	f7fa ff35 	bl	800e81c <HAL_GetTick>
 80139b2:	0002      	movs	r2, r0
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	1ad3      	subs	r3, r2, r3
 80139b8:	2b11      	cmp	r3, #17
 80139ba:	d901      	bls.n	80139c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80139bc:	2303      	movs	r3, #3
 80139be:	e1e0      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80139c0:	4a7e      	ldr	r2, [pc, #504]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80139c2:	2394      	movs	r3, #148	@ 0x94
 80139c4:	58d3      	ldr	r3, [r2, r3]
 80139c6:	2202      	movs	r2, #2
 80139c8:	4013      	ands	r3, r2
 80139ca:	d1f0      	bne.n	80139ae <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2204      	movs	r2, #4
 80139d2:	4013      	ands	r3, r2
 80139d4:	d100      	bne.n	80139d8 <HAL_RCC_OscConfig+0x490>
 80139d6:	e10d      	b.n	8013bf4 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80139d8:	201f      	movs	r0, #31
 80139da:	183b      	adds	r3, r7, r0
 80139dc:	2200      	movs	r2, #0
 80139de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80139e0:	4b76      	ldr	r3, [pc, #472]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80139e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139e4:	2380      	movs	r3, #128	@ 0x80
 80139e6:	055b      	lsls	r3, r3, #21
 80139e8:	4013      	ands	r3, r2
 80139ea:	d110      	bne.n	8013a0e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80139ec:	4b73      	ldr	r3, [pc, #460]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80139ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139f0:	4b72      	ldr	r3, [pc, #456]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80139f2:	2180      	movs	r1, #128	@ 0x80
 80139f4:	0549      	lsls	r1, r1, #21
 80139f6:	430a      	orrs	r2, r1
 80139f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80139fa:	4b70      	ldr	r3, [pc, #448]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 80139fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139fe:	2380      	movs	r3, #128	@ 0x80
 8013a00:	055b      	lsls	r3, r3, #21
 8013a02:	4013      	ands	r3, r2
 8013a04:	60bb      	str	r3, [r7, #8]
 8013a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013a08:	183b      	adds	r3, r7, r0
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8013bc8 <HAL_RCC_OscConfig+0x680>)
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	2380      	movs	r3, #128	@ 0x80
 8013a14:	005b      	lsls	r3, r3, #1
 8013a16:	4013      	ands	r3, r2
 8013a18:	d11a      	bne.n	8013a50 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8013bc8 <HAL_RCC_OscConfig+0x680>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8013bc8 <HAL_RCC_OscConfig+0x680>)
 8013a20:	2180      	movs	r1, #128	@ 0x80
 8013a22:	0049      	lsls	r1, r1, #1
 8013a24:	430a      	orrs	r2, r1
 8013a26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013a28:	f7fa fef8 	bl	800e81c <HAL_GetTick>
 8013a2c:	0003      	movs	r3, r0
 8013a2e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013a30:	e008      	b.n	8013a44 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013a32:	f7fa fef3 	bl	800e81c <HAL_GetTick>
 8013a36:	0002      	movs	r2, r0
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	d901      	bls.n	8013a44 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8013a40:	2303      	movs	r3, #3
 8013a42:	e19e      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013a44:	4b60      	ldr	r3, [pc, #384]	@ (8013bc8 <HAL_RCC_OscConfig+0x680>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	2380      	movs	r3, #128	@ 0x80
 8013a4a:	005b      	lsls	r3, r3, #1
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	d0f0      	beq.n	8013a32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	2201      	movs	r2, #1
 8013a56:	4013      	ands	r3, r2
 8013a58:	d01e      	beq.n	8013a98 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	2204      	movs	r2, #4
 8013a60:	4013      	ands	r3, r2
 8013a62:	d010      	beq.n	8013a86 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013a64:	4a55      	ldr	r2, [pc, #340]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a66:	2390      	movs	r3, #144	@ 0x90
 8013a68:	58d3      	ldr	r3, [r2, r3]
 8013a6a:	4954      	ldr	r1, [pc, #336]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a6c:	2204      	movs	r2, #4
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	2290      	movs	r2, #144	@ 0x90
 8013a72:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013a74:	4a51      	ldr	r2, [pc, #324]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a76:	2390      	movs	r3, #144	@ 0x90
 8013a78:	58d3      	ldr	r3, [r2, r3]
 8013a7a:	4950      	ldr	r1, [pc, #320]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	2290      	movs	r2, #144	@ 0x90
 8013a82:	508b      	str	r3, [r1, r2]
 8013a84:	e018      	b.n	8013ab8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013a86:	4a4d      	ldr	r2, [pc, #308]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a88:	2390      	movs	r3, #144	@ 0x90
 8013a8a:	58d3      	ldr	r3, [r2, r3]
 8013a8c:	494b      	ldr	r1, [pc, #300]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a8e:	2201      	movs	r2, #1
 8013a90:	4313      	orrs	r3, r2
 8013a92:	2290      	movs	r2, #144	@ 0x90
 8013a94:	508b      	str	r3, [r1, r2]
 8013a96:	e00f      	b.n	8013ab8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013a98:	4a48      	ldr	r2, [pc, #288]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013a9a:	2390      	movs	r3, #144	@ 0x90
 8013a9c:	58d3      	ldr	r3, [r2, r3]
 8013a9e:	4947      	ldr	r1, [pc, #284]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	4393      	bics	r3, r2
 8013aa4:	2290      	movs	r2, #144	@ 0x90
 8013aa6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013aa8:	4a44      	ldr	r2, [pc, #272]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013aaa:	2390      	movs	r3, #144	@ 0x90
 8013aac:	58d3      	ldr	r3, [r2, r3]
 8013aae:	4943      	ldr	r1, [pc, #268]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013ab0:	2204      	movs	r2, #4
 8013ab2:	4393      	bics	r3, r2
 8013ab4:	2290      	movs	r2, #144	@ 0x90
 8013ab6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	689b      	ldr	r3, [r3, #8]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d04f      	beq.n	8013b60 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ac0:	f7fa feac 	bl	800e81c <HAL_GetTick>
 8013ac4:	0003      	movs	r3, r0
 8013ac6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013ac8:	e009      	b.n	8013ade <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013aca:	f7fa fea7 	bl	800e81c <HAL_GetTick>
 8013ace:	0002      	movs	r2, r0
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8013bcc <HAL_RCC_OscConfig+0x684>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d901      	bls.n	8013ade <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8013ada:	2303      	movs	r3, #3
 8013adc:	e151      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013ade:	4a37      	ldr	r2, [pc, #220]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013ae0:	2390      	movs	r3, #144	@ 0x90
 8013ae2:	58d3      	ldr	r3, [r2, r3]
 8013ae4:	2202      	movs	r2, #2
 8013ae6:	4013      	ands	r3, r2
 8013ae8:	d0ef      	beq.n	8013aca <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	689b      	ldr	r3, [r3, #8]
 8013aee:	2280      	movs	r2, #128	@ 0x80
 8013af0:	4013      	ands	r3, r2
 8013af2:	d01a      	beq.n	8013b2a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013af4:	4a31      	ldr	r2, [pc, #196]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013af6:	2390      	movs	r3, #144	@ 0x90
 8013af8:	58d3      	ldr	r3, [r2, r3]
 8013afa:	4930      	ldr	r1, [pc, #192]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013afc:	2280      	movs	r2, #128	@ 0x80
 8013afe:	4313      	orrs	r3, r2
 8013b00:	2290      	movs	r2, #144	@ 0x90
 8013b02:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013b04:	e009      	b.n	8013b1a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013b06:	f7fa fe89 	bl	800e81c <HAL_GetTick>
 8013b0a:	0002      	movs	r2, r0
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	4a2e      	ldr	r2, [pc, #184]	@ (8013bcc <HAL_RCC_OscConfig+0x684>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d901      	bls.n	8013b1a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8013b16:	2303      	movs	r3, #3
 8013b18:	e133      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013b1a:	4a28      	ldr	r2, [pc, #160]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b1c:	2390      	movs	r3, #144	@ 0x90
 8013b1e:	58d2      	ldr	r2, [r2, r3]
 8013b20:	2380      	movs	r3, #128	@ 0x80
 8013b22:	011b      	lsls	r3, r3, #4
 8013b24:	4013      	ands	r3, r2
 8013b26:	d0ee      	beq.n	8013b06 <HAL_RCC_OscConfig+0x5be>
 8013b28:	e059      	b.n	8013bde <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013b2a:	4a24      	ldr	r2, [pc, #144]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b2c:	2390      	movs	r3, #144	@ 0x90
 8013b2e:	58d3      	ldr	r3, [r2, r3]
 8013b30:	4922      	ldr	r1, [pc, #136]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b32:	2280      	movs	r2, #128	@ 0x80
 8013b34:	4393      	bics	r3, r2
 8013b36:	2290      	movs	r2, #144	@ 0x90
 8013b38:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013b3a:	e009      	b.n	8013b50 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013b3c:	f7fa fe6e 	bl	800e81c <HAL_GetTick>
 8013b40:	0002      	movs	r2, r0
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	4a21      	ldr	r2, [pc, #132]	@ (8013bcc <HAL_RCC_OscConfig+0x684>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d901      	bls.n	8013b50 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8013b4c:	2303      	movs	r3, #3
 8013b4e:	e118      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013b50:	4a1a      	ldr	r2, [pc, #104]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b52:	2390      	movs	r3, #144	@ 0x90
 8013b54:	58d2      	ldr	r2, [r2, r3]
 8013b56:	2380      	movs	r3, #128	@ 0x80
 8013b58:	011b      	lsls	r3, r3, #4
 8013b5a:	4013      	ands	r3, r2
 8013b5c:	d1ee      	bne.n	8013b3c <HAL_RCC_OscConfig+0x5f4>
 8013b5e:	e03e      	b.n	8013bde <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b60:	f7fa fe5c 	bl	800e81c <HAL_GetTick>
 8013b64:	0003      	movs	r3, r0
 8013b66:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013b68:	e009      	b.n	8013b7e <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013b6a:	f7fa fe57 	bl	800e81c <HAL_GetTick>
 8013b6e:	0002      	movs	r2, r0
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	1ad3      	subs	r3, r2, r3
 8013b74:	4a15      	ldr	r2, [pc, #84]	@ (8013bcc <HAL_RCC_OscConfig+0x684>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d901      	bls.n	8013b7e <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	e101      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b80:	2390      	movs	r3, #144	@ 0x90
 8013b82:	58d3      	ldr	r3, [r2, r3]
 8013b84:	2202      	movs	r2, #2
 8013b86:	4013      	ands	r3, r2
 8013b88:	d1ef      	bne.n	8013b6a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8013b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b8c:	2390      	movs	r3, #144	@ 0x90
 8013b8e:	58d3      	ldr	r3, [r2, r3]
 8013b90:	2280      	movs	r2, #128	@ 0x80
 8013b92:	4013      	ands	r3, r2
 8013b94:	d023      	beq.n	8013bde <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013b96:	4a09      	ldr	r2, [pc, #36]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b98:	2390      	movs	r3, #144	@ 0x90
 8013b9a:	58d3      	ldr	r3, [r2, r3]
 8013b9c:	4907      	ldr	r1, [pc, #28]	@ (8013bbc <HAL_RCC_OscConfig+0x674>)
 8013b9e:	2280      	movs	r2, #128	@ 0x80
 8013ba0:	4393      	bics	r3, r2
 8013ba2:	2290      	movs	r2, #144	@ 0x90
 8013ba4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013ba6:	e013      	b.n	8013bd0 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013ba8:	f7fa fe38 	bl	800e81c <HAL_GetTick>
 8013bac:	0002      	movs	r2, r0
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	4a06      	ldr	r2, [pc, #24]	@ (8013bcc <HAL_RCC_OscConfig+0x684>)
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d90b      	bls.n	8013bd0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8013bb8:	2303      	movs	r3, #3
 8013bba:	e0e2      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
 8013bbc:	40021000 	.word	0x40021000
 8013bc0:	80ffffff 	.word	0x80ffffff
 8013bc4:	fffffeff 	.word	0xfffffeff
 8013bc8:	40007000 	.word	0x40007000
 8013bcc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013bd2:	2390      	movs	r3, #144	@ 0x90
 8013bd4:	58d2      	ldr	r2, [r2, r3]
 8013bd6:	2380      	movs	r3, #128	@ 0x80
 8013bd8:	011b      	lsls	r3, r3, #4
 8013bda:	4013      	ands	r3, r2
 8013bdc:	d1e4      	bne.n	8013ba8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013bde:	231f      	movs	r3, #31
 8013be0:	18fb      	adds	r3, r7, r3
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d105      	bne.n	8013bf4 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013be8:	4b68      	ldr	r3, [pc, #416]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013bea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013bec:	4b67      	ldr	r3, [pc, #412]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013bee:	4968      	ldr	r1, [pc, #416]	@ (8013d90 <HAL_RCC_OscConfig+0x848>)
 8013bf0:	400a      	ands	r2, r1
 8013bf2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2220      	movs	r2, #32
 8013bfa:	4013      	ands	r3, r2
 8013bfc:	d03c      	beq.n	8013c78 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d01c      	beq.n	8013c40 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013c06:	4a61      	ldr	r2, [pc, #388]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c08:	2398      	movs	r3, #152	@ 0x98
 8013c0a:	58d3      	ldr	r3, [r2, r3]
 8013c0c:	495f      	ldr	r1, [pc, #380]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c0e:	2201      	movs	r2, #1
 8013c10:	4313      	orrs	r3, r2
 8013c12:	2298      	movs	r2, #152	@ 0x98
 8013c14:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c16:	f7fa fe01 	bl	800e81c <HAL_GetTick>
 8013c1a:	0003      	movs	r3, r0
 8013c1c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013c1e:	e008      	b.n	8013c32 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c20:	f7fa fdfc 	bl	800e81c <HAL_GetTick>
 8013c24:	0002      	movs	r2, r0
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	1ad3      	subs	r3, r2, r3
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	d901      	bls.n	8013c32 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8013c2e:	2303      	movs	r3, #3
 8013c30:	e0a7      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013c32:	4a56      	ldr	r2, [pc, #344]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c34:	2398      	movs	r3, #152	@ 0x98
 8013c36:	58d3      	ldr	r3, [r2, r3]
 8013c38:	2202      	movs	r2, #2
 8013c3a:	4013      	ands	r3, r2
 8013c3c:	d0f0      	beq.n	8013c20 <HAL_RCC_OscConfig+0x6d8>
 8013c3e:	e01b      	b.n	8013c78 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013c40:	4a52      	ldr	r2, [pc, #328]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c42:	2398      	movs	r3, #152	@ 0x98
 8013c44:	58d3      	ldr	r3, [r2, r3]
 8013c46:	4951      	ldr	r1, [pc, #324]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c48:	2201      	movs	r2, #1
 8013c4a:	4393      	bics	r3, r2
 8013c4c:	2298      	movs	r2, #152	@ 0x98
 8013c4e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c50:	f7fa fde4 	bl	800e81c <HAL_GetTick>
 8013c54:	0003      	movs	r3, r0
 8013c56:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8013c58:	e008      	b.n	8013c6c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c5a:	f7fa fddf 	bl	800e81c <HAL_GetTick>
 8013c5e:	0002      	movs	r2, r0
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	1ad3      	subs	r3, r2, r3
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d901      	bls.n	8013c6c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8013c68:	2303      	movs	r3, #3
 8013c6a:	e08a      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8013c6c:	4a47      	ldr	r2, [pc, #284]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c6e:	2398      	movs	r3, #152	@ 0x98
 8013c70:	58d3      	ldr	r3, [r2, r3]
 8013c72:	2202      	movs	r2, #2
 8013c74:	4013      	ands	r3, r2
 8013c76:	d1f0      	bne.n	8013c5a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d100      	bne.n	8013c82 <HAL_RCC_OscConfig+0x73a>
 8013c80:	e07e      	b.n	8013d80 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013c82:	4b42      	ldr	r3, [pc, #264]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c84:	689b      	ldr	r3, [r3, #8]
 8013c86:	2238      	movs	r2, #56	@ 0x38
 8013c88:	4013      	ands	r3, r2
 8013c8a:	2b18      	cmp	r3, #24
 8013c8c:	d100      	bne.n	8013c90 <HAL_RCC_OscConfig+0x748>
 8013c8e:	e075      	b.n	8013d7c <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c94:	2b02      	cmp	r3, #2
 8013c96:	d156      	bne.n	8013d46 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013c98:	4b3c      	ldr	r3, [pc, #240]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013c9e:	493d      	ldr	r1, [pc, #244]	@ (8013d94 <HAL_RCC_OscConfig+0x84c>)
 8013ca0:	400a      	ands	r2, r1
 8013ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ca4:	f7fa fdba 	bl	800e81c <HAL_GetTick>
 8013ca8:	0003      	movs	r3, r0
 8013caa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013cac:	e008      	b.n	8013cc0 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013cae:	f7fa fdb5 	bl	800e81c <HAL_GetTick>
 8013cb2:	0002      	movs	r2, r0
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	1ad3      	subs	r3, r2, r3
 8013cb8:	2b02      	cmp	r3, #2
 8013cba:	d901      	bls.n	8013cc0 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8013cbc:	2303      	movs	r3, #3
 8013cbe:	e060      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013cc0:	4b32      	ldr	r3, [pc, #200]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	2380      	movs	r3, #128	@ 0x80
 8013cc6:	049b      	lsls	r3, r3, #18
 8013cc8:	4013      	ands	r3, r2
 8013cca:	d1f0      	bne.n	8013cae <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	4a31      	ldr	r2, [pc, #196]	@ (8013d98 <HAL_RCC_OscConfig+0x850>)
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	0019      	movs	r1, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013cde:	431a      	orrs	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ce4:	021b      	lsls	r3, r3, #8
 8013ce6:	431a      	orrs	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cec:	431a      	orrs	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cf2:	431a      	orrs	r2, r3
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013cf8:	431a      	orrs	r2, r3
 8013cfa:	4b24      	ldr	r3, [pc, #144]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013cfc:	430a      	orrs	r2, r1
 8013cfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8013d00:	4b22      	ldr	r3, [pc, #136]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d02:	68da      	ldr	r2, [r3, #12]
 8013d04:	4b21      	ldr	r3, [pc, #132]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d06:	2180      	movs	r1, #128	@ 0x80
 8013d08:	0549      	lsls	r1, r1, #21
 8013d0a:	430a      	orrs	r2, r1
 8013d0c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	4b1e      	ldr	r3, [pc, #120]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d14:	2180      	movs	r1, #128	@ 0x80
 8013d16:	0449      	lsls	r1, r1, #17
 8013d18:	430a      	orrs	r2, r1
 8013d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d1c:	f7fa fd7e 	bl	800e81c <HAL_GetTick>
 8013d20:	0003      	movs	r3, r0
 8013d22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013d24:	e008      	b.n	8013d38 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d26:	f7fa fd79 	bl	800e81c <HAL_GetTick>
 8013d2a:	0002      	movs	r2, r0
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	d901      	bls.n	8013d38 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8013d34:	2303      	movs	r3, #3
 8013d36:	e024      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013d38:	4b14      	ldr	r3, [pc, #80]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	2380      	movs	r3, #128	@ 0x80
 8013d3e:	049b      	lsls	r3, r3, #18
 8013d40:	4013      	ands	r3, r2
 8013d42:	d0f0      	beq.n	8013d26 <HAL_RCC_OscConfig+0x7de>
 8013d44:	e01c      	b.n	8013d80 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013d46:	4b11      	ldr	r3, [pc, #68]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	4b10      	ldr	r3, [pc, #64]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d4c:	4911      	ldr	r1, [pc, #68]	@ (8013d94 <HAL_RCC_OscConfig+0x84c>)
 8013d4e:	400a      	ands	r2, r1
 8013d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d52:	f7fa fd63 	bl	800e81c <HAL_GetTick>
 8013d56:	0003      	movs	r3, r0
 8013d58:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d5a:	e008      	b.n	8013d6e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d5c:	f7fa fd5e 	bl	800e81c <HAL_GetTick>
 8013d60:	0002      	movs	r2, r0
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	2b02      	cmp	r3, #2
 8013d68:	d901      	bls.n	8013d6e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8013d6a:	2303      	movs	r3, #3
 8013d6c:	e009      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d6e:	4b07      	ldr	r3, [pc, #28]	@ (8013d8c <HAL_RCC_OscConfig+0x844>)
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	2380      	movs	r3, #128	@ 0x80
 8013d74:	049b      	lsls	r3, r3, #18
 8013d76:	4013      	ands	r3, r2
 8013d78:	d1f0      	bne.n	8013d5c <HAL_RCC_OscConfig+0x814>
 8013d7a:	e001      	b.n	8013d80 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e000      	b.n	8013d82 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8013d80:	2300      	movs	r3, #0
}
 8013d82:	0018      	movs	r0, r3
 8013d84:	46bd      	mov	sp, r7
 8013d86:	b008      	add	sp, #32
 8013d88:	bdb0      	pop	{r4, r5, r7, pc}
 8013d8a:	46c0      	nop			@ (mov r8, r8)
 8013d8c:	40021000 	.word	0x40021000
 8013d90:	efffffff 	.word	0xefffffff
 8013d94:	feffffff 	.word	0xfeffffff
 8013d98:	11c1808c 	.word	0x11c1808c

08013d9c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8013d9c:	b5b0      	push	{r4, r5, r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013da6:	4b6c      	ldr	r3, [pc, #432]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	2207      	movs	r2, #7
 8013dac:	4013      	ands	r3, r2
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d911      	bls.n	8013dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013db4:	4b68      	ldr	r3, [pc, #416]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2207      	movs	r2, #7
 8013dba:	4393      	bics	r3, r2
 8013dbc:	0019      	movs	r1, r3
 8013dbe:	4b66      	ldr	r3, [pc, #408]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013dc0:	683a      	ldr	r2, [r7, #0]
 8013dc2:	430a      	orrs	r2, r1
 8013dc4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013dc6:	4b64      	ldr	r3, [pc, #400]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2207      	movs	r2, #7
 8013dcc:	4013      	ands	r3, r2
 8013dce:	683a      	ldr	r2, [r7, #0]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d001      	beq.n	8013dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	e0bb      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	2201      	movs	r2, #1
 8013dde:	4013      	ands	r3, r2
 8013de0:	d100      	bne.n	8013de4 <HAL_RCC_ClockConfig+0x48>
 8013de2:	e064      	b.n	8013eae <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	2b03      	cmp	r3, #3
 8013dea:	d107      	bne.n	8013dfc <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dec:	4b5b      	ldr	r3, [pc, #364]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	2380      	movs	r3, #128	@ 0x80
 8013df2:	049b      	lsls	r3, r3, #18
 8013df4:	4013      	ands	r3, r2
 8013df6:	d138      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	e0a9      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	2b02      	cmp	r3, #2
 8013e02:	d107      	bne.n	8013e14 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013e04:	4b55      	ldr	r3, [pc, #340]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	2380      	movs	r3, #128	@ 0x80
 8013e0a:	029b      	lsls	r3, r3, #10
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	d12c      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013e10:	2301      	movs	r3, #1
 8013e12:	e09d      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d106      	bne.n	8013e2a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2202      	movs	r2, #2
 8013e22:	4013      	ands	r3, r2
 8013e24:	d121      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013e26:	2301      	movs	r3, #1
 8013e28:	e092      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	d107      	bne.n	8013e42 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013e32:	4b4a      	ldr	r3, [pc, #296]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	2380      	movs	r3, #128	@ 0x80
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	d115      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e086      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	2b04      	cmp	r3, #4
 8013e48:	d107      	bne.n	8013e5a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013e4a:	4a44      	ldr	r2, [pc, #272]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e4c:	2394      	movs	r3, #148	@ 0x94
 8013e4e:	58d3      	ldr	r3, [r2, r3]
 8013e50:	2202      	movs	r2, #2
 8013e52:	4013      	ands	r3, r2
 8013e54:	d109      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013e56:	2301      	movs	r3, #1
 8013e58:	e07a      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e5a:	4a40      	ldr	r2, [pc, #256]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e5c:	2390      	movs	r3, #144	@ 0x90
 8013e5e:	58d3      	ldr	r3, [r2, r3]
 8013e60:	2202      	movs	r2, #2
 8013e62:	4013      	ands	r3, r2
 8013e64:	d101      	bne.n	8013e6a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013e66:	2301      	movs	r3, #1
 8013e68:	e072      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	2207      	movs	r2, #7
 8013e70:	4393      	bics	r3, r2
 8013e72:	0019      	movs	r1, r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685a      	ldr	r2, [r3, #4]
 8013e78:	4b38      	ldr	r3, [pc, #224]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e7a:	430a      	orrs	r2, r1
 8013e7c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013e7e:	f7fa fccd 	bl	800e81c <HAL_GetTick>
 8013e82:	0003      	movs	r3, r0
 8013e84:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e86:	e009      	b.n	8013e9c <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013e88:	f7fa fcc8 	bl	800e81c <HAL_GetTick>
 8013e8c:	0002      	movs	r2, r0
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	1ad3      	subs	r3, r2, r3
 8013e92:	4a33      	ldr	r2, [pc, #204]	@ (8013f60 <HAL_RCC_ClockConfig+0x1c4>)
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d901      	bls.n	8013e9c <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8013e98:	2303      	movs	r3, #3
 8013e9a:	e059      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	2238      	movs	r2, #56	@ 0x38
 8013ea2:	401a      	ands	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d1ec      	bne.n	8013e88 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	d009      	beq.n	8013ecc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013eb8:	4b28      	ldr	r3, [pc, #160]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	4a29      	ldr	r2, [pc, #164]	@ (8013f64 <HAL_RCC_ClockConfig+0x1c8>)
 8013ebe:	4013      	ands	r3, r2
 8013ec0:	0019      	movs	r1, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	689a      	ldr	r2, [r3, #8]
 8013ec6:	4b25      	ldr	r3, [pc, #148]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013ec8:	430a      	orrs	r2, r1
 8013eca:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013ecc:	4b22      	ldr	r3, [pc, #136]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2207      	movs	r2, #7
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	683a      	ldr	r2, [r7, #0]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d211      	bcs.n	8013efe <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013eda:	4b1f      	ldr	r3, [pc, #124]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2207      	movs	r2, #7
 8013ee0:	4393      	bics	r3, r2
 8013ee2:	0019      	movs	r1, r3
 8013ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013ee6:	683a      	ldr	r2, [r7, #0]
 8013ee8:	430a      	orrs	r2, r1
 8013eea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013eec:	4b1a      	ldr	r3, [pc, #104]	@ (8013f58 <HAL_RCC_ClockConfig+0x1bc>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2207      	movs	r2, #7
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d001      	beq.n	8013efe <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8013efa:	2301      	movs	r3, #1
 8013efc:	e028      	b.n	8013f50 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2204      	movs	r2, #4
 8013f04:	4013      	ands	r3, r2
 8013f06:	d009      	beq.n	8013f1c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8013f08:	4b14      	ldr	r3, [pc, #80]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013f0a:	689b      	ldr	r3, [r3, #8]
 8013f0c:	4a16      	ldr	r2, [pc, #88]	@ (8013f68 <HAL_RCC_ClockConfig+0x1cc>)
 8013f0e:	4013      	ands	r3, r2
 8013f10:	0019      	movs	r1, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	68da      	ldr	r2, [r3, #12]
 8013f16:	4b11      	ldr	r3, [pc, #68]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013f18:	430a      	orrs	r2, r1
 8013f1a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013f1c:	f000 f82a 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8013f20:	0001      	movs	r1, r0
 8013f22:	4b0e      	ldr	r3, [pc, #56]	@ (8013f5c <HAL_RCC_ClockConfig+0x1c0>)
 8013f24:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013f26:	0a1b      	lsrs	r3, r3, #8
 8013f28:	220f      	movs	r2, #15
 8013f2a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8013f6c <HAL_RCC_ClockConfig+0x1d0>)
 8013f2e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013f30:	001a      	movs	r2, r3
 8013f32:	231f      	movs	r3, #31
 8013f34:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013f36:	000a      	movs	r2, r1
 8013f38:	40da      	lsrs	r2, r3
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f70 <HAL_RCC_ClockConfig+0x1d4>)
 8013f3c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8013f3e:	250b      	movs	r5, #11
 8013f40:	197c      	adds	r4, r7, r5
 8013f42:	2003      	movs	r0, #3
 8013f44:	f7fa fc10 	bl	800e768 <HAL_InitTick>
 8013f48:	0003      	movs	r3, r0
 8013f4a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8013f4c:	197b      	adds	r3, r7, r5
 8013f4e:	781b      	ldrb	r3, [r3, #0]
}
 8013f50:	0018      	movs	r0, r3
 8013f52:	46bd      	mov	sp, r7
 8013f54:	b004      	add	sp, #16
 8013f56:	bdb0      	pop	{r4, r5, r7, pc}
 8013f58:	40022000 	.word	0x40022000
 8013f5c:	40021000 	.word	0x40021000
 8013f60:	00001388 	.word	0x00001388
 8013f64:	fffff0ff 	.word	0xfffff0ff
 8013f68:	ffff8fff 	.word	0xffff8fff
 8013f6c:	08018a8c 	.word	0x08018a8c
 8013f70:	20000220 	.word	0x20000220

08013f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b08a      	sub	sp, #40	@ 0x28
 8013f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013f82:	4b46      	ldr	r3, [pc, #280]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8013f84:	689b      	ldr	r3, [r3, #8]
 8013f86:	2238      	movs	r2, #56	@ 0x38
 8013f88:	4013      	ands	r3, r2
 8013f8a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013f8c:	4b43      	ldr	r3, [pc, #268]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	2203      	movs	r2, #3
 8013f92:	4013      	ands	r3, r2
 8013f94:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d005      	beq.n	8013fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	2b18      	cmp	r3, #24
 8013fa0:	d125      	bne.n	8013fee <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d122      	bne.n	8013fee <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8013fa8:	4b3c      	ldr	r3, [pc, #240]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2208      	movs	r2, #8
 8013fae:	4013      	ands	r3, r2
 8013fb0:	d107      	bne.n	8013fc2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8013fb2:	4a3a      	ldr	r2, [pc, #232]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8013fb4:	2394      	movs	r3, #148	@ 0x94
 8013fb6:	58d3      	ldr	r3, [r2, r3]
 8013fb8:	0a1b      	lsrs	r3, r3, #8
 8013fba:	220f      	movs	r2, #15
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fc0:	e005      	b.n	8013fce <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8013fc2:	4b36      	ldr	r3, [pc, #216]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	091b      	lsrs	r3, r3, #4
 8013fc8:	220f      	movs	r2, #15
 8013fca:	4013      	ands	r3, r2
 8013fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8013fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fd0:	2b0b      	cmp	r3, #11
 8013fd2:	d901      	bls.n	8013fd8 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8013fd8:	4b31      	ldr	r3, [pc, #196]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8013fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fdc:	0092      	lsls	r2, r2, #2
 8013fde:	58d3      	ldr	r3, [r2, r3]
 8013fe0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d11b      	bne.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013fec:	e018      	b.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	2b08      	cmp	r3, #8
 8013ff2:	d102      	bne.n	8013ffa <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8013ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80140a4 <HAL_RCC_GetSysClockFreq+0x130>)
 8013ff6:	623b      	str	r3, [r7, #32]
 8013ff8:	e012      	b.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	2b10      	cmp	r3, #16
 8013ffe:	d102      	bne.n	8014006 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014000:	4b29      	ldr	r3, [pc, #164]	@ (80140a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8014002:	623b      	str	r3, [r7, #32]
 8014004:	e00c      	b.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	2b20      	cmp	r3, #32
 801400a:	d103      	bne.n	8014014 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 801400c:	23fa      	movs	r3, #250	@ 0xfa
 801400e:	01db      	lsls	r3, r3, #7
 8014010:	623b      	str	r3, [r7, #32]
 8014012:	e005      	b.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	2b28      	cmp	r3, #40	@ 0x28
 8014018:	d102      	bne.n	8014020 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 801401a:	2380      	movs	r3, #128	@ 0x80
 801401c:	021b      	lsls	r3, r3, #8
 801401e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	2b18      	cmp	r3, #24
 8014024:	d135      	bne.n	8014092 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8014026:	4b1d      	ldr	r3, [pc, #116]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	2203      	movs	r2, #3
 801402c:	4013      	ands	r3, r2
 801402e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014030:	4b1a      	ldr	r3, [pc, #104]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	091b      	lsrs	r3, r3, #4
 8014036:	2207      	movs	r2, #7
 8014038:	4013      	ands	r3, r2
 801403a:	3301      	adds	r3, #1
 801403c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2b02      	cmp	r3, #2
 8014042:	d003      	beq.n	801404c <HAL_RCC_GetSysClockFreq+0xd8>
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	2b03      	cmp	r3, #3
 8014048:	d003      	beq.n	8014052 <HAL_RCC_GetSysClockFreq+0xde>
 801404a:	e005      	b.n	8014058 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 801404c:	4b15      	ldr	r3, [pc, #84]	@ (80140a4 <HAL_RCC_GetSysClockFreq+0x130>)
 801404e:	61fb      	str	r3, [r7, #28]
        break;
 8014050:	e005      	b.n	801405e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8014052:	4b15      	ldr	r3, [pc, #84]	@ (80140a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8014054:	61fb      	str	r3, [r7, #28]
        break;
 8014056:	e002      	b.n	801405e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8014058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801405a:	61fb      	str	r3, [r7, #28]
        break;
 801405c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 801405e:	4b0f      	ldr	r3, [pc, #60]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	0a1b      	lsrs	r3, r3, #8
 8014064:	227f      	movs	r2, #127	@ 0x7f
 8014066:	4013      	ands	r3, r2
 8014068:	69fa      	ldr	r2, [r7, #28]
 801406a:	4353      	muls	r3, r2
 801406c:	68f9      	ldr	r1, [r7, #12]
 801406e:	0018      	movs	r0, r3
 8014070:	f7ec f852 	bl	8000118 <__udivsi3>
 8014074:	0003      	movs	r3, r0
 8014076:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8014078:	4b08      	ldr	r3, [pc, #32]	@ (801409c <HAL_RCC_GetSysClockFreq+0x128>)
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	0f5b      	lsrs	r3, r3, #29
 801407e:	2207      	movs	r2, #7
 8014080:	4013      	ands	r3, r2
 8014082:	3301      	adds	r3, #1
 8014084:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8014086:	6879      	ldr	r1, [r7, #4]
 8014088:	68b8      	ldr	r0, [r7, #8]
 801408a:	f7ec f845 	bl	8000118 <__udivsi3>
 801408e:	0003      	movs	r3, r0
 8014090:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8014092:	6a3b      	ldr	r3, [r7, #32]
}
 8014094:	0018      	movs	r0, r3
 8014096:	46bd      	mov	sp, r7
 8014098:	b00a      	add	sp, #40	@ 0x28
 801409a:	bd80      	pop	{r7, pc}
 801409c:	40021000 	.word	0x40021000
 80140a0:	08018aa4 	.word	0x08018aa4
 80140a4:	00f42400 	.word	0x00f42400
 80140a8:	003d0900 	.word	0x003d0900

080140ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80140b0:	4b02      	ldr	r3, [pc, #8]	@ (80140bc <HAL_RCC_GetHCLKFreq+0x10>)
 80140b2:	681b      	ldr	r3, [r3, #0]
}
 80140b4:	0018      	movs	r0, r3
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	46c0      	nop			@ (mov r8, r8)
 80140bc:	20000220 	.word	0x20000220

080140c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80140c4:	f7ff fff2 	bl	80140ac <HAL_RCC_GetHCLKFreq>
 80140c8:	0001      	movs	r1, r0
 80140ca:	4b07      	ldr	r3, [pc, #28]	@ (80140e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	0b1b      	lsrs	r3, r3, #12
 80140d0:	2207      	movs	r2, #7
 80140d2:	4013      	ands	r3, r2
 80140d4:	4a05      	ldr	r2, [pc, #20]	@ (80140ec <HAL_RCC_GetPCLK1Freq+0x2c>)
 80140d6:	5cd3      	ldrb	r3, [r2, r3]
 80140d8:	001a      	movs	r2, r3
 80140da:	231f      	movs	r3, #31
 80140dc:	4013      	ands	r3, r2
 80140de:	40d9      	lsrs	r1, r3
 80140e0:	000b      	movs	r3, r1
}
 80140e2:	0018      	movs	r0, r3
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	40021000 	.word	0x40021000
 80140ec:	08018a9c 	.word	0x08018a9c

080140f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b086      	sub	sp, #24
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80140f8:	2300      	movs	r3, #0
 80140fa:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80140fc:	4b2f      	ldr	r3, [pc, #188]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80140fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014100:	2380      	movs	r3, #128	@ 0x80
 8014102:	055b      	lsls	r3, r3, #21
 8014104:	4013      	ands	r3, r2
 8014106:	d004      	beq.n	8014112 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8014108:	f7ff fa12 	bl	8013530 <HAL_PWREx_GetVoltageRange>
 801410c:	0003      	movs	r3, r0
 801410e:	617b      	str	r3, [r7, #20]
 8014110:	e017      	b.n	8014142 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8014112:	4b2a      	ldr	r3, [pc, #168]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8014114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014116:	4b29      	ldr	r3, [pc, #164]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8014118:	2180      	movs	r1, #128	@ 0x80
 801411a:	0549      	lsls	r1, r1, #21
 801411c:	430a      	orrs	r2, r1
 801411e:	659a      	str	r2, [r3, #88]	@ 0x58
 8014120:	4b26      	ldr	r3, [pc, #152]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8014122:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014124:	2380      	movs	r3, #128	@ 0x80
 8014126:	055b      	lsls	r3, r3, #21
 8014128:	4013      	ands	r3, r2
 801412a:	60fb      	str	r3, [r7, #12]
 801412c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801412e:	f7ff f9ff 	bl	8013530 <HAL_PWREx_GetVoltageRange>
 8014132:	0003      	movs	r3, r0
 8014134:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8014136:	4b21      	ldr	r3, [pc, #132]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8014138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801413a:	4b20      	ldr	r3, [pc, #128]	@ (80141bc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801413c:	4920      	ldr	r1, [pc, #128]	@ (80141c0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 801413e:	400a      	ands	r2, r1
 8014140:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014142:	697a      	ldr	r2, [r7, #20]
 8014144:	2380      	movs	r3, #128	@ 0x80
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	429a      	cmp	r2, r3
 801414a:	d111      	bne.n	8014170 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2b80      	cmp	r3, #128	@ 0x80
 8014150:	d91c      	bls.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2bb0      	cmp	r3, #176	@ 0xb0
 8014156:	d902      	bls.n	801415e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8014158:	2302      	movs	r3, #2
 801415a:	613b      	str	r3, [r7, #16]
 801415c:	e016      	b.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b90      	cmp	r3, #144	@ 0x90
 8014162:	d902      	bls.n	801416a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014164:	2301      	movs	r3, #1
 8014166:	613b      	str	r3, [r7, #16]
 8014168:	e010      	b.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 801416a:	2300      	movs	r3, #0
 801416c:	613b      	str	r3, [r7, #16]
 801416e:	e00d      	b.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2b7f      	cmp	r3, #127	@ 0x7f
 8014174:	d902      	bls.n	801417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8014176:	2302      	movs	r3, #2
 8014178:	613b      	str	r3, [r7, #16]
 801417a:	e007      	b.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b70      	cmp	r3, #112	@ 0x70
 8014180:	d102      	bne.n	8014188 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8014182:	2301      	movs	r3, #1
 8014184:	613b      	str	r3, [r7, #16]
 8014186:	e001      	b.n	801418c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8014188:	2300      	movs	r3, #0
 801418a:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801418c:	4b0d      	ldr	r3, [pc, #52]	@ (80141c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2207      	movs	r2, #7
 8014192:	4393      	bics	r3, r2
 8014194:	0019      	movs	r1, r3
 8014196:	4b0b      	ldr	r3, [pc, #44]	@ (80141c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8014198:	693a      	ldr	r2, [r7, #16]
 801419a:	430a      	orrs	r2, r1
 801419c:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801419e:	4b09      	ldr	r3, [pc, #36]	@ (80141c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2207      	movs	r2, #7
 80141a4:	4013      	ands	r3, r2
 80141a6:	693a      	ldr	r2, [r7, #16]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d001      	beq.n	80141b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80141ac:	2301      	movs	r3, #1
 80141ae:	e000      	b.n	80141b2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80141b0:	2300      	movs	r3, #0
}
 80141b2:	0018      	movs	r0, r3
 80141b4:	46bd      	mov	sp, r7
 80141b6:	b006      	add	sp, #24
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	46c0      	nop			@ (mov r8, r8)
 80141bc:	40021000 	.word	0x40021000
 80141c0:	efffffff 	.word	0xefffffff
 80141c4:	40022000 	.word	0x40022000

080141c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b086      	sub	sp, #24
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80141d0:	2313      	movs	r3, #19
 80141d2:	18fb      	adds	r3, r7, r3
 80141d4:	2200      	movs	r2, #0
 80141d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80141d8:	2312      	movs	r3, #18
 80141da:	18fb      	adds	r3, r7, r3
 80141dc:	2200      	movs	r2, #0
 80141de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681a      	ldr	r2, [r3, #0]
 80141e4:	2380      	movs	r3, #128	@ 0x80
 80141e6:	021b      	lsls	r3, r3, #8
 80141e8:	4013      	ands	r3, r2
 80141ea:	d100      	bne.n	80141ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80141ec:	e0b7      	b.n	801435e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80141ee:	2011      	movs	r0, #17
 80141f0:	183b      	adds	r3, r7, r0
 80141f2:	2200      	movs	r2, #0
 80141f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80141f6:	4b4c      	ldr	r3, [pc, #304]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80141f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80141fa:	2380      	movs	r3, #128	@ 0x80
 80141fc:	055b      	lsls	r3, r3, #21
 80141fe:	4013      	ands	r3, r2
 8014200:	d110      	bne.n	8014224 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014202:	4b49      	ldr	r3, [pc, #292]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014204:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014206:	4b48      	ldr	r3, [pc, #288]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014208:	2180      	movs	r1, #128	@ 0x80
 801420a:	0549      	lsls	r1, r1, #21
 801420c:	430a      	orrs	r2, r1
 801420e:	659a      	str	r2, [r3, #88]	@ 0x58
 8014210:	4b45      	ldr	r3, [pc, #276]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014212:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014214:	2380      	movs	r3, #128	@ 0x80
 8014216:	055b      	lsls	r3, r3, #21
 8014218:	4013      	ands	r3, r2
 801421a:	60bb      	str	r3, [r7, #8]
 801421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801421e:	183b      	adds	r3, r7, r0
 8014220:	2201      	movs	r2, #1
 8014222:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014224:	4b41      	ldr	r3, [pc, #260]	@ (801432c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	4b40      	ldr	r3, [pc, #256]	@ (801432c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801422a:	2180      	movs	r1, #128	@ 0x80
 801422c:	0049      	lsls	r1, r1, #1
 801422e:	430a      	orrs	r2, r1
 8014230:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014232:	f7fa faf3 	bl	800e81c <HAL_GetTick>
 8014236:	0003      	movs	r3, r0
 8014238:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801423a:	e00b      	b.n	8014254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801423c:	f7fa faee 	bl	800e81c <HAL_GetTick>
 8014240:	0002      	movs	r2, r0
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	1ad3      	subs	r3, r2, r3
 8014246:	2b02      	cmp	r3, #2
 8014248:	d904      	bls.n	8014254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 801424a:	2313      	movs	r3, #19
 801424c:	18fb      	adds	r3, r7, r3
 801424e:	2203      	movs	r2, #3
 8014250:	701a      	strb	r2, [r3, #0]
        break;
 8014252:	e005      	b.n	8014260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8014254:	4b35      	ldr	r3, [pc, #212]	@ (801432c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	2380      	movs	r3, #128	@ 0x80
 801425a:	005b      	lsls	r3, r3, #1
 801425c:	4013      	ands	r3, r2
 801425e:	d0ed      	beq.n	801423c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8014260:	2313      	movs	r3, #19
 8014262:	18fb      	adds	r3, r7, r3
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d168      	bne.n	801433c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801426a:	4a2f      	ldr	r2, [pc, #188]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801426c:	2390      	movs	r3, #144	@ 0x90
 801426e:	58d2      	ldr	r2, [r2, r3]
 8014270:	23c0      	movs	r3, #192	@ 0xc0
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4013      	ands	r3, r2
 8014276:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d01f      	beq.n	80142be <HAL_RCCEx_PeriphCLKConfig+0xf6>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014282:	697a      	ldr	r2, [r7, #20]
 8014284:	429a      	cmp	r2, r3
 8014286:	d01a      	beq.n	80142be <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014288:	4a27      	ldr	r2, [pc, #156]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801428a:	2390      	movs	r3, #144	@ 0x90
 801428c:	58d3      	ldr	r3, [r2, r3]
 801428e:	4a28      	ldr	r2, [pc, #160]	@ (8014330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8014290:	4013      	ands	r3, r2
 8014292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014294:	4a24      	ldr	r2, [pc, #144]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014296:	2390      	movs	r3, #144	@ 0x90
 8014298:	58d3      	ldr	r3, [r2, r3]
 801429a:	4923      	ldr	r1, [pc, #140]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801429c:	2280      	movs	r2, #128	@ 0x80
 801429e:	0252      	lsls	r2, r2, #9
 80142a0:	4313      	orrs	r3, r2
 80142a2:	2290      	movs	r2, #144	@ 0x90
 80142a4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80142a6:	4a20      	ldr	r2, [pc, #128]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80142a8:	2390      	movs	r3, #144	@ 0x90
 80142aa:	58d3      	ldr	r3, [r2, r3]
 80142ac:	491e      	ldr	r1, [pc, #120]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80142ae:	4a21      	ldr	r2, [pc, #132]	@ (8014334 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80142b0:	4013      	ands	r3, r2
 80142b2:	2290      	movs	r2, #144	@ 0x90
 80142b4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80142b6:	491c      	ldr	r1, [pc, #112]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80142b8:	2290      	movs	r2, #144	@ 0x90
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	2201      	movs	r2, #1
 80142c2:	4013      	ands	r3, r2
 80142c4:	d017      	beq.n	80142f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142c6:	f7fa faa9 	bl	800e81c <HAL_GetTick>
 80142ca:	0003      	movs	r3, r0
 80142cc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80142ce:	e00c      	b.n	80142ea <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80142d0:	f7fa faa4 	bl	800e81c <HAL_GetTick>
 80142d4:	0002      	movs	r2, r0
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	4a17      	ldr	r2, [pc, #92]	@ (8014338 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80142dc:	4293      	cmp	r3, r2
 80142de:	d904      	bls.n	80142ea <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80142e0:	2313      	movs	r3, #19
 80142e2:	18fb      	adds	r3, r7, r3
 80142e4:	2203      	movs	r2, #3
 80142e6:	701a      	strb	r2, [r3, #0]
            break;
 80142e8:	e005      	b.n	80142f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80142ea:	4a0f      	ldr	r2, [pc, #60]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80142ec:	2390      	movs	r3, #144	@ 0x90
 80142ee:	58d3      	ldr	r3, [r2, r3]
 80142f0:	2202      	movs	r2, #2
 80142f2:	4013      	ands	r3, r2
 80142f4:	d0ec      	beq.n	80142d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80142f6:	2313      	movs	r3, #19
 80142f8:	18fb      	adds	r3, r7, r3
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10b      	bne.n	8014318 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014300:	4a09      	ldr	r2, [pc, #36]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014302:	2390      	movs	r3, #144	@ 0x90
 8014304:	58d3      	ldr	r3, [r2, r3]
 8014306:	4a0a      	ldr	r2, [pc, #40]	@ (8014330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8014308:	401a      	ands	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801430e:	4906      	ldr	r1, [pc, #24]	@ (8014328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8014310:	4313      	orrs	r3, r2
 8014312:	2290      	movs	r2, #144	@ 0x90
 8014314:	508b      	str	r3, [r1, r2]
 8014316:	e017      	b.n	8014348 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014318:	2312      	movs	r3, #18
 801431a:	18fb      	adds	r3, r7, r3
 801431c:	2213      	movs	r2, #19
 801431e:	18ba      	adds	r2, r7, r2
 8014320:	7812      	ldrb	r2, [r2, #0]
 8014322:	701a      	strb	r2, [r3, #0]
 8014324:	e010      	b.n	8014348 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8014326:	46c0      	nop			@ (mov r8, r8)
 8014328:	40021000 	.word	0x40021000
 801432c:	40007000 	.word	0x40007000
 8014330:	fffffcff 	.word	0xfffffcff
 8014334:	fffeffff 	.word	0xfffeffff
 8014338:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801433c:	2312      	movs	r3, #18
 801433e:	18fb      	adds	r3, r7, r3
 8014340:	2213      	movs	r2, #19
 8014342:	18ba      	adds	r2, r7, r2
 8014344:	7812      	ldrb	r2, [r2, #0]
 8014346:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8014348:	2311      	movs	r3, #17
 801434a:	18fb      	adds	r3, r7, r3
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d105      	bne.n	801435e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014352:	4ba4      	ldr	r3, [pc, #656]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014356:	4ba3      	ldr	r3, [pc, #652]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014358:	49a3      	ldr	r1, [pc, #652]	@ (80145e8 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 801435a:	400a      	ands	r2, r1
 801435c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2201      	movs	r2, #1
 8014364:	4013      	ands	r3, r2
 8014366:	d00b      	beq.n	8014380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014368:	4a9e      	ldr	r2, [pc, #632]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801436a:	2388      	movs	r3, #136	@ 0x88
 801436c:	58d3      	ldr	r3, [r2, r3]
 801436e:	2203      	movs	r2, #3
 8014370:	4393      	bics	r3, r2
 8014372:	001a      	movs	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	499a      	ldr	r1, [pc, #616]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801437a:	4313      	orrs	r3, r2
 801437c:	2288      	movs	r2, #136	@ 0x88
 801437e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2202      	movs	r2, #2
 8014386:	4013      	ands	r3, r2
 8014388:	d00b      	beq.n	80143a2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801438a:	4a96      	ldr	r2, [pc, #600]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801438c:	2388      	movs	r3, #136	@ 0x88
 801438e:	58d3      	ldr	r3, [r2, r3]
 8014390:	220c      	movs	r2, #12
 8014392:	4393      	bics	r3, r2
 8014394:	001a      	movs	r2, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	689b      	ldr	r3, [r3, #8]
 801439a:	4992      	ldr	r1, [pc, #584]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801439c:	4313      	orrs	r3, r2
 801439e:	2288      	movs	r2, #136	@ 0x88
 80143a0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2210      	movs	r2, #16
 80143a8:	4013      	ands	r3, r2
 80143aa:	d00a      	beq.n	80143c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80143ac:	4a8d      	ldr	r2, [pc, #564]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143ae:	2388      	movs	r3, #136	@ 0x88
 80143b0:	58d3      	ldr	r3, [r2, r3]
 80143b2:	4a8e      	ldr	r2, [pc, #568]	@ (80145ec <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80143b4:	401a      	ands	r2, r3
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	695b      	ldr	r3, [r3, #20]
 80143ba:	498a      	ldr	r1, [pc, #552]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143bc:	4313      	orrs	r3, r2
 80143be:	2288      	movs	r2, #136	@ 0x88
 80143c0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2208      	movs	r2, #8
 80143c8:	4013      	ands	r3, r2
 80143ca:	d00a      	beq.n	80143e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80143cc:	4a85      	ldr	r2, [pc, #532]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143ce:	2388      	movs	r3, #136	@ 0x88
 80143d0:	58d3      	ldr	r3, [r2, r3]
 80143d2:	4a87      	ldr	r2, [pc, #540]	@ (80145f0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80143d4:	401a      	ands	r2, r3
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	4982      	ldr	r1, [pc, #520]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143dc:	4313      	orrs	r3, r2
 80143de:	2288      	movs	r2, #136	@ 0x88
 80143e0:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2204      	movs	r2, #4
 80143e8:	4013      	ands	r3, r2
 80143ea:	d00b      	beq.n	8014404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 80143ec:	4a7d      	ldr	r2, [pc, #500]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143ee:	2388      	movs	r3, #136	@ 0x88
 80143f0:	58d3      	ldr	r3, [r2, r3]
 80143f2:	22c0      	movs	r2, #192	@ 0xc0
 80143f4:	4393      	bics	r3, r2
 80143f6:	001a      	movs	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	4979      	ldr	r1, [pc, #484]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80143fe:	4313      	orrs	r3, r2
 8014400:	2288      	movs	r2, #136	@ 0x88
 8014402:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2220      	movs	r2, #32
 801440a:	4013      	ands	r3, r2
 801440c:	d00a      	beq.n	8014424 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801440e:	4a75      	ldr	r2, [pc, #468]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014410:	2388      	movs	r3, #136	@ 0x88
 8014412:	58d3      	ldr	r3, [r2, r3]
 8014414:	4a77      	ldr	r2, [pc, #476]	@ (80145f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8014416:	401a      	ands	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	699b      	ldr	r3, [r3, #24]
 801441c:	4971      	ldr	r1, [pc, #452]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801441e:	4313      	orrs	r3, r2
 8014420:	2288      	movs	r2, #136	@ 0x88
 8014422:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2240      	movs	r2, #64	@ 0x40
 801442a:	4013      	ands	r3, r2
 801442c:	d00a      	beq.n	8014444 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801442e:	4a6d      	ldr	r2, [pc, #436]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014430:	2388      	movs	r3, #136	@ 0x88
 8014432:	58d3      	ldr	r3, [r2, r3]
 8014434:	4a70      	ldr	r2, [pc, #448]	@ (80145f8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8014436:	401a      	ands	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	4969      	ldr	r1, [pc, #420]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801443e:	4313      	orrs	r3, r2
 8014440:	2288      	movs	r2, #136	@ 0x88
 8014442:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2280      	movs	r2, #128	@ 0x80
 801444a:	4013      	ands	r3, r2
 801444c:	d00a      	beq.n	8014464 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801444e:	4a65      	ldr	r2, [pc, #404]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014450:	2388      	movs	r3, #136	@ 0x88
 8014452:	58d3      	ldr	r3, [r2, r3]
 8014454:	4a69      	ldr	r2, [pc, #420]	@ (80145fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8014456:	401a      	ands	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6a1b      	ldr	r3, [r3, #32]
 801445c:	4961      	ldr	r1, [pc, #388]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801445e:	4313      	orrs	r3, r2
 8014460:	2288      	movs	r2, #136	@ 0x88
 8014462:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	2380      	movs	r3, #128	@ 0x80
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	4013      	ands	r3, r2
 801446e:	d00a      	beq.n	8014486 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014470:	4a5c      	ldr	r2, [pc, #368]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014472:	2388      	movs	r3, #136	@ 0x88
 8014474:	58d3      	ldr	r3, [r2, r3]
 8014476:	4a62      	ldr	r2, [pc, #392]	@ (8014600 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8014478:	401a      	ands	r2, r3
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801447e:	4959      	ldr	r1, [pc, #356]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014480:	4313      	orrs	r3, r2
 8014482:	2288      	movs	r2, #136	@ 0x88
 8014484:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	2380      	movs	r3, #128	@ 0x80
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	4013      	ands	r3, r2
 8014490:	d00a      	beq.n	80144a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8014492:	4a54      	ldr	r2, [pc, #336]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014494:	2388      	movs	r3, #136	@ 0x88
 8014496:	58d3      	ldr	r3, [r2, r3]
 8014498:	4a5a      	ldr	r2, [pc, #360]	@ (8014604 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 801449a:	401a      	ands	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144a0:	4950      	ldr	r1, [pc, #320]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144a2:	4313      	orrs	r3, r2
 80144a4:	2288      	movs	r2, #136	@ 0x88
 80144a6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	2380      	movs	r3, #128	@ 0x80
 80144ae:	01db      	lsls	r3, r3, #7
 80144b0:	4013      	ands	r3, r2
 80144b2:	d017      	beq.n	80144e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80144b8:	2380      	movs	r3, #128	@ 0x80
 80144ba:	055b      	lsls	r3, r3, #21
 80144bc:	429a      	cmp	r2, r3
 80144be:	d106      	bne.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80144c0:	4b48      	ldr	r3, [pc, #288]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144c2:	68da      	ldr	r2, [r3, #12]
 80144c4:	4b47      	ldr	r3, [pc, #284]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144c6:	2180      	movs	r1, #128	@ 0x80
 80144c8:	0249      	lsls	r1, r1, #9
 80144ca:	430a      	orrs	r2, r1
 80144cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80144ce:	4a45      	ldr	r2, [pc, #276]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144d0:	2388      	movs	r3, #136	@ 0x88
 80144d2:	58d3      	ldr	r3, [r2, r3]
 80144d4:	4a4c      	ldr	r2, [pc, #304]	@ (8014608 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80144d6:	401a      	ands	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144dc:	4941      	ldr	r1, [pc, #260]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144de:	4313      	orrs	r3, r2
 80144e0:	2288      	movs	r2, #136	@ 0x88
 80144e2:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	2380      	movs	r3, #128	@ 0x80
 80144ea:	015b      	lsls	r3, r3, #5
 80144ec:	4013      	ands	r3, r2
 80144ee:	d017      	beq.n	8014520 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80144f4:	2380      	movs	r3, #128	@ 0x80
 80144f6:	051b      	lsls	r3, r3, #20
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d106      	bne.n	801450a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80144fc:	4b39      	ldr	r3, [pc, #228]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80144fe:	68da      	ldr	r2, [r3, #12]
 8014500:	4b38      	ldr	r3, [pc, #224]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014502:	2180      	movs	r1, #128	@ 0x80
 8014504:	0449      	lsls	r1, r1, #17
 8014506:	430a      	orrs	r2, r1
 8014508:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801450a:	4a36      	ldr	r2, [pc, #216]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801450c:	2388      	movs	r3, #136	@ 0x88
 801450e:	58d3      	ldr	r3, [r2, r3]
 8014510:	4a3e      	ldr	r2, [pc, #248]	@ (801460c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8014512:	401a      	ands	r2, r3
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014518:	4932      	ldr	r1, [pc, #200]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801451a:	4313      	orrs	r3, r2
 801451c:	2288      	movs	r2, #136	@ 0x88
 801451e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	2380      	movs	r3, #128	@ 0x80
 8014526:	019b      	lsls	r3, r3, #6
 8014528:	4013      	ands	r3, r2
 801452a:	d017      	beq.n	801455c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014530:	2380      	movs	r3, #128	@ 0x80
 8014532:	051b      	lsls	r3, r3, #20
 8014534:	429a      	cmp	r2, r3
 8014536:	d106      	bne.n	8014546 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8014538:	4b2a      	ldr	r3, [pc, #168]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801453a:	68da      	ldr	r2, [r3, #12]
 801453c:	4b29      	ldr	r3, [pc, #164]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801453e:	2180      	movs	r1, #128	@ 0x80
 8014540:	0449      	lsls	r1, r1, #17
 8014542:	430a      	orrs	r2, r1
 8014544:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014546:	4a27      	ldr	r2, [pc, #156]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014548:	2388      	movs	r3, #136	@ 0x88
 801454a:	58d3      	ldr	r3, [r2, r3]
 801454c:	4a2f      	ldr	r2, [pc, #188]	@ (801460c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 801454e:	401a      	ands	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014554:	4923      	ldr	r1, [pc, #140]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014556:	4313      	orrs	r3, r2
 8014558:	2288      	movs	r2, #136	@ 0x88
 801455a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	2380      	movs	r3, #128	@ 0x80
 8014562:	00db      	lsls	r3, r3, #3
 8014564:	4013      	ands	r3, r2
 8014566:	d017      	beq.n	8014598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801456c:	2380      	movs	r3, #128	@ 0x80
 801456e:	045b      	lsls	r3, r3, #17
 8014570:	429a      	cmp	r2, r3
 8014572:	d106      	bne.n	8014582 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8014574:	4b1b      	ldr	r3, [pc, #108]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014576:	68da      	ldr	r2, [r3, #12]
 8014578:	4b1a      	ldr	r3, [pc, #104]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801457a:	2180      	movs	r1, #128	@ 0x80
 801457c:	0449      	lsls	r1, r1, #17
 801457e:	430a      	orrs	r2, r1
 8014580:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8014582:	4a18      	ldr	r2, [pc, #96]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014584:	2388      	movs	r3, #136	@ 0x88
 8014586:	58d3      	ldr	r3, [r2, r3]
 8014588:	4a21      	ldr	r2, [pc, #132]	@ (8014610 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 801458a:	401a      	ands	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014590:	4914      	ldr	r1, [pc, #80]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8014592:	4313      	orrs	r3, r2
 8014594:	2288      	movs	r2, #136	@ 0x88
 8014596:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	2380      	movs	r3, #128	@ 0x80
 801459e:	011b      	lsls	r3, r3, #4
 80145a0:	4013      	ands	r3, r2
 80145a2:	d017      	beq.n	80145d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80145a8:	2380      	movs	r3, #128	@ 0x80
 80145aa:	049b      	lsls	r3, r3, #18
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d106      	bne.n	80145be <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80145b0:	4b0c      	ldr	r3, [pc, #48]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80145b2:	68da      	ldr	r2, [r3, #12]
 80145b4:	4b0b      	ldr	r3, [pc, #44]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80145b6:	2180      	movs	r1, #128	@ 0x80
 80145b8:	0449      	lsls	r1, r1, #17
 80145ba:	430a      	orrs	r2, r1
 80145bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80145be:	4a09      	ldr	r2, [pc, #36]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80145c0:	2388      	movs	r3, #136	@ 0x88
 80145c2:	58d3      	ldr	r3, [r2, r3]
 80145c4:	4a12      	ldr	r2, [pc, #72]	@ (8014610 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80145c6:	401a      	ands	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145cc:	4905      	ldr	r1, [pc, #20]	@ (80145e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80145ce:	4313      	orrs	r3, r2
 80145d0:	2288      	movs	r2, #136	@ 0x88
 80145d2:	508b      	str	r3, [r1, r2]

  }

  return status;
 80145d4:	2312      	movs	r3, #18
 80145d6:	18fb      	adds	r3, r7, r3
 80145d8:	781b      	ldrb	r3, [r3, #0]
}
 80145da:	0018      	movs	r0, r3
 80145dc:	46bd      	mov	sp, r7
 80145de:	b006      	add	sp, #24
 80145e0:	bd80      	pop	{r7, pc}
 80145e2:	46c0      	nop			@ (mov r8, r8)
 80145e4:	40021000 	.word	0x40021000
 80145e8:	efffffff 	.word	0xefffffff
 80145ec:	fffff3ff 	.word	0xfffff3ff
 80145f0:	fffffcff 	.word	0xfffffcff
 80145f4:	ffffcfff 	.word	0xffffcfff
 80145f8:	fffcffff 	.word	0xfffcffff
 80145fc:	fff3ffff 	.word	0xfff3ffff
 8014600:	ffcfffff 	.word	0xffcfffff
 8014604:	ff3fffff 	.word	0xff3fffff
 8014608:	cfffffff 	.word	0xcfffffff
 801460c:	f3ffffff 	.word	0xf3ffffff
 8014610:	feffffff 	.word	0xfeffffff

08014614 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8014614:	b590      	push	{r4, r7, lr}
 8014616:	b089      	sub	sp, #36	@ 0x24
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 801461c:	2300      	movs	r3, #0
 801461e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	2380      	movs	r3, #128	@ 0x80
 8014624:	021b      	lsls	r3, r3, #8
 8014626:	429a      	cmp	r2, r3
 8014628:	d154      	bne.n	80146d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801462a:	4ad5      	ldr	r2, [pc, #852]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801462c:	2390      	movs	r3, #144	@ 0x90
 801462e:	58d2      	ldr	r2, [r2, r3]
 8014630:	23c0      	movs	r3, #192	@ 0xc0
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	4013      	ands	r3, r2
 8014636:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8014638:	697a      	ldr	r2, [r7, #20]
 801463a:	23c0      	movs	r3, #192	@ 0xc0
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	429a      	cmp	r2, r3
 8014640:	d039      	beq.n	80146b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8014642:	697a      	ldr	r2, [r7, #20]
 8014644:	23c0      	movs	r3, #192	@ 0xc0
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	429a      	cmp	r2, r3
 801464a:	d901      	bls.n	8014650 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 801464c:	f000 fd1a 	bl	8015084 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8014650:	697a      	ldr	r2, [r7, #20]
 8014652:	2380      	movs	r3, #128	@ 0x80
 8014654:	005b      	lsls	r3, r3, #1
 8014656:	429a      	cmp	r2, r3
 8014658:	d006      	beq.n	8014668 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 801465a:	697a      	ldr	r2, [r7, #20]
 801465c:	2380      	movs	r3, #128	@ 0x80
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	429a      	cmp	r2, r3
 8014662:	d00f      	beq.n	8014684 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8014664:	f000 fd0e 	bl	8015084 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014668:	4ac5      	ldr	r2, [pc, #788]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801466a:	2390      	movs	r3, #144	@ 0x90
 801466c:	58d3      	ldr	r3, [r2, r3]
 801466e:	2202      	movs	r2, #2
 8014670:	4013      	ands	r3, r2
 8014672:	2b02      	cmp	r3, #2
 8014674:	d001      	beq.n	801467a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8014676:	f000 fd07 	bl	8015088 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 801467a:	2380      	movs	r3, #128	@ 0x80
 801467c:	021b      	lsls	r3, r3, #8
 801467e:	61fb      	str	r3, [r7, #28]
        break;
 8014680:	f000 fd02 	bl	8015088 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8014684:	4abe      	ldr	r2, [pc, #760]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8014686:	2394      	movs	r3, #148	@ 0x94
 8014688:	58d3      	ldr	r3, [r2, r3]
 801468a:	2202      	movs	r2, #2
 801468c:	4013      	ands	r3, r2
 801468e:	2b02      	cmp	r3, #2
 8014690:	d001      	beq.n	8014696 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8014692:	f000 fcfb 	bl	801508c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8014696:	4aba      	ldr	r2, [pc, #744]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8014698:	2394      	movs	r3, #148	@ 0x94
 801469a:	58d3      	ldr	r3, [r2, r3]
 801469c:	2204      	movs	r2, #4
 801469e:	4013      	ands	r3, r2
 80146a0:	2b04      	cmp	r3, #4
 80146a2:	d103      	bne.n	80146ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 80146a4:	23fa      	movs	r3, #250	@ 0xfa
 80146a6:	61fb      	str	r3, [r7, #28]
        break;
 80146a8:	f000 fcf0 	bl	801508c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 80146ac:	23fa      	movs	r3, #250	@ 0xfa
 80146ae:	01db      	lsls	r3, r3, #7
 80146b0:	61fb      	str	r3, [r7, #28]
        break;
 80146b2:	f000 fceb 	bl	801508c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80146b6:	4bb2      	ldr	r3, [pc, #712]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	2380      	movs	r3, #128	@ 0x80
 80146bc:	029b      	lsls	r3, r3, #10
 80146be:	401a      	ands	r2, r3
 80146c0:	2380      	movs	r3, #128	@ 0x80
 80146c2:	029b      	lsls	r3, r3, #10
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d001      	beq.n	80146cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80146c8:	f000 fce2 	bl	8015090 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 80146cc:	4bad      	ldr	r3, [pc, #692]	@ (8014984 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80146ce:	61fb      	str	r3, [r7, #28]
        break;
 80146d0:	f000 fcde 	bl	8015090 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80146d4:	687a      	ldr	r2, [r7, #4]
 80146d6:	2380      	movs	r3, #128	@ 0x80
 80146d8:	029b      	lsls	r3, r3, #10
 80146da:	429a      	cmp	r2, r3
 80146dc:	d100      	bne.n	80146e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80146de:	e11a      	b.n	8014916 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	2380      	movs	r3, #128	@ 0x80
 80146e4:	029b      	lsls	r3, r3, #10
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d901      	bls.n	80146ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80146ea:	f000 fcd3 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	2380      	movs	r3, #128	@ 0x80
 80146f2:	025b      	lsls	r3, r3, #9
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d100      	bne.n	80146fa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80146f8:	e10d      	b.n	8014916 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	2380      	movs	r3, #128	@ 0x80
 80146fe:	025b      	lsls	r3, r3, #9
 8014700:	429a      	cmp	r2, r3
 8014702:	d901      	bls.n	8014708 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8014704:	f000 fcc6 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	2380      	movs	r3, #128	@ 0x80
 801470c:	01db      	lsls	r3, r3, #7
 801470e:	429a      	cmp	r2, r3
 8014710:	d100      	bne.n	8014714 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8014712:	e1eb      	b.n	8014aec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	2380      	movs	r3, #128	@ 0x80
 8014718:	01db      	lsls	r3, r3, #7
 801471a:	429a      	cmp	r2, r3
 801471c:	d901      	bls.n	8014722 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 801471e:	f000 fcb9 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	2380      	movs	r3, #128	@ 0x80
 8014726:	019b      	lsls	r3, r3, #6
 8014728:	429a      	cmp	r2, r3
 801472a:	d101      	bne.n	8014730 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 801472c:	f000 fc50 	bl	8014fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	2380      	movs	r3, #128	@ 0x80
 8014734:	019b      	lsls	r3, r3, #6
 8014736:	429a      	cmp	r2, r3
 8014738:	d901      	bls.n	801473e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 801473a:	f000 fcab 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	2380      	movs	r3, #128	@ 0x80
 8014742:	015b      	lsls	r3, r3, #5
 8014744:	429a      	cmp	r2, r3
 8014746:	d101      	bne.n	801474c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8014748:	f000 fbe2 	bl	8014f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	2380      	movs	r3, #128	@ 0x80
 8014750:	015b      	lsls	r3, r3, #5
 8014752:	429a      	cmp	r2, r3
 8014754:	d901      	bls.n	801475a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8014756:	f000 fc9d 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	2380      	movs	r3, #128	@ 0x80
 801475e:	011b      	lsls	r3, r3, #4
 8014760:	429a      	cmp	r2, r3
 8014762:	d101      	bne.n	8014768 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8014764:	f000 fba9 	bl	8014eba <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	2380      	movs	r3, #128	@ 0x80
 801476c:	011b      	lsls	r3, r3, #4
 801476e:	429a      	cmp	r2, r3
 8014770:	d901      	bls.n	8014776 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8014772:	f000 fc8f 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	2380      	movs	r3, #128	@ 0x80
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	429a      	cmp	r2, r3
 801477e:	d101      	bne.n	8014784 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8014780:	f000 fb70 	bl	8014e64 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	2380      	movs	r3, #128	@ 0x80
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	429a      	cmp	r2, r3
 801478c:	d901      	bls.n	8014792 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 801478e:	f000 fc81 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	2380      	movs	r3, #128	@ 0x80
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	429a      	cmp	r2, r3
 801479a:	d100      	bne.n	801479e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 801479c:	e305      	b.n	8014daa <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	2380      	movs	r3, #128	@ 0x80
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d901      	bls.n	80147ac <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80147a8:	f000 fc74 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	2380      	movs	r3, #128	@ 0x80
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d100      	bne.n	80147b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80147b6:	e29b      	b.n	8014cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	2380      	movs	r3, #128	@ 0x80
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	429a      	cmp	r2, r3
 80147c0:	d901      	bls.n	80147c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80147c2:	f000 fc67 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b80      	cmp	r3, #128	@ 0x80
 80147ca:	d100      	bne.n	80147ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80147cc:	e22f      	b.n	8014c2e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2b80      	cmp	r3, #128	@ 0x80
 80147d2:	d901      	bls.n	80147d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80147d4:	f000 fc5e 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2b20      	cmp	r3, #32
 80147dc:	d80f      	bhi.n	80147fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80147e4:	f000 fc56 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2b20      	cmp	r3, #32
 80147ec:	d901      	bls.n	80147f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80147ee:	f000 fc51 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	009a      	lsls	r2, r3, #2
 80147f6:	4b64      	ldr	r3, [pc, #400]	@ (8014988 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80147f8:	18d3      	adds	r3, r2, r3
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	469f      	mov	pc, r3
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b40      	cmp	r3, #64	@ 0x40
 8014802:	d100      	bne.n	8014806 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8014804:	e1df      	b.n	8014bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8014806:	f000 fc45 	bl	8015094 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 801480a:	4a5d      	ldr	r2, [pc, #372]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801480c:	2388      	movs	r3, #136	@ 0x88
 801480e:	58d3      	ldr	r3, [r2, r3]
 8014810:	2203      	movs	r2, #3
 8014812:	4013      	ands	r3, r2
 8014814:	617b      	str	r3, [r7, #20]
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	2b03      	cmp	r3, #3
 801481a:	d025      	beq.n	8014868 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	2b03      	cmp	r3, #3
 8014820:	d82d      	bhi.n	801487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	2b02      	cmp	r3, #2
 8014826:	d013      	beq.n	8014850 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	2b02      	cmp	r3, #2
 801482c:	d827      	bhi.n	801487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d003      	beq.n	801483c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	2b01      	cmp	r3, #1
 8014838:	d005      	beq.n	8014846 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 801483a:	e020      	b.n	801487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 801483c:	f7ff fc40 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014840:	0003      	movs	r3, r0
 8014842:	61fb      	str	r3, [r7, #28]
            break;
 8014844:	e022      	b.n	801488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8014846:	f7ff fb95 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 801484a:	0003      	movs	r3, r0
 801484c:	61fb      	str	r3, [r7, #28]
            break;
 801484e:	e01d      	b.n	801488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014850:	4b4b      	ldr	r3, [pc, #300]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	2380      	movs	r3, #128	@ 0x80
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	401a      	ands	r2, r3
 801485a:	2380      	movs	r3, #128	@ 0x80
 801485c:	00db      	lsls	r3, r3, #3
 801485e:	429a      	cmp	r2, r3
 8014860:	d110      	bne.n	8014884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8014862:	4b4a      	ldr	r3, [pc, #296]	@ (801498c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8014864:	61fb      	str	r3, [r7, #28]
            break;
 8014866:	e00d      	b.n	8014884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014868:	4a45      	ldr	r2, [pc, #276]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801486a:	2390      	movs	r3, #144	@ 0x90
 801486c:	58d3      	ldr	r3, [r2, r3]
 801486e:	2202      	movs	r2, #2
 8014870:	4013      	ands	r3, r2
 8014872:	2b02      	cmp	r3, #2
 8014874:	d109      	bne.n	801488a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8014876:	2380      	movs	r3, #128	@ 0x80
 8014878:	021b      	lsls	r3, r3, #8
 801487a:	61fb      	str	r3, [r7, #28]
            break;
 801487c:	e005      	b.n	801488a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 801487e:	46c0      	nop			@ (mov r8, r8)
 8014880:	f000 fc09 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014884:	46c0      	nop			@ (mov r8, r8)
 8014886:	f000 fc06 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801488a:	46c0      	nop			@ (mov r8, r8)
        break;
 801488c:	f000 fc03 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8014890:	4a3b      	ldr	r2, [pc, #236]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8014892:	2388      	movs	r3, #136	@ 0x88
 8014894:	58d3      	ldr	r3, [r2, r3]
 8014896:	220c      	movs	r2, #12
 8014898:	4013      	ands	r3, r2
 801489a:	617b      	str	r3, [r7, #20]
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	2b0c      	cmp	r3, #12
 80148a0:	d025      	beq.n	80148ee <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	2b0c      	cmp	r3, #12
 80148a6:	d82d      	bhi.n	8014904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	2b08      	cmp	r3, #8
 80148ac:	d013      	beq.n	80148d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2b08      	cmp	r3, #8
 80148b2:	d827      	bhi.n	8014904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d003      	beq.n	80148c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	2b04      	cmp	r3, #4
 80148be:	d005      	beq.n	80148cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80148c0:	e020      	b.n	8014904 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80148c2:	f7ff fbfd 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 80148c6:	0003      	movs	r3, r0
 80148c8:	61fb      	str	r3, [r7, #28]
            break;
 80148ca:	e022      	b.n	8014912 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80148cc:	f7ff fb52 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 80148d0:	0003      	movs	r3, r0
 80148d2:	61fb      	str	r3, [r7, #28]
            break;
 80148d4:	e01d      	b.n	8014912 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80148d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	2380      	movs	r3, #128	@ 0x80
 80148dc:	00db      	lsls	r3, r3, #3
 80148de:	401a      	ands	r2, r3
 80148e0:	2380      	movs	r3, #128	@ 0x80
 80148e2:	00db      	lsls	r3, r3, #3
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d110      	bne.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80148e8:	4b28      	ldr	r3, [pc, #160]	@ (801498c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80148ea:	61fb      	str	r3, [r7, #28]
            break;
 80148ec:	e00d      	b.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80148ee:	4a24      	ldr	r2, [pc, #144]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80148f0:	2390      	movs	r3, #144	@ 0x90
 80148f2:	58d3      	ldr	r3, [r2, r3]
 80148f4:	2202      	movs	r2, #2
 80148f6:	4013      	ands	r3, r2
 80148f8:	2b02      	cmp	r3, #2
 80148fa:	d109      	bne.n	8014910 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 80148fc:	2380      	movs	r3, #128	@ 0x80
 80148fe:	021b      	lsls	r3, r3, #8
 8014900:	61fb      	str	r3, [r7, #28]
            break;
 8014902:	e005      	b.n	8014910 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8014904:	46c0      	nop			@ (mov r8, r8)
 8014906:	f000 fbc6 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801490a:	46c0      	nop			@ (mov r8, r8)
 801490c:	f000 fbc3 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014910:	46c0      	nop			@ (mov r8, r8)
        break;
 8014912:	f000 fbc0 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8014916:	f7ff fbd3 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 801491a:	0003      	movs	r3, r0
 801491c:	61fb      	str	r3, [r7, #28]
        break;
 801491e:	f000 fbba 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8014922:	4a17      	ldr	r2, [pc, #92]	@ (8014980 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8014924:	2388      	movs	r3, #136	@ 0x88
 8014926:	58d2      	ldr	r2, [r2, r3]
 8014928:	23c0      	movs	r3, #192	@ 0xc0
 801492a:	011b      	lsls	r3, r3, #4
 801492c:	4013      	ands	r3, r2
 801492e:	617b      	str	r3, [r7, #20]
 8014930:	697a      	ldr	r2, [r7, #20]
 8014932:	23c0      	movs	r3, #192	@ 0xc0
 8014934:	011b      	lsls	r3, r3, #4
 8014936:	429a      	cmp	r2, r3
 8014938:	d036      	beq.n	80149a8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 801493a:	697a      	ldr	r2, [r7, #20]
 801493c:	23c0      	movs	r3, #192	@ 0xc0
 801493e:	011b      	lsls	r3, r3, #4
 8014940:	429a      	cmp	r2, r3
 8014942:	d83c      	bhi.n	80149be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8014944:	697a      	ldr	r2, [r7, #20]
 8014946:	2380      	movs	r3, #128	@ 0x80
 8014948:	011b      	lsls	r3, r3, #4
 801494a:	429a      	cmp	r2, r3
 801494c:	d020      	beq.n	8014990 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 801494e:	697a      	ldr	r2, [r7, #20]
 8014950:	2380      	movs	r3, #128	@ 0x80
 8014952:	011b      	lsls	r3, r3, #4
 8014954:	429a      	cmp	r2, r3
 8014956:	d832      	bhi.n	80149be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d005      	beq.n	801496a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 801495e:	697a      	ldr	r2, [r7, #20]
 8014960:	2380      	movs	r3, #128	@ 0x80
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	429a      	cmp	r2, r3
 8014966:	d005      	beq.n	8014974 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8014968:	e029      	b.n	80149be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 801496a:	f7ff fba9 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 801496e:	0003      	movs	r3, r0
 8014970:	61fb      	str	r3, [r7, #28]
            break;
 8014972:	e02b      	b.n	80149cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8014974:	f7ff fafe 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014978:	0003      	movs	r3, r0
 801497a:	61fb      	str	r3, [r7, #28]
            break;
 801497c:	e026      	b.n	80149cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 801497e:	46c0      	nop			@ (mov r8, r8)
 8014980:	40021000 	.word	0x40021000
 8014984:	0001e848 	.word	0x0001e848
 8014988:	08018ad4 	.word	0x08018ad4
 801498c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014990:	4bbb      	ldr	r3, [pc, #748]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	2380      	movs	r3, #128	@ 0x80
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	401a      	ands	r2, r3
 801499a:	2380      	movs	r3, #128	@ 0x80
 801499c:	00db      	lsls	r3, r3, #3
 801499e:	429a      	cmp	r2, r3
 80149a0:	d110      	bne.n	80149c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80149a2:	4bb8      	ldr	r3, [pc, #736]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80149a4:	61fb      	str	r3, [r7, #28]
            break;
 80149a6:	e00d      	b.n	80149c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80149a8:	4ab5      	ldr	r2, [pc, #724]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80149aa:	2390      	movs	r3, #144	@ 0x90
 80149ac:	58d3      	ldr	r3, [r2, r3]
 80149ae:	2202      	movs	r2, #2
 80149b0:	4013      	ands	r3, r2
 80149b2:	2b02      	cmp	r3, #2
 80149b4:	d109      	bne.n	80149ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80149b6:	2380      	movs	r3, #128	@ 0x80
 80149b8:	021b      	lsls	r3, r3, #8
 80149ba:	61fb      	str	r3, [r7, #28]
            break;
 80149bc:	e005      	b.n	80149ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80149be:	46c0      	nop			@ (mov r8, r8)
 80149c0:	f000 fb69 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80149c4:	46c0      	nop			@ (mov r8, r8)
 80149c6:	f000 fb66 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80149ca:	46c0      	nop			@ (mov r8, r8)
        break;
 80149cc:	f000 fb63 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80149d0:	4aab      	ldr	r2, [pc, #684]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80149d2:	2388      	movs	r3, #136	@ 0x88
 80149d4:	58d2      	ldr	r2, [r2, r3]
 80149d6:	23c0      	movs	r3, #192	@ 0xc0
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	4013      	ands	r3, r2
 80149dc:	617b      	str	r3, [r7, #20]
 80149de:	697a      	ldr	r2, [r7, #20]
 80149e0:	23c0      	movs	r3, #192	@ 0xc0
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d02d      	beq.n	8014a44 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80149e8:	697a      	ldr	r2, [r7, #20]
 80149ea:	23c0      	movs	r3, #192	@ 0xc0
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d833      	bhi.n	8014a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80149f2:	697a      	ldr	r2, [r7, #20]
 80149f4:	2380      	movs	r3, #128	@ 0x80
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d017      	beq.n	8014a2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80149fc:	697a      	ldr	r2, [r7, #20]
 80149fe:	2380      	movs	r3, #128	@ 0x80
 8014a00:	009b      	lsls	r3, r3, #2
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d829      	bhi.n	8014a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d005      	beq.n	8014a18 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8014a0c:	697a      	ldr	r2, [r7, #20]
 8014a0e:	2380      	movs	r3, #128	@ 0x80
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d005      	beq.n	8014a22 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8014a16:	e020      	b.n	8014a5a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014a18:	f7ff fb52 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014a1c:	0003      	movs	r3, r0
 8014a1e:	61fb      	str	r3, [r7, #28]
            break;
 8014a20:	e022      	b.n	8014a68 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8014a22:	f7ff faa7 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014a26:	0003      	movs	r3, r0
 8014a28:	61fb      	str	r3, [r7, #28]
            break;
 8014a2a:	e01d      	b.n	8014a68 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014a2c:	4b94      	ldr	r3, [pc, #592]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	2380      	movs	r3, #128	@ 0x80
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	401a      	ands	r2, r3
 8014a36:	2380      	movs	r3, #128	@ 0x80
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d110      	bne.n	8014a60 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8014a3e:	4b91      	ldr	r3, [pc, #580]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014a40:	61fb      	str	r3, [r7, #28]
            break;
 8014a42:	e00d      	b.n	8014a60 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014a44:	4a8e      	ldr	r2, [pc, #568]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014a46:	2390      	movs	r3, #144	@ 0x90
 8014a48:	58d3      	ldr	r3, [r2, r3]
 8014a4a:	2202      	movs	r2, #2
 8014a4c:	4013      	ands	r3, r2
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d109      	bne.n	8014a66 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8014a52:	2380      	movs	r3, #128	@ 0x80
 8014a54:	021b      	lsls	r3, r3, #8
 8014a56:	61fb      	str	r3, [r7, #28]
            break;
 8014a58:	e005      	b.n	8014a66 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8014a5a:	46c0      	nop			@ (mov r8, r8)
 8014a5c:	f000 fb1b 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014a60:	46c0      	nop			@ (mov r8, r8)
 8014a62:	f000 fb18 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014a66:	46c0      	nop			@ (mov r8, r8)
        break;
 8014a68:	f000 fb15 	bl	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8014a6c:	4a84      	ldr	r2, [pc, #528]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014a6e:	2388      	movs	r3, #136	@ 0x88
 8014a70:	58d3      	ldr	r3, [r2, r3]
 8014a72:	22c0      	movs	r2, #192	@ 0xc0
 8014a74:	4013      	ands	r3, r2
 8014a76:	617b      	str	r3, [r7, #20]
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8014a7c:	d025      	beq.n	8014aca <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2bc0      	cmp	r3, #192	@ 0xc0
 8014a82:	d82d      	bhi.n	8014ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	2b80      	cmp	r3, #128	@ 0x80
 8014a88:	d013      	beq.n	8014ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2b80      	cmp	r3, #128	@ 0x80
 8014a8e:	d827      	bhi.n	8014ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d003      	beq.n	8014a9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	2b40      	cmp	r3, #64	@ 0x40
 8014a9a:	d005      	beq.n	8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8014a9c:	e020      	b.n	8014ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014a9e:	f7ff fb0f 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014aa2:	0003      	movs	r3, r0
 8014aa4:	61fb      	str	r3, [r7, #28]
            break;
 8014aa6:	e020      	b.n	8014aea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8014aa8:	f7ff fa64 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014aac:	0003      	movs	r3, r0
 8014aae:	61fb      	str	r3, [r7, #28]
            break;
 8014ab0:	e01b      	b.n	8014aea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014ab2:	4b73      	ldr	r3, [pc, #460]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014ab4:	681a      	ldr	r2, [r3, #0]
 8014ab6:	2380      	movs	r3, #128	@ 0x80
 8014ab8:	00db      	lsls	r3, r3, #3
 8014aba:	401a      	ands	r2, r3
 8014abc:	2380      	movs	r3, #128	@ 0x80
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d10f      	bne.n	8014ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8014ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014ac6:	61fb      	str	r3, [r7, #28]
            break;
 8014ac8:	e00c      	b.n	8014ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014aca:	4a6d      	ldr	r2, [pc, #436]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014acc:	2390      	movs	r3, #144	@ 0x90
 8014ace:	58d3      	ldr	r3, [r2, r3]
 8014ad0:	2202      	movs	r2, #2
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	2b02      	cmp	r3, #2
 8014ad6:	d107      	bne.n	8014ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8014ad8:	2380      	movs	r3, #128	@ 0x80
 8014ada:	021b      	lsls	r3, r3, #8
 8014adc:	61fb      	str	r3, [r7, #28]
            break;
 8014ade:	e003      	b.n	8014ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8014ae0:	46c0      	nop			@ (mov r8, r8)
 8014ae2:	e2d8      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014ae4:	46c0      	nop			@ (mov r8, r8)
 8014ae6:	e2d6      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014ae8:	46c0      	nop			@ (mov r8, r8)
        break;
 8014aea:	e2d4      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8014aec:	4a64      	ldr	r2, [pc, #400]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014aee:	2388      	movs	r3, #136	@ 0x88
 8014af0:	58d2      	ldr	r2, [r2, r3]
 8014af2:	23c0      	movs	r3, #192	@ 0xc0
 8014af4:	059b      	lsls	r3, r3, #22
 8014af6:	4013      	ands	r3, r2
 8014af8:	617b      	str	r3, [r7, #20]
 8014afa:	697a      	ldr	r2, [r7, #20]
 8014afc:	2380      	movs	r3, #128	@ 0x80
 8014afe:	059b      	lsls	r3, r3, #22
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d012      	beq.n	8014b2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8014b04:	697a      	ldr	r2, [r7, #20]
 8014b06:	2380      	movs	r3, #128	@ 0x80
 8014b08:	059b      	lsls	r3, r3, #22
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d825      	bhi.n	8014b5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d005      	beq.n	8014b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8014b14:	697a      	ldr	r2, [r7, #20]
 8014b16:	2380      	movs	r3, #128	@ 0x80
 8014b18:	055b      	lsls	r3, r3, #21
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d014      	beq.n	8014b48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8014b1e:	e01c      	b.n	8014b5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8014b20:	f7ff fa28 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014b24:	0003      	movs	r3, r0
 8014b26:	61fb      	str	r3, [r7, #28]
            break;
 8014b28:	e018      	b.n	8014b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014b2a:	4b55      	ldr	r3, [pc, #340]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	2380      	movs	r3, #128	@ 0x80
 8014b30:	00db      	lsls	r3, r3, #3
 8014b32:	401a      	ands	r2, r3
 8014b34:	2380      	movs	r3, #128	@ 0x80
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d102      	bne.n	8014b42 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8014b3c:	4b51      	ldr	r3, [pc, #324]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014b3e:	61fb      	str	r3, [r7, #28]
            break;
 8014b40:	e00c      	b.n	8014b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8014b42:	2300      	movs	r3, #0
 8014b44:	61fb      	str	r3, [r7, #28]
            break;
 8014b46:	e009      	b.n	8014b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014b48:	2408      	movs	r4, #8
 8014b4a:	193b      	adds	r3, r7, r4
 8014b4c:	0018      	movs	r0, r3
 8014b4e:	f000 faad 	bl	80150ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8014b52:	193b      	adds	r3, r7, r4
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	61fb      	str	r3, [r7, #28]
            break;
 8014b58:	e000      	b.n	8014b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8014b5a:	46c0      	nop			@ (mov r8, r8)
        break;
 8014b5c:	e29b      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8014b5e:	4a48      	ldr	r2, [pc, #288]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014b60:	2388      	movs	r3, #136	@ 0x88
 8014b62:	58d2      	ldr	r2, [r2, r3]
 8014b64:	23c0      	movs	r3, #192	@ 0xc0
 8014b66:	019b      	lsls	r3, r3, #6
 8014b68:	4013      	ands	r3, r2
 8014b6a:	617b      	str	r3, [r7, #20]
 8014b6c:	697a      	ldr	r2, [r7, #20]
 8014b6e:	2380      	movs	r3, #128	@ 0x80
 8014b70:	019b      	lsls	r3, r3, #6
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d017      	beq.n	8014ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8014b76:	697a      	ldr	r2, [r7, #20]
 8014b78:	2380      	movs	r3, #128	@ 0x80
 8014b7a:	019b      	lsls	r3, r3, #6
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d81e      	bhi.n	8014bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d005      	beq.n	8014b92 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8014b86:	697a      	ldr	r2, [r7, #20]
 8014b88:	2380      	movs	r3, #128	@ 0x80
 8014b8a:	015b      	lsls	r3, r3, #5
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d005      	beq.n	8014b9c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8014b90:	e015      	b.n	8014bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014b92:	f7ff fa95 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014b96:	0003      	movs	r3, r0
 8014b98:	61fb      	str	r3, [r7, #28]
            break;
 8014b9a:	e013      	b.n	8014bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8014b9c:	f7ff f9ea 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014ba0:	0003      	movs	r3, r0
 8014ba2:	61fb      	str	r3, [r7, #28]
            break;
 8014ba4:	e00e      	b.n	8014bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014ba6:	4b36      	ldr	r3, [pc, #216]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	2380      	movs	r3, #128	@ 0x80
 8014bac:	00db      	lsls	r3, r3, #3
 8014bae:	401a      	ands	r2, r3
 8014bb0:	2380      	movs	r3, #128	@ 0x80
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d104      	bne.n	8014bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8014bb8:	4b32      	ldr	r3, [pc, #200]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014bba:	61fb      	str	r3, [r7, #28]
            break;
 8014bbc:	e001      	b.n	8014bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8014bbe:	46c0      	nop			@ (mov r8, r8)
 8014bc0:	e269      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014bc2:	46c0      	nop			@ (mov r8, r8)
        break;
 8014bc4:	e267      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8014bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014bc8:	2388      	movs	r3, #136	@ 0x88
 8014bca:	58d2      	ldr	r2, [r2, r3]
 8014bcc:	23c0      	movs	r3, #192	@ 0xc0
 8014bce:	029b      	lsls	r3, r3, #10
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	617b      	str	r3, [r7, #20]
 8014bd4:	697a      	ldr	r2, [r7, #20]
 8014bd6:	2380      	movs	r3, #128	@ 0x80
 8014bd8:	029b      	lsls	r3, r3, #10
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d017      	beq.n	8014c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8014bde:	697a      	ldr	r2, [r7, #20]
 8014be0:	2380      	movs	r3, #128	@ 0x80
 8014be2:	029b      	lsls	r3, r3, #10
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d81e      	bhi.n	8014c26 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d005      	beq.n	8014bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8014bee:	697a      	ldr	r2, [r7, #20]
 8014bf0:	2380      	movs	r3, #128	@ 0x80
 8014bf2:	025b      	lsls	r3, r3, #9
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d005      	beq.n	8014c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8014bf8:	e015      	b.n	8014c26 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014bfa:	f7ff fa61 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014bfe:	0003      	movs	r3, r0
 8014c00:	61fb      	str	r3, [r7, #28]
            break;
 8014c02:	e013      	b.n	8014c2c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8014c04:	f7ff f9b6 	bl	8013f74 <HAL_RCC_GetSysClockFreq>
 8014c08:	0003      	movs	r3, r0
 8014c0a:	61fb      	str	r3, [r7, #28]
            break;
 8014c0c:	e00e      	b.n	8014c2c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	2380      	movs	r3, #128	@ 0x80
 8014c14:	00db      	lsls	r3, r3, #3
 8014c16:	401a      	ands	r2, r3
 8014c18:	2380      	movs	r3, #128	@ 0x80
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d104      	bne.n	8014c2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8014c20:	4b18      	ldr	r3, [pc, #96]	@ (8014c84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014c22:	61fb      	str	r3, [r7, #28]
            break;
 8014c24:	e001      	b.n	8014c2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8014c26:	46c0      	nop			@ (mov r8, r8)
 8014c28:	e235      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014c2a:	46c0      	nop			@ (mov r8, r8)
        break;
 8014c2c:	e233      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8014c2e:	4a14      	ldr	r2, [pc, #80]	@ (8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014c30:	2388      	movs	r3, #136	@ 0x88
 8014c32:	58d2      	ldr	r2, [r2, r3]
 8014c34:	23c0      	movs	r3, #192	@ 0xc0
 8014c36:	031b      	lsls	r3, r3, #12
 8014c38:	4013      	ands	r3, r2
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	697a      	ldr	r2, [r7, #20]
 8014c3e:	23c0      	movs	r3, #192	@ 0xc0
 8014c40:	031b      	lsls	r3, r3, #12
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d041      	beq.n	8014cca <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8014c46:	697a      	ldr	r2, [r7, #20]
 8014c48:	23c0      	movs	r3, #192	@ 0xc0
 8014c4a:	031b      	lsls	r3, r3, #12
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d847      	bhi.n	8014ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8014c50:	697a      	ldr	r2, [r7, #20]
 8014c52:	2380      	movs	r3, #128	@ 0x80
 8014c54:	031b      	lsls	r3, r3, #12
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d02b      	beq.n	8014cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8014c5a:	697a      	ldr	r2, [r7, #20]
 8014c5c:	2380      	movs	r3, #128	@ 0x80
 8014c5e:	031b      	lsls	r3, r3, #12
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d83d      	bhi.n	8014ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d005      	beq.n	8014c76 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8014c6a:	697a      	ldr	r2, [r7, #20]
 8014c6c:	2380      	movs	r3, #128	@ 0x80
 8014c6e:	02db      	lsls	r3, r3, #11
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d009      	beq.n	8014c88 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8014c74:	e034      	b.n	8014ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014c76:	f7ff fa23 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014c7a:	0003      	movs	r3, r0
 8014c7c:	61fb      	str	r3, [r7, #28]
            break;
 8014c7e:	e036      	b.n	8014cee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8014c80:	40021000 	.word	0x40021000
 8014c84:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8014c88:	4abd      	ldr	r2, [pc, #756]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014c8a:	2394      	movs	r3, #148	@ 0x94
 8014c8c:	58d3      	ldr	r3, [r2, r3]
 8014c8e:	2202      	movs	r2, #2
 8014c90:	4013      	ands	r3, r2
 8014c92:	2b02      	cmp	r3, #2
 8014c94:	d126      	bne.n	8014ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8014c96:	4aba      	ldr	r2, [pc, #744]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014c98:	2394      	movs	r3, #148	@ 0x94
 8014c9a:	58d3      	ldr	r3, [r2, r3]
 8014c9c:	2204      	movs	r2, #4
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	2b04      	cmp	r3, #4
 8014ca2:	d102      	bne.n	8014caa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8014ca4:	23fa      	movs	r3, #250	@ 0xfa
 8014ca6:	61fb      	str	r3, [r7, #28]
            break;
 8014ca8:	e01c      	b.n	8014ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8014caa:	23fa      	movs	r3, #250	@ 0xfa
 8014cac:	01db      	lsls	r3, r3, #7
 8014cae:	61fb      	str	r3, [r7, #28]
            break;
 8014cb0:	e018      	b.n	8014ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	2380      	movs	r3, #128	@ 0x80
 8014cb8:	00db      	lsls	r3, r3, #3
 8014cba:	401a      	ands	r2, r3
 8014cbc:	2380      	movs	r3, #128	@ 0x80
 8014cbe:	00db      	lsls	r3, r3, #3
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d111      	bne.n	8014ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8014cc4:	4baf      	ldr	r3, [pc, #700]	@ (8014f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8014cc6:	61fb      	str	r3, [r7, #28]
            break;
 8014cc8:	e00e      	b.n	8014ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014cca:	4aad      	ldr	r2, [pc, #692]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014ccc:	2390      	movs	r3, #144	@ 0x90
 8014cce:	58d3      	ldr	r3, [r2, r3]
 8014cd0:	2202      	movs	r2, #2
 8014cd2:	4013      	ands	r3, r2
 8014cd4:	2b02      	cmp	r3, #2
 8014cd6:	d109      	bne.n	8014cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8014cd8:	2380      	movs	r3, #128	@ 0x80
 8014cda:	021b      	lsls	r3, r3, #8
 8014cdc:	61fb      	str	r3, [r7, #28]
            break;
 8014cde:	e005      	b.n	8014cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8014ce0:	46c0      	nop			@ (mov r8, r8)
 8014ce2:	e1d8      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014ce4:	46c0      	nop			@ (mov r8, r8)
 8014ce6:	e1d6      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014ce8:	46c0      	nop			@ (mov r8, r8)
 8014cea:	e1d4      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014cec:	46c0      	nop			@ (mov r8, r8)
        break;
 8014cee:	e1d2      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8014cf0:	4aa3      	ldr	r2, [pc, #652]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014cf2:	2388      	movs	r3, #136	@ 0x88
 8014cf4:	58d2      	ldr	r2, [r2, r3]
 8014cf6:	23c0      	movs	r3, #192	@ 0xc0
 8014cf8:	039b      	lsls	r3, r3, #14
 8014cfa:	4013      	ands	r3, r2
 8014cfc:	617b      	str	r3, [r7, #20]
 8014cfe:	697a      	ldr	r2, [r7, #20]
 8014d00:	23c0      	movs	r3, #192	@ 0xc0
 8014d02:	039b      	lsls	r3, r3, #14
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d03d      	beq.n	8014d84 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8014d08:	697a      	ldr	r2, [r7, #20]
 8014d0a:	23c0      	movs	r3, #192	@ 0xc0
 8014d0c:	039b      	lsls	r3, r3, #14
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d843      	bhi.n	8014d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8014d12:	697a      	ldr	r2, [r7, #20]
 8014d14:	2380      	movs	r3, #128	@ 0x80
 8014d16:	039b      	lsls	r3, r3, #14
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d027      	beq.n	8014d6c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8014d1c:	697a      	ldr	r2, [r7, #20]
 8014d1e:	2380      	movs	r3, #128	@ 0x80
 8014d20:	039b      	lsls	r3, r3, #14
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d839      	bhi.n	8014d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d005      	beq.n	8014d38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8014d2c:	697a      	ldr	r2, [r7, #20]
 8014d2e:	2380      	movs	r3, #128	@ 0x80
 8014d30:	035b      	lsls	r3, r3, #13
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d005      	beq.n	8014d42 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8014d36:	e030      	b.n	8014d9a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014d38:	f7ff f9c2 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014d3c:	0003      	movs	r3, r0
 8014d3e:	61fb      	str	r3, [r7, #28]
            break;
 8014d40:	e032      	b.n	8014da8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8014d42:	4a8f      	ldr	r2, [pc, #572]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014d44:	2394      	movs	r3, #148	@ 0x94
 8014d46:	58d3      	ldr	r3, [r2, r3]
 8014d48:	2202      	movs	r2, #2
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	2b02      	cmp	r3, #2
 8014d4e:	d126      	bne.n	8014d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8014d50:	4a8b      	ldr	r2, [pc, #556]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014d52:	2394      	movs	r3, #148	@ 0x94
 8014d54:	58d3      	ldr	r3, [r2, r3]
 8014d56:	2204      	movs	r2, #4
 8014d58:	4013      	ands	r3, r2
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	d102      	bne.n	8014d64 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8014d5e:	23fa      	movs	r3, #250	@ 0xfa
 8014d60:	61fb      	str	r3, [r7, #28]
            break;
 8014d62:	e01c      	b.n	8014d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8014d64:	23fa      	movs	r3, #250	@ 0xfa
 8014d66:	01db      	lsls	r3, r3, #7
 8014d68:	61fb      	str	r3, [r7, #28]
            break;
 8014d6a:	e018      	b.n	8014d9e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014d6c:	4b84      	ldr	r3, [pc, #528]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	2380      	movs	r3, #128	@ 0x80
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	401a      	ands	r2, r3
 8014d76:	2380      	movs	r3, #128	@ 0x80
 8014d78:	00db      	lsls	r3, r3, #3
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d111      	bne.n	8014da2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8014d7e:	4b81      	ldr	r3, [pc, #516]	@ (8014f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8014d80:	61fb      	str	r3, [r7, #28]
            break;
 8014d82:	e00e      	b.n	8014da2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014d84:	4a7e      	ldr	r2, [pc, #504]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014d86:	2390      	movs	r3, #144	@ 0x90
 8014d88:	58d3      	ldr	r3, [r2, r3]
 8014d8a:	2202      	movs	r2, #2
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	2b02      	cmp	r3, #2
 8014d90:	d109      	bne.n	8014da6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8014d92:	2380      	movs	r3, #128	@ 0x80
 8014d94:	021b      	lsls	r3, r3, #8
 8014d96:	61fb      	str	r3, [r7, #28]
            break;
 8014d98:	e005      	b.n	8014da6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8014d9a:	46c0      	nop			@ (mov r8, r8)
 8014d9c:	e17b      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014d9e:	46c0      	nop			@ (mov r8, r8)
 8014da0:	e179      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014da2:	46c0      	nop			@ (mov r8, r8)
 8014da4:	e177      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014da6:	46c0      	nop			@ (mov r8, r8)
        break;
 8014da8:	e175      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8014daa:	4a75      	ldr	r2, [pc, #468]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014dac:	2388      	movs	r3, #136	@ 0x88
 8014dae:	58d2      	ldr	r2, [r2, r3]
 8014db0:	23c0      	movs	r3, #192	@ 0xc0
 8014db2:	041b      	lsls	r3, r3, #16
 8014db4:	4013      	ands	r3, r2
 8014db6:	617b      	str	r3, [r7, #20]
 8014db8:	697a      	ldr	r2, [r7, #20]
 8014dba:	23c0      	movs	r3, #192	@ 0xc0
 8014dbc:	041b      	lsls	r3, r3, #16
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d03d      	beq.n	8014e3e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8014dc2:	697a      	ldr	r2, [r7, #20]
 8014dc4:	23c0      	movs	r3, #192	@ 0xc0
 8014dc6:	041b      	lsls	r3, r3, #16
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d843      	bhi.n	8014e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8014dcc:	697a      	ldr	r2, [r7, #20]
 8014dce:	2380      	movs	r3, #128	@ 0x80
 8014dd0:	041b      	lsls	r3, r3, #16
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d027      	beq.n	8014e26 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8014dd6:	697a      	ldr	r2, [r7, #20]
 8014dd8:	2380      	movs	r3, #128	@ 0x80
 8014dda:	041b      	lsls	r3, r3, #16
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d839      	bhi.n	8014e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d005      	beq.n	8014df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8014de6:	697a      	ldr	r2, [r7, #20]
 8014de8:	2380      	movs	r3, #128	@ 0x80
 8014dea:	03db      	lsls	r3, r3, #15
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d005      	beq.n	8014dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8014df0:	e030      	b.n	8014e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014df2:	f7ff f965 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014df6:	0003      	movs	r3, r0
 8014df8:	61fb      	str	r3, [r7, #28]
            break;
 8014dfa:	e032      	b.n	8014e62 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8014dfc:	4a60      	ldr	r2, [pc, #384]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014dfe:	2394      	movs	r3, #148	@ 0x94
 8014e00:	58d3      	ldr	r3, [r2, r3]
 8014e02:	2202      	movs	r2, #2
 8014e04:	4013      	ands	r3, r2
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d126      	bne.n	8014e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8014e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014e0c:	2394      	movs	r3, #148	@ 0x94
 8014e0e:	58d3      	ldr	r3, [r2, r3]
 8014e10:	2204      	movs	r2, #4
 8014e12:	4013      	ands	r3, r2
 8014e14:	2b04      	cmp	r3, #4
 8014e16:	d102      	bne.n	8014e1e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8014e18:	23fa      	movs	r3, #250	@ 0xfa
 8014e1a:	61fb      	str	r3, [r7, #28]
            break;
 8014e1c:	e01c      	b.n	8014e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8014e1e:	23fa      	movs	r3, #250	@ 0xfa
 8014e20:	01db      	lsls	r3, r3, #7
 8014e22:	61fb      	str	r3, [r7, #28]
            break;
 8014e24:	e018      	b.n	8014e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014e26:	4b56      	ldr	r3, [pc, #344]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014e28:	681a      	ldr	r2, [r3, #0]
 8014e2a:	2380      	movs	r3, #128	@ 0x80
 8014e2c:	00db      	lsls	r3, r3, #3
 8014e2e:	401a      	ands	r2, r3
 8014e30:	2380      	movs	r3, #128	@ 0x80
 8014e32:	00db      	lsls	r3, r3, #3
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d111      	bne.n	8014e5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8014e38:	4b52      	ldr	r3, [pc, #328]	@ (8014f84 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8014e3a:	61fb      	str	r3, [r7, #28]
            break;
 8014e3c:	e00e      	b.n	8014e5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014e3e:	4a50      	ldr	r2, [pc, #320]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014e40:	2390      	movs	r3, #144	@ 0x90
 8014e42:	58d3      	ldr	r3, [r2, r3]
 8014e44:	2202      	movs	r2, #2
 8014e46:	4013      	ands	r3, r2
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	d109      	bne.n	8014e60 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8014e4c:	2380      	movs	r3, #128	@ 0x80
 8014e4e:	021b      	lsls	r3, r3, #8
 8014e50:	61fb      	str	r3, [r7, #28]
            break;
 8014e52:	e005      	b.n	8014e60 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8014e54:	46c0      	nop			@ (mov r8, r8)
 8014e56:	e11e      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014e58:	46c0      	nop			@ (mov r8, r8)
 8014e5a:	e11c      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014e5c:	46c0      	nop			@ (mov r8, r8)
 8014e5e:	e11a      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014e60:	46c0      	nop			@ (mov r8, r8)
        break;
 8014e62:	e118      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8014e64:	4a46      	ldr	r2, [pc, #280]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014e66:	2388      	movs	r3, #136	@ 0x88
 8014e68:	58d2      	ldr	r2, [r2, r3]
 8014e6a:	2380      	movs	r3, #128	@ 0x80
 8014e6c:	045b      	lsls	r3, r3, #17
 8014e6e:	4013      	ands	r3, r2
 8014e70:	617b      	str	r3, [r7, #20]
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d005      	beq.n	8014e84 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8014e78:	697a      	ldr	r2, [r7, #20]
 8014e7a:	2380      	movs	r3, #128	@ 0x80
 8014e7c:	045b      	lsls	r3, r3, #17
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d011      	beq.n	8014ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8014e82:	e019      	b.n	8014eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8014e84:	4b3e      	ldr	r3, [pc, #248]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014e86:	689a      	ldr	r2, [r3, #8]
 8014e88:	23e0      	movs	r3, #224	@ 0xe0
 8014e8a:	01db      	lsls	r3, r3, #7
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	d104      	bne.n	8014e9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8014e90:	f7ff f916 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014e94:	0003      	movs	r3, r0
 8014e96:	61fb      	str	r3, [r7, #28]
            break;
 8014e98:	e00e      	b.n	8014eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8014e9a:	f7ff f911 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014e9e:	0003      	movs	r3, r0
 8014ea0:	005b      	lsls	r3, r3, #1
 8014ea2:	61fb      	str	r3, [r7, #28]
            break;
 8014ea4:	e008      	b.n	8014eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014ea6:	2408      	movs	r4, #8
 8014ea8:	193b      	adds	r3, r7, r4
 8014eaa:	0018      	movs	r0, r3
 8014eac:	f000 f8fe 	bl	80150ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8014eb0:	193b      	adds	r3, r7, r4
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	61fb      	str	r3, [r7, #28]
            break;
 8014eb6:	46c0      	nop			@ (mov r8, r8)
        break;
 8014eb8:	e0ed      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8014eba:	4a31      	ldr	r2, [pc, #196]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014ebc:	2388      	movs	r3, #136	@ 0x88
 8014ebe:	58d2      	ldr	r2, [r2, r3]
 8014ec0:	2380      	movs	r3, #128	@ 0x80
 8014ec2:	049b      	lsls	r3, r3, #18
 8014ec4:	4013      	ands	r3, r2
 8014ec6:	617b      	str	r3, [r7, #20]
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d005      	beq.n	8014eda <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8014ece:	697a      	ldr	r2, [r7, #20]
 8014ed0:	2380      	movs	r3, #128	@ 0x80
 8014ed2:	049b      	lsls	r3, r3, #18
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d011      	beq.n	8014efc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8014ed8:	e019      	b.n	8014f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8014eda:	4b29      	ldr	r3, [pc, #164]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014edc:	689a      	ldr	r2, [r3, #8]
 8014ede:	23e0      	movs	r3, #224	@ 0xe0
 8014ee0:	01db      	lsls	r3, r3, #7
 8014ee2:	4013      	ands	r3, r2
 8014ee4:	d104      	bne.n	8014ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8014ee6:	f7ff f8eb 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014eea:	0003      	movs	r3, r0
 8014eec:	61fb      	str	r3, [r7, #28]
            break;
 8014eee:	e00e      	b.n	8014f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8014ef0:	f7ff f8e6 	bl	80140c0 <HAL_RCC_GetPCLK1Freq>
 8014ef4:	0003      	movs	r3, r0
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	61fb      	str	r3, [r7, #28]
            break;
 8014efa:	e008      	b.n	8014f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014efc:	2408      	movs	r4, #8
 8014efe:	193b      	adds	r3, r7, r4
 8014f00:	0018      	movs	r0, r3
 8014f02:	f000 f8d3 	bl	80150ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8014f06:	193b      	adds	r3, r7, r4
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	61fb      	str	r3, [r7, #28]
            break;
 8014f0c:	46c0      	nop			@ (mov r8, r8)
        break;
 8014f0e:	e0c2      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8014f10:	4a1b      	ldr	r2, [pc, #108]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014f12:	2388      	movs	r3, #136	@ 0x88
 8014f14:	58d2      	ldr	r2, [r2, r3]
 8014f16:	23c0      	movs	r3, #192	@ 0xc0
 8014f18:	051b      	lsls	r3, r3, #20
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	617b      	str	r3, [r7, #20]
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	23c0      	movs	r3, #192	@ 0xc0
 8014f22:	051b      	lsls	r3, r3, #20
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d017      	beq.n	8014f58 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	23c0      	movs	r3, #192	@ 0xc0
 8014f2c:	051b      	lsls	r3, r3, #20
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d84a      	bhi.n	8014fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8014f32:	697a      	ldr	r2, [r7, #20]
 8014f34:	2380      	movs	r3, #128	@ 0x80
 8014f36:	051b      	lsls	r3, r3, #20
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d039      	beq.n	8014fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8014f3c:	697a      	ldr	r2, [r7, #20]
 8014f3e:	2380      	movs	r3, #128	@ 0x80
 8014f40:	051b      	lsls	r3, r3, #20
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d840      	bhi.n	8014fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d03a      	beq.n	8014fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8014f4c:	697a      	ldr	r2, [r7, #20]
 8014f4e:	2380      	movs	r3, #128	@ 0x80
 8014f50:	04db      	lsls	r3, r3, #19
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d003      	beq.n	8014f5e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8014f56:	e037      	b.n	8014fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8014f58:	4b0b      	ldr	r3, [pc, #44]	@ (8014f88 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8014f5a:	61fb      	str	r3, [r7, #28]
            break;
 8014f5c:	e037      	b.n	8014fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8014f5e:	4b08      	ldr	r3, [pc, #32]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	2202      	movs	r2, #2
 8014f64:	4013      	ands	r3, r2
 8014f66:	2b02      	cmp	r3, #2
 8014f68:	d130      	bne.n	8014fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8014f6a:	4b05      	ldr	r3, [pc, #20]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2208      	movs	r2, #8
 8014f70:	4013      	ands	r3, r2
 8014f72:	d00b      	beq.n	8014f8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8014f74:	4b02      	ldr	r3, [pc, #8]	@ (8014f80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	091b      	lsrs	r3, r3, #4
 8014f7a:	220f      	movs	r2, #15
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	e00b      	b.n	8014f98 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8014f80:	40021000 	.word	0x40021000
 8014f84:	00f42400 	.word	0x00f42400
 8014f88:	02dc6c00 	.word	0x02dc6c00
 8014f8c:	4a44      	ldr	r2, [pc, #272]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8014f8e:	2394      	movs	r3, #148	@ 0x94
 8014f90:	58d3      	ldr	r3, [r2, r3]
 8014f92:	0a1b      	lsrs	r3, r3, #8
 8014f94:	220f      	movs	r2, #15
 8014f96:	4013      	ands	r3, r2
 8014f98:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	2b0b      	cmp	r3, #11
 8014f9e:	d901      	bls.n	8014fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8014fa0:	230b      	movs	r3, #11
 8014fa2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8014fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80150a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8014fa6:	69ba      	ldr	r2, [r7, #24]
 8014fa8:	0092      	lsls	r2, r2, #2
 8014faa:	58d3      	ldr	r3, [r2, r3]
 8014fac:	61fb      	str	r3, [r7, #28]
            break;
 8014fae:	e00d      	b.n	8014fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014fb0:	2408      	movs	r4, #8
 8014fb2:	193b      	adds	r3, r7, r4
 8014fb4:	0018      	movs	r0, r3
 8014fb6:	f000 f879 	bl	80150ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8014fba:	193b      	adds	r3, r7, r4
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	61fb      	str	r3, [r7, #28]
            break;
 8014fc0:	e005      	b.n	8014fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	61fb      	str	r3, [r7, #28]
            break;
 8014fc6:	e002      	b.n	8014fce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8014fc8:	46c0      	nop			@ (mov r8, r8)
 8014fca:	e064      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014fcc:	46c0      	nop			@ (mov r8, r8)
        break;
 8014fce:	e062      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8014fd0:	4a33      	ldr	r2, [pc, #204]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8014fd2:	2388      	movs	r3, #136	@ 0x88
 8014fd4:	58d2      	ldr	r2, [r2, r3]
 8014fd6:	23c0      	movs	r3, #192	@ 0xc0
 8014fd8:	051b      	lsls	r3, r3, #20
 8014fda:	4013      	ands	r3, r2
 8014fdc:	617b      	str	r3, [r7, #20]
 8014fde:	697a      	ldr	r2, [r7, #20]
 8014fe0:	23c0      	movs	r3, #192	@ 0xc0
 8014fe2:	051b      	lsls	r3, r3, #20
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d017      	beq.n	8015018 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8014fe8:	697a      	ldr	r2, [r7, #20]
 8014fea:	23c0      	movs	r3, #192	@ 0xc0
 8014fec:	051b      	lsls	r3, r3, #20
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d844      	bhi.n	801507c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8014ff2:	697a      	ldr	r2, [r7, #20]
 8014ff4:	2380      	movs	r3, #128	@ 0x80
 8014ff6:	051b      	lsls	r3, r3, #20
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d033      	beq.n	8015064 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8014ffc:	697a      	ldr	r2, [r7, #20]
 8014ffe:	2380      	movs	r3, #128	@ 0x80
 8015000:	051b      	lsls	r3, r3, #20
 8015002:	429a      	cmp	r2, r3
 8015004:	d83a      	bhi.n	801507c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d034      	beq.n	8015076 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 801500c:	697a      	ldr	r2, [r7, #20]
 801500e:	2380      	movs	r3, #128	@ 0x80
 8015010:	04db      	lsls	r3, r3, #19
 8015012:	429a      	cmp	r2, r3
 8015014:	d003      	beq.n	801501e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8015016:	e031      	b.n	801507c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8015018:	4b23      	ldr	r3, [pc, #140]	@ (80150a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 801501a:	61fb      	str	r3, [r7, #28]
            break;
 801501c:	e031      	b.n	8015082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801501e:	4b20      	ldr	r3, [pc, #128]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	2202      	movs	r2, #2
 8015024:	4013      	ands	r3, r2
 8015026:	2b02      	cmp	r3, #2
 8015028:	d12a      	bne.n	8015080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 801502a:	4b1d      	ldr	r3, [pc, #116]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2208      	movs	r2, #8
 8015030:	4013      	ands	r3, r2
 8015032:	d005      	beq.n	8015040 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8015034:	4b1a      	ldr	r3, [pc, #104]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	091b      	lsrs	r3, r3, #4
 801503a:	220f      	movs	r2, #15
 801503c:	4013      	ands	r3, r2
 801503e:	e005      	b.n	801504c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8015040:	4a17      	ldr	r2, [pc, #92]	@ (80150a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8015042:	2394      	movs	r3, #148	@ 0x94
 8015044:	58d3      	ldr	r3, [r2, r3]
 8015046:	0a1b      	lsrs	r3, r3, #8
 8015048:	220f      	movs	r2, #15
 801504a:	4013      	ands	r3, r2
 801504c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	2b0b      	cmp	r3, #11
 8015052:	d901      	bls.n	8015058 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8015054:	230b      	movs	r3, #11
 8015056:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8015058:	4b12      	ldr	r3, [pc, #72]	@ (80150a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 801505a:	69ba      	ldr	r2, [r7, #24]
 801505c:	0092      	lsls	r2, r2, #2
 801505e:	58d3      	ldr	r3, [r2, r3]
 8015060:	61fb      	str	r3, [r7, #28]
            break;
 8015062:	e00d      	b.n	8015080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8015064:	2408      	movs	r4, #8
 8015066:	193b      	adds	r3, r7, r4
 8015068:	0018      	movs	r0, r3
 801506a:	f000 f81f 	bl	80150ac <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801506e:	193b      	adds	r3, r7, r4
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	61fb      	str	r3, [r7, #28]
            break;
 8015074:	e005      	b.n	8015082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8015076:	2300      	movs	r3, #0
 8015078:	61fb      	str	r3, [r7, #28]
            break;
 801507a:	e002      	b.n	8015082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 801507c:	46c0      	nop			@ (mov r8, r8)
 801507e:	e00a      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8015080:	46c0      	nop			@ (mov r8, r8)
        break;
 8015082:	e008      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8015084:	46c0      	nop			@ (mov r8, r8)
 8015086:	e006      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8015088:	46c0      	nop			@ (mov r8, r8)
 801508a:	e004      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801508c:	46c0      	nop			@ (mov r8, r8)
 801508e:	e002      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8015090:	46c0      	nop			@ (mov r8, r8)
 8015092:	e000      	b.n	8015096 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8015094:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8015096:	69fb      	ldr	r3, [r7, #28]
}
 8015098:	0018      	movs	r0, r3
 801509a:	46bd      	mov	sp, r7
 801509c:	b009      	add	sp, #36	@ 0x24
 801509e:	bd90      	pop	{r4, r7, pc}
 80150a0:	40021000 	.word	0x40021000
 80150a4:	08018aa4 	.word	0x08018aa4
 80150a8:	02dc6c00 	.word	0x02dc6c00

080150ac <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b088      	sub	sp, #32
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80150b4:	4b58      	ldr	r3, [pc, #352]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	0a1b      	lsrs	r3, r3, #8
 80150ba:	227f      	movs	r2, #127	@ 0x7f
 80150bc:	4013      	ands	r3, r2
 80150be:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80150c0:	4b55      	ldr	r3, [pc, #340]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	2203      	movs	r2, #3
 80150c6:	4013      	ands	r3, r2
 80150c8:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80150ca:	4b53      	ldr	r3, [pc, #332]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	091b      	lsrs	r3, r3, #4
 80150d0:	2207      	movs	r2, #7
 80150d2:	4013      	ands	r3, r2
 80150d4:	3301      	adds	r3, #1
 80150d6:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80150d8:	4b4f      	ldr	r3, [pc, #316]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2208      	movs	r2, #8
 80150de:	4013      	ands	r3, r2
 80150e0:	d005      	beq.n	80150ee <HAL_RCCEx_GetPLLClockFreq+0x42>
 80150e2:	4b4d      	ldr	r3, [pc, #308]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	091b      	lsrs	r3, r3, #4
 80150e8:	220f      	movs	r2, #15
 80150ea:	4013      	ands	r3, r2
 80150ec:	e005      	b.n	80150fa <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80150ee:	4a4a      	ldr	r2, [pc, #296]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80150f0:	2394      	movs	r3, #148	@ 0x94
 80150f2:	58d3      	ldr	r3, [r2, r3]
 80150f4:	0a1b      	lsrs	r3, r3, #8
 80150f6:	220f      	movs	r2, #15
 80150f8:	4013      	ands	r3, r2
 80150fa:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	2b0b      	cmp	r3, #11
 8015100:	d901      	bls.n	8015106 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8015102:	230b      	movs	r3, #11
 8015104:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	2b03      	cmp	r3, #3
 801510a:	d020      	beq.n	801514e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	2b03      	cmp	r3, #3
 8015110:	d827      	bhi.n	8015162 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	2b01      	cmp	r3, #1
 8015116:	d00c      	beq.n	8015132 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	2b02      	cmp	r3, #2
 801511c:	d121      	bne.n	8015162 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 801511e:	68f9      	ldr	r1, [r7, #12]
 8015120:	483e      	ldr	r0, [pc, #248]	@ (801521c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8015122:	f7ea fff9 	bl	8000118 <__udivsi3>
 8015126:	0003      	movs	r3, r0
 8015128:	001a      	movs	r2, r3
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	4353      	muls	r3, r2
 801512e:	61fb      	str	r3, [r7, #28]
      break;
 8015130:	e025      	b.n	801517e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8015132:	4b3b      	ldr	r3, [pc, #236]	@ (8015220 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8015134:	69ba      	ldr	r2, [r7, #24]
 8015136:	0092      	lsls	r2, r2, #2
 8015138:	58d3      	ldr	r3, [r2, r3]
 801513a:	68f9      	ldr	r1, [r7, #12]
 801513c:	0018      	movs	r0, r3
 801513e:	f7ea ffeb 	bl	8000118 <__udivsi3>
 8015142:	0003      	movs	r3, r0
 8015144:	001a      	movs	r2, r3
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	4353      	muls	r3, r2
 801514a:	61fb      	str	r3, [r7, #28]
      break;
 801514c:	e017      	b.n	801517e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 801514e:	68f9      	ldr	r1, [r7, #12]
 8015150:	4834      	ldr	r0, [pc, #208]	@ (8015224 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8015152:	f7ea ffe1 	bl	8000118 <__udivsi3>
 8015156:	0003      	movs	r3, r0
 8015158:	001a      	movs	r2, r3
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	4353      	muls	r3, r2
 801515e:	61fb      	str	r3, [r7, #28]
      break;
 8015160:	e00d      	b.n	801517e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8015162:	4b2f      	ldr	r3, [pc, #188]	@ (8015220 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8015164:	69ba      	ldr	r2, [r7, #24]
 8015166:	0092      	lsls	r2, r2, #2
 8015168:	58d3      	ldr	r3, [r2, r3]
 801516a:	68f9      	ldr	r1, [r7, #12]
 801516c:	0018      	movs	r0, r3
 801516e:	f7ea ffd3 	bl	8000118 <__udivsi3>
 8015172:	0003      	movs	r3, r0
 8015174:	001a      	movs	r2, r3
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	4353      	muls	r3, r2
 801517a:	61fb      	str	r3, [r7, #28]
      break;
 801517c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 801517e:	4b26      	ldr	r3, [pc, #152]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8015180:	68da      	ldr	r2, [r3, #12]
 8015182:	2380      	movs	r3, #128	@ 0x80
 8015184:	025b      	lsls	r3, r3, #9
 8015186:	4013      	ands	r3, r2
 8015188:	d00e      	beq.n	80151a8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 801518a:	4b23      	ldr	r3, [pc, #140]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801518c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 801518e:	0c5b      	lsrs	r3, r3, #17
 8015190:	221f      	movs	r2, #31
 8015192:	4013      	ands	r3, r2
 8015194:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8015196:	0019      	movs	r1, r3
 8015198:	69f8      	ldr	r0, [r7, #28]
 801519a:	f7ea ffbd 	bl	8000118 <__udivsi3>
 801519e:	0003      	movs	r3, r0
 80151a0:	001a      	movs	r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	601a      	str	r2, [r3, #0]
 80151a6:	e002      	b.n	80151ae <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80151ae:	4b1a      	ldr	r3, [pc, #104]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80151b0:	68da      	ldr	r2, [r3, #12]
 80151b2:	2380      	movs	r3, #128	@ 0x80
 80151b4:	045b      	lsls	r3, r3, #17
 80151b6:	4013      	ands	r3, r2
 80151b8:	d00e      	beq.n	80151d8 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80151ba:	4b17      	ldr	r3, [pc, #92]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80151bc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80151be:	0e5b      	lsrs	r3, r3, #25
 80151c0:	2207      	movs	r2, #7
 80151c2:	4013      	ands	r3, r2
 80151c4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80151c6:	0019      	movs	r1, r3
 80151c8:	69f8      	ldr	r0, [r7, #28]
 80151ca:	f7ea ffa5 	bl	8000118 <__udivsi3>
 80151ce:	0003      	movs	r3, r0
 80151d0:	001a      	movs	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	605a      	str	r2, [r3, #4]
 80151d6:	e002      	b.n	80151de <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2200      	movs	r2, #0
 80151dc:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80151de:	4b0e      	ldr	r3, [pc, #56]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80151e0:	68da      	ldr	r2, [r3, #12]
 80151e2:	2380      	movs	r3, #128	@ 0x80
 80151e4:	055b      	lsls	r3, r3, #21
 80151e6:	4013      	ands	r3, r2
 80151e8:	d00e      	beq.n	8015208 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80151ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015218 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80151ec:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80151ee:	0f5b      	lsrs	r3, r3, #29
 80151f0:	2207      	movs	r2, #7
 80151f2:	4013      	ands	r3, r2
 80151f4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80151f6:	0019      	movs	r1, r3
 80151f8:	69f8      	ldr	r0, [r7, #28]
 80151fa:	f7ea ff8d 	bl	8000118 <__udivsi3>
 80151fe:	0003      	movs	r3, r0
 8015200:	001a      	movs	r2, r3
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8015206:	e002      	b.n	801520e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2200      	movs	r2, #0
 801520c:	609a      	str	r2, [r3, #8]
}
 801520e:	46c0      	nop			@ (mov r8, r8)
 8015210:	46bd      	mov	sp, r7
 8015212:	b008      	add	sp, #32
 8015214:	bd80      	pop	{r7, pc}
 8015216:	46c0      	nop			@ (mov r8, r8)
 8015218:	40021000 	.word	0x40021000
 801521c:	00f42400 	.word	0x00f42400
 8015220:	08018aa4 	.word	0x08018aa4
 8015224:	003d0900 	.word	0x003d0900

08015228 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015230:	210f      	movs	r1, #15
 8015232:	187b      	adds	r3, r7, r1
 8015234:	2201      	movs	r2, #1
 8015236:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d100      	bne.n	8015240 <HAL_RTC_Init+0x18>
 801523e:	e08b      	b.n	8015358 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8015240:	187b      	adds	r3, r7, r1
 8015242:	2200      	movs	r2, #0
 8015244:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	222d      	movs	r2, #45	@ 0x2d
 801524a:	5c9b      	ldrb	r3, [r3, r2]
 801524c:	b2db      	uxtb	r3, r3
 801524e:	2b00      	cmp	r3, #0
 8015250:	d107      	bne.n	8015262 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	222c      	movs	r2, #44	@ 0x2c
 8015256:	2100      	movs	r1, #0
 8015258:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	0018      	movs	r0, r3
 801525e:	f7f4 fa3d 	bl	80096dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	222d      	movs	r2, #45	@ 0x2d
 8015266:	2102      	movs	r1, #2
 8015268:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801526a:	4b3f      	ldr	r3, [pc, #252]	@ (8015368 <HAL_RTC_Init+0x140>)
 801526c:	22ca      	movs	r2, #202	@ 0xca
 801526e:	625a      	str	r2, [r3, #36]	@ 0x24
 8015270:	4b3d      	ldr	r3, [pc, #244]	@ (8015368 <HAL_RTC_Init+0x140>)
 8015272:	2253      	movs	r2, #83	@ 0x53
 8015274:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	0018      	movs	r0, r3
 801527a:	f000 fab9 	bl	80157f0 <RTC_EnterInitMode>
 801527e:	1e03      	subs	r3, r0, #0
 8015280:	d00b      	beq.n	801529a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015282:	4b39      	ldr	r3, [pc, #228]	@ (8015368 <HAL_RTC_Init+0x140>)
 8015284:	22ff      	movs	r2, #255	@ 0xff
 8015286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	222d      	movs	r2, #45	@ 0x2d
 801528c:	2104      	movs	r1, #4
 801528e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8015290:	230f      	movs	r3, #15
 8015292:	18fb      	adds	r3, r7, r3
 8015294:	2201      	movs	r2, #1
 8015296:	701a      	strb	r2, [r3, #0]
 8015298:	e05e      	b.n	8015358 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801529a:	4b33      	ldr	r3, [pc, #204]	@ (8015368 <HAL_RTC_Init+0x140>)
 801529c:	699a      	ldr	r2, [r3, #24]
 801529e:	4b32      	ldr	r3, [pc, #200]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152a0:	4932      	ldr	r1, [pc, #200]	@ (801536c <HAL_RTC_Init+0x144>)
 80152a2:	400a      	ands	r2, r1
 80152a4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80152a6:	4b30      	ldr	r3, [pc, #192]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152a8:	6999      	ldr	r1, [r3, #24]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	685a      	ldr	r2, [r3, #4]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	691b      	ldr	r3, [r3, #16]
 80152b2:	431a      	orrs	r2, r3
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	699b      	ldr	r3, [r3, #24]
 80152b8:	431a      	orrs	r2, r3
 80152ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152bc:	430a      	orrs	r2, r1
 80152be:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	68d9      	ldr	r1, [r3, #12]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	689b      	ldr	r3, [r3, #8]
 80152c8:	041a      	lsls	r2, r3, #16
 80152ca:	4b27      	ldr	r3, [pc, #156]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152cc:	430a      	orrs	r2, r1
 80152ce:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80152d0:	4b25      	ldr	r3, [pc, #148]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	4a26      	ldr	r2, [pc, #152]	@ (8015370 <HAL_RTC_Init+0x148>)
 80152d6:	4013      	ands	r3, r2
 80152d8:	0019      	movs	r1, r3
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152e2:	431a      	orrs	r2, r3
 80152e4:	4b20      	ldr	r3, [pc, #128]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152e6:	430a      	orrs	r2, r1
 80152e8:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80152ea:	4b1f      	ldr	r3, [pc, #124]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152ec:	68da      	ldr	r2, [r3, #12]
 80152ee:	4b1e      	ldr	r3, [pc, #120]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152f0:	2180      	movs	r1, #128	@ 0x80
 80152f2:	438a      	bics	r2, r1
 80152f4:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80152f6:	4b1c      	ldr	r3, [pc, #112]	@ (8015368 <HAL_RTC_Init+0x140>)
 80152f8:	699b      	ldr	r3, [r3, #24]
 80152fa:	2220      	movs	r2, #32
 80152fc:	4013      	ands	r3, r2
 80152fe:	d110      	bne.n	8015322 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	0018      	movs	r0, r3
 8015304:	f000 fa4e 	bl	80157a4 <HAL_RTC_WaitForSynchro>
 8015308:	1e03      	subs	r3, r0, #0
 801530a:	d00a      	beq.n	8015322 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801530c:	4b16      	ldr	r3, [pc, #88]	@ (8015368 <HAL_RTC_Init+0x140>)
 801530e:	22ff      	movs	r2, #255	@ 0xff
 8015310:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	222d      	movs	r2, #45	@ 0x2d
 8015316:	2104      	movs	r1, #4
 8015318:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 801531a:	230f      	movs	r3, #15
 801531c:	18fb      	adds	r3, r7, r3
 801531e:	2201      	movs	r2, #1
 8015320:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8015322:	230f      	movs	r3, #15
 8015324:	18fb      	adds	r3, r7, r3
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d115      	bne.n	8015358 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 801532c:	4b0e      	ldr	r3, [pc, #56]	@ (8015368 <HAL_RTC_Init+0x140>)
 801532e:	699b      	ldr	r3, [r3, #24]
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	08d9      	lsrs	r1, r3, #3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6a1a      	ldr	r2, [r3, #32]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	69db      	ldr	r3, [r3, #28]
 801533c:	431a      	orrs	r2, r3
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	431a      	orrs	r2, r3
 8015344:	4b08      	ldr	r3, [pc, #32]	@ (8015368 <HAL_RTC_Init+0x140>)
 8015346:	430a      	orrs	r2, r1
 8015348:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801534a:	4b07      	ldr	r3, [pc, #28]	@ (8015368 <HAL_RTC_Init+0x140>)
 801534c:	22ff      	movs	r2, #255	@ 0xff
 801534e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	222d      	movs	r2, #45	@ 0x2d
 8015354:	2101      	movs	r1, #1
 8015356:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8015358:	230f      	movs	r3, #15
 801535a:	18fb      	adds	r3, r7, r3
 801535c:	781b      	ldrb	r3, [r3, #0]
}
 801535e:	0018      	movs	r0, r3
 8015360:	46bd      	mov	sp, r7
 8015362:	b004      	add	sp, #16
 8015364:	bd80      	pop	{r7, pc}
 8015366:	46c0      	nop			@ (mov r8, r8)
 8015368:	40002800 	.word	0x40002800
 801536c:	fb8fffbf 	.word	0xfb8fffbf
 8015370:	ffffe0ff 	.word	0xffffe0ff

08015374 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b087      	sub	sp, #28
 8015378:	af00      	add	r7, sp, #0
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	222c      	movs	r2, #44	@ 0x2c
 8015384:	5c9b      	ldrb	r3, [r3, r2]
 8015386:	2b01      	cmp	r3, #1
 8015388:	d101      	bne.n	801538e <HAL_RTC_SetTime+0x1a>
 801538a:	2302      	movs	r3, #2
 801538c:	e0a7      	b.n	80154de <HAL_RTC_SetTime+0x16a>
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	222c      	movs	r2, #44	@ 0x2c
 8015392:	2101      	movs	r1, #1
 8015394:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	222d      	movs	r2, #45	@ 0x2d
 801539a:	2102      	movs	r1, #2
 801539c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801539e:	4b52      	ldr	r3, [pc, #328]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80153a0:	22ca      	movs	r2, #202	@ 0xca
 80153a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80153a4:	4b50      	ldr	r3, [pc, #320]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80153a6:	2253      	movs	r2, #83	@ 0x53
 80153a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	0018      	movs	r0, r3
 80153ae:	f000 fa1f 	bl	80157f0 <RTC_EnterInitMode>
 80153b2:	1e03      	subs	r3, r0, #0
 80153b4:	d00c      	beq.n	80153d0 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80153b6:	4b4c      	ldr	r3, [pc, #304]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80153b8:	22ff      	movs	r2, #255	@ 0xff
 80153ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	222d      	movs	r2, #45	@ 0x2d
 80153c0:	2104      	movs	r1, #4
 80153c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	222c      	movs	r2, #44	@ 0x2c
 80153c8:	2100      	movs	r1, #0
 80153ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80153cc:	2301      	movs	r3, #1
 80153ce:	e086      	b.n	80154de <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80153d0:	4b45      	ldr	r3, [pc, #276]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80153d2:	68da      	ldr	r2, [r3, #12]
 80153d4:	23c0      	movs	r3, #192	@ 0xc0
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	401a      	ands	r2, r3
 80153da:	2380      	movs	r3, #128	@ 0x80
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	429a      	cmp	r2, r3
 80153e0:	d053      	beq.n	801548a <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d124      	bne.n	8015432 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80153e8:	4b3f      	ldr	r3, [pc, #252]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80153ea:	699b      	ldr	r3, [r3, #24]
 80153ec:	2240      	movs	r2, #64	@ 0x40
 80153ee:	4013      	ands	r3, r2
 80153f0:	d102      	bne.n	80153f8 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	2200      	movs	r2, #0
 80153f6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	0018      	movs	r0, r3
 80153fe:	f000 fa23 	bl	8015848 <RTC_ByteToBcd2>
 8015402:	0003      	movs	r3, r0
 8015404:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	785b      	ldrb	r3, [r3, #1]
 801540a:	0018      	movs	r0, r3
 801540c:	f000 fa1c 	bl	8015848 <RTC_ByteToBcd2>
 8015410:	0003      	movs	r3, r0
 8015412:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015414:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	789b      	ldrb	r3, [r3, #2]
 801541a:	0018      	movs	r0, r3
 801541c:	f000 fa14 	bl	8015848 <RTC_ByteToBcd2>
 8015420:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015422:	0022      	movs	r2, r4
 8015424:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	78db      	ldrb	r3, [r3, #3]
 801542a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801542c:	4313      	orrs	r3, r2
 801542e:	617b      	str	r3, [r7, #20]
 8015430:	e016      	b.n	8015460 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8015432:	4b2d      	ldr	r3, [pc, #180]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015434:	699b      	ldr	r3, [r3, #24]
 8015436:	2240      	movs	r2, #64	@ 0x40
 8015438:	4013      	ands	r3, r2
 801543a:	d102      	bne.n	8015442 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	2200      	movs	r2, #0
 8015440:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	785b      	ldrb	r3, [r3, #1]
 801544c:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801544e:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8015450:	68ba      	ldr	r2, [r7, #8]
 8015452:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015454:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	78db      	ldrb	r3, [r3, #3]
 801545a:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801545c:	4313      	orrs	r3, r2
 801545e:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8015460:	4b21      	ldr	r3, [pc, #132]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015462:	697a      	ldr	r2, [r7, #20]
 8015464:	4921      	ldr	r1, [pc, #132]	@ (80154ec <HAL_RTC_SetTime+0x178>)
 8015466:	400a      	ands	r2, r1
 8015468:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 801546a:	4b1f      	ldr	r3, [pc, #124]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 801546c:	699a      	ldr	r2, [r3, #24]
 801546e:	4b1e      	ldr	r3, [pc, #120]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015470:	491f      	ldr	r1, [pc, #124]	@ (80154f0 <HAL_RTC_SetTime+0x17c>)
 8015472:	400a      	ands	r2, r1
 8015474:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8015476:	4b1c      	ldr	r3, [pc, #112]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015478:	6999      	ldr	r1, [r3, #24]
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	68da      	ldr	r2, [r3, #12]
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	431a      	orrs	r2, r3
 8015484:	4b18      	ldr	r3, [pc, #96]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015486:	430a      	orrs	r2, r1
 8015488:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801548a:	4b17      	ldr	r3, [pc, #92]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 801548c:	68da      	ldr	r2, [r3, #12]
 801548e:	4b16      	ldr	r3, [pc, #88]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015490:	2180      	movs	r1, #128	@ 0x80
 8015492:	438a      	bics	r2, r1
 8015494:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8015496:	4b14      	ldr	r3, [pc, #80]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 8015498:	699b      	ldr	r3, [r3, #24]
 801549a:	2220      	movs	r2, #32
 801549c:	4013      	ands	r3, r2
 801549e:	d112      	bne.n	80154c6 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	0018      	movs	r0, r3
 80154a4:	f000 f97e 	bl	80157a4 <HAL_RTC_WaitForSynchro>
 80154a8:	1e03      	subs	r3, r0, #0
 80154aa:	d00c      	beq.n	80154c6 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80154ac:	4b0e      	ldr	r3, [pc, #56]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80154ae:	22ff      	movs	r2, #255	@ 0xff
 80154b0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	222d      	movs	r2, #45	@ 0x2d
 80154b6:	2104      	movs	r1, #4
 80154b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	222c      	movs	r2, #44	@ 0x2c
 80154be:	2100      	movs	r1, #0
 80154c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80154c2:	2301      	movs	r3, #1
 80154c4:	e00b      	b.n	80154de <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80154c6:	4b08      	ldr	r3, [pc, #32]	@ (80154e8 <HAL_RTC_SetTime+0x174>)
 80154c8:	22ff      	movs	r2, #255	@ 0xff
 80154ca:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	222d      	movs	r2, #45	@ 0x2d
 80154d0:	2101      	movs	r1, #1
 80154d2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	222c      	movs	r2, #44	@ 0x2c
 80154d8:	2100      	movs	r1, #0
 80154da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80154dc:	2300      	movs	r3, #0
  }
}
 80154de:	0018      	movs	r0, r3
 80154e0:	46bd      	mov	sp, r7
 80154e2:	b007      	add	sp, #28
 80154e4:	bd90      	pop	{r4, r7, pc}
 80154e6:	46c0      	nop			@ (mov r8, r8)
 80154e8:	40002800 	.word	0x40002800
 80154ec:	007f7f7f 	.word	0x007f7f7f
 80154f0:	fffbffff 	.word	0xfffbffff

080154f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8015500:	4b2c      	ldr	r3, [pc, #176]	@ (80155b4 <HAL_RTC_GetTime+0xc0>)
 8015502:	689a      	ldr	r2, [r3, #8]
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8015508:	4b2a      	ldr	r3, [pc, #168]	@ (80155b4 <HAL_RTC_GetTime+0xc0>)
 801550a:	68da      	ldr	r2, [r3, #12]
 801550c:	23c0      	movs	r3, #192	@ 0xc0
 801550e:	009b      	lsls	r3, r3, #2
 8015510:	401a      	ands	r2, r3
 8015512:	2380      	movs	r3, #128	@ 0x80
 8015514:	005b      	lsls	r3, r3, #1
 8015516:	429a      	cmp	r2, r3
 8015518:	d047      	beq.n	80155aa <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 801551a:	4b26      	ldr	r3, [pc, #152]	@ (80155b4 <HAL_RTC_GetTime+0xc0>)
 801551c:	691b      	ldr	r3, [r3, #16]
 801551e:	045b      	lsls	r3, r3, #17
 8015520:	0c5a      	lsrs	r2, r3, #17
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8015526:	4b23      	ldr	r3, [pc, #140]	@ (80155b4 <HAL_RTC_GetTime+0xc0>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	4a23      	ldr	r2, [pc, #140]	@ (80155b8 <HAL_RTC_GetTime+0xc4>)
 801552c:	4013      	ands	r3, r2
 801552e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	0c1b      	lsrs	r3, r3, #16
 8015534:	b2db      	uxtb	r3, r3
 8015536:	223f      	movs	r2, #63	@ 0x3f
 8015538:	4013      	ands	r3, r2
 801553a:	b2da      	uxtb	r2, r3
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	0a1b      	lsrs	r3, r3, #8
 8015544:	b2db      	uxtb	r3, r3
 8015546:	227f      	movs	r2, #127	@ 0x7f
 8015548:	4013      	ands	r3, r2
 801554a:	b2da      	uxtb	r2, r3
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	b2db      	uxtb	r3, r3
 8015554:	227f      	movs	r2, #127	@ 0x7f
 8015556:	4013      	ands	r3, r2
 8015558:	b2da      	uxtb	r2, r3
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	0d9b      	lsrs	r3, r3, #22
 8015562:	b2db      	uxtb	r3, r3
 8015564:	2201      	movs	r2, #1
 8015566:	4013      	ands	r3, r2
 8015568:	b2da      	uxtb	r2, r3
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d11a      	bne.n	80155aa <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	0018      	movs	r0, r3
 801557a:	f000 f98d 	bl	8015898 <RTC_Bcd2ToByte>
 801557e:	0003      	movs	r3, r0
 8015580:	001a      	movs	r2, r3
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	785b      	ldrb	r3, [r3, #1]
 801558a:	0018      	movs	r0, r3
 801558c:	f000 f984 	bl	8015898 <RTC_Bcd2ToByte>
 8015590:	0003      	movs	r3, r0
 8015592:	001a      	movs	r2, r3
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	789b      	ldrb	r3, [r3, #2]
 801559c:	0018      	movs	r0, r3
 801559e:	f000 f97b 	bl	8015898 <RTC_Bcd2ToByte>
 80155a2:	0003      	movs	r3, r0
 80155a4:	001a      	movs	r2, r3
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80155aa:	2300      	movs	r3, #0
}
 80155ac:	0018      	movs	r0, r3
 80155ae:	46bd      	mov	sp, r7
 80155b0:	b006      	add	sp, #24
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	40002800 	.word	0x40002800
 80155b8:	007f7f7f 	.word	0x007f7f7f

080155bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80155bc:	b590      	push	{r4, r7, lr}
 80155be:	b087      	sub	sp, #28
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	222c      	movs	r2, #44	@ 0x2c
 80155cc:	5c9b      	ldrb	r3, [r3, r2]
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d101      	bne.n	80155d6 <HAL_RTC_SetDate+0x1a>
 80155d2:	2302      	movs	r3, #2
 80155d4:	e090      	b.n	80156f8 <HAL_RTC_SetDate+0x13c>
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	222c      	movs	r2, #44	@ 0x2c
 80155da:	2101      	movs	r1, #1
 80155dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	222d      	movs	r2, #45	@ 0x2d
 80155e2:	2102      	movs	r1, #2
 80155e4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d10e      	bne.n	801560a <HAL_RTC_SetDate+0x4e>
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	785b      	ldrb	r3, [r3, #1]
 80155f0:	001a      	movs	r2, r3
 80155f2:	2310      	movs	r3, #16
 80155f4:	4013      	ands	r3, r2
 80155f6:	d008      	beq.n	801560a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	785b      	ldrb	r3, [r3, #1]
 80155fc:	2210      	movs	r2, #16
 80155fe:	4393      	bics	r3, r2
 8015600:	b2db      	uxtb	r3, r3
 8015602:	330a      	adds	r3, #10
 8015604:	b2da      	uxtb	r2, r3
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d11c      	bne.n	801564a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	78db      	ldrb	r3, [r3, #3]
 8015614:	0018      	movs	r0, r3
 8015616:	f000 f917 	bl	8015848 <RTC_ByteToBcd2>
 801561a:	0003      	movs	r3, r0
 801561c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	785b      	ldrb	r3, [r3, #1]
 8015622:	0018      	movs	r0, r3
 8015624:	f000 f910 	bl	8015848 <RTC_ByteToBcd2>
 8015628:	0003      	movs	r3, r0
 801562a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801562c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	789b      	ldrb	r3, [r3, #2]
 8015632:	0018      	movs	r0, r3
 8015634:	f000 f908 	bl	8015848 <RTC_ByteToBcd2>
 8015638:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801563a:	0022      	movs	r2, r4
 801563c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015644:	4313      	orrs	r3, r2
 8015646:	617b      	str	r3, [r7, #20]
 8015648:	e00e      	b.n	8015668 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	78db      	ldrb	r3, [r3, #3]
 801564e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	785b      	ldrb	r3, [r3, #1]
 8015654:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015656:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8015658:	68ba      	ldr	r2, [r7, #8]
 801565a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801565c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015664:	4313      	orrs	r3, r2
 8015666:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015668:	4b25      	ldr	r3, [pc, #148]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 801566a:	22ca      	movs	r2, #202	@ 0xca
 801566c:	625a      	str	r2, [r3, #36]	@ 0x24
 801566e:	4b24      	ldr	r3, [pc, #144]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 8015670:	2253      	movs	r2, #83	@ 0x53
 8015672:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	0018      	movs	r0, r3
 8015678:	f000 f8ba 	bl	80157f0 <RTC_EnterInitMode>
 801567c:	1e03      	subs	r3, r0, #0
 801567e:	d00c      	beq.n	801569a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015680:	4b1f      	ldr	r3, [pc, #124]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 8015682:	22ff      	movs	r2, #255	@ 0xff
 8015684:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	222d      	movs	r2, #45	@ 0x2d
 801568a:	2104      	movs	r1, #4
 801568c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	222c      	movs	r2, #44	@ 0x2c
 8015692:	2100      	movs	r1, #0
 8015694:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8015696:	2301      	movs	r3, #1
 8015698:	e02e      	b.n	80156f8 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 801569a:	4b19      	ldr	r3, [pc, #100]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 801569c:	697a      	ldr	r2, [r7, #20]
 801569e:	4919      	ldr	r1, [pc, #100]	@ (8015704 <HAL_RTC_SetDate+0x148>)
 80156a0:	400a      	ands	r2, r1
 80156a2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80156a4:	4b16      	ldr	r3, [pc, #88]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 80156a6:	68da      	ldr	r2, [r3, #12]
 80156a8:	4b15      	ldr	r3, [pc, #84]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 80156aa:	2180      	movs	r1, #128	@ 0x80
 80156ac:	438a      	bics	r2, r1
 80156ae:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80156b0:	4b13      	ldr	r3, [pc, #76]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 80156b2:	699b      	ldr	r3, [r3, #24]
 80156b4:	2220      	movs	r2, #32
 80156b6:	4013      	ands	r3, r2
 80156b8:	d112      	bne.n	80156e0 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	0018      	movs	r0, r3
 80156be:	f000 f871 	bl	80157a4 <HAL_RTC_WaitForSynchro>
 80156c2:	1e03      	subs	r3, r0, #0
 80156c4:	d00c      	beq.n	80156e0 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80156c6:	4b0e      	ldr	r3, [pc, #56]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 80156c8:	22ff      	movs	r2, #255	@ 0xff
 80156ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	222d      	movs	r2, #45	@ 0x2d
 80156d0:	2104      	movs	r1, #4
 80156d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	222c      	movs	r2, #44	@ 0x2c
 80156d8:	2100      	movs	r1, #0
 80156da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80156dc:	2301      	movs	r3, #1
 80156de:	e00b      	b.n	80156f8 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80156e0:	4b07      	ldr	r3, [pc, #28]	@ (8015700 <HAL_RTC_SetDate+0x144>)
 80156e2:	22ff      	movs	r2, #255	@ 0xff
 80156e4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	222d      	movs	r2, #45	@ 0x2d
 80156ea:	2101      	movs	r1, #1
 80156ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	222c      	movs	r2, #44	@ 0x2c
 80156f2:	2100      	movs	r1, #0
 80156f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80156f6:	2300      	movs	r3, #0
  }
}
 80156f8:	0018      	movs	r0, r3
 80156fa:	46bd      	mov	sp, r7
 80156fc:	b007      	add	sp, #28
 80156fe:	bd90      	pop	{r4, r7, pc}
 8015700:	40002800 	.word	0x40002800
 8015704:	00ffff3f 	.word	0x00ffff3f

08015708 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b086      	sub	sp, #24
 801570c:	af00      	add	r7, sp, #0
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8015714:	4b21      	ldr	r3, [pc, #132]	@ (801579c <HAL_RTC_GetDate+0x94>)
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	4a21      	ldr	r2, [pc, #132]	@ (80157a0 <HAL_RTC_GetDate+0x98>)
 801571a:	4013      	ands	r3, r2
 801571c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	0c1b      	lsrs	r3, r3, #16
 8015722:	b2da      	uxtb	r2, r3
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	0a1b      	lsrs	r3, r3, #8
 801572c:	b2db      	uxtb	r3, r3
 801572e:	221f      	movs	r2, #31
 8015730:	4013      	ands	r3, r2
 8015732:	b2da      	uxtb	r2, r3
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	b2db      	uxtb	r3, r3
 801573c:	223f      	movs	r2, #63	@ 0x3f
 801573e:	4013      	ands	r3, r2
 8015740:	b2da      	uxtb	r2, r3
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	0b5b      	lsrs	r3, r3, #13
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2207      	movs	r2, #7
 801574e:	4013      	ands	r3, r2
 8015750:	b2da      	uxtb	r2, r3
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d11a      	bne.n	8015792 <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	78db      	ldrb	r3, [r3, #3]
 8015760:	0018      	movs	r0, r3
 8015762:	f000 f899 	bl	8015898 <RTC_Bcd2ToByte>
 8015766:	0003      	movs	r3, r0
 8015768:	001a      	movs	r2, r3
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801576e:	68bb      	ldr	r3, [r7, #8]
 8015770:	785b      	ldrb	r3, [r3, #1]
 8015772:	0018      	movs	r0, r3
 8015774:	f000 f890 	bl	8015898 <RTC_Bcd2ToByte>
 8015778:	0003      	movs	r3, r0
 801577a:	001a      	movs	r2, r3
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	789b      	ldrb	r3, [r3, #2]
 8015784:	0018      	movs	r0, r3
 8015786:	f000 f887 	bl	8015898 <RTC_Bcd2ToByte>
 801578a:	0003      	movs	r3, r0
 801578c:	001a      	movs	r2, r3
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015792:	2300      	movs	r3, #0
}
 8015794:	0018      	movs	r0, r3
 8015796:	46bd      	mov	sp, r7
 8015798:	b006      	add	sp, #24
 801579a:	bd80      	pop	{r7, pc}
 801579c:	40002800 	.word	0x40002800
 80157a0:	00ffff3f 	.word	0x00ffff3f

080157a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80157ac:	4b0f      	ldr	r3, [pc, #60]	@ (80157ec <HAL_RTC_WaitForSynchro+0x48>)
 80157ae:	68da      	ldr	r2, [r3, #12]
 80157b0:	4b0e      	ldr	r3, [pc, #56]	@ (80157ec <HAL_RTC_WaitForSynchro+0x48>)
 80157b2:	2120      	movs	r1, #32
 80157b4:	438a      	bics	r2, r1
 80157b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80157b8:	f7f9 f830 	bl	800e81c <HAL_GetTick>
 80157bc:	0003      	movs	r3, r0
 80157be:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80157c0:	e00a      	b.n	80157d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80157c2:	f7f9 f82b 	bl	800e81c <HAL_GetTick>
 80157c6:	0002      	movs	r2, r0
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	1ad2      	subs	r2, r2, r3
 80157cc:	23fa      	movs	r3, #250	@ 0xfa
 80157ce:	009b      	lsls	r3, r3, #2
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d901      	bls.n	80157d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80157d4:	2303      	movs	r3, #3
 80157d6:	e005      	b.n	80157e4 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80157d8:	4b04      	ldr	r3, [pc, #16]	@ (80157ec <HAL_RTC_WaitForSynchro+0x48>)
 80157da:	68db      	ldr	r3, [r3, #12]
 80157dc:	2220      	movs	r2, #32
 80157de:	4013      	ands	r3, r2
 80157e0:	d0ef      	beq.n	80157c2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80157e2:	2300      	movs	r3, #0
}
 80157e4:	0018      	movs	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	b004      	add	sp, #16
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	40002800 	.word	0x40002800

080157f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b084      	sub	sp, #16
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80157f8:	4b12      	ldr	r3, [pc, #72]	@ (8015844 <RTC_EnterInitMode+0x54>)
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	2240      	movs	r2, #64	@ 0x40
 80157fe:	4013      	ands	r3, r2
 8015800:	d11a      	bne.n	8015838 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8015802:	4b10      	ldr	r3, [pc, #64]	@ (8015844 <RTC_EnterInitMode+0x54>)
 8015804:	68da      	ldr	r2, [r3, #12]
 8015806:	4b0f      	ldr	r3, [pc, #60]	@ (8015844 <RTC_EnterInitMode+0x54>)
 8015808:	2180      	movs	r1, #128	@ 0x80
 801580a:	430a      	orrs	r2, r1
 801580c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801580e:	f7f9 f805 	bl	800e81c <HAL_GetTick>
 8015812:	0003      	movs	r3, r0
 8015814:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8015816:	e00a      	b.n	801582e <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8015818:	f7f9 f800 	bl	800e81c <HAL_GetTick>
 801581c:	0002      	movs	r2, r0
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	1ad2      	subs	r2, r2, r3
 8015822:	23fa      	movs	r3, #250	@ 0xfa
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	429a      	cmp	r2, r3
 8015828:	d901      	bls.n	801582e <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 801582a:	2303      	movs	r3, #3
 801582c:	e005      	b.n	801583a <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 801582e:	4b05      	ldr	r3, [pc, #20]	@ (8015844 <RTC_EnterInitMode+0x54>)
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	2240      	movs	r2, #64	@ 0x40
 8015834:	4013      	ands	r3, r2
 8015836:	d0ef      	beq.n	8015818 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8015838:	2300      	movs	r3, #0
}
 801583a:	0018      	movs	r0, r3
 801583c:	46bd      	mov	sp, r7
 801583e:	b004      	add	sp, #16
 8015840:	bd80      	pop	{r7, pc}
 8015842:	46c0      	nop			@ (mov r8, r8)
 8015844:	40002800 	.word	0x40002800

08015848 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	0002      	movs	r2, r0
 8015850:	1dfb      	adds	r3, r7, #7
 8015852:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015854:	2300      	movs	r3, #0
 8015856:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8015858:	230b      	movs	r3, #11
 801585a:	18fb      	adds	r3, r7, r3
 801585c:	1dfa      	adds	r2, r7, #7
 801585e:	7812      	ldrb	r2, [r2, #0]
 8015860:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8015862:	e008      	b.n	8015876 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	3301      	adds	r3, #1
 8015868:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 801586a:	220b      	movs	r2, #11
 801586c:	18bb      	adds	r3, r7, r2
 801586e:	18ba      	adds	r2, r7, r2
 8015870:	7812      	ldrb	r2, [r2, #0]
 8015872:	3a0a      	subs	r2, #10
 8015874:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8015876:	210b      	movs	r1, #11
 8015878:	187b      	adds	r3, r7, r1
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	2b09      	cmp	r3, #9
 801587e:	d8f1      	bhi.n	8015864 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	b2db      	uxtb	r3, r3
 8015884:	011b      	lsls	r3, r3, #4
 8015886:	b2da      	uxtb	r2, r3
 8015888:	187b      	adds	r3, r7, r1
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	4313      	orrs	r3, r2
 801588e:	b2db      	uxtb	r3, r3
}
 8015890:	0018      	movs	r0, r3
 8015892:	46bd      	mov	sp, r7
 8015894:	b004      	add	sp, #16
 8015896:	bd80      	pop	{r7, pc}

08015898 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	0002      	movs	r2, r0
 80158a0:	1dfb      	adds	r3, r7, #7
 80158a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80158a4:	1dfb      	adds	r3, r7, #7
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	091b      	lsrs	r3, r3, #4
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	001a      	movs	r2, r3
 80158ae:	0013      	movs	r3, r2
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	189b      	adds	r3, r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	b2da      	uxtb	r2, r3
 80158bc:	1dfb      	adds	r3, r7, #7
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	210f      	movs	r1, #15
 80158c2:	400b      	ands	r3, r1
 80158c4:	b2db      	uxtb	r3, r3
 80158c6:	18d3      	adds	r3, r2, r3
 80158c8:	b2db      	uxtb	r3, r3
}
 80158ca:	0018      	movs	r0, r3
 80158cc:	46bd      	mov	sp, r7
 80158ce:	b004      	add	sp, #16
 80158d0:	bd80      	pop	{r7, pc}
	...

080158d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b086      	sub	sp, #24
 80158d8:	af00      	add	r7, sp, #0
 80158da:	60f8      	str	r0, [r7, #12]
 80158dc:	60b9      	str	r1, [r7, #8]
 80158de:	607a      	str	r2, [r7, #4]
 80158e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	222c      	movs	r2, #44	@ 0x2c
 80158e6:	5c9b      	ldrb	r3, [r3, r2]
 80158e8:	2b01      	cmp	r3, #1
 80158ea:	d101      	bne.n	80158f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80158ec:	2302      	movs	r3, #2
 80158ee:	e088      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	222c      	movs	r2, #44	@ 0x2c
 80158f4:	2101      	movs	r1, #1
 80158f6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	222d      	movs	r2, #45	@ 0x2d
 80158fc:	2102      	movs	r1, #2
 80158fe:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8015900:	4b42      	ldr	r3, [pc, #264]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8015902:	699a      	ldr	r2, [r3, #24]
 8015904:	2380      	movs	r3, #128	@ 0x80
 8015906:	00db      	lsls	r3, r3, #3
 8015908:	4013      	ands	r3, r2
 801590a:	d01c      	beq.n	8015946 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 801590c:	f7f8 ff86 	bl	800e81c <HAL_GetTick>
 8015910:	0003      	movs	r3, r0
 8015912:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8015914:	e012      	b.n	801593c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015916:	f7f8 ff81 	bl	800e81c <HAL_GetTick>
 801591a:	0002      	movs	r2, r0
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	1ad2      	subs	r2, r2, r3
 8015920:	23fa      	movs	r3, #250	@ 0xfa
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	429a      	cmp	r2, r3
 8015926:	d909      	bls.n	801593c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	222d      	movs	r2, #45	@ 0x2d
 801592c:	2103      	movs	r1, #3
 801592e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	222c      	movs	r2, #44	@ 0x2c
 8015934:	2100      	movs	r1, #0
 8015936:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015938:	2303      	movs	r3, #3
 801593a:	e062      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 801593c:	4b33      	ldr	r3, [pc, #204]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801593e:	68db      	ldr	r3, [r3, #12]
 8015940:	2204      	movs	r2, #4
 8015942:	4013      	ands	r3, r2
 8015944:	d1e7      	bne.n	8015916 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8015946:	4b31      	ldr	r3, [pc, #196]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8015948:	699a      	ldr	r2, [r3, #24]
 801594a:	4b30      	ldr	r3, [pc, #192]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801594c:	4930      	ldr	r1, [pc, #192]	@ (8015a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 801594e:	400a      	ands	r2, r1
 8015950:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8015952:	4b2e      	ldr	r3, [pc, #184]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8015954:	2204      	movs	r2, #4
 8015956:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8015958:	f7f8 ff60 	bl	800e81c <HAL_GetTick>
 801595c:	0003      	movs	r3, r0
 801595e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8015960:	e015      	b.n	801598e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015962:	f7f8 ff5b 	bl	800e81c <HAL_GetTick>
 8015966:	0002      	movs	r2, r0
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	1ad2      	subs	r2, r2, r3
 801596c:	23fa      	movs	r3, #250	@ 0xfa
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	429a      	cmp	r2, r3
 8015972:	d90c      	bls.n	801598e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015974:	4b25      	ldr	r3, [pc, #148]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8015976:	22ff      	movs	r2, #255	@ 0xff
 8015978:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	222d      	movs	r2, #45	@ 0x2d
 801597e:	2103      	movs	r1, #3
 8015980:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	222c      	movs	r2, #44	@ 0x2c
 8015986:	2100      	movs	r1, #0
 8015988:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801598a:	2303      	movs	r3, #3
 801598c:	e039      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801598e:	4b1f      	ldr	r3, [pc, #124]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	2204      	movs	r2, #4
 8015994:	4013      	ands	r3, r2
 8015996:	d0e4      	beq.n	8015962 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	0419      	lsls	r1, r3, #16
 801599c:	4b1b      	ldr	r3, [pc, #108]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801599e:	68ba      	ldr	r2, [r7, #8]
 80159a0:	430a      	orrs	r2, r1
 80159a2:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80159a4:	4b19      	ldr	r3, [pc, #100]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80159a6:	699b      	ldr	r3, [r3, #24]
 80159a8:	2207      	movs	r2, #7
 80159aa:	4393      	bics	r3, r2
 80159ac:	0019      	movs	r1, r3
 80159ae:	4b17      	ldr	r3, [pc, #92]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	430a      	orrs	r2, r1
 80159b4:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d009      	beq.n	80159d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80159bc:	4a15      	ldr	r2, [pc, #84]	@ (8015a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80159be:	2384      	movs	r3, #132	@ 0x84
 80159c0:	58d3      	ldr	r3, [r2, r3]
 80159c2:	4914      	ldr	r1, [pc, #80]	@ (8015a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80159c4:	2280      	movs	r2, #128	@ 0x80
 80159c6:	0552      	lsls	r2, r2, #21
 80159c8:	4313      	orrs	r3, r2
 80159ca:	2284      	movs	r2, #132	@ 0x84
 80159cc:	508b      	str	r3, [r1, r2]
 80159ce:	e008      	b.n	80159e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80159d0:	4a10      	ldr	r2, [pc, #64]	@ (8015a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80159d2:	2380      	movs	r3, #128	@ 0x80
 80159d4:	58d3      	ldr	r3, [r2, r3]
 80159d6:	490f      	ldr	r1, [pc, #60]	@ (8015a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80159d8:	2280      	movs	r2, #128	@ 0x80
 80159da:	0552      	lsls	r2, r2, #21
 80159dc:	4313      	orrs	r3, r2
 80159de:	2280      	movs	r2, #128	@ 0x80
 80159e0:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80159e2:	4b0a      	ldr	r3, [pc, #40]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80159e4:	699a      	ldr	r2, [r3, #24]
 80159e6:	4b09      	ldr	r3, [pc, #36]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80159e8:	2188      	movs	r1, #136	@ 0x88
 80159ea:	01c9      	lsls	r1, r1, #7
 80159ec:	430a      	orrs	r2, r1
 80159ee:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	222d      	movs	r2, #45	@ 0x2d
 80159f4:	2101      	movs	r1, #1
 80159f6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	222c      	movs	r2, #44	@ 0x2c
 80159fc:	2100      	movs	r1, #0
 80159fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	0018      	movs	r0, r3
 8015a04:	46bd      	mov	sp, r7
 8015a06:	b006      	add	sp, #24
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	46c0      	nop			@ (mov r8, r8)
 8015a0c:	40002800 	.word	0x40002800
 8015a10:	fffffbff 	.word	0xfffffbff
 8015a14:	40021800 	.word	0x40021800

08015a18 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	222c      	movs	r2, #44	@ 0x2c
 8015a24:	5c9b      	ldrb	r3, [r3, r2]
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d101      	bne.n	8015a2e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8015a2a:	2302      	movs	r3, #2
 8015a2c:	e016      	b.n	8015a5c <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	222c      	movs	r2, #44	@ 0x2c
 8015a32:	2101      	movs	r1, #1
 8015a34:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	222d      	movs	r2, #45	@ 0x2d
 8015a3a:	2102      	movs	r1, #2
 8015a3c:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8015a3e:	4b09      	ldr	r3, [pc, #36]	@ (8015a64 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8015a40:	699a      	ldr	r2, [r3, #24]
 8015a42:	4b08      	ldr	r3, [pc, #32]	@ (8015a64 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8015a44:	4908      	ldr	r1, [pc, #32]	@ (8015a68 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8015a46:	400a      	ands	r2, r1
 8015a48:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	222d      	movs	r2, #45	@ 0x2d
 8015a4e:	2101      	movs	r1, #1
 8015a50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	222c      	movs	r2, #44	@ 0x2c
 8015a56:	2100      	movs	r1, #0
 8015a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015a5a:	2300      	movs	r3, #0
}
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	b002      	add	sp, #8
 8015a62:	bd80      	pop	{r7, pc}
 8015a64:	40002800 	.word	0x40002800
 8015a68:	ffffbbff 	.word	0xffffbbff

08015a6c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8015a74:	4b09      	ldr	r3, [pc, #36]	@ (8015a9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8015a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a78:	2204      	movs	r2, #4
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	d006      	beq.n	8015a8c <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8015a7e:	4b07      	ldr	r3, [pc, #28]	@ (8015a9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8015a80:	2204      	movs	r2, #4
 8015a82:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	0018      	movs	r0, r3
 8015a88:	f000 f80a 	bl	8015aa0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	222d      	movs	r2, #45	@ 0x2d
 8015a90:	2101      	movs	r1, #1
 8015a92:	5499      	strb	r1, [r3, r2]
}
 8015a94:	46c0      	nop			@ (mov r8, r8)
 8015a96:	46bd      	mov	sp, r7
 8015a98:	b002      	add	sp, #8
 8015a9a:	bd80      	pop	{r7, pc}
 8015a9c:	40002800 	.word	0x40002800

08015aa0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015aa8:	46c0      	nop			@ (mov r8, r8)
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	b002      	add	sp, #8
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d101      	bne.n	8015ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e04a      	b.n	8015b58 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	223d      	movs	r2, #61	@ 0x3d
 8015ac6:	5c9b      	ldrb	r3, [r3, r2]
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d107      	bne.n	8015ade <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	223c      	movs	r2, #60	@ 0x3c
 8015ad2:	2100      	movs	r1, #0
 8015ad4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	0018      	movs	r0, r3
 8015ada:	f7f3 fe47 	bl	800976c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	223d      	movs	r2, #61	@ 0x3d
 8015ae2:	2102      	movs	r1, #2
 8015ae4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	3304      	adds	r3, #4
 8015aee:	0019      	movs	r1, r3
 8015af0:	0010      	movs	r0, r2
 8015af2:	f000 fbd9 	bl	80162a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2248      	movs	r2, #72	@ 0x48
 8015afa:	2101      	movs	r1, #1
 8015afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	223e      	movs	r2, #62	@ 0x3e
 8015b02:	2101      	movs	r1, #1
 8015b04:	5499      	strb	r1, [r3, r2]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	223f      	movs	r2, #63	@ 0x3f
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	5499      	strb	r1, [r3, r2]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2240      	movs	r2, #64	@ 0x40
 8015b12:	2101      	movs	r1, #1
 8015b14:	5499      	strb	r1, [r3, r2]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2241      	movs	r2, #65	@ 0x41
 8015b1a:	2101      	movs	r1, #1
 8015b1c:	5499      	strb	r1, [r3, r2]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2242      	movs	r2, #66	@ 0x42
 8015b22:	2101      	movs	r1, #1
 8015b24:	5499      	strb	r1, [r3, r2]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2243      	movs	r2, #67	@ 0x43
 8015b2a:	2101      	movs	r1, #1
 8015b2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2244      	movs	r2, #68	@ 0x44
 8015b32:	2101      	movs	r1, #1
 8015b34:	5499      	strb	r1, [r3, r2]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	2245      	movs	r2, #69	@ 0x45
 8015b3a:	2101      	movs	r1, #1
 8015b3c:	5499      	strb	r1, [r3, r2]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2246      	movs	r2, #70	@ 0x46
 8015b42:	2101      	movs	r1, #1
 8015b44:	5499      	strb	r1, [r3, r2]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2247      	movs	r2, #71	@ 0x47
 8015b4a:	2101      	movs	r1, #1
 8015b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	223d      	movs	r2, #61	@ 0x3d
 8015b52:	2101      	movs	r1, #1
 8015b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015b56:	2300      	movs	r3, #0
}
 8015b58:	0018      	movs	r0, r3
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	b002      	add	sp, #8
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d101      	bne.n	8015b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015b6e:	2301      	movs	r3, #1
 8015b70:	e04a      	b.n	8015c08 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	223d      	movs	r2, #61	@ 0x3d
 8015b76:	5c9b      	ldrb	r3, [r3, r2]
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d107      	bne.n	8015b8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	223c      	movs	r2, #60	@ 0x3c
 8015b82:	2100      	movs	r1, #0
 8015b84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	0018      	movs	r0, r3
 8015b8a:	f000 f841 	bl	8015c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	223d      	movs	r2, #61	@ 0x3d
 8015b92:	2102      	movs	r1, #2
 8015b94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	3304      	adds	r3, #4
 8015b9e:	0019      	movs	r1, r3
 8015ba0:	0010      	movs	r0, r2
 8015ba2:	f000 fb81 	bl	80162a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2248      	movs	r2, #72	@ 0x48
 8015baa:	2101      	movs	r1, #1
 8015bac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	223e      	movs	r2, #62	@ 0x3e
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	5499      	strb	r1, [r3, r2]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	223f      	movs	r2, #63	@ 0x3f
 8015bba:	2101      	movs	r1, #1
 8015bbc:	5499      	strb	r1, [r3, r2]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2240      	movs	r2, #64	@ 0x40
 8015bc2:	2101      	movs	r1, #1
 8015bc4:	5499      	strb	r1, [r3, r2]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2241      	movs	r2, #65	@ 0x41
 8015bca:	2101      	movs	r1, #1
 8015bcc:	5499      	strb	r1, [r3, r2]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2242      	movs	r2, #66	@ 0x42
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	5499      	strb	r1, [r3, r2]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	2243      	movs	r2, #67	@ 0x43
 8015bda:	2101      	movs	r1, #1
 8015bdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2244      	movs	r2, #68	@ 0x44
 8015be2:	2101      	movs	r1, #1
 8015be4:	5499      	strb	r1, [r3, r2]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2245      	movs	r2, #69	@ 0x45
 8015bea:	2101      	movs	r1, #1
 8015bec:	5499      	strb	r1, [r3, r2]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2246      	movs	r2, #70	@ 0x46
 8015bf2:	2101      	movs	r1, #1
 8015bf4:	5499      	strb	r1, [r3, r2]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2247      	movs	r2, #71	@ 0x47
 8015bfa:	2101      	movs	r1, #1
 8015bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	223d      	movs	r2, #61	@ 0x3d
 8015c02:	2101      	movs	r1, #1
 8015c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	0018      	movs	r0, r3
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	b002      	add	sp, #8
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8015c18:	46c0      	nop			@ (mov r8, r8)
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	b002      	add	sp, #8
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d108      	bne.n	8015c42 <HAL_TIM_PWM_Start+0x22>
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	223e      	movs	r2, #62	@ 0x3e
 8015c34:	5c9b      	ldrb	r3, [r3, r2]
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	3b01      	subs	r3, #1
 8015c3a:	1e5a      	subs	r2, r3, #1
 8015c3c:	4193      	sbcs	r3, r2
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	e037      	b.n	8015cb2 <HAL_TIM_PWM_Start+0x92>
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	2b04      	cmp	r3, #4
 8015c46:	d108      	bne.n	8015c5a <HAL_TIM_PWM_Start+0x3a>
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	223f      	movs	r2, #63	@ 0x3f
 8015c4c:	5c9b      	ldrb	r3, [r3, r2]
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	3b01      	subs	r3, #1
 8015c52:	1e5a      	subs	r2, r3, #1
 8015c54:	4193      	sbcs	r3, r2
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	e02b      	b.n	8015cb2 <HAL_TIM_PWM_Start+0x92>
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	2b08      	cmp	r3, #8
 8015c5e:	d108      	bne.n	8015c72 <HAL_TIM_PWM_Start+0x52>
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2240      	movs	r2, #64	@ 0x40
 8015c64:	5c9b      	ldrb	r3, [r3, r2]
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	3b01      	subs	r3, #1
 8015c6a:	1e5a      	subs	r2, r3, #1
 8015c6c:	4193      	sbcs	r3, r2
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	e01f      	b.n	8015cb2 <HAL_TIM_PWM_Start+0x92>
 8015c72:	683b      	ldr	r3, [r7, #0]
 8015c74:	2b0c      	cmp	r3, #12
 8015c76:	d108      	bne.n	8015c8a <HAL_TIM_PWM_Start+0x6a>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2241      	movs	r2, #65	@ 0x41
 8015c7c:	5c9b      	ldrb	r3, [r3, r2]
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	3b01      	subs	r3, #1
 8015c82:	1e5a      	subs	r2, r3, #1
 8015c84:	4193      	sbcs	r3, r2
 8015c86:	b2db      	uxtb	r3, r3
 8015c88:	e013      	b.n	8015cb2 <HAL_TIM_PWM_Start+0x92>
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	2b10      	cmp	r3, #16
 8015c8e:	d108      	bne.n	8015ca2 <HAL_TIM_PWM_Start+0x82>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2242      	movs	r2, #66	@ 0x42
 8015c94:	5c9b      	ldrb	r3, [r3, r2]
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	3b01      	subs	r3, #1
 8015c9a:	1e5a      	subs	r2, r3, #1
 8015c9c:	4193      	sbcs	r3, r2
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	e007      	b.n	8015cb2 <HAL_TIM_PWM_Start+0x92>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2243      	movs	r2, #67	@ 0x43
 8015ca6:	5c9b      	ldrb	r3, [r3, r2]
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	3b01      	subs	r3, #1
 8015cac:	1e5a      	subs	r2, r3, #1
 8015cae:	4193      	sbcs	r3, r2
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d001      	beq.n	8015cba <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	e086      	b.n	8015dc8 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d104      	bne.n	8015cca <HAL_TIM_PWM_Start+0xaa>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	223e      	movs	r2, #62	@ 0x3e
 8015cc4:	2102      	movs	r1, #2
 8015cc6:	5499      	strb	r1, [r3, r2]
 8015cc8:	e023      	b.n	8015d12 <HAL_TIM_PWM_Start+0xf2>
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	d104      	bne.n	8015cda <HAL_TIM_PWM_Start+0xba>
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	223f      	movs	r2, #63	@ 0x3f
 8015cd4:	2102      	movs	r1, #2
 8015cd6:	5499      	strb	r1, [r3, r2]
 8015cd8:	e01b      	b.n	8015d12 <HAL_TIM_PWM_Start+0xf2>
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	2b08      	cmp	r3, #8
 8015cde:	d104      	bne.n	8015cea <HAL_TIM_PWM_Start+0xca>
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2240      	movs	r2, #64	@ 0x40
 8015ce4:	2102      	movs	r1, #2
 8015ce6:	5499      	strb	r1, [r3, r2]
 8015ce8:	e013      	b.n	8015d12 <HAL_TIM_PWM_Start+0xf2>
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	2b0c      	cmp	r3, #12
 8015cee:	d104      	bne.n	8015cfa <HAL_TIM_PWM_Start+0xda>
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2241      	movs	r2, #65	@ 0x41
 8015cf4:	2102      	movs	r1, #2
 8015cf6:	5499      	strb	r1, [r3, r2]
 8015cf8:	e00b      	b.n	8015d12 <HAL_TIM_PWM_Start+0xf2>
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	2b10      	cmp	r3, #16
 8015cfe:	d104      	bne.n	8015d0a <HAL_TIM_PWM_Start+0xea>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2242      	movs	r2, #66	@ 0x42
 8015d04:	2102      	movs	r1, #2
 8015d06:	5499      	strb	r1, [r3, r2]
 8015d08:	e003      	b.n	8015d12 <HAL_TIM_PWM_Start+0xf2>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2243      	movs	r2, #67	@ 0x43
 8015d0e:	2102      	movs	r1, #2
 8015d10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	6839      	ldr	r1, [r7, #0]
 8015d18:	2201      	movs	r2, #1
 8015d1a:	0018      	movs	r0, r3
 8015d1c:	f000 fe7a 	bl	8016a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	4a2a      	ldr	r2, [pc, #168]	@ (8015dd0 <HAL_TIM_PWM_Start+0x1b0>)
 8015d26:	4293      	cmp	r3, r2
 8015d28:	d009      	beq.n	8015d3e <HAL_TIM_PWM_Start+0x11e>
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	4a29      	ldr	r2, [pc, #164]	@ (8015dd4 <HAL_TIM_PWM_Start+0x1b4>)
 8015d30:	4293      	cmp	r3, r2
 8015d32:	d004      	beq.n	8015d3e <HAL_TIM_PWM_Start+0x11e>
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	4a27      	ldr	r2, [pc, #156]	@ (8015dd8 <HAL_TIM_PWM_Start+0x1b8>)
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	d101      	bne.n	8015d42 <HAL_TIM_PWM_Start+0x122>
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e000      	b.n	8015d44 <HAL_TIM_PWM_Start+0x124>
 8015d42:	2300      	movs	r3, #0
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d008      	beq.n	8015d5a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2180      	movs	r1, #128	@ 0x80
 8015d54:	0209      	lsls	r1, r1, #8
 8015d56:	430a      	orrs	r2, r1
 8015d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8015dd0 <HAL_TIM_PWM_Start+0x1b0>)
 8015d60:	4293      	cmp	r3, r2
 8015d62:	d00f      	beq.n	8015d84 <HAL_TIM_PWM_Start+0x164>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	2380      	movs	r3, #128	@ 0x80
 8015d6a:	05db      	lsls	r3, r3, #23
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d009      	beq.n	8015d84 <HAL_TIM_PWM_Start+0x164>
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a19      	ldr	r2, [pc, #100]	@ (8015ddc <HAL_TIM_PWM_Start+0x1bc>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d004      	beq.n	8015d84 <HAL_TIM_PWM_Start+0x164>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	4a15      	ldr	r2, [pc, #84]	@ (8015dd4 <HAL_TIM_PWM_Start+0x1b4>)
 8015d80:	4293      	cmp	r3, r2
 8015d82:	d116      	bne.n	8015db2 <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	689b      	ldr	r3, [r3, #8]
 8015d8a:	4a15      	ldr	r2, [pc, #84]	@ (8015de0 <HAL_TIM_PWM_Start+0x1c0>)
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b06      	cmp	r3, #6
 8015d94:	d016      	beq.n	8015dc4 <HAL_TIM_PWM_Start+0x1a4>
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	2380      	movs	r3, #128	@ 0x80
 8015d9a:	025b      	lsls	r3, r3, #9
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d011      	beq.n	8015dc4 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2101      	movs	r1, #1
 8015dac:	430a      	orrs	r2, r1
 8015dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015db0:	e008      	b.n	8015dc4 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	2101      	movs	r1, #1
 8015dbe:	430a      	orrs	r2, r1
 8015dc0:	601a      	str	r2, [r3, #0]
 8015dc2:	e000      	b.n	8015dc6 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015dc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8015dc6:	2300      	movs	r3, #0
}
 8015dc8:	0018      	movs	r0, r3
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	b004      	add	sp, #16
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	40012c00 	.word	0x40012c00
 8015dd4:	40014000 	.word	0x40014000
 8015dd8:	40014400 	.word	0x40014400
 8015ddc:	40000400 	.word	0x40000400
 8015de0:	00010007 	.word	0x00010007

08015de4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	2200      	movs	r2, #0
 8015df6:	0018      	movs	r0, r3
 8015df8:	f000 fe0c 	bl	8016a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4a35      	ldr	r2, [pc, #212]	@ (8015ed8 <HAL_TIM_PWM_Stop+0xf4>)
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d009      	beq.n	8015e1a <HAL_TIM_PWM_Stop+0x36>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a34      	ldr	r2, [pc, #208]	@ (8015edc <HAL_TIM_PWM_Stop+0xf8>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d004      	beq.n	8015e1a <HAL_TIM_PWM_Stop+0x36>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	4a32      	ldr	r2, [pc, #200]	@ (8015ee0 <HAL_TIM_PWM_Stop+0xfc>)
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d101      	bne.n	8015e1e <HAL_TIM_PWM_Stop+0x3a>
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	e000      	b.n	8015e20 <HAL_TIM_PWM_Stop+0x3c>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d013      	beq.n	8015e4c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	6a1b      	ldr	r3, [r3, #32]
 8015e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8015ee4 <HAL_TIM_PWM_Stop+0x100>)
 8015e2c:	4013      	ands	r3, r2
 8015e2e:	d10d      	bne.n	8015e4c <HAL_TIM_PWM_Stop+0x68>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	6a1b      	ldr	r3, [r3, #32]
 8015e36:	4a2c      	ldr	r2, [pc, #176]	@ (8015ee8 <HAL_TIM_PWM_Stop+0x104>)
 8015e38:	4013      	ands	r3, r2
 8015e3a:	d107      	bne.n	8015e4c <HAL_TIM_PWM_Stop+0x68>
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	4929      	ldr	r1, [pc, #164]	@ (8015eec <HAL_TIM_PWM_Stop+0x108>)
 8015e48:	400a      	ands	r2, r1
 8015e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	6a1b      	ldr	r3, [r3, #32]
 8015e52:	4a24      	ldr	r2, [pc, #144]	@ (8015ee4 <HAL_TIM_PWM_Stop+0x100>)
 8015e54:	4013      	ands	r3, r2
 8015e56:	d10d      	bne.n	8015e74 <HAL_TIM_PWM_Stop+0x90>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	6a1b      	ldr	r3, [r3, #32]
 8015e5e:	4a22      	ldr	r2, [pc, #136]	@ (8015ee8 <HAL_TIM_PWM_Stop+0x104>)
 8015e60:	4013      	ands	r3, r2
 8015e62:	d107      	bne.n	8015e74 <HAL_TIM_PWM_Stop+0x90>
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	2101      	movs	r1, #1
 8015e70:	438a      	bics	r2, r1
 8015e72:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d104      	bne.n	8015e84 <HAL_TIM_PWM_Stop+0xa0>
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	223e      	movs	r2, #62	@ 0x3e
 8015e7e:	2101      	movs	r1, #1
 8015e80:	5499      	strb	r1, [r3, r2]
 8015e82:	e023      	b.n	8015ecc <HAL_TIM_PWM_Stop+0xe8>
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	2b04      	cmp	r3, #4
 8015e88:	d104      	bne.n	8015e94 <HAL_TIM_PWM_Stop+0xb0>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	223f      	movs	r2, #63	@ 0x3f
 8015e8e:	2101      	movs	r1, #1
 8015e90:	5499      	strb	r1, [r3, r2]
 8015e92:	e01b      	b.n	8015ecc <HAL_TIM_PWM_Stop+0xe8>
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	2b08      	cmp	r3, #8
 8015e98:	d104      	bne.n	8015ea4 <HAL_TIM_PWM_Stop+0xc0>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2240      	movs	r2, #64	@ 0x40
 8015e9e:	2101      	movs	r1, #1
 8015ea0:	5499      	strb	r1, [r3, r2]
 8015ea2:	e013      	b.n	8015ecc <HAL_TIM_PWM_Stop+0xe8>
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	2b0c      	cmp	r3, #12
 8015ea8:	d104      	bne.n	8015eb4 <HAL_TIM_PWM_Stop+0xd0>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2241      	movs	r2, #65	@ 0x41
 8015eae:	2101      	movs	r1, #1
 8015eb0:	5499      	strb	r1, [r3, r2]
 8015eb2:	e00b      	b.n	8015ecc <HAL_TIM_PWM_Stop+0xe8>
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	2b10      	cmp	r3, #16
 8015eb8:	d104      	bne.n	8015ec4 <HAL_TIM_PWM_Stop+0xe0>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2242      	movs	r2, #66	@ 0x42
 8015ebe:	2101      	movs	r1, #1
 8015ec0:	5499      	strb	r1, [r3, r2]
 8015ec2:	e003      	b.n	8015ecc <HAL_TIM_PWM_Stop+0xe8>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2243      	movs	r2, #67	@ 0x43
 8015ec8:	2101      	movs	r1, #1
 8015eca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015ecc:	2300      	movs	r3, #0
}
 8015ece:	0018      	movs	r0, r3
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	b002      	add	sp, #8
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	46c0      	nop			@ (mov r8, r8)
 8015ed8:	40012c00 	.word	0x40012c00
 8015edc:	40014000 	.word	0x40014000
 8015ee0:	40014400 	.word	0x40014400
 8015ee4:	00001111 	.word	0x00001111
 8015ee8:	00000444 	.word	0x00000444
 8015eec:	ffff7fff 	.word	0xffff7fff

08015ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b086      	sub	sp, #24
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	60f8      	str	r0, [r7, #12]
 8015ef8:	60b9      	str	r1, [r7, #8]
 8015efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015efc:	2317      	movs	r3, #23
 8015efe:	18fb      	adds	r3, r7, r3
 8015f00:	2200      	movs	r2, #0
 8015f02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	223c      	movs	r2, #60	@ 0x3c
 8015f08:	5c9b      	ldrb	r3, [r3, r2]
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d101      	bne.n	8015f12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8015f0e:	2302      	movs	r3, #2
 8015f10:	e0e5      	b.n	80160de <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	223c      	movs	r2, #60	@ 0x3c
 8015f16:	2101      	movs	r1, #1
 8015f18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	2b14      	cmp	r3, #20
 8015f1e:	d900      	bls.n	8015f22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8015f20:	e0d1      	b.n	80160c6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	009a      	lsls	r2, r3, #2
 8015f26:	4b70      	ldr	r3, [pc, #448]	@ (80160e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8015f28:	18d3      	adds	r3, r2, r3
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	0011      	movs	r1, r2
 8015f36:	0018      	movs	r0, r3
 8015f38:	f000 fa34 	bl	80163a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	699a      	ldr	r2, [r3, #24]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2108      	movs	r1, #8
 8015f48:	430a      	orrs	r2, r1
 8015f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	699a      	ldr	r2, [r3, #24]
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2104      	movs	r1, #4
 8015f58:	438a      	bics	r2, r1
 8015f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	6999      	ldr	r1, [r3, #24]
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	691a      	ldr	r2, [r3, #16]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	430a      	orrs	r2, r1
 8015f6c:	619a      	str	r2, [r3, #24]
      break;
 8015f6e:	e0af      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	68ba      	ldr	r2, [r7, #8]
 8015f76:	0011      	movs	r1, r2
 8015f78:	0018      	movs	r0, r3
 8015f7a:	f000 fa93 	bl	80164a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	699a      	ldr	r2, [r3, #24]
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2180      	movs	r1, #128	@ 0x80
 8015f8a:	0109      	lsls	r1, r1, #4
 8015f8c:	430a      	orrs	r2, r1
 8015f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	699a      	ldr	r2, [r3, #24]
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	4954      	ldr	r1, [pc, #336]	@ (80160ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8015f9c:	400a      	ands	r2, r1
 8015f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	6999      	ldr	r1, [r3, #24]
 8015fa6:	68bb      	ldr	r3, [r7, #8]
 8015fa8:	691b      	ldr	r3, [r3, #16]
 8015faa:	021a      	lsls	r2, r3, #8
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	430a      	orrs	r2, r1
 8015fb2:	619a      	str	r2, [r3, #24]
      break;
 8015fb4:	e08c      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	0011      	movs	r1, r2
 8015fbe:	0018      	movs	r0, r3
 8015fc0:	f000 faee 	bl	80165a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	69da      	ldr	r2, [r3, #28]
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	2108      	movs	r1, #8
 8015fd0:	430a      	orrs	r2, r1
 8015fd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	69da      	ldr	r2, [r3, #28]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	2104      	movs	r1, #4
 8015fe0:	438a      	bics	r2, r1
 8015fe2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	69d9      	ldr	r1, [r3, #28]
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	691a      	ldr	r2, [r3, #16]
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	430a      	orrs	r2, r1
 8015ff4:	61da      	str	r2, [r3, #28]
      break;
 8015ff6:	e06b      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	68ba      	ldr	r2, [r7, #8]
 8015ffe:	0011      	movs	r1, r2
 8016000:	0018      	movs	r0, r3
 8016002:	f000 fb4f 	bl	80166a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	69da      	ldr	r2, [r3, #28]
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2180      	movs	r1, #128	@ 0x80
 8016012:	0109      	lsls	r1, r1, #4
 8016014:	430a      	orrs	r2, r1
 8016016:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	69da      	ldr	r2, [r3, #28]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	4932      	ldr	r1, [pc, #200]	@ (80160ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8016024:	400a      	ands	r2, r1
 8016026:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	69d9      	ldr	r1, [r3, #28]
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	691b      	ldr	r3, [r3, #16]
 8016032:	021a      	lsls	r2, r3, #8
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	430a      	orrs	r2, r1
 801603a:	61da      	str	r2, [r3, #28]
      break;
 801603c:	e048      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	68ba      	ldr	r2, [r7, #8]
 8016044:	0011      	movs	r1, r2
 8016046:	0018      	movs	r0, r3
 8016048:	f000 fb90 	bl	801676c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2108      	movs	r1, #8
 8016058:	430a      	orrs	r2, r1
 801605a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	2104      	movs	r1, #4
 8016068:	438a      	bics	r2, r1
 801606a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	691a      	ldr	r2, [r3, #16]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	430a      	orrs	r2, r1
 801607c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801607e:	e027      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	68ba      	ldr	r2, [r7, #8]
 8016086:	0011      	movs	r1, r2
 8016088:	0018      	movs	r0, r3
 801608a:	f000 fbc9 	bl	8016820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2180      	movs	r1, #128	@ 0x80
 801609a:	0109      	lsls	r1, r1, #4
 801609c:	430a      	orrs	r2, r1
 801609e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4910      	ldr	r1, [pc, #64]	@ (80160ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80160ac:	400a      	ands	r2, r1
 80160ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	021a      	lsls	r2, r3, #8
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	430a      	orrs	r2, r1
 80160c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80160c4:	e004      	b.n	80160d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80160c6:	2317      	movs	r3, #23
 80160c8:	18fb      	adds	r3, r7, r3
 80160ca:	2201      	movs	r2, #1
 80160cc:	701a      	strb	r2, [r3, #0]
      break;
 80160ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	223c      	movs	r2, #60	@ 0x3c
 80160d4:	2100      	movs	r1, #0
 80160d6:	5499      	strb	r1, [r3, r2]

  return status;
 80160d8:	2317      	movs	r3, #23
 80160da:	18fb      	adds	r3, r7, r3
 80160dc:	781b      	ldrb	r3, [r3, #0]
}
 80160de:	0018      	movs	r0, r3
 80160e0:	46bd      	mov	sp, r7
 80160e2:	b006      	add	sp, #24
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	46c0      	nop			@ (mov r8, r8)
 80160e8:	08018b58 	.word	0x08018b58
 80160ec:	fffffbff 	.word	0xfffffbff

080160f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80160fa:	230f      	movs	r3, #15
 80160fc:	18fb      	adds	r3, r7, r3
 80160fe:	2200      	movs	r2, #0
 8016100:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	223c      	movs	r2, #60	@ 0x3c
 8016106:	5c9b      	ldrb	r3, [r3, r2]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d101      	bne.n	8016110 <HAL_TIM_ConfigClockSource+0x20>
 801610c:	2302      	movs	r3, #2
 801610e:	e0c0      	b.n	8016292 <HAL_TIM_ConfigClockSource+0x1a2>
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	223c      	movs	r2, #60	@ 0x3c
 8016114:	2101      	movs	r1, #1
 8016116:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	223d      	movs	r2, #61	@ 0x3d
 801611c:	2102      	movs	r1, #2
 801611e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	689b      	ldr	r3, [r3, #8]
 8016126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	4a5c      	ldr	r2, [pc, #368]	@ (801629c <HAL_TIM_ConfigClockSource+0x1ac>)
 801612c:	4013      	ands	r3, r2
 801612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	4a5b      	ldr	r2, [pc, #364]	@ (80162a0 <HAL_TIM_ConfigClockSource+0x1b0>)
 8016134:	4013      	ands	r3, r2
 8016136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	68ba      	ldr	r2, [r7, #8]
 801613e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4a57      	ldr	r2, [pc, #348]	@ (80162a4 <HAL_TIM_ConfigClockSource+0x1b4>)
 8016146:	4293      	cmp	r3, r2
 8016148:	d100      	bne.n	801614c <HAL_TIM_ConfigClockSource+0x5c>
 801614a:	e088      	b.n	801625e <HAL_TIM_ConfigClockSource+0x16e>
 801614c:	4a55      	ldr	r2, [pc, #340]	@ (80162a4 <HAL_TIM_ConfigClockSource+0x1b4>)
 801614e:	4293      	cmp	r3, r2
 8016150:	d900      	bls.n	8016154 <HAL_TIM_ConfigClockSource+0x64>
 8016152:	e08d      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 8016154:	2280      	movs	r2, #128	@ 0x80
 8016156:	0192      	lsls	r2, r2, #6
 8016158:	4293      	cmp	r3, r2
 801615a:	d03c      	beq.n	80161d6 <HAL_TIM_ConfigClockSource+0xe6>
 801615c:	2280      	movs	r2, #128	@ 0x80
 801615e:	0192      	lsls	r2, r2, #6
 8016160:	4293      	cmp	r3, r2
 8016162:	d900      	bls.n	8016166 <HAL_TIM_ConfigClockSource+0x76>
 8016164:	e084      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 8016166:	2280      	movs	r2, #128	@ 0x80
 8016168:	0152      	lsls	r2, r2, #5
 801616a:	4293      	cmp	r3, r2
 801616c:	d100      	bne.n	8016170 <HAL_TIM_ConfigClockSource+0x80>
 801616e:	e084      	b.n	801627a <HAL_TIM_ConfigClockSource+0x18a>
 8016170:	2280      	movs	r2, #128	@ 0x80
 8016172:	0152      	lsls	r2, r2, #5
 8016174:	4293      	cmp	r3, r2
 8016176:	d900      	bls.n	801617a <HAL_TIM_ConfigClockSource+0x8a>
 8016178:	e07a      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 801617a:	2b70      	cmp	r3, #112	@ 0x70
 801617c:	d014      	beq.n	80161a8 <HAL_TIM_ConfigClockSource+0xb8>
 801617e:	d900      	bls.n	8016182 <HAL_TIM_ConfigClockSource+0x92>
 8016180:	e076      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 8016182:	2b60      	cmp	r3, #96	@ 0x60
 8016184:	d04b      	beq.n	801621e <HAL_TIM_ConfigClockSource+0x12e>
 8016186:	d900      	bls.n	801618a <HAL_TIM_ConfigClockSource+0x9a>
 8016188:	e072      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 801618a:	2b50      	cmp	r3, #80	@ 0x50
 801618c:	d037      	beq.n	80161fe <HAL_TIM_ConfigClockSource+0x10e>
 801618e:	d900      	bls.n	8016192 <HAL_TIM_ConfigClockSource+0xa2>
 8016190:	e06e      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 8016192:	2b40      	cmp	r3, #64	@ 0x40
 8016194:	d053      	beq.n	801623e <HAL_TIM_ConfigClockSource+0x14e>
 8016196:	d86b      	bhi.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 8016198:	2b20      	cmp	r3, #32
 801619a:	d060      	beq.n	801625e <HAL_TIM_ConfigClockSource+0x16e>
 801619c:	d868      	bhi.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d05d      	beq.n	801625e <HAL_TIM_ConfigClockSource+0x16e>
 80161a2:	2b10      	cmp	r3, #16
 80161a4:	d05b      	beq.n	801625e <HAL_TIM_ConfigClockSource+0x16e>
 80161a6:	e063      	b.n	8016270 <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80161b8:	f000 fc0c 	bl	80169d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	689b      	ldr	r3, [r3, #8]
 80161c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	2277      	movs	r2, #119	@ 0x77
 80161c8:	4313      	orrs	r3, r2
 80161ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	68ba      	ldr	r2, [r7, #8]
 80161d2:	609a      	str	r2, [r3, #8]
      break;
 80161d4:	e052      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80161e6:	f000 fbf5 	bl	80169d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	689a      	ldr	r2, [r3, #8]
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2180      	movs	r1, #128	@ 0x80
 80161f6:	01c9      	lsls	r1, r1, #7
 80161f8:	430a      	orrs	r2, r1
 80161fa:	609a      	str	r2, [r3, #8]
      break;
 80161fc:	e03e      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801620a:	001a      	movs	r2, r3
 801620c:	f000 fb66 	bl	80168dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2150      	movs	r1, #80	@ 0x50
 8016216:	0018      	movs	r0, r3
 8016218:	f000 fbc0 	bl	801699c <TIM_ITRx_SetConfig>
      break;
 801621c:	e02e      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801622a:	001a      	movs	r2, r3
 801622c:	f000 fb84 	bl	8016938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2160      	movs	r1, #96	@ 0x60
 8016236:	0018      	movs	r0, r3
 8016238:	f000 fbb0 	bl	801699c <TIM_ITRx_SetConfig>
      break;
 801623c:	e01e      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801624a:	001a      	movs	r2, r3
 801624c:	f000 fb46 	bl	80168dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2140      	movs	r1, #64	@ 0x40
 8016256:	0018      	movs	r0, r3
 8016258:	f000 fba0 	bl	801699c <TIM_ITRx_SetConfig>
      break;
 801625c:	e00e      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	0019      	movs	r1, r3
 8016268:	0010      	movs	r0, r2
 801626a:	f000 fb97 	bl	801699c <TIM_ITRx_SetConfig>
      break;
 801626e:	e005      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 8016270:	230f      	movs	r3, #15
 8016272:	18fb      	adds	r3, r7, r3
 8016274:	2201      	movs	r2, #1
 8016276:	701a      	strb	r2, [r3, #0]
      break;
 8016278:	e000      	b.n	801627c <HAL_TIM_ConfigClockSource+0x18c>
      break;
 801627a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	223d      	movs	r2, #61	@ 0x3d
 8016280:	2101      	movs	r1, #1
 8016282:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	223c      	movs	r2, #60	@ 0x3c
 8016288:	2100      	movs	r1, #0
 801628a:	5499      	strb	r1, [r3, r2]

  return status;
 801628c:	230f      	movs	r3, #15
 801628e:	18fb      	adds	r3, r7, r3
 8016290:	781b      	ldrb	r3, [r3, #0]
}
 8016292:	0018      	movs	r0, r3
 8016294:	46bd      	mov	sp, r7
 8016296:	b004      	add	sp, #16
 8016298:	bd80      	pop	{r7, pc}
 801629a:	46c0      	nop			@ (mov r8, r8)
 801629c:	ffceff88 	.word	0xffceff88
 80162a0:	ffff00ff 	.word	0xffff00ff
 80162a4:	00100030 	.word	0x00100030

080162a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	4a35      	ldr	r2, [pc, #212]	@ (8016390 <TIM_Base_SetConfig+0xe8>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d008      	beq.n	80162d2 <TIM_Base_SetConfig+0x2a>
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	2380      	movs	r3, #128	@ 0x80
 80162c4:	05db      	lsls	r3, r3, #23
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d003      	beq.n	80162d2 <TIM_Base_SetConfig+0x2a>
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4a31      	ldr	r2, [pc, #196]	@ (8016394 <TIM_Base_SetConfig+0xec>)
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d108      	bne.n	80162e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	2270      	movs	r2, #112	@ 0x70
 80162d6:	4393      	bics	r3, r2
 80162d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	4313      	orrs	r3, r2
 80162e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	4a2a      	ldr	r2, [pc, #168]	@ (8016390 <TIM_Base_SetConfig+0xe8>)
 80162e8:	4293      	cmp	r3, r2
 80162ea:	d010      	beq.n	801630e <TIM_Base_SetConfig+0x66>
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	2380      	movs	r3, #128	@ 0x80
 80162f0:	05db      	lsls	r3, r3, #23
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d00b      	beq.n	801630e <TIM_Base_SetConfig+0x66>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4a26      	ldr	r2, [pc, #152]	@ (8016394 <TIM_Base_SetConfig+0xec>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d007      	beq.n	801630e <TIM_Base_SetConfig+0x66>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4a25      	ldr	r2, [pc, #148]	@ (8016398 <TIM_Base_SetConfig+0xf0>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d003      	beq.n	801630e <TIM_Base_SetConfig+0x66>
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	4a24      	ldr	r2, [pc, #144]	@ (801639c <TIM_Base_SetConfig+0xf4>)
 801630a:	4293      	cmp	r3, r2
 801630c:	d108      	bne.n	8016320 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	4a23      	ldr	r2, [pc, #140]	@ (80163a0 <TIM_Base_SetConfig+0xf8>)
 8016312:	4013      	ands	r3, r2
 8016314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	68fa      	ldr	r2, [r7, #12]
 801631c:	4313      	orrs	r3, r2
 801631e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2280      	movs	r2, #128	@ 0x80
 8016324:	4393      	bics	r3, r2
 8016326:	001a      	movs	r2, r3
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	695b      	ldr	r3, [r3, #20]
 801632c:	4313      	orrs	r3, r2
 801632e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	689a      	ldr	r2, [r3, #8]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4a11      	ldr	r2, [pc, #68]	@ (8016390 <TIM_Base_SetConfig+0xe8>)
 801634a:	4293      	cmp	r3, r2
 801634c:	d007      	beq.n	801635e <TIM_Base_SetConfig+0xb6>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	4a11      	ldr	r2, [pc, #68]	@ (8016398 <TIM_Base_SetConfig+0xf0>)
 8016352:	4293      	cmp	r3, r2
 8016354:	d003      	beq.n	801635e <TIM_Base_SetConfig+0xb6>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4a10      	ldr	r2, [pc, #64]	@ (801639c <TIM_Base_SetConfig+0xf4>)
 801635a:	4293      	cmp	r3, r2
 801635c:	d103      	bne.n	8016366 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	691a      	ldr	r2, [r3, #16]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2201      	movs	r2, #1
 801636a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	691b      	ldr	r3, [r3, #16]
 8016370:	2201      	movs	r2, #1
 8016372:	4013      	ands	r3, r2
 8016374:	2b01      	cmp	r3, #1
 8016376:	d106      	bne.n	8016386 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	691b      	ldr	r3, [r3, #16]
 801637c:	2201      	movs	r2, #1
 801637e:	4393      	bics	r3, r2
 8016380:	001a      	movs	r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	611a      	str	r2, [r3, #16]
  }
}
 8016386:	46c0      	nop			@ (mov r8, r8)
 8016388:	46bd      	mov	sp, r7
 801638a:	b004      	add	sp, #16
 801638c:	bd80      	pop	{r7, pc}
 801638e:	46c0      	nop			@ (mov r8, r8)
 8016390:	40012c00 	.word	0x40012c00
 8016394:	40000400 	.word	0x40000400
 8016398:	40014000 	.word	0x40014000
 801639c:	40014400 	.word	0x40014400
 80163a0:	fffffcff 	.word	0xfffffcff

080163a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b086      	sub	sp, #24
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6a1b      	ldr	r3, [r3, #32]
 80163b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6a1b      	ldr	r3, [r3, #32]
 80163b8:	2201      	movs	r2, #1
 80163ba:	4393      	bics	r3, r2
 80163bc:	001a      	movs	r2, r3
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	699b      	ldr	r3, [r3, #24]
 80163cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	4a2e      	ldr	r2, [pc, #184]	@ (801648c <TIM_OC1_SetConfig+0xe8>)
 80163d2:	4013      	ands	r3, r2
 80163d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2203      	movs	r2, #3
 80163da:	4393      	bics	r3, r2
 80163dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	68fa      	ldr	r2, [r7, #12]
 80163e4:	4313      	orrs	r3, r2
 80163e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	2202      	movs	r2, #2
 80163ec:	4393      	bics	r3, r2
 80163ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	697a      	ldr	r2, [r7, #20]
 80163f6:	4313      	orrs	r3, r2
 80163f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	4a24      	ldr	r2, [pc, #144]	@ (8016490 <TIM_OC1_SetConfig+0xec>)
 80163fe:	4293      	cmp	r3, r2
 8016400:	d007      	beq.n	8016412 <TIM_OC1_SetConfig+0x6e>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	4a23      	ldr	r2, [pc, #140]	@ (8016494 <TIM_OC1_SetConfig+0xf0>)
 8016406:	4293      	cmp	r3, r2
 8016408:	d003      	beq.n	8016412 <TIM_OC1_SetConfig+0x6e>
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4a22      	ldr	r2, [pc, #136]	@ (8016498 <TIM_OC1_SetConfig+0xf4>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d10c      	bne.n	801642c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	2208      	movs	r2, #8
 8016416:	4393      	bics	r3, r2
 8016418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	697a      	ldr	r2, [r7, #20]
 8016420:	4313      	orrs	r3, r2
 8016422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	2204      	movs	r2, #4
 8016428:	4393      	bics	r3, r2
 801642a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	4a18      	ldr	r2, [pc, #96]	@ (8016490 <TIM_OC1_SetConfig+0xec>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d007      	beq.n	8016444 <TIM_OC1_SetConfig+0xa0>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	4a17      	ldr	r2, [pc, #92]	@ (8016494 <TIM_OC1_SetConfig+0xf0>)
 8016438:	4293      	cmp	r3, r2
 801643a:	d003      	beq.n	8016444 <TIM_OC1_SetConfig+0xa0>
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	4a16      	ldr	r2, [pc, #88]	@ (8016498 <TIM_OC1_SetConfig+0xf4>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d111      	bne.n	8016468 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	4a15      	ldr	r2, [pc, #84]	@ (801649c <TIM_OC1_SetConfig+0xf8>)
 8016448:	4013      	ands	r3, r2
 801644a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	4a14      	ldr	r2, [pc, #80]	@ (80164a0 <TIM_OC1_SetConfig+0xfc>)
 8016450:	4013      	ands	r3, r2
 8016452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	695b      	ldr	r3, [r3, #20]
 8016458:	693a      	ldr	r2, [r7, #16]
 801645a:	4313      	orrs	r3, r2
 801645c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	699b      	ldr	r3, [r3, #24]
 8016462:	693a      	ldr	r2, [r7, #16]
 8016464:	4313      	orrs	r3, r2
 8016466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	693a      	ldr	r2, [r7, #16]
 801646c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	68fa      	ldr	r2, [r7, #12]
 8016472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	685a      	ldr	r2, [r3, #4]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	697a      	ldr	r2, [r7, #20]
 8016480:	621a      	str	r2, [r3, #32]
}
 8016482:	46c0      	nop			@ (mov r8, r8)
 8016484:	46bd      	mov	sp, r7
 8016486:	b006      	add	sp, #24
 8016488:	bd80      	pop	{r7, pc}
 801648a:	46c0      	nop			@ (mov r8, r8)
 801648c:	fffeff8f 	.word	0xfffeff8f
 8016490:	40012c00 	.word	0x40012c00
 8016494:	40014000 	.word	0x40014000
 8016498:	40014400 	.word	0x40014400
 801649c:	fffffeff 	.word	0xfffffeff
 80164a0:	fffffdff 	.word	0xfffffdff

080164a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b086      	sub	sp, #24
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6a1b      	ldr	r3, [r3, #32]
 80164b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6a1b      	ldr	r3, [r3, #32]
 80164b8:	2210      	movs	r2, #16
 80164ba:	4393      	bics	r3, r2
 80164bc:	001a      	movs	r2, r3
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	699b      	ldr	r3, [r3, #24]
 80164cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	4a2c      	ldr	r2, [pc, #176]	@ (8016584 <TIM_OC2_SetConfig+0xe0>)
 80164d2:	4013      	ands	r3, r2
 80164d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	4a2b      	ldr	r2, [pc, #172]	@ (8016588 <TIM_OC2_SetConfig+0xe4>)
 80164da:	4013      	ands	r3, r2
 80164dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	021b      	lsls	r3, r3, #8
 80164e4:	68fa      	ldr	r2, [r7, #12]
 80164e6:	4313      	orrs	r3, r2
 80164e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	2220      	movs	r2, #32
 80164ee:	4393      	bics	r3, r2
 80164f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	689b      	ldr	r3, [r3, #8]
 80164f6:	011b      	lsls	r3, r3, #4
 80164f8:	697a      	ldr	r2, [r7, #20]
 80164fa:	4313      	orrs	r3, r2
 80164fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	4a22      	ldr	r2, [pc, #136]	@ (801658c <TIM_OC2_SetConfig+0xe8>)
 8016502:	4293      	cmp	r3, r2
 8016504:	d10d      	bne.n	8016522 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	2280      	movs	r2, #128	@ 0x80
 801650a:	4393      	bics	r3, r2
 801650c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	68db      	ldr	r3, [r3, #12]
 8016512:	011b      	lsls	r3, r3, #4
 8016514:	697a      	ldr	r2, [r7, #20]
 8016516:	4313      	orrs	r3, r2
 8016518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	2240      	movs	r2, #64	@ 0x40
 801651e:	4393      	bics	r3, r2
 8016520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	4a19      	ldr	r2, [pc, #100]	@ (801658c <TIM_OC2_SetConfig+0xe8>)
 8016526:	4293      	cmp	r3, r2
 8016528:	d007      	beq.n	801653a <TIM_OC2_SetConfig+0x96>
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	4a18      	ldr	r2, [pc, #96]	@ (8016590 <TIM_OC2_SetConfig+0xec>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d003      	beq.n	801653a <TIM_OC2_SetConfig+0x96>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	4a17      	ldr	r2, [pc, #92]	@ (8016594 <TIM_OC2_SetConfig+0xf0>)
 8016536:	4293      	cmp	r3, r2
 8016538:	d113      	bne.n	8016562 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	4a16      	ldr	r2, [pc, #88]	@ (8016598 <TIM_OC2_SetConfig+0xf4>)
 801653e:	4013      	ands	r3, r2
 8016540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	4a15      	ldr	r2, [pc, #84]	@ (801659c <TIM_OC2_SetConfig+0xf8>)
 8016546:	4013      	ands	r3, r2
 8016548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	695b      	ldr	r3, [r3, #20]
 801654e:	009b      	lsls	r3, r3, #2
 8016550:	693a      	ldr	r2, [r7, #16]
 8016552:	4313      	orrs	r3, r2
 8016554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	699b      	ldr	r3, [r3, #24]
 801655a:	009b      	lsls	r3, r3, #2
 801655c:	693a      	ldr	r2, [r7, #16]
 801655e:	4313      	orrs	r3, r2
 8016560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	693a      	ldr	r2, [r7, #16]
 8016566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	685a      	ldr	r2, [r3, #4]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	697a      	ldr	r2, [r7, #20]
 801657a:	621a      	str	r2, [r3, #32]
}
 801657c:	46c0      	nop			@ (mov r8, r8)
 801657e:	46bd      	mov	sp, r7
 8016580:	b006      	add	sp, #24
 8016582:	bd80      	pop	{r7, pc}
 8016584:	feff8fff 	.word	0xfeff8fff
 8016588:	fffffcff 	.word	0xfffffcff
 801658c:	40012c00 	.word	0x40012c00
 8016590:	40014000 	.word	0x40014000
 8016594:	40014400 	.word	0x40014400
 8016598:	fffffbff 	.word	0xfffffbff
 801659c:	fffff7ff 	.word	0xfffff7ff

080165a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b086      	sub	sp, #24
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	6a1b      	ldr	r3, [r3, #32]
 80165ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6a1b      	ldr	r3, [r3, #32]
 80165b4:	4a31      	ldr	r2, [pc, #196]	@ (801667c <TIM_OC3_SetConfig+0xdc>)
 80165b6:	401a      	ands	r2, r3
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	69db      	ldr	r3, [r3, #28]
 80165c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	4a2d      	ldr	r2, [pc, #180]	@ (8016680 <TIM_OC3_SetConfig+0xe0>)
 80165cc:	4013      	ands	r3, r2
 80165ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	2203      	movs	r2, #3
 80165d4:	4393      	bics	r3, r2
 80165d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	68fa      	ldr	r2, [r7, #12]
 80165de:	4313      	orrs	r3, r2
 80165e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	4a27      	ldr	r2, [pc, #156]	@ (8016684 <TIM_OC3_SetConfig+0xe4>)
 80165e6:	4013      	ands	r3, r2
 80165e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	689b      	ldr	r3, [r3, #8]
 80165ee:	021b      	lsls	r3, r3, #8
 80165f0:	697a      	ldr	r2, [r7, #20]
 80165f2:	4313      	orrs	r3, r2
 80165f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	4a23      	ldr	r2, [pc, #140]	@ (8016688 <TIM_OC3_SetConfig+0xe8>)
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d10d      	bne.n	801661a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	4a22      	ldr	r2, [pc, #136]	@ (801668c <TIM_OC3_SetConfig+0xec>)
 8016602:	4013      	ands	r3, r2
 8016604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	021b      	lsls	r3, r3, #8
 801660c:	697a      	ldr	r2, [r7, #20]
 801660e:	4313      	orrs	r3, r2
 8016610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	4a1e      	ldr	r2, [pc, #120]	@ (8016690 <TIM_OC3_SetConfig+0xf0>)
 8016616:	4013      	ands	r3, r2
 8016618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	4a1a      	ldr	r2, [pc, #104]	@ (8016688 <TIM_OC3_SetConfig+0xe8>)
 801661e:	4293      	cmp	r3, r2
 8016620:	d007      	beq.n	8016632 <TIM_OC3_SetConfig+0x92>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4a1b      	ldr	r2, [pc, #108]	@ (8016694 <TIM_OC3_SetConfig+0xf4>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d003      	beq.n	8016632 <TIM_OC3_SetConfig+0x92>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4a1a      	ldr	r2, [pc, #104]	@ (8016698 <TIM_OC3_SetConfig+0xf8>)
 801662e:	4293      	cmp	r3, r2
 8016630:	d113      	bne.n	801665a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	4a19      	ldr	r2, [pc, #100]	@ (801669c <TIM_OC3_SetConfig+0xfc>)
 8016636:	4013      	ands	r3, r2
 8016638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	4a18      	ldr	r2, [pc, #96]	@ (80166a0 <TIM_OC3_SetConfig+0x100>)
 801663e:	4013      	ands	r3, r2
 8016640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	695b      	ldr	r3, [r3, #20]
 8016646:	011b      	lsls	r3, r3, #4
 8016648:	693a      	ldr	r2, [r7, #16]
 801664a:	4313      	orrs	r3, r2
 801664c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	699b      	ldr	r3, [r3, #24]
 8016652:	011b      	lsls	r3, r3, #4
 8016654:	693a      	ldr	r2, [r7, #16]
 8016656:	4313      	orrs	r3, r2
 8016658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	693a      	ldr	r2, [r7, #16]
 801665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	685a      	ldr	r2, [r3, #4]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	697a      	ldr	r2, [r7, #20]
 8016672:	621a      	str	r2, [r3, #32]
}
 8016674:	46c0      	nop			@ (mov r8, r8)
 8016676:	46bd      	mov	sp, r7
 8016678:	b006      	add	sp, #24
 801667a:	bd80      	pop	{r7, pc}
 801667c:	fffffeff 	.word	0xfffffeff
 8016680:	fffeff8f 	.word	0xfffeff8f
 8016684:	fffffdff 	.word	0xfffffdff
 8016688:	40012c00 	.word	0x40012c00
 801668c:	fffff7ff 	.word	0xfffff7ff
 8016690:	fffffbff 	.word	0xfffffbff
 8016694:	40014000 	.word	0x40014000
 8016698:	40014400 	.word	0x40014400
 801669c:	ffffefff 	.word	0xffffefff
 80166a0:	ffffdfff 	.word	0xffffdfff

080166a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b086      	sub	sp, #24
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	6a1b      	ldr	r3, [r3, #32]
 80166b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	6a1b      	ldr	r3, [r3, #32]
 80166b8:	4a24      	ldr	r2, [pc, #144]	@ (801674c <TIM_OC4_SetConfig+0xa8>)
 80166ba:	401a      	ands	r2, r3
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	69db      	ldr	r3, [r3, #28]
 80166ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	4a20      	ldr	r2, [pc, #128]	@ (8016750 <TIM_OC4_SetConfig+0xac>)
 80166d0:	4013      	ands	r3, r2
 80166d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	4a1f      	ldr	r2, [pc, #124]	@ (8016754 <TIM_OC4_SetConfig+0xb0>)
 80166d8:	4013      	ands	r3, r2
 80166da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	021b      	lsls	r3, r3, #8
 80166e2:	68fa      	ldr	r2, [r7, #12]
 80166e4:	4313      	orrs	r3, r2
 80166e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	4a1b      	ldr	r2, [pc, #108]	@ (8016758 <TIM_OC4_SetConfig+0xb4>)
 80166ec:	4013      	ands	r3, r2
 80166ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	689b      	ldr	r3, [r3, #8]
 80166f4:	031b      	lsls	r3, r3, #12
 80166f6:	693a      	ldr	r2, [r7, #16]
 80166f8:	4313      	orrs	r3, r2
 80166fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	4a17      	ldr	r2, [pc, #92]	@ (801675c <TIM_OC4_SetConfig+0xb8>)
 8016700:	4293      	cmp	r3, r2
 8016702:	d007      	beq.n	8016714 <TIM_OC4_SetConfig+0x70>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	4a16      	ldr	r2, [pc, #88]	@ (8016760 <TIM_OC4_SetConfig+0xbc>)
 8016708:	4293      	cmp	r3, r2
 801670a:	d003      	beq.n	8016714 <TIM_OC4_SetConfig+0x70>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	4a15      	ldr	r2, [pc, #84]	@ (8016764 <TIM_OC4_SetConfig+0xc0>)
 8016710:	4293      	cmp	r3, r2
 8016712:	d109      	bne.n	8016728 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016714:	697b      	ldr	r3, [r7, #20]
 8016716:	4a14      	ldr	r2, [pc, #80]	@ (8016768 <TIM_OC4_SetConfig+0xc4>)
 8016718:	4013      	ands	r3, r2
 801671a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	695b      	ldr	r3, [r3, #20]
 8016720:	019b      	lsls	r3, r3, #6
 8016722:	697a      	ldr	r2, [r7, #20]
 8016724:	4313      	orrs	r3, r2
 8016726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	697a      	ldr	r2, [r7, #20]
 801672c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	68fa      	ldr	r2, [r7, #12]
 8016732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	685a      	ldr	r2, [r3, #4]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	693a      	ldr	r2, [r7, #16]
 8016740:	621a      	str	r2, [r3, #32]
}
 8016742:	46c0      	nop			@ (mov r8, r8)
 8016744:	46bd      	mov	sp, r7
 8016746:	b006      	add	sp, #24
 8016748:	bd80      	pop	{r7, pc}
 801674a:	46c0      	nop			@ (mov r8, r8)
 801674c:	ffffefff 	.word	0xffffefff
 8016750:	feff8fff 	.word	0xfeff8fff
 8016754:	fffffcff 	.word	0xfffffcff
 8016758:	ffffdfff 	.word	0xffffdfff
 801675c:	40012c00 	.word	0x40012c00
 8016760:	40014000 	.word	0x40014000
 8016764:	40014400 	.word	0x40014400
 8016768:	ffffbfff 	.word	0xffffbfff

0801676c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b086      	sub	sp, #24
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
 8016774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6a1b      	ldr	r3, [r3, #32]
 801677a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	6a1b      	ldr	r3, [r3, #32]
 8016780:	4a21      	ldr	r2, [pc, #132]	@ (8016808 <TIM_OC5_SetConfig+0x9c>)
 8016782:	401a      	ands	r2, r3
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	4a1d      	ldr	r2, [pc, #116]	@ (801680c <TIM_OC5_SetConfig+0xa0>)
 8016798:	4013      	ands	r3, r2
 801679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	68fa      	ldr	r2, [r7, #12]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	4a19      	ldr	r2, [pc, #100]	@ (8016810 <TIM_OC5_SetConfig+0xa4>)
 80167aa:	4013      	ands	r3, r2
 80167ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	689b      	ldr	r3, [r3, #8]
 80167b2:	041b      	lsls	r3, r3, #16
 80167b4:	693a      	ldr	r2, [r7, #16]
 80167b6:	4313      	orrs	r3, r2
 80167b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4a15      	ldr	r2, [pc, #84]	@ (8016814 <TIM_OC5_SetConfig+0xa8>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d007      	beq.n	80167d2 <TIM_OC5_SetConfig+0x66>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4a14      	ldr	r2, [pc, #80]	@ (8016818 <TIM_OC5_SetConfig+0xac>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d003      	beq.n	80167d2 <TIM_OC5_SetConfig+0x66>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4a13      	ldr	r2, [pc, #76]	@ (801681c <TIM_OC5_SetConfig+0xb0>)
 80167ce:	4293      	cmp	r3, r2
 80167d0:	d109      	bne.n	80167e6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	4a0c      	ldr	r2, [pc, #48]	@ (8016808 <TIM_OC5_SetConfig+0x9c>)
 80167d6:	4013      	ands	r3, r2
 80167d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	695b      	ldr	r3, [r3, #20]
 80167de:	021b      	lsls	r3, r3, #8
 80167e0:	697a      	ldr	r2, [r7, #20]
 80167e2:	4313      	orrs	r3, r2
 80167e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	697a      	ldr	r2, [r7, #20]
 80167ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	68fa      	ldr	r2, [r7, #12]
 80167f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	685a      	ldr	r2, [r3, #4]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	693a      	ldr	r2, [r7, #16]
 80167fe:	621a      	str	r2, [r3, #32]
}
 8016800:	46c0      	nop			@ (mov r8, r8)
 8016802:	46bd      	mov	sp, r7
 8016804:	b006      	add	sp, #24
 8016806:	bd80      	pop	{r7, pc}
 8016808:	fffeffff 	.word	0xfffeffff
 801680c:	fffeff8f 	.word	0xfffeff8f
 8016810:	fffdffff 	.word	0xfffdffff
 8016814:	40012c00 	.word	0x40012c00
 8016818:	40014000 	.word	0x40014000
 801681c:	40014400 	.word	0x40014400

08016820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b086      	sub	sp, #24
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6a1b      	ldr	r3, [r3, #32]
 801682e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6a1b      	ldr	r3, [r3, #32]
 8016834:	4a22      	ldr	r2, [pc, #136]	@ (80168c0 <TIM_OC6_SetConfig+0xa0>)
 8016836:	401a      	ands	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	4a1e      	ldr	r2, [pc, #120]	@ (80168c4 <TIM_OC6_SetConfig+0xa4>)
 801684c:	4013      	ands	r3, r2
 801684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	021b      	lsls	r3, r3, #8
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	4313      	orrs	r3, r2
 801685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	4a1a      	ldr	r2, [pc, #104]	@ (80168c8 <TIM_OC6_SetConfig+0xa8>)
 8016860:	4013      	ands	r3, r2
 8016862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	689b      	ldr	r3, [r3, #8]
 8016868:	051b      	lsls	r3, r3, #20
 801686a:	693a      	ldr	r2, [r7, #16]
 801686c:	4313      	orrs	r3, r2
 801686e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	4a16      	ldr	r2, [pc, #88]	@ (80168cc <TIM_OC6_SetConfig+0xac>)
 8016874:	4293      	cmp	r3, r2
 8016876:	d007      	beq.n	8016888 <TIM_OC6_SetConfig+0x68>
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	4a15      	ldr	r2, [pc, #84]	@ (80168d0 <TIM_OC6_SetConfig+0xb0>)
 801687c:	4293      	cmp	r3, r2
 801687e:	d003      	beq.n	8016888 <TIM_OC6_SetConfig+0x68>
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	4a14      	ldr	r2, [pc, #80]	@ (80168d4 <TIM_OC6_SetConfig+0xb4>)
 8016884:	4293      	cmp	r3, r2
 8016886:	d109      	bne.n	801689c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	4a13      	ldr	r2, [pc, #76]	@ (80168d8 <TIM_OC6_SetConfig+0xb8>)
 801688c:	4013      	ands	r3, r2
 801688e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	695b      	ldr	r3, [r3, #20]
 8016894:	029b      	lsls	r3, r3, #10
 8016896:	697a      	ldr	r2, [r7, #20]
 8016898:	4313      	orrs	r3, r2
 801689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	697a      	ldr	r2, [r7, #20]
 80168a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	685a      	ldr	r2, [r3, #4]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	693a      	ldr	r2, [r7, #16]
 80168b4:	621a      	str	r2, [r3, #32]
}
 80168b6:	46c0      	nop			@ (mov r8, r8)
 80168b8:	46bd      	mov	sp, r7
 80168ba:	b006      	add	sp, #24
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	46c0      	nop			@ (mov r8, r8)
 80168c0:	ffefffff 	.word	0xffefffff
 80168c4:	feff8fff 	.word	0xfeff8fff
 80168c8:	ffdfffff 	.word	0xffdfffff
 80168cc:	40012c00 	.word	0x40012c00
 80168d0:	40014000 	.word	0x40014000
 80168d4:	40014400 	.word	0x40014400
 80168d8:	fffbffff 	.word	0xfffbffff

080168dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b086      	sub	sp, #24
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	60f8      	str	r0, [r7, #12]
 80168e4:	60b9      	str	r1, [r7, #8]
 80168e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	6a1b      	ldr	r3, [r3, #32]
 80168ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	6a1b      	ldr	r3, [r3, #32]
 80168f2:	2201      	movs	r2, #1
 80168f4:	4393      	bics	r3, r2
 80168f6:	001a      	movs	r2, r3
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	699b      	ldr	r3, [r3, #24]
 8016900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	22f0      	movs	r2, #240	@ 0xf0
 8016906:	4393      	bics	r3, r2
 8016908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	011b      	lsls	r3, r3, #4
 801690e:	693a      	ldr	r2, [r7, #16]
 8016910:	4313      	orrs	r3, r2
 8016912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	220a      	movs	r2, #10
 8016918:	4393      	bics	r3, r2
 801691a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801691c:	697a      	ldr	r2, [r7, #20]
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	4313      	orrs	r3, r2
 8016922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	693a      	ldr	r2, [r7, #16]
 8016928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	697a      	ldr	r2, [r7, #20]
 801692e:	621a      	str	r2, [r3, #32]
}
 8016930:	46c0      	nop			@ (mov r8, r8)
 8016932:	46bd      	mov	sp, r7
 8016934:	b006      	add	sp, #24
 8016936:	bd80      	pop	{r7, pc}

08016938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b086      	sub	sp, #24
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	6a1b      	ldr	r3, [r3, #32]
 8016948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	6a1b      	ldr	r3, [r3, #32]
 801694e:	2210      	movs	r2, #16
 8016950:	4393      	bics	r3, r2
 8016952:	001a      	movs	r2, r3
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	699b      	ldr	r3, [r3, #24]
 801695c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	4a0d      	ldr	r2, [pc, #52]	@ (8016998 <TIM_TI2_ConfigInputStage+0x60>)
 8016962:	4013      	ands	r3, r2
 8016964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	031b      	lsls	r3, r3, #12
 801696a:	693a      	ldr	r2, [r7, #16]
 801696c:	4313      	orrs	r3, r2
 801696e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	22a0      	movs	r2, #160	@ 0xa0
 8016974:	4393      	bics	r3, r2
 8016976:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	011b      	lsls	r3, r3, #4
 801697c:	697a      	ldr	r2, [r7, #20]
 801697e:	4313      	orrs	r3, r2
 8016980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	693a      	ldr	r2, [r7, #16]
 8016986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	697a      	ldr	r2, [r7, #20]
 801698c:	621a      	str	r2, [r3, #32]
}
 801698e:	46c0      	nop			@ (mov r8, r8)
 8016990:	46bd      	mov	sp, r7
 8016992:	b006      	add	sp, #24
 8016994:	bd80      	pop	{r7, pc}
 8016996:	46c0      	nop			@ (mov r8, r8)
 8016998:	ffff0fff 	.word	0xffff0fff

0801699c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b084      	sub	sp, #16
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	689b      	ldr	r3, [r3, #8]
 80169aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	4a08      	ldr	r2, [pc, #32]	@ (80169d0 <TIM_ITRx_SetConfig+0x34>)
 80169b0:	4013      	ands	r3, r2
 80169b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80169b4:	683a      	ldr	r2, [r7, #0]
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	4313      	orrs	r3, r2
 80169ba:	2207      	movs	r2, #7
 80169bc:	4313      	orrs	r3, r2
 80169be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	68fa      	ldr	r2, [r7, #12]
 80169c4:	609a      	str	r2, [r3, #8]
}
 80169c6:	46c0      	nop			@ (mov r8, r8)
 80169c8:	46bd      	mov	sp, r7
 80169ca:	b004      	add	sp, #16
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	46c0      	nop			@ (mov r8, r8)
 80169d0:	ffcfff8f 	.word	0xffcfff8f

080169d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b086      	sub	sp, #24
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
 80169e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	689b      	ldr	r3, [r3, #8]
 80169e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	4a09      	ldr	r2, [pc, #36]	@ (8016a10 <TIM_ETR_SetConfig+0x3c>)
 80169ec:	4013      	ands	r3, r2
 80169ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	021a      	lsls	r2, r3, #8
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	431a      	orrs	r2, r3
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	4313      	orrs	r3, r2
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	4313      	orrs	r3, r2
 8016a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	697a      	ldr	r2, [r7, #20]
 8016a06:	609a      	str	r2, [r3, #8]
}
 8016a08:	46c0      	nop			@ (mov r8, r8)
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	b006      	add	sp, #24
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	ffff00ff 	.word	0xffff00ff

08016a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b086      	sub	sp, #24
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	60b9      	str	r1, [r7, #8]
 8016a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	221f      	movs	r2, #31
 8016a24:	4013      	ands	r3, r2
 8016a26:	2201      	movs	r2, #1
 8016a28:	409a      	lsls	r2, r3
 8016a2a:	0013      	movs	r3, r2
 8016a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	6a1b      	ldr	r3, [r3, #32]
 8016a32:	697a      	ldr	r2, [r7, #20]
 8016a34:	43d2      	mvns	r2, r2
 8016a36:	401a      	ands	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	6a1a      	ldr	r2, [r3, #32]
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	211f      	movs	r1, #31
 8016a44:	400b      	ands	r3, r1
 8016a46:	6879      	ldr	r1, [r7, #4]
 8016a48:	4099      	lsls	r1, r3
 8016a4a:	000b      	movs	r3, r1
 8016a4c:	431a      	orrs	r2, r3
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	621a      	str	r2, [r3, #32]
}
 8016a52:	46c0      	nop			@ (mov r8, r8)
 8016a54:	46bd      	mov	sp, r7
 8016a56:	b006      	add	sp, #24
 8016a58:	bd80      	pop	{r7, pc}
	...

08016a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	223c      	movs	r2, #60	@ 0x3c
 8016a6a:	5c9b      	ldrb	r3, [r3, r2]
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d101      	bne.n	8016a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016a70:	2302      	movs	r3, #2
 8016a72:	e055      	b.n	8016b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	223c      	movs	r2, #60	@ 0x3c
 8016a78:	2101      	movs	r1, #1
 8016a7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	223d      	movs	r2, #61	@ 0x3d
 8016a80:	2102      	movs	r1, #2
 8016a82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	689b      	ldr	r3, [r3, #8]
 8016a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	4a23      	ldr	r2, [pc, #140]	@ (8016b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8016a9a:	4293      	cmp	r3, r2
 8016a9c:	d108      	bne.n	8016ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	4a22      	ldr	r2, [pc, #136]	@ (8016b2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8016aa2:	4013      	ands	r3, r2
 8016aa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	4313      	orrs	r3, r2
 8016aae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	2270      	movs	r2, #112	@ 0x70
 8016ab4:	4393      	bics	r3, r2
 8016ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	68fa      	ldr	r2, [r7, #12]
 8016abe:	4313      	orrs	r3, r2
 8016ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	68fa      	ldr	r2, [r7, #12]
 8016ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	4a16      	ldr	r2, [pc, #88]	@ (8016b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d00f      	beq.n	8016af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681a      	ldr	r2, [r3, #0]
 8016ad8:	2380      	movs	r3, #128	@ 0x80
 8016ada:	05db      	lsls	r3, r3, #23
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d009      	beq.n	8016af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4a12      	ldr	r2, [pc, #72]	@ (8016b30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d004      	beq.n	8016af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	4a11      	ldr	r2, [pc, #68]	@ (8016b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8016af0:	4293      	cmp	r3, r2
 8016af2:	d10c      	bne.n	8016b0e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	2280      	movs	r2, #128	@ 0x80
 8016af8:	4393      	bics	r3, r2
 8016afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	689b      	ldr	r3, [r3, #8]
 8016b00:	68ba      	ldr	r2, [r7, #8]
 8016b02:	4313      	orrs	r3, r2
 8016b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	68ba      	ldr	r2, [r7, #8]
 8016b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	223d      	movs	r2, #61	@ 0x3d
 8016b12:	2101      	movs	r1, #1
 8016b14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	223c      	movs	r2, #60	@ 0x3c
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	0018      	movs	r0, r3
 8016b22:	46bd      	mov	sp, r7
 8016b24:	b004      	add	sp, #16
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	40012c00 	.word	0x40012c00
 8016b2c:	ff0fffff 	.word	0xff0fffff
 8016b30:	40000400 	.word	0x40000400
 8016b34:	40014000 	.word	0x40014000

08016b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d101      	bne.n	8016b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016b46:	2301      	movs	r3, #1
 8016b48:	e046      	b.n	8016bd8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2288      	movs	r2, #136	@ 0x88
 8016b4e:	589b      	ldr	r3, [r3, r2]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d107      	bne.n	8016b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2284      	movs	r2, #132	@ 0x84
 8016b58:	2100      	movs	r1, #0
 8016b5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	0018      	movs	r0, r3
 8016b60:	f7f2 fe74 	bl	800984c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2288      	movs	r2, #136	@ 0x88
 8016b68:	2124      	movs	r1, #36	@ 0x24
 8016b6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	681a      	ldr	r2, [r3, #0]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2101      	movs	r1, #1
 8016b78:	438a      	bics	r2, r1
 8016b7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d003      	beq.n	8016b8c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	0018      	movs	r0, r3
 8016b88:	f000 ff2a 	bl	80179e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	0018      	movs	r0, r3
 8016b90:	f000 fd54 	bl	801763c <UART_SetConfig>
 8016b94:	0003      	movs	r3, r0
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d101      	bne.n	8016b9e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	e01c      	b.n	8016bd8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	685a      	ldr	r2, [r3, #4]
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	490d      	ldr	r1, [pc, #52]	@ (8016be0 <HAL_UART_Init+0xa8>)
 8016baa:	400a      	ands	r2, r1
 8016bac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	689a      	ldr	r2, [r3, #8]
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	212a      	movs	r1, #42	@ 0x2a
 8016bba:	438a      	bics	r2, r1
 8016bbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	681a      	ldr	r2, [r3, #0]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	2101      	movs	r1, #1
 8016bca:	430a      	orrs	r2, r1
 8016bcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	0018      	movs	r0, r3
 8016bd2:	f000 ffb9 	bl	8017b48 <UART_CheckIdleState>
 8016bd6:	0003      	movs	r3, r0
}
 8016bd8:	0018      	movs	r0, r3
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	b002      	add	sp, #8
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	ffffb7ff 	.word	0xffffb7ff

08016be4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b088      	sub	sp, #32
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	60f8      	str	r0, [r7, #12]
 8016bec:	60b9      	str	r1, [r7, #8]
 8016bee:	1dbb      	adds	r3, r7, #6
 8016bf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2288      	movs	r2, #136	@ 0x88
 8016bf6:	589b      	ldr	r3, [r3, r2]
 8016bf8:	2b20      	cmp	r3, #32
 8016bfa:	d000      	beq.n	8016bfe <HAL_UART_Transmit_DMA+0x1a>
 8016bfc:	e079      	b.n	8016cf2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d003      	beq.n	8016c0c <HAL_UART_Transmit_DMA+0x28>
 8016c04:	1dbb      	adds	r3, r7, #6
 8016c06:	881b      	ldrh	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d101      	bne.n	8016c10 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e071      	b.n	8016cf4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	689a      	ldr	r2, [r3, #8]
 8016c14:	2380      	movs	r3, #128	@ 0x80
 8016c16:	015b      	lsls	r3, r3, #5
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d109      	bne.n	8016c30 <HAL_UART_Transmit_DMA+0x4c>
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	691b      	ldr	r3, [r3, #16]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d105      	bne.n	8016c30 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	2201      	movs	r2, #1
 8016c28:	4013      	ands	r3, r2
 8016c2a:	d001      	beq.n	8016c30 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	e061      	b.n	8016cf4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	1dba      	adds	r2, r7, #6
 8016c3a:	2154      	movs	r1, #84	@ 0x54
 8016c3c:	8812      	ldrh	r2, [r2, #0]
 8016c3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	1dba      	adds	r2, r7, #6
 8016c44:	2156      	movs	r1, #86	@ 0x56
 8016c46:	8812      	ldrh	r2, [r2, #0]
 8016c48:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	2290      	movs	r2, #144	@ 0x90
 8016c4e:	2100      	movs	r1, #0
 8016c50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	2288      	movs	r2, #136	@ 0x88
 8016c56:	2121      	movs	r1, #33	@ 0x21
 8016c58:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d028      	beq.n	8016cb4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c66:	4a25      	ldr	r2, [pc, #148]	@ (8016cfc <HAL_UART_Transmit_DMA+0x118>)
 8016c68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c6e:	4a24      	ldr	r2, [pc, #144]	@ (8016d00 <HAL_UART_Transmit_DMA+0x11c>)
 8016c70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c76:	4a23      	ldr	r2, [pc, #140]	@ (8016d04 <HAL_UART_Transmit_DMA+0x120>)
 8016c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c7e:	2200      	movs	r2, #0
 8016c80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016c8a:	0019      	movs	r1, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	3328      	adds	r3, #40	@ 0x28
 8016c92:	001a      	movs	r2, r3
 8016c94:	1dbb      	adds	r3, r7, #6
 8016c96:	881b      	ldrh	r3, [r3, #0]
 8016c98:	f7f9 f98c 	bl	800ffb4 <HAL_DMA_Start_IT>
 8016c9c:	1e03      	subs	r3, r0, #0
 8016c9e:	d009      	beq.n	8016cb4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	2290      	movs	r2, #144	@ 0x90
 8016ca4:	2110      	movs	r1, #16
 8016ca6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2288      	movs	r2, #136	@ 0x88
 8016cac:	2120      	movs	r1, #32
 8016cae:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	e01f      	b.n	8016cf4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2240      	movs	r2, #64	@ 0x40
 8016cba:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8016cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8016cc2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016cc4:	61fb      	str	r3, [r7, #28]
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	f383 8810 	msr	PRIMASK, r3
}
 8016cd0:	46c0      	nop			@ (mov r8, r8)
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	689a      	ldr	r2, [r3, #8]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2180      	movs	r1, #128	@ 0x80
 8016cde:	430a      	orrs	r2, r1
 8016ce0:	609a      	str	r2, [r3, #8]
 8016ce2:	69fb      	ldr	r3, [r7, #28]
 8016ce4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	f383 8810 	msr	PRIMASK, r3
}
 8016cec:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	e000      	b.n	8016cf4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8016cf2:	2302      	movs	r3, #2
  }
}
 8016cf4:	0018      	movs	r0, r3
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	b008      	add	sp, #32
 8016cfa:	bd80      	pop	{r7, pc}
 8016cfc:	08018015 	.word	0x08018015
 8016d00:	080180ad 	.word	0x080180ad
 8016d04:	0801823f 	.word	0x0801823f

08016d08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b088      	sub	sp, #32
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	1dbb      	adds	r3, r7, #6
 8016d14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	228c      	movs	r2, #140	@ 0x8c
 8016d1a:	589b      	ldr	r3, [r3, r2]
 8016d1c:	2b20      	cmp	r3, #32
 8016d1e:	d154      	bne.n	8016dca <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d003      	beq.n	8016d2e <HAL_UART_Receive_DMA+0x26>
 8016d26:	1dbb      	adds	r3, r7, #6
 8016d28:	881b      	ldrh	r3, [r3, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d101      	bne.n	8016d32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e04c      	b.n	8016dcc <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	689a      	ldr	r2, [r3, #8]
 8016d36:	2380      	movs	r3, #128	@ 0x80
 8016d38:	015b      	lsls	r3, r3, #5
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d109      	bne.n	8016d52 <HAL_UART_Receive_DMA+0x4a>
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	691b      	ldr	r3, [r3, #16]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d105      	bne.n	8016d52 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	2201      	movs	r2, #1
 8016d4a:	4013      	ands	r3, r2
 8016d4c:	d001      	beq.n	8016d52 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016d4e:	2301      	movs	r3, #1
 8016d50:	e03c      	b.n	8016dcc <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2200      	movs	r2, #0
 8016d56:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8016dd4 <HAL_UART_Receive_DMA+0xcc>)
 8016d5e:	4293      	cmp	r3, r2
 8016d60:	d02a      	beq.n	8016db8 <HAL_UART_Receive_DMA+0xb0>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	4a1c      	ldr	r2, [pc, #112]	@ (8016dd8 <HAL_UART_Receive_DMA+0xd0>)
 8016d68:	4293      	cmp	r3, r2
 8016d6a:	d025      	beq.n	8016db8 <HAL_UART_Receive_DMA+0xb0>
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	4a1a      	ldr	r2, [pc, #104]	@ (8016ddc <HAL_UART_Receive_DMA+0xd4>)
 8016d72:	4293      	cmp	r3, r2
 8016d74:	d020      	beq.n	8016db8 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	685a      	ldr	r2, [r3, #4]
 8016d7c:	2380      	movs	r3, #128	@ 0x80
 8016d7e:	041b      	lsls	r3, r3, #16
 8016d80:	4013      	ands	r3, r2
 8016d82:	d019      	beq.n	8016db8 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016d84:	f3ef 8310 	mrs	r3, PRIMASK
 8016d88:	613b      	str	r3, [r7, #16]
  return(result);
 8016d8a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016d8c:	61fb      	str	r3, [r7, #28]
 8016d8e:	2301      	movs	r3, #1
 8016d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	f383 8810 	msr	PRIMASK, r3
}
 8016d98:	46c0      	nop			@ (mov r8, r8)
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2180      	movs	r1, #128	@ 0x80
 8016da6:	04c9      	lsls	r1, r1, #19
 8016da8:	430a      	orrs	r2, r1
 8016daa:	601a      	str	r2, [r3, #0]
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016db0:	69bb      	ldr	r3, [r7, #24]
 8016db2:	f383 8810 	msr	PRIMASK, r3
}
 8016db6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016db8:	1dbb      	adds	r3, r7, #6
 8016dba:	881a      	ldrh	r2, [r3, #0]
 8016dbc:	68b9      	ldr	r1, [r7, #8]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	f000 ffdb 	bl	8017d7c <UART_Start_Receive_DMA>
 8016dc6:	0003      	movs	r3, r0
 8016dc8:	e000      	b.n	8016dcc <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8016dca:	2302      	movs	r3, #2
  }
}
 8016dcc:	0018      	movs	r0, r3
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	b008      	add	sp, #32
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	40008000 	.word	0x40008000
 8016dd8:	40008400 	.word	0x40008400
 8016ddc:	40008c00 	.word	0x40008c00

08016de0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b092      	sub	sp, #72	@ 0x48
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016de8:	f3ef 8310 	mrs	r3, PRIMASK
 8016dec:	623b      	str	r3, [r7, #32]
  return(result);
 8016dee:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8016df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8016df2:	2301      	movs	r3, #1
 8016df4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df8:	f383 8810 	msr	PRIMASK, r3
}
 8016dfc:	46c0      	nop			@ (mov r8, r8)
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	494d      	ldr	r1, [pc, #308]	@ (8016f40 <HAL_UART_AbortReceive+0x160>)
 8016e0a:	400a      	ands	r2, r1
 8016e0c:	601a      	str	r2, [r3, #0]
 8016e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e14:	f383 8810 	msr	PRIMASK, r3
}
 8016e18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8016e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8016e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8016e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8016e24:	2301      	movs	r3, #1
 8016e26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e2a:	f383 8810 	msr	PRIMASK, r3
}
 8016e2e:	46c0      	nop			@ (mov r8, r8)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	689a      	ldr	r2, [r3, #8]
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	4942      	ldr	r1, [pc, #264]	@ (8016f44 <HAL_UART_AbortReceive+0x164>)
 8016e3c:	400a      	ands	r2, r1
 8016e3e:	609a      	str	r2, [r3, #8]
 8016e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e42:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e46:	f383 8810 	msr	PRIMASK, r3
}
 8016e4a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	d118      	bne.n	8016e86 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016e54:	f3ef 8310 	mrs	r3, PRIMASK
 8016e58:	617b      	str	r3, [r7, #20]
  return(result);
 8016e5a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016e5e:	2301      	movs	r3, #1
 8016e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	f383 8810 	msr	PRIMASK, r3
}
 8016e68:	46c0      	nop			@ (mov r8, r8)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	681a      	ldr	r2, [r3, #0]
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2110      	movs	r1, #16
 8016e76:	438a      	bics	r2, r1
 8016e78:	601a      	str	r2, [r3, #0]
 8016e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e7e:	69fb      	ldr	r3, [r7, #28]
 8016e80:	f383 8810 	msr	PRIMASK, r3
}
 8016e84:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	689b      	ldr	r3, [r3, #8]
 8016e8c:	2240      	movs	r2, #64	@ 0x40
 8016e8e:	4013      	ands	r3, r2
 8016e90:	2b40      	cmp	r3, #64	@ 0x40
 8016e92:	d139      	bne.n	8016f08 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016e94:	f3ef 8310 	mrs	r3, PRIMASK
 8016e98:	60bb      	str	r3, [r7, #8]
  return(result);
 8016e9a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	f383 8810 	msr	PRIMASK, r3
}
 8016ea8:	46c0      	nop			@ (mov r8, r8)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	689a      	ldr	r2, [r3, #8]
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2140      	movs	r1, #64	@ 0x40
 8016eb6:	438a      	bics	r2, r1
 8016eb8:	609a      	str	r2, [r3, #8]
 8016eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	f383 8810 	msr	PRIMASK, r3
}
 8016ec4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2280      	movs	r2, #128	@ 0x80
 8016eca:	589b      	ldr	r3, [r3, r2]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d01b      	beq.n	8016f08 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2280      	movs	r2, #128	@ 0x80
 8016ed4:	589b      	ldr	r3, [r3, r2]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2280      	movs	r2, #128	@ 0x80
 8016ede:	589b      	ldr	r3, [r3, r2]
 8016ee0:	0018      	movs	r0, r3
 8016ee2:	f7f9 f8ed 	bl	80100c0 <HAL_DMA_Abort>
 8016ee6:	1e03      	subs	r3, r0, #0
 8016ee8:	d00e      	beq.n	8016f08 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2280      	movs	r2, #128	@ 0x80
 8016eee:	589b      	ldr	r3, [r3, r2]
 8016ef0:	0018      	movs	r0, r3
 8016ef2:	f7f9 fa7d 	bl	80103f0 <HAL_DMA_GetError>
 8016ef6:	0003      	movs	r3, r0
 8016ef8:	2b20      	cmp	r3, #32
 8016efa:	d105      	bne.n	8016f08 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2290      	movs	r2, #144	@ 0x90
 8016f00:	2110      	movs	r1, #16
 8016f02:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8016f04:	2303      	movs	r3, #3
 8016f06:	e017      	b.n	8016f38 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	225e      	movs	r2, #94	@ 0x5e
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	220f      	movs	r2, #15
 8016f16:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	699a      	ldr	r2, [r3, #24]
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	2108      	movs	r1, #8
 8016f24:	430a      	orrs	r2, r1
 8016f26:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	228c      	movs	r2, #140	@ 0x8c
 8016f2c:	2120      	movs	r1, #32
 8016f2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2200      	movs	r2, #0
 8016f34:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8016f36:	2300      	movs	r3, #0
}
 8016f38:	0018      	movs	r0, r3
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	b012      	add	sp, #72	@ 0x48
 8016f3e:	bd80      	pop	{r7, pc}
 8016f40:	fffffedf 	.word	0xfffffedf
 8016f44:	effffffe 	.word	0xeffffffe

08016f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016f48:	b5b0      	push	{r4, r5, r7, lr}
 8016f4a:	b0aa      	sub	sp, #168	@ 0xa8
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	69db      	ldr	r3, [r3, #28]
 8016f56:	22a4      	movs	r2, #164	@ 0xa4
 8016f58:	18b9      	adds	r1, r7, r2
 8016f5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	20a0      	movs	r0, #160	@ 0xa0
 8016f64:	1839      	adds	r1, r7, r0
 8016f66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	689b      	ldr	r3, [r3, #8]
 8016f6e:	249c      	movs	r4, #156	@ 0x9c
 8016f70:	1939      	adds	r1, r7, r4
 8016f72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016f74:	0011      	movs	r1, r2
 8016f76:	18bb      	adds	r3, r7, r2
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	4aa2      	ldr	r2, [pc, #648]	@ (8017204 <HAL_UART_IRQHandler+0x2bc>)
 8016f7c:	4013      	ands	r3, r2
 8016f7e:	2298      	movs	r2, #152	@ 0x98
 8016f80:	18bd      	adds	r5, r7, r2
 8016f82:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8016f84:	18bb      	adds	r3, r7, r2
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d11a      	bne.n	8016fc2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016f8c:	187b      	adds	r3, r7, r1
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2220      	movs	r2, #32
 8016f92:	4013      	ands	r3, r2
 8016f94:	d015      	beq.n	8016fc2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016f96:	183b      	adds	r3, r7, r0
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2220      	movs	r2, #32
 8016f9c:	4013      	ands	r3, r2
 8016f9e:	d105      	bne.n	8016fac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016fa0:	193b      	adds	r3, r7, r4
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	2380      	movs	r3, #128	@ 0x80
 8016fa6:	055b      	lsls	r3, r3, #21
 8016fa8:	4013      	ands	r3, r2
 8016faa:	d00a      	beq.n	8016fc2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d100      	bne.n	8016fb6 <HAL_UART_IRQHandler+0x6e>
 8016fb4:	e2fb      	b.n	80175ae <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	0010      	movs	r0, r2
 8016fbe:	4798      	blx	r3
      }
      return;
 8016fc0:	e2f5      	b.n	80175ae <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016fc2:	2398      	movs	r3, #152	@ 0x98
 8016fc4:	18fb      	adds	r3, r7, r3
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d100      	bne.n	8016fce <HAL_UART_IRQHandler+0x86>
 8016fcc:	e122      	b.n	8017214 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016fce:	239c      	movs	r3, #156	@ 0x9c
 8016fd0:	18fb      	adds	r3, r7, r3
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	4a8c      	ldr	r2, [pc, #560]	@ (8017208 <HAL_UART_IRQHandler+0x2c0>)
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	d106      	bne.n	8016fe8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8016fda:	23a0      	movs	r3, #160	@ 0xa0
 8016fdc:	18fb      	adds	r3, r7, r3
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4a8a      	ldr	r2, [pc, #552]	@ (801720c <HAL_UART_IRQHandler+0x2c4>)
 8016fe2:	4013      	ands	r3, r2
 8016fe4:	d100      	bne.n	8016fe8 <HAL_UART_IRQHandler+0xa0>
 8016fe6:	e115      	b.n	8017214 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016fe8:	23a4      	movs	r3, #164	@ 0xa4
 8016fea:	18fb      	adds	r3, r7, r3
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2201      	movs	r2, #1
 8016ff0:	4013      	ands	r3, r2
 8016ff2:	d012      	beq.n	801701a <HAL_UART_IRQHandler+0xd2>
 8016ff4:	23a0      	movs	r3, #160	@ 0xa0
 8016ff6:	18fb      	adds	r3, r7, r3
 8016ff8:	681a      	ldr	r2, [r3, #0]
 8016ffa:	2380      	movs	r3, #128	@ 0x80
 8016ffc:	005b      	lsls	r3, r3, #1
 8016ffe:	4013      	ands	r3, r2
 8017000:	d00b      	beq.n	801701a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	2201      	movs	r2, #1
 8017008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	2290      	movs	r2, #144	@ 0x90
 801700e:	589b      	ldr	r3, [r3, r2]
 8017010:	2201      	movs	r2, #1
 8017012:	431a      	orrs	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2190      	movs	r1, #144	@ 0x90
 8017018:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801701a:	23a4      	movs	r3, #164	@ 0xa4
 801701c:	18fb      	adds	r3, r7, r3
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	2202      	movs	r2, #2
 8017022:	4013      	ands	r3, r2
 8017024:	d011      	beq.n	801704a <HAL_UART_IRQHandler+0x102>
 8017026:	239c      	movs	r3, #156	@ 0x9c
 8017028:	18fb      	adds	r3, r7, r3
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2201      	movs	r2, #1
 801702e:	4013      	ands	r3, r2
 8017030:	d00b      	beq.n	801704a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	2202      	movs	r2, #2
 8017038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2290      	movs	r2, #144	@ 0x90
 801703e:	589b      	ldr	r3, [r3, r2]
 8017040:	2204      	movs	r2, #4
 8017042:	431a      	orrs	r2, r3
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2190      	movs	r1, #144	@ 0x90
 8017048:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801704a:	23a4      	movs	r3, #164	@ 0xa4
 801704c:	18fb      	adds	r3, r7, r3
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2204      	movs	r2, #4
 8017052:	4013      	ands	r3, r2
 8017054:	d011      	beq.n	801707a <HAL_UART_IRQHandler+0x132>
 8017056:	239c      	movs	r3, #156	@ 0x9c
 8017058:	18fb      	adds	r3, r7, r3
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2201      	movs	r2, #1
 801705e:	4013      	ands	r3, r2
 8017060:	d00b      	beq.n	801707a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2204      	movs	r2, #4
 8017068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2290      	movs	r2, #144	@ 0x90
 801706e:	589b      	ldr	r3, [r3, r2]
 8017070:	2202      	movs	r2, #2
 8017072:	431a      	orrs	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2190      	movs	r1, #144	@ 0x90
 8017078:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801707a:	23a4      	movs	r3, #164	@ 0xa4
 801707c:	18fb      	adds	r3, r7, r3
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2208      	movs	r2, #8
 8017082:	4013      	ands	r3, r2
 8017084:	d017      	beq.n	80170b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017086:	23a0      	movs	r3, #160	@ 0xa0
 8017088:	18fb      	adds	r3, r7, r3
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2220      	movs	r2, #32
 801708e:	4013      	ands	r3, r2
 8017090:	d105      	bne.n	801709e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017092:	239c      	movs	r3, #156	@ 0x9c
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	4a5b      	ldr	r2, [pc, #364]	@ (8017208 <HAL_UART_IRQHandler+0x2c0>)
 801709a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801709c:	d00b      	beq.n	80170b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2208      	movs	r2, #8
 80170a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	2290      	movs	r2, #144	@ 0x90
 80170aa:	589b      	ldr	r3, [r3, r2]
 80170ac:	2208      	movs	r2, #8
 80170ae:	431a      	orrs	r2, r3
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2190      	movs	r1, #144	@ 0x90
 80170b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80170b6:	23a4      	movs	r3, #164	@ 0xa4
 80170b8:	18fb      	adds	r3, r7, r3
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	2380      	movs	r3, #128	@ 0x80
 80170be:	011b      	lsls	r3, r3, #4
 80170c0:	4013      	ands	r3, r2
 80170c2:	d013      	beq.n	80170ec <HAL_UART_IRQHandler+0x1a4>
 80170c4:	23a0      	movs	r3, #160	@ 0xa0
 80170c6:	18fb      	adds	r3, r7, r3
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	2380      	movs	r3, #128	@ 0x80
 80170cc:	04db      	lsls	r3, r3, #19
 80170ce:	4013      	ands	r3, r2
 80170d0:	d00c      	beq.n	80170ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2280      	movs	r2, #128	@ 0x80
 80170d8:	0112      	lsls	r2, r2, #4
 80170da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2290      	movs	r2, #144	@ 0x90
 80170e0:	589b      	ldr	r3, [r3, r2]
 80170e2:	2220      	movs	r2, #32
 80170e4:	431a      	orrs	r2, r3
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2190      	movs	r1, #144	@ 0x90
 80170ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2290      	movs	r2, #144	@ 0x90
 80170f0:	589b      	ldr	r3, [r3, r2]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d100      	bne.n	80170f8 <HAL_UART_IRQHandler+0x1b0>
 80170f6:	e25c      	b.n	80175b2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80170f8:	23a4      	movs	r3, #164	@ 0xa4
 80170fa:	18fb      	adds	r3, r7, r3
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2220      	movs	r2, #32
 8017100:	4013      	ands	r3, r2
 8017102:	d015      	beq.n	8017130 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017104:	23a0      	movs	r3, #160	@ 0xa0
 8017106:	18fb      	adds	r3, r7, r3
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	2220      	movs	r2, #32
 801710c:	4013      	ands	r3, r2
 801710e:	d106      	bne.n	801711e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017110:	239c      	movs	r3, #156	@ 0x9c
 8017112:	18fb      	adds	r3, r7, r3
 8017114:	681a      	ldr	r2, [r3, #0]
 8017116:	2380      	movs	r3, #128	@ 0x80
 8017118:	055b      	lsls	r3, r3, #21
 801711a:	4013      	ands	r3, r2
 801711c:	d008      	beq.n	8017130 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017122:	2b00      	cmp	r3, #0
 8017124:	d004      	beq.n	8017130 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801712a:	687a      	ldr	r2, [r7, #4]
 801712c:	0010      	movs	r0, r2
 801712e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2290      	movs	r2, #144	@ 0x90
 8017134:	589b      	ldr	r3, [r3, r2]
 8017136:	2194      	movs	r1, #148	@ 0x94
 8017138:	187a      	adds	r2, r7, r1
 801713a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	689b      	ldr	r3, [r3, #8]
 8017142:	2240      	movs	r2, #64	@ 0x40
 8017144:	4013      	ands	r3, r2
 8017146:	2b40      	cmp	r3, #64	@ 0x40
 8017148:	d004      	beq.n	8017154 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801714a:	187b      	adds	r3, r7, r1
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2228      	movs	r2, #40	@ 0x28
 8017150:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017152:	d04c      	beq.n	80171ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	0018      	movs	r0, r3
 8017158:	f000 fef6 	bl	8017f48 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	689b      	ldr	r3, [r3, #8]
 8017162:	2240      	movs	r2, #64	@ 0x40
 8017164:	4013      	ands	r3, r2
 8017166:	2b40      	cmp	r3, #64	@ 0x40
 8017168:	d13c      	bne.n	80171e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801716a:	f3ef 8310 	mrs	r3, PRIMASK
 801716e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017172:	2090      	movs	r0, #144	@ 0x90
 8017174:	183a      	adds	r2, r7, r0
 8017176:	6013      	str	r3, [r2, #0]
 8017178:	2301      	movs	r3, #1
 801717a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801717c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801717e:	f383 8810 	msr	PRIMASK, r3
}
 8017182:	46c0      	nop			@ (mov r8, r8)
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	689a      	ldr	r2, [r3, #8]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	2140      	movs	r1, #64	@ 0x40
 8017190:	438a      	bics	r2, r1
 8017192:	609a      	str	r2, [r3, #8]
 8017194:	183b      	adds	r3, r7, r0
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801719a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801719c:	f383 8810 	msr	PRIMASK, r3
}
 80171a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2280      	movs	r2, #128	@ 0x80
 80171a6:	589b      	ldr	r3, [r3, r2]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d016      	beq.n	80171da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2280      	movs	r2, #128	@ 0x80
 80171b0:	589b      	ldr	r3, [r3, r2]
 80171b2:	4a17      	ldr	r2, [pc, #92]	@ (8017210 <HAL_UART_IRQHandler+0x2c8>)
 80171b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2280      	movs	r2, #128	@ 0x80
 80171ba:	589b      	ldr	r3, [r3, r2]
 80171bc:	0018      	movs	r0, r3
 80171be:	f7f8 ffdf 	bl	8010180 <HAL_DMA_Abort_IT>
 80171c2:	1e03      	subs	r3, r0, #0
 80171c4:	d01c      	beq.n	8017200 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2280      	movs	r2, #128	@ 0x80
 80171ca:	589b      	ldr	r3, [r3, r2]
 80171cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	2180      	movs	r1, #128	@ 0x80
 80171d2:	5852      	ldr	r2, [r2, r1]
 80171d4:	0010      	movs	r0, r2
 80171d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80171d8:	e012      	b.n	8017200 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	0018      	movs	r0, r3
 80171de:	f000 fa19 	bl	8017614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80171e2:	e00d      	b.n	8017200 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	0018      	movs	r0, r3
 80171e8:	f000 fa14 	bl	8017614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80171ec:	e008      	b.n	8017200 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	0018      	movs	r0, r3
 80171f2:	f000 fa0f 	bl	8017614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2290      	movs	r2, #144	@ 0x90
 80171fa:	2100      	movs	r1, #0
 80171fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80171fe:	e1d8      	b.n	80175b2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017200:	46c0      	nop			@ (mov r8, r8)
    return;
 8017202:	e1d6      	b.n	80175b2 <HAL_UART_IRQHandler+0x66a>
 8017204:	0000080f 	.word	0x0000080f
 8017208:	10000001 	.word	0x10000001
 801720c:	04000120 	.word	0x04000120
 8017210:	080182c5 	.word	0x080182c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017218:	2b01      	cmp	r3, #1
 801721a:	d000      	beq.n	801721e <HAL_UART_IRQHandler+0x2d6>
 801721c:	e15d      	b.n	80174da <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801721e:	23a4      	movs	r3, #164	@ 0xa4
 8017220:	18fb      	adds	r3, r7, r3
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	2210      	movs	r2, #16
 8017226:	4013      	ands	r3, r2
 8017228:	d100      	bne.n	801722c <HAL_UART_IRQHandler+0x2e4>
 801722a:	e156      	b.n	80174da <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801722c:	23a0      	movs	r3, #160	@ 0xa0
 801722e:	18fb      	adds	r3, r7, r3
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	2210      	movs	r2, #16
 8017234:	4013      	ands	r3, r2
 8017236:	d100      	bne.n	801723a <HAL_UART_IRQHandler+0x2f2>
 8017238:	e14f      	b.n	80174da <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	2210      	movs	r2, #16
 8017240:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	689b      	ldr	r3, [r3, #8]
 8017248:	2240      	movs	r2, #64	@ 0x40
 801724a:	4013      	ands	r3, r2
 801724c:	2b40      	cmp	r3, #64	@ 0x40
 801724e:	d000      	beq.n	8017252 <HAL_UART_IRQHandler+0x30a>
 8017250:	e0c3      	b.n	80173da <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2280      	movs	r2, #128	@ 0x80
 8017256:	589b      	ldr	r3, [r3, r2]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	685a      	ldr	r2, [r3, #4]
 801725c:	217e      	movs	r1, #126	@ 0x7e
 801725e:	187b      	adds	r3, r7, r1
 8017260:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017262:	187b      	adds	r3, r7, r1
 8017264:	881b      	ldrh	r3, [r3, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d100      	bne.n	801726c <HAL_UART_IRQHandler+0x324>
 801726a:	e097      	b.n	801739c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	225c      	movs	r2, #92	@ 0x5c
 8017270:	5a9b      	ldrh	r3, [r3, r2]
 8017272:	187a      	adds	r2, r7, r1
 8017274:	8812      	ldrh	r2, [r2, #0]
 8017276:	429a      	cmp	r2, r3
 8017278:	d300      	bcc.n	801727c <HAL_UART_IRQHandler+0x334>
 801727a:	e08f      	b.n	801739c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	187a      	adds	r2, r7, r1
 8017280:	215e      	movs	r1, #94	@ 0x5e
 8017282:	8812      	ldrh	r2, [r2, #0]
 8017284:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	2280      	movs	r2, #128	@ 0x80
 801728a:	589b      	ldr	r3, [r3, r2]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	2220      	movs	r2, #32
 8017292:	4013      	ands	r3, r2
 8017294:	d170      	bne.n	8017378 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017296:	f3ef 8310 	mrs	r3, PRIMASK
 801729a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801729e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80172a0:	2301      	movs	r3, #1
 80172a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172a6:	f383 8810 	msr	PRIMASK, r3
}
 80172aa:	46c0      	nop			@ (mov r8, r8)
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	49c4      	ldr	r1, [pc, #784]	@ (80175c8 <HAL_UART_IRQHandler+0x680>)
 80172b8:	400a      	ands	r2, r1
 80172ba:	601a      	str	r2, [r3, #0]
 80172bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80172be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c2:	f383 8810 	msr	PRIMASK, r3
}
 80172c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80172c8:	f3ef 8310 	mrs	r3, PRIMASK
 80172cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80172ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80172d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80172d2:	2301      	movs	r3, #1
 80172d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80172d8:	f383 8810 	msr	PRIMASK, r3
}
 80172dc:	46c0      	nop			@ (mov r8, r8)
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	689a      	ldr	r2, [r3, #8]
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2101      	movs	r1, #1
 80172ea:	438a      	bics	r2, r1
 80172ec:	609a      	str	r2, [r3, #8]
 80172ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80172f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172f4:	f383 8810 	msr	PRIMASK, r3
}
 80172f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80172fa:	f3ef 8310 	mrs	r3, PRIMASK
 80172fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017302:	673b      	str	r3, [r7, #112]	@ 0x70
 8017304:	2301      	movs	r3, #1
 8017306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801730a:	f383 8810 	msr	PRIMASK, r3
}
 801730e:	46c0      	nop			@ (mov r8, r8)
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	689a      	ldr	r2, [r3, #8]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2140      	movs	r1, #64	@ 0x40
 801731c:	438a      	bics	r2, r1
 801731e:	609a      	str	r2, [r3, #8]
 8017320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017322:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017326:	f383 8810 	msr	PRIMASK, r3
}
 801732a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	228c      	movs	r2, #140	@ 0x8c
 8017330:	2120      	movs	r1, #32
 8017332:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2200      	movs	r2, #0
 8017338:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801733a:	f3ef 8310 	mrs	r3, PRIMASK
 801733e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017344:	2301      	movs	r3, #1
 8017346:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801734a:	f383 8810 	msr	PRIMASK, r3
}
 801734e:	46c0      	nop			@ (mov r8, r8)
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	681a      	ldr	r2, [r3, #0]
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	2110      	movs	r1, #16
 801735c:	438a      	bics	r2, r1
 801735e:	601a      	str	r2, [r3, #0]
 8017360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017362:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017366:	f383 8810 	msr	PRIMASK, r3
}
 801736a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2280      	movs	r2, #128	@ 0x80
 8017370:	589b      	ldr	r3, [r3, r2]
 8017372:	0018      	movs	r0, r3
 8017374:	f7f8 fea4 	bl	80100c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2202      	movs	r2, #2
 801737c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	225c      	movs	r2, #92	@ 0x5c
 8017382:	5a9a      	ldrh	r2, [r3, r2]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	215e      	movs	r1, #94	@ 0x5e
 8017388:	5a5b      	ldrh	r3, [r3, r1]
 801738a:	b29b      	uxth	r3, r3
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	b29a      	uxth	r2, r3
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	0011      	movs	r1, r2
 8017394:	0018      	movs	r0, r3
 8017396:	f000 f945 	bl	8017624 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801739a:	e10c      	b.n	80175b6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	225c      	movs	r2, #92	@ 0x5c
 80173a0:	5a9b      	ldrh	r3, [r3, r2]
 80173a2:	227e      	movs	r2, #126	@ 0x7e
 80173a4:	18ba      	adds	r2, r7, r2
 80173a6:	8812      	ldrh	r2, [r2, #0]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d000      	beq.n	80173ae <HAL_UART_IRQHandler+0x466>
 80173ac:	e103      	b.n	80175b6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2280      	movs	r2, #128	@ 0x80
 80173b2:	589b      	ldr	r3, [r3, r2]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2220      	movs	r2, #32
 80173ba:	4013      	ands	r3, r2
 80173bc:	2b20      	cmp	r3, #32
 80173be:	d000      	beq.n	80173c2 <HAL_UART_IRQHandler+0x47a>
 80173c0:	e0f9      	b.n	80175b6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2202      	movs	r2, #2
 80173c6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	225c      	movs	r2, #92	@ 0x5c
 80173cc:	5a9a      	ldrh	r2, [r3, r2]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	0011      	movs	r1, r2
 80173d2:	0018      	movs	r0, r3
 80173d4:	f000 f926 	bl	8017624 <HAL_UARTEx_RxEventCallback>
      return;
 80173d8:	e0ed      	b.n	80175b6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	225c      	movs	r2, #92	@ 0x5c
 80173de:	5a99      	ldrh	r1, [r3, r2]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	225e      	movs	r2, #94	@ 0x5e
 80173e4:	5a9b      	ldrh	r3, [r3, r2]
 80173e6:	b29a      	uxth	r2, r3
 80173e8:	208e      	movs	r0, #142	@ 0x8e
 80173ea:	183b      	adds	r3, r7, r0
 80173ec:	1a8a      	subs	r2, r1, r2
 80173ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	225e      	movs	r2, #94	@ 0x5e
 80173f4:	5a9b      	ldrh	r3, [r3, r2]
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d100      	bne.n	80173fe <HAL_UART_IRQHandler+0x4b6>
 80173fc:	e0dd      	b.n	80175ba <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80173fe:	183b      	adds	r3, r7, r0
 8017400:	881b      	ldrh	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d100      	bne.n	8017408 <HAL_UART_IRQHandler+0x4c0>
 8017406:	e0d8      	b.n	80175ba <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017408:	f3ef 8310 	mrs	r3, PRIMASK
 801740c:	60fb      	str	r3, [r7, #12]
  return(result);
 801740e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017410:	2488      	movs	r4, #136	@ 0x88
 8017412:	193a      	adds	r2, r7, r4
 8017414:	6013      	str	r3, [r2, #0]
 8017416:	2301      	movs	r3, #1
 8017418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	f383 8810 	msr	PRIMASK, r3
}
 8017420:	46c0      	nop			@ (mov r8, r8)
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4967      	ldr	r1, [pc, #412]	@ (80175cc <HAL_UART_IRQHandler+0x684>)
 801742e:	400a      	ands	r2, r1
 8017430:	601a      	str	r2, [r3, #0]
 8017432:	193b      	adds	r3, r7, r4
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	f383 8810 	msr	PRIMASK, r3
}
 801743e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017440:	f3ef 8310 	mrs	r3, PRIMASK
 8017444:	61bb      	str	r3, [r7, #24]
  return(result);
 8017446:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017448:	2484      	movs	r4, #132	@ 0x84
 801744a:	193a      	adds	r2, r7, r4
 801744c:	6013      	str	r3, [r2, #0]
 801744e:	2301      	movs	r3, #1
 8017450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017452:	69fb      	ldr	r3, [r7, #28]
 8017454:	f383 8810 	msr	PRIMASK, r3
}
 8017458:	46c0      	nop			@ (mov r8, r8)
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	689a      	ldr	r2, [r3, #8]
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	495a      	ldr	r1, [pc, #360]	@ (80175d0 <HAL_UART_IRQHandler+0x688>)
 8017466:	400a      	ands	r2, r1
 8017468:	609a      	str	r2, [r3, #8]
 801746a:	193b      	adds	r3, r7, r4
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017470:	6a3b      	ldr	r3, [r7, #32]
 8017472:	f383 8810 	msr	PRIMASK, r3
}
 8017476:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	228c      	movs	r2, #140	@ 0x8c
 801747c:	2120      	movs	r1, #32
 801747e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2200      	movs	r2, #0
 8017484:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	2200      	movs	r2, #0
 801748a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801748c:	f3ef 8310 	mrs	r3, PRIMASK
 8017490:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017494:	2480      	movs	r4, #128	@ 0x80
 8017496:	193a      	adds	r2, r7, r4
 8017498:	6013      	str	r3, [r2, #0]
 801749a:	2301      	movs	r3, #1
 801749c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174a0:	f383 8810 	msr	PRIMASK, r3
}
 80174a4:	46c0      	nop			@ (mov r8, r8)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	681a      	ldr	r2, [r3, #0]
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2110      	movs	r1, #16
 80174b2:	438a      	bics	r2, r1
 80174b4:	601a      	str	r2, [r3, #0]
 80174b6:	193b      	adds	r3, r7, r4
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174be:	f383 8810 	msr	PRIMASK, r3
}
 80174c2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2202      	movs	r2, #2
 80174c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80174ca:	183b      	adds	r3, r7, r0
 80174cc:	881a      	ldrh	r2, [r3, #0]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	0011      	movs	r1, r2
 80174d2:	0018      	movs	r0, r3
 80174d4:	f000 f8a6 	bl	8017624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80174d8:	e06f      	b.n	80175ba <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80174da:	23a4      	movs	r3, #164	@ 0xa4
 80174dc:	18fb      	adds	r3, r7, r3
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	2380      	movs	r3, #128	@ 0x80
 80174e2:	035b      	lsls	r3, r3, #13
 80174e4:	4013      	ands	r3, r2
 80174e6:	d010      	beq.n	801750a <HAL_UART_IRQHandler+0x5c2>
 80174e8:	239c      	movs	r3, #156	@ 0x9c
 80174ea:	18fb      	adds	r3, r7, r3
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	2380      	movs	r3, #128	@ 0x80
 80174f0:	03db      	lsls	r3, r3, #15
 80174f2:	4013      	ands	r3, r2
 80174f4:	d009      	beq.n	801750a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	2280      	movs	r2, #128	@ 0x80
 80174fc:	0352      	lsls	r2, r2, #13
 80174fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	0018      	movs	r0, r3
 8017504:	f000 ff1d 	bl	8018342 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017508:	e05a      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801750a:	23a4      	movs	r3, #164	@ 0xa4
 801750c:	18fb      	adds	r3, r7, r3
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2280      	movs	r2, #128	@ 0x80
 8017512:	4013      	ands	r3, r2
 8017514:	d016      	beq.n	8017544 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017516:	23a0      	movs	r3, #160	@ 0xa0
 8017518:	18fb      	adds	r3, r7, r3
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	2280      	movs	r2, #128	@ 0x80
 801751e:	4013      	ands	r3, r2
 8017520:	d106      	bne.n	8017530 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017522:	239c      	movs	r3, #156	@ 0x9c
 8017524:	18fb      	adds	r3, r7, r3
 8017526:	681a      	ldr	r2, [r3, #0]
 8017528:	2380      	movs	r3, #128	@ 0x80
 801752a:	041b      	lsls	r3, r3, #16
 801752c:	4013      	ands	r3, r2
 801752e:	d009      	beq.n	8017544 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017534:	2b00      	cmp	r3, #0
 8017536:	d042      	beq.n	80175be <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801753c:	687a      	ldr	r2, [r7, #4]
 801753e:	0010      	movs	r0, r2
 8017540:	4798      	blx	r3
    }
    return;
 8017542:	e03c      	b.n	80175be <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017544:	23a4      	movs	r3, #164	@ 0xa4
 8017546:	18fb      	adds	r3, r7, r3
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	2240      	movs	r2, #64	@ 0x40
 801754c:	4013      	ands	r3, r2
 801754e:	d00a      	beq.n	8017566 <HAL_UART_IRQHandler+0x61e>
 8017550:	23a0      	movs	r3, #160	@ 0xa0
 8017552:	18fb      	adds	r3, r7, r3
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2240      	movs	r2, #64	@ 0x40
 8017558:	4013      	ands	r3, r2
 801755a:	d004      	beq.n	8017566 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	0018      	movs	r0, r3
 8017560:	f000 fec3 	bl	80182ea <UART_EndTransmit_IT>
    return;
 8017564:	e02c      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017566:	23a4      	movs	r3, #164	@ 0xa4
 8017568:	18fb      	adds	r3, r7, r3
 801756a:	681a      	ldr	r2, [r3, #0]
 801756c:	2380      	movs	r3, #128	@ 0x80
 801756e:	041b      	lsls	r3, r3, #16
 8017570:	4013      	ands	r3, r2
 8017572:	d00b      	beq.n	801758c <HAL_UART_IRQHandler+0x644>
 8017574:	23a0      	movs	r3, #160	@ 0xa0
 8017576:	18fb      	adds	r3, r7, r3
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	2380      	movs	r3, #128	@ 0x80
 801757c:	05db      	lsls	r3, r3, #23
 801757e:	4013      	ands	r3, r2
 8017580:	d004      	beq.n	801758c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	0018      	movs	r0, r3
 8017586:	f000 feec 	bl	8018362 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801758a:	e019      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801758c:	23a4      	movs	r3, #164	@ 0xa4
 801758e:	18fb      	adds	r3, r7, r3
 8017590:	681a      	ldr	r2, [r3, #0]
 8017592:	2380      	movs	r3, #128	@ 0x80
 8017594:	045b      	lsls	r3, r3, #17
 8017596:	4013      	ands	r3, r2
 8017598:	d012      	beq.n	80175c0 <HAL_UART_IRQHandler+0x678>
 801759a:	23a0      	movs	r3, #160	@ 0xa0
 801759c:	18fb      	adds	r3, r7, r3
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	da0d      	bge.n	80175c0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	0018      	movs	r0, r3
 80175a8:	f000 fed3 	bl	8018352 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80175ac:	e008      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
      return;
 80175ae:	46c0      	nop			@ (mov r8, r8)
 80175b0:	e006      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
    return;
 80175b2:	46c0      	nop			@ (mov r8, r8)
 80175b4:	e004      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
      return;
 80175b6:	46c0      	nop			@ (mov r8, r8)
 80175b8:	e002      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
      return;
 80175ba:	46c0      	nop			@ (mov r8, r8)
 80175bc:	e000      	b.n	80175c0 <HAL_UART_IRQHandler+0x678>
    return;
 80175be:	46c0      	nop			@ (mov r8, r8)
  }
}
 80175c0:	46bd      	mov	sp, r7
 80175c2:	b02a      	add	sp, #168	@ 0xa8
 80175c4:	bdb0      	pop	{r4, r5, r7, pc}
 80175c6:	46c0      	nop			@ (mov r8, r8)
 80175c8:	fffffeff 	.word	0xfffffeff
 80175cc:	fffffedf 	.word	0xfffffedf
 80175d0:	effffffe 	.word	0xeffffffe

080175d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80175dc:	46c0      	nop			@ (mov r8, r8)
 80175de:	46bd      	mov	sp, r7
 80175e0:	b002      	add	sp, #8
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80175ec:	46c0      	nop			@ (mov r8, r8)
 80175ee:	46bd      	mov	sp, r7
 80175f0:	b002      	add	sp, #8
 80175f2:	bd80      	pop	{r7, pc}

080175f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b082      	sub	sp, #8
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80175fc:	46c0      	nop			@ (mov r8, r8)
 80175fe:	46bd      	mov	sp, r7
 8017600:	b002      	add	sp, #8
 8017602:	bd80      	pop	{r7, pc}

08017604 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801760c:	46c0      	nop			@ (mov r8, r8)
 801760e:	46bd      	mov	sp, r7
 8017610:	b002      	add	sp, #8
 8017612:	bd80      	pop	{r7, pc}

08017614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801761c:	46c0      	nop			@ (mov r8, r8)
 801761e:	46bd      	mov	sp, r7
 8017620:	b002      	add	sp, #8
 8017622:	bd80      	pop	{r7, pc}

08017624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	000a      	movs	r2, r1
 801762e:	1cbb      	adds	r3, r7, #2
 8017630:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017632:	46c0      	nop			@ (mov r8, r8)
 8017634:	46bd      	mov	sp, r7
 8017636:	b002      	add	sp, #8
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801763c:	b5b0      	push	{r4, r5, r7, lr}
 801763e:	b092      	sub	sp, #72	@ 0x48
 8017640:	af00      	add	r7, sp, #0
 8017642:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017644:	231f      	movs	r3, #31
 8017646:	2220      	movs	r2, #32
 8017648:	189b      	adds	r3, r3, r2
 801764a:	19db      	adds	r3, r3, r7
 801764c:	2200      	movs	r2, #0
 801764e:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8017650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	4ac8      	ldr	r2, [pc, #800]	@ (8017978 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017658:	689a      	ldr	r2, [r3, #8]
 801765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801765c:	691b      	ldr	r3, [r3, #16]
 801765e:	431a      	orrs	r2, r3
 8017660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017662:	695b      	ldr	r3, [r3, #20]
 8017664:	431a      	orrs	r2, r3
 8017666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017668:	69db      	ldr	r3, [r3, #28]
 801766a:	4313      	orrs	r3, r2
 801766c:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	4ac1      	ldr	r2, [pc, #772]	@ (801797c <UART_SetConfig+0x340>)
 8017676:	4013      	ands	r3, r2
 8017678:	0019      	movs	r1, r3
 801767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017680:	430b      	orrs	r3, r1
 8017682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	4abd      	ldr	r2, [pc, #756]	@ (8017980 <UART_SetConfig+0x344>)
 801768c:	4013      	ands	r3, r2
 801768e:	0018      	movs	r0, r3
 8017690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017692:	68d9      	ldr	r1, [r3, #12]
 8017694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	0003      	movs	r3, r0
 801769a:	430b      	orrs	r3, r1
 801769c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176a0:	699b      	ldr	r3, [r3, #24]
 80176a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80176a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4ab3      	ldr	r2, [pc, #716]	@ (8017978 <UART_SetConfig+0x33c>)
 80176aa:	4293      	cmp	r3, r2
 80176ac:	d00e      	beq.n	80176cc <UART_SetConfig+0x90>
 80176ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	4ab4      	ldr	r2, [pc, #720]	@ (8017984 <UART_SetConfig+0x348>)
 80176b4:	4293      	cmp	r3, r2
 80176b6:	d009      	beq.n	80176cc <UART_SetConfig+0x90>
 80176b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	4ab2      	ldr	r2, [pc, #712]	@ (8017988 <UART_SetConfig+0x34c>)
 80176be:	4293      	cmp	r3, r2
 80176c0:	d004      	beq.n	80176cc <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80176c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176c4:	6a1b      	ldr	r3, [r3, #32]
 80176c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80176c8:	4313      	orrs	r3, r2
 80176ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80176cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	689b      	ldr	r3, [r3, #8]
 80176d2:	4aae      	ldr	r2, [pc, #696]	@ (801798c <UART_SetConfig+0x350>)
 80176d4:	4013      	ands	r3, r2
 80176d6:	0019      	movs	r1, r3
 80176d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176de:	430b      	orrs	r3, r1
 80176e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80176e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80176e8:	220f      	movs	r2, #15
 80176ea:	4393      	bics	r3, r2
 80176ec:	0018      	movs	r0, r3
 80176ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80176f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	0003      	movs	r3, r0
 80176f8:	430b      	orrs	r3, r1
 80176fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80176fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4aa3      	ldr	r2, [pc, #652]	@ (8017990 <UART_SetConfig+0x354>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d102      	bne.n	801770c <UART_SetConfig+0xd0>
 8017706:	2301      	movs	r3, #1
 8017708:	643b      	str	r3, [r7, #64]	@ 0x40
 801770a:	e033      	b.n	8017774 <UART_SetConfig+0x138>
 801770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4aa0      	ldr	r2, [pc, #640]	@ (8017994 <UART_SetConfig+0x358>)
 8017712:	4293      	cmp	r3, r2
 8017714:	d102      	bne.n	801771c <UART_SetConfig+0xe0>
 8017716:	2302      	movs	r3, #2
 8017718:	643b      	str	r3, [r7, #64]	@ 0x40
 801771a:	e02b      	b.n	8017774 <UART_SetConfig+0x138>
 801771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	4a9d      	ldr	r2, [pc, #628]	@ (8017998 <UART_SetConfig+0x35c>)
 8017722:	4293      	cmp	r3, r2
 8017724:	d103      	bne.n	801772e <UART_SetConfig+0xf2>
 8017726:	2380      	movs	r3, #128	@ 0x80
 8017728:	025b      	lsls	r3, r3, #9
 801772a:	643b      	str	r3, [r7, #64]	@ 0x40
 801772c:	e022      	b.n	8017774 <UART_SetConfig+0x138>
 801772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4a9a      	ldr	r2, [pc, #616]	@ (801799c <UART_SetConfig+0x360>)
 8017734:	4293      	cmp	r3, r2
 8017736:	d103      	bne.n	8017740 <UART_SetConfig+0x104>
 8017738:	2380      	movs	r3, #128	@ 0x80
 801773a:	029b      	lsls	r3, r3, #10
 801773c:	643b      	str	r3, [r7, #64]	@ 0x40
 801773e:	e019      	b.n	8017774 <UART_SetConfig+0x138>
 8017740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	4a8c      	ldr	r2, [pc, #560]	@ (8017978 <UART_SetConfig+0x33c>)
 8017746:	4293      	cmp	r3, r2
 8017748:	d102      	bne.n	8017750 <UART_SetConfig+0x114>
 801774a:	2310      	movs	r3, #16
 801774c:	643b      	str	r3, [r7, #64]	@ 0x40
 801774e:	e011      	b.n	8017774 <UART_SetConfig+0x138>
 8017750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4a8b      	ldr	r2, [pc, #556]	@ (8017984 <UART_SetConfig+0x348>)
 8017756:	4293      	cmp	r3, r2
 8017758:	d102      	bne.n	8017760 <UART_SetConfig+0x124>
 801775a:	2308      	movs	r3, #8
 801775c:	643b      	str	r3, [r7, #64]	@ 0x40
 801775e:	e009      	b.n	8017774 <UART_SetConfig+0x138>
 8017760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4a88      	ldr	r2, [pc, #544]	@ (8017988 <UART_SetConfig+0x34c>)
 8017766:	4293      	cmp	r3, r2
 8017768:	d102      	bne.n	8017770 <UART_SetConfig+0x134>
 801776a:	2304      	movs	r3, #4
 801776c:	643b      	str	r3, [r7, #64]	@ 0x40
 801776e:	e001      	b.n	8017774 <UART_SetConfig+0x138>
 8017770:	2300      	movs	r3, #0
 8017772:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	4a7f      	ldr	r2, [pc, #508]	@ (8017978 <UART_SetConfig+0x33c>)
 801777a:	4293      	cmp	r3, r2
 801777c:	d00a      	beq.n	8017794 <UART_SetConfig+0x158>
 801777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	4a80      	ldr	r2, [pc, #512]	@ (8017984 <UART_SetConfig+0x348>)
 8017784:	4293      	cmp	r3, r2
 8017786:	d005      	beq.n	8017794 <UART_SetConfig+0x158>
 8017788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	4a7e      	ldr	r2, [pc, #504]	@ (8017988 <UART_SetConfig+0x34c>)
 801778e:	4293      	cmp	r3, r2
 8017790:	d000      	beq.n	8017794 <UART_SetConfig+0x158>
 8017792:	e06f      	b.n	8017874 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8017794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017796:	0018      	movs	r0, r3
 8017798:	f7fc ff3c 	bl	8014614 <HAL_RCCEx_GetPeriphCLKFreq>
 801779c:	0003      	movs	r3, r0
 801779e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 80177a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d100      	bne.n	80177a8 <UART_SetConfig+0x16c>
 80177a6:	e103      	b.n	80179b0 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80177a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80177ac:	4b7c      	ldr	r3, [pc, #496]	@ (80179a0 <UART_SetConfig+0x364>)
 80177ae:	0052      	lsls	r2, r2, #1
 80177b0:	5ad3      	ldrh	r3, [r2, r3]
 80177b2:	0019      	movs	r1, r3
 80177b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80177b6:	f7e8 fcaf 	bl	8000118 <__udivsi3>
 80177ba:	0003      	movs	r3, r0
 80177bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80177be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c0:	685a      	ldr	r2, [r3, #4]
 80177c2:	0013      	movs	r3, r2
 80177c4:	005b      	lsls	r3, r3, #1
 80177c6:	189b      	adds	r3, r3, r2
 80177c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d305      	bcc.n	80177da <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80177ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80177d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d906      	bls.n	80177e8 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 80177da:	231f      	movs	r3, #31
 80177dc:	2220      	movs	r2, #32
 80177de:	189b      	adds	r3, r3, r2
 80177e0:	19db      	adds	r3, r3, r7
 80177e2:	2201      	movs	r2, #1
 80177e4:	701a      	strb	r2, [r3, #0]
 80177e6:	e044      	b.n	8017872 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80177e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177ea:	61bb      	str	r3, [r7, #24]
 80177ec:	2300      	movs	r3, #0
 80177ee:	61fb      	str	r3, [r7, #28]
 80177f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80177f4:	4b6a      	ldr	r3, [pc, #424]	@ (80179a0 <UART_SetConfig+0x364>)
 80177f6:	0052      	lsls	r2, r2, #1
 80177f8:	5ad3      	ldrh	r3, [r2, r3]
 80177fa:	613b      	str	r3, [r7, #16]
 80177fc:	2300      	movs	r3, #0
 80177fe:	617b      	str	r3, [r7, #20]
 8017800:	693a      	ldr	r2, [r7, #16]
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	69b8      	ldr	r0, [r7, #24]
 8017806:	69f9      	ldr	r1, [r7, #28]
 8017808:	f7e8 fe1a 	bl	8000440 <__aeabi_uldivmod>
 801780c:	0002      	movs	r2, r0
 801780e:	000b      	movs	r3, r1
 8017810:	0e11      	lsrs	r1, r2, #24
 8017812:	021d      	lsls	r5, r3, #8
 8017814:	430d      	orrs	r5, r1
 8017816:	0214      	lsls	r4, r2, #8
 8017818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	085b      	lsrs	r3, r3, #1
 801781e:	60bb      	str	r3, [r7, #8]
 8017820:	2300      	movs	r3, #0
 8017822:	60fb      	str	r3, [r7, #12]
 8017824:	68b8      	ldr	r0, [r7, #8]
 8017826:	68f9      	ldr	r1, [r7, #12]
 8017828:	1900      	adds	r0, r0, r4
 801782a:	4169      	adcs	r1, r5
 801782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	603b      	str	r3, [r7, #0]
 8017832:	2300      	movs	r3, #0
 8017834:	607b      	str	r3, [r7, #4]
 8017836:	683a      	ldr	r2, [r7, #0]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f7e8 fe01 	bl	8000440 <__aeabi_uldivmod>
 801783e:	0002      	movs	r2, r0
 8017840:	000b      	movs	r3, r1
 8017842:	0013      	movs	r3, r2
 8017844:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017848:	23c0      	movs	r3, #192	@ 0xc0
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	429a      	cmp	r2, r3
 801784e:	d309      	bcc.n	8017864 <UART_SetConfig+0x228>
 8017850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017852:	2380      	movs	r3, #128	@ 0x80
 8017854:	035b      	lsls	r3, r3, #13
 8017856:	429a      	cmp	r2, r3
 8017858:	d204      	bcs.n	8017864 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 801785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017860:	60da      	str	r2, [r3, #12]
 8017862:	e006      	b.n	8017872 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8017864:	231f      	movs	r3, #31
 8017866:	2220      	movs	r2, #32
 8017868:	189b      	adds	r3, r3, r2
 801786a:	19db      	adds	r3, r3, r7
 801786c:	2201      	movs	r2, #1
 801786e:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8017870:	e09e      	b.n	80179b0 <UART_SetConfig+0x374>
 8017872:	e09d      	b.n	80179b0 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017876:	69da      	ldr	r2, [r3, #28]
 8017878:	2380      	movs	r3, #128	@ 0x80
 801787a:	021b      	lsls	r3, r3, #8
 801787c:	429a      	cmp	r2, r3
 801787e:	d14c      	bne.n	801791a <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8017880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017882:	0018      	movs	r0, r3
 8017884:	f7fc fec6 	bl	8014614 <HAL_RCCEx_GetPeriphCLKFreq>
 8017888:	0003      	movs	r3, r0
 801788a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801788e:	2b00      	cmp	r3, #0
 8017890:	d100      	bne.n	8017894 <UART_SetConfig+0x258>
 8017892:	e08d      	b.n	80179b0 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017896:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017898:	4b41      	ldr	r3, [pc, #260]	@ (80179a0 <UART_SetConfig+0x364>)
 801789a:	0052      	lsls	r2, r2, #1
 801789c:	5ad3      	ldrh	r3, [r2, r3]
 801789e:	0019      	movs	r1, r3
 80178a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80178a2:	f7e8 fc39 	bl	8000118 <__udivsi3>
 80178a6:	0003      	movs	r3, r0
 80178a8:	005a      	lsls	r2, r3, #1
 80178aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	085b      	lsrs	r3, r3, #1
 80178b0:	18d2      	adds	r2, r2, r3
 80178b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	0019      	movs	r1, r3
 80178b8:	0010      	movs	r0, r2
 80178ba:	f7e8 fc2d 	bl	8000118 <__udivsi3>
 80178be:	0003      	movs	r3, r0
 80178c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80178c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178c4:	2b0f      	cmp	r3, #15
 80178c6:	d921      	bls.n	801790c <UART_SetConfig+0x2d0>
 80178c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80178ca:	2380      	movs	r3, #128	@ 0x80
 80178cc:	025b      	lsls	r3, r3, #9
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d21c      	bcs.n	801790c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80178d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178d4:	b29a      	uxth	r2, r3
 80178d6:	2012      	movs	r0, #18
 80178d8:	2420      	movs	r4, #32
 80178da:	1903      	adds	r3, r0, r4
 80178dc:	19db      	adds	r3, r3, r7
 80178de:	210f      	movs	r1, #15
 80178e0:	438a      	bics	r2, r1
 80178e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80178e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178e6:	085b      	lsrs	r3, r3, #1
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	2207      	movs	r2, #7
 80178ec:	4013      	ands	r3, r2
 80178ee:	b299      	uxth	r1, r3
 80178f0:	1903      	adds	r3, r0, r4
 80178f2:	19db      	adds	r3, r3, r7
 80178f4:	1902      	adds	r2, r0, r4
 80178f6:	19d2      	adds	r2, r2, r7
 80178f8:	8812      	ldrh	r2, [r2, #0]
 80178fa:	430a      	orrs	r2, r1
 80178fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80178fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	1902      	adds	r2, r0, r4
 8017904:	19d2      	adds	r2, r2, r7
 8017906:	8812      	ldrh	r2, [r2, #0]
 8017908:	60da      	str	r2, [r3, #12]
 801790a:	e051      	b.n	80179b0 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 801790c:	231f      	movs	r3, #31
 801790e:	2220      	movs	r2, #32
 8017910:	189b      	adds	r3, r3, r2
 8017912:	19db      	adds	r3, r3, r7
 8017914:	2201      	movs	r2, #1
 8017916:	701a      	strb	r2, [r3, #0]
 8017918:	e04a      	b.n	80179b0 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801791a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801791c:	0018      	movs	r0, r3
 801791e:	f7fc fe79 	bl	8014614 <HAL_RCCEx_GetPeriphCLKFreq>
 8017922:	0003      	movs	r3, r0
 8017924:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8017926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017928:	2b00      	cmp	r3, #0
 801792a:	d041      	beq.n	80179b0 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801792e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017930:	4b1b      	ldr	r3, [pc, #108]	@ (80179a0 <UART_SetConfig+0x364>)
 8017932:	0052      	lsls	r2, r2, #1
 8017934:	5ad3      	ldrh	r3, [r2, r3]
 8017936:	0019      	movs	r1, r3
 8017938:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801793a:	f7e8 fbed 	bl	8000118 <__udivsi3>
 801793e:	0003      	movs	r3, r0
 8017940:	001a      	movs	r2, r3
 8017942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	085b      	lsrs	r3, r3, #1
 8017948:	18d2      	adds	r2, r2, r3
 801794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801794c:	685b      	ldr	r3, [r3, #4]
 801794e:	0019      	movs	r1, r3
 8017950:	0010      	movs	r0, r2
 8017952:	f7e8 fbe1 	bl	8000118 <__udivsi3>
 8017956:	0003      	movs	r3, r0
 8017958:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801795c:	2b0f      	cmp	r3, #15
 801795e:	d921      	bls.n	80179a4 <UART_SetConfig+0x368>
 8017960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017962:	2380      	movs	r3, #128	@ 0x80
 8017964:	025b      	lsls	r3, r3, #9
 8017966:	429a      	cmp	r2, r3
 8017968:	d21c      	bcs.n	80179a4 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801796a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801796c:	b29a      	uxth	r2, r3
 801796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	60da      	str	r2, [r3, #12]
 8017974:	e01c      	b.n	80179b0 <UART_SetConfig+0x374>
 8017976:	46c0      	nop			@ (mov r8, r8)
 8017978:	40008000 	.word	0x40008000
 801797c:	cfff69f3 	.word	0xcfff69f3
 8017980:	ffffcfff 	.word	0xffffcfff
 8017984:	40008400 	.word	0x40008400
 8017988:	40008c00 	.word	0x40008c00
 801798c:	11fff4ff 	.word	0x11fff4ff
 8017990:	40013800 	.word	0x40013800
 8017994:	40004400 	.word	0x40004400
 8017998:	40004800 	.word	0x40004800
 801799c:	40004c00 	.word	0x40004c00
 80179a0:	08018bac 	.word	0x08018bac
      }
      else
      {
        ret = HAL_ERROR;
 80179a4:	231f      	movs	r3, #31
 80179a6:	2220      	movs	r2, #32
 80179a8:	189b      	adds	r3, r3, r2
 80179aa:	19db      	adds	r3, r3, r7
 80179ac:	2201      	movs	r2, #1
 80179ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80179b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179b2:	226a      	movs	r2, #106	@ 0x6a
 80179b4:	2101      	movs	r1, #1
 80179b6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80179b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ba:	2268      	movs	r2, #104	@ 0x68
 80179bc:	2101      	movs	r1, #1
 80179be:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80179c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c2:	2200      	movs	r2, #0
 80179c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80179c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c8:	2200      	movs	r2, #0
 80179ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80179cc:	231f      	movs	r3, #31
 80179ce:	2220      	movs	r2, #32
 80179d0:	189b      	adds	r3, r3, r2
 80179d2:	19db      	adds	r3, r3, r7
 80179d4:	781b      	ldrb	r3, [r3, #0]
}
 80179d6:	0018      	movs	r0, r3
 80179d8:	46bd      	mov	sp, r7
 80179da:	b012      	add	sp, #72	@ 0x48
 80179dc:	bdb0      	pop	{r4, r5, r7, pc}
 80179de:	46c0      	nop			@ (mov r8, r8)

080179e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179ec:	2208      	movs	r2, #8
 80179ee:	4013      	ands	r3, r2
 80179f0:	d00b      	beq.n	8017a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	4a4a      	ldr	r2, [pc, #296]	@ (8017b24 <UART_AdvFeatureConfig+0x144>)
 80179fa:	4013      	ands	r3, r2
 80179fc:	0019      	movs	r1, r3
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	430a      	orrs	r2, r1
 8017a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a0e:	2201      	movs	r2, #1
 8017a10:	4013      	ands	r3, r2
 8017a12:	d00b      	beq.n	8017a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	685b      	ldr	r3, [r3, #4]
 8017a1a:	4a43      	ldr	r2, [pc, #268]	@ (8017b28 <UART_AdvFeatureConfig+0x148>)
 8017a1c:	4013      	ands	r3, r2
 8017a1e:	0019      	movs	r1, r3
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	430a      	orrs	r2, r1
 8017a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a30:	2202      	movs	r2, #2
 8017a32:	4013      	ands	r3, r2
 8017a34:	d00b      	beq.n	8017a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	685b      	ldr	r3, [r3, #4]
 8017a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8017b2c <UART_AdvFeatureConfig+0x14c>)
 8017a3e:	4013      	ands	r3, r2
 8017a40:	0019      	movs	r1, r3
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	430a      	orrs	r2, r1
 8017a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a52:	2204      	movs	r2, #4
 8017a54:	4013      	ands	r3, r2
 8017a56:	d00b      	beq.n	8017a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	4a34      	ldr	r2, [pc, #208]	@ (8017b30 <UART_AdvFeatureConfig+0x150>)
 8017a60:	4013      	ands	r3, r2
 8017a62:	0019      	movs	r1, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	430a      	orrs	r2, r1
 8017a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a74:	2210      	movs	r2, #16
 8017a76:	4013      	ands	r3, r2
 8017a78:	d00b      	beq.n	8017a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	689b      	ldr	r3, [r3, #8]
 8017a80:	4a2c      	ldr	r2, [pc, #176]	@ (8017b34 <UART_AdvFeatureConfig+0x154>)
 8017a82:	4013      	ands	r3, r2
 8017a84:	0019      	movs	r1, r3
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	430a      	orrs	r2, r1
 8017a90:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a96:	2220      	movs	r2, #32
 8017a98:	4013      	ands	r3, r2
 8017a9a:	d00b      	beq.n	8017ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	689b      	ldr	r3, [r3, #8]
 8017aa2:	4a25      	ldr	r2, [pc, #148]	@ (8017b38 <UART_AdvFeatureConfig+0x158>)
 8017aa4:	4013      	ands	r3, r2
 8017aa6:	0019      	movs	r1, r3
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	430a      	orrs	r2, r1
 8017ab2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ab8:	2240      	movs	r2, #64	@ 0x40
 8017aba:	4013      	ands	r3, r2
 8017abc:	d01d      	beq.n	8017afa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	685b      	ldr	r3, [r3, #4]
 8017ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8017b3c <UART_AdvFeatureConfig+0x15c>)
 8017ac6:	4013      	ands	r3, r2
 8017ac8:	0019      	movs	r1, r3
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	430a      	orrs	r2, r1
 8017ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ada:	2380      	movs	r3, #128	@ 0x80
 8017adc:	035b      	lsls	r3, r3, #13
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d10b      	bne.n	8017afa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	4a15      	ldr	r2, [pc, #84]	@ (8017b40 <UART_AdvFeatureConfig+0x160>)
 8017aea:	4013      	ands	r3, r2
 8017aec:	0019      	movs	r1, r3
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	430a      	orrs	r2, r1
 8017af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017afe:	2280      	movs	r2, #128	@ 0x80
 8017b00:	4013      	ands	r3, r2
 8017b02:	d00b      	beq.n	8017b1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8017b44 <UART_AdvFeatureConfig+0x164>)
 8017b0c:	4013      	ands	r3, r2
 8017b0e:	0019      	movs	r1, r3
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	430a      	orrs	r2, r1
 8017b1a:	605a      	str	r2, [r3, #4]
  }
}
 8017b1c:	46c0      	nop			@ (mov r8, r8)
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	b002      	add	sp, #8
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	ffff7fff 	.word	0xffff7fff
 8017b28:	fffdffff 	.word	0xfffdffff
 8017b2c:	fffeffff 	.word	0xfffeffff
 8017b30:	fffbffff 	.word	0xfffbffff
 8017b34:	ffffefff 	.word	0xffffefff
 8017b38:	ffffdfff 	.word	0xffffdfff
 8017b3c:	ffefffff 	.word	0xffefffff
 8017b40:	ff9fffff 	.word	0xff9fffff
 8017b44:	fff7ffff 	.word	0xfff7ffff

08017b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b092      	sub	sp, #72	@ 0x48
 8017b4c:	af02      	add	r7, sp, #8
 8017b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2290      	movs	r2, #144	@ 0x90
 8017b54:	2100      	movs	r1, #0
 8017b56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017b58:	f7f6 fe60 	bl	800e81c <HAL_GetTick>
 8017b5c:	0003      	movs	r3, r0
 8017b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	2208      	movs	r2, #8
 8017b68:	4013      	ands	r3, r2
 8017b6a:	2b08      	cmp	r3, #8
 8017b6c:	d12d      	bne.n	8017bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b70:	2280      	movs	r2, #128	@ 0x80
 8017b72:	0391      	lsls	r1, r2, #14
 8017b74:	6878      	ldr	r0, [r7, #4]
 8017b76:	4a47      	ldr	r2, [pc, #284]	@ (8017c94 <UART_CheckIdleState+0x14c>)
 8017b78:	9200      	str	r2, [sp, #0]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	f000 f88e 	bl	8017c9c <UART_WaitOnFlagUntilTimeout>
 8017b80:	1e03      	subs	r3, r0, #0
 8017b82:	d022      	beq.n	8017bca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017b84:	f3ef 8310 	mrs	r3, PRIMASK
 8017b88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8017b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017b8e:	2301      	movs	r3, #1
 8017b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b94:	f383 8810 	msr	PRIMASK, r3
}
 8017b98:	46c0      	nop			@ (mov r8, r8)
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	681a      	ldr	r2, [r3, #0]
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2180      	movs	r1, #128	@ 0x80
 8017ba6:	438a      	bics	r2, r1
 8017ba8:	601a      	str	r2, [r3, #0]
 8017baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bb0:	f383 8810 	msr	PRIMASK, r3
}
 8017bb4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	2288      	movs	r2, #136	@ 0x88
 8017bba:	2120      	movs	r1, #32
 8017bbc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2284      	movs	r2, #132	@ 0x84
 8017bc2:	2100      	movs	r1, #0
 8017bc4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017bc6:	2303      	movs	r3, #3
 8017bc8:	e060      	b.n	8017c8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2204      	movs	r2, #4
 8017bd2:	4013      	ands	r3, r2
 8017bd4:	2b04      	cmp	r3, #4
 8017bd6:	d146      	bne.n	8017c66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bda:	2280      	movs	r2, #128	@ 0x80
 8017bdc:	03d1      	lsls	r1, r2, #15
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	4a2c      	ldr	r2, [pc, #176]	@ (8017c94 <UART_CheckIdleState+0x14c>)
 8017be2:	9200      	str	r2, [sp, #0]
 8017be4:	2200      	movs	r2, #0
 8017be6:	f000 f859 	bl	8017c9c <UART_WaitOnFlagUntilTimeout>
 8017bea:	1e03      	subs	r3, r0, #0
 8017bec:	d03b      	beq.n	8017c66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017bee:	f3ef 8310 	mrs	r3, PRIMASK
 8017bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8017bf4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	f383 8810 	msr	PRIMASK, r3
}
 8017c02:	46c0      	nop			@ (mov r8, r8)
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4922      	ldr	r1, [pc, #136]	@ (8017c98 <UART_CheckIdleState+0x150>)
 8017c10:	400a      	ands	r2, r1
 8017c12:	601a      	str	r2, [r3, #0]
 8017c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	f383 8810 	msr	PRIMASK, r3
}
 8017c1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017c20:	f3ef 8310 	mrs	r3, PRIMASK
 8017c24:	61bb      	str	r3, [r7, #24]
  return(result);
 8017c26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c2e:	69fb      	ldr	r3, [r7, #28]
 8017c30:	f383 8810 	msr	PRIMASK, r3
}
 8017c34:	46c0      	nop			@ (mov r8, r8)
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	689a      	ldr	r2, [r3, #8]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2101      	movs	r1, #1
 8017c42:	438a      	bics	r2, r1
 8017c44:	609a      	str	r2, [r3, #8]
 8017c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c4a:	6a3b      	ldr	r3, [r7, #32]
 8017c4c:	f383 8810 	msr	PRIMASK, r3
}
 8017c50:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	228c      	movs	r2, #140	@ 0x8c
 8017c56:	2120      	movs	r1, #32
 8017c58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	2284      	movs	r2, #132	@ 0x84
 8017c5e:	2100      	movs	r1, #0
 8017c60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017c62:	2303      	movs	r3, #3
 8017c64:	e012      	b.n	8017c8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2288      	movs	r2, #136	@ 0x88
 8017c6a:	2120      	movs	r1, #32
 8017c6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	228c      	movs	r2, #140	@ 0x8c
 8017c72:	2120      	movs	r1, #32
 8017c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2284      	movs	r2, #132	@ 0x84
 8017c86:	2100      	movs	r1, #0
 8017c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017c8a:	2300      	movs	r3, #0
}
 8017c8c:	0018      	movs	r0, r3
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	b010      	add	sp, #64	@ 0x40
 8017c92:	bd80      	pop	{r7, pc}
 8017c94:	01ffffff 	.word	0x01ffffff
 8017c98:	fffffedf 	.word	0xfffffedf

08017c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b084      	sub	sp, #16
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	603b      	str	r3, [r7, #0]
 8017ca8:	1dfb      	adds	r3, r7, #7
 8017caa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017cac:	e051      	b.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017cae:	69bb      	ldr	r3, [r7, #24]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	d04e      	beq.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017cb4:	f7f6 fdb2 	bl	800e81c <HAL_GetTick>
 8017cb8:	0002      	movs	r2, r0
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	1ad3      	subs	r3, r2, r3
 8017cbe:	69ba      	ldr	r2, [r7, #24]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d302      	bcc.n	8017cca <UART_WaitOnFlagUntilTimeout+0x2e>
 8017cc4:	69bb      	ldr	r3, [r7, #24]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d101      	bne.n	8017cce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017cca:	2303      	movs	r3, #3
 8017ccc:	e051      	b.n	8017d72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	2204      	movs	r2, #4
 8017cd6:	4013      	ands	r3, r2
 8017cd8:	d03b      	beq.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	2b80      	cmp	r3, #128	@ 0x80
 8017cde:	d038      	beq.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	2b40      	cmp	r3, #64	@ 0x40
 8017ce4:	d035      	beq.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	69db      	ldr	r3, [r3, #28]
 8017cec:	2208      	movs	r2, #8
 8017cee:	4013      	ands	r3, r2
 8017cf0:	2b08      	cmp	r3, #8
 8017cf2:	d111      	bne.n	8017d18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	2208      	movs	r2, #8
 8017cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	0018      	movs	r0, r3
 8017d00:	f000 f922 	bl	8017f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2290      	movs	r2, #144	@ 0x90
 8017d08:	2108      	movs	r1, #8
 8017d0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	2284      	movs	r2, #132	@ 0x84
 8017d10:	2100      	movs	r1, #0
 8017d12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017d14:	2301      	movs	r3, #1
 8017d16:	e02c      	b.n	8017d72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	69da      	ldr	r2, [r3, #28]
 8017d1e:	2380      	movs	r3, #128	@ 0x80
 8017d20:	011b      	lsls	r3, r3, #4
 8017d22:	401a      	ands	r2, r3
 8017d24:	2380      	movs	r3, #128	@ 0x80
 8017d26:	011b      	lsls	r3, r3, #4
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d112      	bne.n	8017d52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2280      	movs	r2, #128	@ 0x80
 8017d32:	0112      	lsls	r2, r2, #4
 8017d34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	0018      	movs	r0, r3
 8017d3a:	f000 f905 	bl	8017f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2290      	movs	r2, #144	@ 0x90
 8017d42:	2120      	movs	r1, #32
 8017d44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	2284      	movs	r2, #132	@ 0x84
 8017d4a:	2100      	movs	r1, #0
 8017d4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017d4e:	2303      	movs	r3, #3
 8017d50:	e00f      	b.n	8017d72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	69db      	ldr	r3, [r3, #28]
 8017d58:	68ba      	ldr	r2, [r7, #8]
 8017d5a:	4013      	ands	r3, r2
 8017d5c:	68ba      	ldr	r2, [r7, #8]
 8017d5e:	1ad3      	subs	r3, r2, r3
 8017d60:	425a      	negs	r2, r3
 8017d62:	4153      	adcs	r3, r2
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	001a      	movs	r2, r3
 8017d68:	1dfb      	adds	r3, r7, #7
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d09e      	beq.n	8017cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017d70:	2300      	movs	r3, #0
}
 8017d72:	0018      	movs	r0, r3
 8017d74:	46bd      	mov	sp, r7
 8017d76:	b004      	add	sp, #16
 8017d78:	bd80      	pop	{r7, pc}
	...

08017d7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b090      	sub	sp, #64	@ 0x40
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	1dbb      	adds	r3, r7, #6
 8017d88:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	68ba      	ldr	r2, [r7, #8]
 8017d8e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	1dba      	adds	r2, r7, #6
 8017d94:	215c      	movs	r1, #92	@ 0x5c
 8017d96:	8812      	ldrh	r2, [r2, #0]
 8017d98:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	2290      	movs	r2, #144	@ 0x90
 8017d9e:	2100      	movs	r1, #0
 8017da0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	228c      	movs	r2, #140	@ 0x8c
 8017da6:	2122      	movs	r1, #34	@ 0x22
 8017da8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	2280      	movs	r2, #128	@ 0x80
 8017dae:	589b      	ldr	r3, [r3, r2]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d02d      	beq.n	8017e10 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	2280      	movs	r2, #128	@ 0x80
 8017db8:	589b      	ldr	r3, [r3, r2]
 8017dba:	4a40      	ldr	r2, [pc, #256]	@ (8017ebc <UART_Start_Receive_DMA+0x140>)
 8017dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2280      	movs	r2, #128	@ 0x80
 8017dc2:	589b      	ldr	r3, [r3, r2]
 8017dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8017ec0 <UART_Start_Receive_DMA+0x144>)
 8017dc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	2280      	movs	r2, #128	@ 0x80
 8017dcc:	589b      	ldr	r3, [r3, r2]
 8017dce:	4a3d      	ldr	r2, [pc, #244]	@ (8017ec4 <UART_Start_Receive_DMA+0x148>)
 8017dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	2280      	movs	r2, #128	@ 0x80
 8017dd6:	589b      	ldr	r3, [r3, r2]
 8017dd8:	2200      	movs	r2, #0
 8017dda:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2280      	movs	r2, #128	@ 0x80
 8017de0:	5898      	ldr	r0, [r3, r2]
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	3324      	adds	r3, #36	@ 0x24
 8017de8:	0019      	movs	r1, r3
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017dee:	001a      	movs	r2, r3
 8017df0:	1dbb      	adds	r3, r7, #6
 8017df2:	881b      	ldrh	r3, [r3, #0]
 8017df4:	f7f8 f8de 	bl	800ffb4 <HAL_DMA_Start_IT>
 8017df8:	1e03      	subs	r3, r0, #0
 8017dfa:	d009      	beq.n	8017e10 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2290      	movs	r2, #144	@ 0x90
 8017e00:	2110      	movs	r1, #16
 8017e02:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	228c      	movs	r2, #140	@ 0x8c
 8017e08:	2120      	movs	r1, #32
 8017e0a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e050      	b.n	8017eb2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	691b      	ldr	r3, [r3, #16]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d019      	beq.n	8017e4c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017e18:	f3ef 8310 	mrs	r3, PRIMASK
 8017e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e22:	2301      	movs	r3, #1
 8017e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e28:	f383 8810 	msr	PRIMASK, r3
}
 8017e2c:	46c0      	nop			@ (mov r8, r8)
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	681a      	ldr	r2, [r3, #0]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2180      	movs	r1, #128	@ 0x80
 8017e3a:	0049      	lsls	r1, r1, #1
 8017e3c:	430a      	orrs	r2, r1
 8017e3e:	601a      	str	r2, [r3, #0]
 8017e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e46:	f383 8810 	msr	PRIMASK, r3
}
 8017e4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8017e50:	613b      	str	r3, [r7, #16]
  return(result);
 8017e52:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017e56:	2301      	movs	r3, #1
 8017e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	f383 8810 	msr	PRIMASK, r3
}
 8017e60:	46c0      	nop			@ (mov r8, r8)
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	689a      	ldr	r2, [r3, #8]
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2101      	movs	r1, #1
 8017e6e:	430a      	orrs	r2, r1
 8017e70:	609a      	str	r2, [r3, #8]
 8017e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	f383 8810 	msr	PRIMASK, r3
}
 8017e7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017e82:	61fb      	str	r3, [r7, #28]
  return(result);
 8017e84:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e88:	2301      	movs	r3, #1
 8017e8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e8c:	6a3b      	ldr	r3, [r7, #32]
 8017e8e:	f383 8810 	msr	PRIMASK, r3
}
 8017e92:	46c0      	nop			@ (mov r8, r8)
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	689a      	ldr	r2, [r3, #8]
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2140      	movs	r1, #64	@ 0x40
 8017ea0:	430a      	orrs	r2, r1
 8017ea2:	609a      	str	r2, [r3, #8]
 8017ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eaa:	f383 8810 	msr	PRIMASK, r3
}
 8017eae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017eb0:	2300      	movs	r3, #0
}
 8017eb2:	0018      	movs	r0, r3
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	b010      	add	sp, #64	@ 0x40
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	46c0      	nop			@ (mov r8, r8)
 8017ebc:	080180cd 	.word	0x080180cd
 8017ec0:	080181fd 	.word	0x080181fd
 8017ec4:	0801823f 	.word	0x0801823f

08017ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b08a      	sub	sp, #40	@ 0x28
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8017ed6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8017ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017eda:	2301      	movs	r3, #1
 8017edc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	f383 8810 	msr	PRIMASK, r3
}
 8017ee4:	46c0      	nop			@ (mov r8, r8)
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	21c0      	movs	r1, #192	@ 0xc0
 8017ef2:	438a      	bics	r2, r1
 8017ef4:	601a      	str	r2, [r3, #0]
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	f383 8810 	msr	PRIMASK, r3
}
 8017f00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017f02:	f3ef 8310 	mrs	r3, PRIMASK
 8017f06:	617b      	str	r3, [r7, #20]
  return(result);
 8017f08:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8017f0a:	623b      	str	r3, [r7, #32]
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f10:	69bb      	ldr	r3, [r7, #24]
 8017f12:	f383 8810 	msr	PRIMASK, r3
}
 8017f16:	46c0      	nop			@ (mov r8, r8)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	689a      	ldr	r2, [r3, #8]
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	4908      	ldr	r1, [pc, #32]	@ (8017f44 <UART_EndTxTransfer+0x7c>)
 8017f24:	400a      	ands	r2, r1
 8017f26:	609a      	str	r2, [r3, #8]
 8017f28:	6a3b      	ldr	r3, [r7, #32]
 8017f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	f383 8810 	msr	PRIMASK, r3
}
 8017f32:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	2288      	movs	r2, #136	@ 0x88
 8017f38:	2120      	movs	r1, #32
 8017f3a:	5099      	str	r1, [r3, r2]
}
 8017f3c:	46c0      	nop			@ (mov r8, r8)
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	b00a      	add	sp, #40	@ 0x28
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	ff7fffff 	.word	0xff7fffff

08017f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b08e      	sub	sp, #56	@ 0x38
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017f50:	f3ef 8310 	mrs	r3, PRIMASK
 8017f54:	617b      	str	r3, [r7, #20]
  return(result);
 8017f56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f5e:	69bb      	ldr	r3, [r7, #24]
 8017f60:	f383 8810 	msr	PRIMASK, r3
}
 8017f64:	46c0      	nop			@ (mov r8, r8)
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	4926      	ldr	r1, [pc, #152]	@ (801800c <UART_EndRxTransfer+0xc4>)
 8017f72:	400a      	ands	r2, r1
 8017f74:	601a      	str	r2, [r3, #0]
 8017f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	f383 8810 	msr	PRIMASK, r3
}
 8017f80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017f82:	f3ef 8310 	mrs	r3, PRIMASK
 8017f86:	623b      	str	r3, [r7, #32]
  return(result);
 8017f88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f92:	f383 8810 	msr	PRIMASK, r3
}
 8017f96:	46c0      	nop			@ (mov r8, r8)
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	689a      	ldr	r2, [r3, #8]
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	491b      	ldr	r1, [pc, #108]	@ (8018010 <UART_EndRxTransfer+0xc8>)
 8017fa4:	400a      	ands	r2, r1
 8017fa6:	609a      	str	r2, [r3, #8]
 8017fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fae:	f383 8810 	msr	PRIMASK, r3
}
 8017fb2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d118      	bne.n	8017fee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8017fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8017fc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	f383 8810 	msr	PRIMASK, r3
}
 8017fd0:	46c0      	nop			@ (mov r8, r8)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	681a      	ldr	r2, [r3, #0]
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2110      	movs	r1, #16
 8017fde:	438a      	bics	r2, r1
 8017fe0:	601a      	str	r2, [r3, #0]
 8017fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	f383 8810 	msr	PRIMASK, r3
}
 8017fec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	228c      	movs	r2, #140	@ 0x8c
 8017ff2:	2120      	movs	r1, #32
 8017ff4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2200      	movs	r2, #0
 8018000:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8018002:	46c0      	nop			@ (mov r8, r8)
 8018004:	46bd      	mov	sp, r7
 8018006:	b00e      	add	sp, #56	@ 0x38
 8018008:	bd80      	pop	{r7, pc}
 801800a:	46c0      	nop			@ (mov r8, r8)
 801800c:	fffffedf 	.word	0xfffffedf
 8018010:	effffffe 	.word	0xeffffffe

08018014 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b08c      	sub	sp, #48	@ 0x30
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018020:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	2220      	movs	r2, #32
 801802a:	4013      	ands	r3, r2
 801802c:	d135      	bne.n	801809a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018030:	2256      	movs	r2, #86	@ 0x56
 8018032:	2100      	movs	r1, #0
 8018034:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018036:	f3ef 8310 	mrs	r3, PRIMASK
 801803a:	60fb      	str	r3, [r7, #12]
  return(result);
 801803c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801803e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018040:	2301      	movs	r3, #1
 8018042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018044:	693b      	ldr	r3, [r7, #16]
 8018046:	f383 8810 	msr	PRIMASK, r3
}
 801804a:	46c0      	nop			@ (mov r8, r8)
 801804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	689a      	ldr	r2, [r3, #8]
 8018052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	2180      	movs	r1, #128	@ 0x80
 8018058:	438a      	bics	r2, r1
 801805a:	609a      	str	r2, [r3, #8]
 801805c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801805e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	f383 8810 	msr	PRIMASK, r3
}
 8018066:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018068:	f3ef 8310 	mrs	r3, PRIMASK
 801806c:	61bb      	str	r3, [r7, #24]
  return(result);
 801806e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018070:	627b      	str	r3, [r7, #36]	@ 0x24
 8018072:	2301      	movs	r3, #1
 8018074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018076:	69fb      	ldr	r3, [r7, #28]
 8018078:	f383 8810 	msr	PRIMASK, r3
}
 801807c:	46c0      	nop			@ (mov r8, r8)
 801807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	681a      	ldr	r2, [r3, #0]
 8018084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	2140      	movs	r1, #64	@ 0x40
 801808a:	430a      	orrs	r2, r1
 801808c:	601a      	str	r2, [r3, #0]
 801808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018092:	6a3b      	ldr	r3, [r7, #32]
 8018094:	f383 8810 	msr	PRIMASK, r3
}
 8018098:	e004      	b.n	80180a4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801809a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801809c:	0018      	movs	r0, r3
 801809e:	f7ff fa99 	bl	80175d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80180a2:	46c0      	nop			@ (mov r8, r8)
 80180a4:	46c0      	nop			@ (mov r8, r8)
 80180a6:	46bd      	mov	sp, r7
 80180a8:	b00c      	add	sp, #48	@ 0x30
 80180aa:	bd80      	pop	{r7, pc}

080180ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	0018      	movs	r0, r3
 80180be:	f7ff fa91 	bl	80175e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80180c2:	46c0      	nop			@ (mov r8, r8)
 80180c4:	46bd      	mov	sp, r7
 80180c6:	b004      	add	sp, #16
 80180c8:	bd80      	pop	{r7, pc}
	...

080180cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b094      	sub	sp, #80	@ 0x50
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2220      	movs	r2, #32
 80180e2:	4013      	ands	r3, r2
 80180e4:	d16f      	bne.n	80181c6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80180e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180e8:	225e      	movs	r2, #94	@ 0x5e
 80180ea:	2100      	movs	r1, #0
 80180ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80180ee:	f3ef 8310 	mrs	r3, PRIMASK
 80180f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80180f4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80180f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80180f8:	2301      	movs	r3, #1
 80180fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	f383 8810 	msr	PRIMASK, r3
}
 8018102:	46c0      	nop			@ (mov r8, r8)
 8018104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	681a      	ldr	r2, [r3, #0]
 801810a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	493a      	ldr	r1, [pc, #232]	@ (80181f8 <UART_DMAReceiveCplt+0x12c>)
 8018110:	400a      	ands	r2, r1
 8018112:	601a      	str	r2, [r3, #0]
 8018114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018116:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018118:	6a3b      	ldr	r3, [r7, #32]
 801811a:	f383 8810 	msr	PRIMASK, r3
}
 801811e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018120:	f3ef 8310 	mrs	r3, PRIMASK
 8018124:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018128:	647b      	str	r3, [r7, #68]	@ 0x44
 801812a:	2301      	movs	r3, #1
 801812c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018130:	f383 8810 	msr	PRIMASK, r3
}
 8018134:	46c0      	nop			@ (mov r8, r8)
 8018136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	689a      	ldr	r2, [r3, #8]
 801813c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	2101      	movs	r1, #1
 8018142:	438a      	bics	r2, r1
 8018144:	609a      	str	r2, [r3, #8]
 8018146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801814a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801814c:	f383 8810 	msr	PRIMASK, r3
}
 8018150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018152:	f3ef 8310 	mrs	r3, PRIMASK
 8018156:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801815a:	643b      	str	r3, [r7, #64]	@ 0x40
 801815c:	2301      	movs	r3, #1
 801815e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018162:	f383 8810 	msr	PRIMASK, r3
}
 8018166:	46c0      	nop			@ (mov r8, r8)
 8018168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	689a      	ldr	r2, [r3, #8]
 801816e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2140      	movs	r1, #64	@ 0x40
 8018174:	438a      	bics	r2, r1
 8018176:	609a      	str	r2, [r3, #8]
 8018178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801817a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801817e:	f383 8810 	msr	PRIMASK, r3
}
 8018182:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018186:	228c      	movs	r2, #140	@ 0x8c
 8018188:	2120      	movs	r1, #32
 801818a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801818e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018190:	2b01      	cmp	r3, #1
 8018192:	d118      	bne.n	80181c6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018194:	f3ef 8310 	mrs	r3, PRIMASK
 8018198:	60fb      	str	r3, [r7, #12]
  return(result);
 801819a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801819e:	2301      	movs	r3, #1
 80181a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181a2:	693b      	ldr	r3, [r7, #16]
 80181a4:	f383 8810 	msr	PRIMASK, r3
}
 80181a8:	46c0      	nop			@ (mov r8, r8)
 80181aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	681a      	ldr	r2, [r3, #0]
 80181b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2110      	movs	r1, #16
 80181b6:	438a      	bics	r2, r1
 80181b8:	601a      	str	r2, [r3, #0]
 80181ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	f383 8810 	msr	PRIMASK, r3
}
 80181c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80181c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181c8:	2200      	movs	r2, #0
 80181ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d108      	bne.n	80181e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80181d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181d6:	225c      	movs	r2, #92	@ 0x5c
 80181d8:	5a9a      	ldrh	r2, [r3, r2]
 80181da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181dc:	0011      	movs	r1, r2
 80181de:	0018      	movs	r0, r3
 80181e0:	f7ff fa20 	bl	8017624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80181e4:	e003      	b.n	80181ee <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80181e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181e8:	0018      	movs	r0, r3
 80181ea:	f7ff fa03 	bl	80175f4 <HAL_UART_RxCpltCallback>
}
 80181ee:	46c0      	nop			@ (mov r8, r8)
 80181f0:	46bd      	mov	sp, r7
 80181f2:	b014      	add	sp, #80	@ 0x50
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	46c0      	nop			@ (mov r8, r8)
 80181f8:	fffffeff 	.word	0xfffffeff

080181fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b084      	sub	sp, #16
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018208:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	2201      	movs	r2, #1
 801820e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018214:	2b01      	cmp	r3, #1
 8018216:	d10a      	bne.n	801822e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	225c      	movs	r2, #92	@ 0x5c
 801821c:	5a9b      	ldrh	r3, [r3, r2]
 801821e:	085b      	lsrs	r3, r3, #1
 8018220:	b29a      	uxth	r2, r3
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	0011      	movs	r1, r2
 8018226:	0018      	movs	r0, r3
 8018228:	f7ff f9fc 	bl	8017624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801822c:	e003      	b.n	8018236 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	0018      	movs	r0, r3
 8018232:	f7ff f9e7 	bl	8017604 <HAL_UART_RxHalfCpltCallback>
}
 8018236:	46c0      	nop			@ (mov r8, r8)
 8018238:	46bd      	mov	sp, r7
 801823a:	b004      	add	sp, #16
 801823c:	bd80      	pop	{r7, pc}

0801823e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801823e:	b580      	push	{r7, lr}
 8018240:	b086      	sub	sp, #24
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801824a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	2288      	movs	r2, #136	@ 0x88
 8018250:	589b      	ldr	r3, [r3, r2]
 8018252:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	228c      	movs	r2, #140	@ 0x8c
 8018258:	589b      	ldr	r3, [r3, r2]
 801825a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	689b      	ldr	r3, [r3, #8]
 8018262:	2280      	movs	r2, #128	@ 0x80
 8018264:	4013      	ands	r3, r2
 8018266:	2b80      	cmp	r3, #128	@ 0x80
 8018268:	d10a      	bne.n	8018280 <UART_DMAError+0x42>
 801826a:	693b      	ldr	r3, [r7, #16]
 801826c:	2b21      	cmp	r3, #33	@ 0x21
 801826e:	d107      	bne.n	8018280 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	2256      	movs	r2, #86	@ 0x56
 8018274:	2100      	movs	r1, #0
 8018276:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	0018      	movs	r0, r3
 801827c:	f7ff fe24 	bl	8017ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	689b      	ldr	r3, [r3, #8]
 8018286:	2240      	movs	r2, #64	@ 0x40
 8018288:	4013      	ands	r3, r2
 801828a:	2b40      	cmp	r3, #64	@ 0x40
 801828c:	d10a      	bne.n	80182a4 <UART_DMAError+0x66>
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	2b22      	cmp	r3, #34	@ 0x22
 8018292:	d107      	bne.n	80182a4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	225e      	movs	r2, #94	@ 0x5e
 8018298:	2100      	movs	r1, #0
 801829a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	0018      	movs	r0, r3
 80182a0:	f7ff fe52 	bl	8017f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	2290      	movs	r2, #144	@ 0x90
 80182a8:	589b      	ldr	r3, [r3, r2]
 80182aa:	2210      	movs	r2, #16
 80182ac:	431a      	orrs	r2, r3
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	2190      	movs	r1, #144	@ 0x90
 80182b2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	0018      	movs	r0, r3
 80182b8:	f7ff f9ac 	bl	8017614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182bc:	46c0      	nop			@ (mov r8, r8)
 80182be:	46bd      	mov	sp, r7
 80182c0:	b006      	add	sp, #24
 80182c2:	bd80      	pop	{r7, pc}

080182c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b084      	sub	sp, #16
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	225e      	movs	r2, #94	@ 0x5e
 80182d6:	2100      	movs	r1, #0
 80182d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	0018      	movs	r0, r3
 80182de:	f7ff f999 	bl	8017614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182e2:	46c0      	nop			@ (mov r8, r8)
 80182e4:	46bd      	mov	sp, r7
 80182e6:	b004      	add	sp, #16
 80182e8:	bd80      	pop	{r7, pc}

080182ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b086      	sub	sp, #24
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80182f2:	f3ef 8310 	mrs	r3, PRIMASK
 80182f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80182f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80182fa:	617b      	str	r3, [r7, #20]
 80182fc:	2301      	movs	r3, #1
 80182fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	f383 8810 	msr	PRIMASK, r3
}
 8018306:	46c0      	nop			@ (mov r8, r8)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2140      	movs	r1, #64	@ 0x40
 8018314:	438a      	bics	r2, r1
 8018316:	601a      	str	r2, [r3, #0]
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	f383 8810 	msr	PRIMASK, r3
}
 8018322:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2288      	movs	r2, #136	@ 0x88
 8018328:	2120      	movs	r1, #32
 801832a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2200      	movs	r2, #0
 8018330:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	0018      	movs	r0, r3
 8018336:	f7ff f94d 	bl	80175d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801833a:	46c0      	nop			@ (mov r8, r8)
 801833c:	46bd      	mov	sp, r7
 801833e:	b006      	add	sp, #24
 8018340:	bd80      	pop	{r7, pc}

08018342 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018342:	b580      	push	{r7, lr}
 8018344:	b082      	sub	sp, #8
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801834a:	46c0      	nop			@ (mov r8, r8)
 801834c:	46bd      	mov	sp, r7
 801834e:	b002      	add	sp, #8
 8018350:	bd80      	pop	{r7, pc}

08018352 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018352:	b580      	push	{r7, lr}
 8018354:	b082      	sub	sp, #8
 8018356:	af00      	add	r7, sp, #0
 8018358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801835a:	46c0      	nop			@ (mov r8, r8)
 801835c:	46bd      	mov	sp, r7
 801835e:	b002      	add	sp, #8
 8018360:	bd80      	pop	{r7, pc}

08018362 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018362:	b580      	push	{r7, lr}
 8018364:	b082      	sub	sp, #8
 8018366:	af00      	add	r7, sp, #0
 8018368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801836a:	46c0      	nop			@ (mov r8, r8)
 801836c:	46bd      	mov	sp, r7
 801836e:	b002      	add	sp, #8
 8018370:	bd80      	pop	{r7, pc}
	...

08018374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b084      	sub	sp, #16
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	2284      	movs	r2, #132	@ 0x84
 8018380:	5c9b      	ldrb	r3, [r3, r2]
 8018382:	2b01      	cmp	r3, #1
 8018384:	d101      	bne.n	801838a <HAL_UARTEx_DisableFifoMode+0x16>
 8018386:	2302      	movs	r3, #2
 8018388:	e027      	b.n	80183da <HAL_UARTEx_DisableFifoMode+0x66>
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2284      	movs	r2, #132	@ 0x84
 801838e:	2101      	movs	r1, #1
 8018390:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2288      	movs	r2, #136	@ 0x88
 8018396:	2124      	movs	r1, #36	@ 0x24
 8018398:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	681a      	ldr	r2, [r3, #0]
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2101      	movs	r1, #1
 80183ae:	438a      	bics	r2, r1
 80183b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	4a0b      	ldr	r2, [pc, #44]	@ (80183e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80183b6:	4013      	ands	r3, r2
 80183b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2200      	movs	r2, #0
 80183be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	68fa      	ldr	r2, [r7, #12]
 80183c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2288      	movs	r2, #136	@ 0x88
 80183cc:	2120      	movs	r1, #32
 80183ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2284      	movs	r2, #132	@ 0x84
 80183d4:	2100      	movs	r1, #0
 80183d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80183d8:	2300      	movs	r3, #0
}
 80183da:	0018      	movs	r0, r3
 80183dc:	46bd      	mov	sp, r7
 80183de:	b004      	add	sp, #16
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	46c0      	nop			@ (mov r8, r8)
 80183e4:	dfffffff 	.word	0xdfffffff

080183e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b084      	sub	sp, #16
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	2284      	movs	r2, #132	@ 0x84
 80183f6:	5c9b      	ldrb	r3, [r3, r2]
 80183f8:	2b01      	cmp	r3, #1
 80183fa:	d101      	bne.n	8018400 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80183fc:	2302      	movs	r3, #2
 80183fe:	e02e      	b.n	801845e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2284      	movs	r2, #132	@ 0x84
 8018404:	2101      	movs	r1, #1
 8018406:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2288      	movs	r2, #136	@ 0x88
 801840c:	2124      	movs	r1, #36	@ 0x24
 801840e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	681a      	ldr	r2, [r3, #0]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	2101      	movs	r1, #1
 8018424:	438a      	bics	r2, r1
 8018426:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	689b      	ldr	r3, [r3, #8]
 801842e:	00db      	lsls	r3, r3, #3
 8018430:	08d9      	lsrs	r1, r3, #3
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	683a      	ldr	r2, [r7, #0]
 8018438:	430a      	orrs	r2, r1
 801843a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	0018      	movs	r0, r3
 8018440:	f000 f854 	bl	80184ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	68fa      	ldr	r2, [r7, #12]
 801844a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2288      	movs	r2, #136	@ 0x88
 8018450:	2120      	movs	r1, #32
 8018452:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2284      	movs	r2, #132	@ 0x84
 8018458:	2100      	movs	r1, #0
 801845a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801845c:	2300      	movs	r3, #0
}
 801845e:	0018      	movs	r0, r3
 8018460:	46bd      	mov	sp, r7
 8018462:	b004      	add	sp, #16
 8018464:	bd80      	pop	{r7, pc}
	...

08018468 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b084      	sub	sp, #16
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
 8018470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2284      	movs	r2, #132	@ 0x84
 8018476:	5c9b      	ldrb	r3, [r3, r2]
 8018478:	2b01      	cmp	r3, #1
 801847a:	d101      	bne.n	8018480 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801847c:	2302      	movs	r3, #2
 801847e:	e02f      	b.n	80184e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2284      	movs	r2, #132	@ 0x84
 8018484:	2101      	movs	r1, #1
 8018486:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2288      	movs	r2, #136	@ 0x88
 801848c:	2124      	movs	r1, #36	@ 0x24
 801848e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	681a      	ldr	r2, [r3, #0]
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2101      	movs	r1, #1
 80184a4:	438a      	bics	r2, r1
 80184a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	689b      	ldr	r3, [r3, #8]
 80184ae:	4a0e      	ldr	r2, [pc, #56]	@ (80184e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80184b0:	4013      	ands	r3, r2
 80184b2:	0019      	movs	r1, r3
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	683a      	ldr	r2, [r7, #0]
 80184ba:	430a      	orrs	r2, r1
 80184bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	0018      	movs	r0, r3
 80184c2:	f000 f813 	bl	80184ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	68fa      	ldr	r2, [r7, #12]
 80184cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2288      	movs	r2, #136	@ 0x88
 80184d2:	2120      	movs	r1, #32
 80184d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2284      	movs	r2, #132	@ 0x84
 80184da:	2100      	movs	r1, #0
 80184dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80184de:	2300      	movs	r3, #0
}
 80184e0:	0018      	movs	r0, r3
 80184e2:	46bd      	mov	sp, r7
 80184e4:	b004      	add	sp, #16
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	f1ffffff 	.word	0xf1ffffff

080184ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184ee:	b085      	sub	sp, #20
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d108      	bne.n	801850e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	226a      	movs	r2, #106	@ 0x6a
 8018500:	2101      	movs	r1, #1
 8018502:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2268      	movs	r2, #104	@ 0x68
 8018508:	2101      	movs	r1, #1
 801850a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801850c:	e043      	b.n	8018596 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801850e:	260f      	movs	r6, #15
 8018510:	19bb      	adds	r3, r7, r6
 8018512:	2208      	movs	r2, #8
 8018514:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018516:	200e      	movs	r0, #14
 8018518:	183b      	adds	r3, r7, r0
 801851a:	2208      	movs	r2, #8
 801851c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	689b      	ldr	r3, [r3, #8]
 8018524:	0e5b      	lsrs	r3, r3, #25
 8018526:	b2da      	uxtb	r2, r3
 8018528:	240d      	movs	r4, #13
 801852a:	193b      	adds	r3, r7, r4
 801852c:	2107      	movs	r1, #7
 801852e:	400a      	ands	r2, r1
 8018530:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	689b      	ldr	r3, [r3, #8]
 8018538:	0f5b      	lsrs	r3, r3, #29
 801853a:	b2da      	uxtb	r2, r3
 801853c:	250c      	movs	r5, #12
 801853e:	197b      	adds	r3, r7, r5
 8018540:	2107      	movs	r1, #7
 8018542:	400a      	ands	r2, r1
 8018544:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018546:	183b      	adds	r3, r7, r0
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	197a      	adds	r2, r7, r5
 801854c:	7812      	ldrb	r2, [r2, #0]
 801854e:	4914      	ldr	r1, [pc, #80]	@ (80185a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8018550:	5c8a      	ldrb	r2, [r1, r2]
 8018552:	435a      	muls	r2, r3
 8018554:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8018556:	197b      	adds	r3, r7, r5
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	4a12      	ldr	r2, [pc, #72]	@ (80185a4 <UARTEx_SetNbDataToProcess+0xb8>)
 801855c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801855e:	0019      	movs	r1, r3
 8018560:	f7e7 fe64 	bl	800022c <__divsi3>
 8018564:	0003      	movs	r3, r0
 8018566:	b299      	uxth	r1, r3
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	226a      	movs	r2, #106	@ 0x6a
 801856c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801856e:	19bb      	adds	r3, r7, r6
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	193a      	adds	r2, r7, r4
 8018574:	7812      	ldrb	r2, [r2, #0]
 8018576:	490a      	ldr	r1, [pc, #40]	@ (80185a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8018578:	5c8a      	ldrb	r2, [r1, r2]
 801857a:	435a      	muls	r2, r3
 801857c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801857e:	193b      	adds	r3, r7, r4
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	4a08      	ldr	r2, [pc, #32]	@ (80185a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8018584:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018586:	0019      	movs	r1, r3
 8018588:	f7e7 fe50 	bl	800022c <__divsi3>
 801858c:	0003      	movs	r3, r0
 801858e:	b299      	uxth	r1, r3
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2268      	movs	r2, #104	@ 0x68
 8018594:	5299      	strh	r1, [r3, r2]
}
 8018596:	46c0      	nop			@ (mov r8, r8)
 8018598:	46bd      	mov	sp, r7
 801859a:	b005      	add	sp, #20
 801859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859e:	46c0      	nop			@ (mov r8, r8)
 80185a0:	08018bc4 	.word	0x08018bc4
 80185a4:	08018bcc 	.word	0x08018bcc

080185a8 <malloc>:
 80185a8:	b510      	push	{r4, lr}
 80185aa:	4b03      	ldr	r3, [pc, #12]	@ (80185b8 <malloc+0x10>)
 80185ac:	0001      	movs	r1, r0
 80185ae:	6818      	ldr	r0, [r3, #0]
 80185b0:	f000 f830 	bl	8018614 <_malloc_r>
 80185b4:	bd10      	pop	{r4, pc}
 80185b6:	46c0      	nop			@ (mov r8, r8)
 80185b8:	2000022c 	.word	0x2000022c

080185bc <free>:
 80185bc:	b510      	push	{r4, lr}
 80185be:	4b03      	ldr	r3, [pc, #12]	@ (80185cc <free+0x10>)
 80185c0:	0001      	movs	r1, r0
 80185c2:	6818      	ldr	r0, [r3, #0]
 80185c4:	f000 f938 	bl	8018838 <_free_r>
 80185c8:	bd10      	pop	{r4, pc}
 80185ca:	46c0      	nop			@ (mov r8, r8)
 80185cc:	2000022c 	.word	0x2000022c

080185d0 <sbrk_aligned>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	4e0f      	ldr	r6, [pc, #60]	@ (8018610 <sbrk_aligned+0x40>)
 80185d4:	000d      	movs	r5, r1
 80185d6:	6831      	ldr	r1, [r6, #0]
 80185d8:	0004      	movs	r4, r0
 80185da:	2900      	cmp	r1, #0
 80185dc:	d102      	bne.n	80185e4 <sbrk_aligned+0x14>
 80185de:	f000 f8e3 	bl	80187a8 <_sbrk_r>
 80185e2:	6030      	str	r0, [r6, #0]
 80185e4:	0029      	movs	r1, r5
 80185e6:	0020      	movs	r0, r4
 80185e8:	f000 f8de 	bl	80187a8 <_sbrk_r>
 80185ec:	1c43      	adds	r3, r0, #1
 80185ee:	d103      	bne.n	80185f8 <sbrk_aligned+0x28>
 80185f0:	2501      	movs	r5, #1
 80185f2:	426d      	negs	r5, r5
 80185f4:	0028      	movs	r0, r5
 80185f6:	bd70      	pop	{r4, r5, r6, pc}
 80185f8:	2303      	movs	r3, #3
 80185fa:	1cc5      	adds	r5, r0, #3
 80185fc:	439d      	bics	r5, r3
 80185fe:	42a8      	cmp	r0, r5
 8018600:	d0f8      	beq.n	80185f4 <sbrk_aligned+0x24>
 8018602:	1a29      	subs	r1, r5, r0
 8018604:	0020      	movs	r0, r4
 8018606:	f000 f8cf 	bl	80187a8 <_sbrk_r>
 801860a:	3001      	adds	r0, #1
 801860c:	d1f2      	bne.n	80185f4 <sbrk_aligned+0x24>
 801860e:	e7ef      	b.n	80185f0 <sbrk_aligned+0x20>
 8018610:	20001184 	.word	0x20001184

08018614 <_malloc_r>:
 8018614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018616:	2203      	movs	r2, #3
 8018618:	1ccb      	adds	r3, r1, #3
 801861a:	4393      	bics	r3, r2
 801861c:	3308      	adds	r3, #8
 801861e:	0005      	movs	r5, r0
 8018620:	001f      	movs	r7, r3
 8018622:	2b0c      	cmp	r3, #12
 8018624:	d234      	bcs.n	8018690 <_malloc_r+0x7c>
 8018626:	270c      	movs	r7, #12
 8018628:	42b9      	cmp	r1, r7
 801862a:	d833      	bhi.n	8018694 <_malloc_r+0x80>
 801862c:	0028      	movs	r0, r5
 801862e:	f000 f871 	bl	8018714 <__malloc_lock>
 8018632:	4e37      	ldr	r6, [pc, #220]	@ (8018710 <_malloc_r+0xfc>)
 8018634:	6833      	ldr	r3, [r6, #0]
 8018636:	001c      	movs	r4, r3
 8018638:	2c00      	cmp	r4, #0
 801863a:	d12f      	bne.n	801869c <_malloc_r+0x88>
 801863c:	0039      	movs	r1, r7
 801863e:	0028      	movs	r0, r5
 8018640:	f7ff ffc6 	bl	80185d0 <sbrk_aligned>
 8018644:	0004      	movs	r4, r0
 8018646:	1c43      	adds	r3, r0, #1
 8018648:	d15f      	bne.n	801870a <_malloc_r+0xf6>
 801864a:	6834      	ldr	r4, [r6, #0]
 801864c:	9400      	str	r4, [sp, #0]
 801864e:	9b00      	ldr	r3, [sp, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d14a      	bne.n	80186ea <_malloc_r+0xd6>
 8018654:	2c00      	cmp	r4, #0
 8018656:	d052      	beq.n	80186fe <_malloc_r+0xea>
 8018658:	6823      	ldr	r3, [r4, #0]
 801865a:	0028      	movs	r0, r5
 801865c:	18e3      	adds	r3, r4, r3
 801865e:	9900      	ldr	r1, [sp, #0]
 8018660:	9301      	str	r3, [sp, #4]
 8018662:	f000 f8a1 	bl	80187a8 <_sbrk_r>
 8018666:	9b01      	ldr	r3, [sp, #4]
 8018668:	4283      	cmp	r3, r0
 801866a:	d148      	bne.n	80186fe <_malloc_r+0xea>
 801866c:	6823      	ldr	r3, [r4, #0]
 801866e:	0028      	movs	r0, r5
 8018670:	1aff      	subs	r7, r7, r3
 8018672:	0039      	movs	r1, r7
 8018674:	f7ff ffac 	bl	80185d0 <sbrk_aligned>
 8018678:	3001      	adds	r0, #1
 801867a:	d040      	beq.n	80186fe <_malloc_r+0xea>
 801867c:	6823      	ldr	r3, [r4, #0]
 801867e:	19db      	adds	r3, r3, r7
 8018680:	6023      	str	r3, [r4, #0]
 8018682:	6833      	ldr	r3, [r6, #0]
 8018684:	685a      	ldr	r2, [r3, #4]
 8018686:	2a00      	cmp	r2, #0
 8018688:	d133      	bne.n	80186f2 <_malloc_r+0xde>
 801868a:	9b00      	ldr	r3, [sp, #0]
 801868c:	6033      	str	r3, [r6, #0]
 801868e:	e019      	b.n	80186c4 <_malloc_r+0xb0>
 8018690:	2b00      	cmp	r3, #0
 8018692:	dac9      	bge.n	8018628 <_malloc_r+0x14>
 8018694:	230c      	movs	r3, #12
 8018696:	602b      	str	r3, [r5, #0]
 8018698:	2000      	movs	r0, #0
 801869a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801869c:	6821      	ldr	r1, [r4, #0]
 801869e:	1bc9      	subs	r1, r1, r7
 80186a0:	d420      	bmi.n	80186e4 <_malloc_r+0xd0>
 80186a2:	290b      	cmp	r1, #11
 80186a4:	d90a      	bls.n	80186bc <_malloc_r+0xa8>
 80186a6:	19e2      	adds	r2, r4, r7
 80186a8:	6027      	str	r7, [r4, #0]
 80186aa:	42a3      	cmp	r3, r4
 80186ac:	d104      	bne.n	80186b8 <_malloc_r+0xa4>
 80186ae:	6032      	str	r2, [r6, #0]
 80186b0:	6863      	ldr	r3, [r4, #4]
 80186b2:	6011      	str	r1, [r2, #0]
 80186b4:	6053      	str	r3, [r2, #4]
 80186b6:	e005      	b.n	80186c4 <_malloc_r+0xb0>
 80186b8:	605a      	str	r2, [r3, #4]
 80186ba:	e7f9      	b.n	80186b0 <_malloc_r+0x9c>
 80186bc:	6862      	ldr	r2, [r4, #4]
 80186be:	42a3      	cmp	r3, r4
 80186c0:	d10e      	bne.n	80186e0 <_malloc_r+0xcc>
 80186c2:	6032      	str	r2, [r6, #0]
 80186c4:	0028      	movs	r0, r5
 80186c6:	f000 f82d 	bl	8018724 <__malloc_unlock>
 80186ca:	0020      	movs	r0, r4
 80186cc:	2207      	movs	r2, #7
 80186ce:	300b      	adds	r0, #11
 80186d0:	1d23      	adds	r3, r4, #4
 80186d2:	4390      	bics	r0, r2
 80186d4:	1ac2      	subs	r2, r0, r3
 80186d6:	4298      	cmp	r0, r3
 80186d8:	d0df      	beq.n	801869a <_malloc_r+0x86>
 80186da:	1a1b      	subs	r3, r3, r0
 80186dc:	50a3      	str	r3, [r4, r2]
 80186de:	e7dc      	b.n	801869a <_malloc_r+0x86>
 80186e0:	605a      	str	r2, [r3, #4]
 80186e2:	e7ef      	b.n	80186c4 <_malloc_r+0xb0>
 80186e4:	0023      	movs	r3, r4
 80186e6:	6864      	ldr	r4, [r4, #4]
 80186e8:	e7a6      	b.n	8018638 <_malloc_r+0x24>
 80186ea:	9c00      	ldr	r4, [sp, #0]
 80186ec:	6863      	ldr	r3, [r4, #4]
 80186ee:	9300      	str	r3, [sp, #0]
 80186f0:	e7ad      	b.n	801864e <_malloc_r+0x3a>
 80186f2:	001a      	movs	r2, r3
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	42a3      	cmp	r3, r4
 80186f8:	d1fb      	bne.n	80186f2 <_malloc_r+0xde>
 80186fa:	2300      	movs	r3, #0
 80186fc:	e7da      	b.n	80186b4 <_malloc_r+0xa0>
 80186fe:	230c      	movs	r3, #12
 8018700:	0028      	movs	r0, r5
 8018702:	602b      	str	r3, [r5, #0]
 8018704:	f000 f80e 	bl	8018724 <__malloc_unlock>
 8018708:	e7c6      	b.n	8018698 <_malloc_r+0x84>
 801870a:	6007      	str	r7, [r0, #0]
 801870c:	e7da      	b.n	80186c4 <_malloc_r+0xb0>
 801870e:	46c0      	nop			@ (mov r8, r8)
 8018710:	20001188 	.word	0x20001188

08018714 <__malloc_lock>:
 8018714:	b510      	push	{r4, lr}
 8018716:	4802      	ldr	r0, [pc, #8]	@ (8018720 <__malloc_lock+0xc>)
 8018718:	f000 f882 	bl	8018820 <__retarget_lock_acquire_recursive>
 801871c:	bd10      	pop	{r4, pc}
 801871e:	46c0      	nop			@ (mov r8, r8)
 8018720:	200012c8 	.word	0x200012c8

08018724 <__malloc_unlock>:
 8018724:	b510      	push	{r4, lr}
 8018726:	4802      	ldr	r0, [pc, #8]	@ (8018730 <__malloc_unlock+0xc>)
 8018728:	f000 f87b 	bl	8018822 <__retarget_lock_release_recursive>
 801872c:	bd10      	pop	{r4, pc}
 801872e:	46c0      	nop			@ (mov r8, r8)
 8018730:	200012c8 	.word	0x200012c8

08018734 <memcmp>:
 8018734:	b530      	push	{r4, r5, lr}
 8018736:	2400      	movs	r4, #0
 8018738:	3901      	subs	r1, #1
 801873a:	42a2      	cmp	r2, r4
 801873c:	d101      	bne.n	8018742 <memcmp+0xe>
 801873e:	2000      	movs	r0, #0
 8018740:	e005      	b.n	801874e <memcmp+0x1a>
 8018742:	5d03      	ldrb	r3, [r0, r4]
 8018744:	3401      	adds	r4, #1
 8018746:	5d0d      	ldrb	r5, [r1, r4]
 8018748:	42ab      	cmp	r3, r5
 801874a:	d0f6      	beq.n	801873a <memcmp+0x6>
 801874c:	1b58      	subs	r0, r3, r5
 801874e:	bd30      	pop	{r4, r5, pc}

08018750 <memset>:
 8018750:	0003      	movs	r3, r0
 8018752:	1882      	adds	r2, r0, r2
 8018754:	4293      	cmp	r3, r2
 8018756:	d100      	bne.n	801875a <memset+0xa>
 8018758:	4770      	bx	lr
 801875a:	7019      	strb	r1, [r3, #0]
 801875c:	3301      	adds	r3, #1
 801875e:	e7f9      	b.n	8018754 <memset+0x4>

08018760 <strchr>:
 8018760:	b2c9      	uxtb	r1, r1
 8018762:	7803      	ldrb	r3, [r0, #0]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d004      	beq.n	8018772 <strchr+0x12>
 8018768:	428b      	cmp	r3, r1
 801876a:	d100      	bne.n	801876e <strchr+0xe>
 801876c:	4770      	bx	lr
 801876e:	3001      	adds	r0, #1
 8018770:	e7f7      	b.n	8018762 <strchr+0x2>
 8018772:	424b      	negs	r3, r1
 8018774:	4159      	adcs	r1, r3
 8018776:	4249      	negs	r1, r1
 8018778:	4008      	ands	r0, r1
 801877a:	e7f7      	b.n	801876c <strchr+0xc>

0801877c <strstr>:
 801877c:	780a      	ldrb	r2, [r1, #0]
 801877e:	b530      	push	{r4, r5, lr}
 8018780:	2a00      	cmp	r2, #0
 8018782:	d10c      	bne.n	801879e <strstr+0x22>
 8018784:	bd30      	pop	{r4, r5, pc}
 8018786:	429a      	cmp	r2, r3
 8018788:	d108      	bne.n	801879c <strstr+0x20>
 801878a:	2301      	movs	r3, #1
 801878c:	5ccc      	ldrb	r4, [r1, r3]
 801878e:	2c00      	cmp	r4, #0
 8018790:	d0f8      	beq.n	8018784 <strstr+0x8>
 8018792:	5cc5      	ldrb	r5, [r0, r3]
 8018794:	42a5      	cmp	r5, r4
 8018796:	d101      	bne.n	801879c <strstr+0x20>
 8018798:	3301      	adds	r3, #1
 801879a:	e7f7      	b.n	801878c <strstr+0x10>
 801879c:	3001      	adds	r0, #1
 801879e:	7803      	ldrb	r3, [r0, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d1f0      	bne.n	8018786 <strstr+0xa>
 80187a4:	0018      	movs	r0, r3
 80187a6:	e7ed      	b.n	8018784 <strstr+0x8>

080187a8 <_sbrk_r>:
 80187a8:	2300      	movs	r3, #0
 80187aa:	b570      	push	{r4, r5, r6, lr}
 80187ac:	4d06      	ldr	r5, [pc, #24]	@ (80187c8 <_sbrk_r+0x20>)
 80187ae:	0004      	movs	r4, r0
 80187b0:	0008      	movs	r0, r1
 80187b2:	602b      	str	r3, [r5, #0]
 80187b4:	f7f1 fa48 	bl	8009c48 <_sbrk>
 80187b8:	1c43      	adds	r3, r0, #1
 80187ba:	d103      	bne.n	80187c4 <_sbrk_r+0x1c>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d000      	beq.n	80187c4 <_sbrk_r+0x1c>
 80187c2:	6023      	str	r3, [r4, #0]
 80187c4:	bd70      	pop	{r4, r5, r6, pc}
 80187c6:	46c0      	nop			@ (mov r8, r8)
 80187c8:	200012c4 	.word	0x200012c4

080187cc <__errno>:
 80187cc:	4b01      	ldr	r3, [pc, #4]	@ (80187d4 <__errno+0x8>)
 80187ce:	6818      	ldr	r0, [r3, #0]
 80187d0:	4770      	bx	lr
 80187d2:	46c0      	nop			@ (mov r8, r8)
 80187d4:	2000022c 	.word	0x2000022c

080187d8 <__libc_init_array>:
 80187d8:	b570      	push	{r4, r5, r6, lr}
 80187da:	2600      	movs	r6, #0
 80187dc:	4c0c      	ldr	r4, [pc, #48]	@ (8018810 <__libc_init_array+0x38>)
 80187de:	4d0d      	ldr	r5, [pc, #52]	@ (8018814 <__libc_init_array+0x3c>)
 80187e0:	1b64      	subs	r4, r4, r5
 80187e2:	10a4      	asrs	r4, r4, #2
 80187e4:	42a6      	cmp	r6, r4
 80187e6:	d109      	bne.n	80187fc <__libc_init_array+0x24>
 80187e8:	2600      	movs	r6, #0
 80187ea:	f000 f86f 	bl	80188cc <_init>
 80187ee:	4c0a      	ldr	r4, [pc, #40]	@ (8018818 <__libc_init_array+0x40>)
 80187f0:	4d0a      	ldr	r5, [pc, #40]	@ (801881c <__libc_init_array+0x44>)
 80187f2:	1b64      	subs	r4, r4, r5
 80187f4:	10a4      	asrs	r4, r4, #2
 80187f6:	42a6      	cmp	r6, r4
 80187f8:	d105      	bne.n	8018806 <__libc_init_array+0x2e>
 80187fa:	bd70      	pop	{r4, r5, r6, pc}
 80187fc:	00b3      	lsls	r3, r6, #2
 80187fe:	58eb      	ldr	r3, [r5, r3]
 8018800:	4798      	blx	r3
 8018802:	3601      	adds	r6, #1
 8018804:	e7ee      	b.n	80187e4 <__libc_init_array+0xc>
 8018806:	00b3      	lsls	r3, r6, #2
 8018808:	58eb      	ldr	r3, [r5, r3]
 801880a:	4798      	blx	r3
 801880c:	3601      	adds	r6, #1
 801880e:	e7f2      	b.n	80187f6 <__libc_init_array+0x1e>
 8018810:	08018bdc 	.word	0x08018bdc
 8018814:	08018bdc 	.word	0x08018bdc
 8018818:	08018be0 	.word	0x08018be0
 801881c:	08018bdc 	.word	0x08018bdc

08018820 <__retarget_lock_acquire_recursive>:
 8018820:	4770      	bx	lr

08018822 <__retarget_lock_release_recursive>:
 8018822:	4770      	bx	lr

08018824 <memcpy>:
 8018824:	2300      	movs	r3, #0
 8018826:	b510      	push	{r4, lr}
 8018828:	429a      	cmp	r2, r3
 801882a:	d100      	bne.n	801882e <memcpy+0xa>
 801882c:	bd10      	pop	{r4, pc}
 801882e:	5ccc      	ldrb	r4, [r1, r3]
 8018830:	54c4      	strb	r4, [r0, r3]
 8018832:	3301      	adds	r3, #1
 8018834:	e7f8      	b.n	8018828 <memcpy+0x4>
	...

08018838 <_free_r>:
 8018838:	b570      	push	{r4, r5, r6, lr}
 801883a:	0005      	movs	r5, r0
 801883c:	1e0c      	subs	r4, r1, #0
 801883e:	d010      	beq.n	8018862 <_free_r+0x2a>
 8018840:	3c04      	subs	r4, #4
 8018842:	6823      	ldr	r3, [r4, #0]
 8018844:	2b00      	cmp	r3, #0
 8018846:	da00      	bge.n	801884a <_free_r+0x12>
 8018848:	18e4      	adds	r4, r4, r3
 801884a:	0028      	movs	r0, r5
 801884c:	f7ff ff62 	bl	8018714 <__malloc_lock>
 8018850:	4a1d      	ldr	r2, [pc, #116]	@ (80188c8 <_free_r+0x90>)
 8018852:	6813      	ldr	r3, [r2, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d105      	bne.n	8018864 <_free_r+0x2c>
 8018858:	6063      	str	r3, [r4, #4]
 801885a:	6014      	str	r4, [r2, #0]
 801885c:	0028      	movs	r0, r5
 801885e:	f7ff ff61 	bl	8018724 <__malloc_unlock>
 8018862:	bd70      	pop	{r4, r5, r6, pc}
 8018864:	42a3      	cmp	r3, r4
 8018866:	d908      	bls.n	801887a <_free_r+0x42>
 8018868:	6820      	ldr	r0, [r4, #0]
 801886a:	1821      	adds	r1, r4, r0
 801886c:	428b      	cmp	r3, r1
 801886e:	d1f3      	bne.n	8018858 <_free_r+0x20>
 8018870:	6819      	ldr	r1, [r3, #0]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	1809      	adds	r1, r1, r0
 8018876:	6021      	str	r1, [r4, #0]
 8018878:	e7ee      	b.n	8018858 <_free_r+0x20>
 801887a:	001a      	movs	r2, r3
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d001      	beq.n	8018886 <_free_r+0x4e>
 8018882:	42a3      	cmp	r3, r4
 8018884:	d9f9      	bls.n	801887a <_free_r+0x42>
 8018886:	6811      	ldr	r1, [r2, #0]
 8018888:	1850      	adds	r0, r2, r1
 801888a:	42a0      	cmp	r0, r4
 801888c:	d10b      	bne.n	80188a6 <_free_r+0x6e>
 801888e:	6820      	ldr	r0, [r4, #0]
 8018890:	1809      	adds	r1, r1, r0
 8018892:	1850      	adds	r0, r2, r1
 8018894:	6011      	str	r1, [r2, #0]
 8018896:	4283      	cmp	r3, r0
 8018898:	d1e0      	bne.n	801885c <_free_r+0x24>
 801889a:	6818      	ldr	r0, [r3, #0]
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	1841      	adds	r1, r0, r1
 80188a0:	6011      	str	r1, [r2, #0]
 80188a2:	6053      	str	r3, [r2, #4]
 80188a4:	e7da      	b.n	801885c <_free_r+0x24>
 80188a6:	42a0      	cmp	r0, r4
 80188a8:	d902      	bls.n	80188b0 <_free_r+0x78>
 80188aa:	230c      	movs	r3, #12
 80188ac:	602b      	str	r3, [r5, #0]
 80188ae:	e7d5      	b.n	801885c <_free_r+0x24>
 80188b0:	6820      	ldr	r0, [r4, #0]
 80188b2:	1821      	adds	r1, r4, r0
 80188b4:	428b      	cmp	r3, r1
 80188b6:	d103      	bne.n	80188c0 <_free_r+0x88>
 80188b8:	6819      	ldr	r1, [r3, #0]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	1809      	adds	r1, r1, r0
 80188be:	6021      	str	r1, [r4, #0]
 80188c0:	6063      	str	r3, [r4, #4]
 80188c2:	6054      	str	r4, [r2, #4]
 80188c4:	e7ca      	b.n	801885c <_free_r+0x24>
 80188c6:	46c0      	nop			@ (mov r8, r8)
 80188c8:	20001188 	.word	0x20001188

080188cc <_init>:
 80188cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ce:	46c0      	nop			@ (mov r8, r8)
 80188d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188d2:	bc08      	pop	{r3}
 80188d4:	469e      	mov	lr, r3
 80188d6:	4770      	bx	lr

080188d8 <_fini>:
 80188d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188da:	46c0      	nop			@ (mov r8, r8)
 80188dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188de:	bc08      	pop	{r3}
 80188e0:	469e      	mov	lr, r3
 80188e2:	4770      	bx	lr
 80188e4:	0000      	movs	r0, r0
	...

080188e8 <__FLASH_Program_Fast_veneer>:
 80188e8:	b401      	push	{r0}
 80188ea:	4802      	ldr	r0, [pc, #8]	@ (80188f4 <__FLASH_Program_Fast_veneer+0xc>)
 80188ec:	4684      	mov	ip, r0
 80188ee:	bc01      	pop	{r0}
 80188f0:	4760      	bx	ip
 80188f2:	bf00      	nop
 80188f4:	2000027d 	.word	0x2000027d

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <BaudRateTest>:
20000004:	00000001                                ....

20000008 <aTxBuffer>:
20000008:	ff000007 00080000                       ........

20000010 <dpytab>:
20000010:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
20000020:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
20000030:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
20000040:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

20000050 <BluetoothState>:
20000050:	00000001                                ....

20000054 <Eventos>:
20000054:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

20000070 <Mediciones>:
20000070:	12222111 00001333                       .!".3...

20000078 <Alarmas>:
20000078:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000088:	00000000                                ....

2000008c <DatosMAC>:
2000008c:	56781234 00009999                       4.xV....

20000094 <DatosFirmware>:
20000094:	                                         ..

20000096 <PNU_0x3000>:
20000096:	                                         ..

20000098 <PNU_0x3004>:
20000098:	                                         (.

2000009a <PNU_0x3006>:
2000009a:	                                         ..

2000009c <PNU_0x3008>:
2000009c:	                                         ..

2000009e <PNU_0x300C>:
2000009e:	                                         ..

200000a0 <PNU_0x3010>:
200000a0:	                                         ..

200000a2 <PNU_0x3012>:
200000a2:	                                         (.

200000a4 <PNU_0x3014>:
200000a4:	                                         ..

200000a6 <PNU_0x3016>:
200000a6:	                                         ..

200000a8 <PNU_0x3018>:
200000a8:	                                         ..

200000aa <PNU_0x301A>:
200000aa:	                                         2.

200000ac <PNU_0x301C>:
200000ac:	                                         Z.

200000ae <PNU_0x301E>:
200000ae:	                                         ..

200000b0 <PNU_0x3104>:
200000b0:	                                         ..

200000b2 <PNU_0x3106>:
200000b2:	                                         ..

200000b4 <PNU_0x3108>:
200000b4:	                                         ..

200000b6 <PNU_0x310A>:
200000b6:	                                         ..

200000b8 <PNU_0x310C>:
200000b8:	                                         _.

200000ba <PNU_0x310E>:
200000ba:	                                         d.

200000bc <Plantilla>:
	...
20000104:	00000001 00000000 00000000 00000000     ................
	...

2000013c <copiaPlantilla>:
	...
20000184:	00000100 00000000 00000000 00000000     ................
	...

200001bc <daysToMonth>:
200001bc:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001cc:	00000078 00000097 000000b6 000000d5     x...............
200001dc:	000000f3 00000111 00000130 0000014e     ........0...N...

200001ec <PFULLDEF_Px_PORT>:
200001ec:	50000400 50000400 50000400 50000400     ...P...P...P...P
200001fc:	50000400                                ...P

20000200 <PFULLDEF_Px_PIN>:
20000200:	40101010 00000010                       ...@....

20000208 <PFULLDEF_MPx_PORT>:
20000208:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000218 <PFULLDEF_MPx_PIN>:
20000218:	08080808                                ....

2000021c <firstFlagPuerta1>:
2000021c:	00000001                                ....

20000220 <SystemCoreClock>:
20000220:	003d0900                                ..=.

20000224 <uwTickPrio>:
20000224:	00000004                                ....

20000228 <uwTickFreq>:
20000228:	00000001                                ....

2000022c <_impure_ptr>:
2000022c:	20000230                                0.. 

20000230 <_impure_data>:
20000230:	00000000 2000118c 200011f4 2000125c     ....... ... \.. 
	...

2000027c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000027c:	b580      	push	{r7, lr}
2000027e:	b088      	sub	sp, #32
20000280:	af00      	add	r7, sp, #0
20000282:	6078      	str	r0, [r7, #4]
20000284:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000286:	231f      	movs	r3, #31
20000288:	18fb      	adds	r3, r7, r3
2000028a:	2200      	movs	r2, #0
2000028c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000028e:	687b      	ldr	r3, [r7, #4]
20000290:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000292:	683b      	ldr	r3, [r7, #0]
20000294:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000296:	4b1a      	ldr	r3, [pc, #104]	@ (20000300 <FLASH_Program_Fast+0x84>)
20000298:	695a      	ldr	r2, [r3, #20]
2000029a:	4b19      	ldr	r3, [pc, #100]	@ (20000300 <FLASH_Program_Fast+0x84>)
2000029c:	2180      	movs	r1, #128	@ 0x80
2000029e:	02c9      	lsls	r1, r1, #11
200002a0:	430a      	orrs	r2, r1
200002a2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002a4:	f3ef 8310 	mrs	r3, PRIMASK
200002a8:	60fb      	str	r3, [r7, #12]
  return(result);
200002aa:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200002ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200002ae:	b672      	cpsid	i
}
200002b0:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200002b2:	e00f      	b.n	200002d4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200002b4:	697a      	ldr	r2, [r7, #20]
200002b6:	69bb      	ldr	r3, [r7, #24]
200002b8:	6812      	ldr	r2, [r2, #0]
200002ba:	601a      	str	r2, [r3, #0]
    src += 4U;
200002bc:	697b      	ldr	r3, [r7, #20]
200002be:	3304      	adds	r3, #4
200002c0:	617b      	str	r3, [r7, #20]
    dest += 4U;
200002c2:	69bb      	ldr	r3, [r7, #24]
200002c4:	3304      	adds	r3, #4
200002c6:	61bb      	str	r3, [r7, #24]
    index++;
200002c8:	211f      	movs	r1, #31
200002ca:	187b      	adds	r3, r7, r1
200002cc:	781a      	ldrb	r2, [r3, #0]
200002ce:	187b      	adds	r3, r7, r1
200002d0:	3201      	adds	r2, #1
200002d2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002d4:	231f      	movs	r3, #31
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2b3f      	cmp	r3, #63	@ 0x3f
200002dc:	d9ea      	bls.n	200002b4 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200002de:	46c0      	nop			@ (mov r8, r8)
200002e0:	4b07      	ldr	r3, [pc, #28]	@ (20000300 <FLASH_Program_Fast+0x84>)
200002e2:	691a      	ldr	r2, [r3, #16]
200002e4:	2380      	movs	r3, #128	@ 0x80
200002e6:	025b      	lsls	r3, r3, #9
200002e8:	4013      	ands	r3, r2
200002ea:	d1f9      	bne.n	200002e0 <FLASH_Program_Fast+0x64>
200002ec:	693b      	ldr	r3, [r7, #16]
200002ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002f0:	68bb      	ldr	r3, [r7, #8]
200002f2:	f383 8810 	msr	PRIMASK, r3
}
200002f6:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002f8:	46c0      	nop			@ (mov r8, r8)
200002fa:	46bd      	mov	sp, r7
200002fc:	b008      	add	sp, #32
200002fe:	bd80      	pop	{r7, pc}
20000300:	40022000 	.word	0x40022000
